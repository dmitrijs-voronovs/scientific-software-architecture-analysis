id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cubeproperties.html:352,Integrability,wrap,wrapper,352,"﻿. CubeProperties. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. CubeProperties¶. class psi4.core.CubeProperties¶; Bases: pybind11_builtins.pybind11_object; docstring; Methods Summary. basisset(self); Returns orbital/primary basis set associated with cubeprop. compute_properties(); Filesystem wrapper for CubeProperties::raw_compute_properties. raw_compute_properties(self); Compute all relevant properties from options object specifications. Methods Documentation. basisset(self: psi4.core.CubeProperties) → psi::BasisSet¶; Returns orbital/primary basis set associated with cubeprop. compute_properties()¶; Filesystem wrapper for CubeProperties::raw_compute_properties. raw_compute_properties(self: psi4.core.CubeProperties) → None¶; Compute all relevant properties from options object specifications. basisset(self: psi4.core.CubeProperties) → psi::BasisSet; Returns orbital/primary basis set associated with cubeprop. compute_properties(); Filesystem wrapper for CubeProperties::raw_compute_properties. raw_compute_properties(self: psi4.core.CubeProperties) → None; Compute all relevant properties from options object specifications. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cubeproperties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cubeproperties.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cubeproperties.html:678,Integrability,wrap,wrapper,678,"﻿. CubeProperties. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. CubeProperties¶. class psi4.core.CubeProperties¶; Bases: pybind11_builtins.pybind11_object; docstring; Methods Summary. basisset(self); Returns orbital/primary basis set associated with cubeprop. compute_properties(); Filesystem wrapper for CubeProperties::raw_compute_properties. raw_compute_properties(self); Compute all relevant properties from options object specifications. Methods Documentation. basisset(self: psi4.core.CubeProperties) → psi::BasisSet¶; Returns orbital/primary basis set associated with cubeprop. compute_properties()¶; Filesystem wrapper for CubeProperties::raw_compute_properties. raw_compute_properties(self: psi4.core.CubeProperties) → None¶; Compute all relevant properties from options object specifications. basisset(self: psi4.core.CubeProperties) → psi::BasisSet; Returns orbital/primary basis set associated with cubeprop. compute_properties(); Filesystem wrapper for CubeProperties::raw_compute_properties. raw_compute_properties(self: psi4.core.CubeProperties) → None; Compute all relevant properties from options object specifications. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cubeproperties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cubeproperties.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cubeproperties.html:1013,Integrability,wrap,wrapper,1013,"﻿. CubeProperties. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. CubeProperties¶. class psi4.core.CubeProperties¶; Bases: pybind11_builtins.pybind11_object; docstring; Methods Summary. basisset(self); Returns orbital/primary basis set associated with cubeprop. compute_properties(); Filesystem wrapper for CubeProperties::raw_compute_properties. raw_compute_properties(self); Compute all relevant properties from options object specifications. Methods Documentation. basisset(self: psi4.core.CubeProperties) → psi::BasisSet¶; Returns orbital/primary basis set associated with cubeprop. compute_properties()¶; Filesystem wrapper for CubeProperties::raw_compute_properties. raw_compute_properties(self: psi4.core.CubeProperties) → None¶; Compute all relevant properties from options object specifications. basisset(self: psi4.core.CubeProperties) → psi::BasisSet; Returns orbital/primary basis set associated with cubeprop. compute_properties(); Filesystem wrapper for CubeProperties::raw_compute_properties. raw_compute_properties(self: psi4.core.CubeProperties) → None; Compute all relevant properties from options object specifications. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cubeproperties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cubeproperties.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:16208,Deployability,update,update,16208,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:16966,Deployability,update,updated,16966,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:3176,Energy Efficiency,charge,charges,3176,"turns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.CUHF, basis: psi4.core.BasisSet) → psi4.core.CUHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wav",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:4298,Energy Efficiency,energy,energy,4298,"n, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.CUHF, basis: psi4.core.BasisSet) → psi4.core.CUHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wav",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:6122,Energy Efficiency,energy,energy,6122,"t[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:6130,Energy Efficiency,energy,energy,6130," equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:6204,Energy Efficiency,energy,energy,6204,"ping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. force_doccpi(",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:6976,Energy Efficiency,energy,energy,6976,"ocstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None¶; Forms the F mat",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:7044,Energy Efficiency,energy,energy,7044,"rrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None¶; Forms the F matrix. form_G(self: psi4.core.HF) → None¶; Forms the G matrix. form_H(self: psi4.core.HF) → None¶; Forms the core Hamiltonian.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:14366,Energy Efficiency,energy,energy,14366,"urns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None¶; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: Li",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:4216,Integrability,wrap,wrapper,4216,"d) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.CUHF, basis: psi4.core.BasisSet) → psi4.core.CUHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:2925,Modifiability,variab,variable,2925,"ial + Kinetic) Integrals. MOM_excited_¶; Are we to do excited-state MOM?. MOM_performed_¶; MOM performed current iteration?. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.CUHF, basis: psi4.core.BasisSet) → psi4.core.CUHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pr",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:3053,Modifiability,variab,variables,3053,"elf: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.CUHF, basis: psi4.core.BasisSet) → psi4.core.CUHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → Non",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:5476,Modifiability,variab,variable,5476,"unction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subse",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:5606,Modifiability,variab,variable,5606,"ial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wav",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:10175,Modifiability,variab,variable,10175," → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → float¶; docstring. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key)¶. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. guess(self: psi4.core.HF) → None¶; Forms the guess (guarantees C, D, and E). guess_Ca(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Alpha Orbital Matrix. guess_Cb(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Beta Orbital Matrix. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. has_variable(key)¶. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. initialize()¶; Specialized initialization, compute integrals and does everything to prepare for iterations. initialize_gtfock_jk(self: psi4.core.HF) → None¶; Sets up a GTFock JK object. initialize_jk(memory, jk=None)¶. initialized_diis_manager_¶; docstring. iteration_¶; docstring. iterations(e_conv=None, d_conv=None)¶. jk(self: psi4.core.HF) → psi4.core.JK¶; Returns the internal JK object. legacy_frequencies()¶. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int¶; Number of Alpha electrons. nalphapi(se",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:10296,Modifiability,variab,variable,10296,"List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → float¶; docstring. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key)¶. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. guess(self: psi4.core.HF) → None¶; Forms the guess (guarantees C, D, and E). guess_Ca(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Alpha Orbital Matrix. guess_Cb(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Beta Orbital Matrix. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. has_variable(key)¶. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. initialize()¶; Specialized initialization, compute integrals and does everything to prepare for iterations. initialize_gtfock_jk(self: psi4.core.HF) → None¶; Sets up a GTFock JK object. initialize_jk(memory, jk=None)¶. initialized_diis_manager_¶; docstring. iteration_¶; docstring. iterations(e_conv=None, d_conv=None)¶. jk(self: psi4.core.HF) → psi4.core.JK¶; Returns the internal JK object. legacy_frequencies()¶. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int¶; Number of Alpha electrons. nalphapi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of alpha orbitals per irrep. name(self: psi4.core.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:13688,Modifiability,variab,variable,13688,"terations(self: psi4.core.HF) → None¶; docstring. push_back_external_potential(self: psi4.core.HF, V: psi4.core.Matrix) → None¶; Add an external potential to the private external_potentials list. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. reset_occupation(self: psi4.core.HF) → None¶; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hes",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:13806,Modifiability,variab,variables,13806,"ne¶; Add an external potential to the private external_potentials list. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. reset_occupation(self: psi4.core.HF) → None¶; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:14067,Modifiability,variab,variable,14067," reset_occupation(self: psi4.core.HF) → None¶; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None¶; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the leve",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:15712,Modifiability,variab,variable,15712,"e.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None¶; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], a",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:16436,Modifiability,inherit,inherited,16436,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:16756,Modifiability,variab,variable,16756,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:16772,Modifiability,variab,variables,16772,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:1990,Performance,perform,performed,1990,"ction) → psi4.core.Matrix¶; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Density Matrix. Db_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Beta Density subset. Fa(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix. Fa_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Fock Matrix. Fb_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. MOM_excited_¶; Are we to do excited-state MOM?. MOM_performed_¶; MOM performed current iteration?. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, p",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:8428,Performance,perform,performed,8428,"soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None¶; Forms the F matrix. form_G(self: psi4.core.HF) → None¶; Forms the G matrix. form_H(self: psi4.core.HF) → None¶; Forms the core Hamiltonian. form_Shalf(self: psi4.core.HF) → None¶; Forms the S^1/2 matrix. form_V(self: psi4.core.HF) → None¶; Form the Kohn-Sham Potential Matrices from the current Density Matrices. form_initial_C(self: psi4.core.HF) → None¶; Forms the initial Orbital Matrices from the current Fock Matrices. form_initial_F(self: psi4.core.HF) → None¶; Forms the initial F matrix. frac_performed_¶; Frac performed current iteration?. frac_renormalize(self: psi4.core.HF) → None¶; docstring. frequencies()¶. static from_file(wfn_data)¶; Summary. Parameters:wfn_data (str or dict) – If a str reads a Wavefunction from a disk otherwise, assumes the data; is passed in. Returns:A deserialized Wavefunction object. Return type:Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. functional(self: psi4.core.HF) → psi4.core.SuperFunctional¶; Returns the internal DFT Superfunctional. get_array(key)¶. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:4207,Usability,simpl,simply,4207,"d) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.CUHF, basis: psi4.core.BasisSet) → psi4.core.CUHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.cuhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dasum.html:391,Deployability,update,updated,391,"﻿. DASUM. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DASUM¶. psi4.core.DASUM(arg0: int, arg1: int, arg2: psi::Vector, arg3: int) → float¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dasum.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dasum.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.daxpy.html:433,Deployability,update,updated,433,"﻿. DAXPY. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DAXPY¶. psi4.core.DAXPY(arg0: int, arg1: int, arg2: float, arg3: psi::Vector, arg4: int, arg5: psi::Vector, arg6: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.daxpy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.daxpy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dcft-1.html:412,Deployability,update,updated,412,"﻿. dcft. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. dcft¶. psi4.core.dcft(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the density cumulant functional theory code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dcft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dcft-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dcft.html:412,Deployability,update,updated,412,"﻿. dcft. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. dcft¶. psi4.core.dcft(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the density cumulant functional theory code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dcft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dcft.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dcopy.html:420,Deployability,update,updated,420,"﻿. DCOPY. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DCOPY¶. psi4.core.DCOPY(arg0: int, arg1: int, arg2: psi::Vector, arg3: int, arg4: psi::Vector, arg5: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dcopy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.ddot.html:418,Deployability,update,updated,418,"﻿. DDOT. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DDOT¶. psi4.core.DDOT(arg0: int, arg1: int, arg2: psi::Vector, arg3: int, arg4: psi::Vector, arg5: int) → float¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.ddot.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.ddot.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_array_variable-1.html:438,Deployability,update,updated,438,"﻿. del_array_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. del_array_variable¶. psi4.core.del_array_variable(arg0: str) → None¶; Removes the requested (case-insensitive) Matrix QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.del_array_variable-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_array_variable-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_array_variable-1.html:248,Modifiability,variab,variable,248,"﻿. del_array_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. del_array_variable¶. psi4.core.del_array_variable(arg0: str) → None¶; Removes the requested (case-insensitive) Matrix QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.del_array_variable-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_array_variable-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_array_variable.html:438,Deployability,update,updated,438,"﻿. del_array_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. del_array_variable¶. psi4.core.del_array_variable(arg0: str) → None¶; Removes the requested (case-insensitive) Matrix QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.del_array_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_array_variable.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_array_variable.html:248,Modifiability,variab,variable,248,"﻿. del_array_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. del_array_variable¶. psi4.core.del_array_variable(arg0: str) → None¶; Removes the requested (case-insensitive) Matrix QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.del_array_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_array_variable.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_scalar_variable-1.html:431,Deployability,update,updated,431,"﻿. del_scalar_variable. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. del_scalar_variable¶. psi4.core.del_scalar_variable(arg0: str) → None¶; Removes the requested (case-insensitive) double QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.del_scalar_variable-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_scalar_variable-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_scalar_variable-1.html:246,Modifiability,variab,variable,246,"﻿. del_scalar_variable. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. del_scalar_variable¶. psi4.core.del_scalar_variable(arg0: str) → None¶; Removes the requested (case-insensitive) double QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.del_scalar_variable-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_scalar_variable-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_scalar_variable.html:431,Deployability,update,updated,431,"﻿. del_scalar_variable. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. del_scalar_variable¶. psi4.core.del_scalar_variable(arg0: str) → None¶; Removes the requested (case-insensitive) double QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.del_scalar_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_scalar_variable.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_scalar_variable.html:246,Modifiability,variab,variable,246,"﻿. del_scalar_variable. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. del_scalar_variable¶. psi4.core.del_scalar_variable(arg0: str) → None¶; Removes the requested (case-insensitive) double QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.del_scalar_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.del_scalar_variable.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.deriv.html:1715,Deployability,update,updated,1715,"﻿. Deriv. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. Deriv¶. class psi4.core.Deriv¶; Bases: pybind11_builtins.pybind11_object; Computes gradients of wavefunctions; Methods Summary. compute(self); Compute the gradient. set_deriv_density_backtransformed(self, val); Is the deriv_density already backtransformed? Default is False. set_ignore_reference(self, val); Ignore reference contributions to the gradient? Default is False. set_tpdm_presorted(self, val); Is the TPDM already presorted? Default is False. Methods Documentation. compute(self: psi4.core.Deriv) → psi4.core.Matrix¶; Compute the gradient. set_deriv_density_backtransformed(self: psi4.core.Deriv, val: bool=False) → None¶; Is the deriv_density already backtransformed? Default is False. set_ignore_reference(self: psi4.core.Deriv, val: bool=False) → None¶; Ignore reference contributions to the gradient? Default is False. set_tpdm_presorted(self: psi4.core.Deriv, val: bool=False) → None¶; Is the TPDM already presorted? Default is False. compute(self: psi4.core.Deriv) → psi4.core.Matrix; Compute the gradient. set_deriv_density_backtransformed(self: psi4.core.Deriv, val: bool=False) → None; Is the deriv_density already backtransformed? Default is False. set_ignore_reference(self: psi4.core.Deriv, val: bool=False) → None; Ignore reference contributions to the gradient? Default is False. set_tpdm_presorted(self: psi4.core.Deriv, val: bool=False) → None; Is the TPDM already presorted? Default is False. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.deriv.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.deriv.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.detci-1.html:207,Deployability,configurat,configuration,207,"﻿. detci. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. detci¶. psi4.core.detci(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the determinant-based configuration interaction code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.detci-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.detci-1.html:414,Deployability,update,updated,414,"﻿. detci. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. detci¶. psi4.core.detci(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the determinant-based configuration interaction code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.detci-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.detci-1.html:207,Modifiability,config,configuration,207,"﻿. detci. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. detci¶. psi4.core.detci(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the determinant-based configuration interaction code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.detci-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.detci.html:207,Deployability,configurat,configuration,207,"﻿. detci. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. detci¶. psi4.core.detci(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the determinant-based configuration interaction code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.detci.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.detci.html:414,Deployability,update,updated,414,"﻿. detci. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. detci¶. psi4.core.detci(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the determinant-based configuration interaction code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.detci.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.detci.html:207,Modifiability,config,configuration,207,"﻿. detci. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. detci¶. psi4.core.detci(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the determinant-based configuration interaction code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.detci.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:11557,Deployability,update,updated,11557,"psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:348,Energy Efficiency,energy,energy,348,"﻿. DFEP2Wavefunction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DFEP2Wavefunction¶. class psi4.core.DFEP2Wavefunction¶; Bases: psi4.core.Wavefunction; A density-fitted second-order Electron Propagator Wavefunction.; Methods Summary. compute(self, arg0); Computes the density-fitted EP2 energy for the input orbitals. Methods Documentation. compute(self: psi4.core.DFEP2Wavefunction, arg0: List[List[int]]) → List[List[Tuple[float, float]]]¶; Computes the density-fitted EP2 energy for the input orbitals. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Alpha Orbital subset. Cb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Orbitals. Cb_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Beta Orbital subset. Da(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Density Matrix. Db_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Beta Density subset. Fa(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix. Fa_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Fock Matrix. Fb_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether runni",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:536,Energy Efficiency,energy,energy,536,"﻿. DFEP2Wavefunction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DFEP2Wavefunction¶. class psi4.core.DFEP2Wavefunction¶; Bases: psi4.core.Wavefunction; A density-fitted second-order Electron Propagator Wavefunction.; Methods Summary. compute(self, arg0); Computes the density-fitted EP2 energy for the input orbitals. Methods Documentation. compute(self: psi4.core.DFEP2Wavefunction, arg0: List[List[int]]) → List[List[Tuple[float, float]]]¶; Computes the density-fitted EP2 energy for the input orbitals. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Alpha Orbital subset. Cb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Orbitals. Cb_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Beta Orbital subset. Da(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Density Matrix. Db_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Beta Density subset. Fa(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix. Fa_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Fock Matrix. Fb_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether runni",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:2827,Energy Efficiency,charge,charges,2827,"sis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute(self: psi4.core.DFEP2Wavefunction, arg0: List[List[int]]) → List[List[Tuple[float, float]]]; Computes the density-fitted EP2 energy for the input orbitals. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:3653,Energy Efficiency,energy,energy,3653,"core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute(self: psi4.core.DFEP2Wavefunction, arg0: List[List[int]]) → List[List[Tuple[float, float]]]; Computes the density-fitted EP2 energy for the input orbitals. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occu",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:3752,Energy Efficiency,energy,energy,3752,"self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute(self: psi4.core.DFEP2Wavefunction, arg0: List[List[int]]) → List[List[Tuple[float, float]]]; Computes the density-fitted EP2 energy for the input orbitals. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunc",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:4708,Energy Efficiency,energy,energy,4708,"pute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:4716,Energy Efficiency,energy,energy,4716,"ion) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use onl",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:4790,Energy Efficiency,energy,energy,4790,"vefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribt",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:9702,Energy Efficiency,energy,energy,9702,"on¶; Returns the number of symmetry orbitals per irrep. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:2576,Modifiability,variab,variable,2576,"Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Fock Matrix. Fb_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute(self: psi4.core.DFE",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:2704,Modifiability,variab,variables,2704,"Matrix. Fb_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute(self: psi4.core.DFEP2Wavefunction, arg0: List[List[int]]) → List[List[Tuple[float, float]]]; Computes the density-fitted EP2 energy for the input orbitals. ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:4229,Modifiability,variab,variable,4229,".Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute(self: psi4.core.DFEP2Wavefunction, arg0: List[List[int]]) → List[List[Tuple[float, float]]]; Computes the density-fitted EP2 energy for the input orbitals. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → ps",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:4359,Modifiability,variab,variable,4359,"(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute(self: psi4.core.DFEP2Wavefunction, arg0: List[List[int]]) → List[List[Tuple[float, float]]]; Computes the density-fitted EP2 energy for the input orbitals. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; r",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:7093,Modifiability,variab,variable,7093,"n object. Return type:Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. get_array(key)¶. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key)¶. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. has_variable(key)¶. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. legacy_frequencies()¶. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int¶; Number of Alpha electrons. nalphapi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of alpha orbitals per irrep. name(self: psi4.core.Wavefunction) → str¶; The level of theory this wavefunction corresponds to. nbeta(self: psi4.core.Wavefunction) → int¶; Number of Beta electrons. nbetapi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of beta orbitals per irrep. nfrzc(self: psi4.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:7214,Modifiability,variab,variable,7214,"ozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. get_array(key)¶. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key)¶. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. has_variable(key)¶. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. legacy_frequencies()¶. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int¶; Number of Alpha electrons. nalphapi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of alpha orbitals per irrep. name(self: psi4.core.Wavefunction) → str¶; The level of theory this wavefunction corresponds to. nbeta(self: psi4.core.Wavefunction) → int¶; Number of Beta electrons. nbetapi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of beta orbitals per irrep. nfrzc(self: psi4.core.Wavefunction) → int¶; Number of frozen core electrons. nirrep(self: psi4.core.Wavefunction) → int¶; Number of irreps",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:9188,Modifiability,variab,variable,9188,"p(self: psi4.core.Wavefunction) → int¶; Number of irreps in the system. nmo(self: psi4.core.Wavefunction) → int¶; Number of molecule orbitals. nmopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of molecular orbitals per irrep. no_occupations(self: psi4.core.Wavefunction) → List[List[Tuple[float, int, int]]]¶; returns the natural orbital occupations on the wavefunction. nso(self: psi4.core.Wavefunction) → int¶; Number of symmetry orbitals. nsopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of symmetry orbitals per irrep. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:9306,Modifiability,variab,variables,9306,"molecule orbitals. nmopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of molecular orbitals per irrep. no_occupations(self: psi4.core.Wavefunction) → List[List[Tuple[float, int, int]]]¶; returns the natural orbital occupations on the wavefunction. nso(self: psi4.core.Wavefunction) → int¶; Number of symmetry orbitals. nsopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of symmetry orbitals per irrep. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:9480,Modifiability,variab,variable,9480,"ist[List[Tuple[float, int, int]]]¶; returns the natural orbital occupations on the wavefunction. nso(self: psi4.core.Wavefunction) → int¶; Number of symmetry orbitals. nsopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of symmetry orbitals per irrep. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunc",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:10668,Modifiability,variab,variable,10668,"(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:11174,Modifiability,inherit,inherited,11174,"psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:11347,Modifiability,variab,variable,11347,"psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html:11363,Modifiability,variab,variables,11363,"psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfep2wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfhelper.html:4329,Deployability,update,updated,4329," transform(self: psi4.core.DFHelper) → None¶. transpose(self: psi4.core.DFHelper, arg0: str, arg1: Tuple[int, int, int]) → None¶. add_space(self: psi4.core.DFHelper, arg0: str, arg1: psi4.core.Matrix) → None. add_transformation(self: psi4.core.DFHelper, name: str, key1: str, key2: str, order: str='Qpq') → None. clear_all(self: psi4.core.DFHelper) → None. clear_spaces(self: psi4.core.DFHelper) → None. get_AO_core(self: psi4.core.DFHelper) → bool. get_AO_size(self: psi4.core.DFHelper) → int. get_MO_core(self: psi4.core.DFHelper) → bool. get_memory(self: psi4.core.DFHelper) → int. get_method(self: psi4.core.DFHelper) → str. get_schwarz_cutoff(self: psi4.core.DFHelper) → float. get_space_size(self: psi4.core.DFHelper, arg0: str) → int. get_tensor(*args, **kwargs); Overloaded function. get_tensor(self: psi4.core.DFHelper, arg0: str) -> psi4.core.Matrix; get_tensor(self: psi4.core.DFHelper, arg0: str, arg1: List[int], arg2: List[int], arg3: List[int]) -> psi4.core.Matrix. get_tensor_shape(self: psi4.core.DFHelper, arg0: str) → Tuple[int, int, int]. get_tensor_size(self: psi4.core.DFHelper, arg0: str) → int. hold_met(self: psi4.core.DFHelper, arg0: bool) → None. initialize(self: psi4.core.DFHelper) → None. print_header(self: psi4.core.DFHelper) → None. set_AO_core(self: psi4.core.DFHelper, arg0: bool) → None. set_MO_core(self: psi4.core.DFHelper, arg0: bool) → None. set_memory(self: psi4.core.DFHelper, arg0: int) → None. set_method(self: psi4.core.DFHelper, arg0: str) → None. set_nthreads(self: psi4.core.DFHelper, arg0: int) → None. set_schwarz_cutoff(self: psi4.core.DFHelper, arg0: float) → None. transform(self: psi4.core.DFHelper) → None. transpose(self: psi4.core.DFHelper, arg0: str, arg1: Tuple[int, int, int]) → None. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfhelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfhelper.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfmp2-1.html:387,Deployability,update,updated,387,"﻿. dfmp2. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. dfmp2¶. psi4.core.dfmp2(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the DF-MP2 code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfmp2-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfmp2.html:387,Deployability,update,updated,387,"﻿. dfmp2. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. dfmp2¶. psi4.core.dfmp2(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the DF-MP2 code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfmp2.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfocc-1.html:417,Deployability,update,updated,417,"﻿. dfocc. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. dfocc¶. psi4.core.dfocc(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the density-fitted orbital optimized CC codes. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfocc-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfocc-1.html:217,Performance,optimiz,optimized,217,"﻿. dfocc. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. dfocc¶. psi4.core.dfocc(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the density-fitted orbital optimized CC codes. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfocc-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfocc.html:417,Deployability,update,updated,417,"﻿. dfocc. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. dfocc¶. psi4.core.dfocc(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the density-fitted orbital optimized CC codes. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfocc.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfocc.html:217,Performance,optimiz,optimized,217,"﻿. dfocc. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. dfocc¶. psi4.core.dfocc(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the density-fitted orbital optimized CC codes. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfocc.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfsomcscf.html:1432,Deployability,update,update,1432,"﻿. DFSOMCSCF. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DFSOMCSCF¶. class psi4.core.DFSOMCSCF¶; Bases: psi4.core.SOMCSCF; docstring. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int=2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfsomcscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfsomcscf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfsomcscf.html:1846,Deployability,update,updated,1846,"﻿. DFSOMCSCF. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DFSOMCSCF¶. class psi4.core.DFSOMCSCF¶; Bases: psi4.core.SOMCSCF; docstring. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int=2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dfsomcscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dfsomcscf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dftensor.html:1449,Deployability,update,updated,1449,"﻿. DFTensor. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DFTensor¶. class psi4.core.DFTensor¶; Bases: pybind11_builtins.pybind11_object; docstring; Methods Summary. Idfmo(self); doctsring. Imo(self); doctsring. Qmo(self); doctsring. Qoo(self); doctsring. Qov(self); doctsring. Qso(self); doctsring. Qvv(self); doctsring. Methods Documentation. Idfmo(self: psi4.core.DFTensor) → psi4.core.Matrix¶; doctsring. Imo(self: psi4.core.DFTensor) → psi4.core.Matrix¶; doctsring. Qmo(self: psi4.core.DFTensor) → psi4.core.Matrix¶; doctsring. Qoo(self: psi4.core.DFTensor) → psi4.core.Matrix¶; doctsring. Qov(self: psi4.core.DFTensor) → psi4.core.Matrix¶; doctsring. Qso(self: psi4.core.DFTensor) → psi4.core.Matrix¶; doctsring. Qvv(self: psi4.core.DFTensor) → psi4.core.Matrix¶; doctsring. Idfmo(self: psi4.core.DFTensor) → psi4.core.Matrix; doctsring. Imo(self: psi4.core.DFTensor) → psi4.core.Matrix; doctsring. Qmo(self: psi4.core.DFTensor) → psi4.core.Matrix; doctsring. Qoo(self: psi4.core.DFTensor) → psi4.core.Matrix; doctsring. Qov(self: psi4.core.DFTensor) → psi4.core.Matrix; doctsring. Qso(self: psi4.core.DFTensor) → psi4.core.Matrix; doctsring. Qvv(self: psi4.core.DFTensor) → psi4.core.Matrix; doctsring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dftensor.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dftensor.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dftgrid.html:1642,Deployability,update,updated,1642,"﻿. DFTGrid. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DFTGrid¶. class psi4.core.DFTGrid¶; Bases: psi4.core.MolecularGrid; docstring; Methods Summary. build(*args, **kwargs); Overloaded function. Methods Documentation. build(*args, **kwargs)¶; Overloaded function. build(arg0: psi4.core.Molecule, arg1: psi4.core.BasisSet) -> psi4.core.DFTGrid; build(arg0: psi4.core.Molecule, arg1: psi4.core.BasisSet, arg2: Dict[str, int], arg3: Dict[str, str]) -> psi4.core.DFTGrid. blocks(self: psi4.core.MolecularGrid) → List[psi4.core.BlockOPoints]¶; Returns a list of blocks. build(*args, **kwargs); Overloaded function. build(arg0: psi4.core.Molecule, arg1: psi4.core.BasisSet) -> psi4.core.DFTGrid; build(arg0: psi4.core.Molecule, arg1: psi4.core.BasisSet, arg2: Dict[str, int], arg3: Dict[str, str]) -> psi4.core.DFTGrid. collocation_size(self: psi4.core.MolecularGrid) → int¶; Returns the total collocation size of all blocks. max_functions(self: psi4.core.MolecularGrid) → int¶; Returns the maximum number of functions in a block. max_points(self: psi4.core.MolecularGrid) → int¶; Returns the maximum number of points in a block. npoints(self: psi4.core.MolecularGrid) → int¶; Returns the number of grid points. orientation(self: psi4.core.MolecularGrid) → psi4.core.Matrix¶; Returns the orientation of the grid. print(self: psi4.core.MolecularGrid, arg0: str, arg1: int) → None¶; Prints grid information. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dftgrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dftgrid.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dgbmv.html:524,Deployability,update,updated,524,"﻿. DGBMV. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DGBMV¶. psi4.core.DGBMV(arg0: int, arg1: str, arg2: int, arg3: int, arg4: int, arg5: int, arg6: float, arg7: psi::Matrix, arg8: int, arg9: psi::Vector, arg10: int, arg11: float, arg12: psi::Vector, arg13: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dgbmv.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dgbmv.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dgeev.html:543,Deployability,update,updated,543,"﻿. DGEEV. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DGEEV¶. psi4.core.DGEEV(arg0: int, arg1: str, arg2: str, arg3: int, arg4: psi::Matrix, arg5: int, arg6: psi::Vector, arg7: psi::Vector, arg8: psi::Matrix, arg9: int, arg10: psi::Matrix, arg11: int, arg12: psi::Vector, arg13: int) → int¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dgeev.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dgeev.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dgemm.html:524,Deployability,update,updated,524,"﻿. DGEMM. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DGEMM¶. psi4.core.DGEMM(arg0: int, arg1: str, arg2: str, arg3: int, arg4: int, arg5: int, arg6: float, arg7: psi::Matrix, arg8: int, arg9: psi::Matrix, arg10: int, arg11: float, arg12: psi::Matrix, arg13: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dgemm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dgemm.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dgemv.html:500,Deployability,update,updated,500,"﻿. DGEMV. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DGEMV¶. psi4.core.DGEMV(arg0: int, arg1: str, arg2: int, arg3: int, arg4: float, arg5: psi::Matrix, arg6: int, arg7: psi::Vector, arg8: int, arg9: float, arg10: psi::Vector, arg11: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dgemv.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dgemv.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dger.html:471,Deployability,update,updated,471,"﻿. DGER. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DGER¶. psi4.core.DGER(arg0: int, arg1: int, arg2: int, arg3: float, arg4: psi::Vector, arg5: int, arg6: psi::Vector, arg7: int, arg8: psi::Matrix, arg9: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dger.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dger.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dgetrf.html:425,Deployability,update,updated,425,"﻿. DGETRF. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DGETRF¶. psi4.core.DGETRF(arg0: int, arg1: int, arg2: int, arg3: psi::Matrix, arg4: int, arg5: psi::IntVector) → int¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dgetrf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dgetrf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dgetri.html:444,Deployability,update,updated,444,"﻿. DGETRI. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DGETRI¶. psi4.core.DGETRI(arg0: int, arg1: int, arg2: psi::Matrix, arg3: int, arg4: psi::IntVector, arg5: psi::Vector, arg6: int) → int¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dgetri.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dgetri.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dgetrs.html:466,Deployability,update,updated,466,"﻿. DGETRS. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DGETRS¶. psi4.core.DGETRS(arg0: int, arg1: str, arg2: int, arg3: int, arg4: psi::Matrix, arg5: int, arg6: psi::IntVector, arg7: psi::Matrix, arg8: int) → int¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dgetrs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dgetrs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.diagonalizeorder.html:691,Deployability,update,updated,691,"﻿. DiagonalizeOrder. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DiagonalizeOrder¶. class psi4.core.DiagonalizeOrder¶; Bases: pybind11_builtins.pybind11_object; Defines ordering of eigenvalues after diagonalization; Attributes Summary. Ascending. Descending. Attributes Documentation. Ascending = DiagonalizeOrder.Ascending¶. Descending = DiagonalizeOrder.Descending¶. Ascending = DiagonalizeOrder.Ascending. Descending = DiagonalizeOrder.Descending. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.diagonalizeorder.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.diagonalizeorder.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.diismanager.html:763,Deployability,update,updated,763,"﻿. DIISManager. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DIISManager¶. class psi4.core.DIISManager¶; Bases: pybind11_builtins.pybind11_object; docstring; Methods Summary. delete_diis_file(self); docstring. reset_subspace(self); docstring. Methods Documentation. delete_diis_file(self: psi4.core.DIISManager) → None¶; docstring. reset_subspace(self: psi4.core.DIISManager) → None¶; docstring. delete_diis_file(self: psi4.core.DIISManager) → None; docstring. reset_subspace(self: psi4.core.DIISManager) → None; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.diismanager.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.diismanager.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dimension.html:3489,Deployability,update,updated,3489,"→ None¶; Print out the dimension object to the output file. sum(*args, **kwargs)¶; Overloaded function. sum(self: psi4.core.Dimension) -> int. Gets the sum of the values in the dimension object. sum(self: psi4.core.Dimension) -> int. Return the sum of constituent dimensions. to_tuple()¶; Converts a core.Dimension object to a tuple. zero(*args, **kwargs)¶; Overloaded function. zero(self: psi4.core.Dimension) -> None. Zeros all values in the dimension object. zero(self: psi4.core.Dimension) -> None. Zero all elements. fill(self: psi4.core.Dimension, val: int) → None; Fill all elements with given value. classmethod from_list(dims, name='New Dimension'); Builds a core.Dimension object from a python list or tuple. If a dimension; object is passed a copy will be returned. init(self: psi4.core.Dimension, arg0: int, arg1: str) → None; Re-initializes the dimension object. max(*args, **kwargs); Overloaded function. max(self: psi4.core.Dimension) -> int. Gets the maximum value from the dimension object. max(self: psi4.core.Dimension) -> int. Return the maximum element. n(self: psi4.core.Dimension) → int; The order of the dimension. name; The name of the dimension. Used in printing. print_out(self: psi4.core.Dimension) → None; Print out the dimension object to the output file. sum(*args, **kwargs); Overloaded function. sum(self: psi4.core.Dimension) -> int. Gets the sum of the values in the dimension object. sum(self: psi4.core.Dimension) -> int. Return the sum of constituent dimensions. to_tuple(); Converts a core.Dimension object to a tuple. zero(*args, **kwargs); Overloaded function. zero(self: psi4.core.Dimension) -> None. Zeros all values in the dimension object. zero(self: psi4.core.Dimension) -> None. Zero all elements. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dimension.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dimension.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dipoleint.html:721,Deployability,update,updated,721,"﻿. DipoleInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DipoleInt¶. class psi4.core.DipoleInt¶; Bases: psi4.core.OneBodyAOInt; Computes dipole integrals. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. origin¶; The origin about which the one body ints are being computed. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dipoleint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dipoleint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.disksomcscf.html:1438,Deployability,update,update,1438,"﻿. DiskSOMCSCF. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DiskSOMCSCF¶. class psi4.core.DiskSOMCSCF¶; Bases: psi4.core.SOMCSCF; docstring. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int=2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.disksomcscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.disksomcscf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.disksomcscf.html:1852,Deployability,update,updated,1852,"﻿. DiskSOMCSCF. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DiskSOMCSCF¶. class psi4.core.DiskSOMCSCF¶; Bases: psi4.core.SOMCSCF; docstring. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int=2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.disksomcscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.disksomcscf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dispersion.html:4578,Deployability,update,updated,4578,"persion, arg0: str) → None¶; docstring. sr6(self: psi4.core.Dispersion) → float¶; docstring. a1(self: psi4.core.Dispersion) → float; docstring. a2(self: psi4.core.Dispersion) → float; docstring. bibtex(self: psi4.core.Dispersion) → str; Get the BibTeX key for the literature reference. build(type: str, s6: float=0.0, alpha6: float=0.0, sr6: float=0.0) → psi4.core.Dispersion; Initialize instance capable of computing a dispersion correction of type. citation(self: psi4.core.Dispersion) → str; docstring. compute_energy(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → float; docstring. compute_gradient(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → psi4.core.Matrix; docstring. compute_hessian(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → psi4.core.Matrix; docstring. d(self: psi4.core.Dispersion) → float; docstring. description(self: psi4.core.Dispersion) → str; docstring. name(self: psi4.core.Dispersion) → str; docstring. print_energy(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → str; docstring. print_gradient(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → str; docstring. print_hessian(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → str; docstring. print_out(self: psi4.core.Dispersion) → None; docstring. s6(self: psi4.core.Dispersion) → float; docstring. s8(self: psi4.core.Dispersion) → float; docstring. set_bibtex(self: psi4.core.Dispersion, arg0: str) → None; Set the BibTeX key for the literature reference. set_citation(self: psi4.core.Dispersion, arg0: str) → None; docstring. set_description(self: psi4.core.Dispersion, arg0: str) → None; docstring. set_name(self: psi4.core.Dispersion, arg0: str) → None; docstring. sr6(self: psi4.core.Dispersion) → float; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dispersion.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dmrg-1.html:370,Deployability,update,updated,370,"﻿. dmrg. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. dmrg¶. psi4.core.dmrg(arg0: psi::Wavefunction) → float¶; Runs the DMRG code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dmrg-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dmrg-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dmrg.html:370,Deployability,update,updated,370,"﻿. dmrg. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. dmrg¶. psi4.core.dmrg(arg0: psi::Wavefunction) → float¶; Runs the DMRG code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dmrg.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dmrg.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dnrm2.html:391,Deployability,update,updated,391,"﻿. DNRM2. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DNRM2¶. psi4.core.DNRM2(arg0: int, arg1: int, arg2: psi::Vector, arg3: int) → float¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dnrm2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dnrm2.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.doublet-1.html:522,Deployability,update,updated,522,"﻿. doublet. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. doublet¶. psi4.core.doublet(A: psi4.core.Matrix, B: psi4.core.Matrix, transA: bool=False, transB: bool=False) → psi4.core.Matrix¶; Returns the multiplication of two matrices A and B, with options to transpose each beforehand. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.doublet-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.doublet-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.doublet.html:522,Deployability,update,updated,522,"﻿. doublet. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. doublet¶. psi4.core.doublet(A: psi4.core.Matrix, B: psi4.core.Matrix, transA: bool=False, transB: bool=False) → psi4.core.Matrix¶; Returns the multiplication of two matrices A and B, with options to transpose each beforehand. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.doublet.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.doublet.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dpotrf.html:403,Deployability,update,updated,403,"﻿. DPOTRF. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DPOTRF¶. psi4.core.DPOTRF(arg0: int, arg1: str, arg2: int, arg3: psi::Matrix, arg4: int) → int¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dpotrf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dpotrf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dpotri.html:403,Deployability,update,updated,403,"﻿. DPOTRI. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DPOTRI¶. psi4.core.DPOTRI(arg0: int, arg1: str, arg2: int, arg3: psi::Matrix, arg4: int) → int¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dpotri.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dpotri.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dpotrs.html:444,Deployability,update,updated,444,"﻿. DPOTRS. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DPOTRS¶. psi4.core.DPOTRS(arg0: int, arg1: str, arg2: int, arg3: int, arg4: psi::Matrix, arg5: int, arg6: psi::Matrix, arg7: int) → int¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dpotrs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dpotrs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.drot.html:443,Deployability,update,updated,443,"﻿. DROT. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DROT¶. psi4.core.DROT(arg0: int, arg1: int, arg2: psi::Vector, arg3: int, arg4: psi::Vector, arg5: int, arg6: float, arg7: float) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.drot.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.drot.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsbmv.html:500,Deployability,update,updated,500,"﻿. DSBMV. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DSBMV¶. psi4.core.DSBMV(arg0: int, arg1: str, arg2: int, arg3: int, arg4: float, arg5: psi::Matrix, arg6: int, arg7: psi::Vector, arg8: int, arg9: float, arg10: psi::Vector, arg11: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dsbmv.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsbmv.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dscal.html:403,Deployability,update,updated,403,"﻿. DSCAL. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DSCAL¶. psi4.core.DSCAL(arg0: int, arg1: int, arg2: float, arg3: psi::Vector, arg4: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dscal.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dscal.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dswap.html:420,Deployability,update,updated,420,"﻿. DSWAP. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DSWAP¶. psi4.core.DSWAP(arg0: int, arg1: int, arg2: psi::Vector, arg3: int, arg4: psi::Vector, arg5: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dswap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dswap.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsyev.html:460,Deployability,update,updated,460,"﻿. DSYEV. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DSYEV¶. psi4.core.DSYEV(arg0: int, arg1: str, arg2: str, arg3: int, arg4: psi::Matrix, arg5: int, arg6: psi::Vector, arg7: psi::Vector, arg8: int) → int¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dsyev.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsyev.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsymm.html:512,Deployability,update,updated,512,"﻿. DSYMM. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DSYMM¶. psi4.core.DSYMM(arg0: int, arg1: str, arg2: str, arg3: int, arg4: int, arg5: float, arg6: psi::Matrix, arg7: int, arg8: psi::Matrix, arg9: int, arg10: float, arg11: psi::Matrix, arg12: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dsymm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsymm.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsymv.html:488,Deployability,update,updated,488,"﻿. DSYMV. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DSYMV¶. psi4.core.DSYMV(arg0: int, arg1: str, arg2: int, arg3: float, arg4: psi::Matrix, arg5: int, arg6: psi::Vector, arg7: int, arg8: float, arg9: psi::Vector, arg10: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dsymv.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsymv.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsyr.html:441,Deployability,update,updated,441,"﻿. DSYR. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DSYR¶. psi4.core.DSYR(arg0: int, arg1: str, arg2: int, arg3: float, arg4: psi::Vector, arg5: int, arg6: psi::Matrix, arg7: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dsyr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsyr.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsyr2.html:474,Deployability,update,updated,474,"﻿. DSYR2. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DSYR2¶. psi4.core.DSYR2(arg0: int, arg1: str, arg2: int, arg3: float, arg4: psi::Vector, arg5: int, arg6: psi::Vector, arg7: int, arg8: psi::Matrix, arg9: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dsyr2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsyr2.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsyr2k.html:515,Deployability,update,updated,515,"﻿. DSYR2K. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DSYR2K¶. psi4.core.DSYR2K(arg0: int, arg1: str, arg2: str, arg3: int, arg4: int, arg5: float, arg6: psi::Matrix, arg7: int, arg8: psi::Matrix, arg9: int, arg10: float, arg11: psi::Matrix, arg12: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dsyr2k.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsyr2k.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsyrk.html:480,Deployability,update,updated,480,"﻿. DSYRK. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DSYRK¶. psi4.core.DSYRK(arg0: int, arg1: str, arg2: str, arg3: int, arg4: int, arg5: float, arg6: psi::Matrix, arg7: int, arg8: float, arg9: psi::Matrix, arg10: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dsyrk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsyrk.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsysv.html:494,Deployability,update,updated,494,"﻿. DSYSV. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DSYSV¶. psi4.core.DSYSV(arg0: int, arg1: str, arg2: int, arg3: int, arg4: psi::Matrix, arg5: int, arg6: psi::IntVector, arg7: psi::Matrix, arg8: int, arg9: psi::Vector, arg10: int) → int¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dsysv.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dsysv.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dtbmv.html:464,Deployability,update,updated,464,"﻿. DTBMV. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DTBMV¶. psi4.core.DTBMV(arg0: int, arg1: str, arg2: str, arg3: str, arg4: int, arg5: int, arg6: psi::Matrix, arg7: int, arg8: psi::Vector, arg9: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dtbmv.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dtbmv.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dtbsv.html:464,Deployability,update,updated,464,"﻿. DTBSV. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DTBSV¶. psi4.core.DTBSV(arg0: int, arg1: str, arg2: str, arg3: str, arg4: int, arg5: int, arg6: psi::Matrix, arg7: int, arg8: psi::Vector, arg9: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dtbsv.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dtbsv.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dtrmm.html:490,Deployability,update,updated,490,"﻿. DTRMM. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DTRMM¶. psi4.core.DTRMM(arg0: int, arg1: str, arg2: str, arg3: str, arg4: str, arg5: int, arg6: int, arg7: float, arg8: psi::Matrix, arg9: int, arg10: psi::Matrix, arg11: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dtrmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dtrmm.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dtrmv.html:453,Deployability,update,updated,453,"﻿. DTRMV. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DTRMV¶. psi4.core.DTRMV(arg0: int, arg1: str, arg2: str, arg3: str, arg4: int, arg5: psi::Matrix, arg6: int, arg7: psi::Vector, arg8: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dtrmv.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dtrmv.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dtrsm.html:490,Deployability,update,updated,490,"﻿. DTRSM. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DTRSM¶. psi4.core.DTRSM(arg0: int, arg1: str, arg2: str, arg3: str, arg4: str, arg5: int, arg6: int, arg7: float, arg8: psi::Matrix, arg9: int, arg10: psi::Matrix, arg11: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dtrsm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dtrsm.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.dtrsv.html:453,Deployability,update,updated,453,"﻿. DTRSV. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. DTRSV¶. psi4.core.DTRSV(arg0: int, arg1: str, arg2: str, arg3: str, arg4: int, arg5: psi::Matrix, arg6: int, arg7: psi::Vector, arg8: int) → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.dtrsv.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.dtrsv.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.electricfieldint.html:750,Deployability,update,updated,750,"﻿. ElectricFieldInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ElectricFieldInt¶. class psi4.core.ElectricFieldInt¶; Bases: psi4.core.OneBodyAOInt; Computes electric field integrals. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. origin¶; The origin about which the one body ints are being computed. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.electricfieldint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.electricfieldint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.electrostaticint.html:749,Deployability,update,updated,749,"﻿. ElectrostaticInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ElectrostaticInt¶. class psi4.core.ElectrostaticInt¶; Bases: psi4.core.OneBodyAOInt; Computes electrostatic integrals. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. origin¶; The origin about which the one body ints are being computed. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.electrostaticint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.electrostaticint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.erfcomplementeri.html:571,Deployability,update,updated,571,"﻿. ErfComplementERI. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ErfComplementERI¶. class psi4.core.ErfComplementERI¶; Bases: psi4.core.TwoBodyAOInt; Computes ERF complement electron repulsion integrals. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.erfcomplementeri.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.erfcomplementeri.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.erferi.html:530,Deployability,update,updated,530,"﻿. ErfERI. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ErfERI¶. class psi4.core.ErfERI¶; Bases: psi4.core.TwoBodyAOInt; Computes ERF electron repulsion integrals. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.erferi.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.erferi.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.eri.html:528,Deployability,update,updated,528,"﻿. ERI. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ERI¶. class psi4.core.ERI¶; Bases: psi4.core.TwoBodyAOInt; Computes normal two electron reuplsion integrals. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.eri.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.eri.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.esppropcalc.html:873,Deployability,update,updated,873,"﻿. ESPPropCalc. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ESPPropCalc¶. class psi4.core.ESPPropCalc¶; Bases: psi4.core.Prop; ESPPropCalc gives access to routines calculating the ESP on a grid; Methods Summary. compute_esp_over_grid_in_memory(self, arg0); Computes ESP on specified grid Nx3 (as SharedMatrix). Methods Documentation. compute_esp_over_grid_in_memory(self: psi4.core.ESPPropCalc, arg0: psi::Matrix) → psi::Vector¶; Computes ESP on specified grid Nx3 (as SharedMatrix). compute_esp_over_grid_in_memory(self: psi4.core.ESPPropCalc, arg0: psi::Matrix) → psi::Vector; Computes ESP on specified grid Nx3 (as SharedMatrix). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.esppropcalc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.esppropcalc.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.esppropcalc.html:215,Integrability,rout,routines,215,"﻿. ESPPropCalc. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ESPPropCalc¶. class psi4.core.ESPPropCalc¶; Bases: psi4.core.Prop; ESPPropCalc gives access to routines calculating the ESP on a grid; Methods Summary. compute_esp_over_grid_in_memory(self, arg0); Computes ESP on specified grid Nx3 (as SharedMatrix). Methods Documentation. compute_esp_over_grid_in_memory(self: psi4.core.ESPPropCalc, arg0: psi::Matrix) → psi::Vector¶; Computes ESP on specified grid Nx3 (as SharedMatrix). compute_esp_over_grid_in_memory(self: psi4.core.ESPPropCalc, arg0: psi::Matrix) → psi::Vector; Computes ESP on specified grid Nx3 (as SharedMatrix). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.esppropcalc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.esppropcalc.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.esppropcalc.html:205,Security,access,access,205,"﻿. ESPPropCalc. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ESPPropCalc¶. class psi4.core.ESPPropCalc¶; Bases: psi4.core.Prop; ESPPropCalc gives access to routines calculating the ESP on a grid; Methods Summary. compute_esp_over_grid_in_memory(self, arg0); Computes ESP on specified grid Nx3 (as SharedMatrix). Methods Documentation. compute_esp_over_grid_in_memory(self: psi4.core.ESPPropCalc, arg0: psi::Matrix) → psi::Vector¶; Computes ESP on specified grid Nx3 (as SharedMatrix). compute_esp_over_grid_in_memory(self: psi4.core.ESPPropCalc, arg0: psi::Matrix) → psi::Vector; Computes ESP on specified grid Nx3 (as SharedMatrix). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.esppropcalc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.esppropcalc.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.externalpotential.html:2363,Deployability,update,updated,2363,"ge Z at (x,y,z). clear(self); Reset the field to zero (eliminates all entries). computePotentialMatrix(self, basis); Compute the external potential matrix in the given basis set. print_out(self); Print python print helper to the outfile. setName(self, arg0); Sets the name. Methods Documentation. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None¶; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None¶; Add a charge Z at (x,y,z). clear(self: psi4.core.ExternalPotential) → None¶; Reset the field to zero (eliminates all entries). computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix¶; Compute the external potential matrix in the given basis set. print_out(self: psi4.core.ExternalPotential) → None¶; Print python print helper to the outfile. setName(self: psi4.core.ExternalPotential, arg0: str) → None¶; Sets the name. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None; Add a charge Z at (x,y,z). clear(self: psi4.core.ExternalPotential) → None; Reset the field to zero (eliminates all entries). computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix; Compute the external potential matrix in the given basis set. print_out(self: psi4.core.ExternalPotential) → None; Print python print helper to the outfile. setName(self: psi4.core.ExternalPotential, arg0: str) → None; Sets the name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.externalpotential.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.externalpotential.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.externalpotential.html:434,Energy Efficiency,charge,charge,434,"﻿. ExternalPotential. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ExternalPotential¶. class psi4.core.ExternalPotential¶; Bases: pybind11_builtins.pybind11_object; Stores external potential field, computes external potential matrix; Methods Summary. addBasis(self, basis, coefs); Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self, Z, x, y, z); Add a charge Z at (x,y,z). clear(self); Reset the field to zero (eliminates all entries). computePotentialMatrix(self, basis); Compute the external potential matrix in the given basis set. print_out(self); Print python print helper to the outfile. setName(self, arg0); Sets the name. Methods Documentation. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None¶; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None¶; Add a charge Z at (x,y,z). clear(self: psi4.core.ExternalPotential) → None¶; Reset the field to zero (eliminates all entries). computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix¶; Compute the external potential matrix in the given basis set. print_out(self: psi4.core.ExternalPotential) → None¶; Print python print helper to the outfile. setName(self: psi4.core.ExternalPotential, arg0: str) → None¶; Sets the name. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None; Add a charge Z at (x,y,z). clear(self: psi4.core.ExternalPotential) → None; Reset the field to zero (eliminates all entries). computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix; Compute the external potential matrix in the given b",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.externalpotential.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.externalpotential.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.externalpotential.html:999,Energy Efficiency,charge,charge,999,"﻿. ExternalPotential. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ExternalPotential¶. class psi4.core.ExternalPotential¶; Bases: pybind11_builtins.pybind11_object; Stores external potential field, computes external potential matrix; Methods Summary. addBasis(self, basis, coefs); Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self, Z, x, y, z); Add a charge Z at (x,y,z). clear(self); Reset the field to zero (eliminates all entries). computePotentialMatrix(self, basis); Compute the external potential matrix in the given basis set. print_out(self); Print python print helper to the outfile. setName(self, arg0); Sets the name. Methods Documentation. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None¶; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None¶; Add a charge Z at (x,y,z). clear(self: psi4.core.ExternalPotential) → None¶; Reset the field to zero (eliminates all entries). computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix¶; Compute the external potential matrix in the given basis set. print_out(self: psi4.core.ExternalPotential) → None¶; Print python print helper to the outfile. setName(self: psi4.core.ExternalPotential, arg0: str) → None¶; Sets the name. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None; Add a charge Z at (x,y,z). clear(self: psi4.core.ExternalPotential) → None; Reset the field to zero (eliminates all entries). computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix; Compute the external potential matrix in the given b",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.externalpotential.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.externalpotential.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.externalpotential.html:1724,Energy Efficiency,charge,charge,1724,"ge Z at (x,y,z). clear(self); Reset the field to zero (eliminates all entries). computePotentialMatrix(self, basis); Compute the external potential matrix in the given basis set. print_out(self); Print python print helper to the outfile. setName(self, arg0); Sets the name. Methods Documentation. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None¶; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None¶; Add a charge Z at (x,y,z). clear(self: psi4.core.ExternalPotential) → None¶; Reset the field to zero (eliminates all entries). computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix¶; Compute the external potential matrix in the given basis set. print_out(self: psi4.core.ExternalPotential) → None¶; Print python print helper to the outfile. setName(self: psi4.core.ExternalPotential, arg0: str) → None¶; Sets the name. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None; Add a charge Z at (x,y,z). clear(self: psi4.core.ExternalPotential) → None; Reset the field to zero (eliminates all entries). computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix; Compute the external potential matrix in the given basis set. print_out(self: psi4.core.ExternalPotential) → None; Print python print helper to the outfile. setName(self: psi4.core.ExternalPotential, arg0: str) → None; Sets the name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.externalpotential.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.externalpotential.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.externalpotential.html:455,Usability,clear,clear,455,"﻿. ExternalPotential. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ExternalPotential¶. class psi4.core.ExternalPotential¶; Bases: pybind11_builtins.pybind11_object; Stores external potential field, computes external potential matrix; Methods Summary. addBasis(self, basis, coefs); Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self, Z, x, y, z); Add a charge Z at (x,y,z). clear(self); Reset the field to zero (eliminates all entries). computePotentialMatrix(self, basis); Compute the external potential matrix in the given basis set. print_out(self); Print python print helper to the outfile. setName(self, arg0); Sets the name. Methods Documentation. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None¶; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None¶; Add a charge Z at (x,y,z). clear(self: psi4.core.ExternalPotential) → None¶; Reset the field to zero (eliminates all entries). computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix¶; Compute the external potential matrix in the given basis set. print_out(self: psi4.core.ExternalPotential) → None¶; Print python print helper to the outfile. setName(self: psi4.core.ExternalPotential, arg0: str) → None¶; Sets the name. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None; Add a charge Z at (x,y,z). clear(self: psi4.core.ExternalPotential) → None; Reset the field to zero (eliminates all entries). computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix; Compute the external potential matrix in the given b",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.externalpotential.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.externalpotential.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.externalpotential.html:1020,Usability,clear,clear,1020,"tion. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ExternalPotential¶. class psi4.core.ExternalPotential¶; Bases: pybind11_builtins.pybind11_object; Stores external potential field, computes external potential matrix; Methods Summary. addBasis(self, basis, coefs); Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self, Z, x, y, z); Add a charge Z at (x,y,z). clear(self); Reset the field to zero (eliminates all entries). computePotentialMatrix(self, basis); Compute the external potential matrix in the given basis set. print_out(self); Print python print helper to the outfile. setName(self, arg0); Sets the name. Methods Documentation. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None¶; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None¶; Add a charge Z at (x,y,z). clear(self: psi4.core.ExternalPotential) → None¶; Reset the field to zero (eliminates all entries). computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix¶; Compute the external potential matrix in the given basis set. print_out(self: psi4.core.ExternalPotential) → None¶; Print python print helper to the outfile. setName(self: psi4.core.ExternalPotential, arg0: str) → None¶; Sets the name. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None; Add a charge Z at (x,y,z). clear(self: psi4.core.ExternalPotential) → None; Reset the field to zero (eliminates all entries). computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix; Compute the external potential matrix in the given basis set. print_out(self: p",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.externalpotential.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.externalpotential.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.externalpotential.html:1745,Usability,clear,clear,1745,"ge Z at (x,y,z). clear(self); Reset the field to zero (eliminates all entries). computePotentialMatrix(self, basis); Compute the external potential matrix in the given basis set. print_out(self); Print python print helper to the outfile. setName(self, arg0); Sets the name. Methods Documentation. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None¶; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None¶; Add a charge Z at (x,y,z). clear(self: psi4.core.ExternalPotential) → None¶; Reset the field to zero (eliminates all entries). computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix¶; Compute the external potential matrix in the given basis set. print_out(self: psi4.core.ExternalPotential) → None¶; Print python print helper to the outfile. setName(self: psi4.core.ExternalPotential, arg0: str) → None¶; Sets the name. addBasis(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet, coefs: psi4.core.Vector) → None; Add a basis of S auxiliary functions iwth Df coefficients. addCharge(self: psi4.core.ExternalPotential, Z: float, x: float, y: float, z: float) → None; Add a charge Z at (x,y,z). clear(self: psi4.core.ExternalPotential) → None; Reset the field to zero (eliminates all entries). computePotentialMatrix(self: psi4.core.ExternalPotential, basis: psi4.core.BasisSet) → psi4.core.Matrix; Compute the external potential matrix in the given basis set. print_out(self: psi4.core.ExternalPotential) → None; Print python print helper to the outfile. setName(self: psi4.core.ExternalPotential, arg0: str) → None; Sets the name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.externalpotential.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.externalpotential.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.f12.html:521,Deployability,update,updated,521,"﻿. F12. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. F12¶. class psi4.core.F12¶; Bases: psi4.core.TwoBodyAOInt; Computes F12 electron repulsion integrals. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.f12.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.f12.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.f12doublecommutator.html:587,Deployability,update,updated,587,"﻿. F12DoubleCommutator. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. F12DoubleCommutator¶. class psi4.core.F12DoubleCommutator¶; Bases: psi4.core.TwoBodyAOInt; Computes F12 Double Commutator electron repulsion integrals. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.f12doublecommutator.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.f12doublecommutator.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.f12g12.html:533,Deployability,update,updated,533,"﻿. F12G12. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. F12G12¶. class psi4.core.F12G12¶; Bases: psi4.core.TwoBodyAOInt; Computes F12G12 electron repulsion integrals. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.f12g12.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.f12g12.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.f12squared.html:550,Deployability,update,updated,550,"﻿. F12Squared. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. F12Squared¶. class psi4.core.F12Squared¶; Bases: psi4.core.TwoBodyAOInt; Computes F12 Squared electron repulsion integrals. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.f12squared.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.f12squared.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fchkwriter.html:761,Deployability,update,updated,761,"﻿. FCHKWriter. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. FCHKWriter¶. class psi4.core.FCHKWriter¶; Bases: pybind11_builtins.pybind11_object; Extracts information from a wavefunction object, and writes it to an FCHK file; Methods Summary. write(self, filename); Write wavefunction information to file. Methods Documentation. write(self: psi4.core.FCHKWriter, filename: str) → None¶; Write wavefunction information to file. write(self: psi4.core.FCHKWriter, filename: str) → None; Write wavefunction information to file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fchkwriter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fchkwriter.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fcidump_tei_helper-1.html:511,Deployability,update,updated,511,"﻿. fcidump_tei_helper. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fcidump_tei_helper¶. psi4.core.fcidump_tei_helper(nirrep: int, restricted: bool, DPD_info: Dict[str, int], ints_tolerance: float, fname: str='INTDUMP') → None¶; Write integrals to file in FCIDUMP format. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fcidump_tei_helper-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fcidump_tei_helper-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fcidump_tei_helper.html:511,Deployability,update,updated,511,"﻿. fcidump_tei_helper. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fcidump_tei_helper¶. psi4.core.fcidump_tei_helper(nirrep: int, restricted: bool, DPD_info: Dict[str, int], ints_tolerance: float, fname: str='INTDUMP') → None¶; Write integrals to file in FCIDUMP format. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fcidump_tei_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fcidump_tei_helper.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fdds_dispersion.html:1949,Deployability,update,updated,1949,"gation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. FDDS_Dispersion¶. class psi4.core.FDDS_Dispersion¶; Bases: pybind11_builtins.pybind11_object; docstring; Methods Summary. aux_overlap(self); Obtains the FDDS aux_overlap. form_unc_amplitude(self, arg0, arg1); Forms the uncoupled amplitudes for either monomer. metric(self); Obtains the FDDS metric. metric_inv(self); Obtains the FDDS metric_inv. project_densities(self, arg0); Projects a density from the primary AO to auxiliary AO space. Methods Documentation. aux_overlap(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains the FDDS aux_overlap. form_unc_amplitude(self: psi4.core.FDDS_Dispersion, arg0: str, arg1: float) → psi4.core.Matrix¶; Forms the uncoupled amplitudes for either monomer. metric(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains the FDDS metric. metric_inv(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix¶; Obtains the FDDS metric_inv. project_densities(self: psi4.core.FDDS_Dispersion, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; Projects a density from the primary AO to auxiliary AO space. aux_overlap(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix; Obtains the FDDS aux_overlap. form_unc_amplitude(self: psi4.core.FDDS_Dispersion, arg0: str, arg1: float) → psi4.core.Matrix; Forms the uncoupled amplitudes for either monomer. metric(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix; Obtains the FDDS metric. metric_inv(self: psi4.core.FDDS_Dispersion) → psi4.core.Matrix; Obtains the FDDS metric_inv. project_densities(self: psi4.core.FDDS_Dispersion, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]; Projects a density from the primary AO to auxiliary AO space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fdds_dispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fdds_dispersion.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.finalize-1.html:338,Deployability,update,updated,338,"﻿. finalize. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. finalize¶. psi4.core.finalize() → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.finalize-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.finalize-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.finalize.html:338,Deployability,update,updated,338,"﻿. finalize. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. finalize¶. psi4.core.finalize() → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.finalize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.finalize.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fisapt.html:5848,Deployability,update,updated,5848,". elst(self: psi4.core.FISAPT) → None; SAPT0 electrostatics. exch(self: psi4.core.FISAPT) → None; SAPT0 exchange. fdisp(self: psi4.core.FISAPT) → None; F-SAPT0 dispersion. felst(self: psi4.core.FISAPT) → None; F-SAPT0 electrostatics. fexch(self: psi4.core.FISAPT) → None; F-SAPT0 exchange. find(self: psi4.core.FISAPT) → None; F-SAPT0 induction. flocalize(self: psi4.core.FISAPT) → None; F-SAPT0 localize. freeze_core(self: psi4.core.FISAPT) → None; Freeze the core orbitals. ind(self: psi4.core.FISAPT) → None; SAPT0 induction. kinetic(self: psi4.core.FISAPT) → None; Build the kinetic integrals T. localize(self: psi4.core.FISAPT) → None; Localize the active occupied orbitals via IBO2. matrices(self: psi4.core.FISAPT) → Dict[str, psi4.core.Matrix]; Return the interally computed matrices (not copied). molecule(self: psi4.core.FISAPT) → psi4.core.Molecule; Returns the FISAPT’s molecule. nuclear(self: psi4.core.FISAPT) → None; Build the nuclear potentials V and interaction energies. overlap(self: psi4.core.FISAPT) → None; Build the overlap integrals S. partition(self: psi4.core.FISAPT) → None; Partition the nuclei and electrons. print_header(self: psi4.core.FISAPT) → None; Print header, bases, sizes, etc. print_trailer(self: psi4.core.FISAPT) → None; Print SAPT results. raw_plot(self: psi4.core.FISAPT, arg0: str) → None; Plot some analysis files. scalars(self: psi4.core.FISAPT) → Dict[str, float]; Return the interally computed scalars (not copied). scf(self: psi4.core.FISAPT) → None; Solve the relaxed SCF equations for A0 and B0. unify(self: psi4.core.FISAPT) → None; Produce unified matrices for A’, B’, and C’. vectors(self: psi4.core.FISAPT) → Dict[str, psi4.core.Vector]; Return the interally computed vectors (not copied). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fisapt.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fisapt.html:416,Energy Efficiency,energy,energy,416,"﻿. FISAPT. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. FISAPT¶. class psi4.core.FISAPT¶; Bases: pybind11_builtins.pybind11_object; A Fragment-SAPT Wavefunction; Methods Summary. coulomb(self); Build the J/K potentials for C, D, and E. dHF(self); SAPT0 delta HF. disp(self, arg0, psi4.core.Matrix], arg1, …); Computes the MP2-based DispE20 and Exch-DispE20 energy. elst(self); SAPT0 electrostatics. exch(self); SAPT0 exchange. fdisp(self); F-SAPT0 dispersion. felst(self); F-SAPT0 electrostatics. fexch(self); F-SAPT0 exchange. find(self); F-SAPT0 induction. flocalize(self); F-SAPT0 localize. freeze_core(self); Freeze the core orbitals. ind(self); SAPT0 induction. kinetic(self); Build the kinetic integrals T. localize(self); Localize the active occupied orbitals via IBO2. matrices(self); Return the interally computed matrices (not copied). molecule(self); Returns the FISAPT’s molecule. nuclear(self); Build the nuclear potentials V and interaction energies. overlap(self); Build the overlap integrals S. partition(self); Partition the nuclei and electrons. print_header(self); Print header, bases, sizes, etc. print_trailer(self); Print SAPT results. raw_plot(self, arg0); Plot some analysis files. scalars(self); Return the interally computed scalars (not copied). scf(self); Solve the relaxed SCF equations for A0 and B0. unify(self); Produce unified matrices for A’, B’, and C’. vectors(self); Return the interally computed vectors (not copied). Methods Documentation. coulomb(self: psi4.core.FISAPT) → None¶; Build the J/K potentials for C, D, and E. dHF(self: psi4.core.FISAPT) → None¶; SAPT0 delta HF. disp(self: psi4.core.FISAPT, arg0: Dict[str, psi4.core.Matrix], arg1: Dict[str, psi4.core.Vector], arg2: bool) → None¶; Computes the MP2-based DispE20 and Exch-DispE20 energy. elst(self: psi4.core.FISAPT) → None¶; SAPT0 electrostatics. exch(self: psi4.core.FISAPT) → None¶; SAPT0 exchange. fdisp(self: psi4.core.FISAPT) → None¶",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fisapt.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fisapt.html:1842,Energy Efficiency,energy,energy,1842,"e occupied orbitals via IBO2. matrices(self); Return the interally computed matrices (not copied). molecule(self); Returns the FISAPT’s molecule. nuclear(self); Build the nuclear potentials V and interaction energies. overlap(self); Build the overlap integrals S. partition(self); Partition the nuclei and electrons. print_header(self); Print header, bases, sizes, etc. print_trailer(self); Print SAPT results. raw_plot(self, arg0); Plot some analysis files. scalars(self); Return the interally computed scalars (not copied). scf(self); Solve the relaxed SCF equations for A0 and B0. unify(self); Produce unified matrices for A’, B’, and C’. vectors(self); Return the interally computed vectors (not copied). Methods Documentation. coulomb(self: psi4.core.FISAPT) → None¶; Build the J/K potentials for C, D, and E. dHF(self: psi4.core.FISAPT) → None¶; SAPT0 delta HF. disp(self: psi4.core.FISAPT, arg0: Dict[str, psi4.core.Matrix], arg1: Dict[str, psi4.core.Vector], arg2: bool) → None¶; Computes the MP2-based DispE20 and Exch-DispE20 energy. elst(self: psi4.core.FISAPT) → None¶; SAPT0 electrostatics. exch(self: psi4.core.FISAPT) → None¶; SAPT0 exchange. fdisp(self: psi4.core.FISAPT) → None¶; F-SAPT0 dispersion. felst(self: psi4.core.FISAPT) → None¶; F-SAPT0 electrostatics. fexch(self: psi4.core.FISAPT) → None¶; F-SAPT0 exchange. find(self: psi4.core.FISAPT) → None¶; F-SAPT0 induction. flocalize(self: psi4.core.FISAPT) → None¶; F-SAPT0 localize. freeze_core(self: psi4.core.FISAPT) → None¶; Freeze the core orbitals. ind(self: psi4.core.FISAPT) → None¶; SAPT0 induction. kinetic(self: psi4.core.FISAPT) → None¶; Build the kinetic integrals T. localize(self: psi4.core.FISAPT) → None¶; Localize the active occupied orbitals via IBO2. matrices(self: psi4.core.FISAPT) → Dict[str, psi4.core.Matrix]¶; Return the interally computed matrices (not copied). molecule(self: psi4.core.FISAPT) → psi4.core.Molecule¶; Returns the FISAPT’s molecule. nuclear(self: psi4.core.FISAPT) → None¶; Build the nuc",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fisapt.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fisapt.html:3917,Energy Efficiency,energy,energy,3917," → None¶; Build the overlap integrals S. partition(self: psi4.core.FISAPT) → None¶; Partition the nuclei and electrons. print_header(self: psi4.core.FISAPT) → None¶; Print header, bases, sizes, etc. print_trailer(self: psi4.core.FISAPT) → None¶; Print SAPT results. raw_plot(self: psi4.core.FISAPT, arg0: str) → None¶; Plot some analysis files. scalars(self: psi4.core.FISAPT) → Dict[str, float]¶; Return the interally computed scalars (not copied). scf(self: psi4.core.FISAPT) → None¶; Solve the relaxed SCF equations for A0 and B0. unify(self: psi4.core.FISAPT) → None¶; Produce unified matrices for A’, B’, and C’. vectors(self: psi4.core.FISAPT) → Dict[str, psi4.core.Vector]¶; Return the interally computed vectors (not copied). coulomb(self: psi4.core.FISAPT) → None; Build the J/K potentials for C, D, and E. dHF(self: psi4.core.FISAPT) → None; SAPT0 delta HF. disp(self: psi4.core.FISAPT, arg0: Dict[str, psi4.core.Matrix], arg1: Dict[str, psi4.core.Vector], arg2: bool) → None; Computes the MP2-based DispE20 and Exch-DispE20 energy. elst(self: psi4.core.FISAPT) → None; SAPT0 electrostatics. exch(self: psi4.core.FISAPT) → None; SAPT0 exchange. fdisp(self: psi4.core.FISAPT) → None; F-SAPT0 dispersion. felst(self: psi4.core.FISAPT) → None; F-SAPT0 electrostatics. fexch(self: psi4.core.FISAPT) → None; F-SAPT0 exchange. find(self: psi4.core.FISAPT) → None; F-SAPT0 induction. flocalize(self: psi4.core.FISAPT) → None; F-SAPT0 localize. freeze_core(self: psi4.core.FISAPT) → None; Freeze the core orbitals. ind(self: psi4.core.FISAPT) → None; SAPT0 induction. kinetic(self: psi4.core.FISAPT) → None; Build the kinetic integrals T. localize(self: psi4.core.FISAPT) → None; Localize the active occupied orbitals via IBO2. matrices(self: psi4.core.FISAPT) → Dict[str, psi4.core.Matrix]; Return the interally computed matrices (not copied). molecule(self: psi4.core.FISAPT) → psi4.core.Molecule; Returns the FISAPT’s molecule. nuclear(self: psi4.core.FISAPT) → None; Build the nuclear potential",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fisapt.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fittedslatercorrelationfactor.html:770,Deployability,update,updated,770,"﻿. FittedSlaterCorrelationFactor. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. FittedSlaterCorrelationFactor¶. class psi4.core.FittedSlaterCorrelationFactor¶; Bases: psi4.core.CorrelationFactor; docstring; Methods Summary. exponent(self). Methods Documentation. exponent(self: psi4.core.FittedSlaterCorrelationFactor) → float¶. exponent(self: psi4.core.FittedSlaterCorrelationFactor) → float. set_params(self: psi4.core.CorrelationFactor, coeff: psi4.core.Vector, exponent: psi4.core.Vector) → None¶; Set coefficient and exponent. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fittedslatercorrelationfactor.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fittedslatercorrelationfactor.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fittingmetric.html:2411,Deployability,update,updated,2411,"ocstring. get_pivots(self); docstring. get_reverse_pivots(self); docstring. is_inverted(self); docstring. is_poisson(self); docstring. Methods Documentation. form_QR_inverse(self: psi4.core.FittingMetric, arg0: float) → None¶; docstring. form_cholesky_inverse(self: psi4.core.FittingMetric) → None¶; docstring. form_eig_inverse(self: psi4.core.FittingMetric, arg0: float) → None¶; docstring. form_fitting_metric(self: psi4.core.FittingMetric) → None¶; docstring. form_full_inverse(self: psi4.core.FittingMetric) → None¶; docstring. get_algorithm(self: psi4.core.FittingMetric) → str¶; docstring. get_metric(self: psi4.core.FittingMetric) → psi4.core.Matrix¶; docstring. get_pivots(self: psi4.core.FittingMetric) → psi4.core.IntVector¶; docstring. get_reverse_pivots(self: psi4.core.FittingMetric) → psi4.core.IntVector¶; docstring. is_inverted(self: psi4.core.FittingMetric) → bool¶; docstring. is_poisson(self: psi4.core.FittingMetric) → bool¶; docstring. form_QR_inverse(self: psi4.core.FittingMetric, arg0: float) → None; docstring. form_cholesky_inverse(self: psi4.core.FittingMetric) → None; docstring. form_eig_inverse(self: psi4.core.FittingMetric, arg0: float) → None; docstring. form_fitting_metric(self: psi4.core.FittingMetric) → None; docstring. form_full_inverse(self: psi4.core.FittingMetric) → None; docstring. get_algorithm(self: psi4.core.FittingMetric) → str; docstring. get_metric(self: psi4.core.FittingMetric) → psi4.core.Matrix; docstring. get_pivots(self: psi4.core.FittingMetric) → psi4.core.IntVector; docstring. get_reverse_pivots(self: psi4.core.FittingMetric) → psi4.core.IntVector; docstring. is_inverted(self: psi4.core.FittingMetric) → bool; docstring. is_poisson(self: psi4.core.FittingMetric) → bool; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fittingmetric.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fittingmetric.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.flush_outfile-1.html:378,Deployability,update,updated,378,"﻿. flush_outfile. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. flush_outfile¶. psi4.core.flush_outfile() → None¶; Flushes the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.flush_outfile-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.flush_outfile-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.flush_outfile.html:378,Deployability,update,updated,378,"﻿. flush_outfile. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. flush_outfile¶. psi4.core.flush_outfile() → None¶; Flushes the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.flush_outfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.flush_outfile.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fnocc-1.html:417,Deployability,update,updated,417,"﻿. fnocc. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fnocc¶. psi4.core.fnocc(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fnocc-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fnocc-1.html:224,Energy Efficiency,energy,energy,224,"﻿. fnocc. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fnocc¶. psi4.core.fnocc(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fnocc-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fnocc.html:417,Deployability,update,updated,417,"﻿. fnocc. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fnocc¶. psi4.core.fnocc(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fnocc.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fnocc.html:224,Energy Efficiency,energy,energy,224,"﻿. fnocc. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fnocc¶. psi4.core.fnocc(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fnocc.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.fragmenttype.html:655,Deployability,update,updated,655,"﻿. FragmentType. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. FragmentType¶. class psi4.core.FragmentType¶; Bases: pybind11_builtins.pybind11_object; Fragment activation status; Attributes Summary. Absent. Ghost. Real. Attributes Documentation. Absent = FragmentType.Absent¶. Ghost = FragmentType.Ghost¶. Real = FragmentType.Real¶. Absent = FragmentType.Absent. Ghost = FragmentType.Ghost. Real = FragmentType.Real. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.fragmenttype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.fragmenttype.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.functional.html:4476,Deployability,update,updated,4476,"l, arg0: float) → None¶; docstring. set_parameter(self: psi4.core.Functional, arg0: str, arg1: float) → None¶; docstring. alpha(self: psi4.core.Functional) → float; docstring. build_base(alias: str) → psi4.core.Functional; docstring. citation(self: psi4.core.Functional) → str; docstring. compute_functional(self: psi4.core.Functional, arg0: Dict[str, psi4.core.Vector], arg1: Dict[str, psi4.core.Vector], arg2: int, arg3: int) → None; docstring. description(self: psi4.core.Functional) → str; docstring. is_gga(self: psi4.core.Functional) → bool; docstring. is_lrc(self: psi4.core.Functional) → bool; docstring. is_meta(self: psi4.core.Functional) → bool; docstring. lsda_cutoff(self: psi4.core.Functional) → float; docstring. meta_cutoff(self: psi4.core.Functional) → float; docstring. name(self: psi4.core.Functional) → str; docstring. omega(self: psi4.core.Functional) → float; docstring. print_detail(self: psi4.core.Functional, arg0: int) → None; docstring. print_out(self: psi4.core.Functional) → None; docstring. set_alpha(self: psi4.core.Functional, arg0: float) → None; docstring. set_citation(self: psi4.core.Functional, arg0: str) → None; docstring. set_description(self: psi4.core.Functional, arg0: str) → None; docstring. set_gga(self: psi4.core.Functional, arg0: bool) → None; docstring. set_lsda_cutoff(self: psi4.core.Functional, arg0: float) → None; docstring. set_meta(self: psi4.core.Functional, arg0: bool) → None; docstring. set_meta_cutoff(self: psi4.core.Functional, arg0: float) → None; docstring. set_name(self: psi4.core.Functional, arg0: str) → None; docstring. set_omega(self: psi4.core.Functional, arg0: float) → None; docstring. set_parameter(self: psi4.core.Functional, arg0: str, arg1: float) → None; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.functional.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:3744,Deployability,update,updated,3744,"cient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. coef(self: psi4.core.GaussianShell, pi: int) → float; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float; Returns the exponent of the given primitive. function_index; Basis function index where this shell starts. is_cartesian(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. original_coef(self: psi4.core.GaussianShell, pi: int) → float; Return unnormalized coefficient of the pi’th primitive. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:362,Integrability,contract,contraction,362,"﻿. GaussianShell. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. GaussianShell¶. class psi4.core.GaussianShell¶; Bases: pybind11_builtins.pybind11_object; Class containing information about basis functions; Attributes Summary. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi’th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi’th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. original_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:413,Integrability,contract,contraction,413,"﻿. GaussianShell. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. GaussianShell¶. class psi4.core.GaussianShell¶; Bases: pybind11_builtins.pybind11_object; Class containing information about basis functions; Attributes Summary. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi’th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi’th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. original_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:493,Integrability,contract,contraction,493,"﻿. GaussianShell. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. GaussianShell¶. class psi4.core.GaussianShell¶; Bases: pybind11_builtins.pybind11_object; Class containing information about basis functions; Attributes Summary. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi’th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi’th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. original_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:1031,Integrability,contract,contraction,1031,"ation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. GaussianShell¶. class psi4.core.GaussianShell¶; Bases: pybind11_builtins.pybind11_object; Class containing information about basis functions; Attributes Summary. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi’th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi’th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. original_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Retur",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:1092,Integrability,contract,contraction,1092,"4. PSI4 API: Linking C++ and Python. GaussianShell¶. class psi4.core.GaussianShell¶; Bases: pybind11_builtins.pybind11_object; Class containing information about basis functions; Attributes Summary. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi’th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi’th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. original_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:1304,Integrability,contract,contraction,1304,"utes Summary. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi’th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi’th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. original_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical ha",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:1356,Integrability,contract,contraction,1356,"mentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi’th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi’th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. original_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:1437,Integrability,contract,contraction,1437,"iven contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi’th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi’th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. original_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primiti",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:2136,Integrability,contract,contraction,2136,"_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. coef(self: psi4.core.GaussianShell, pi: int) → float; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float; Returns the exponent of the given primitive. function_index; Basis function index where this shell starts. is_cartesian(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is Cartesian. is_pure(self: psi4.core",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:2230,Integrability,contract,contraction,2230,"tion. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. coef(self: psi4.core.GaussianShell, pi: int) → float; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float; Returns the exponent of the given primitive. function_index; Basis function index where this shell starts. is_cartesian(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is pure, i.e. a spherical harmonic ba",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:2491,Integrability,contract,contraction,2491,"n_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. coef(self: psi4.core.GaussianShell, pi: int) → float; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float; Returns the exponent of the given primitive. function_index; Basis function index where this shell starts. is_cartesian(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. original_coef",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:2542,Integrability,contract,contraction,2542,"tal number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. coef(self: psi4.core.GaussianShell, pi: int) → float; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float; Returns the exponent of the given primitive. function_index; Basis function index where this shell starts. is_cartesian(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. original_coef(self: psi4.core.GaussianShell, pi: int) → float; Return unnormalized c",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:2622,Integrability,contract,contraction,2622,"¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. coef(self: psi4.core.GaussianShell, pi: int) → float; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float; Returns the exponent of the given primitive. function_index; Basis function index where this shell starts. is_cartesian(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. original_coef(self: psi4.core.GaussianShell, pi: int) → float; Return unnormalized coefficient of the pi’th primitive. «; hide menu. menu; sidebar; »",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:3078,Integrability,contract,contraction,3078,"cient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. coef(self: psi4.core.GaussianShell, pi: int) → float; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float; Returns the exponent of the given primitive. function_index; Basis function index where this shell starts. is_cartesian(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. original_coef(self: psi4.core.GaussianShell, pi: int) → float; Return unnormalized coefficient of the pi’th primitive. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:3171,Integrability,contract,contraction,3171,"cient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. coef(self: psi4.core.GaussianShell, pi: int) → float; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float; Returns the exponent of the given primitive. function_index; Basis function index where this shell starts. is_cartesian(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. original_coef(self: psi4.core.GaussianShell, pi: int) → float; Return unnormalized coefficient of the pi’th primitive. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussiantype.html:605,Deployability,update,updated,605,"﻿. GaussianType. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. GaussianType¶. class psi4.core.GaussianType¶; Bases: pybind11_builtins.pybind11_object; 0 if Cartesian, 1 if Pure; Attributes Summary. Cartesian. Pure. Attributes Documentation. Cartesian = GaussianType.Cartesian¶. Pure = GaussianType.Pure¶. Cartesian = GaussianType.Cartesian. Pure = GaussianType.Pure. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.gaussiantype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussiantype.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.geometryunits.html:619,Deployability,update,updated,619,"﻿. GeometryUnits. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. GeometryUnits¶. class psi4.core.GeometryUnits¶; Bases: pybind11_builtins.pybind11_object; The units used to define the geometry; Attributes Summary. Angstrom. Bohr. Attributes Documentation. Angstrom = GeometryUnits.Angstrom¶. Bohr = GeometryUnits.Bohr¶. Angstrom = GeometryUnits.Angstrom. Bohr = GeometryUnits.Bohr. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.geometryunits.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.geometryunits.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_active_molecule-1.html:416,Deployability,update,updated,416,"﻿. get_active_molecule. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_active_molecule¶. psi4.core.get_active_molecule() → psi::Molecule¶; Returns the currently active molecule object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_active_molecule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_active_molecule-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_active_molecule.html:416,Deployability,update,updated,416,"﻿. get_active_molecule. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_active_molecule¶. psi4.core.get_active_molecule() → psi::Molecule¶; Returns the currently active molecule object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_active_molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_active_molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_atomic_point_charges-1.html:462,Deployability,update,updated,462,"﻿. get_atomic_point_charges. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_atomic_point_charges¶. psi4.core.get_atomic_point_charges() → psi::Vector¶; Returns the most recently computed atomic point charges, as a double * object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_atomic_point_charges-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_atomic_point_charges-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_atomic_point_charges-1.html:256,Energy Efficiency,charge,charges,256,"﻿. get_atomic_point_charges. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_atomic_point_charges¶. psi4.core.get_atomic_point_charges() → psi::Vector¶; Returns the most recently computed atomic point charges, as a double * object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_atomic_point_charges-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_atomic_point_charges-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_atomic_point_charges.html:462,Deployability,update,updated,462,"﻿. get_atomic_point_charges. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_atomic_point_charges¶. psi4.core.get_atomic_point_charges() → psi::Vector¶; Returns the most recently computed atomic point charges, as a double * object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_atomic_point_charges.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_atomic_point_charges.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_atomic_point_charges.html:256,Energy Efficiency,charge,charges,256,"﻿. get_atomic_point_charges. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_atomic_point_charges¶. psi4.core.get_atomic_point_charges() → psi::Vector¶; Returns the most recently computed atomic point charges, as a double * object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_atomic_point_charges.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_atomic_point_charges.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_datadir-1.html:398,Deployability,update,updated,398,"﻿. get_datadir. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_datadir¶. psi4.core.get_datadir() → str¶; Sets the path to shared text resources, PSIDATADIR. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_datadir-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_datadir-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_datadir.html:398,Deployability,update,updated,398,"﻿. get_datadir. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_datadir¶. psi4.core.get_datadir() → str¶; Sets the path to shared text resources, PSIDATADIR. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_datadir.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_datadir.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_global_option-1.html:314,Availability,error,error,314,"﻿. get_global_option. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_global_option¶. psi4.core.get_global_option(arg0: str) → object¶; Given a string of a keyword name arg1, returns the value associated with the keyword from the global options. Returns error if keyword is not recognized. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_global_option-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_global_option-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_global_option-1.html:530,Deployability,update,updated,530,"﻿. get_global_option. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_global_option¶. psi4.core.get_global_option(arg0: str) → object¶; Given a string of a keyword name arg1, returns the value associated with the keyword from the global options. Returns error if keyword is not recognized. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_global_option-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_global_option-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_global_option.html:314,Availability,error,error,314,"﻿. get_global_option. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_global_option¶. psi4.core.get_global_option(arg0: str) → object¶; Given a string of a keyword name arg1, returns the value associated with the keyword from the global options. Returns error if keyword is not recognized. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_global_option.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_global_option.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_global_option.html:530,Deployability,update,updated,530,"﻿. get_global_option. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_global_option¶. psi4.core.get_global_option(arg0: str) → object¶; Given a string of a keyword name arg1, returns the value associated with the keyword from the global options. Returns error if keyword is not recognized. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_global_option.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_global_option.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_global_option_list-1.html:413,Deployability,update,updated,413,"﻿. get_global_option_list. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_global_option_list¶. psi4.core.get_global_option_list() → List[str]¶; Returns a list of all global options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_global_option_list-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_global_option_list-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_global_option_list.html:413,Deployability,update,updated,413,"﻿. get_global_option_list. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_global_option_list¶. psi4.core.get_global_option_list() → List[str]¶; Returns a list of all global options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_global_option_list.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_global_option_list.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_legacy_gradient-1.html:456,Deployability,update,updated,456,"﻿. get_legacy_gradient. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_legacy_gradient¶. psi4.core.get_legacy_gradient() → psi::Matrix¶; Returns the global gradient as a (nat, 3) Matrix object. FOR INTERNAL OPTKING USE ONLY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_legacy_gradient-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_legacy_gradient-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_legacy_gradient.html:456,Deployability,update,updated,456,"﻿. get_legacy_gradient. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_legacy_gradient¶. psi4.core.get_legacy_gradient() → psi::Matrix¶; Returns the global gradient as a (nat, 3) Matrix object. FOR INTERNAL OPTKING USE ONLY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_legacy_gradient.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_legacy_gradient.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_legacy_molecule-1.html:426,Deployability,update,updated,426,"﻿. get_legacy_molecule. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_legacy_molecule¶. psi4.core.get_legacy_molecule() → psi::Molecule¶; Returns the currently active molecule object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_legacy_molecule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_legacy_molecule-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_legacy_molecule.html:426,Deployability,update,updated,426,"﻿. get_legacy_molecule. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_legacy_molecule¶. psi4.core.get_legacy_molecule() → psi::Molecule¶; Returns the currently active molecule object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_legacy_molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_legacy_molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_local_option-1.html:355,Availability,error,error,355,"﻿. get_local_option. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_local_option¶. psi4.core.get_local_option(arg0: str, arg1: str) → object¶; Given a string of a keyword name arg2 and a particular module arg1, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_local_option-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_local_option-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_local_option-1.html:586,Deployability,update,updated,586,"﻿. get_local_option. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_local_option¶. psi4.core.get_local_option(arg0: str, arg1: str) → object¶; Given a string of a keyword name arg2 and a particular module arg1, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_local_option-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_local_option-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_local_option.html:355,Availability,error,error,355,"﻿. get_local_option. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_local_option¶. psi4.core.get_local_option(arg0: str, arg1: str) → object¶; Given a string of a keyword name arg2 and a particular module arg1, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_local_option.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_local_option.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_local_option.html:586,Deployability,update,updated,586,"﻿. get_local_option. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_local_option¶. psi4.core.get_local_option(arg0: str, arg1: str) → object¶; Given a string of a keyword name arg2 and a particular module arg1, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_local_option.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_local_option.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_memory-1.html:192,Availability,avail,available,192,"﻿. get_memory. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_memory¶. psi4.core.get_memory() → int¶; Returns the amount of memory available to Psi (in bytes). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_memory-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_memory-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_memory-1.html:401,Deployability,update,updated,401,"﻿. get_memory. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_memory¶. psi4.core.get_memory() → int¶; Returns the amount of memory available to Psi (in bytes). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_memory-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_memory-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_memory.html:192,Availability,avail,available,192,"﻿. get_memory. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_memory¶. psi4.core.get_memory() → int¶; Returns the amount of memory available to Psi (in bytes). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_memory.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_memory.html:401,Deployability,update,updated,401,"﻿. get_memory. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_memory¶. psi4.core.get_memory() → int¶; Returns the amount of memory available to Psi (in bytes). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_memory.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_num_threads-1.html:425,Deployability,update,updated,425,"﻿. get_num_threads. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_num_threads¶. psi4.core.get_num_threads() → int¶; Returns the number of threads to use in SMP parallel computations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_num_threads-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_num_threads-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_num_threads.html:425,Deployability,update,updated,425,"﻿. get_num_threads. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_num_threads¶. psi4.core.get_num_threads() → int¶; Returns the number of threads to use in SMP parallel computations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_num_threads.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_num_threads.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_option-1.html:407,Availability,error,error,407,"﻿. get_option. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_option¶. psi4.core.get_option(arg0: str, arg1: str) → object¶; Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local core.default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_option-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_option-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_option-1.html:679,Deployability,update,updated,679,"﻿. get_option. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_option¶. psi4.core.get_option(arg0: str, arg1: str) → object¶; Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local core.default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_option-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_option-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_option.html:407,Availability,error,error,407,"﻿. get_option. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_option¶. psi4.core.get_option(arg0: str, arg1: str) → object¶; Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local core.default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_option.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_option.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_option.html:679,Deployability,update,updated,679,"﻿. get_option. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_option¶. psi4.core.get_option(arg0: str, arg1: str) → object¶; Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local core.default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_option.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_option.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_options-1.html:368,Deployability,update,updated,368,"﻿. get_options. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_options¶. psi4.core.get_options() → psi::Options¶; Get options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_options-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_options-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_options.html:368,Deployability,update,updated,368,"﻿. get_options. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_options¶. psi4.core.get_options() → psi::Options¶; Get options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_options.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_output_file-1.html:348,Deployability,update,updated,348,"﻿. get_output_file. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_output_file¶. psi4.core.get_output_file() → str¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_output_file-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_output_file-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_output_file.html:348,Deployability,update,updated,348,"﻿. get_output_file. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_output_file¶. psi4.core.get_output_file() → str¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_output_file.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_output_file.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_writer_file_prefix-1.html:445,Deployability,update,updated,445,"﻿. get_writer_file_prefix. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_writer_file_prefix¶. psi4.core.get_writer_file_prefix(arg0: str) → str¶; Returns the prefix to use for writing files for external programs. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_writer_file_prefix-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_writer_file_prefix-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_writer_file_prefix.html:445,Deployability,update,updated,445,"﻿. get_writer_file_prefix. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_writer_file_prefix¶. psi4.core.get_writer_file_prefix(arg0: str) → str¶; Returns the prefix to use for writing files for external programs. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.get_writer_file_prefix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.get_writer_file_prefix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.git_version-1.html:391,Deployability,update,updated,391,"﻿. git_version. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. git_version¶. psi4.core.git_version() → str¶; Returns the git version of this copy of Psi. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.git_version-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.git_version-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.git_version.html:391,Deployability,update,updated,391,"﻿. git_version. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. git_version¶. psi4.core.git_version() → str¶; Returns the git version of this copy of Psi. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.git_version.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.git_version.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_array_variable-1.html:428,Deployability,update,updated,428,"﻿. has_array_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. has_array_variable¶. psi4.core.has_array_variable(arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.has_array_variable-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_array_variable-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_array_variable-1.html:214,Modifiability,variab,variable,214,"﻿. has_array_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. has_array_variable¶. psi4.core.has_array_variable(arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.has_array_variable-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_array_variable-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_array_variable.html:428,Deployability,update,updated,428,"﻿. has_array_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. has_array_variable¶. psi4.core.has_array_variable(arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.has_array_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_array_variable.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_array_variable.html:214,Modifiability,variab,variable,214,"﻿. has_array_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. has_array_variable¶. psi4.core.has_array_variable(arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.has_array_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_array_variable.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_global_option_changed-1.html:643,Deployability,update,updated,643,"﻿. has_global_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. has_global_option_changed¶. psi4.core.has_global_option_changed(arg0: str) → bool¶; Returns boolean for whether the keyword arg1 has been touched in the global scope, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched in the global scope by the user. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.has_global_option_changed-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_global_option_changed-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_global_option_changed.html:643,Deployability,update,updated,643,"﻿. has_global_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. has_global_option_changed¶. psi4.core.has_global_option_changed(arg0: str) → bool¶; Returns boolean for whether the keyword arg1 has been touched in the global scope, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched in the global scope by the user. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.has_global_option_changed.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_global_option_changed.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_local_option_changed-1.html:673,Deployability,update,updated,673,"﻿. has_local_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. has_local_option_changed¶. psi4.core.has_local_option_changed(arg0: str, arg1: str) → bool¶; Returns boolean for whether the keyword arg2 has been touched in the scope of the specified module arg1, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched in the module scope by the user. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.has_local_option_changed-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_local_option_changed-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_local_option_changed.html:673,Deployability,update,updated,673,"﻿. has_local_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. has_local_option_changed¶. psi4.core.has_local_option_changed(arg0: str, arg1: str) → bool¶; Returns boolean for whether the keyword arg2 has been touched in the scope of the specified module arg1, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched in the module scope by the user. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.has_local_option_changed.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_local_option_changed.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_option_changed-1.html:648,Deployability,update,updated,648,"﻿. has_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. has_option_changed¶. psi4.core.has_option_changed(arg0: str, arg1: str) → bool¶; Returns boolean for whether the option arg2 has been touched either locally to the specified module arg1 or globally, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched by the user. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.has_option_changed-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_option_changed-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_option_changed.html:648,Deployability,update,updated,648,"﻿. has_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. has_option_changed¶. psi4.core.has_option_changed(arg0: str, arg1: str) → bool¶; Returns boolean for whether the option arg2 has been touched either locally to the specified module arg1 or globally, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched by the user. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.has_option_changed.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_option_changed.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_scalar_variable-1.html:421,Deployability,update,updated,421,"﻿. has_scalar_variable. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. has_scalar_variable¶. psi4.core.has_scalar_variable(arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.has_scalar_variable-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_scalar_variable-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_scalar_variable-1.html:212,Modifiability,variab,variable,212,"﻿. has_scalar_variable. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. has_scalar_variable¶. psi4.core.has_scalar_variable(arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.has_scalar_variable-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_scalar_variable-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_scalar_variable.html:421,Deployability,update,updated,421,"﻿. has_scalar_variable. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. has_scalar_variable¶. psi4.core.has_scalar_variable(arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.has_scalar_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_scalar_variable.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_scalar_variable.html:212,Modifiability,variab,variable,212,"﻿. has_scalar_variable. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. has_scalar_variable¶. psi4.core.has_scalar_variable(arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.has_scalar_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.has_scalar_variable.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:3796,Deployability,update,update,3796,"y[, jk]). iterations([e_conv, d_conv]). jk(self); Returns the internal JK object. occupation_a(self); Returns the Alpha occupation numbers. occupation_b(self); Returns the Beta occupation numbers. onel_Hx(self, arg0); One-electron Hessian-vector products. print_energies(). print_header(self); docstring. print_orbitals(self); docstring. print_preiterations(self); docstring. push_back_external_potential(self, V); Add an external potential to the private external_potentials list. reset_occupation(self); docstring. rotate_orbitals(self, arg0, arg1); docstring. save_density_and_energy(self); docstring. semicanonicalize(self); Semicanonicalizes the orbitals for ROHF. set_energies(self, arg0, arg1); docstring. set_jk(self, arg0); Sets the internal JK object !expert. set_sad_basissets(self, arg0); Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self, arg0); Sets the Superposition of Atomic Densities density-fitted basisset. soscf_update(self, arg0, arg1, arg2, arg3); Computes a second-order SCF update. stability_analysis(self); Assess wfn stability and correct if requested. twoel_Hx(self, arg0, arg1, arg2); Two-electron Hessian-vector products. Attributes Documentation. MOM_excited_¶; Are we to do excited-state MOM?. MOM_performed_¶; MOM performed current iteration?. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. diis_enabled_¶; docstring. diis_start_¶; docstring. frac_performed_¶; Frac performed current iteration?. initialized_diis_manager_¶; docstring. iteration_¶; docstring. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. Methods Documentation. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Ma",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:9450,Deployability,update,update,9450,"ocstring. push_back_external_potential(self: psi4.core.HF, V: psi4.core.Matrix) → None¶; Add an external potential to the private external_potentials list. reset_occupation(self: psi4.core.HF) → None¶; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None¶; Sets the internal JK object !expert. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Alpha Orbital subset. Cb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Orbitals. Cb_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Beta Orbital subset. Da(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Density Matrix. Db_s",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:25308,Deployability,update,update,25308,"evel of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:26064,Deployability,update,updated,26064,"evel of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:1707,Energy Efficiency,energy,energy,1707,"trix and no orbitals after the guess. Methods Summary. V_potential(self); Returns the internal DFT V object. Va(self); Returns the Alpha Kohn-Sham Potential Matrix. Vb(self); Returns the Beta Kohn-Sham Potential Matrix. check_phases(self); docstring. clear_external_potentials(self); Clear private external_potentials list. compute_E(self); docstring. compute_energy(); Base class Wavefunction requires this function. compute_initial_E(self); docstring. compute_orbital_gradient(self, arg0, arg1); docstring. compute_spin_contamination(self); docstring. cphf_Hx(self, arg0); CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self); Adds occupied guess alpha orbitals. cphf_solve(self, x_vec, conv_tol, max_iter, …); Solves the CPHF equations for a given set of x vectors. damping_update(self, arg0); docstring. diis(self); docstring. diis_manager(self); docstring. finalize(self); Cleans up the the Wavefunction’s temporary data. finalize_energy(); Performs stability analysis and calls back SCF with new guess if needed, Returns the SCF energy. find_occupation(self); docstring. form_C(self); Forms the Orbital Matrices from the current Fock Matrices. form_D(self); Forms the Density Matrices from the current Orbitals Matrices. form_F(self); Forms the F matrix. form_G(self); Forms the G matrix. form_H(self); Forms the core Hamiltonian. form_Shalf(self); Forms the S^1/2 matrix. form_V(self); Form the Kohn-Sham Potential Matrices from the current Density Matrices. form_initial_C(self); Forms the initial Orbital Matrices from the current Fock Matrices. form_initial_F(self); Forms the initial F matrix. frac_renormalize(self); docstring. functional(self); Returns the internal DFT Superfunctional. get_energies(self, arg0); docstring. guess(self); Forms the guess (guarantees C, D, and E). guess_Ca(self, arg0); Sets the guess Alpha Orbital Matrix. guess_Cb(self, arg0); Sets the guess Beta Orbital Matrix. initialize(); Specialized initialization, compute integrals and does everyt",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:5138,Energy Efficiency,energy,energy,5138,"sis. diis_enabled_¶; docstring. diis_start_¶; docstring. frac_performed_¶; Frac performed current iteration?. initialized_diis_manager_¶; docstring. iteration_¶; docstring. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. Methods Documentation. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. diis(self: psi4.core.HF) → bool¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new g",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:6179,Energy Efficiency,energy,energy,6179,"ns the SCF energy computed by finalize_energy(). compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. diis(self: psi4.core.HF) → bool¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. form_C(self: psi4.core.HF) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None¶; Forms the F matrix. form_G(self: psi4.core.HF) → None¶; Forms the G matrix. form_H(self: psi4.core.HF) → None¶; Forms the core Hamiltonian. form_Shalf(self: psi4.core.HF) → None¶; Forms the S^1/2 matrix. form_V(self: psi4.core.HF) → None¶; Form the Kohn-Sham Potential Matrices from the current Density Matrices. form_initial_C(self: psi4.core.HF) → None¶; Forms the initial Orbital Matrices from the current Fock Matrices. form_initial_F(self: psi4.core.HF) → None¶; Forms the initial F matrix. frac_renormalize(self: psi4.c",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:6247,Energy Efficiency,energy,energy,6247,"_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. diis(self: psi4.core.HF) → bool¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. form_C(self: psi4.core.HF) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None¶; Forms the F matrix. form_G(self: psi4.core.HF) → None¶; Forms the G matrix. form_H(self: psi4.core.HF) → None¶; Forms the core Hamiltonian. form_Shalf(self: psi4.core.HF) → None¶; Forms the S^1/2 matrix. form_V(self: psi4.core.HF) → None¶; Form the Kohn-Sham Potential Matrices from the current Density Matrices. form_initial_C(self: psi4.core.HF) → None¶; Forms the initial Orbital Matrices from the current Fock Matrices. form_initial_F(self: psi4.core.HF) → None¶; Forms the initial F matrix. frac_renormalize(self: psi4.core.HF) → None¶; docstring. functional(self: psi4.core.HF) → psi4.core.SuperFunctional¶; Returns the internal DFT Superfunct",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:12320,Energy Efficiency,charge,charges,12320," Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None; docstring. clear_external_potentials(self: psi4.core.HF) → None; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float; docstring. compute_energy(); Ba",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:13454,Energy Efficiency,energy,energy,13454,".core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None; docstring. clear_external_potentials(self: psi4.core.HF) → None; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float; docstring. compute_energy(); Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float; docstring. compute_spin_contamination(self: psi4.core.HF) → None; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefuncti",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:15267,Energy Efficiency,energy,energy,15267," → List[psi4.core.Matrix]; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool; docstring. diis_enabled_; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager; docstring. diis_start_; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None; Cleans up the the Wavefunction’s temporary data. finalize_energy(); Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:15275,Energy Efficiency,energy,energy,15275," CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool; docstring. diis_enabled_; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager; docstring. diis_start_; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None; Cleans up the the Wavefunction’s temporary data. finalize_energy(); Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.c",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:15349,Energy Efficiency,energy,energy,15349,". damping_update(self: psi4.core.HF, arg0: float) → None; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool; docstring. diis_enabled_; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager; docstring. diis_start_; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None; Cleans up the the Wavefunction’s temporary data. finalize_energy(); Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None; docstring. force_doccpi(sel",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:16119,Energy Efficiency,energy,energy,16119," docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None; Cleans up the the Wavefunction’s temporary data. finalize_energy(); Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None; docstring. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None; Forms the F matrix. ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:16187,Energy Efficiency,energy,energy,16187," irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None; Cleans up the the Wavefunction’s temporary data. finalize_energy(); Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None; docstring. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None; Forms the F matrix. form_G(self: psi4.core.HF) → None; Forms the G matrix. form_H(self: psi4.core.HF) → None; Forms the core Hamiltonian. form_",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:23470,Energy Efficiency,energy,energy,23470,"Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: Lis",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:5056,Integrability,wrap,wrapper,5056,"ttempt_number_¶; Current macroiteration (1-indexed) for stability analysis. diis_enabled_¶; docstring. diis_start_¶; docstring. frac_performed_¶; Frac performed current iteration?. initialized_diis_manager_¶; docstring. iteration_¶; docstring. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. Methods Documentation. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. diis(self: psi4.core.HF) → bool¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finaliz",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:13372,Integrability,wrap,wrapper,13372,"ity analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None; docstring. clear_external_potentials(self: psi4.core.HF) → None; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float; docstring. compute_energy(); Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float; docstring. compute_spin_contamination(self: psi4.core.HF) → None; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None; docstri",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:12069,Modifiability,variab,variable,12069,"otential + Kinetic) Integrals. MOM_excited_; Are we to do excited-state MOM?. MOM_performed_; MOM performed current iteration?. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 sy",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:12197,Modifiability,variab,variables,12197,"d(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None; docstring. clear_external_potentials(self: psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:14625,Modifiability,variab,variable,14625,"e Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float; docstring. compute_spin_contamination(self: psi4.core.HF) → None; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool; docstring. diis_enabled_; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager; docstring. diis_start_; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. e",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:14755,Modifiability,variab,variable,14755,"te_initial_E(self: psi4.core.HF) → float; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float; docstring. compute_spin_contamination(self: psi4.core.HF) → None; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool; docstring. diis_enabled_; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager; docstring. diis_start_; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefun",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:19301,Modifiability,variab,variable,19301,"str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → float; docstring. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key)¶. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. guess(self: psi4.core.HF) → None; Forms the guess (guarantees C, D, and E). guess_Ca(self: psi4.core.HF, arg0: psi4.core.Matrix) → None; Sets the guess Alpha Orbital Matrix. guess_Cb(self: psi4.core.HF, arg0: psi4.core.Matrix) → None; Sets the guess Beta Orbital Matrix. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. has_variable(key)¶. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. initialize(); Specialized initialization, compute integrals and does everything to prepare for iterations. initialize_gtfock_jk(self: psi4.core.HF) → None; Sets up a GTFock JK object. initialize_jk(memory, jk=None). initialized_diis_manager_; docstring. iteration_; docstring. iterations(e_conv=None, d_conv=None). jk(self: psi4.core.HF) → psi4.core.JK; Returns the internal JK object. legacy_frequencies()¶. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int¶; Number of Alpha electrons. nalphapi(self: psi",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:19422,Modifiability,variab,variable,19422,") → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → float; docstring. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key)¶. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. guess(self: psi4.core.HF) → None; Forms the guess (guarantees C, D, and E). guess_Ca(self: psi4.core.HF, arg0: psi4.core.Matrix) → None; Sets the guess Alpha Orbital Matrix. guess_Cb(self: psi4.core.HF, arg0: psi4.core.Matrix) → None; Sets the guess Beta Orbital Matrix. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. has_variable(key)¶. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. initialize(); Specialized initialization, compute integrals and does everything to prepare for iterations. initialize_gtfock_jk(self: psi4.core.HF) → None; Sets up a GTFock JK object. initialize_jk(memory, jk=None). initialized_diis_manager_; docstring. iteration_; docstring. iterations(e_conv=None, d_conv=None). jk(self: psi4.core.HF) → psi4.core.JK; Returns the internal JK object. legacy_frequencies()¶. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int¶; Number of Alpha electrons. nalphapi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of alpha orbitals per irrep. name(self: psi4.core.Wavefun",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:22794,Modifiability,variab,variable,22794,"nt_preiterations(self: psi4.core.HF) → None; docstring. push_back_external_potential(self: psi4.core.HF, V: psi4.core.Matrix) → None; Add an external potential to the private external_potentials list. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. reset_occ_; Do reset the occupation after the guess to the inital occupation. reset_occupation(self: psi4.core.HF) → None; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None; docstring. sad_; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessi",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:22912,Modifiability,variab,variables,22912,") → None; Add an external potential to the private external_potentials list. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. reset_occ_; Do reset the occupation after the guess to the inital occupation. reset_occupation(self: psi4.core.HF) → None; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None; docstring. sad_; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:23172,Modifiability,variab,variable,23172,"tion. reset_occupation(self: psi4.core.HF) → None; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None; docstring. sad_; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:24813,Modifiability,variab,variable,24813,"core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:25535,Modifiability,inherit,inherited,25535,"evel of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:25854,Modifiability,variab,variable,25854,"evel of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:25870,Modifiability,variab,variables,25870,"evel of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:266,Performance,perform,performed,266,"﻿. HF. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. HF¶. class psi4.core.HF¶; Bases: psi4.core.Wavefunction; docstring; Attributes Summary. MOM_excited_; Are we to do excited-state MOM?. MOM_performed_; MOM performed current iteration?. attempt_number_; Current macroiteration (1-indexed) for stability analysis. diis_enabled_; docstring. diis_start_; docstring. frac_performed_; Frac performed current iteration?. initialized_diis_manager_; docstring. iteration_; docstring. reset_occ_; Do reset the occupation after the guess to the inital occupation. sad_; Do assume a non-idempotent density matrix and no orbitals after the guess. Methods Summary. V_potential(self); Returns the internal DFT V object. Va(self); Returns the Alpha Kohn-Sham Potential Matrix. Vb(self); Returns the Beta Kohn-Sham Potential Matrix. check_phases(self); docstring. clear_external_potentials(self); Clear private external_potentials list. compute_E(self); docstring. compute_energy(); Base class Wavefunction requires this function. compute_initial_E(self); docstring. compute_orbital_gradient(self, arg0, arg1); docstring. compute_spin_contamination(self); docstring. cphf_Hx(self, arg0); CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self); Adds occupied guess alpha orbitals. cphf_solve(self, x_vec, conv_tol, max_iter, …); Solves the CPHF equations for a given set of x vectors. damping_update(self, arg0); docstring. diis(self); docstring. diis_manager(self); docstring. finalize(self); Cleans up the the Wavefunction’s temporary data. finalize_energy(); Performs stability analysis and calls back SCF with new guess if needed, Returns the SCF energy. find_occupation(self); docstring. form_C(self); Forms the Orbital Matrices from the current Fock Matrices. form_D(self); Forms the Density Matrices from the current Orbitals Matrices. form_F(self); Forms the F matrix. form_G(self); Forms the G matrix. form_H(self); Forms the core Hamil",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:444,Performance,perform,performed,444,"﻿. HF. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. HF¶. class psi4.core.HF¶; Bases: psi4.core.Wavefunction; docstring; Attributes Summary. MOM_excited_; Are we to do excited-state MOM?. MOM_performed_; MOM performed current iteration?. attempt_number_; Current macroiteration (1-indexed) for stability analysis. diis_enabled_; docstring. diis_start_; docstring. frac_performed_; Frac performed current iteration?. initialized_diis_manager_; docstring. iteration_; docstring. reset_occ_; Do reset the occupation after the guess to the inital occupation. sad_; Do assume a non-idempotent density matrix and no orbitals after the guess. Methods Summary. V_potential(self); Returns the internal DFT V object. Va(self); Returns the Alpha Kohn-Sham Potential Matrix. Vb(self); Returns the Beta Kohn-Sham Potential Matrix. check_phases(self); docstring. clear_external_potentials(self); Clear private external_potentials list. compute_E(self); docstring. compute_energy(); Base class Wavefunction requires this function. compute_initial_E(self); docstring. compute_orbital_gradient(self, arg0, arg1); docstring. compute_spin_contamination(self); docstring. cphf_Hx(self, arg0); CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self); Adds occupied guess alpha orbitals. cphf_solve(self, x_vec, conv_tol, max_iter, …); Solves the CPHF equations for a given set of x vectors. damping_update(self, arg0); docstring. diis(self); docstring. diis_manager(self); docstring. finalize(self); Cleans up the the Wavefunction’s temporary data. finalize_energy(); Performs stability analysis and calls back SCF with new guess if needed, Returns the SCF energy. find_occupation(self); docstring. form_C(self); Forms the Orbital Matrices from the current Fock Matrices. form_D(self); Forms the Density Matrices from the current Orbitals Matrices. form_F(self); Forms the F matrix. form_G(self); Forms the G matrix. form_H(self); Forms the core Hamil",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:4044,Performance,perform,performed,4044,"er(self); docstring. print_orbitals(self); docstring. print_preiterations(self); docstring. push_back_external_potential(self, V); Add an external potential to the private external_potentials list. reset_occupation(self); docstring. rotate_orbitals(self, arg0, arg1); docstring. save_density_and_energy(self); docstring. semicanonicalize(self); Semicanonicalizes the orbitals for ROHF. set_energies(self, arg0, arg1); docstring. set_jk(self, arg0); Sets the internal JK object !expert. set_sad_basissets(self, arg0); Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self, arg0); Sets the Superposition of Atomic Densities density-fitted basisset. soscf_update(self, arg0, arg1, arg2, arg3); Computes a second-order SCF update. stability_analysis(self); Assess wfn stability and correct if requested. twoel_Hx(self, arg0, arg1, arg2); Two-electron Hessian-vector products. Attributes Documentation. MOM_excited_¶; Are we to do excited-state MOM?. MOM_performed_¶; MOM performed current iteration?. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. diis_enabled_¶; docstring. diis_start_¶; docstring. frac_performed_¶; Frac performed current iteration?. initialized_diis_manager_¶; docstring. iteration_¶; docstring. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. Methods Documentation. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; s",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:4226,Performance,perform,performed,4226,"potentials list. reset_occupation(self); docstring. rotate_orbitals(self, arg0, arg1); docstring. save_density_and_energy(self); docstring. semicanonicalize(self); Semicanonicalizes the orbitals for ROHF. set_energies(self, arg0, arg1); docstring. set_jk(self, arg0); Sets the internal JK object !expert. set_sad_basissets(self, arg0); Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self, arg0); Sets the Superposition of Atomic Densities density-fitted basisset. soscf_update(self, arg0, arg1, arg2, arg3); Computes a second-order SCF update. stability_analysis(self); Assess wfn stability and correct if requested. twoel_Hx(self, arg0, arg1, arg2); Two-electron Hessian-vector products. Attributes Documentation. MOM_excited_¶; Are we to do excited-state MOM?. MOM_performed_¶; MOM performed current iteration?. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. diis_enabled_¶; docstring. diis_start_¶; docstring. frac_performed_¶; Frac performed current iteration?. initialized_diis_manager_¶; docstring. iteration_¶; docstring. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. Methods Documentation. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_initial_E(self: psi4.core.HF) → float¶; docst",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:11137,Performance,perform,performed,11137,"nction) → psi4.core.Matrix¶; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Density Matrix. Db_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Beta Density subset. Fa(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix. Fa_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Fock Matrix. Fb_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. MOM_excited_; Are we to do excited-state MOM?. MOM_performed_; MOM performed current iteration?. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:17560,Performance,perform,performed,17560,"d. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None; Forms the F matrix. form_G(self: psi4.core.HF) → None; Forms the G matrix. form_H(self: psi4.core.HF) → None; Forms the core Hamiltonian. form_Shalf(self: psi4.core.HF) → None; Forms the S^1/2 matrix. form_V(self: psi4.core.HF) → None; Form the Kohn-Sham Potential Matrices from the current Density Matrices. form_initial_C(self: psi4.core.HF) → None; Forms the initial Orbital Matrices from the current Fock Matrices. form_initial_F(self: psi4.core.HF) → None; Forms the initial F matrix. frac_performed_; Frac performed current iteration?. frac_renormalize(self: psi4.core.HF) → None; docstring. frequencies()¶. static from_file(wfn_data)¶; Summary. Parameters:wfn_data (str or dict) – If a str reads a Wavefunction from a disk otherwise, assumes the data; is passed in. Returns:A deserialized Wavefunction object. Return type:Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. functional(self: psi4.core.HF) → psi4.core.SuperFunctional; Returns the internal DFT Superfunctional. get_array(key)¶. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → fl",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:5047,Usability,simpl,simply,5047,"ttempt_number_¶; Current macroiteration (1-indexed) for stability analysis. diis_enabled_¶; docstring. diis_start_¶; docstring. frac_performed_¶; Frac performed current iteration?. initialized_diis_manager_¶; docstring. iteration_¶; docstring. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. Methods Documentation. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. diis(self: psi4.core.HF) → bool¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finaliz",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html:13363,Usability,simpl,simply,13363,"ity analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None; docstring. clear_external_potentials(self: psi4.core.HF) → None; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float; docstring. compute_energy(); Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float; docstring. compute_spin_contamination(self: psi4.core.HF) → None; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None; docstri",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.hf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.hf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.idamax.html:392,Deployability,update,updated,392,"﻿. IDAMAX. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. IDAMAX¶. psi4.core.IDAMAX(arg0: int, arg1: int, arg2: psi::Vector, arg3: int) → int¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.idamax.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.idamax.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.initialize-1.html:334,Deployability,update,updated,334,"﻿. initialize. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. initialize¶. psi4.core.initialize() → bool¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.initialize-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.initialize-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.initialize.html:334,Deployability,update,updated,334,"﻿. initialize. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. initialize¶. psi4.core.initialize() → bool¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.initialize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.initialize.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.integralfactory.html:12854,Deployability,update,updated,12854,"(self: psi4.core.IntegralFactory) → psi4.core.ThreeCenterOverlapInt; Returns a OneBodyInt that computes the 3 center overlap integral. shells_iterator(self: psi4.core.IntegralFactory) → psi4.core.AOShellCombinationsIterator; Returns an ERI iterator object, only coded for standard ERIs. so_angular_momentum(self: psi4.core.IntegralFactory, deriv: int=0) → psi::OneBodySOInt; Returns a OneBodyInt that computes the SO angular momentum integral. so_dipole(self: psi4.core.IntegralFactory, deriv: int=0) → psi::OneBodySOInt; Returns a OneBodyInt that computes the SO dipole integrals. so_kinetic(self: psi4.core.IntegralFactory, deriv: int=0) → psi::OneBodySOInt; Returns a OneBodyInt that computes the SO kinetic integrals. so_multipoles(self: psi4.core.IntegralFactory, order: int) → psi::OneBodySOInt; Returns a OneBodyInt that computes arbitrary-order SO multipole integrals. so_nabla(self: psi4.core.IntegralFactory, deriv: int=0) → psi::OneBodySOInt; Returns a OneBodyInt that computes the SO nabla integral. so_overlap(self: psi4.core.IntegralFactory, deriv: int=0) → psi::OneBodySOInt; Returns a OneBodyInt that computes the SO overlap integrals. so_potential(self: psi4.core.IntegralFactory, deriv: int=0) → psi::OneBodySOInt; Returns a OneBodyInt that computes the SO nuclear attraction integral. so_pseudospectral(self: psi4.core.IntegralFactory, deriv: int=0) → psi::OneBodySOInt; Returns a OneBodyInt that computes the SO pseudospectral grid integrals. so_quadrupole(self: psi4.core.IntegralFactory) → psi::OneBodySOInt; Returns a OneBodyInt that computes SO the quadrupole integral. so_traceless_quadrupole(self: psi4.core.IntegralFactory) → psi::OneBodySOInt; Returns a OneBodyInt that computes the traceless SO quadrupole integral. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.integralfactory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.integralfactory.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.integraltransform.html:10626,Deployability,update,updated,10626,"→ None. set_dpd_int_file(self: psi4.core.IntegralTransform, arg0: int) → None. set_keep_dpd_so_ints(self: psi4.core.IntegralTransform, arg0: bool) → None. set_keep_ht_ints(self: psi4.core.IntegralTransform, arg0: bool) → None. set_keep_iwl_so_ints(self: psi4.core.IntegralTransform, arg0: bool) → None. set_memory(self: psi4.core.IntegralTransform, arg0: int) → None. set_orbitals(self: psi4.core.IntegralTransform, arg0: psi4.core.Matrix) → None. set_print(self: psi4.core.IntegralTransform, arg0: int) → None. set_psio(self: psi4.core.IntegralTransform, arg0: psi4.core.IO) → None. set_so_tei_file(self: psi4.core.IntegralTransform, arg0: int) → None. set_tei_already_presorted(self: psi4.core.IntegralTransform, arg0: bool) → None. set_tpdm_already_presorted(self: psi4.core.IntegralTransform, arg0: bool) → None. set_write_dpd_so_tpdm(self: psi4.core.IntegralTransform, arg0: bool) → None. transform_oei(self: psi4.core.IntegralTransform, s1: psi4.core.MOSpace, s2: psi4.core.MOSpace, labels: List[str[4]]) → None; Transform one-electron integrals. transform_tei(self: psi4.core.IntegralTransform, s1: psi4.core.MOSpace, s2: psi4.core.MOSpace, s3: psi4.core.MOSpace, s4: psi4.core.MOSpace, half_trans: psi4.core.IntegralTransform.HalfTrans=HalfTrans.MakeAndNuke) → None; Transform two-electron integrals. transform_tei_first_half(self: psi4.core.IntegralTransform, s1: psi4.core.MOSpace, s2: psi4.core.MOSpace) → None; First half-transform two-electron integrals. transform_tei_second_half(self: psi4.core.IntegralTransform, s1: psi4.core.MOSpace, s2: psi4.core.MOSpace, s3: psi4.core.MOSpace, s4: psi4.core.MOSpace) → None; Second half-transform two-electron integrals. update_orbitals(self: psi4.core.IntegralTransform) → None; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.integraltransform.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.integraltransform.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.intvector.html:1724,Deployability,update,updated,1724,"﻿. IntVector. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. IntVector¶. class psi4.core.IntVector¶; Bases: pybind11_builtins.pybind11_object; Class handling vectors with integer values; Methods Summary. dim(self, h); Returns the number of dimensions per irrep h. get(self, h, m); Returns a single element value located at m in irrep h. nirrep(self); Returns the number of irreps. print_out(self); Prints the vector to the output file. set(self, h, m, val); Sets a single element value located at m in irrep h. Methods Documentation. dim(self: psi4.core.IntVector, h: int) → int¶; Returns the number of dimensions per irrep h. get(self: psi4.core.IntVector, h: int, m: int) → int¶; Returns a single element value located at m in irrep h. nirrep(self: psi4.core.IntVector) → int¶; Returns the number of irreps. print_out(self: psi4.core.IntVector) → None¶; Prints the vector to the output file. set(self: psi4.core.IntVector, h: int, m: int, val: int) → None¶; Sets a single element value located at m in irrep h. dim(self: psi4.core.IntVector, h: int) → int; Returns the number of dimensions per irrep h. get(self: psi4.core.IntVector, h: int, m: int) → int; Returns a single element value located at m in irrep h. nirrep(self: psi4.core.IntVector) → int; Returns the number of irreps. print_out(self: psi4.core.IntVector) → None; Prints the vector to the output file. set(self: psi4.core.IntVector, h: int, m: int, val: int) → None; Sets a single element value located at m in irrep h. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.intvector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.intvector.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.io.html:5119,Deployability,update,updated,5119,"None; Change file number from ns1 to ns2. close(self: psi4.core.IO, unit: int, keep: int) → None; Close unit. If keep == 0, will remove the file, else keep it. exists(self: psi4.core.IO, unit: int) → bool; Check if the unit exists. get_default_namespace() → str; Get the default namespace (for PREFIX.NAMESPACE.UNIT file numbering). getpid(self: psi4.core.IO) → str; Lookup process id. open(self: psi4.core.IO, unit: int, status: int) → None; Open unit. Status can be PSIO_OPEN_OLD (if existing file is to be opened) or PSIO_OPEN_NEW if new file should be open. open_check(self: psi4.core.IO, unit: int) → int; Return 1 if unit is open. rehash(self: psi4.core.IO, unit: int) → None; Sync up the object to the file on disk by closing and opening the file, if necessary. set_default_namespace(ns: str) → None; Set the current namespace (for PREFIX.NAMESPACE.UNIT file numbering). set_pid(self: psi4.core.IO, pid: str) → None; Set process id. shared_object() → psi4.core.IO; Return the global shared object. state(self: psi4.core.IO) → int; Return 1 if PSIO library is activated. tocclean(self: psi4.core.IO, unit: int, key: str) → None; Delete all TOC entries after the given key. If a blank key is given, the entire TOC will be wiped. tocentry_exists(self: psi4.core.IO, arg0: int, arg1: str) → bool; Checks the TOC to see if a particular keyword exists there or not. tocprint(self: psi4.core.IO, arg0: int) → None; Print the table of contents for the given unit. tocscan(self: psi4.core.IO, arg0: int, arg1: str) → psi::psio_entry; Seek string in binary file. This export is only good for catching None, as returned success object not exported. tocwrite(self: psi4.core.IO, arg0: int) → None; Write the table of contents for passed file number. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.io.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.io.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.iomanager.html:4199,Deployability,update,updated,4199,"Manager, fileno: int, retain: bool) → None¶; Set the specific file number to be retained. shared_object() → psi4.core.IOManager¶; The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self: psi4.core.IOManager, full_path: str, text: str) → None¶; Write a string to a temporary file. The scratch file is opened and closed by this function. crashclean(self: psi4.core.IOManager) → None; Clean from disk-mirrored image after crash. NOT to be called during regular computation. get_default_path(self: psi4.core.IOManager) → str; Return the default path. get_file_path(self: psi4.core.IOManager, fileno: int) → str; Get the path for a specific file number. mark_file_for_retention(self: psi4.core.IOManager, full_path: str, retain: bool) → None; Mark a file to be retained after a psiclean operation, ie for use in a later computation. print_out(self: psi4.core.IOManager) → None; Print the current status of PSI4 files. psiclean(self: psi4.core.IOManager) → None; Execute the psiclean protocol, deleting all recorded files, except those currently marked for retention. set_default_path(self: psi4.core.IOManager, path: str) → None; Set the default path for files to be stored. set_specific_path(self: psi4.core.IOManager, fileno: int, path: str) → None; Set the path for specific file numbers. set_specific_retention(self: psi4.core.IOManager, fileno: int, retain: bool) → None; Set the specific file number to be retained. shared_object() → psi4.core.IOManager; The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self: psi4.core.IOManager, full_path: str, text: str) → None; Write a string to a temporary file. The scratch file is opened and closed by this function. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.iomanager.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.iomanager.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.iomanager.html:752,Integrability,protocol,protocol,752,"﻿. IOManager. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. IOManager¶. class psi4.core.IOManager¶; Bases: pybind11_builtins.pybind11_object; PSIOManager is a class designed to be used as a static object to track all PSIO operations in a given PSI4 computation; Methods Summary. crashclean(self); Clean from disk-mirrored image after crash. get_default_path(self); Return the default path. get_file_path(self, fileno); Get the path for a specific file number. mark_file_for_retention(self, full_path, retain); Mark a file to be retained after a psiclean operation, ie for use in a later computation. print_out(self); Print the current status of PSI4 files. psiclean(self); Execute the psiclean protocol, deleting all recorded files, except those currently marked for retention. set_default_path(self, path); Set the default path for files to be stored. set_specific_path(self, fileno, path); Set the path for specific file numbers. set_specific_retention(self, fileno, retain); Set the specific file number to be retained. shared_object(); The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self, full_path, text); Write a string to a temporary file. Methods Documentation. crashclean(self: psi4.core.IOManager) → None¶; Clean from disk-mirrored image after crash. NOT to be called during regular computation. get_default_path(self: psi4.core.IOManager) → str¶; Return the default path. get_file_path(self: psi4.core.IOManager, fileno: int) → str¶; Get the path for a specific file number. mark_file_for_retention(self: psi4.core.IOManager, full_path: str, retain: bool) → None¶; Mark a file to be retained after a psiclean operation, ie for use in a later computation. print_out(self: psi4.core.IOManager) → None¶; Print the current status of PSI4 files. psiclean(self: psi4.core.IOManager) → None¶; Execute the psiclean protocol, deleting all recorded files, except those currently marked for retent",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.iomanager.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.iomanager.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.iomanager.html:1922,Integrability,protocol,protocol,1922,"path); Set the path for specific file numbers. set_specific_retention(self, fileno, retain); Set the specific file number to be retained. shared_object(); The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self, full_path, text); Write a string to a temporary file. Methods Documentation. crashclean(self: psi4.core.IOManager) → None¶; Clean from disk-mirrored image after crash. NOT to be called during regular computation. get_default_path(self: psi4.core.IOManager) → str¶; Return the default path. get_file_path(self: psi4.core.IOManager, fileno: int) → str¶; Get the path for a specific file number. mark_file_for_retention(self: psi4.core.IOManager, full_path: str, retain: bool) → None¶; Mark a file to be retained after a psiclean operation, ie for use in a later computation. print_out(self: psi4.core.IOManager) → None¶; Print the current status of PSI4 files. psiclean(self: psi4.core.IOManager) → None¶; Execute the psiclean protocol, deleting all recorded files, except those currently marked for retention. set_default_path(self: psi4.core.IOManager, path: str) → None¶; Set the default path for files to be stored. set_specific_path(self: psi4.core.IOManager, fileno: int, path: str) → None¶; Set the path for specific file numbers. set_specific_retention(self: psi4.core.IOManager, fileno: int, retain: bool) → None¶; Set the specific file number to be retained. shared_object() → psi4.core.IOManager¶; The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self: psi4.core.IOManager, full_path: str, text: str) → None¶; Write a string to a temporary file. The scratch file is opened and closed by this function. crashclean(self: psi4.core.IOManager) → None; Clean from disk-mirrored image after crash. NOT to be called during regular computation. get_default_path(self: psi4.core.IOManager) → str; Return the default path. get_file_path(self: psi4.core.IOManager, fileno: int) → str; Get the path for a ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.iomanager.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.iomanager.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.iomanager.html:3294,Integrability,protocol,protocol,3294,"Manager, fileno: int, retain: bool) → None¶; Set the specific file number to be retained. shared_object() → psi4.core.IOManager¶; The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self: psi4.core.IOManager, full_path: str, text: str) → None¶; Write a string to a temporary file. The scratch file is opened and closed by this function. crashclean(self: psi4.core.IOManager) → None; Clean from disk-mirrored image after crash. NOT to be called during regular computation. get_default_path(self: psi4.core.IOManager) → str; Return the default path. get_file_path(self: psi4.core.IOManager, fileno: int) → str; Get the path for a specific file number. mark_file_for_retention(self: psi4.core.IOManager, full_path: str, retain: bool) → None; Mark a file to be retained after a psiclean operation, ie for use in a later computation. print_out(self: psi4.core.IOManager) → None; Print the current status of PSI4 files. psiclean(self: psi4.core.IOManager) → None; Execute the psiclean protocol, deleting all recorded files, except those currently marked for retention. set_default_path(self: psi4.core.IOManager, path: str) → None; Set the default path for files to be stored. set_specific_path(self: psi4.core.IOManager, fileno: int, path: str) → None; Set the path for specific file numbers. set_specific_retention(self: psi4.core.IOManager, fileno: int, retain: bool) → None; Set the specific file number to be retained. shared_object() → psi4.core.IOManager; The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self: psi4.core.IOManager, full_path: str, text: str) → None; Write a string to a temporary file. The scratch file is opened and closed by this function. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.iomanager.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.iomanager.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.irreduciblerepresentation.html:1139,Deployability,update,updated,1139,"﻿. IrreducibleRepresentation. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. IrreducibleRepresentation¶. class psi4.core.IrreducibleRepresentation¶; Bases: pybind11_builtins.pybind11_object; An irreducible representation of the point group; Methods Summary. character(self, arg0); Return the character of the i’th symmetry operation for the irrep. symbol(self); Return the symbol for the irrep. Methods Documentation. character(self: psi4.core.IrreducibleRepresentation, arg0: int) → float¶; Return the character of the i’th symmetry operation for the irrep. 0-indexed. symbol(self: psi4.core.IrreducibleRepresentation) → str¶; Return the symbol for the irrep. character(self: psi4.core.IrreducibleRepresentation, arg0: int) → float; Return the character of the i’th symmetry operation for the irrep. 0-indexed. symbol(self: psi4.core.IrreducibleRepresentation) → str; Return the symbol for the irrep. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.irreduciblerepresentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.irreduciblerepresentation.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.jk.html:5149,Deployability,update,updated,5149,"self: psi4.core.JK) → List[psi4.core.Matrix]. basisset(self: psi4.core.JK) → psi4.core.BasisSet. static build(orbital_basis, aux=None, jk_type=None, do_wK=None, memory=None); Constructs a Psi4 JK object from an input basis. Parameters:; orbital_basis (BasisSet) – Orbital basis to use in the JK object.; aux (BasisSet, optional) – Optional auxiliary basis set for density-fitted tensors. Defaults; to the DF_BASIS_SCF if set, otherwise the correspond JKFIT basis; to the passed in orbital_basis.; jk_type (str, optional) – Type of JK object to build (DF, Direct, PK, etc). Defaults to the; current global SCF_TYPE option. Returns:Uninitialized JK object. Return type:JK. Example; jk = psi4.core.JK.build(bas); jk.set_memory(int(5e8)) # 4GB of memory; jk.initialize(); …; jk.C_left_add(matirx); jk.compute(); jk.C_clear(); …. build_JK(*args, **kwargs); Overloaded function. build_JK(arg0: psi4.core.BasisSet, arg1: psi4.core.BasisSet) -> psi4.core.JK; build_JK(arg0: psi4.core.BasisSet, arg1: psi4.core.BasisSet, arg2: bool, arg3: int) -> psi4.core.JK. compute(self: psi4.core.JK) → None. finalize(self: psi4.core.JK) → None. initialize(self: psi4.core.JK) → None. memory_estimate(self: psi4.core.JK) → int. name(self: psi4.core.JK) → str. print_header(self: psi4.core.JK) → None; docstring. set_cutoff(self: psi4.core.JK, arg0: float) → None. set_do_J(self: psi4.core.JK, arg0: bool) → None. set_do_K(self: psi4.core.JK, arg0: bool) → None. set_do_wK(self: psi4.core.JK, arg0: bool) → None. set_memory(self: psi4.core.JK, arg0: int) → None. set_omega(self: psi4.core.JK, arg0: float) → None. set_omp_nthread(self: psi4.core.JK, arg0: int) → None. set_print(self: psi4.core.JK, arg0: int) → None. wK(self: psi4.core.JK) → List[psi4.core.Matrix]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.jk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.jk.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.kineticint.html:725,Deployability,update,updated,725,"﻿. KineticInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. KineticInt¶. class psi4.core.KineticInt¶; Bases: psi4.core.OneBodyAOInt; Computes kinetic integrals. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. origin¶; The origin about which the one body ints are being computed. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.kineticint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.kineticint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.laplacedenominator.html:860,Deployability,update,updated,860,"﻿. LaplaceDenominator. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. LaplaceDenominator¶. class psi4.core.LaplaceDenominator¶; Bases: pybind11_builtins.pybind11_object; docstring; Methods Summary. denominator_occ(self); docstring. denominator_vir(self); docstring. Methods Documentation. denominator_occ(self: psi4.core.LaplaceDenominator) → psi4.core.Matrix¶; docstring. denominator_vir(self: psi4.core.LaplaceDenominator) → psi4.core.Matrix¶; docstring. denominator_occ(self: psi4.core.LaplaceDenominator) → psi4.core.Matrix; docstring. denominator_vir(self: psi4.core.LaplaceDenominator) → psi4.core.Matrix; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.laplacedenominator.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.laplacedenominator.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.legacy_wavefunction-1.html:465,Deployability,update,updated,465,"﻿. legacy_wavefunction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. legacy_wavefunction¶. psi4.core.legacy_wavefunction() → psi::Wavefunction¶; Returns the current legacy_wavefunction object from the most recent computation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.legacy_wavefunction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.legacy_wavefunction-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.legacy_wavefunction.html:465,Deployability,update,updated,465,"﻿. legacy_wavefunction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. legacy_wavefunction¶. psi4.core.legacy_wavefunction() → psi::Wavefunction¶; Returns the current legacy_wavefunction object from the most recent computation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.legacy_wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.legacy_wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.libxcfunctional.html:2917,Deployability,update,updated,2917,"i4.core.Functional, arg0: Dict[str, psi4.core.Vector], arg1: Dict[str, psi4.core.Vector], arg2: int, arg3: int) → None¶; docstring. description(self: psi4.core.Functional) → str¶; docstring. get_mix_data(self: psi4.core.LibXCFunctional) → List[Tuple[str, int, float]]; docstring. is_gga(self: psi4.core.Functional) → bool¶; docstring. is_lrc(self: psi4.core.Functional) → bool¶; docstring. is_meta(self: psi4.core.Functional) → bool¶; docstring. lsda_cutoff(self: psi4.core.Functional) → float¶; docstring. meta_cutoff(self: psi4.core.Functional) → float¶; docstring. name(self: psi4.core.Functional) → str¶; docstring. omega(self: psi4.core.Functional) → float¶; docstring. print_detail(self: psi4.core.Functional, arg0: int) → None¶; docstring. print_out(self: psi4.core.Functional) → None¶; docstring. query_libxc(self: psi4.core.LibXCFunctional, arg0: str) → Dict[str, float]; query libxc regarding functional parameters. set_alpha(self: psi4.core.Functional, arg0: float) → None¶; docstring. set_citation(self: psi4.core.Functional, arg0: str) → None¶; docstring. set_description(self: psi4.core.Functional, arg0: str) → None¶; docstring. set_gga(self: psi4.core.Functional, arg0: bool) → None¶; docstring. set_lsda_cutoff(self: psi4.core.Functional, arg0: float) → None¶; docstring. set_meta(self: psi4.core.Functional, arg0: bool) → None¶; docstring. set_meta_cutoff(self: psi4.core.Functional, arg0: float) → None¶; docstring. set_name(self: psi4.core.Functional, arg0: str) → None¶; docstring. set_omega(self: psi4.core.LibXCFunctional, arg0: float) → None; docstring. set_parameter(self: psi4.core.Functional, arg0: str, arg1: float) → None¶; docstring. set_tweak(self: psi4.core.LibXCFunctional, arg0: List[float]) → None; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.libxcfunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.libxcfunctional.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.localizer.html:1379,Deployability,update,updated,1379,"﻿. Localizer. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. Localizer¶. class psi4.core.Localizer¶; Bases: pybind11_builtins.pybind11_object; Class containing orbital localization procedures; Attributes Summary. L; Localized orbital coefficients. U; Orbital rotation matrix. converged; Did the localization procedure converge?. Methods Summary. build(arg0, arg1, arg2); Build the localization scheme. localize(self); Perform the localization procedure. Attributes Documentation. L¶; Localized orbital coefficients. U¶; Orbital rotation matrix. converged¶; Did the localization procedure converge?. Methods Documentation. build(arg0: str, arg1: psi4.core.BasisSet, arg2: psi4.core.Matrix) → psi4.core.Localizer¶; Build the localization scheme. localize(self: psi4.core.Localizer) → None¶; Perform the localization procedure. L; Localized orbital coefficients. U; Orbital rotation matrix. build(arg0: str, arg1: psi4.core.BasisSet, arg2: psi4.core.Matrix) → psi4.core.Localizer; Build the localization scheme. converged; Did the localization procedure converge?. localize(self: psi4.core.Localizer) → None; Perform the localization procedure. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.localizer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.localizer.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:27362,Deployability,update,updated,27362,"r simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float; Returns the trace of the matrix. transform(*args, **kwargs); Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix; Creates a new matrix that is the transpose of this matrix. transpose_this(self: psi4.core.Matrix) → None; Transpose the matrix in-place. static triplet(A, B, C, transA, transB, transC). vector_dot(self: psi4.core.Matrix, rhs: psi4.core.Matrix) → float; Returns the vector dot product of this with rhs. zero(self: psi4.core.Matrix) → None; Zero all elements of the matrix. zero_diagonal(self: psi4.core.Matrix) → None; Zero the diagonal of the matrix. zero_lower(self: psi4.core.Matrix) → None; Zero the lower triangle. zero_upper(self: psi4.core.Matrix) → None; Zero the upper triangle. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:3222,Energy Efficiency,power,power,3222,"l_invert(self); Computes the inverse of any nonsingular matrix using LU factorization. get(*args, **kwargs); Overloaded function. get_block(self, rows, cols); Get a matrix block. hermitivitize(self); Average off-diagonal element in-place. hermitize(self); Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self); Sets the matrix to the identity. invert(self); Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs); Overloaded function. load_mpqc(self, filename); Loads a matrix from an ASCII file in MPQC format. nirrep(self); Returns the number of irreps. np_read(filename[, prefix]); Reads the data from a NumPy compress file. np_write([filename, prefix]); Writes the irreped matrix to a NumPy zipped file. partial_cholesky_factorize(self, delta, …); Computes the fully pivoted partial Cholesky factorization of a real symmetric positive semidefinite matrix, to numerical precision delta. power(self, alpha, cutoff); Takes the matrix to the alpha power with precision cutoff. print_atom_vector(self, RMRoutfile); Print the matrix with atom labels, assuming it is an natom X 3 tensor. print_out(self); Prints the matrix to the output file. pseudoinverse(self, condition, nremoved); Computes the matrix which is the conditioned pseudoinverse of this matrix. remove_symmetry(self, a, transformer); Remove symmetry from a matrix A with PetiteList::sotoao(). rms(self); Returns the rms of this matrix. rotate_columns(self, h, i, j, theta); Rotates columns i and j in irrep h by angle theta. rowdim(self); Returns the rows per irrep array. rows(self, h); Returns the rows in irrep h. save(self, filename, append, …); Saves the matrix in ASCII format to filename, as symmetry blocks or full matrix. scale(self, a); Scales the matrix by the floating point value a. scale_column(self, h, n, a); Scales column n of irrep h by a. scale_row(self, h, m, a); Scales row m of irrep h by a. schmidt(self); Calls the libqt schmidt function. set(*arg",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:3280,Energy Efficiency,power,power,3280,"l_invert(self); Computes the inverse of any nonsingular matrix using LU factorization. get(*args, **kwargs); Overloaded function. get_block(self, rows, cols); Get a matrix block. hermitivitize(self); Average off-diagonal element in-place. hermitize(self); Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self); Sets the matrix to the identity. invert(self); Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs); Overloaded function. load_mpqc(self, filename); Loads a matrix from an ASCII file in MPQC format. nirrep(self); Returns the number of irreps. np_read(filename[, prefix]); Reads the data from a NumPy compress file. np_write([filename, prefix]); Writes the irreped matrix to a NumPy zipped file. partial_cholesky_factorize(self, delta, …); Computes the fully pivoted partial Cholesky factorization of a real symmetric positive semidefinite matrix, to numerical precision delta. power(self, alpha, cutoff); Takes the matrix to the alpha power with precision cutoff. print_atom_vector(self, RMRoutfile); Print the matrix with atom labels, assuming it is an natom X 3 tensor. print_out(self); Prints the matrix to the output file. pseudoinverse(self, condition, nremoved); Computes the matrix which is the conditioned pseudoinverse of this matrix. remove_symmetry(self, a, transformer); Remove symmetry from a matrix A with PetiteList::sotoao(). rms(self); Returns the rms of this matrix. rotate_columns(self, h, i, j, theta); Rotates columns i and j in irrep h by angle theta. rowdim(self); Returns the rows per irrep array. rows(self, h); Returns the rows in irrep h. save(self, filename, append, …); Saves the matrix in ASCII format to filename, as symmetry blocks or full matrix. scale(self, a); Scales the matrix by the floating point value a. scale_column(self, h, n, a); Scales column n of irrep h by a. scale_row(self, h, m, a); Scales row m of irrep h by a. schmidt(self); Calls the libqt schmidt function. set(*arg",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:11812,Energy Efficiency,power,power,11812," nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None¶; Loads a matrix from an ASCII file in MPQC format. nirrep(self: psi4.core.Matrix) → int¶; Returns the number of irreps. classmethod np_read(filename, prefix='')¶; Reads the data from a NumPy compress file. np_write(filename=None, prefix='')¶; Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. partial_cholesky_factorize(self: psi4.core.Matrix, delta: float=0.0, throw_if_negative: bool=False) → psi4.core.Matrix¶; Computes the fully pivoted partial Cholesky factorization of a real symmetric positive semidefinite matrix, to numerical precision delta. power(self: psi4.core.Matrix, alpha: float, cutoff: float=1e-12) → psi4.core.Dimension¶; Takes the matrix to the alpha power with precision cutoff. print_atom_vector(self: psi4.core.Matrix, RMRoutfile: str='outfile') → None¶; Print the matrix with atom labels, assuming it is an natom X 3 tensor. print_out(self: psi4.core.Matrix) → None¶; Prints the matrix to the output file. pseudoinverse(self: psi4.core.Matrix, condition: float, nremoved: int) → psi4.core.Matrix¶; Computes the matrix which is the conditioned pseudoinverse of this matrix. remove_symmetry(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) → None¶; Remove symmetry from a matrix A with PetiteList::sotoao(). rms(self: psi4.core.Matrix) → float¶; Returns the rms of this matrix. rotate_columns(self: psi4.core.Matrix, h: int, i: int, j: int, theta: float) → None¶; Rotates columns i and j in irrep h by angle theta. rowdim(self: psi4.core.Matrix) → psi4.core.Dimension¶; Returns the rows per irrep array. rows(se",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:11931,Energy Efficiency,power,power,11931,"si4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None¶; Loads a matrix from an ASCII file in MPQC format. nirrep(self: psi4.core.Matrix) → int¶; Returns the number of irreps. classmethod np_read(filename, prefix='')¶; Reads the data from a NumPy compress file. np_write(filename=None, prefix='')¶; Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. partial_cholesky_factorize(self: psi4.core.Matrix, delta: float=0.0, throw_if_negative: bool=False) → psi4.core.Matrix¶; Computes the fully pivoted partial Cholesky factorization of a real symmetric positive semidefinite matrix, to numerical precision delta. power(self: psi4.core.Matrix, alpha: float, cutoff: float=1e-12) → psi4.core.Dimension¶; Takes the matrix to the alpha power with precision cutoff. print_atom_vector(self: psi4.core.Matrix, RMRoutfile: str='outfile') → None¶; Print the matrix with atom labels, assuming it is an natom X 3 tensor. print_out(self: psi4.core.Matrix) → None¶; Prints the matrix to the output file. pseudoinverse(self: psi4.core.Matrix, condition: float, nremoved: int) → psi4.core.Matrix¶; Computes the matrix which is the conditioned pseudoinverse of this matrix. remove_symmetry(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) → None¶; Remove symmetry from a matrix A with PetiteList::sotoao(). rms(self: psi4.core.Matrix) → float¶; Returns the rms of this matrix. rotate_columns(self: psi4.core.Matrix, h: int, i: int, j: int, theta: float) → None¶; Rotates columns i and j in irrep h by angle theta. rowdim(self: psi4.core.Matrix) → psi4.core.Dimension¶; Returns the rows per irrep array. rows(self: psi4.core.Matrix, h: int=0) → int¶; Returns the rows in irrep h. save(self: psi4.core.Matrix, filena",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:22668,Energy Efficiency,power,power,22668,"lf: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None; Loads a matrix from an ASCII file in MPQC format. name; The name of the Matrix. Used in printing. nirrep(self: psi4.core.Matrix) → int; Returns the number of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. nph; View with irreps. partial_cholesky_factorize(self: psi4.core.Matrix, delta: float=0.0, throw_if_negative: bool=False) → psi4.core.Matrix; Computes the fully pivoted partial Cholesky factorization of a real symmetric positive semidefinite matrix, to numerical precision delta. power(self: psi4.core.Matrix, alpha: float, cutoff: float=1e-12) → psi4.core.Dimension; Takes the matrix to the alpha power with precision cutoff. print_atom_vector(self: psi4.core.Matrix, RMRoutfile: str='outfile') → None; Print the matrix with atom labels, assuming it is an natom X 3 tensor. print_out(self: psi4.core.Matrix) → None; Prints the matrix to the output file. pseudoinverse(self: psi4.core.Matrix, condition: float, nremoved: int) → psi4.core.Matrix; Computes the matrix which is the conditioned pseudoinverse of this matrix. remove_symmetry(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) → None; Remove symmetry from a matrix A with PetiteList::sotoao(). rms(self: psi4.core.Matrix) → float; Returns the rms of this matrix. rotate_columns(self: psi4.core.Matrix, h: int, i: int, j: int, theta: float) → None; Rotates columns i and j in irrep h by angle theta. rowdim(self: psi4.core.Matrix) → psi4.core.Dimension; Returns the rows per irrep array. rows(self: psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:22786,Energy Efficiency,power,power,22786,"gle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None; Loads a matrix from an ASCII file in MPQC format. name; The name of the Matrix. Used in printing. nirrep(self: psi4.core.Matrix) → int; Returns the number of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. nph; View with irreps. partial_cholesky_factorize(self: psi4.core.Matrix, delta: float=0.0, throw_if_negative: bool=False) → psi4.core.Matrix; Computes the fully pivoted partial Cholesky factorization of a real symmetric positive semidefinite matrix, to numerical precision delta. power(self: psi4.core.Matrix, alpha: float, cutoff: float=1e-12) → psi4.core.Dimension; Takes the matrix to the alpha power with precision cutoff. print_atom_vector(self: psi4.core.Matrix, RMRoutfile: str='outfile') → None; Print the matrix with atom labels, assuming it is an natom X 3 tensor. print_out(self: psi4.core.Matrix) → None; Prints the matrix to the output file. pseudoinverse(self: psi4.core.Matrix, condition: float, nremoved: int) → psi4.core.Matrix; Computes the matrix which is the conditioned pseudoinverse of this matrix. remove_symmetry(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) → None; Remove symmetry from a matrix A with PetiteList::sotoao(). rms(self: psi4.core.Matrix) → float; Returns the rms of this matrix. rotate_columns(self: psi4.core.Matrix, h: int, i: int, j: int, theta: float) → None; Rotates columns i and j in irrep h by angle theta. rowdim(self: psi4.core.Matrix) → psi4.core.Dimension; Returns the rows per irrep array. rows(self: psi4.core.Matrix, h: int=0) → int; Returns the rows in irrep h. save(self: psi4.core.Matrix, filename: str, ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:14982,Integrability,depend,depending,14982,"atrix) → None¶; Set a matrix block. subtract(self: psi4.core.Matrix, arg0: psi4.core.Matrix) → None¶; Substract a matrix from this matrix. sum_of_squares(self: psi4.core.Matrix) → float¶; Returns the sum of the squares of this matrix. symmetrize_gradient(self: psi4.core.Matrix, mol: psi::Molecule) → None¶; Symmetrizes a gradient-like matrix (N,3) using information from a given molecule. symmetry(self: psi4.core.Matrix) → int¶; Returns the overall symmetry of the matrix. to_array(copy=True, dense=False)¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float¶; Returns the trace of the matrix. transform(*args, **kwargs)¶; Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix¶; Creates a new matrix that is the transpose of this matrix. transpose_this(self: psi4.core.Matrix) → None¶; Transpose the matrix in-place. static triplet(A, B, C, transA, transB, transC)¶. vector_dot(self: psi4.core.Matrix, rhs: psi4.core.Matrix) → float¶",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:25855,Integrability,depend,depending,25855,"k. shape; Shape of the Psi4 data object. subtract(self: psi4.core.Matrix, arg0: psi4.core.Matrix) → None; Substract a matrix from this matrix. sum_of_squares(self: psi4.core.Matrix) → float; Returns the sum of the squares of this matrix. symmetrize_gradient(self: psi4.core.Matrix, mol: psi::Molecule) → None; Symmetrizes a gradient-like matrix (N,3) using information from a given molecule. symmetry(self: psi4.core.Matrix) → int; Returns the overall symmetry of the matrix. to_array(copy=True, dense=False); Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float; Returns the trace of the matrix. transform(*args, **kwargs); Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix; Creates a new matrix that is the transpose of this matrix. transpose_this(self: psi4.core.Matrix) → None; Transpose the matrix in-place. static triplet(A, B, C, transA, transB, transC). vector_dot(self: psi4.core.Matrix, rhs: psi4.core.Matrix) → float; Retur",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:2723,Performance,load,load,2723," dim1, dim2]); Converts a numpy array or list of numpy arrays into a Psi4 Matrix (irreped if list). from_list(x). from_serial(json_data); Converts serialized data to the correct Psi4 data type. gemm(self, transa, transb, alpha, a, b, beta); Generalized matrix multiplication argument transa Transpose the left matrix? argument transb Transpose the right matrix? argument alpha Prefactor for the matrix multiplication argument A Left matrix argument B Right matrix argument beta Prefactor for the resulting matrix. general_invert(self); Computes the inverse of any nonsingular matrix using LU factorization. get(*args, **kwargs); Overloaded function. get_block(self, rows, cols); Get a matrix block. hermitivitize(self); Average off-diagonal element in-place. hermitize(self); Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self); Sets the matrix to the identity. invert(self); Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs); Overloaded function. load_mpqc(self, filename); Loads a matrix from an ASCII file in MPQC format. nirrep(self); Returns the number of irreps. np_read(filename[, prefix]); Reads the data from a NumPy compress file. np_write([filename, prefix]); Writes the irreped matrix to a NumPy zipped file. partial_cholesky_factorize(self, delta, …); Computes the fully pivoted partial Cholesky factorization of a real symmetric positive semidefinite matrix, to numerical precision delta. power(self, alpha, cutoff); Takes the matrix to the alpha power with precision cutoff. print_atom_vector(self, RMRoutfile); Print the matrix with atom labels, assuming it is an natom X 3 tensor. print_out(self); Prints the matrix to the output file. pseudoinverse(self, condition, nremoved); Computes the matrix which is the conditioned pseudoinverse of this matrix. remove_symmetry(self, a, transformer); Remove symmetry from a matrix A with PetiteList::sotoao(). rms(self); Returns the rms of this matrix. rotate_columns",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:10575,Performance,load,load,10575,"ix argument B Right matrix argument beta Prefactor for the resulting matrix. general_invert(self: psi4.core.Matrix) → None¶; Computes the inverse of any nonsingular matrix using LU factorization. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Matrix, h: int, m: int, n: int) -> float. Returns a single element of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix¶; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None¶; Average off-diagonal element in-place. hermitize(self: psi4.core.Matrix) → None¶; Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self: psi4.core.Matrix) → None¶; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None¶; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs)¶; Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None¶; Loads a matrix from an ASCII file in MPQC format. nirrep(self: psi4.core.Matrix) → int¶; Returns the number of irreps. classmethod np_read(filename, prefix='')¶; Reads the data from a NumPy compress file. np_write(filename=None, prefix='')¶; Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. partial_cholesky_factorize(self: psi4.core.M",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:10620,Performance,load,load,10620,"ment beta Prefactor for the resulting matrix. general_invert(self: psi4.core.Matrix) → None¶; Computes the inverse of any nonsingular matrix using LU factorization. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Matrix, h: int, m: int, n: int) -> float. Returns a single element of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix¶; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None¶; Average off-diagonal element in-place. hermitize(self: psi4.core.Matrix) → None¶; Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self: psi4.core.Matrix) → None¶; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None¶; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs)¶; Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None¶; Loads a matrix from an ASCII file in MPQC format. nirrep(self: psi4.core.Matrix) → int¶; Returns the number of irreps. classmethod np_read(filename, prefix='')¶; Reads the data from a NumPy compress file. np_write(filename=None, prefix='')¶; Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. partial_cholesky_factorize(self: psi4.core.Matrix, delta: float=0.0, throw_",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:10744,Performance,load,load,10744,"nsingular matrix using LU factorization. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Matrix, h: int, m: int, n: int) -> float. Returns a single element of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix¶; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None¶; Average off-diagonal element in-place. hermitize(self: psi4.core.Matrix) → None¶; Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self: psi4.core.Matrix) → None¶; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None¶; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs)¶; Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None¶; Loads a matrix from an ASCII file in MPQC format. nirrep(self: psi4.core.Matrix) → int¶; Returns the number of irreps. classmethod np_read(filename, prefix='')¶; Reads the data from a NumPy compress file. np_write(filename=None, prefix='')¶; Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. partial_cholesky_factorize(self: psi4.core.Matrix, delta: float=0.0, throw_if_negative: bool=False) → psi4.core.Matrix¶; Computes the fully pivoted partial Cholesky factorization of a real symmetric ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:10912,Performance,load,load,10912,"ent of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix¶; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None¶; Average off-diagonal element in-place. hermitize(self: psi4.core.Matrix) → None¶; Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self: psi4.core.Matrix) → None¶; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None¶; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs)¶; Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None¶; Loads a matrix from an ASCII file in MPQC format. nirrep(self: psi4.core.Matrix) → int¶; Returns the number of irreps. classmethod np_read(filename, prefix='')¶; Reads the data from a NumPy compress file. np_write(filename=None, prefix='')¶; Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. partial_cholesky_factorize(self: psi4.core.Matrix, delta: float=0.0, throw_if_negative: bool=False) → psi4.core.Matrix¶; Computes the fully pivoted partial Cholesky factorization of a real symmetric positive semidefinite matrix, to numerical precision delta. power(self: psi4.core.Matrix, alpha: float, cutoff: float=1e-12) → psi4.core.Dimension¶; Takes the matrix to",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:21333,Performance,load,load,21333,"ft matrix argument B Right matrix argument beta Prefactor for the resulting matrix. general_invert(self: psi4.core.Matrix) → None; Computes the inverse of any nonsingular matrix using LU factorization. get(*args, **kwargs); Overloaded function. get(self: psi4.core.Matrix, h: int, m: int, n: int) -> float. Returns a single element of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None; Average off-diagonal element in-place. hermitize(self: psi4.core.Matrix) → None; Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self: psi4.core.Matrix) → None; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs); Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None; Loads a matrix from an ASCII file in MPQC format. name; The name of the Matrix. Used in printing. nirrep(self: psi4.core.Matrix) → int; Returns the number of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving m",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:21377,Performance,load,load,21377,"rix argument beta Prefactor for the resulting matrix. general_invert(self: psi4.core.Matrix) → None; Computes the inverse of any nonsingular matrix using LU factorization. get(*args, **kwargs); Overloaded function. get(self: psi4.core.Matrix, h: int, m: int, n: int) -> float. Returns a single element of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None; Average off-diagonal element in-place. hermitize(self: psi4.core.Matrix) → None; Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self: psi4.core.Matrix) → None; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs); Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None; Loads a matrix from an ASCII file in MPQC format. name; The name of the Matrix. Used in printing. nirrep(self: psi4.core.Matrix) → int; Returns the number of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:21501,Performance,load,load,21501," any nonsingular matrix using LU factorization. get(*args, **kwargs); Overloaded function. get(self: psi4.core.Matrix, h: int, m: int, n: int) -> float. Returns a single element of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None; Average off-diagonal element in-place. hermitize(self: psi4.core.Matrix) → None; Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self: psi4.core.Matrix) → None; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs); Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None; Loads a matrix from an ASCII file in MPQC format. name; The name of the Matrix. Used in printing. nirrep(self: psi4.core.Matrix) → int; Returns the number of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. nph; View with irreps. partial_cholesky_factorize(self: psi4.core.Matrix, delta: float=0.0, throw_if_negative: bool=False)",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:21669,Performance,load,load,21669,"e element of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None; Average off-diagonal element in-place. hermitize(self: psi4.core.Matrix) → None; Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self: psi4.core.Matrix) → None; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs); Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None; Loads a matrix from an ASCII file in MPQC format. name; The name of the Matrix. Used in printing. nirrep(self: psi4.core.Matrix) → int; Returns the number of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. nph; View with irreps. partial_cholesky_factorize(self: psi4.core.Matrix, delta: float=0.0, throw_if_negative: bool=False) → psi4.core.Matrix; Computes the fully pivoted partial Cholesky factorization of a real symmetric positive semidefinite matrix, to numerical precision delta. power(sel",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:4778,Security,access,accessor,4778," irrep h by angle theta. rowdim(self); Returns the rows per irrep array. rows(self, h); Returns the rows in irrep h. save(self, filename, append, …); Saves the matrix in ASCII format to filename, as symmetry blocks or full matrix. scale(self, a); Scales the matrix by the floating point value a. scale_column(self, h, n, a); Scales column n of irrep h by a. scale_row(self, h, m, a); Scales row m of irrep h by a. schmidt(self); Calls the libqt schmidt function. set(*args, **kwargs); Overloaded function. set_block(self, rows, cols, block); Set a matrix block. subtract(self, arg0); Substract a matrix from this matrix. sum_of_squares(self); Returns the sum of the squares of this matrix. symmetrize_gradient(self, mol); Symmetrizes a gradient-like matrix (N,3) using information from a given molecule. symmetry(self); Returns the overall symmetry of the matrix. to_array([copy, dense]); Converts a Psi4 Matrix or Vector to a numpy array. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. trace(self); Returns the trace of the matrix. transform(*args, **kwargs); Overloaded function. transpose(self); Creates a new matrix that is the transpose of this matrix. transpose_this(self); Transpose the matrix in-place. triplet(A, B, C, transA, transB, transC). vector_dot(self, rhs); Returns the vector dot product of this with rhs. zero(self); Zero all elements of the matrix. zero_diagonal(self); Zero the diagonal of the matrix. zero_lower(self); Zero the lower triangle. zero_upper(self); Zero the upper triangle. Attributes Documentation. name¶; The name of the Matrix. Used in printing. np¶; View without only one irrep. nph¶; View with irreps. shape¶; Shape of the Psi4 data object. Methods Documentation. absmax(self: psi4.core.Matrix) → float¶; Returns the absolute maximum value. accumulate_product(self: psi4.core.Matrix, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; Multiplies two arguments and adds the result to this matrix. add(*args, **kwargs)¶; ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:15272,Security,access,accessor,15272,"ymmetrizes a gradient-like matrix (N,3) using information from a given molecule. symmetry(self: psi4.core.Matrix) → int¶; Returns the overall symmetry of the matrix. to_array(copy=True, dense=False)¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float¶; Returns the trace of the matrix. transform(*args, **kwargs)¶; Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix¶; Creates a new matrix that is the transpose of this matrix. transpose_this(self: psi4.core.Matrix) → None¶; Transpose the matrix in-place. static triplet(A, B, C, transA, transB, transC)¶. vector_dot(self: psi4.core.Matrix, rhs: psi4.core.Matrix) → float¶; Returns the vector dot product of this with rhs. zero(self: psi4.core.Matrix) → None¶; Zero all elements of the matrix. zero_diagonal(self: psi4.core.Matrix) → None¶; Zero the diagonal of the matrix. zero_lower(self: psi4.core.Matrix) → None¶; Zero the lower triangle. zero_upper(self: psi4.core.Matrix) → ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:26144,Security,access,accessor,26144,"; Symmetrizes a gradient-like matrix (N,3) using information from a given molecule. symmetry(self: psi4.core.Matrix) → int; Returns the overall symmetry of the matrix. to_array(copy=True, dense=False); Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float; Returns the trace of the matrix. transform(*args, **kwargs); Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix; Creates a new matrix that is the transpose of this matrix. transpose_this(self: psi4.core.Matrix) → None; Transpose the matrix in-place. static triplet(A, B, C, transA, transB, transC). vector_dot(self: psi4.core.Matrix, rhs: psi4.core.Matrix) → float; Returns the vector dot product of this with rhs. zero(self: psi4.core.Matrix) → None; Zero all elements of the matrix. zero_diagonal(self: psi4.core.Matrix) → None; Zero the diagonal of the matrix. zero_lower(self: psi4.core.Matrix) → None; Zero the lower triangle. zero_upper(self: psi4.core.Matrix) → None; Zer",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:10718,Testability,test,tests,10718,"rix) → None¶; Computes the inverse of any nonsingular matrix using LU factorization. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Matrix, h: int, m: int, n: int) -> float. Returns a single element of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix¶; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None¶; Average off-diagonal element in-place. hermitize(self: psi4.core.Matrix) → None¶; Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self: psi4.core.Matrix) → None¶; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None¶; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs)¶; Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None¶; Loads a matrix from an ASCII file in MPQC format. nirrep(self: psi4.core.Matrix) → int¶; Returns the number of irreps. classmethod np_read(filename, prefix='')¶; Reads the data from a NumPy compress file. np_write(filename=None, prefix='')¶; Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. partial_cholesky_factorize(self: psi4.core.Matrix, delta: float=0.0, throw_if_negative: bool=False) → psi4.core.Matrix¶; Computes the fully pivoted partial",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:21475,Testability,test,tests,21475,"core.Matrix) → None; Computes the inverse of any nonsingular matrix using LU factorization. get(*args, **kwargs); Overloaded function. get(self: psi4.core.Matrix, h: int, m: int, n: int) -> float. Returns a single element of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None; Average off-diagonal element in-place. hermitize(self: psi4.core.Matrix) → None; Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self: psi4.core.Matrix) → None; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs); Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None; Loads a matrix from an ASCII file in MPQC format. name; The name of the Matrix. Used in printing. nirrep(self: psi4.core.Matrix) → int; Returns the number of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. nph; View with irreps. partial_cholesky_factorize(self: psi4.core.Matrix, delt",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:14566,Usability,simpl,simply,14566,"ne. Sets every element of a matrix to val. set(self: psi4.core.Matrix, m: int, n: int, val: float) -> None. Sets a single element of a matrix to val at row m, col n. set(self: psi4.core.Matrix, h: int, m: int, n: int, val: float) -> None. Sets a single element of a matrix, subblock h, row m, col n, with value val. set_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice, block: psi4.core.Matrix) → None¶; Set a matrix block. subtract(self: psi4.core.Matrix, arg0: psi4.core.Matrix) → None¶; Substract a matrix from this matrix. sum_of_squares(self: psi4.core.Matrix) → float¶; Returns the sum of the squares of this matrix. symmetrize_gradient(self: psi4.core.Matrix, mol: psi::Molecule) → None¶; Symmetrizes a gradient-like matrix (N,3) using information from a given molecule. symmetry(self: psi4.core.Matrix) → int¶; Returns the overall symmetry of the matrix. to_array(copy=True, dense=False)¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float¶; Returns the trace of the matrix. transform(*args, **kwargs)¶; Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:25439,Usability,simpl,simply,25439,"ix to val. set(self: psi4.core.Matrix, m: int, n: int, val: float) -> None. Sets a single element of a matrix to val at row m, col n. set(self: psi4.core.Matrix, h: int, m: int, n: int, val: float) -> None. Sets a single element of a matrix, subblock h, row m, col n, with value val. set_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice, block: psi4.core.Matrix) → None; Set a matrix block. shape; Shape of the Psi4 data object. subtract(self: psi4.core.Matrix, arg0: psi4.core.Matrix) → None; Substract a matrix from this matrix. sum_of_squares(self: psi4.core.Matrix) → float; Returns the sum of the squares of this matrix. symmetrize_gradient(self: psi4.core.Matrix, mol: psi::Molecule) → None; Symmetrizes a gradient-like matrix (N,3) using information from a given molecule. symmetry(self: psi4.core.Matrix) → int; Returns the overall symmetry of the matrix. to_array(copy=True, dense=False); Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float; Returns the trace of the matrix. transform(*args, **kwargs); Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.co",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrixfactory.html:1136,Deployability,update,updated,1136,"﻿. MatrixFactory. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. MatrixFactory¶. class psi4.core.MatrixFactory¶; Bases: pybind11_builtins.pybind11_object; Creates Matrix objects; Methods Summary. create_matrix(*args, **kwargs); Overloaded function. Methods Documentation. create_matrix(*args, **kwargs)¶; Overloaded function. create_matrix(self: psi4.core.MatrixFactory) -> psi4.core.Matrix. Returns a new matrix object with default dimensions. create_matrix(self: psi4.core.MatrixFactory, arg0: str) -> psi4.core.Matrix. Returns a new Matrix object named name with default dimensions. create_matrix(*args, **kwargs); Overloaded function. create_matrix(self: psi4.core.MatrixFactory) -> psi4.core.Matrix. Returns a new matrix object with default dimensions. create_matrix(self: psi4.core.MatrixFactory, arg0: str) -> psi4.core.Matrix. Returns a new Matrix object named name with default dimensions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.matrixfactory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrixfactory.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.mcscf-1.html:430,Deployability,update,updated,430,"﻿. mcscf. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. mcscf¶. psi4.core.mcscf(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the MCSCF code, (N.B. restricted to certain active spaces). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.mcscf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.mcscf-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.mcscf.html:430,Deployability,update,updated,430,"﻿. mcscf. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. mcscf¶. psi4.core.mcscf(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the MCSCF code, (N.B. restricted to certain active spaces). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.mcscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.mcscf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.memdfjk.html:2681,Deployability,update,updated,2681,"Set¶. static build(orbital_basis, aux=None, jk_type=None, do_wK=None, memory=None)¶; Constructs a Psi4 JK object from an input basis. Parameters:; orbital_basis (BasisSet) – Orbital basis to use in the JK object.; aux (BasisSet, optional) – Optional auxiliary basis set for density-fitted tensors. Defaults; to the DF_BASIS_SCF if set, otherwise the correspond JKFIT basis; to the passed in orbital_basis.; jk_type (str, optional) – Type of JK object to build (DF, Direct, PK, etc). Defaults to the; current global SCF_TYPE option. Returns:Uninitialized JK object. Return type:JK. Example; jk = psi4.core.JK.build(bas); jk.set_memory(int(5e8)) # 4GB of memory; jk.initialize(); …; jk.C_left_add(matirx); jk.compute(); jk.C_clear(); …. build_JK(*args, **kwargs)¶; Overloaded function. build_JK(arg0: psi4.core.BasisSet, arg1: psi4.core.BasisSet) -> psi4.core.JK; build_JK(arg0: psi4.core.BasisSet, arg1: psi4.core.BasisSet, arg2: bool, arg3: int) -> psi4.core.JK. compute(self: psi4.core.JK) → None¶. dfh(self: psi4.core.MemDFJK) → psi::DFHelper; Return the DFHelper object. finalize(self: psi4.core.JK) → None¶. initialize(self: psi4.core.JK) → None¶. memory_estimate(self: psi4.core.JK) → int¶. name(self: psi4.core.JK) → str¶. print_header(self: psi4.core.JK) → None¶; docstring. set_cutoff(self: psi4.core.JK, arg0: float) → None¶. set_do_J(self: psi4.core.JK, arg0: bool) → None¶. set_do_K(self: psi4.core.JK, arg0: bool) → None¶. set_do_wK(self: psi4.core.JK, arg0: bool) → None¶. set_memory(self: psi4.core.JK, arg0: int) → None¶. set_omega(self: psi4.core.JK, arg0: float) → None¶. set_omp_nthread(self: psi4.core.JK, arg0: int) → None¶. set_print(self: psi4.core.JK, arg0: int) → None¶. wK(self: psi4.core.JK) → List[psi4.core.Matrix]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.memdfjk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.memdfjk.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.mintshelper.html:27027,Deployability,update,updated,27027,"ions to SO’s. petite_list1(self: psi4.core.MintsHelper, include_pure_transform: bool) → psi::PetiteList; Returns petite list which transforms AO basis functions to SO’s, setting argument to true is for Cartesian basis, false is for Spherical Harmonic basis. play(self: psi4.core.MintsHelper) → None; play function. potential_grad(self: psi4.core.MintsHelper, arg0: psi4.core.Matrix) → psi4.core.Matrix; First nuclear derivative potential integrals. set_print(self: psi4.core.MintsHelper, arg0: int) → None; Sets the print level. set_rel_basisset(self: psi4.core.MintsHelper, rel_basis: psi::BasisSet) → None; Sets the relativistic basis set. so_angular_momentum(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]; Vector SO angular momentum integrals. so_dipole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]; Vector SO dipole integrals. so_dkh(self: psi4.core.MintsHelper, arg0: int) → psi4.core.Matrix; SO dkh integrals. so_ecp(self: psi4.core.MintsHelper) → psi4.core.Matrix; SO basis effective core potential integrals. so_kinetic(self: psi4.core.MintsHelper) → psi4.core.Matrix; SO basis kinetic integrals. so_nabla(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]; Vector SO nabla integrals. so_overlap(self: psi4.core.MintsHelper) → psi4.core.Matrix; SO basis overlap integrals. so_potential(self: psi4.core.MintsHelper, include_perturbations: bool=True) → psi4.core.Matrix; SO basis potential integrals. so_quadrupole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]; Vector SO quadrupole integrals. so_traceless_quadrupole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]; Vector SO traceless quadrupole integrals. sobasisset(self: psi4.core.MintsHelper) → psi::SOBasisSet; Returns the SO basis set being used. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.mintshelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.mintshelper.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.moldenwriter.html:1102,Deployability,update,updated,1102,"﻿. MoldenWriter. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. MoldenWriter¶. class psi4.core.MoldenWriter¶; Bases: pybind11_builtins.pybind11_object; Writes wavefunction information in molden format; Methods Summary. write(self, filename, Ca, Cb, Ea, Eb, OccA, …); Writes wavefunction information in molden format. Methods Documentation. write(self: psi4.core.MoldenWriter, filename: str, Ca: psi4.core.Matrix, Cb: psi4.core.Matrix, Ea: psi4.core.Vector, Eb: psi4.core.Vector, OccA: psi4.core.Vector, OccB: psi4.core.Vector, dovirtual: bool) → None¶; Writes wavefunction information in molden format. write(self: psi4.core.MoldenWriter, filename: str, Ca: psi4.core.Matrix, Cb: psi4.core.Matrix, Ea: psi4.core.Vector, Eb: psi4.core.Vector, OccA: psi4.core.Vector, OccB: psi4.core.Vector, dovirtual: bool) → None; Writes wavefunction information in molden format. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.moldenwriter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.moldenwriter.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.moleculargrid.html:2212,Deployability,update,updated,2212,"tion_size(self); Returns the total collocation size of all blocks. max_functions(self); Returns the maximum number of functions in a block. max_points(self); Returns the maximum number of points in a block. npoints(self); Returns the number of grid points. orientation(self); Returns the orientation of the grid. print(self, arg0, arg1); Prints grid information. Methods Documentation. blocks(self: psi4.core.MolecularGrid) → List[psi4.core.BlockOPoints]¶; Returns a list of blocks. collocation_size(self: psi4.core.MolecularGrid) → int¶; Returns the total collocation size of all blocks. max_functions(self: psi4.core.MolecularGrid) → int¶; Returns the maximum number of functions in a block. max_points(self: psi4.core.MolecularGrid) → int¶; Returns the maximum number of points in a block. npoints(self: psi4.core.MolecularGrid) → int¶; Returns the number of grid points. orientation(self: psi4.core.MolecularGrid) → psi4.core.Matrix¶; Returns the orientation of the grid. print(self: psi4.core.MolecularGrid, arg0: str, arg1: int) → None¶; Prints grid information. blocks(self: psi4.core.MolecularGrid) → List[psi4.core.BlockOPoints]; Returns a list of blocks. collocation_size(self: psi4.core.MolecularGrid) → int; Returns the total collocation size of all blocks. max_functions(self: psi4.core.MolecularGrid) → int; Returns the maximum number of functions in a block. max_points(self: psi4.core.MolecularGrid) → int; Returns the maximum number of points in a block. npoints(self: psi4.core.MolecularGrid) → int; Returns the number of grid points. orientation(self: psi4.core.MolecularGrid) → psi4.core.Matrix; Returns the orientation of the grid. print(self: psi4.core.MolecularGrid, arg0: str, arg1: int) → None; Prints grid information. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.moleculargrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.moleculargrid.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:2062,Availability,toler,tolerance,2062," a given atom arg0. center_of_mass(self); Computes center of mass of molecule (does not translate molecule). charge(self, atom); Gets charge of atom (0-indexed without dummies). clone(self); Returns a new Molecule identical to arg1. com_fixed(self); Gets whether or not center of mass is fixed. comment(self); Gets molecule comment. connectivity(self); Gets molecule connectivity. create_psi4_string_from_molecule(self); Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self); Sets all fragments in the molecule to be inactive. distance_matrix(self); Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. fZ(self, arg0); Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self, atom); Gets charge of atom (0-indexed including dummies). find_highest_point_group(self, tolerance); Finds highest possible computational molecular point group. find_point_group(self, tolerance); Finds computational molecular point group, user can override this with the symmetry keyword. fix_com(self, arg0); Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self, arg0); Fix the orientation at its current frame. flabel(self, atom); Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self, atom); Gets mass of atom (0-indexed including dummies). form_symmetry_information(self, arg0); Uses the point group object obtain by calling point_group(). format_molecule_for_mol(); Returns a string of Molecule formatted for mol2. from_arrays([geom, elea, elez, elem, mass, …]); Construct Molecule from unvalidated arrays and variables. from_dict(arg0); Returns a new Molecule constructed from python dictionary. from_schema(molschema[, return_dict, verbose]); Construct Molecule from non-Psi4 schema. from_string(",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:2157,Availability,toler,tolerance,2157,"self, atom); Gets charge of atom (0-indexed without dummies). clone(self); Returns a new Molecule identical to arg1. com_fixed(self); Gets whether or not center of mass is fixed. comment(self); Gets molecule comment. connectivity(self); Gets molecule connectivity. create_psi4_string_from_molecule(self); Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self); Sets all fragments in the molecule to be inactive. distance_matrix(self); Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. fZ(self, arg0); Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self, atom); Gets charge of atom (0-indexed including dummies). find_highest_point_group(self, tolerance); Finds highest possible computational molecular point group. find_point_group(self, tolerance); Finds computational molecular point group, user can override this with the symmetry keyword. fix_com(self, arg0); Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self, arg0); Fix the orientation at its current frame. flabel(self, atom); Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self, atom); Gets mass of atom (0-indexed including dummies). form_symmetry_information(self, arg0); Uses the point group object obtain by calling point_group(). format_molecule_for_mol(); Returns a string of Molecule formatted for mol2. from_arrays([geom, elea, elez, elem, mass, …]); Construct Molecule from unvalidated arrays and variables. from_dict(arg0); Returns a new Molecule constructed from python dictionary. from_schema(molschema[, return_dict, verbose]); Construct Molecule from non-Psi4 schema. from_string(molstr[, dtype, name, fix_com, …]). fsymbol(self, atom); Gets the cleaned up label of atom (C2 => C, H4 = H) (0-ind",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:9942,Availability,toler,tolerance,9942,"ets unit conversion to [a0] for geometry. set_mass(self, atom, mass); Sets mass of atom (0-indexed) to mass (good for isotopic substitutions). set_molecular_charge(self, arg0); Change the overall molecular charge. set_multiplicity(self, arg0); Change the multiplicity (defined as 2S + 1). set_name(self, arg0); Sets molecule name. set_nuclear_charge(self, arg0, arg1); Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self, arg0); Sets the molecular point group to the point group object arg0. set_provenance(self, arg0, str]); Sets molecule provenance. set_units(self, arg0); Sets units (Angstrom or Bohr) used to define the geometry. set_variable(self, arg0, arg1); Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self, atom); Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self, arg0); Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self); Returns the symmetry specified in the input. to_arrays([dummy, ghost_as_dummy]); Exports coordinate info into NumPy arrays. to_dict([force_c1, force_units, np_out]); Serializes instance into Molecule dictionary. to_schema(dtype[, units]); Serializes instance into dictionary according to schema dtype. to_string(dtype[, units, atom_format, …]); Format a string representation of QM molecule. translate(self, arg0); Translates molecule by arg0. true_atomic_number(self, atom); Gets atomic number of atom from element (0-indexed without dummies). units(self); Returns units used to define the geometry, i.e. update_geometry(self); Reevaluates the geometry with current variable values, orientation directives, etc. x(self, arg0); x position [Bohr] of atom arg0 (0-indexed without dummies). xyz(self, i); Return the Vector3 for atom i (0-indexed without dummies). y(self, arg0); y position [Bohr] of at",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:15073,Availability,fault,faulty,15073,"ncoded. Returns:; bfs_map (list of lists) – Array of atom indices (0-indexed) of detected fragments.; bfs_arrays (tuple of lists of ndarray, optional) – geom, mass, elem info per-fragment.; Only provided if return_arrays is True.; bfs_molecules (list of qcdb.Molecule or psi4.core.Molecule, optional) – List of molecules, each built from one fragment. Center and; orientation of fragments is fixed so orientation info from self is; not lost. Loses chgmult and ghost/dummy info from self and contains; default chgmult.; Only provided if return_molecules is True.; Returned are of same type as self.; bfs_molecule (qcdb.Molecule or psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See seed_atoms. Any existing fragmentation info/chgmult encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float¶; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None¶; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None¶; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs)¶; Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:16050,Availability,toler,tolerance,16050,". Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See seed_atoms. Any existing fragmentation info/chgmult encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float¶; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None¶; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None¶; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs)¶; Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str¶; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3¶; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float¶; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule¶; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molecule) → bool¶; Gets whether or not center of mass is fixed. comment(self: psi4.core.Molecule) → str¶; Gets molecule comment. connectivity(self: psi4.core.Molecule) → List[Tuple[int, int, float]]¶; Gets molecule connectivity. create_psi4_string_from_molecule(self: psi4.core.Molecule) → str¶; Gets a string re-expressi",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:16213,Availability,toler,tolerance,16213,"ncoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float¶; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None¶; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None¶; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs)¶; Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str¶; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3¶; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float¶; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule¶; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molecule) → bool¶; Gets whether or not center of mass is fixed. comment(self: psi4.core.Molecule) → str¶; Gets molecule comment. connectivity(self: psi4.core.Molecule) → List[Tuple[int, int, float]]¶; Gets molecule connectivity. create_psi4_string_from_molecule(self: psi4.core.Molecule) → str¶; Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deacti",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:18625,Availability,toler,tolerance,18625,"ets(self: psi4.core.Molecule, arg0: List[int], arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real. extract_subsets(self: psi4.core.Molecule, arg0: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real. fZ(self: psi4.core.Molecule, arg0: int) → float¶; Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self: psi4.core.Molecule, atom: int) → float¶; Gets charge of atom (0-indexed including dummies). find_highest_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup¶; Finds highest possible computational molecular point group. find_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup¶; Finds computational molecular point group, user can override this with the symmetry keyword. fix_com(self: psi4.core.Molecule, arg0: bool) → None¶; Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self: psi4.core.Molecule, arg0: bool) → None¶; Fix the orientation at its current frame. flabel(self: psi4.core.Molecule, atom: int) → str¶; Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self: psi4.core.Molecule, atom: int) → float¶; Gets mass of atom (0-indexed including dummies). form_symmetry_information(self: psi4.core.Molecule, arg0: float) → None¶; Uses the point group object obtain by calling point_group(). format_molecule_for_mol()¶; Returns a string of Molecule formatted for mol2.; Written b",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:18777,Availability,toler,tolerance,18777,"extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real. extract_subsets(self: psi4.core.Molecule, arg0: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real. fZ(self: psi4.core.Molecule, arg0: int) → float¶; Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self: psi4.core.Molecule, atom: int) → float¶; Gets charge of atom (0-indexed including dummies). find_highest_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup¶; Finds highest possible computational molecular point group. find_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup¶; Finds computational molecular point group, user can override this with the symmetry keyword. fix_com(self: psi4.core.Molecule, arg0: bool) → None¶; Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self: psi4.core.Molecule, arg0: bool) → None¶; Fix the orientation at its current frame. flabel(self: psi4.core.Molecule, atom: int) → str¶; Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self: psi4.core.Molecule, atom: int) → float¶; Gets mass of atom (0-indexed including dummies). form_symmetry_information(self: psi4.core.Molecule, arg0: float) → None¶; Uses the point group object obtain by calling point_group(). format_molecule_for_mol()¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. classmethod from_arrays(geom=None, elea=None, elez=None, elem=None, mass=None, real=None, elbl=None, name=None, units='Ang",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:20080,Availability,error,error,20080,"ride this with the symmetry keyword. fix_com(self: psi4.core.Molecule, arg0: bool) → None¶; Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self: psi4.core.Molecule, arg0: bool) → None¶; Fix the orientation at its current frame. flabel(self: psi4.core.Molecule, atom: int) → str¶; Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self: psi4.core.Molecule, atom: int) → float¶; Gets mass of atom (0-indexed including dummies). form_symmetry_information(self: psi4.core.Molecule, arg0: float) → None¶; Uses the point group object obtain by calling point_group(). format_molecule_for_mol()¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. classmethod from_arrays(geom=None, elea=None, elez=None, elem=None, mass=None, real=None, elbl=None, name=None, units='Angstrom', input_units_to_au=None, fix_com=None, fix_orientation=None, fix_symmetry=None, fragment_separators=None, fragment_charges=None, fragment_multiplicities=None, molecular_charge=None, molecular_multiplicity=None, comment=None, provenance=None, connectivity=None, missing_enabled_return='error', tooclose=0.1, zero_ghost_fragments=False, nonphysical=False, mtol=0.001, verbose=1, return_dict=False)¶; Construct Molecule from unvalidated arrays and variables.; Light wrapper around from_arrays(); that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance.; :param See from_arrays().:. Returns:. Return type:psi4.core.Molecule. from_dict(arg0: dict) → psi4.core.Molecule¶; Returns a new Molecule constructed from python dictionary. In progress: name and capabilities should not be relied upon. classmethod from_schema(molschema, return_dict=False, verbose=1)¶; Construct Molecule from non-Psi4 schema.; Light wrapper around from_arrays(). Parameters:; molschema (dict) – Dictionary form of Molecule following k",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:28159,Availability,error,error,28159,"al_symmetry_number(self: psi4.core.Molecule) → int¶; Returns number of unique orientations of the rigid molecule that only interchange identical atoms. rotor_type(self: psi4.core.Molecule) → str¶; Returns rotor type, e.g. ‘RT_ATOM’ or ‘RT_SYMMETRIC_TOP’. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=1)[source]¶; Compute dispersion correction via Grimme’s DFTD3 program. Parameters:; func (str, optional) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashparam.; dashlvl (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; dashparam (dict, optional) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False)¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; foun",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:34552,Availability,toler,tolerance,34552,"elf: psi4.core.Molecule, arg0: int, arg1: float) → None¶; Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self: psi4.core.Molecule, arg0: psi4.core.PointGroup) → None¶; Sets the molecular point group to the point group object arg0. set_provenance(self: psi4.core.Molecule, arg0: Dict[str, str]) → None¶; Sets molecule provenance. set_units(self: psi4.core.Molecule, arg0: psi4.core.GeometryUnits) → None¶; Sets units (Angstrom or Bohr) used to define the geometry. Imposes Psi4 physical constants conversion for input_units_to_au. set_variable(self: psi4.core.Molecule, arg0: str, arg1: float) → None¶; Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self: psi4.core.Molecule, atom: int) → str¶; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self: psi4.core.Molecule, arg0: float) → None¶; Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self: psi4.core.Molecule) → str¶; Returns the symmetry specified in the input. to_arrays(dummy=False, ghost_as_dummy=False)[source]¶; Exports coordinate info into NumPy arrays. Parameters:; dummy (bool, optional) – Whether or not to include dummy atoms in returned arrays.; ghost_as_dummy (bool, optional) – Whether or not to treat ghost atoms as dummies. Returns:; geom, mass, elem, elez, uniq (ndarray, ndarray, ndarray, ndarray, ndarray) – (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordinate, orientation, and element information is; preserved but fragmentation, chgmult, and dummy/ghost is lost.; Usage; —–; geom, mass, elem, elez, uniq = molinstance.to_arrays(). to_dict(force_c1=False, force_units=False, np_out=True)[source]¶; Serializes instance into Molecule dictionary. to_schema(dtype, units",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:40827,Availability,fault,faulty,40827,"ncoded. Returns:; bfs_map (list of lists) – Array of atom indices (0-indexed) of detected fragments.; bfs_arrays (tuple of lists of ndarray, optional) – geom, mass, elem info per-fragment.; Only provided if return_arrays is True.; bfs_molecules (list of qcdb.Molecule or psi4.core.Molecule, optional) – List of molecules, each built from one fragment. Center and; orientation of fragments is fixed so orientation info from self is; not lost. Loses chgmult and ghost/dummy info from self and contains; default chgmult.; Only provided if return_molecules is True.; Returned are of same type as self.; bfs_molecule (qcdb.Molecule or psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See seed_atoms. Any existing fragmentation info/chgmult encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:41800,Availability,toler,tolerance,41800,"self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See seed_atoms. Any existing fragmentation info/chgmult encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molecule) → bool; Gets whether or not center of mass is fixed. comment(self: psi4.core.Molecule) → str; Gets molecule comment. connectivity(self: psi4.core.Molecule) → List[Tuple[int, int, float]]; Gets molecule connectivity. create_psi4_string_from_molecule(self: psi4.core.Molecule) → str; Gets a string re-expressing in in",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:41963,Availability,toler,tolerance,41963,"lt encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molecule) → bool; Gets whether or not center of mass is fixed. comment(self: psi4.core.Molecule) → str; Gets molecule comment. connectivity(self: psi4.core.Molecule) → List[Tuple[int, int, float]]; Gets molecule connectivity. create_psi4_string_from_molecule(self: psi4.core.Molecule) → str; Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:44362,Availability,toler,tolerance,44362,"bsets(self: psi4.core.Molecule, arg0: List[int], arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real. extract_subsets(self: psi4.core.Molecule, arg0: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real. fZ(self: psi4.core.Molecule, arg0: int) → float; Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self: psi4.core.Molecule, atom: int) → float; Gets charge of atom (0-indexed including dummies). find_highest_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup; Finds highest possible computational molecular point group. find_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup; Finds computational molecular point group, user can override this with the symmetry keyword. fix_com(self: psi4.core.Molecule, arg0: bool) → None; Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self: psi4.core.Molecule, arg0: bool) → None; Fix the orientation at its current frame. flabel(self: psi4.core.Molecule, atom: int) → str; Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self: psi4.core.Molecule, atom: int) → float; Gets mass of atom (0-indexed including dummies). form_symmetry_information(self: psi4.core.Molecule, arg0: float) → None; Uses the point group object obtain by calling point_group(). format_molecule_for_mol(); Returns a string of Molecule formatted for mol2.; Written by Trent ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:44513,Availability,toler,tolerance,44513,"t. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real. extract_subsets(self: psi4.core.Molecule, arg0: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real. fZ(self: psi4.core.Molecule, arg0: int) → float; Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self: psi4.core.Molecule, atom: int) → float; Gets charge of atom (0-indexed including dummies). find_highest_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup; Finds highest possible computational molecular point group. find_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup; Finds computational molecular point group, user can override this with the symmetry keyword. fix_com(self: psi4.core.Molecule, arg0: bool) → None; Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self: psi4.core.Molecule, arg0: bool) → None; Fix the orientation at its current frame. flabel(self: psi4.core.Molecule, atom: int) → str; Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self: psi4.core.Molecule, atom: int) → float; Gets mass of atom (0-indexed including dummies). form_symmetry_information(self: psi4.core.Molecule, arg0: float) → None; Uses the point group object obtain by calling point_group(). format_molecule_for_mol(); Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. classmethod from_arrays(geom=None, elea=None, elez=None, elem=None, mass=None, real=None, elbl=None, name=None, units='Angstrom',",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:45809,Availability,error,error,45809,"n override this with the symmetry keyword. fix_com(self: psi4.core.Molecule, arg0: bool) → None; Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self: psi4.core.Molecule, arg0: bool) → None; Fix the orientation at its current frame. flabel(self: psi4.core.Molecule, atom: int) → str; Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self: psi4.core.Molecule, atom: int) → float; Gets mass of atom (0-indexed including dummies). form_symmetry_information(self: psi4.core.Molecule, arg0: float) → None; Uses the point group object obtain by calling point_group(). format_molecule_for_mol(); Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. classmethod from_arrays(geom=None, elea=None, elez=None, elem=None, mass=None, real=None, elbl=None, name=None, units='Angstrom', input_units_to_au=None, fix_com=None, fix_orientation=None, fix_symmetry=None, fragment_separators=None, fragment_charges=None, fragment_multiplicities=None, molecular_charge=None, molecular_multiplicity=None, comment=None, provenance=None, connectivity=None, missing_enabled_return='error', tooclose=0.1, zero_ghost_fragments=False, nonphysical=False, mtol=0.001, verbose=1, return_dict=False); Construct Molecule from unvalidated arrays and variables.; Light wrapper around from_arrays(); that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance.; :param See from_arrays().:. Returns:. Return type:psi4.core.Molecule. from_dict(arg0: dict) → psi4.core.Molecule; Returns a new Molecule constructed from python dictionary. In progress: name and capabilities should not be relied upon. classmethod from_schema(molschema, return_dict=False, verbose=1); Construct Molecule from non-Psi4 schema.; Light wrapper around from_arrays(). Parameters:; molschema (dict) – Dictionary form of Molecule following know",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:53833,Availability,error,error,53833,"ional_symmetry_number(self: psi4.core.Molecule) → int; Returns number of unique orientations of the rigid molecule that only interchange identical atoms. rotor_type(self: psi4.core.Molecule) → str; Returns rotor type, e.g. ‘RT_ATOM’ or ‘RT_SYMMETRIC_TOP’. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=1)[source]; Compute dispersion correction via Grimme’s DFTD3 program. Parameters:; func (str, optional) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashparam.; dashlvl (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; dashparam (dict, optional) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False); Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:60197,Availability,toler,tolerance,60197,"harge(self: psi4.core.Molecule, arg0: int, arg1: float) → None; Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self: psi4.core.Molecule, arg0: psi4.core.PointGroup) → None; Sets the molecular point group to the point group object arg0. set_provenance(self: psi4.core.Molecule, arg0: Dict[str, str]) → None; Sets molecule provenance. set_units(self: psi4.core.Molecule, arg0: psi4.core.GeometryUnits) → None; Sets units (Angstrom or Bohr) used to define the geometry. Imposes Psi4 physical constants conversion for input_units_to_au. set_variable(self: psi4.core.Molecule, arg0: str, arg1: float) → None; Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self: psi4.core.Molecule, atom: int) → str; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self: psi4.core.Molecule, arg0: float) → None; Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self: psi4.core.Molecule) → str; Returns the symmetry specified in the input. to_arrays(dummy=False, ghost_as_dummy=False)[source]; Exports coordinate info into NumPy arrays. Parameters:; dummy (bool, optional) – Whether or not to include dummy atoms in returned arrays.; ghost_as_dummy (bool, optional) – Whether or not to treat ghost atoms as dummies. Returns:; geom, mass, elem, elez, uniq (ndarray, ndarray, ndarray, ndarray, ndarray) – (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordinate, orientation, and element information is; preserved but fragmentation, chgmult, and dummy/ghost is lost.; Usage; —–; geom, mass, elem, elez, uniq = molinstance.to_arrays(). to_dict(force_c1=False, force_units=False, np_out=True)[source]; Serializes instance into Molecule dictionary. to_schema(dtype, units='Bo",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:62629,Deployability,update,updated,62629," ndarray) – (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordinate, orientation, and element information is; preserved but fragmentation, chgmult, and dummy/ghost is lost.; Usage; —–; geom, mass, elem, elez, uniq = molinstance.to_arrays(). to_dict(force_c1=False, force_units=False, np_out=True)[source]; Serializes instance into Molecule dictionary. to_schema(dtype, units='Bohr')[source]; Serializes instance into dictionary according to schema dtype. to_string(dtype, units='Angstrom', atom_format=None, ghost_format=None, width=17, prec=12)[source]; Format a string representation of QM molecule. translate(self: psi4.core.Molecule, arg0: psi4.core.Vector3) → None; Translates molecule by arg0. true_atomic_number(self: psi4.core.Molecule, atom: int) → int; Gets atomic number of atom from element (0-indexed without dummies). units(self: psi4.core.Molecule) → str; Returns units used to define the geometry, i.e. ‘Angstrom’ or ‘Bohr’. update_geometry(self: psi4.core.Molecule) → None; Reevaluates the geometry with current variable values, orientation directives, etc. by clearing the atoms list and rebuilding it. Idempotent. Use liberally.Must be called after initial Molecule definition by string. x(self: psi4.core.Molecule, arg0: int) → float; x position [Bohr] of atom arg0 (0-indexed without dummies). xyz(self: psi4.core.Molecule, i: int) → psi4.core.Vector3; Return the Vector3 for atom i (0-indexed without dummies). y(self: psi4.core.Molecule, arg0: int) → float; y position [Bohr] of atom arg0 (0-indexed without dummies). z(self: psi4.core.Molecule, arg0: int) → float; z position [Bohr] of atom arg0 (0-indexed without dummies). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:274,Energy Efficiency,charge,charge,274,"﻿. Molecule. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. Molecule¶. class psi4.core.Molecule¶; Bases: pybind11_builtins.pybind11_object; Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; Methods Summary. B787(ref_mol[, do_plot, verbose, atoms_map, …]); Finds shift, rotation, and atom reordering of concern_mol that best aligns with ref_mol. BFS([seed_atoms, bond_threshold, …]); Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Z(self, arg0); Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self); Sets all fragments in the molecule to be active. add_atom(self, Z, x, y, z, symbol, mass, …); Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. basis_on_atom(self, arg0); Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self); Computes center of mass of molecule (does not translate molecule). charge(self, atom); Gets charge of atom (0-indexed without dummies). clone(self); Returns a new Molecule identical to arg1. com_fixed(self); Gets whether or not center of mass is fixed. comment(self); Gets molecule comment. connectivity(self); Gets molecule connectivity. create_psi4_string_from_molecule(self); Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self); Sets all fragments in the molecule to be inactive. distance_matrix(self); Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. fZ(self, arg0); Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self, atom); Gets charge of atom (",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:615,Energy Efficiency,charge,charge,615,"﻿. Molecule. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. Molecule¶. class psi4.core.Molecule¶; Bases: pybind11_builtins.pybind11_object; Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; Methods Summary. B787(ref_mol[, do_plot, verbose, atoms_map, …]); Finds shift, rotation, and atom reordering of concern_mol that best aligns with ref_mol. BFS([seed_atoms, bond_threshold, …]); Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Z(self, arg0); Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self); Sets all fragments in the molecule to be active. add_atom(self, Z, x, y, z, symbol, mass, …); Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. basis_on_atom(self, arg0); Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self); Computes center of mass of molecule (does not translate molecule). charge(self, atom); Gets charge of atom (0-indexed without dummies). clone(self); Returns a new Molecule identical to arg1. com_fixed(self); Gets whether or not center of mass is fixed. comment(self); Gets molecule comment. connectivity(self); Gets molecule connectivity. create_psi4_string_from_molecule(self); Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self); Sets all fragments in the molecule to be inactive. distance_matrix(self); Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. fZ(self, arg0); Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self, atom); Gets charge of atom (",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:906,Energy Efficiency,charge,charge,906,"﻿. Molecule. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. Molecule¶. class psi4.core.Molecule¶; Bases: pybind11_builtins.pybind11_object; Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; Methods Summary. B787(ref_mol[, do_plot, verbose, atoms_map, …]); Finds shift, rotation, and atom reordering of concern_mol that best aligns with ref_mol. BFS([seed_atoms, bond_threshold, …]); Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Z(self, arg0); Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self); Sets all fragments in the molecule to be active. add_atom(self, Z, x, y, z, symbol, mass, …); Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. basis_on_atom(self, arg0); Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self); Computes center of mass of molecule (does not translate molecule). charge(self, atom); Gets charge of atom (0-indexed without dummies). clone(self); Returns a new Molecule identical to arg1. com_fixed(self); Gets whether or not center of mass is fixed. comment(self); Gets molecule comment. connectivity(self); Gets molecule connectivity. create_psi4_string_from_molecule(self); Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self); Sets all fragments in the molecule to be inactive. distance_matrix(self); Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. fZ(self, arg0); Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self, atom); Gets charge of atom (",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:1190,Energy Efficiency,charge,charge,1190,"s, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; Methods Summary. B787(ref_mol[, do_plot, verbose, atoms_map, …]); Finds shift, rotation, and atom reordering of concern_mol that best aligns with ref_mol. BFS([seed_atoms, bond_threshold, …]); Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Z(self, arg0); Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self); Sets all fragments in the molecule to be active. add_atom(self, Z, x, y, z, symbol, mass, …); Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. basis_on_atom(self, arg0); Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self); Computes center of mass of molecule (does not translate molecule). charge(self, atom); Gets charge of atom (0-indexed without dummies). clone(self); Returns a new Molecule identical to arg1. com_fixed(self); Gets whether or not center of mass is fixed. comment(self); Gets molecule comment. connectivity(self); Gets molecule connectivity. create_psi4_string_from_molecule(self); Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self); Sets all fragments in the molecule to be inactive. distance_matrix(self); Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. fZ(self, arg0); Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self, atom); Gets charge of atom (0-indexed including dummies). find_highest_point_group(self, tolerance); Finds highest possible computational molecular point group. find_point_group(self, tolerance); Finds computational molecular point group, user can ove",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:1215,Energy Efficiency,charge,charge,1215,"s, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; Methods Summary. B787(ref_mol[, do_plot, verbose, atoms_map, …]); Finds shift, rotation, and atom reordering of concern_mol that best aligns with ref_mol. BFS([seed_atoms, bond_threshold, …]); Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Z(self, arg0); Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self); Sets all fragments in the molecule to be active. add_atom(self, Z, x, y, z, symbol, mass, …); Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. basis_on_atom(self, arg0); Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self); Computes center of mass of molecule (does not translate molecule). charge(self, atom); Gets charge of atom (0-indexed without dummies). clone(self); Returns a new Molecule identical to arg1. com_fixed(self); Gets whether or not center of mass is fixed. comment(self); Gets molecule comment. connectivity(self); Gets molecule connectivity. create_psi4_string_from_molecule(self); Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self); Sets all fragments in the molecule to be inactive. distance_matrix(self); Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. fZ(self, arg0); Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self, atom); Gets charge of atom (0-indexed including dummies). find_highest_point_group(self, tolerance); Finds highest possible computational molecular point group. find_point_group(self, tolerance); Finds computational molecular point group, user can ove",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:1629,Energy Efficiency,charge,charges,1629,"rg0 (0-indexed without dummies). activate_all_fragments(self); Sets all fragments in the molecule to be active. add_atom(self, Z, x, y, z, symbol, mass, …); Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. basis_on_atom(self, arg0); Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self); Computes center of mass of molecule (does not translate molecule). charge(self, atom); Gets charge of atom (0-indexed without dummies). clone(self); Returns a new Molecule identical to arg1. com_fixed(self); Gets whether or not center of mass is fixed. comment(self); Gets molecule comment. connectivity(self); Gets molecule connectivity. create_psi4_string_from_molecule(self); Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self); Sets all fragments in the molecule to be inactive. distance_matrix(self); Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. fZ(self, arg0); Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self, atom); Gets charge of atom (0-indexed including dummies). find_highest_point_group(self, tolerance); Finds highest possible computational molecular point group. find_point_group(self, tolerance); Finds computational molecular point group, user can override this with the symmetry keyword. fix_com(self, arg0); Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self, arg0); Fix the orientation at its current frame. flabel(self, atom); Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self, atom); Gets mass of atom (0-indexed including dummies). form_symm",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:1908,Energy Efficiency,charge,charge,1908,"ed atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. basis_on_atom(self, arg0); Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self); Computes center of mass of molecule (does not translate molecule). charge(self, atom); Gets charge of atom (0-indexed without dummies). clone(self); Returns a new Molecule identical to arg1. com_fixed(self); Gets whether or not center of mass is fixed. comment(self); Gets molecule comment. connectivity(self); Gets molecule connectivity. create_psi4_string_from_molecule(self); Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self); Sets all fragments in the molecule to be inactive. distance_matrix(self); Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. fZ(self, arg0); Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self, atom); Gets charge of atom (0-indexed including dummies). find_highest_point_group(self, tolerance); Finds highest possible computational molecular point group. find_point_group(self, tolerance); Finds computational molecular point group, user can override this with the symmetry keyword. fix_com(self, arg0); Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self, arg0); Fix the orientation at its current frame. flabel(self, atom); Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self, atom); Gets mass of atom (0-indexed including dummies). form_symmetry_information(self, arg0); Uses the point group object obtain by calling point_group(). format_molecule_for_mol(); Returns a string of Molecule formatted for mol2. from_arrays([geom, elea, elez, elem, mass, …]); Construct Molecule from unvalidated arrays and variables. from_dict(arg0);",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:1985,Energy Efficiency,charge,charge,1985,"rloaded function. basis_on_atom(self, arg0); Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self); Computes center of mass of molecule (does not translate molecule). charge(self, atom); Gets charge of atom (0-indexed without dummies). clone(self); Returns a new Molecule identical to arg1. com_fixed(self); Gets whether or not center of mass is fixed. comment(self); Gets molecule comment. connectivity(self); Gets molecule connectivity. create_psi4_string_from_molecule(self); Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self); Sets all fragments in the molecule to be inactive. distance_matrix(self); Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. fZ(self, arg0); Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self, atom); Gets charge of atom (0-indexed including dummies). find_highest_point_group(self, tolerance); Finds highest possible computational molecular point group. find_point_group(self, tolerance); Finds computational molecular point group, user can override this with the symmetry keyword. fix_com(self, arg0); Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self, arg0); Fix the orientation at its current frame. flabel(self, atom); Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self, atom); Gets mass of atom (0-indexed including dummies). form_symmetry_information(self, arg0); Uses the point group object obtain by calling point_group(). format_molecule_for_mol(); Returns a string of Molecule formatted for mol2. from_arrays([geom, elea, elez, elem, mass, …]); Construct Molecule from unvalidated arrays and variables. from_dict(arg0); Returns a new Molecule constructed from python dictionary. from_schema(m",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:3868,Energy Efficiency,charge,charge,3868,"cule from unvalidated arrays and variables. from_dict(arg0); Returns a new Molecule constructed from python dictionary. from_schema(molschema[, return_dict, verbose]); Construct Molecule from non-Psi4 schema. from_string(molstr[, dtype, name, fix_com, …]). fsymbol(self, atom); Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed including dummies). ftrue_atomic_number(self, atom); Gets atomic number of atom from element (0-indexed including dummies). full_geometry(self); Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (including dummies). full_pg_n(self); Gets n in Cnv, etc.; If there is no n (e.g. fx(self, arg0); x position of atom arg0 (0-indexed including dummies in Bohr). fy(self, arg0); y position of atom arg0 (0-indexed including dummies in Bohr). fz(self, arg0); z position of atom arg0 (0-indexed including dummies in Bohr). geometry(self); Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (excluding dummies). get_fragment_charges(self); Gets the charge of each fragment. get_fragment_multiplicities(self); Gets the multiplicity of each fragment. get_fragment_types(self); Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self); Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self); Gets point group name such as C3v or S8. get_full_point_group_with_n(self); Gets point group name such as Cnv or Sn. get_variable(self, arg0); Returns the value of variable arg0 in the structural variables list. inertia_tensor(self); Returns intertial tensor. input_units_to_au(self); Returns unit conversion to [a0] for geometry. irrep_labels(self); Returns Irreducible Representation symmetry labels. is_variable(self, arg0); Checks if variable arg0 is in the structural variables list. label(self, atom); Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self, ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:5013,Energy Efficiency,charge,charge,5013,"Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self); Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self); Gets point group name such as C3v or S8. get_full_point_group_with_n(self); Gets point group name such as Cnv or Sn. get_variable(self, arg0); Returns the value of variable arg0 in the structural variables list. inertia_tensor(self); Returns intertial tensor. input_units_to_au(self); Returns unit conversion to [a0] for geometry. irrep_labels(self); Returns Irreducible Representation symmetry labels. is_variable(self, arg0); Checks if variable arg0 is in the structural variables list. label(self, atom); Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self, atom); Returns mass of atom (0-indexed). mass_number(self, arg0); Mass number (A) of atom if known, else -1. molecular_charge(self); Gets the molecular charge. move_to_com(self); Moves molecule to center of mass. multiplicity(self); Gets the multiplicity (defined as 2Ms + 1). nallatom(self); Number of real and dummy atoms. name(self); Gets molecule name. natom(self); Number of real atoms. nfragments(self); Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs); Overloaded function. nuclear_repulsion_energy(self, dipole_field, …); Computes nuclear repulsion energy. nuclear_repulsion_energy_deriv1(self, …); Returns first derivative of nuclear repulsion energy as a matrix (natom, 3). nuclear_repulsion_energy_deriv2(self); Returns second derivative of nuclear repulsion energy as a matrix (natom X 3, natom X 3). orientation_fixed(self); Get whether or not orientation is fixed. point_group(self); Returns the current point group object. print_bond_angles(self); Print the bond angle geometrical parameters. print_cluster(self); Prints the molecule in Cartesians in input units adding fragment separators.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:5447,Energy Efficiency,energy,energy,5447,"le arg0 in the structural variables list. inertia_tensor(self); Returns intertial tensor. input_units_to_au(self); Returns unit conversion to [a0] for geometry. irrep_labels(self); Returns Irreducible Representation symmetry labels. is_variable(self, arg0); Checks if variable arg0 is in the structural variables list. label(self, atom); Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self, atom); Returns mass of atom (0-indexed). mass_number(self, arg0); Mass number (A) of atom if known, else -1. molecular_charge(self); Gets the molecular charge. move_to_com(self); Moves molecule to center of mass. multiplicity(self); Gets the multiplicity (defined as 2Ms + 1). nallatom(self); Number of real and dummy atoms. name(self); Gets molecule name. natom(self); Number of real atoms. nfragments(self); Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs); Overloaded function. nuclear_repulsion_energy(self, dipole_field, …); Computes nuclear repulsion energy. nuclear_repulsion_energy_deriv1(self, …); Returns first derivative of nuclear repulsion energy as a matrix (natom, 3). nuclear_repulsion_energy_deriv2(self); Returns second derivative of nuclear repulsion energy as a matrix (natom X 3, natom X 3). orientation_fixed(self); Get whether or not orientation is fixed. point_group(self); Returns the current point group object. print_bond_angles(self); Print the bond angle geometrical parameters. print_cluster(self); Prints the molecule in Cartesians in input units adding fragment separators. print_distances(self); Print the interatomic distance geometrical parameters. print_in_input_format(self); Prints the molecule as Cartesian or ZMatrix entries, just as inputted. print_out(self); Prints the molecule in Cartesians in input units to output file. print_out_in_angstrom(self); Prints the molecule in Cartesians in Angstroms to output file. print_out_in_bohr(self); Prints the molecule in Cartesians in Bo",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:5543,Energy Efficiency,energy,energy,5543,"_to_au(self); Returns unit conversion to [a0] for geometry. irrep_labels(self); Returns Irreducible Representation symmetry labels. is_variable(self, arg0); Checks if variable arg0 is in the structural variables list. label(self, atom); Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self, atom); Returns mass of atom (0-indexed). mass_number(self, arg0); Mass number (A) of atom if known, else -1. molecular_charge(self); Gets the molecular charge. move_to_com(self); Moves molecule to center of mass. multiplicity(self); Gets the multiplicity (defined as 2Ms + 1). nallatom(self); Number of real and dummy atoms. name(self); Gets molecule name. natom(self); Number of real atoms. nfragments(self); Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs); Overloaded function. nuclear_repulsion_energy(self, dipole_field, …); Computes nuclear repulsion energy. nuclear_repulsion_energy_deriv1(self, …); Returns first derivative of nuclear repulsion energy as a matrix (natom, 3). nuclear_repulsion_energy_deriv2(self); Returns second derivative of nuclear repulsion energy as a matrix (natom X 3, natom X 3). orientation_fixed(self); Get whether or not orientation is fixed. point_group(self); Returns the current point group object. print_bond_angles(self); Print the bond angle geometrical parameters. print_cluster(self); Prints the molecule in Cartesians in input units adding fragment separators. print_distances(self); Print the interatomic distance geometrical parameters. print_in_input_format(self); Prints the molecule as Cartesian or ZMatrix entries, just as inputted. print_out(self); Prints the molecule in Cartesians in input units to output file. print_out_in_angstrom(self); Prints the molecule in Cartesians in Angstroms to output file. print_out_in_bohr(self); Prints the molecule in Cartesians in Bohr to output file. print_out_of_planes(self); Print the out-of-plane angle geometrical parameters to o",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:5660,Energy Efficiency,energy,energy,5660,"labels. is_variable(self, arg0); Checks if variable arg0 is in the structural variables list. label(self, atom); Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self, atom); Returns mass of atom (0-indexed). mass_number(self, arg0); Mass number (A) of atom if known, else -1. molecular_charge(self); Gets the molecular charge. move_to_com(self); Moves molecule to center of mass. multiplicity(self); Gets the multiplicity (defined as 2Ms + 1). nallatom(self); Number of real and dummy atoms. name(self); Gets molecule name. natom(self); Number of real atoms. nfragments(self); Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs); Overloaded function. nuclear_repulsion_energy(self, dipole_field, …); Computes nuclear repulsion energy. nuclear_repulsion_energy_deriv1(self, …); Returns first derivative of nuclear repulsion energy as a matrix (natom, 3). nuclear_repulsion_energy_deriv2(self); Returns second derivative of nuclear repulsion energy as a matrix (natom X 3, natom X 3). orientation_fixed(self); Get whether or not orientation is fixed. point_group(self); Returns the current point group object. print_bond_angles(self); Print the bond angle geometrical parameters. print_cluster(self); Prints the molecule in Cartesians in input units adding fragment separators. print_distances(self); Print the interatomic distance geometrical parameters. print_in_input_format(self); Prints the molecule as Cartesian or ZMatrix entries, just as inputted. print_out(self); Prints the molecule in Cartesians in input units to output file. print_out_in_angstrom(self); Prints the molecule in Cartesians in Angstroms to output file. print_out_in_bohr(self); Prints the molecule in Cartesians in Bohr to output file. print_out_of_planes(self); Print the out-of-plane angle geometrical parameters to output file. print_rotational_constants(self); Print the rotational constants to output file. provenance(self); Gets molecule",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:9131,Energy Efficiency,charge,charge,9131,"g0, arg1); Sets basis set arg0 to all atoms. set_basis_by_label(self, arg0, arg1, arg2); Sets basis set arg1 to all atoms with label (e.g., H4) arg0. set_basis_by_symbol(self, arg0, arg1, arg2); Sets basis set arg1 to all atoms with symbol (e.g., H) arg0. set_comment(self, arg0); Sets molecule comment. set_connectivity(self, arg0, int, float]]); Sets molecule connectivity. set_full_geometry(self, arg0); Sets the geometry, given a (Natom X 3) matrix arg0 of coordinates (in Bohr) (including dummies. set_geometry(self, arg0); Sets the geometry, given a (Natom X 3) matrix arg0 of coordinates [a0] (excluding dummies). set_ghost_fragment(self, arg0); Sets the specified fragment arg0 to be Ghost. set_ghost_fragments(self, arg0); Sets the specified list arg0 of fragments to be Ghost. set_input_units_to_au(self, arg0); Sets unit conversion to [a0] for geometry. set_mass(self, atom, mass); Sets mass of atom (0-indexed) to mass (good for isotopic substitutions). set_molecular_charge(self, arg0); Change the overall molecular charge. set_multiplicity(self, arg0); Change the multiplicity (defined as 2S + 1). set_name(self, arg0); Sets molecule name. set_nuclear_charge(self, arg0, arg1); Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self, arg0); Sets the molecular point group to the point group object arg0. set_provenance(self, arg0, str]); Sets molecule provenance. set_units(self, arg0); Sets units (Angstrom or Bohr) used to define the geometry. set_variable(self, arg0, arg1); Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self, atom); Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self, arg0); Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self); Returns the symmetry specified in the input. to_arrays([dummy, ghost_as_dumm",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:9310,Energy Efficiency,charge,charge,9310," to all atoms with symbol (e.g., H) arg0. set_comment(self, arg0); Sets molecule comment. set_connectivity(self, arg0, int, float]]); Sets molecule connectivity. set_full_geometry(self, arg0); Sets the geometry, given a (Natom X 3) matrix arg0 of coordinates (in Bohr) (including dummies. set_geometry(self, arg0); Sets the geometry, given a (Natom X 3) matrix arg0 of coordinates [a0] (excluding dummies). set_ghost_fragment(self, arg0); Sets the specified fragment arg0 to be Ghost. set_ghost_fragments(self, arg0); Sets the specified list arg0 of fragments to be Ghost. set_input_units_to_au(self, arg0); Sets unit conversion to [a0] for geometry. set_mass(self, atom, mass); Sets mass of atom (0-indexed) to mass (good for isotopic substitutions). set_molecular_charge(self, arg0); Change the overall molecular charge. set_multiplicity(self, arg0); Change the multiplicity (defined as 2S + 1). set_name(self, arg0); Sets molecule name. set_nuclear_charge(self, arg0, arg1); Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self, arg0); Sets the molecular point group to the point group object arg0. set_provenance(self, arg0, str]); Sets molecule provenance. set_units(self, arg0); Sets units (Angstrom or Bohr) used to define the geometry. set_variable(self, arg0, arg1); Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self, atom); Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self, arg0); Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self); Returns the symmetry specified in the input. to_arrays([dummy, ghost_as_dummy]); Exports coordinate info into NumPy arrays. to_dict([force_c1, force_units, np_out]); Serializes instance into Molecule dictionary. to_schema(dtype[, units]); Serializes instance into dictionary according to sc",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:13031,Energy Efficiency,charge,charge,13031,"procedure is truncated when RMSD condition met, saving time.; do_plot (bool, optional) – Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion (bool, optional) – Run reorderings to completion (past RMSD = 0) even if unnecessary because; mols_align=True. Used to test worst-case timings.; run_resorting (bool, optional) – Run the resorting machinery even if unnecessary because atoms_map=True.; uno_cutoff (float, optional) – TODO; run_mirror (bool, optional) – Run alternate geometries potentially allowing best match to ref_mol; from mirror image of concern_mol. Only run if system confirmed to; be nonsuperimposable upon mirror reflection. Returns:First item is RMSD [A] between ref_mol and the optimally aligned; geometry computed.; Second item is a AlignmentMill namedtuple with fields; (shift, rotation, atommap, mirror) that prescribe the transformation; from concern_mol and the optimally aligned geometry.; Third item is a crude charge-, multiplicity-, fragment-less Molecule; at optimally aligned (and atom-ordered) geometry. Return type; determined by concern_mol type. Return type:float, tuple, qcdb.Molecule or psi4.core.Molecule. BFS(seed_atoms=None, bond_threshold=1.2, return_arrays=False, return_molecules=False, return_molecule=False)[source]¶; Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Parameters:; self (qcdb.Molecule or psi4.core.Molecule) – ; seed_atoms (list, optional) – List of lists of atoms (0-indexed) belonging to independent fragments.; Useful to prompt algorithm or to define intramolecular fragments through; border atoms. Example: [[1, 0], [2]]; bond_threshold (float, optional) – Factor beyond average of covalent radii to determine bond cutoff.; return_arrays (bool, optional) – If True, also return fragments as list of arrays.; return_molecules (bool, optional) – If True, also return fragments as list of Molecules.; return_molecule (bool, optional) – If True, also return one big Molecule with fr",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:14922,Energy Efficiency,charge,charge,14922,"les (bool, optional) – If True, also return fragments as list of Molecules.; return_molecule (bool, optional) – If True, also return one big Molecule with fragmentation encoded. Returns:; bfs_map (list of lists) – Array of atom indices (0-indexed) of detected fragments.; bfs_arrays (tuple of lists of ndarray, optional) – geom, mass, elem info per-fragment.; Only provided if return_arrays is True.; bfs_molecules (list of qcdb.Molecule or psi4.core.Molecule, optional) – List of molecules, each built from one fragment. Center and; orientation of fragments is fixed so orientation info from self is; not lost. Loses chgmult and ghost/dummy info from self and contains; default chgmult.; Only provided if return_molecules is True.; Returned are of same type as self.; bfs_molecule (qcdb.Molecule or psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See seed_atoms. Any existing fragmentation info/chgmult encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float¶; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None¶; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None¶; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs)¶; Overloaded function. ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:15385,Energy Efficiency,charge,charge,15385,"of molecules, each built from one fragment. Center and; orientation of fragments is fixed so orientation info from self is; not lost. Loses chgmult and ghost/dummy info from self and contains; default chgmult.; Only provided if return_molecules is True.; Returned are of same type as self.; bfs_molecule (qcdb.Molecule or psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See seed_atoms. Any existing fragmentation info/chgmult encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float¶; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None¶; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None¶; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs)¶; Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str¶; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:15642,Energy Efficiency,charge,charge,15642,"r psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See seed_atoms. Any existing fragmentation info/chgmult encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float¶; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None¶; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None¶; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs)¶; Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str¶; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3¶; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float¶; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule¶; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molec",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:15804,Energy Efficiency,charge,charge,15804,"r psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See seed_atoms. Any existing fragmentation info/chgmult encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float¶; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None¶; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None¶; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs)¶; Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str¶; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3¶; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float¶; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule¶; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molec",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:16479,Energy Efficiency,charge,charge,16479,"ne¶; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None¶; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs)¶; Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str¶; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3¶; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float¶; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule¶; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molecule) → bool¶; Gets whether or not center of mass is fixed. comment(self: psi4.core.Molecule) → str¶; Gets molecule comment. connectivity(self: psi4.core.Molecule) → List[Tuple[int, int, float]]¶; Gets molecule connectivity. create_psi4_string_from_molecule(self: psi4.core.Molecule) → str¶; Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self: psi4.core.Molecule) → None¶; Sets all fragments in the molecule to be inactive. distance_matrix(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns Matrix of interatom distances. extract_subsets(*args, **kwargs)¶; Overloaded function. extract_subsets(self: psi4.core.Mole",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:16538,Energy Efficiency,charge,charge,16538,"add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None¶; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs)¶; Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str¶; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3¶; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float¶; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule¶; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molecule) → bool¶; Gets whether or not center of mass is fixed. comment(self: psi4.core.Molecule) → str¶; Gets molecule comment. connectivity(self: psi4.core.Molecule) → List[Tuple[int, int, float]]¶; Gets molecule connectivity. create_psi4_string_from_molecule(self: psi4.core.Molecule) → str¶; Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self: psi4.core.Molecule) → None¶; Sets all fragments in the molecule to be inactive. distance_matrix(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns Matrix of interatom distances. extract_subsets(*args, **kwargs)¶; Overloaded function. extract_subsets(self: psi4.core.Molecule, arg0: List[int], arg1: List[int]) -> psi4.core.M",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:17128,Energy Efficiency,charge,charges,17128," tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str¶; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3¶; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float¶; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule¶; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molecule) → bool¶; Gets whether or not center of mass is fixed. comment(self: psi4.core.Molecule) → str¶; Gets molecule comment. connectivity(self: psi4.core.Molecule) → List[Tuple[int, int, float]]¶; Gets molecule connectivity. create_psi4_string_from_molecule(self: psi4.core.Molecule) → str¶; Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self: psi4.core.Molecule) → None¶; Sets all fragments in the molecule to be inactive. distance_matrix(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns Matrix of interatom distances. extract_subsets(*args, **kwargs)¶; Overloaded function. extract_subsets(self: psi4.core.Molecule, arg0: List[int], arg1: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: List[int], arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragment Ghost. extract_subsets(self: p",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:18417,Energy Efficiency,charge,charge,18417,"wargs)¶; Overloaded function. extract_subsets(self: psi4.core.Molecule, arg0: List[int], arg1: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: List[int], arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real. extract_subsets(self: psi4.core.Molecule, arg0: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real. fZ(self: psi4.core.Molecule, arg0: int) → float¶; Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self: psi4.core.Molecule, atom: int) → float¶; Gets charge of atom (0-indexed including dummies). find_highest_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup¶; Finds highest possible computational molecular point group. find_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup¶; Finds computational molecular point group, user can override this with the symmetry keyword. fix_com(self: psi4.core.Molecule, arg0: bool) → None¶; Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self: psi4.core.Molecule, arg0: bool) → None¶; Fix the orientation at its current frame. flabel(self: psi4.core.Molecule, atom: int) → str¶; Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self: psi4.core.Molecule, atom: int) → float¶; Gets mass of atom (0-indexed including dummies). form_symm",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:18528,Energy Efficiency,charge,charge,18528,"si4.core.Molecule. Returns copy of self with arg0 fragments Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: List[int], arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real. extract_subsets(self: psi4.core.Molecule, arg0: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real. fZ(self: psi4.core.Molecule, arg0: int) → float¶; Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self: psi4.core.Molecule, atom: int) → float¶; Gets charge of atom (0-indexed including dummies). find_highest_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup¶; Finds highest possible computational molecular point group. find_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup¶; Finds computational molecular point group, user can override this with the symmetry keyword. fix_com(self: psi4.core.Molecule, arg0: bool) → None¶; Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self: psi4.core.Molecule, arg0: bool) → None¶; Fix the orientation at its current frame. flabel(self: psi4.core.Molecule, atom: int) → str¶; Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self: psi4.core.Molecule, atom: int) → float¶; Gets mass of atom (0-indexed including dummies). form_symmetry_information(self: psi4.core.Molecule, arg0: float) → None¶; Uses the point group object obtain by calling",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:22510,Energy Efficiency,charge,charge,22510," C, H4 = H) (0-indexed including dummies). ftrue_atomic_number(self: psi4.core.Molecule, atom: int) → int¶; Gets atomic number of atom from element (0-indexed including dummies). full_geometry(self: psi4.core.Molecule) → psi4.core.Matrix¶; Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (including dummies). full_pg_n(self: psi4.core.Molecule) → int¶; Gets n in Cnv, etc.; If there is no n (e.g. Td) it’s the highest-order rotation axis. fx(self: psi4.core.Molecule, arg0: int) → float¶; x position of atom arg0 (0-indexed including dummies in Bohr). fy(self: psi4.core.Molecule, arg0: int) → float¶; y position of atom arg0 (0-indexed including dummies in Bohr). fz(self: psi4.core.Molecule, arg0: int) → float¶; z position of atom arg0 (0-indexed including dummies in Bohr). geometry(self: psi4.core.Molecule) → psi4.core.Matrix¶; Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (excluding dummies). get_fragment_charges(self: psi4.core.Molecule) → List[int]¶; Gets the charge of each fragment. get_fragment_multiplicities(self: psi4.core.Molecule) → List[int]¶; Gets the multiplicity of each fragment. get_fragment_types(self: psi4.core.Molecule) → List[str]¶; Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self: psi4.core.Molecule) → List[Tuple[int, int]]¶; Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self: psi4.core.Molecule) → str¶; Gets point group name such as C3v or S8. get_full_point_group_with_n(self: psi4.core.Molecule) → str¶; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float¶; Returns the value of variable arg0 in the structural variables list. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float¶; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:24114,Energy Efficiency,charge,charge,24114,"i4.core.Molecule) → str¶; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float¶; Returns the value of variable arg0 in the structural variables list. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float¶; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4.core.Molecule) → List[str]¶; Returns Irreducible Representation symmetry labels. is_variable(self: psi4.core.Molecule, arg0: str) → bool¶; Checks if variable arg0 is in the structural variables list. label(self: psi4.core.Molecule, atom: int) → str¶; Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self: psi4.core.Molecule, atom: int) → float¶; Returns mass of atom (0-indexed). mass_number(self: psi4.core.Molecule, arg0: int) → int¶; Mass number (A) of atom if known, else -1. molecular_charge(self: psi4.core.Molecule) → int¶; Gets the molecular charge. move_to_com(self: psi4.core.Molecule) → None¶; Moves molecule to center of mass. multiplicity(self: psi4.core.Molecule) → int¶; Gets the multiplicity (defined as 2Ms + 1). nallatom(self: psi4.core.Molecule) → int¶; Number of real and dummy atoms. name(self: psi4.core.Molecule) → str¶; Gets molecule name. natom(self: psi4.core.Molecule) → int¶; Number of real atoms. nfragments(self: psi4.core.Molecule) → int¶; Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs)¶; Overloaded function. nuclear_dipole(self: psi4.core.Molecule, arg0: psi4.core.Vector3) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to a specified origin atg0. nuclear_dipole(self: psi4.core.Molecule) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to the origin. nuclear_repulsion_energy(self: psi4.core.Molecule, dipole_field: List[float[3]]=[0.0, 0.0, 0.0]) → float¶; Computes nuclear repulsion energy. nuclear_rep",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:25080,Energy Efficiency,energy,energy,25080,"lf: psi4.core.Molecule) → int¶; Gets the molecular charge. move_to_com(self: psi4.core.Molecule) → None¶; Moves molecule to center of mass. multiplicity(self: psi4.core.Molecule) → int¶; Gets the multiplicity (defined as 2Ms + 1). nallatom(self: psi4.core.Molecule) → int¶; Number of real and dummy atoms. name(self: psi4.core.Molecule) → str¶; Gets molecule name. natom(self: psi4.core.Molecule) → int¶; Number of real atoms. nfragments(self: psi4.core.Molecule) → int¶; Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs)¶; Overloaded function. nuclear_dipole(self: psi4.core.Molecule, arg0: psi4.core.Vector3) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to a specified origin atg0. nuclear_dipole(self: psi4.core.Molecule) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to the origin. nuclear_repulsion_energy(self: psi4.core.Molecule, dipole_field: List[float[3]]=[0.0, 0.0, 0.0]) → float¶; Computes nuclear repulsion energy. nuclear_repulsion_energy_deriv1(self: psi4.core.Molecule, dipole_field: List[float[3]]=[0.0, 0.0, 0.0]) → psi4.core.Matrix¶; Returns first derivative of nuclear repulsion energy as a matrix (natom, 3). nuclear_repulsion_energy_deriv2(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns second derivative of nuclear repulsion energy as a matrix (natom X 3, natom X 3). orientation_fixed(self: psi4.core.Molecule) → bool¶; Get whether or not orientation is fixed. point_group(self: psi4.core.Molecule) → psi4.core.PointGroup¶; Returns the current point group object. print_bond_angles(self: psi4.core.Molecule) → None¶; Print the bond angle geometrical parameters. print_cluster(self: psi4.core.Molecule) → None¶; Prints the molecule in Cartesians in input units adding fragment separators. print_distances(self: psi4.core.Molecule) → None¶; Print the interatomic distance geometrical parameters. print_in_input_format(self: psi4.core.Molecule) → None¶; Prints the molecule ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:25259,Energy Efficiency,energy,energy,25259,"t¶; Gets the multiplicity (defined as 2Ms + 1). nallatom(self: psi4.core.Molecule) → int¶; Number of real and dummy atoms. name(self: psi4.core.Molecule) → str¶; Gets molecule name. natom(self: psi4.core.Molecule) → int¶; Number of real atoms. nfragments(self: psi4.core.Molecule) → int¶; Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs)¶; Overloaded function. nuclear_dipole(self: psi4.core.Molecule, arg0: psi4.core.Vector3) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to a specified origin atg0. nuclear_dipole(self: psi4.core.Molecule) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to the origin. nuclear_repulsion_energy(self: psi4.core.Molecule, dipole_field: List[float[3]]=[0.0, 0.0, 0.0]) → float¶; Computes nuclear repulsion energy. nuclear_repulsion_energy_deriv1(self: psi4.core.Molecule, dipole_field: List[float[3]]=[0.0, 0.0, 0.0]) → psi4.core.Matrix¶; Returns first derivative of nuclear repulsion energy as a matrix (natom, 3). nuclear_repulsion_energy_deriv2(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns second derivative of nuclear repulsion energy as a matrix (natom X 3, natom X 3). orientation_fixed(self: psi4.core.Molecule) → bool¶; Get whether or not orientation is fixed. point_group(self: psi4.core.Molecule) → psi4.core.PointGroup¶; Returns the current point group object. print_bond_angles(self: psi4.core.Molecule) → None¶; Print the bond angle geometrical parameters. print_cluster(self: psi4.core.Molecule) → None¶; Prints the molecule in Cartesians in input units adding fragment separators. print_distances(self: psi4.core.Molecule) → None¶; Print the interatomic distance geometrical parameters. print_in_input_format(self: psi4.core.Molecule) → None¶; Prints the molecule as Cartesian or ZMatrix entries, just as inputted. print_out(self: psi4.core.Molecule) → None¶; Prints the molecule in Cartesians in input units to output file. print_out_in_angstrom(s",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:25416,Energy Efficiency,energy,energy,25416,"ets molecule name. natom(self: psi4.core.Molecule) → int¶; Number of real atoms. nfragments(self: psi4.core.Molecule) → int¶; Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs)¶; Overloaded function. nuclear_dipole(self: psi4.core.Molecule, arg0: psi4.core.Vector3) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to a specified origin atg0. nuclear_dipole(self: psi4.core.Molecule) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to the origin. nuclear_repulsion_energy(self: psi4.core.Molecule, dipole_field: List[float[3]]=[0.0, 0.0, 0.0]) → float¶; Computes nuclear repulsion energy. nuclear_repulsion_energy_deriv1(self: psi4.core.Molecule, dipole_field: List[float[3]]=[0.0, 0.0, 0.0]) → psi4.core.Matrix¶; Returns first derivative of nuclear repulsion energy as a matrix (natom, 3). nuclear_repulsion_energy_deriv2(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns second derivative of nuclear repulsion energy as a matrix (natom X 3, natom X 3). orientation_fixed(self: psi4.core.Molecule) → bool¶; Get whether or not orientation is fixed. point_group(self: psi4.core.Molecule) → psi4.core.PointGroup¶; Returns the current point group object. print_bond_angles(self: psi4.core.Molecule) → None¶; Print the bond angle geometrical parameters. print_cluster(self: psi4.core.Molecule) → None¶; Prints the molecule in Cartesians in input units adding fragment separators. print_distances(self: psi4.core.Molecule) → None¶; Print the interatomic distance geometrical parameters. print_in_input_format(self: psi4.core.Molecule) → None¶; Prints the molecule as Cartesian or ZMatrix entries, just as inputted. print_out(self: psi4.core.Molecule) → None¶; Prints the molecule in Cartesians in input units to output file. print_out_in_angstrom(self: psi4.core.Molecule) → None¶; Prints the molecule in Cartesians in Angstroms to output file. print_out_in_bohr(self: psi4.core.Molecule) → None¶; Prints the m",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:28270,Energy Efficiency,energy,energy-only,28270,"tical atoms. rotor_type(self: psi4.core.Molecule) → str¶; Returns rotor type, e.g. ‘RT_ATOM’ or ‘RT_SYMMETRIC_TOP’. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=1)[source]¶; Compute dispersion correction via Grimme’s DFTD3 program. Parameters:; func (str, optional) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashparam.; dashlvl (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; dashparam (dict, optional) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False)¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:28322,Energy Efficiency,efficient,efficient,28322,"tical atoms. rotor_type(self: psi4.core.Molecule) → str¶; Returns rotor type, e.g. ‘RT_ATOM’ or ‘RT_SYMMETRIC_TOP’. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=1)[source]¶; Compute dispersion correction via Grimme’s DFTD3 program. Parameters:; func (str, optional) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashparam.; dashlvl (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; dashparam (dict, optional) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False)¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:28427,Energy Efficiency,energy,energy,28427,"param=None, dertype=None, verbose=1)[source]¶; Compute dispersion correction via Grimme’s DFTD3 program. Parameters:; func (str, optional) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashparam.; dashlvl (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; dashparam (dict, optional) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False)¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) →",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:28460,Energy Efficiency,energy,energy,28460,"param=None, dertype=None, verbose=1)[source]¶; Compute dispersion correction via Grimme’s DFTD3 program. Parameters:; func (str, optional) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashparam.; dashlvl (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; dashparam (dict, optional) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False)¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) →",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:28540,Energy Efficiency,energy,energy,28540,"ctional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashparam.; dashlvl (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; dashparam (dict, optional) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False)¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str¶; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str¶; Saves an XYZ file to arg2. save_xyz_file(self: ps",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:28613,Energy Efficiency,energy,energy,28613,"ctional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashparam.; dashlvl (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; dashparam (dict, optional) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False)¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str¶; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str¶; Saves an XYZ file to arg2. save_xyz_file(self: ps",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:28981,Energy Efficiency,energy,energy,28981," the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False)¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str¶; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str¶; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None¶; Saves an XYZ file to arg0. schoenflies_symbol(self: psi4.core.Molecule) → str¶; Returns the Schoenflies symbol. scramble(do_shift=True, do_rotate=True, do_resort=True, deflection=1.0, do_mirror=False, do_plot=False, run_to_completion=False, run_resorting=False, verbose=1)[source]¶; Tester for B787 by shifting, rotating, and atom shuffling ref_mol and; checking that the aligner retur",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:29046,Energy Efficiency,energy,energy,29046," the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False)¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str¶; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str¶; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None¶; Saves an XYZ file to arg0. schoenflies_symbol(self: psi4.core.Molecule) → str¶; Returns the Schoenflies symbol. scramble(do_shift=True, do_rotate=True, do_resort=True, deflection=1.0, do_mirror=False, do_plot=False, run_to_completion=False, run_resorting=False, verbose=1)[source]¶; Tester for B787 by shifting, rotating, and atom shuffling ref_mol and; checking that the aligner retur",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:33199,Energy Efficiency,charge,charge,33199,"y(self: psi4.core.Molecule, arg0: List[Tuple[int, int, float]]) → None¶; Sets molecule connectivity. set_full_geometry(self: psi4.core.Molecule, arg0: psi4.core.Matrix) → None¶; Sets the geometry, given a (Natom X 3) matrix arg0 of coordinates (in Bohr) (including dummies. set_geometry(self: psi4.core.Molecule, arg0: psi4.core.Matrix) → None¶; Sets the geometry, given a (Natom X 3) matrix arg0 of coordinates [a0] (excluding dummies). set_ghost_fragment(self: psi4.core.Molecule, arg0: int) → None¶; Sets the specified fragment arg0 to be Ghost. set_ghost_fragments(self: psi4.core.Molecule, arg0: List[int]) → None¶; Sets the specified list arg0 of fragments to be Ghost. set_input_units_to_au(self: psi4.core.Molecule, arg0: float) → None¶; Sets unit conversion to [a0] for geometry. set_mass(self: psi4.core.Molecule, atom: int, mass: float) → None¶; Sets mass of atom (0-indexed) to mass (good for isotopic substitutions). set_molecular_charge(self: psi4.core.Molecule, arg0: int) → None¶; Change the overall molecular charge. Setting in initial molecule string or constructor preferred. set_multiplicity(self: psi4.core.Molecule, arg0: int) → None¶; Change the multiplicity (defined as 2S + 1). Setting in initial molecule string or constructor preferred. set_name(self: psi4.core.Molecule, arg0: str) → None¶; Sets molecule name. set_nuclear_charge(self: psi4.core.Molecule, arg0: int, arg1: float) → None¶; Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self: psi4.core.Molecule, arg0: psi4.core.PointGroup) → None¶; Sets the molecular point group to the point group object arg0. set_provenance(self: psi4.core.Molecule, arg0: Dict[str, str]) → None¶; Sets molecule provenance. set_units(self: psi4.core.Molecule, arg0: psi4.core.GeometryUnits) → None¶; Sets units (Angstrom or Bohr) used to define the geometry. Imposes Psi4 physical constants conversion for input_units_to_au. set_variable(self: psi4.core.Molecule, arg0: str, arg1: f",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:33606,Energy Efficiency,charge,charge,33606," set_ghost_fragment(self: psi4.core.Molecule, arg0: int) → None¶; Sets the specified fragment arg0 to be Ghost. set_ghost_fragments(self: psi4.core.Molecule, arg0: List[int]) → None¶; Sets the specified list arg0 of fragments to be Ghost. set_input_units_to_au(self: psi4.core.Molecule, arg0: float) → None¶; Sets unit conversion to [a0] for geometry. set_mass(self: psi4.core.Molecule, atom: int, mass: float) → None¶; Sets mass of atom (0-indexed) to mass (good for isotopic substitutions). set_molecular_charge(self: psi4.core.Molecule, arg0: int) → None¶; Change the overall molecular charge. Setting in initial molecule string or constructor preferred. set_multiplicity(self: psi4.core.Molecule, arg0: int) → None¶; Change the multiplicity (defined as 2S + 1). Setting in initial molecule string or constructor preferred. set_name(self: psi4.core.Molecule, arg0: str) → None¶; Sets molecule name. set_nuclear_charge(self: psi4.core.Molecule, arg0: int, arg1: float) → None¶; Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self: psi4.core.Molecule, arg0: psi4.core.PointGroup) → None¶; Sets the molecular point group to the point group object arg0. set_provenance(self: psi4.core.Molecule, arg0: Dict[str, str]) → None¶; Sets molecule provenance. set_units(self: psi4.core.Molecule, arg0: psi4.core.GeometryUnits) → None¶; Sets units (Angstrom or Bohr) used to define the geometry. Imposes Psi4 physical constants conversion for input_units_to_au. set_variable(self: psi4.core.Molecule, arg0: str, arg1: float) → None¶; Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self: psi4.core.Molecule, atom: int) → str¶; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self: psi4.core.Molecule, arg0: float) → None¶; Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. s",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:38786,Energy Efficiency,charge,charge,38786,"procedure is truncated when RMSD condition met, saving time.; do_plot (bool, optional) – Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion (bool, optional) – Run reorderings to completion (past RMSD = 0) even if unnecessary because; mols_align=True. Used to test worst-case timings.; run_resorting (bool, optional) – Run the resorting machinery even if unnecessary because atoms_map=True.; uno_cutoff (float, optional) – TODO; run_mirror (bool, optional) – Run alternate geometries potentially allowing best match to ref_mol; from mirror image of concern_mol. Only run if system confirmed to; be nonsuperimposable upon mirror reflection. Returns:First item is RMSD [A] between ref_mol and the optimally aligned; geometry computed.; Second item is a AlignmentMill namedtuple with fields; (shift, rotation, atommap, mirror) that prescribe the transformation; from concern_mol and the optimally aligned geometry.; Third item is a crude charge-, multiplicity-, fragment-less Molecule; at optimally aligned (and atom-ordered) geometry. Return type; determined by concern_mol type. Return type:float, tuple, qcdb.Molecule or psi4.core.Molecule. BFS(seed_atoms=None, bond_threshold=1.2, return_arrays=False, return_molecules=False, return_molecule=False)[source]; Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Parameters:; self (qcdb.Molecule or psi4.core.Molecule) – ; seed_atoms (list, optional) – List of lists of atoms (0-indexed) belonging to independent fragments.; Useful to prompt algorithm or to define intramolecular fragments through; border atoms. Example: [[1, 0], [2]]; bond_threshold (float, optional) – Factor beyond average of covalent radii to determine bond cutoff.; return_arrays (bool, optional) – If True, also return fragments as list of arrays.; return_molecules (bool, optional) – If True, also return fragments as list of Molecules.; return_molecule (bool, optional) – If True, also return one big Molecule with fra",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:40676,Energy Efficiency,charge,charge,40676,"les (bool, optional) – If True, also return fragments as list of Molecules.; return_molecule (bool, optional) – If True, also return one big Molecule with fragmentation encoded. Returns:; bfs_map (list of lists) – Array of atom indices (0-indexed) of detected fragments.; bfs_arrays (tuple of lists of ndarray, optional) – geom, mass, elem info per-fragment.; Only provided if return_arrays is True.; bfs_molecules (list of qcdb.Molecule or psi4.core.Molecule, optional) – List of molecules, each built from one fragment. Center and; orientation of fragments is fixed so orientation info from self is; not lost. Loses chgmult and ghost/dummy info from self and contains; default chgmult.; Only provided if return_molecules is True.; Returned are of same type as self.; bfs_molecule (qcdb.Molecule or psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See seed_atoms. Any existing fragmentation info/chgmult encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. atom",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:41138,Energy Efficiency,charge,charge,41138,"of molecules, each built from one fragment. Center and; orientation of fragments is fixed so orientation info from self is; not lost. Loses chgmult and ghost/dummy info from self and contains; default chgmult.; Only provided if return_molecules is True.; Returned are of same type as self.; bfs_molecule (qcdb.Molecule or psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See seed_atoms. Any existing fragmentation info/chgmult encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → ps",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:41394,Energy Efficiency,charge,charge,41394," or psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See seed_atoms. Any existing fragmentation info/chgmult encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molecule) ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:41555,Energy Efficiency,charge,charge,41555," or psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See seed_atoms. Any existing fragmentation info/chgmult encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molecule) ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:42227,Energy Efficiency,charge,charge,42227," → None; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molecule) → bool; Gets whether or not center of mass is fixed. comment(self: psi4.core.Molecule) → str; Gets molecule comment. connectivity(self: psi4.core.Molecule) → List[Tuple[int, int, float]]; Gets molecule connectivity. create_psi4_string_from_molecule(self: psi4.core.Molecule) → str; Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self: psi4.core.Molecule) → None; Sets all fragments in the molecule to be inactive. distance_matrix(self: psi4.core.Molecule) → psi4.core.Matrix; Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. extract_subsets(self: psi4.core.Molecule, arg",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:42285,Energy Efficiency,charge,charge,42285,"ve. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molecule) → bool; Gets whether or not center of mass is fixed. comment(self: psi4.core.Molecule) → str; Gets molecule comment. connectivity(self: psi4.core.Molecule) → List[Tuple[int, int, float]]; Gets molecule connectivity. create_psi4_string_from_molecule(self: psi4.core.Molecule) → str; Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self: psi4.core.Molecule) → None; Sets all fragments in the molecule to be inactive. distance_matrix(self: psi4.core.Molecule) → psi4.core.Matrix; Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. extract_subsets(self: psi4.core.Molecule, arg0: List[int], arg1: List[int]) -> psi4.core.Molecule.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:42870,Energy Efficiency,charge,charges,42870,"oat[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molecule) → bool; Gets whether or not center of mass is fixed. comment(self: psi4.core.Molecule) → str; Gets molecule comment. connectivity(self: psi4.core.Molecule) → List[Tuple[int, int, float]]; Gets molecule connectivity. create_psi4_string_from_molecule(self: psi4.core.Molecule) → str; Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self: psi4.core.Molecule) → None; Sets all fragments in the molecule to be inactive. distance_matrix(self: psi4.core.Molecule) → psi4.core.Matrix; Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. extract_subsets(self: psi4.core.Molecule, arg0: List[int], arg1: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: List[int], arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragment Ghost. extract_subsets(self: psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:44155,Energy Efficiency,charge,charge,44155,"kwargs); Overloaded function. extract_subsets(self: psi4.core.Molecule, arg0: List[int], arg1: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: List[int], arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real. extract_subsets(self: psi4.core.Molecule, arg0: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real. fZ(self: psi4.core.Molecule, arg0: int) → float; Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self: psi4.core.Molecule, atom: int) → float; Gets charge of atom (0-indexed including dummies). find_highest_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup; Finds highest possible computational molecular point group. find_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup; Finds computational molecular point group, user can override this with the symmetry keyword. fix_com(self: psi4.core.Molecule, arg0: bool) → None; Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self: psi4.core.Molecule, arg0: bool) → None; Fix the orientation at its current frame. flabel(self: psi4.core.Molecule, atom: int) → str; Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self: psi4.core.Molecule, atom: int) → float; Gets mass of atom (0-indexed including dummies). form_symmetry_in",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:44265,Energy Efficiency,charge,charge,44265,"psi4.core.Molecule. Returns copy of self with arg0 fragments Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: List[int], arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragments Ghost. extract_subsets(self: psi4.core.Molecule, arg0: int, arg1: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real and arg1 fragment Ghost. extract_subsets(self: psi4.core.Molecule, arg0: List[int]) -> psi4.core.Molecule. Returns copy of self with arg0 fragments Real. extract_subsets(self: psi4.core.Molecule, arg0: int) -> psi4.core.Molecule. Returns copy of self with arg0 fragment Real. fZ(self: psi4.core.Molecule, arg0: int) → float; Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self: psi4.core.Molecule, atom: int) → float; Gets charge of atom (0-indexed including dummies). find_highest_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup; Finds highest possible computational molecular point group. find_point_group(self: psi4.core.Molecule, tolerance: float=1e-08) → psi4.core.PointGroup; Finds computational molecular point group, user can override this with the symmetry keyword. fix_com(self: psi4.core.Molecule, arg0: bool) → None; Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self: psi4.core.Molecule, arg0: bool) → None; Fix the orientation at its current frame. flabel(self: psi4.core.Molecule, atom: int) → str; Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self: psi4.core.Molecule, atom: int) → float; Gets mass of atom (0-indexed including dummies). form_symmetry_information(self: psi4.core.Molecule, arg0: float) → None; Uses the point group object obtain by calling point_",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:48226,Energy Efficiency,charge,charge,48226," (C2 => C, H4 = H) (0-indexed including dummies). ftrue_atomic_number(self: psi4.core.Molecule, atom: int) → int; Gets atomic number of atom from element (0-indexed including dummies). full_geometry(self: psi4.core.Molecule) → psi4.core.Matrix; Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (including dummies). full_pg_n(self: psi4.core.Molecule) → int; Gets n in Cnv, etc.; If there is no n (e.g. Td) it’s the highest-order rotation axis. fx(self: psi4.core.Molecule, arg0: int) → float; x position of atom arg0 (0-indexed including dummies in Bohr). fy(self: psi4.core.Molecule, arg0: int) → float; y position of atom arg0 (0-indexed including dummies in Bohr). fz(self: psi4.core.Molecule, arg0: int) → float; z position of atom arg0 (0-indexed including dummies in Bohr). geometry(self: psi4.core.Molecule) → psi4.core.Matrix; Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (excluding dummies). get_fragment_charges(self: psi4.core.Molecule) → List[int]; Gets the charge of each fragment. get_fragment_multiplicities(self: psi4.core.Molecule) → List[int]; Gets the multiplicity of each fragment. get_fragment_types(self: psi4.core.Molecule) → List[str]; Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self: psi4.core.Molecule) → List[Tuple[int, int]]; Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self: psi4.core.Molecule) → str; Gets point group name such as C3v or S8. get_full_point_group_with_n(self: psi4.core.Molecule) → str; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float; Returns the value of variable arg0 in the structural variables list. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4.core.Mo",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:49816,Energy Efficiency,charge,charge,49816,"n(self: psi4.core.Molecule) → str; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float; Returns the value of variable arg0 in the structural variables list. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4.core.Molecule) → List[str]; Returns Irreducible Representation symmetry labels. is_variable(self: psi4.core.Molecule, arg0: str) → bool; Checks if variable arg0 is in the structural variables list. label(self: psi4.core.Molecule, atom: int) → str; Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self: psi4.core.Molecule, atom: int) → float; Returns mass of atom (0-indexed). mass_number(self: psi4.core.Molecule, arg0: int) → int; Mass number (A) of atom if known, else -1. molecular_charge(self: psi4.core.Molecule) → int; Gets the molecular charge. move_to_com(self: psi4.core.Molecule) → None; Moves molecule to center of mass. multiplicity(self: psi4.core.Molecule) → int; Gets the multiplicity (defined as 2Ms + 1). nallatom(self: psi4.core.Molecule) → int; Number of real and dummy atoms. name(self: psi4.core.Molecule) → str; Gets molecule name. natom(self: psi4.core.Molecule) → int; Number of real atoms. nfragments(self: psi4.core.Molecule) → int; Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs); Overloaded function. nuclear_dipole(self: psi4.core.Molecule, arg0: psi4.core.Vector3) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to a specified origin atg0. nuclear_dipole(self: psi4.core.Molecule) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to the origin. nuclear_repulsion_energy(self: psi4.core.Molecule, dipole_field: List[float[3]]=[0.0, 0.0, 0.0]) → float; Computes nuclear repulsion energy. nuclear_repulsion_en",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:50774,Energy Efficiency,energy,energy,50774,"charge(self: psi4.core.Molecule) → int; Gets the molecular charge. move_to_com(self: psi4.core.Molecule) → None; Moves molecule to center of mass. multiplicity(self: psi4.core.Molecule) → int; Gets the multiplicity (defined as 2Ms + 1). nallatom(self: psi4.core.Molecule) → int; Number of real and dummy atoms. name(self: psi4.core.Molecule) → str; Gets molecule name. natom(self: psi4.core.Molecule) → int; Number of real atoms. nfragments(self: psi4.core.Molecule) → int; Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs); Overloaded function. nuclear_dipole(self: psi4.core.Molecule, arg0: psi4.core.Vector3) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to a specified origin atg0. nuclear_dipole(self: psi4.core.Molecule) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to the origin. nuclear_repulsion_energy(self: psi4.core.Molecule, dipole_field: List[float[3]]=[0.0, 0.0, 0.0]) → float; Computes nuclear repulsion energy. nuclear_repulsion_energy_deriv1(self: psi4.core.Molecule, dipole_field: List[float[3]]=[0.0, 0.0, 0.0]) → psi4.core.Matrix; Returns first derivative of nuclear repulsion energy as a matrix (natom, 3). nuclear_repulsion_energy_deriv2(self: psi4.core.Molecule) → psi4.core.Matrix; Returns second derivative of nuclear repulsion energy as a matrix (natom X 3, natom X 3). orientation_fixed(self: psi4.core.Molecule) → bool; Get whether or not orientation is fixed. point_group(self: psi4.core.Molecule) → psi4.core.PointGroup; Returns the current point group object. print_bond_angles(self: psi4.core.Molecule) → None; Print the bond angle geometrical parameters. print_cluster(self: psi4.core.Molecule) → None; Prints the molecule in Cartesians in input units adding fragment separators. print_distances(self: psi4.core.Molecule) → None; Print the interatomic distance geometrical parameters. print_in_input_format(self: psi4.core.Molecule) → None; Prints the molecule as Cartes",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:50952,Energy Efficiency,energy,energy,50952,"e) → int; Gets the multiplicity (defined as 2Ms + 1). nallatom(self: psi4.core.Molecule) → int; Number of real and dummy atoms. name(self: psi4.core.Molecule) → str; Gets molecule name. natom(self: psi4.core.Molecule) → int; Number of real atoms. nfragments(self: psi4.core.Molecule) → int; Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs); Overloaded function. nuclear_dipole(self: psi4.core.Molecule, arg0: psi4.core.Vector3) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to a specified origin atg0. nuclear_dipole(self: psi4.core.Molecule) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to the origin. nuclear_repulsion_energy(self: psi4.core.Molecule, dipole_field: List[float[3]]=[0.0, 0.0, 0.0]) → float; Computes nuclear repulsion energy. nuclear_repulsion_energy_deriv1(self: psi4.core.Molecule, dipole_field: List[float[3]]=[0.0, 0.0, 0.0]) → psi4.core.Matrix; Returns first derivative of nuclear repulsion energy as a matrix (natom, 3). nuclear_repulsion_energy_deriv2(self: psi4.core.Molecule) → psi4.core.Matrix; Returns second derivative of nuclear repulsion energy as a matrix (natom X 3, natom X 3). orientation_fixed(self: psi4.core.Molecule) → bool; Get whether or not orientation is fixed. point_group(self: psi4.core.Molecule) → psi4.core.PointGroup; Returns the current point group object. print_bond_angles(self: psi4.core.Molecule) → None; Print the bond angle geometrical parameters. print_cluster(self: psi4.core.Molecule) → None; Prints the molecule in Cartesians in input units adding fragment separators. print_distances(self: psi4.core.Molecule) → None; Print the interatomic distance geometrical parameters. print_in_input_format(self: psi4.core.Molecule) → None; Prints the molecule as Cartesian or ZMatrix entries, just as inputted. print_out(self: psi4.core.Molecule) → None; Prints the molecule in Cartesians in input units to output file. print_out_in_angstrom(self: psi",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:51108,Energy Efficiency,energy,energy,51108,"str; Gets molecule name. natom(self: psi4.core.Molecule) → int; Number of real atoms. nfragments(self: psi4.core.Molecule) → int; Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs); Overloaded function. nuclear_dipole(self: psi4.core.Molecule, arg0: psi4.core.Vector3) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to a specified origin atg0. nuclear_dipole(self: psi4.core.Molecule) -> psi4.core.Vector3. Gets the nuclear contribution to the dipole, with respect to the origin. nuclear_repulsion_energy(self: psi4.core.Molecule, dipole_field: List[float[3]]=[0.0, 0.0, 0.0]) → float; Computes nuclear repulsion energy. nuclear_repulsion_energy_deriv1(self: psi4.core.Molecule, dipole_field: List[float[3]]=[0.0, 0.0, 0.0]) → psi4.core.Matrix; Returns first derivative of nuclear repulsion energy as a matrix (natom, 3). nuclear_repulsion_energy_deriv2(self: psi4.core.Molecule) → psi4.core.Matrix; Returns second derivative of nuclear repulsion energy as a matrix (natom X 3, natom X 3). orientation_fixed(self: psi4.core.Molecule) → bool; Get whether or not orientation is fixed. point_group(self: psi4.core.Molecule) → psi4.core.PointGroup; Returns the current point group object. print_bond_angles(self: psi4.core.Molecule) → None; Print the bond angle geometrical parameters. print_cluster(self: psi4.core.Molecule) → None; Prints the molecule in Cartesians in input units adding fragment separators. print_distances(self: psi4.core.Molecule) → None; Print the interatomic distance geometrical parameters. print_in_input_format(self: psi4.core.Molecule) → None; Prints the molecule as Cartesian or ZMatrix entries, just as inputted. print_out(self: psi4.core.Molecule) → None; Prints the molecule in Cartesians in input units to output file. print_out_in_angstrom(self: psi4.core.Molecule) → None; Prints the molecule in Cartesians in Angstroms to output file. print_out_in_bohr(self: psi4.core.Molecule) → None; Prints the molecule in",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:53944,Energy Efficiency,energy,energy-only,53944,"entical atoms. rotor_type(self: psi4.core.Molecule) → str; Returns rotor type, e.g. ‘RT_ATOM’ or ‘RT_SYMMETRIC_TOP’. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=1)[source]; Compute dispersion correction via Grimme’s DFTD3 program. Parameters:; func (str, optional) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashparam.; dashlvl (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; dashparam (dict, optional) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False); Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this m",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:53996,Energy Efficiency,efficient,efficient,53996,"entical atoms. rotor_type(self: psi4.core.Molecule) → str; Returns rotor type, e.g. ‘RT_ATOM’ or ‘RT_SYMMETRIC_TOP’. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=1)[source]; Compute dispersion correction via Grimme’s DFTD3 program. Parameters:; func (str, optional) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashparam.; dashlvl (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; dashparam (dict, optional) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False); Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this m",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:54101,Energy Efficiency,energy,energy,54101,"hparam=None, dertype=None, verbose=1)[source]; Compute dispersion correction via Grimme’s DFTD3 program. Parameters:; func (str, optional) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashparam.; dashlvl (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; dashparam (dict, optional) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False); Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:54134,Energy Efficiency,energy,energy,54134,"hparam=None, dertype=None, verbose=1)[source]; Compute dispersion correction via Grimme’s DFTD3 program. Parameters:; func (str, optional) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashparam.; dashlvl (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; dashparam (dict, optional) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False); Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:54214,Energy Efficiency,energy,energy,54214,"ctional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashparam.; dashlvl (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; dashparam (dict, optional) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False); Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str; Saves an XYZ file to arg2. save_xyz_file(self: psi4.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:54287,Energy Efficiency,energy,energy,54287,"ctional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashparam.; dashlvl (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; dashparam (dict, optional) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False); Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str; Saves an XYZ file to arg2. save_xyz_file(self: psi4.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:54654,Energy Efficiency,energy,energy,54654,"r the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False); Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None; Saves an XYZ file to arg0. schoenflies_symbol(self: psi4.core.Molecule) → str; Returns the Schoenflies symbol. scramble(do_shift=True, do_rotate=True, do_resort=True, deflection=1.0, do_mirror=False, do_plot=False, run_to_completion=False, run_resorting=False, verbose=1)[source]; Tester for B787 by shifting, rotating, and atom shuffling ref_mol and; checking that the aligner returns th",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:54719,Energy Efficiency,energy,energy,54719,"r the same keys as dashcoeff[dashlvl][‘default’]; used to override any or all values initialized by func.; Extra parameters will error.; dertype (int or str, optional) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False); Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None; Saves an XYZ file to arg0. schoenflies_symbol(self: psi4.core.Molecule) → str; Returns the Schoenflies symbol. scramble(do_shift=True, do_rotate=True, do_resort=True, deflection=1.0, do_mirror=False, do_plot=False, run_to_completion=False, run_resorting=False, verbose=1)[source]; Tester for B787 by shifting, rotating, and atom shuffling ref_mol and; checking that the aligner returns th",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:58853,Energy Efficiency,charge,charge,58853,"nectivity(self: psi4.core.Molecule, arg0: List[Tuple[int, int, float]]) → None; Sets molecule connectivity. set_full_geometry(self: psi4.core.Molecule, arg0: psi4.core.Matrix) → None; Sets the geometry, given a (Natom X 3) matrix arg0 of coordinates (in Bohr) (including dummies. set_geometry(self: psi4.core.Molecule, arg0: psi4.core.Matrix) → None; Sets the geometry, given a (Natom X 3) matrix arg0 of coordinates [a0] (excluding dummies). set_ghost_fragment(self: psi4.core.Molecule, arg0: int) → None; Sets the specified fragment arg0 to be Ghost. set_ghost_fragments(self: psi4.core.Molecule, arg0: List[int]) → None; Sets the specified list arg0 of fragments to be Ghost. set_input_units_to_au(self: psi4.core.Molecule, arg0: float) → None; Sets unit conversion to [a0] for geometry. set_mass(self: psi4.core.Molecule, atom: int, mass: float) → None; Sets mass of atom (0-indexed) to mass (good for isotopic substitutions). set_molecular_charge(self: psi4.core.Molecule, arg0: int) → None; Change the overall molecular charge. Setting in initial molecule string or constructor preferred. set_multiplicity(self: psi4.core.Molecule, arg0: int) → None; Change the multiplicity (defined as 2S + 1). Setting in initial molecule string or constructor preferred. set_name(self: psi4.core.Molecule, arg0: str) → None; Sets molecule name. set_nuclear_charge(self: psi4.core.Molecule, arg0: int, arg1: float) → None; Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self: psi4.core.Molecule, arg0: psi4.core.PointGroup) → None; Sets the molecular point group to the point group object arg0. set_provenance(self: psi4.core.Molecule, arg0: Dict[str, str]) → None; Sets molecule provenance. set_units(self: psi4.core.Molecule, arg0: psi4.core.GeometryUnits) → None; Sets units (Angstrom or Bohr) used to define the geometry. Imposes Psi4 physical constants conversion for input_units_to_au. set_variable(self: psi4.core.Molecule, arg0: str, arg1: float) →",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:59257,Energy Efficiency,charge,charge,59257,"mmies). set_ghost_fragment(self: psi4.core.Molecule, arg0: int) → None; Sets the specified fragment arg0 to be Ghost. set_ghost_fragments(self: psi4.core.Molecule, arg0: List[int]) → None; Sets the specified list arg0 of fragments to be Ghost. set_input_units_to_au(self: psi4.core.Molecule, arg0: float) → None; Sets unit conversion to [a0] for geometry. set_mass(self: psi4.core.Molecule, atom: int, mass: float) → None; Sets mass of atom (0-indexed) to mass (good for isotopic substitutions). set_molecular_charge(self: psi4.core.Molecule, arg0: int) → None; Change the overall molecular charge. Setting in initial molecule string or constructor preferred. set_multiplicity(self: psi4.core.Molecule, arg0: int) → None; Change the multiplicity (defined as 2S + 1). Setting in initial molecule string or constructor preferred. set_name(self: psi4.core.Molecule, arg0: str) → None; Sets molecule name. set_nuclear_charge(self: psi4.core.Molecule, arg0: int, arg1: float) → None; Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self: psi4.core.Molecule, arg0: psi4.core.PointGroup) → None; Sets the molecular point group to the point group object arg0. set_provenance(self: psi4.core.Molecule, arg0: Dict[str, str]) → None; Sets molecule provenance. set_units(self: psi4.core.Molecule, arg0: psi4.core.GeometryUnits) → None; Sets units (Angstrom or Bohr) used to define the geometry. Imposes Psi4 physical constants conversion for input_units_to_au. set_variable(self: psi4.core.Molecule, arg0: str, arg1: float) → None; Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self: psi4.core.Molecule, atom: int) → str; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self: psi4.core.Molecule, arg0: float) → None; Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetr",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:20258,Integrability,wrap,wrapper,20258,"). fmass(self: psi4.core.Molecule, atom: int) → float¶; Gets mass of atom (0-indexed including dummies). form_symmetry_information(self: psi4.core.Molecule, arg0: float) → None¶; Uses the point group object obtain by calling point_group(). format_molecule_for_mol()¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. classmethod from_arrays(geom=None, elea=None, elez=None, elem=None, mass=None, real=None, elbl=None, name=None, units='Angstrom', input_units_to_au=None, fix_com=None, fix_orientation=None, fix_symmetry=None, fragment_separators=None, fragment_charges=None, fragment_multiplicities=None, molecular_charge=None, molecular_multiplicity=None, comment=None, provenance=None, connectivity=None, missing_enabled_return='error', tooclose=0.1, zero_ghost_fragments=False, nonphysical=False, mtol=0.001, verbose=1, return_dict=False)¶; Construct Molecule from unvalidated arrays and variables.; Light wrapper around from_arrays(); that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance.; :param See from_arrays().:. Returns:. Return type:psi4.core.Molecule. from_dict(arg0: dict) → psi4.core.Molecule¶; Returns a new Molecule constructed from python dictionary. In progress: name and capabilities should not be relied upon. classmethod from_schema(molschema, return_dict=False, verbose=1)¶; Construct Molecule from non-Psi4 schema.; Light wrapper around from_arrays(). Parameters:; molschema (dict) – Dictionary form of Molecule following known schema.; return_dict (bool, optional) – Additionally return Molecule dictionary intermediate.; verbose (int, optional) – Amount of printing. Returns:; mol (psi4.core.Molecule); molrec (dict, optional) – Dictionary representation of instance.; Only provided if return_dict is True. classmethod from_string(molstr, dtype=None, name=None, fix_com=None, fix_orientation=None, fix_symmetry=None, return_dict=False, enable_qm=Tr",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:20781,Integrability,wrap,wrapper,20781,"om', input_units_to_au=None, fix_com=None, fix_orientation=None, fix_symmetry=None, fragment_separators=None, fragment_charges=None, fragment_multiplicities=None, molecular_charge=None, molecular_multiplicity=None, comment=None, provenance=None, connectivity=None, missing_enabled_return='error', tooclose=0.1, zero_ghost_fragments=False, nonphysical=False, mtol=0.001, verbose=1, return_dict=False)¶; Construct Molecule from unvalidated arrays and variables.; Light wrapper around from_arrays(); that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance.; :param See from_arrays().:. Returns:. Return type:psi4.core.Molecule. from_dict(arg0: dict) → psi4.core.Molecule¶; Returns a new Molecule constructed from python dictionary. In progress: name and capabilities should not be relied upon. classmethod from_schema(molschema, return_dict=False, verbose=1)¶; Construct Molecule from non-Psi4 schema.; Light wrapper around from_arrays(). Parameters:; molschema (dict) – Dictionary form of Molecule following known schema.; return_dict (bool, optional) – Additionally return Molecule dictionary intermediate.; verbose (int, optional) – Amount of printing. Returns:; mol (psi4.core.Molecule); molrec (dict, optional) – Dictionary representation of instance.; Only provided if return_dict is True. classmethod from_string(molstr, dtype=None, name=None, fix_com=None, fix_orientation=None, fix_symmetry=None, return_dict=False, enable_qm=True, enable_efp=True, missing_enabled_return_qm='none', missing_enabled_return_efp='none', verbose=1)¶. fsymbol(self: psi4.core.Molecule, atom: int) → str¶; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed including dummies). ftrue_atomic_number(self: psi4.core.Molecule, atom: int) → int¶; Gets atomic number of atom from element (0-indexed including dummies). full_geometry(self: psi4.core.Molecule) → psi4.core.Matrix¶; Gets the geometry [Bohr] as a (Natom X 3) matri",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:29321,Integrability,interface,interface,29321,"efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False)¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str¶; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str¶; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None¶; Saves an XYZ file to arg0. schoenflies_symbol(self: psi4.core.Molecule) → str¶; Returns the Schoenflies symbol. scramble(do_shift=True, do_rotate=True, do_resort=True, deflection=1.0, do_mirror=False, do_plot=False, run_to_completion=False, run_resorting=False, verbose=1)[source]¶; Tester for B787 by shifting, rotating, and atom shuffling ref_mol and; checking that the aligner returns the opposite transformation. Parameters:; ref_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule to perturb.; do_shift (bool or array-like, optional) – Whether to generate a random atom shift on interval [-3, 3) in each; dimension (True) or leave at current origin. To shift by a specifi",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:45986,Integrability,wrap,wrapper,45986,"mies). fmass(self: psi4.core.Molecule, atom: int) → float; Gets mass of atom (0-indexed including dummies). form_symmetry_information(self: psi4.core.Molecule, arg0: float) → None; Uses the point group object obtain by calling point_group(). format_molecule_for_mol(); Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. classmethod from_arrays(geom=None, elea=None, elez=None, elem=None, mass=None, real=None, elbl=None, name=None, units='Angstrom', input_units_to_au=None, fix_com=None, fix_orientation=None, fix_symmetry=None, fragment_separators=None, fragment_charges=None, fragment_multiplicities=None, molecular_charge=None, molecular_multiplicity=None, comment=None, provenance=None, connectivity=None, missing_enabled_return='error', tooclose=0.1, zero_ghost_fragments=False, nonphysical=False, mtol=0.001, verbose=1, return_dict=False); Construct Molecule from unvalidated arrays and variables.; Light wrapper around from_arrays(); that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance.; :param See from_arrays().:. Returns:. Return type:psi4.core.Molecule. from_dict(arg0: dict) → psi4.core.Molecule; Returns a new Molecule constructed from python dictionary. In progress: name and capabilities should not be relied upon. classmethod from_schema(molschema, return_dict=False, verbose=1); Construct Molecule from non-Psi4 schema.; Light wrapper around from_arrays(). Parameters:; molschema (dict) – Dictionary form of Molecule following known schema.; return_dict (bool, optional) – Additionally return Molecule dictionary intermediate.; verbose (int, optional) – Amount of printing. Returns:; mol (psi4.core.Molecule); molrec (dict, optional) – Dictionary representation of instance.; Only provided if return_dict is True. classmethod from_string(molstr, dtype=None, name=None, fix_com=None, fix_orientation=None, fix_symmetry=None, return_dict=False, enable_qm=True",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:46507,Integrability,wrap,wrapper,46507,"strom', input_units_to_au=None, fix_com=None, fix_orientation=None, fix_symmetry=None, fragment_separators=None, fragment_charges=None, fragment_multiplicities=None, molecular_charge=None, molecular_multiplicity=None, comment=None, provenance=None, connectivity=None, missing_enabled_return='error', tooclose=0.1, zero_ghost_fragments=False, nonphysical=False, mtol=0.001, verbose=1, return_dict=False); Construct Molecule from unvalidated arrays and variables.; Light wrapper around from_arrays(); that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance.; :param See from_arrays().:. Returns:. Return type:psi4.core.Molecule. from_dict(arg0: dict) → psi4.core.Molecule; Returns a new Molecule constructed from python dictionary. In progress: name and capabilities should not be relied upon. classmethod from_schema(molschema, return_dict=False, verbose=1); Construct Molecule from non-Psi4 schema.; Light wrapper around from_arrays(). Parameters:; molschema (dict) – Dictionary form of Molecule following known schema.; return_dict (bool, optional) – Additionally return Molecule dictionary intermediate.; verbose (int, optional) – Amount of printing. Returns:; mol (psi4.core.Molecule); molrec (dict, optional) – Dictionary representation of instance.; Only provided if return_dict is True. classmethod from_string(molstr, dtype=None, name=None, fix_com=None, fix_orientation=None, fix_symmetry=None, return_dict=False, enable_qm=True, enable_efp=True, missing_enabled_return_qm='none', missing_enabled_return_efp='none', verbose=1). fsymbol(self: psi4.core.Molecule, atom: int) → str; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed including dummies). ftrue_atomic_number(self: psi4.core.Molecule, atom: int) → int; Gets atomic number of atom from element (0-indexed including dummies). full_geometry(self: psi4.core.Molecule) → psi4.core.Matrix; Gets the geometry [Bohr] as a (Natom X 3) matrix of",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:54994,Integrability,interface,interface,54994," efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False); Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None; Saves an XYZ file to arg0. schoenflies_symbol(self: psi4.core.Molecule) → str; Returns the Schoenflies symbol. scramble(do_shift=True, do_rotate=True, do_resort=True, deflection=1.0, do_mirror=False, do_plot=False, run_to_completion=False, run_resorting=False, verbose=1)[source]; Tester for B787 by shifting, rotating, and atom shuffling ref_mol and; checking that the aligner returns the opposite transformation. Parameters:; ref_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule to perturb.; do_shift (bool or array-like, optional) – Whether to generate a random atom shift on interval [-3, 3) in each; dimension (True) or leave at current origin. To shift by a specified; v",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:914,Modifiability,extend,extended,914,"﻿. Molecule. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. Molecule¶. class psi4.core.Molecule¶; Bases: pybind11_builtins.pybind11_object; Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; Methods Summary. B787(ref_mol[, do_plot, verbose, atoms_map, …]); Finds shift, rotation, and atom reordering of concern_mol that best aligns with ref_mol. BFS([seed_atoms, bond_threshold, …]); Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Z(self, arg0); Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self); Sets all fragments in the molecule to be active. add_atom(self, Z, x, y, z, symbol, mass, …); Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. basis_on_atom(self, arg0); Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self); Computes center of mass of molecule (does not translate molecule). charge(self, atom); Gets charge of atom (0-indexed without dummies). clone(self); Returns a new Molecule identical to arg1. com_fixed(self); Gets whether or not center of mass is fixed. comment(self); Gets molecule comment. connectivity(self); Gets molecule connectivity. create_psi4_string_from_molecule(self); Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self); Sets all fragments in the molecule to be inactive. distance_matrix(self); Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. fZ(self, arg0); Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self, atom); Gets charge of atom (",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:2894,Modifiability,variab,variables,2894," **kwargs); Overloaded function. fZ(self, arg0); Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self, atom); Gets charge of atom (0-indexed including dummies). find_highest_point_group(self, tolerance); Finds highest possible computational molecular point group. find_point_group(self, tolerance); Finds computational molecular point group, user can override this with the symmetry keyword. fix_com(self, arg0); Sets whether to fix the Cartesian position, or to translate to the C.O.M. fix_orientation(self, arg0); Fix the orientation at its current frame. flabel(self, atom); Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self, atom); Gets mass of atom (0-indexed including dummies). form_symmetry_information(self, arg0); Uses the point group object obtain by calling point_group(). format_molecule_for_mol(); Returns a string of Molecule formatted for mol2. from_arrays([geom, elea, elez, elem, mass, …]); Construct Molecule from unvalidated arrays and variables. from_dict(arg0); Returns a new Molecule constructed from python dictionary. from_schema(molschema[, return_dict, verbose]); Construct Molecule from non-Psi4 schema. from_string(molstr[, dtype, name, fix_com, …]). fsymbol(self, atom); Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed including dummies). ftrue_atomic_number(self, atom); Gets atomic number of atom from element (0-indexed including dummies). full_geometry(self); Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (including dummies). full_pg_n(self); Gets n in Cnv, etc.; If there is no n (e.g. fx(self, arg0); x position of atom arg0 (0-indexed including dummies in Bohr). fy(self, arg0); y position of atom arg0 (0-indexed including dummies in Bohr). fz(self, arg0); z position of atom arg0 (0-indexed including dummies in Bohr). geometry(self); Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (excluding dummies). get_fragment_charges",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:4406,Modifiability,variab,variable,4406,"nates (including dummies). full_pg_n(self); Gets n in Cnv, etc.; If there is no n (e.g. fx(self, arg0); x position of atom arg0 (0-indexed including dummies in Bohr). fy(self, arg0); y position of atom arg0 (0-indexed including dummies in Bohr). fz(self, arg0); z position of atom arg0 (0-indexed including dummies in Bohr). geometry(self); Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (excluding dummies). get_fragment_charges(self); Gets the charge of each fragment. get_fragment_multiplicities(self); Gets the multiplicity of each fragment. get_fragment_types(self); Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self); Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self); Gets point group name such as C3v or S8. get_full_point_group_with_n(self); Gets point group name such as Cnv or Sn. get_variable(self, arg0); Returns the value of variable arg0 in the structural variables list. inertia_tensor(self); Returns intertial tensor. input_units_to_au(self); Returns unit conversion to [a0] for geometry. irrep_labels(self); Returns Irreducible Representation symmetry labels. is_variable(self, arg0); Checks if variable arg0 is in the structural variables list. label(self, atom); Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self, atom); Returns mass of atom (0-indexed). mass_number(self, arg0); Mass number (A) of atom if known, else -1. molecular_charge(self); Gets the molecular charge. move_to_com(self); Moves molecule to center of mass. multiplicity(self); Gets the multiplicity (defined as 2Ms + 1). nallatom(self); Number of real and dummy atoms. name(self); Gets molecule name. natom(self); Number of real atoms. nfragments(self); Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs); Overloaded function. nuclear_repulsion_energy(self, dipo",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:4438,Modifiability,variab,variables,4438,"nates (including dummies). full_pg_n(self); Gets n in Cnv, etc.; If there is no n (e.g. fx(self, arg0); x position of atom arg0 (0-indexed including dummies in Bohr). fy(self, arg0); y position of atom arg0 (0-indexed including dummies in Bohr). fz(self, arg0); z position of atom arg0 (0-indexed including dummies in Bohr). geometry(self); Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (excluding dummies). get_fragment_charges(self); Gets the charge of each fragment. get_fragment_multiplicities(self); Gets the multiplicity of each fragment. get_fragment_types(self); Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self); Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self); Gets point group name such as C3v or S8. get_full_point_group_with_n(self); Gets point group name such as Cnv or Sn. get_variable(self, arg0); Returns the value of variable arg0 in the structural variables list. inertia_tensor(self); Returns intertial tensor. input_units_to_au(self); Returns unit conversion to [a0] for geometry. irrep_labels(self); Returns Irreducible Representation symmetry labels. is_variable(self, arg0); Checks if variable arg0 is in the structural variables list. label(self, atom); Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self, atom); Returns mass of atom (0-indexed). mass_number(self, arg0); Mass number (A) of atom if known, else -1. molecular_charge(self); Gets the molecular charge. move_to_com(self); Moves molecule to center of mass. multiplicity(self); Gets the multiplicity (defined as 2Ms + 1). nallatom(self); Number of real and dummy atoms. name(self); Gets molecule name. natom(self); Number of real atoms. nfragments(self); Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs); Overloaded function. nuclear_repulsion_energy(self, dipo",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:4680,Modifiability,variab,variable,4680,"rg0 (0-indexed including dummies in Bohr). geometry(self); Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (excluding dummies). get_fragment_charges(self); Gets the charge of each fragment. get_fragment_multiplicities(self); Gets the multiplicity of each fragment. get_fragment_types(self); Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self); Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self); Gets point group name such as C3v or S8. get_full_point_group_with_n(self); Gets point group name such as Cnv or Sn. get_variable(self, arg0); Returns the value of variable arg0 in the structural variables list. inertia_tensor(self); Returns intertial tensor. input_units_to_au(self); Returns unit conversion to [a0] for geometry. irrep_labels(self); Returns Irreducible Representation symmetry labels. is_variable(self, arg0); Checks if variable arg0 is in the structural variables list. label(self, atom); Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self, atom); Returns mass of atom (0-indexed). mass_number(self, arg0); Mass number (A) of atom if known, else -1. molecular_charge(self); Gets the molecular charge. move_to_com(self); Moves molecule to center of mass. multiplicity(self); Gets the multiplicity (defined as 2Ms + 1). nallatom(self); Number of real and dummy atoms. name(self); Gets molecule name. natom(self); Number of real atoms. nfragments(self); Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs); Overloaded function. nuclear_repulsion_energy(self, dipole_field, …); Computes nuclear repulsion energy. nuclear_repulsion_energy_deriv1(self, …); Returns first derivative of nuclear repulsion energy as a matrix (natom, 3). nuclear_repulsion_energy_deriv2(self); Returns second derivative of nuclear repulsion energy as a matrix (natom X",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:4715,Modifiability,variab,variables,4715,"rg0 (0-indexed including dummies in Bohr). geometry(self); Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (excluding dummies). get_fragment_charges(self); Gets the charge of each fragment. get_fragment_multiplicities(self); Gets the multiplicity of each fragment. get_fragment_types(self); Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self); Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self); Gets point group name such as C3v or S8. get_full_point_group_with_n(self); Gets point group name such as Cnv or Sn. get_variable(self, arg0); Returns the value of variable arg0 in the structural variables list. inertia_tensor(self); Returns intertial tensor. input_units_to_au(self); Returns unit conversion to [a0] for geometry. irrep_labels(self); Returns Irreducible Representation symmetry labels. is_variable(self, arg0); Checks if variable arg0 is in the structural variables list. label(self, atom); Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self, atom); Returns mass of atom (0-indexed). mass_number(self, arg0); Mass number (A) of atom if known, else -1. molecular_charge(self); Gets the molecular charge. move_to_com(self); Moves molecule to center of mass. multiplicity(self); Gets the multiplicity (defined as 2Ms + 1). nallatom(self); Number of real and dummy atoms. name(self); Gets molecule name. natom(self); Number of real atoms. nfragments(self); Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs); Overloaded function. nuclear_repulsion_energy(self, dipole_field, …); Computes nuclear repulsion energy. nuclear_repulsion_energy_deriv1(self, …); Returns first derivative of nuclear repulsion energy as a matrix (natom, 3). nuclear_repulsion_energy_deriv2(self); Returns second derivative of nuclear repulsion energy as a matrix (natom X",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:9672,Modifiability,variab,variable,9672," of coordinates [a0] (excluding dummies). set_ghost_fragment(self, arg0); Sets the specified fragment arg0 to be Ghost. set_ghost_fragments(self, arg0); Sets the specified list arg0 of fragments to be Ghost. set_input_units_to_au(self, arg0); Sets unit conversion to [a0] for geometry. set_mass(self, atom, mass); Sets mass of atom (0-indexed) to mass (good for isotopic substitutions). set_molecular_charge(self, arg0); Change the overall molecular charge. set_multiplicity(self, arg0); Change the multiplicity (defined as 2S + 1). set_name(self, arg0); Sets molecule name. set_nuclear_charge(self, arg0, arg1); Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self, arg0); Sets the molecular point group to the point group object arg0. set_provenance(self, arg0, str]); Sets molecule provenance. set_units(self, arg0); Sets units (Angstrom or Bohr) used to define the geometry. set_variable(self, arg0, arg1); Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self, atom); Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self, arg0); Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self); Returns the symmetry specified in the input. to_arrays([dummy, ghost_as_dummy]); Exports coordinate info into NumPy arrays. to_dict([force_c1, force_units, np_out]); Serializes instance into Molecule dictionary. to_schema(dtype[, units]); Serializes instance into dictionary according to schema dtype. to_string(dtype[, units, atom_format, …]); Format a string representation of QM molecule. translate(self, arg0); Translates molecule by arg0. true_atomic_number(self, atom); Gets atomic number of atom from element (0-indexed without dummies). units(self); Returns units used to define the geometry, i.e. update_geometry(self); Reevaluates the geometry w",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:9711,Modifiability,variab,variables,9711," of coordinates [a0] (excluding dummies). set_ghost_fragment(self, arg0); Sets the specified fragment arg0 to be Ghost. set_ghost_fragments(self, arg0); Sets the specified list arg0 of fragments to be Ghost. set_input_units_to_au(self, arg0); Sets unit conversion to [a0] for geometry. set_mass(self, atom, mass); Sets mass of atom (0-indexed) to mass (good for isotopic substitutions). set_molecular_charge(self, arg0); Change the overall molecular charge. set_multiplicity(self, arg0); Change the multiplicity (defined as 2S + 1). set_name(self, arg0); Sets molecule name. set_nuclear_charge(self, arg0, arg1); Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self, arg0); Sets the molecular point group to the point group object arg0. set_provenance(self, arg0, str]); Sets molecule provenance. set_units(self, arg0); Sets units (Angstrom or Bohr) used to define the geometry. set_variable(self, arg0, arg1); Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self, atom); Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self, arg0); Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self); Returns the symmetry specified in the input. to_arrays([dummy, ghost_as_dummy]); Exports coordinate info into NumPy arrays. to_dict([force_c1, force_units, np_out]); Serializes instance into Molecule dictionary. to_schema(dtype[, units]); Serializes instance into dictionary according to schema dtype. to_string(dtype[, units, atom_format, …]); Format a string representation of QM molecule. translate(self, arg0); Translates molecule by arg0. true_atomic_number(self, atom); Gets atomic number of atom from element (0-indexed without dummies). units(self); Returns units used to define the geometry, i.e. update_geometry(self); Reevaluates the geometry w",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:10694,Modifiability,variab,variable,10694," in the list of structure variables, then calls update_geometry(). symbol(self, atom); Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self, arg0); Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self); Returns the symmetry specified in the input. to_arrays([dummy, ghost_as_dummy]); Exports coordinate info into NumPy arrays. to_dict([force_c1, force_units, np_out]); Serializes instance into Molecule dictionary. to_schema(dtype[, units]); Serializes instance into dictionary according to schema dtype. to_string(dtype[, units, atom_format, …]); Format a string representation of QM molecule. translate(self, arg0); Translates molecule by arg0. true_atomic_number(self, atom); Gets atomic number of atom from element (0-indexed without dummies). units(self); Returns units used to define the geometry, i.e. update_geometry(self); Reevaluates the geometry with current variable values, orientation directives, etc. x(self, arg0); x position [Bohr] of atom arg0 (0-indexed without dummies). xyz(self, i); Return the Vector3 for atom i (0-indexed without dummies). y(self, arg0); y position [Bohr] of atom arg0 (0-indexed without dummies). z(self, arg0); z position [Bohr] of atom arg0 (0-indexed without dummies). Methods Documentation. B787(ref_mol, do_plot=False, verbose=1, atoms_map=False, run_resorting=False, mols_align=False, run_to_completion=False, uno_cutoff=0.001, run_mirror=False)[source]¶; Finds shift, rotation, and atom reordering of concern_mol that best; aligns with ref_mol.; Wraps qcdb.align.B787() for qcdb.Molecule or; psi4.core.Molecule. Employs the Kabsch, Hungarian, and; Uno algorithms to exhaustively locate the best alignment for; non-oriented, non-ordered structures. Parameters:; concern_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule of concern, to be shifted, rotated, and reordered into; best coincidence with ref_mol.; ref",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:15812,Modifiability,extend,extended,15812,"r psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See seed_atoms. Any existing fragmentation info/chgmult encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float¶; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None¶; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None¶; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs)¶; Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str¶; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3¶; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float¶; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule¶; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molec",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:20240,Modifiability,variab,variables,20240,"; Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self: psi4.core.Molecule, atom: int) → float¶; Gets mass of atom (0-indexed including dummies). form_symmetry_information(self: psi4.core.Molecule, arg0: float) → None¶; Uses the point group object obtain by calling point_group(). format_molecule_for_mol()¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. classmethod from_arrays(geom=None, elea=None, elez=None, elem=None, mass=None, real=None, elbl=None, name=None, units='Angstrom', input_units_to_au=None, fix_com=None, fix_orientation=None, fix_symmetry=None, fragment_separators=None, fragment_charges=None, fragment_multiplicities=None, molecular_charge=None, molecular_multiplicity=None, comment=None, provenance=None, connectivity=None, missing_enabled_return='error', tooclose=0.1, zero_ghost_fragments=False, nonphysical=False, mtol=0.001, verbose=1, return_dict=False)¶; Construct Molecule from unvalidated arrays and variables.; Light wrapper around from_arrays(); that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance.; :param See from_arrays().:. Returns:. Return type:psi4.core.Molecule. from_dict(arg0: dict) → psi4.core.Molecule¶; Returns a new Molecule constructed from python dictionary. In progress: name and capabilities should not be relied upon. classmethod from_schema(molschema, return_dict=False, verbose=1)¶; Construct Molecule from non-Psi4 schema.; Light wrapper around from_arrays(). Parameters:; molschema (dict) – Dictionary form of Molecule following known schema.; return_dict (bool, optional) – Additionally return Molecule dictionary intermediate.; verbose (int, optional) – Amount of printing. Returns:; mol (psi4.core.Molecule); molrec (dict, optional) – Dictionary representation of instance.; Only provided if return_dict is True. classmethod from_string(molstr, dty",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:23247,Modifiability,variab,variable,23247,"on of atom arg0 (0-indexed including dummies in Bohr). geometry(self: psi4.core.Molecule) → psi4.core.Matrix¶; Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (excluding dummies). get_fragment_charges(self: psi4.core.Molecule) → List[int]¶; Gets the charge of each fragment. get_fragment_multiplicities(self: psi4.core.Molecule) → List[int]¶; Gets the multiplicity of each fragment. get_fragment_types(self: psi4.core.Molecule) → List[str]¶; Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self: psi4.core.Molecule) → List[Tuple[int, int]]¶; Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self: psi4.core.Molecule) → str¶; Gets point group name such as C3v or S8. get_full_point_group_with_n(self: psi4.core.Molecule) → str¶; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float¶; Returns the value of variable arg0 in the structural variables list. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float¶; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4.core.Molecule) → List[str]¶; Returns Irreducible Representation symmetry labels. is_variable(self: psi4.core.Molecule, arg0: str) → bool¶; Checks if variable arg0 is in the structural variables list. label(self: psi4.core.Molecule, atom: int) → str¶; Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self: psi4.core.Molecule, atom: int) → float¶; Returns mass of atom (0-indexed). mass_number(self: psi4.core.Molecule, arg0: int) → int¶; Mass number (A) of atom if known, else -1. molecular_charge(self: psi4.core.Molecule) → int¶; Gets the molecular charge. move_to_com(self: psi4.core.Molecule) → None¶; Moves molecule to center of mass. multiplicity(self: psi4.core.Molecule) → i",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:23279,Modifiability,variab,variables,23279,"on of atom arg0 (0-indexed including dummies in Bohr). geometry(self: psi4.core.Molecule) → psi4.core.Matrix¶; Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (excluding dummies). get_fragment_charges(self: psi4.core.Molecule) → List[int]¶; Gets the charge of each fragment. get_fragment_multiplicities(self: psi4.core.Molecule) → List[int]¶; Gets the multiplicity of each fragment. get_fragment_types(self: psi4.core.Molecule) → List[str]¶; Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self: psi4.core.Molecule) → List[Tuple[int, int]]¶; Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self: psi4.core.Molecule) → str¶; Gets point group name such as C3v or S8. get_full_point_group_with_n(self: psi4.core.Molecule) → str¶; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float¶; Returns the value of variable arg0 in the structural variables list. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float¶; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4.core.Molecule) → List[str]¶; Returns Irreducible Representation symmetry labels. is_variable(self: psi4.core.Molecule, arg0: str) → bool¶; Checks if variable arg0 is in the structural variables list. label(self: psi4.core.Molecule, atom: int) → str¶; Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self: psi4.core.Molecule, atom: int) → float¶; Returns mass of atom (0-indexed). mass_number(self: psi4.core.Molecule, arg0: int) → int¶; Mass number (A) of atom if known, else -1. molecular_charge(self: psi4.core.Molecule) → int¶; Gets the molecular charge. move_to_com(self: psi4.core.Molecule) → None¶; Moves molecule to center of mass. multiplicity(self: psi4.core.Molecule) → i",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:23656,Modifiability,variab,variable,23656,"(self: psi4.core.Molecule) → List[str]¶; Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self: psi4.core.Molecule) → List[Tuple[int, int]]¶; Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self: psi4.core.Molecule) → str¶; Gets point group name such as C3v or S8. get_full_point_group_with_n(self: psi4.core.Molecule) → str¶; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float¶; Returns the value of variable arg0 in the structural variables list. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float¶; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4.core.Molecule) → List[str]¶; Returns Irreducible Representation symmetry labels. is_variable(self: psi4.core.Molecule, arg0: str) → bool¶; Checks if variable arg0 is in the structural variables list. label(self: psi4.core.Molecule, atom: int) → str¶; Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self: psi4.core.Molecule, atom: int) → float¶; Returns mass of atom (0-indexed). mass_number(self: psi4.core.Molecule, arg0: int) → int¶; Mass number (A) of atom if known, else -1. molecular_charge(self: psi4.core.Molecule) → int¶; Gets the molecular charge. move_to_com(self: psi4.core.Molecule) → None¶; Moves molecule to center of mass. multiplicity(self: psi4.core.Molecule) → int¶; Gets the multiplicity (defined as 2Ms + 1). nallatom(self: psi4.core.Molecule) → int¶; Number of real and dummy atoms. name(self: psi4.core.Molecule) → str¶; Gets molecule name. natom(self: psi4.core.Molecule) → int¶; Number of real atoms. nfragments(self: psi4.core.Molecule) → int¶; Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs)¶; Overloaded function. nuclear_dipole(self: psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:23691,Modifiability,variab,variables,23691,"(self: psi4.core.Molecule) → List[str]¶; Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self: psi4.core.Molecule) → List[Tuple[int, int]]¶; Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self: psi4.core.Molecule) → str¶; Gets point group name such as C3v or S8. get_full_point_group_with_n(self: psi4.core.Molecule) → str¶; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float¶; Returns the value of variable arg0 in the structural variables list. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float¶; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4.core.Molecule) → List[str]¶; Returns Irreducible Representation symmetry labels. is_variable(self: psi4.core.Molecule, arg0: str) → bool¶; Checks if variable arg0 is in the structural variables list. label(self: psi4.core.Molecule, atom: int) → str¶; Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self: psi4.core.Molecule, atom: int) → float¶; Returns mass of atom (0-indexed). mass_number(self: psi4.core.Molecule, arg0: int) → int¶; Mass number (A) of atom if known, else -1. molecular_charge(self: psi4.core.Molecule) → int¶; Gets the molecular charge. move_to_com(self: psi4.core.Molecule) → None¶; Moves molecule to center of mass. multiplicity(self: psi4.core.Molecule) → int¶; Gets the multiplicity (defined as 2Ms + 1). nallatom(self: psi4.core.Molecule) → int¶; Number of real and dummy atoms. name(self: psi4.core.Molecule) → str¶; Gets molecule name. natom(self: psi4.core.Molecule) → int¶; Number of real atoms. nfragments(self: psi4.core.Molecule) → int¶; Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs)¶; Overloaded function. nuclear_dipole(self: psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:29273,Modifiability,extend,extended,29273,"efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False)¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str¶; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str¶; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None¶; Saves an XYZ file to arg0. schoenflies_symbol(self: psi4.core.Molecule) → str¶; Returns the Schoenflies symbol. scramble(do_shift=True, do_rotate=True, do_resort=True, deflection=1.0, do_mirror=False, do_plot=False, run_to_completion=False, run_resorting=False, verbose=1)[source]¶; Tester for B787 by shifting, rotating, and atom shuffling ref_mol and; checking that the aligner returns the opposite transformation. Parameters:; ref_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule to perturb.; do_shift (bool or array-like, optional) – Whether to generate a random atom shift on interval [-3, 3) in each; dimension (True) or leave at current origin. To shift by a specifi",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:34215,Modifiability,variab,variable,34215,"nitial molecule string or constructor preferred. set_multiplicity(self: psi4.core.Molecule, arg0: int) → None¶; Change the multiplicity (defined as 2S + 1). Setting in initial molecule string or constructor preferred. set_name(self: psi4.core.Molecule, arg0: str) → None¶; Sets molecule name. set_nuclear_charge(self: psi4.core.Molecule, arg0: int, arg1: float) → None¶; Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self: psi4.core.Molecule, arg0: psi4.core.PointGroup) → None¶; Sets the molecular point group to the point group object arg0. set_provenance(self: psi4.core.Molecule, arg0: Dict[str, str]) → None¶; Sets molecule provenance. set_units(self: psi4.core.Molecule, arg0: psi4.core.GeometryUnits) → None¶; Sets units (Angstrom or Bohr) used to define the geometry. Imposes Psi4 physical constants conversion for input_units_to_au. set_variable(self: psi4.core.Molecule, arg0: str, arg1: float) → None¶; Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self: psi4.core.Molecule, atom: int) → str¶; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self: psi4.core.Molecule, arg0: float) → None¶; Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self: psi4.core.Molecule) → str¶; Returns the symmetry specified in the input. to_arrays(dummy=False, ghost_as_dummy=False)[source]¶; Exports coordinate info into NumPy arrays. Parameters:; dummy (bool, optional) – Whether or not to include dummy atoms in returned arrays.; ghost_as_dummy (bool, optional) – Whether or not to treat ghost atoms as dummies. Returns:; geom, mass, elem, elez, uniq (ndarray, ndarray, ndarray, ndarray, ndarray) – (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordi",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:34254,Modifiability,variab,variables,34254,"nitial molecule string or constructor preferred. set_multiplicity(self: psi4.core.Molecule, arg0: int) → None¶; Change the multiplicity (defined as 2S + 1). Setting in initial molecule string or constructor preferred. set_name(self: psi4.core.Molecule, arg0: str) → None¶; Sets molecule name. set_nuclear_charge(self: psi4.core.Molecule, arg0: int, arg1: float) → None¶; Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self: psi4.core.Molecule, arg0: psi4.core.PointGroup) → None¶; Sets the molecular point group to the point group object arg0. set_provenance(self: psi4.core.Molecule, arg0: Dict[str, str]) → None¶; Sets molecule provenance. set_units(self: psi4.core.Molecule, arg0: psi4.core.GeometryUnits) → None¶; Sets units (Angstrom or Bohr) used to define the geometry. Imposes Psi4 physical constants conversion for input_units_to_au. set_variable(self: psi4.core.Molecule, arg0: str, arg1: float) → None¶; Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self: psi4.core.Molecule, atom: int) → str¶; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self: psi4.core.Molecule, arg0: float) → None¶; Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self: psi4.core.Molecule) → str¶; Returns the symmetry specified in the input. to_arrays(dummy=False, ghost_as_dummy=False)[source]¶; Exports coordinate info into NumPy arrays. Parameters:; dummy (bool, optional) – Whether or not to include dummy atoms in returned arrays.; ghost_as_dummy (bool, optional) – Whether or not to treat ghost atoms as dummies. Returns:; geom, mass, elem, elez, uniq (ndarray, ndarray, ndarray, ndarray, ndarray) – (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordi",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:36193,Modifiability,variab,variable,36193,"ymbol and mass.; Note that coordinate, orientation, and element information is; preserved but fragmentation, chgmult, and dummy/ghost is lost.; Usage; —–; geom, mass, elem, elez, uniq = molinstance.to_arrays(). to_dict(force_c1=False, force_units=False, np_out=True)[source]¶; Serializes instance into Molecule dictionary. to_schema(dtype, units='Bohr')[source]¶; Serializes instance into dictionary according to schema dtype. to_string(dtype, units='Angstrom', atom_format=None, ghost_format=None, width=17, prec=12)[source]¶; Format a string representation of QM molecule. translate(self: psi4.core.Molecule, arg0: psi4.core.Vector3) → None¶; Translates molecule by arg0. true_atomic_number(self: psi4.core.Molecule, atom: int) → int¶; Gets atomic number of atom from element (0-indexed without dummies). units(self: psi4.core.Molecule) → str¶; Returns units used to define the geometry, i.e. ‘Angstrom’ or ‘Bohr’. update_geometry(self: psi4.core.Molecule) → None¶; Reevaluates the geometry with current variable values, orientation directives, etc. by clearing the atoms list and rebuilding it. Idempotent. Use liberally.Must be called after initial Molecule definition by string. x(self: psi4.core.Molecule, arg0: int) → float¶; x position [Bohr] of atom arg0 (0-indexed without dummies). xyz(self: psi4.core.Molecule, i: int) → psi4.core.Vector3¶; Return the Vector3 for atom i (0-indexed without dummies). y(self: psi4.core.Molecule, arg0: int) → float¶; y position [Bohr] of atom arg0 (0-indexed without dummies). z(self: psi4.core.Molecule, arg0: int) → float¶; z position [Bohr] of atom arg0 (0-indexed without dummies). B787(ref_mol, do_plot=False, verbose=1, atoms_map=False, run_resorting=False, mols_align=False, run_to_completion=False, uno_cutoff=0.001, run_mirror=False)[source]; Finds shift, rotation, and atom reordering of concern_mol that best; aligns with ref_mol.; Wraps qcdb.align.B787() for qcdb.Molecule or; psi4.core.Molecule. Employs the Kabsch, Hungarian, and; Uno algorit",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:41563,Modifiability,extend,extended,41563," or psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See seed_atoms. Any existing fragmentation info/chgmult encoded in self is lost.; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Z(self: psi4.core.Molecule, arg0: int) → float; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molecule) ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:45968,Modifiability,variab,variables,45968," str; Gets the original label of the atom arg0 as given in the input file (C2, H4)(0-indexed including dummies). fmass(self: psi4.core.Molecule, atom: int) → float; Gets mass of atom (0-indexed including dummies). form_symmetry_information(self: psi4.core.Molecule, arg0: float) → None; Uses the point group object obtain by calling point_group(). format_molecule_for_mol(); Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. classmethod from_arrays(geom=None, elea=None, elez=None, elem=None, mass=None, real=None, elbl=None, name=None, units='Angstrom', input_units_to_au=None, fix_com=None, fix_orientation=None, fix_symmetry=None, fragment_separators=None, fragment_charges=None, fragment_multiplicities=None, molecular_charge=None, molecular_multiplicity=None, comment=None, provenance=None, connectivity=None, missing_enabled_return='error', tooclose=0.1, zero_ghost_fragments=False, nonphysical=False, mtol=0.001, verbose=1, return_dict=False); Construct Molecule from unvalidated arrays and variables.; Light wrapper around from_arrays(); that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance.; :param See from_arrays().:. Returns:. Return type:psi4.core.Molecule. from_dict(arg0: dict) → psi4.core.Molecule; Returns a new Molecule constructed from python dictionary. In progress: name and capabilities should not be relied upon. classmethod from_schema(molschema, return_dict=False, verbose=1); Construct Molecule from non-Psi4 schema.; Light wrapper around from_arrays(). Parameters:; molschema (dict) – Dictionary form of Molecule following known schema.; return_dict (bool, optional) – Additionally return Molecule dictionary intermediate.; verbose (int, optional) – Amount of printing. Returns:; mol (psi4.core.Molecule); molrec (dict, optional) – Dictionary representation of instance.; Only provided if return_dict is True. classmethod from_string(molstr, dtype=",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:48957,Modifiability,variab,variable,48957," position of atom arg0 (0-indexed including dummies in Bohr). geometry(self: psi4.core.Molecule) → psi4.core.Matrix; Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (excluding dummies). get_fragment_charges(self: psi4.core.Molecule) → List[int]; Gets the charge of each fragment. get_fragment_multiplicities(self: psi4.core.Molecule) → List[int]; Gets the multiplicity of each fragment. get_fragment_types(self: psi4.core.Molecule) → List[str]; Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self: psi4.core.Molecule) → List[Tuple[int, int]]; Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self: psi4.core.Molecule) → str; Gets point group name such as C3v or S8. get_full_point_group_with_n(self: psi4.core.Molecule) → str; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float; Returns the value of variable arg0 in the structural variables list. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4.core.Molecule) → List[str]; Returns Irreducible Representation symmetry labels. is_variable(self: psi4.core.Molecule, arg0: str) → bool; Checks if variable arg0 is in the structural variables list. label(self: psi4.core.Molecule, atom: int) → str; Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self: psi4.core.Molecule, atom: int) → float; Returns mass of atom (0-indexed). mass_number(self: psi4.core.Molecule, arg0: int) → int; Mass number (A) of atom if known, else -1. molecular_charge(self: psi4.core.Molecule) → int; Gets the molecular charge. move_to_com(self: psi4.core.Molecule) → None; Moves molecule to center of mass. multiplicity(self: psi4.core.Molecule) → int; Gets ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:48989,Modifiability,variab,variables,48989," position of atom arg0 (0-indexed including dummies in Bohr). geometry(self: psi4.core.Molecule) → psi4.core.Matrix; Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (excluding dummies). get_fragment_charges(self: psi4.core.Molecule) → List[int]; Gets the charge of each fragment. get_fragment_multiplicities(self: psi4.core.Molecule) → List[int]; Gets the multiplicity of each fragment. get_fragment_types(self: psi4.core.Molecule) → List[str]; Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self: psi4.core.Molecule) → List[Tuple[int, int]]; Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self: psi4.core.Molecule) → str; Gets point group name such as C3v or S8. get_full_point_group_with_n(self: psi4.core.Molecule) → str; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float; Returns the value of variable arg0 in the structural variables list. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4.core.Molecule) → List[str]; Returns Irreducible Representation symmetry labels. is_variable(self: psi4.core.Molecule, arg0: str) → bool; Checks if variable arg0 is in the structural variables list. label(self: psi4.core.Molecule, atom: int) → str; Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self: psi4.core.Molecule, atom: int) → float; Returns mass of atom (0-indexed). mass_number(self: psi4.core.Molecule, arg0: int) → int; Mass number (A) of atom if known, else -1. molecular_charge(self: psi4.core.Molecule) → int; Gets the molecular charge. move_to_com(self: psi4.core.Molecule) → None; Moves molecule to center of mass. multiplicity(self: psi4.core.Molecule) → int; Gets ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:49362,Modifiability,variab,variable,49362,"ent_types(self: psi4.core.Molecule) → List[str]; Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self: psi4.core.Molecule) → List[Tuple[int, int]]; Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self: psi4.core.Molecule) → str; Gets point group name such as C3v or S8. get_full_point_group_with_n(self: psi4.core.Molecule) → str; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float; Returns the value of variable arg0 in the structural variables list. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4.core.Molecule) → List[str]; Returns Irreducible Representation symmetry labels. is_variable(self: psi4.core.Molecule, arg0: str) → bool; Checks if variable arg0 is in the structural variables list. label(self: psi4.core.Molecule, atom: int) → str; Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self: psi4.core.Molecule, atom: int) → float; Returns mass of atom (0-indexed). mass_number(self: psi4.core.Molecule, arg0: int) → int; Mass number (A) of atom if known, else -1. molecular_charge(self: psi4.core.Molecule) → int; Gets the molecular charge. move_to_com(self: psi4.core.Molecule) → None; Moves molecule to center of mass. multiplicity(self: psi4.core.Molecule) → int; Gets the multiplicity (defined as 2Ms + 1). nallatom(self: psi4.core.Molecule) → int; Number of real and dummy atoms. name(self: psi4.core.Molecule) → str; Gets molecule name. natom(self: psi4.core.Molecule) → int; Number of real atoms. nfragments(self: psi4.core.Molecule) → int; Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs); Overloaded function. nuclear_dipole(self: psi4.core.Molecu",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:49397,Modifiability,variab,variables,49397,"ent_types(self: psi4.core.Molecule) → List[str]; Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self: psi4.core.Molecule) → List[Tuple[int, int]]; Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self: psi4.core.Molecule) → str; Gets point group name such as C3v or S8. get_full_point_group_with_n(self: psi4.core.Molecule) → str; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float; Returns the value of variable arg0 in the structural variables list. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4.core.Molecule) → List[str]; Returns Irreducible Representation symmetry labels. is_variable(self: psi4.core.Molecule, arg0: str) → bool; Checks if variable arg0 is in the structural variables list. label(self: psi4.core.Molecule, atom: int) → str; Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self: psi4.core.Molecule, atom: int) → float; Returns mass of atom (0-indexed). mass_number(self: psi4.core.Molecule, arg0: int) → int; Mass number (A) of atom if known, else -1. molecular_charge(self: psi4.core.Molecule) → int; Gets the molecular charge. move_to_com(self: psi4.core.Molecule) → None; Moves molecule to center of mass. multiplicity(self: psi4.core.Molecule) → int; Gets the multiplicity (defined as 2Ms + 1). nallatom(self: psi4.core.Molecule) → int; Number of real and dummy atoms. name(self: psi4.core.Molecule) → str; Gets molecule name. natom(self: psi4.core.Molecule) → int; Number of real atoms. nfragments(self: psi4.core.Molecule) → int; Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs); Overloaded function. nuclear_dipole(self: psi4.core.Molecu",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:54946,Modifiability,extend,extended,54946," efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False); Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None; Saves an XYZ file to arg0. schoenflies_symbol(self: psi4.core.Molecule) → str; Returns the Schoenflies symbol. scramble(do_shift=True, do_rotate=True, do_resort=True, deflection=1.0, do_mirror=False, do_plot=False, run_to_completion=False, run_resorting=False, verbose=1)[source]; Tester for B787 by shifting, rotating, and atom shuffling ref_mol and; checking that the aligner returns the opposite transformation. Parameters:; ref_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule to perturb.; do_shift (bool or array-like, optional) – Whether to generate a random atom shift on interval [-3, 3) in each; dimension (True) or leave at current origin. To shift by a specified; v",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:59862,Modifiability,variab,variable,59862,"g in initial molecule string or constructor preferred. set_multiplicity(self: psi4.core.Molecule, arg0: int) → None; Change the multiplicity (defined as 2S + 1). Setting in initial molecule string or constructor preferred. set_name(self: psi4.core.Molecule, arg0: str) → None; Sets molecule name. set_nuclear_charge(self: psi4.core.Molecule, arg0: int, arg1: float) → None; Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self: psi4.core.Molecule, arg0: psi4.core.PointGroup) → None; Sets the molecular point group to the point group object arg0. set_provenance(self: psi4.core.Molecule, arg0: Dict[str, str]) → None; Sets molecule provenance. set_units(self: psi4.core.Molecule, arg0: psi4.core.GeometryUnits) → None; Sets units (Angstrom or Bohr) used to define the geometry. Imposes Psi4 physical constants conversion for input_units_to_au. set_variable(self: psi4.core.Molecule, arg0: str, arg1: float) → None; Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self: psi4.core.Molecule, atom: int) → str; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self: psi4.core.Molecule, arg0: float) → None; Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self: psi4.core.Molecule) → str; Returns the symmetry specified in the input. to_arrays(dummy=False, ghost_as_dummy=False)[source]; Exports coordinate info into NumPy arrays. Parameters:; dummy (bool, optional) – Whether or not to include dummy atoms in returned arrays.; ghost_as_dummy (bool, optional) – Whether or not to treat ghost atoms as dummies. Returns:; geom, mass, elem, elez, uniq (ndarray, ndarray, ndarray, ndarray, ndarray) – (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordinate",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:59901,Modifiability,variab,variables,59901,"g in initial molecule string or constructor preferred. set_multiplicity(self: psi4.core.Molecule, arg0: int) → None; Change the multiplicity (defined as 2S + 1). Setting in initial molecule string or constructor preferred. set_name(self: psi4.core.Molecule, arg0: str) → None; Sets molecule name. set_nuclear_charge(self: psi4.core.Molecule, arg0: int, arg1: float) → None; Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self: psi4.core.Molecule, arg0: psi4.core.PointGroup) → None; Sets the molecular point group to the point group object arg0. set_provenance(self: psi4.core.Molecule, arg0: Dict[str, str]) → None; Sets molecule provenance. set_units(self: psi4.core.Molecule, arg0: psi4.core.GeometryUnits) → None; Sets units (Angstrom or Bohr) used to define the geometry. Imposes Psi4 physical constants conversion for input_units_to_au. set_variable(self: psi4.core.Molecule, arg0: str, arg1: float) → None; Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self: psi4.core.Molecule, atom: int) → str; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self: psi4.core.Molecule, arg0: float) → None; Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self: psi4.core.Molecule) → str; Returns the symmetry specified in the input. to_arrays(dummy=False, ghost_as_dummy=False)[source]; Exports coordinate info into NumPy arrays. Parameters:; dummy (bool, optional) – Whether or not to include dummy atoms in returned arrays.; ghost_as_dummy (bool, optional) – Whether or not to treat ghost atoms as dummies. Returns:; geom, mass, elem, elez, uniq (ndarray, ndarray, ndarray, ndarray, ndarray) – (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordinate",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:61829,Modifiability,variab,variable,61829," ndarray) – (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordinate, orientation, and element information is; preserved but fragmentation, chgmult, and dummy/ghost is lost.; Usage; —–; geom, mass, elem, elez, uniq = molinstance.to_arrays(). to_dict(force_c1=False, force_units=False, np_out=True)[source]; Serializes instance into Molecule dictionary. to_schema(dtype, units='Bohr')[source]; Serializes instance into dictionary according to schema dtype. to_string(dtype, units='Angstrom', atom_format=None, ghost_format=None, width=17, prec=12)[source]; Format a string representation of QM molecule. translate(self: psi4.core.Molecule, arg0: psi4.core.Vector3) → None; Translates molecule by arg0. true_atomic_number(self: psi4.core.Molecule, atom: int) → int; Gets atomic number of atom from element (0-indexed without dummies). units(self: psi4.core.Molecule) → str; Returns units used to define the geometry, i.e. ‘Angstrom’ or ‘Bohr’. update_geometry(self: psi4.core.Molecule) → None; Reevaluates the geometry with current variable values, orientation directives, etc. by clearing the atoms list and rebuilding it. Idempotent. Use liberally.Must be called after initial Molecule definition by string. x(self: psi4.core.Molecule, arg0: int) → float; x position [Bohr] of atom arg0 (0-indexed without dummies). xyz(self: psi4.core.Molecule, i: int) → psi4.core.Vector3; Return the Vector3 for atom i (0-indexed without dummies). y(self: psi4.core.Molecule, arg0: int) → float; y position [Bohr] of atom arg0 (0-indexed without dummies). z(self: psi4.core.Molecule, arg0: int) → float; z position [Bohr] of atom arg0 (0-indexed without dummies). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:14162,Safety,detect,detected,14162,"n type; determined by concern_mol type. Return type:float, tuple, qcdb.Molecule or psi4.core.Molecule. BFS(seed_atoms=None, bond_threshold=1.2, return_arrays=False, return_molecules=False, return_molecule=False)[source]¶; Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Parameters:; self (qcdb.Molecule or psi4.core.Molecule) – ; seed_atoms (list, optional) – List of lists of atoms (0-indexed) belonging to independent fragments.; Useful to prompt algorithm or to define intramolecular fragments through; border atoms. Example: [[1, 0], [2]]; bond_threshold (float, optional) – Factor beyond average of covalent radii to determine bond cutoff.; return_arrays (bool, optional) – If True, also return fragments as list of arrays.; return_molecules (bool, optional) – If True, also return fragments as list of Molecules.; return_molecule (bool, optional) – If True, also return one big Molecule with fragmentation encoded. Returns:; bfs_map (list of lists) – Array of atom indices (0-indexed) of detected fragments.; bfs_arrays (tuple of lists of ndarray, optional) – geom, mass, elem info per-fragment.; Only provided if return_arrays is True.; bfs_molecules (list of qcdb.Molecule or psi4.core.Molecule, optional) – List of molecules, each built from one fragment. Center and; orientation of fragments is fixed so orientation info from self is; not lost. Loses chgmult and ghost/dummy info from self and contains; default chgmult.; Only provided if return_molecules is True.; Returned are of same type as self.; bfs_molecule (qcdb.Molecule or psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:39916,Safety,detect,detected,39916,"rn type; determined by concern_mol type. Return type:float, tuple, qcdb.Molecule or psi4.core.Molecule. BFS(seed_atoms=None, bond_threshold=1.2, return_arrays=False, return_molecules=False, return_molecule=False)[source]; Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Parameters:; self (qcdb.Molecule or psi4.core.Molecule) – ; seed_atoms (list, optional) – List of lists of atoms (0-indexed) belonging to independent fragments.; Useful to prompt algorithm or to define intramolecular fragments through; border atoms. Example: [[1, 0], [2]]; bond_threshold (float, optional) – Factor beyond average of covalent radii to determine bond cutoff.; return_arrays (bool, optional) – If True, also return fragments as list of arrays.; return_molecules (bool, optional) – If True, also return fragments as list of Molecules.; return_molecule (bool, optional) – If True, also return one big Molecule with fragmentation encoded. Returns:; bfs_map (list of lists) – Array of atom indices (0-indexed) of detected fragments.; bfs_arrays (tuple of lists of ndarray, optional) – geom, mass, elem info per-fragment.; Only provided if return_arrays is True.; bfs_molecules (list of qcdb.Molecule or psi4.core.Molecule, optional) – List of molecules, each built from one fragment. Center and; orientation of fragments is fixed so orientation info from self is; not lost. Loses chgmult and ghost/dummy info from self and contains; default chgmult.; Only provided if return_molecules is True.; Returned are of same type as self.; bfs_molecule (qcdb.Molecule or psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self. Notes. Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. See ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:35170,Security,hash,hash,35170,"None¶; Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self: psi4.core.Molecule, atom: int) → str¶; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self: psi4.core.Molecule, arg0: float) → None¶; Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self: psi4.core.Molecule) → str¶; Returns the symmetry specified in the input. to_arrays(dummy=False, ghost_as_dummy=False)[source]¶; Exports coordinate info into NumPy arrays. Parameters:; dummy (bool, optional) – Whether or not to include dummy atoms in returned arrays.; ghost_as_dummy (bool, optional) – Whether or not to treat ghost atoms as dummies. Returns:; geom, mass, elem, elez, uniq (ndarray, ndarray, ndarray, ndarray, ndarray) – (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordinate, orientation, and element information is; preserved but fragmentation, chgmult, and dummy/ghost is lost.; Usage; —–; geom, mass, elem, elez, uniq = molinstance.to_arrays(). to_dict(force_c1=False, force_units=False, np_out=True)[source]¶; Serializes instance into Molecule dictionary. to_schema(dtype, units='Bohr')[source]¶; Serializes instance into dictionary according to schema dtype. to_string(dtype, units='Angstrom', atom_format=None, ghost_format=None, width=17, prec=12)[source]¶; Format a string representation of QM molecule. translate(self: psi4.core.Molecule, arg0: psi4.core.Vector3) → None¶; Translates molecule by arg0. true_atomic_number(self: psi4.core.Molecule, atom: int) → int¶; Gets atomic number of atom from element (0-indexed without dummies). units(self: psi4.core.Molecule) → str¶; Returns units used to define the geometry, i.e. ‘Angstrom’ or ‘Bohr’. update_geometry(self: psi4.core.Molecule) → None¶; Reevaluates the geometry wi",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:60813,Security,hash,hash,60813,"t) → None; Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self: psi4.core.Molecule, atom: int) → str; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self: psi4.core.Molecule, arg0: float) → None; Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self: psi4.core.Molecule) → str; Returns the symmetry specified in the input. to_arrays(dummy=False, ghost_as_dummy=False)[source]; Exports coordinate info into NumPy arrays. Parameters:; dummy (bool, optional) – Whether or not to include dummy atoms in returned arrays.; ghost_as_dummy (bool, optional) – Whether or not to treat ghost atoms as dummies. Returns:; geom, mass, elem, elez, uniq (ndarray, ndarray, ndarray, ndarray, ndarray) – (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordinate, orientation, and element information is; preserved but fragmentation, chgmult, and dummy/ghost is lost.; Usage; —–; geom, mass, elem, elez, uniq = molinstance.to_arrays(). to_dict(force_c1=False, force_units=False, np_out=True)[source]; Serializes instance into Molecule dictionary. to_schema(dtype, units='Bohr')[source]; Serializes instance into dictionary according to schema dtype. to_string(dtype, units='Angstrom', atom_format=None, ghost_format=None, width=17, prec=12)[source]; Format a string representation of QM molecule. translate(self: psi4.core.Molecule, arg0: psi4.core.Vector3) → None; Translates molecule by arg0. true_atomic_number(self: psi4.core.Molecule, atom: int) → int; Gets atomic number of atom from element (0-indexed without dummies). units(self: psi4.core.Molecule) → str; Returns units used to define the geometry, i.e. ‘Angstrom’ or ‘Bohr’. update_geometry(self: psi4.core.Molecule) → None; Reevaluates the geometry with curr",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:12356,Testability,test,test,12356,"; psi4.core.Molecule. Employs the Kabsch, Hungarian, and; Uno algorithms to exhaustively locate the best alignment for; non-oriented, non-ordered structures. Parameters:; concern_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule of concern, to be shifted, rotated, and reordered into; best coincidence with ref_mol.; ref_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule to match.; atoms_map (bool, optional) – Whether atom1 of ref_mol corresponds to atom1 of concern_mol, etc.; If true, specifying True can save much time.; mols_align (bool, optional) – Whether ref_mol and concern_mol have identical geometries by eye; (barring orientation or atom mapping) and expected final RMSD = 0.; If True, procedure is truncated when RMSD condition met, saving time.; do_plot (bool, optional) – Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion (bool, optional) – Run reorderings to completion (past RMSD = 0) even if unnecessary because; mols_align=True. Used to test worst-case timings.; run_resorting (bool, optional) – Run the resorting machinery even if unnecessary because atoms_map=True.; uno_cutoff (float, optional) – TODO; run_mirror (bool, optional) – Run alternate geometries potentially allowing best match to ref_mol; from mirror image of concern_mol. Only run if system confirmed to; be nonsuperimposable upon mirror reflection. Returns:First item is RMSD [A] between ref_mol and the optimally aligned; geometry computed.; Second item is a AlignmentMill namedtuple with fields; (shift, rotation, atommap, mirror) that prescribe the transformation; from concern_mol and the optimally aligned geometry.; Third item is a crude charge-, multiplicity-, fragment-less Molecule; at optimally aligned (and atom-ordered) geometry. Return type; determined by concern_mol type. Return type:float, tuple, qcdb.Molecule or psi4.core.Molecule. BFS(seed_atoms=None, bond_threshold=1.2, return_arrays=False, return_molecules=False, return_molecule=False)[source]¶; Detect f",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:31333,Testability,test,test,31333,"specified; vector, supply a 3-element list.; do_rotate (bool or array-like, optional) – Whether to generate a random 3D rotation according to algorithm of Arvo.; To rotate by a specified matrix, supply a 9-element list of lists.; do_resort (bool or array-like, optional) – Whether to shuffle atoms (True) or leave 1st atom 1st, etc. (False).; To specify shuffle, supply a nat-element list of indices.; deflection (float, optional) – If do_rotate, how random a rotation: 0.0 is no change, 0.1 is small; perturbation, 1.0 is completely random.; do_mirror (bool, optional) – Whether to construct the mirror image structure by inverting y-axis.; do_plot (bool, optional) – Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion (bool, optional) – By construction, scrambled systems are fully alignable (final RMSD=0).; Even so, True turns off the mechanism to stop when RMSD reaches zero; and instead proceed to worst possible time.; run_resorting (bool, optional) – Even if atoms not shuffled, test the resorting machinery.; verbose (int, optional) – Print level. Returns:. Return type:None. set_active_fragment(self: psi4.core.Molecule, arg0: int) → None¶; Sets the specified fragment arg0 to be Real. set_active_fragments(self: psi4.core.Molecule, arg0: List[int]) → None¶; Sets the specified list arg0 of fragments to be Real. set_basis_all_atoms(self: psi4.core.Molecule, arg0: str, arg1: str) → None¶; Sets basis set arg0 to all atoms. set_basis_by_label(self: psi4.core.Molecule, arg0: str, arg1: str, arg2: str) → None¶; Sets basis set arg1 to all atoms with label (e.g., H4) arg0. set_basis_by_symbol(self: psi4.core.Molecule, arg0: str, arg1: str, arg2: str) → None¶; Sets basis set arg1 to all atoms with symbol (e.g., H) arg0. set_comment(self: psi4.core.Molecule, arg0: str) → None¶; Sets molecule comment. set_connectivity(self: psi4.core.Molecule, arg0: List[Tuple[int, int, float]]) → None¶; Sets molecule connectivity. set_full_geometry(self: psi4.core.Molecule",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:38111,Testability,test,test,38111,"; psi4.core.Molecule. Employs the Kabsch, Hungarian, and; Uno algorithms to exhaustively locate the best alignment for; non-oriented, non-ordered structures. Parameters:; concern_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule of concern, to be shifted, rotated, and reordered into; best coincidence with ref_mol.; ref_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule to match.; atoms_map (bool, optional) – Whether atom1 of ref_mol corresponds to atom1 of concern_mol, etc.; If true, specifying True can save much time.; mols_align (bool, optional) – Whether ref_mol and concern_mol have identical geometries by eye; (barring orientation or atom mapping) and expected final RMSD = 0.; If True, procedure is truncated when RMSD condition met, saving time.; do_plot (bool, optional) – Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion (bool, optional) – Run reorderings to completion (past RMSD = 0) even if unnecessary because; mols_align=True. Used to test worst-case timings.; run_resorting (bool, optional) – Run the resorting machinery even if unnecessary because atoms_map=True.; uno_cutoff (float, optional) – TODO; run_mirror (bool, optional) – Run alternate geometries potentially allowing best match to ref_mol; from mirror image of concern_mol. Only run if system confirmed to; be nonsuperimposable upon mirror reflection. Returns:First item is RMSD [A] between ref_mol and the optimally aligned; geometry computed.; Second item is a AlignmentMill namedtuple with fields; (shift, rotation, atommap, mirror) that prescribe the transformation; from concern_mol and the optimally aligned geometry.; Third item is a crude charge-, multiplicity-, fragment-less Molecule; at optimally aligned (and atom-ordered) geometry. Return type; determined by concern_mol type. Return type:float, tuple, qcdb.Molecule or psi4.core.Molecule. BFS(seed_atoms=None, bond_threshold=1.2, return_arrays=False, return_molecules=False, return_molecule=False)[source]; Detect fr",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:57001,Testability,test,test,57001,"specified; vector, supply a 3-element list.; do_rotate (bool or array-like, optional) – Whether to generate a random 3D rotation according to algorithm of Arvo.; To rotate by a specified matrix, supply a 9-element list of lists.; do_resort (bool or array-like, optional) – Whether to shuffle atoms (True) or leave 1st atom 1st, etc. (False).; To specify shuffle, supply a nat-element list of indices.; deflection (float, optional) – If do_rotate, how random a rotation: 0.0 is no change, 0.1 is small; perturbation, 1.0 is completely random.; do_mirror (bool, optional) – Whether to construct the mirror image structure by inverting y-axis.; do_plot (bool, optional) – Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion (bool, optional) – By construction, scrambled systems are fully alignable (final RMSD=0).; Even so, True turns off the mechanism to stop when RMSD reaches zero; and instead proceed to worst possible time.; run_resorting (bool, optional) – Even if atoms not shuffled, test the resorting machinery.; verbose (int, optional) – Print level. Returns:. Return type:None. set_active_fragment(self: psi4.core.Molecule, arg0: int) → None; Sets the specified fragment arg0 to be Real. set_active_fragments(self: psi4.core.Molecule, arg0: List[int]) → None; Sets the specified list arg0 of fragments to be Real. set_basis_all_atoms(self: psi4.core.Molecule, arg0: str, arg1: str) → None; Sets basis set arg0 to all atoms. set_basis_by_label(self: psi4.core.Molecule, arg0: str, arg1: str, arg2: str) → None; Sets basis set arg1 to all atoms with label (e.g., H4) arg0. set_basis_by_symbol(self: psi4.core.Molecule, arg0: str, arg1: str, arg2: str) → None; Sets basis set arg1 to all atoms with symbol (e.g., H) arg0. set_comment(self: psi4.core.Molecule, arg0: str) → None; Sets molecule comment. set_connectivity(self: psi4.core.Molecule, arg0: List[Tuple[int, int, float]]) → None; Sets molecule connectivity. set_full_geometry(self: psi4.core.Molecule, arg0:",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:36242,Usability,clear,clearing,36242,"n is; preserved but fragmentation, chgmult, and dummy/ghost is lost.; Usage; —–; geom, mass, elem, elez, uniq = molinstance.to_arrays(). to_dict(force_c1=False, force_units=False, np_out=True)[source]¶; Serializes instance into Molecule dictionary. to_schema(dtype, units='Bohr')[source]¶; Serializes instance into dictionary according to schema dtype. to_string(dtype, units='Angstrom', atom_format=None, ghost_format=None, width=17, prec=12)[source]¶; Format a string representation of QM molecule. translate(self: psi4.core.Molecule, arg0: psi4.core.Vector3) → None¶; Translates molecule by arg0. true_atomic_number(self: psi4.core.Molecule, atom: int) → int¶; Gets atomic number of atom from element (0-indexed without dummies). units(self: psi4.core.Molecule) → str¶; Returns units used to define the geometry, i.e. ‘Angstrom’ or ‘Bohr’. update_geometry(self: psi4.core.Molecule) → None¶; Reevaluates the geometry with current variable values, orientation directives, etc. by clearing the atoms list and rebuilding it. Idempotent. Use liberally.Must be called after initial Molecule definition by string. x(self: psi4.core.Molecule, arg0: int) → float¶; x position [Bohr] of atom arg0 (0-indexed without dummies). xyz(self: psi4.core.Molecule, i: int) → psi4.core.Vector3¶; Return the Vector3 for atom i (0-indexed without dummies). y(self: psi4.core.Molecule, arg0: int) → float¶; y position [Bohr] of atom arg0 (0-indexed without dummies). z(self: psi4.core.Molecule, arg0: int) → float¶; z position [Bohr] of atom arg0 (0-indexed without dummies). B787(ref_mol, do_plot=False, verbose=1, atoms_map=False, run_resorting=False, mols_align=False, run_to_completion=False, uno_cutoff=0.001, run_mirror=False)[source]; Finds shift, rotation, and atom reordering of concern_mol that best; aligns with ref_mol.; Wraps qcdb.align.B787() for qcdb.Molecule or; psi4.core.Molecule. Employs the Kabsch, Hungarian, and; Uno algorithms to exhaustively locate the best alignment for; non-oriented, non-order",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:61878,Usability,clear,clearing,61878," ndarray) – (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordinate, orientation, and element information is; preserved but fragmentation, chgmult, and dummy/ghost is lost.; Usage; —–; geom, mass, elem, elez, uniq = molinstance.to_arrays(). to_dict(force_c1=False, force_units=False, np_out=True)[source]; Serializes instance into Molecule dictionary. to_schema(dtype, units='Bohr')[source]; Serializes instance into dictionary according to schema dtype. to_string(dtype, units='Angstrom', atom_format=None, ghost_format=None, width=17, prec=12)[source]; Format a string representation of QM molecule. translate(self: psi4.core.Molecule, arg0: psi4.core.Vector3) → None; Translates molecule by arg0. true_atomic_number(self: psi4.core.Molecule, atom: int) → int; Gets atomic number of atom from element (0-indexed without dummies). units(self: psi4.core.Molecule) → str; Returns units used to define the geometry, i.e. ‘Angstrom’ or ‘Bohr’. update_geometry(self: psi4.core.Molecule) → None; Reevaluates the geometry with current variable values, orientation directives, etc. by clearing the atoms list and rebuilding it. Idempotent. Use liberally.Must be called after initial Molecule definition by string. x(self: psi4.core.Molecule, arg0: int) → float; x position [Bohr] of atom arg0 (0-indexed without dummies). xyz(self: psi4.core.Molecule, i: int) → psi4.core.Vector3; Return the Vector3 for atom i (0-indexed without dummies). y(self: psi4.core.Molecule, arg0: int) → float; y position [Bohr] of atom arg0 (0-indexed without dummies). z(self: psi4.core.Molecule, arg0: int) → float; z position [Bohr] of atom arg0 (0-indexed without dummies). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.mospace.html:1900,Deployability,update,updated,1900,"﻿. MOSpace. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. MOSpace¶. class psi4.core.MOSpace¶; Bases: pybind11_builtins.pybind11_object; Defines orbital spaces in which to transform integrals; Methods Summary. aIndex(self); Get the alpha orbital indexing array. aOrbs(self); Get the alpha orbitals. all(). bIndex(self); Get the beta orbital indexing array. bOrbs(self); Get the beta orbitals. dum(). fzc(). fzv(). label(self); Get the unique identifier for this space. nil(). occ(). vir(). Methods Documentation. aIndex(self: psi4.core.MOSpace) → List[int]¶; Get the alpha orbital indexing array. aOrbs(self: psi4.core.MOSpace) → List[int]¶; Get the alpha orbitals. all() → psi4.core.MOSpace¶. bIndex(self: psi4.core.MOSpace) → List[int]¶; Get the beta orbital indexing array. bOrbs(self: psi4.core.MOSpace) → List[int]¶; Get the beta orbitals. dum() → psi4.core.MOSpace¶. fzc() → psi4.core.MOSpace¶. fzv() → psi4.core.MOSpace¶. label(self: psi4.core.MOSpace) → str¶; Get the unique identifier for this space. nil() → psi4.core.MOSpace¶. occ() → psi4.core.MOSpace¶. vir() → psi4.core.MOSpace¶. aIndex(self: psi4.core.MOSpace) → List[int]; Get the alpha orbital indexing array. aOrbs(self: psi4.core.MOSpace) → List[int]; Get the alpha orbitals. all() → psi4.core.MOSpace. bIndex(self: psi4.core.MOSpace) → List[int]; Get the beta orbital indexing array. bOrbs(self: psi4.core.MOSpace) → List[int]; Get the beta orbitals. dum() → psi4.core.MOSpace. fzc() → psi4.core.MOSpace. fzv() → psi4.core.MOSpace. label(self: psi4.core.MOSpace) → str; Get the unique identifier for this space. nil() → psi4.core.MOSpace. occ() → psi4.core.MOSpace. vir() → psi4.core.MOSpace. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.mospace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.mospace.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.mowriter.html:572,Deployability,update,updated,572,"﻿. MOWriter. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. MOWriter¶. class psi4.core.MOWriter¶; Bases: pybind11_builtins.pybind11_object; Writes the MOs; Methods Summary. write(self); Write the MOs. Methods Documentation. write(self: psi4.core.MOWriter) → None¶; Write the MOs. write(self: psi4.core.MOWriter) → None; Write the MOs. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.mowriter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.mowriter.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.mrcc_generate_input-1.html:468,Deployability,update,updated,468,"﻿. mrcc_generate_input. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. mrcc_generate_input¶. psi4.core.mrcc_generate_input(arg0: psi::Wavefunction, arg1: dict) → psi4.core.PsiReturnType¶; Generates an input for Kallay’s MRCC code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.mrcc_generate_input-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.mrcc_generate_input-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.mrcc_generate_input.html:468,Deployability,update,updated,468,"﻿. mrcc_generate_input. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. mrcc_generate_input¶. psi4.core.mrcc_generate_input(arg0: psi::Wavefunction, arg1: dict) → psi4.core.PsiReturnType¶; Generates an input for Kallay’s MRCC code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.mrcc_generate_input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.mrcc_generate_input.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.mrcc_load_densities-1.html:480,Deployability,update,updated,480,"﻿. mrcc_load_densities. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. mrcc_load_densities¶. psi4.core.mrcc_load_densities(arg0: psi::Wavefunction, arg1: dict) → psi4.core.PsiReturnType¶; Reads in the density matrices from Kallay’s MRCC code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.mrcc_load_densities-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.mrcc_load_densities-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.mrcc_load_densities.html:480,Deployability,update,updated,480,"﻿. mrcc_load_densities. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. mrcc_load_densities¶. psi4.core.mrcc_load_densities(arg0: psi::Wavefunction, arg1: dict) → psi4.core.PsiReturnType¶; Reads in the density matrices from Kallay’s MRCC code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.mrcc_load_densities.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.mrcc_load_densities.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.multipoleint.html:749,Deployability,update,updated,749,"﻿. MultipoleInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. MultipoleInt¶. class psi4.core.MultipoleInt¶; Bases: psi4.core.OneBodyAOInt; Computes arbitrary-order multipole integrals. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. origin¶; The origin about which the one body ints are being computed. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.multipoleint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.multipoleint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.multipolesymmetry.html:694,Deployability,update,updated,694,"﻿. MultipoleSymmetry. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. MultipoleSymmetry¶. class psi4.core.MultipoleSymmetry¶; Bases: pybind11_builtins.pybind11_object; docstring; Methods Summary. create_matrices(self, arg0); docstring. Methods Documentation. create_matrices(self: psi4.core.MultipoleSymmetry, arg0: str) → List[psi4.core.Matrix]¶; docstring. create_matrices(self: psi4.core.MultipoleSymmetry, arg0: str) → List[psi4.core.Matrix]; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.multipolesymmetry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.multipolesymmetry.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.nablaint.html:717,Deployability,update,updated,717,"﻿. NablaInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. NablaInt¶. class psi4.core.NablaInt¶; Bases: psi4.core.OneBodyAOInt; Computes nabla integrals. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. origin¶; The origin about which the one body ints are being computed. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.nablaint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.nablaint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.nbowriter.html:718,Deployability,update,updated,718,"﻿. NBOWriter. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. NBOWriter¶. class psi4.core.NBOWriter¶; Bases: pybind11_builtins.pybind11_object; The Natural Bond Orbital Writer; Methods Summary. write(self, filename); Write the natural bond orbitals to a file. Methods Documentation. write(self: psi4.core.NBOWriter, filename: str) → None¶; Write the natural bond orbitals to a file. write(self: psi4.core.NBOWriter, filename: str) → None; Write the natural bond orbitals to a file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.nbowriter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.nbowriter.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.occ-1.html:396,Deployability,update,updated,396,"﻿. occ. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. occ¶. psi4.core.occ(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the orbital optimized CC codes. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.occ-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.occ-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.occ-1.html:196,Performance,optimiz,optimized,196,"﻿. occ. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. occ¶. psi4.core.occ(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the orbital optimized CC codes. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.occ-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.occ-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.occ.html:396,Deployability,update,updated,396,"﻿. occ. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. occ¶. psi4.core.occ(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the orbital optimized CC codes. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.occ.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.occ.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.occ.html:196,Performance,optimiz,optimized,196,"﻿. occ. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. occ¶. psi4.core.occ(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the orbital optimized CC codes. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.occ.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.occ.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.oeprop.html:3657,Deployability,update,updated,3657," symmetry: int=0) → None¶; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi::Matrix, symmetry: int=0) → None¶; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. Exvals(self: psi4.core.OEProp) → List[float]; The x component of the field (in a.u.) at each grid point. Eyvals(self: psi4.core.OEProp) → List[float]; The y component of the field (in a.u.) at each grid point. Ezvals(self: psi4.core.OEProp) → List[float]; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None; docstring. clear(self: psi4.core.OEProp) → None; docstring. compute(self: psi4.core.OEProp) → None; docstring. set_Da_ao(self: psi4.core.OEProp, Da: psi::Matrix, symmetry: int=0) → None; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi::Matrix, symmetry: int=0) → None; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None; docstring. set_title(self: psi4.core.TaskListComputer, arg0: str) → None¶; docstring. valid_methods = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MAYER_INDICES', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS']. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.oeprop.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.oeprop.html:565,Usability,clear,clear,565,"﻿. OEProp. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. OEProp¶. class psi4.core.OEProp¶; Bases: psi4.core.TaskListComputer; docstring; Attributes Summary. valid_methods. Methods Summary. Exvals(self); The x component of the field (in a.u.) at each grid point. Eyvals(self); The y component of the field (in a.u.) at each grid point. Ezvals(self); The z component of the field (in a.u.) at each grid point. Vvals(self); The electrostatic potential (in a.u.) at each grid point. add(self, arg0); docstring. clear(self); docstring. compute(self); docstring. set_Da_ao(self, Da, symmetry); docstring. set_Da_mo(self, arg0); docstring. set_Da_so(self, arg0); docstring. set_Db_ao(self, Db, symmetry); docstring. set_Db_mo(self, arg0); docstring. set_Db_so(self, arg0); docstring. Attributes Documentation. valid_methods = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MAYER_INDICES', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS']¶. Methods Documentation. Exvals(self: psi4.core.OEProp) → List[float]¶; The x component of the field (in a.u.) at each grid point. Eyvals(self: psi4.core.OEProp) → List[float]¶; The y component of the field (in a.u.) at each grid point. Ezvals(self: psi4.core.OEProp) → List[float]¶; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]¶; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None¶; docstring. clear(self: psi4.core.OEProp) → None¶; docstring. compute(self: psi4.core.OEProp) → None¶; docstring. set_Da_ao(self: psi4.core.OEProp, Da: psi::Matrix, symmetry: int=0) → None¶; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi::Matrix, symmetry: int=0) → None¶; docstrin",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.oeprop.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.oeprop.html:1580,Usability,clear,clear,1580," compute(self); docstring. set_Da_ao(self, Da, symmetry); docstring. set_Da_mo(self, arg0); docstring. set_Da_so(self, arg0); docstring. set_Db_ao(self, Db, symmetry); docstring. set_Db_mo(self, arg0); docstring. set_Db_so(self, arg0); docstring. Attributes Documentation. valid_methods = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MAYER_INDICES', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS']¶. Methods Documentation. Exvals(self: psi4.core.OEProp) → List[float]¶; The x component of the field (in a.u.) at each grid point. Eyvals(self: psi4.core.OEProp) → List[float]¶; The y component of the field (in a.u.) at each grid point. Ezvals(self: psi4.core.OEProp) → List[float]¶; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]¶; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None¶; docstring. clear(self: psi4.core.OEProp) → None¶; docstring. compute(self: psi4.core.OEProp) → None¶; docstring. set_Da_ao(self: psi4.core.OEProp, Da: psi::Matrix, symmetry: int=0) → None¶; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi::Matrix, symmetry: int=0) → None¶; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. Exvals(self: psi4.core.OEProp) → List[float]; The x component of the field (in a.u.) at each grid point. Eyvals(self: psi4.core.OEProp) → List[float]; The y component of the field (in a.u.) at each grid point. Ezvals(self: psi4.core.OEProp) → List[float]; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.oeprop.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.oeprop.html:2626,Usability,clear,clear,2626,"ute(self: psi4.core.OEProp) → None¶; docstring. set_Da_ao(self: psi4.core.OEProp, Da: psi::Matrix, symmetry: int=0) → None¶; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi::Matrix, symmetry: int=0) → None¶; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None¶; docstring. Exvals(self: psi4.core.OEProp) → List[float]; The x component of the field (in a.u.) at each grid point. Eyvals(self: psi4.core.OEProp) → List[float]; The y component of the field (in a.u.) at each grid point. Ezvals(self: psi4.core.OEProp) → List[float]; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None; docstring. clear(self: psi4.core.OEProp) → None; docstring. compute(self: psi4.core.OEProp) → None; docstring. set_Da_ao(self: psi4.core.OEProp, Da: psi::Matrix, symmetry: int=0) → None; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi::Matrix, symmetry: int=0) → None; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi::Matrix) → None; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi::Matrix) → None; docstring. set_title(self: psi4.core.TaskListComputer, arg0: str) → None¶; docstring. valid_methods = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MAYER_INDICES', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS']. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, T",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.oeprop.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.onebodyaoint.html:1443,Deployability,update,updated,1443,"﻿. OneBodyAOInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. OneBodyAOInt¶. class psi4.core.OneBodyAOInt¶; Bases: pybind11_builtins.pybind11_object; Basis class for all one-electron integrals; Attributes Summary. basis; The basis set on center one. basis1; The basis set on center one. basis2; The basis set on center two. origin; The origin about which the one body ints are being computed. Methods Summary. compute_shell(self, arg0, arg1); Compute integrals between basis functions in the given shell pair. Attributes Documentation. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. origin¶; The origin about which the one body ints are being computed. Methods Documentation. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. basis; The basis set on center one. basis1; The basis set on center one. basis2; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None; Compute integrals between basis functions in the given shell pair. origin; The origin about which the one body ints are being computed. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.onebodyaoint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.onebodyaoint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.options.html:5732,Deployability,update,updated,5732,"ing option. add_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None; add string option. get_bool(self: psi4.core.Options, arg0: str) → bool; get boolean option. get_current_module(self: psi4.core.Options) → str; gets current module. get_double(self: psi4.core.Options, arg0: str) → float; get double option. get_int(self: psi4.core.Options, arg0: str) → int; get integer option. get_int_vector(self: psi4.core.Options, arg0: str) → List[int]; get int vector option. get_str(*args, **kwargs); Overloaded function. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. print_global_options(self: psi4.core.Options) → None; print the global, cross-module options. print_module_options(self: psi4.core.Options) → None; print global and local options prepared for current module. read_globals(self: psi4.core.Options) → bool; expert. set_array(self: psi4.core.Options, arg0: str, arg1: str) → None; set array option. set_bool(self: psi4.core.Options, arg0: str, arg1: str, arg2: bool) → None; set bool option. set_current_module(self: psi4.core.Options, arg0: str) → None; sets arg0 (all CAPS) as current module. set_double(self: psi4.core.Options, arg0: str, arg1: str, arg2: float) → None; set double option. set_int(self: psi4.core.Options, arg0: str, arg1: str, arg2: int) → None; set int option. set_read_globals(self: psi4.core.Options, arg0: bool) → None; expert. set_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None; set string option. set_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None; set string option. validate_options(self: psi4.core.Options) → None; validate options for arg0 module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.options.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.options.html:1354,Security,validat,validate,1354,"(self, arg0, arg1, arg2); add string option. add_str_i(self, arg0, arg1, arg2); add string option. get_bool(self, arg0); get boolean option. get_current_module(self); gets current module. get_double(self, arg0); get double option. get_int(self, arg0); get integer option. get_int_vector(self, arg0); get int vector option. get_str(*args, **kwargs); Overloaded function. print_global_options(self); print the global, cross-module options. print_module_options(self); print global and local options prepared for current module. read_globals(self); expert. set_array(self, arg0, arg1); set array option. set_bool(self, arg0, arg1, arg2); set bool option. set_current_module(self, arg0); sets arg0 (all CAPS) as current module. set_double(self, arg0, arg1, arg2); set double option. set_int(self, arg0, arg1, arg2); set int option. set_read_globals(self, arg0); expert. set_str(self, arg0, arg1, arg2); set string option. set_str_i(self, arg0, arg1, arg2); set string option. validate_options(self); validate options for arg0 module. Methods Documentation. add_array(self: psi4.core.Options, arg0: str) → None¶; add array option. add_bool(self: psi4.core.Options, arg0: str, arg1: bool) → None¶; add bool option. add_int(self: psi4.core.Options, arg0: str, arg1: int) → None¶; add int option. add_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; add string option. add_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; add string option. get_bool(self: psi4.core.Options, arg0: str) → bool¶; get boolean option. get_current_module(self: psi4.core.Options) → str¶; gets current module. get_double(self: psi4.core.Options, arg0: str) → float¶; get double option. get_int(self: psi4.core.Options, arg0: str) → int¶; get integer option. get_int_vector(self: psi4.core.Options, arg0: str) → List[int]¶; get int vector option. get_str(*args, **kwargs)¶; Overloaded function. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. get_str(self: psi4.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.options.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.options.html:3459,Security,validat,validate,3459,"rint the global, cross-module options. print_module_options(self: psi4.core.Options) → None¶; print global and local options prepared for current module. read_globals(self: psi4.core.Options) → bool¶; expert. set_array(self: psi4.core.Options, arg0: str, arg1: str) → None¶; set array option. set_bool(self: psi4.core.Options, arg0: str, arg1: str, arg2: bool) → None¶; set bool option. set_current_module(self: psi4.core.Options, arg0: str) → None¶; sets arg0 (all CAPS) as current module. set_double(self: psi4.core.Options, arg0: str, arg1: str, arg2: float) → None¶; set double option. set_int(self: psi4.core.Options, arg0: str, arg1: str, arg2: int) → None¶; set int option. set_read_globals(self: psi4.core.Options, arg0: bool) → None¶; expert. set_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. set_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. validate_options(self: psi4.core.Options) → None¶; validate options for arg0 module. add_array(self: psi4.core.Options, arg0: str) → None; add array option. add_bool(self: psi4.core.Options, arg0: str, arg1: bool) → None; add bool option. add_int(self: psi4.core.Options, arg0: str, arg1: int) → None; add int option. add_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None; add string option. add_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None; add string option. get_bool(self: psi4.core.Options, arg0: str) → bool; get boolean option. get_current_module(self: psi4.core.Options) → str; gets current module. get_double(self: psi4.core.Options, arg0: str) → float; get double option. get_int(self: psi4.core.Options, arg0: str) → int; get integer option. get_int_vector(self: psi4.core.Options, arg0: str) → List[int]; get int vector option. get_str(*args, **kwargs); Overloaded function. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. get_str(self: psi4.core.Options, arg0: str) -> str. get s",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.options.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.options.html:5518,Security,validat,validate,5518,"ing option. add_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None; add string option. get_bool(self: psi4.core.Options, arg0: str) → bool; get boolean option. get_current_module(self: psi4.core.Options) → str; gets current module. get_double(self: psi4.core.Options, arg0: str) → float; get double option. get_int(self: psi4.core.Options, arg0: str) → int; get integer option. get_int_vector(self: psi4.core.Options, arg0: str) → List[int]; get int vector option. get_str(*args, **kwargs); Overloaded function. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. print_global_options(self: psi4.core.Options) → None; print the global, cross-module options. print_module_options(self: psi4.core.Options) → None; print global and local options prepared for current module. read_globals(self: psi4.core.Options) → bool; expert. set_array(self: psi4.core.Options, arg0: str, arg1: str) → None; set array option. set_bool(self: psi4.core.Options, arg0: str, arg1: str, arg2: bool) → None; set bool option. set_current_module(self: psi4.core.Options, arg0: str) → None; sets arg0 (all CAPS) as current module. set_double(self: psi4.core.Options, arg0: str, arg1: str, arg2: float) → None; set double option. set_int(self: psi4.core.Options, arg0: str, arg1: str, arg2: int) → None; set int option. set_read_globals(self: psi4.core.Options, arg0: bool) → None; expert. set_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None; set string option. set_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None; set string option. validate_options(self: psi4.core.Options) → None; validate options for arg0 module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.options.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.option_exists_in_module-1.html:520,Deployability,update,updated,520,"﻿. option_exists_in_module. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. option_exists_in_module¶. psi4.core.option_exists_in_module(arg0: str, arg1: str) → bool¶; Given a string of a keyword name arg1 and a particular module arg0, returns whether arg1 is a valid option for arg0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.option_exists_in_module-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.option_exists_in_module-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.option_exists_in_module.html:520,Deployability,update,updated,520,"﻿. option_exists_in_module. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. option_exists_in_module¶. psi4.core.option_exists_in_module(arg0: str, arg1: str) → bool¶; Given a string of a keyword name arg1 and a particular module arg0, returns whether arg1 is a valid option for arg0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.option_exists_in_module.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.option_exists_in_module.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.optking-1.html:392,Deployability,update,updated,392,"﻿. optking. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. optking¶. psi4.core.optking() → int¶; Runs the geometry optimization / frequency analysis code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.optking-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.optking-1.html:172,Performance,optimiz,optimization,172,"﻿. optking. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. optking¶. psi4.core.optking() → int¶; Runs the geometry optimization / frequency analysis code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.optking-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.optking.html:392,Deployability,update,updated,392,"﻿. optking. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. optking¶. psi4.core.optking() → int¶; Runs the geometry optimization / frequency analysis code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.optking.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.optking.html:172,Performance,optimiz,optimization,172,"﻿. optking. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. optking¶. psi4.core.optking() → int¶; Runs the geometry optimization / frequency analysis code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.optking.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.opt_clean-1.html:382,Deployability,update,updated,382,"﻿. opt_clean. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. opt_clean¶. psi4.core.opt_clean() → None¶; Cleans up the optimizer’s scratch files. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.opt_clean-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.opt_clean-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.opt_clean-1.html:175,Performance,optimiz,optimizer,175,"﻿. opt_clean. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. opt_clean¶. psi4.core.opt_clean() → None¶; Cleans up the optimizer’s scratch files. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.opt_clean-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.opt_clean-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.opt_clean.html:382,Deployability,update,updated,382,"﻿. opt_clean. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. opt_clean¶. psi4.core.opt_clean() → None¶; Cleans up the optimizer’s scratch files. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.opt_clean.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.opt_clean.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.opt_clean.html:175,Performance,optimiz,optimizer,175,"﻿. opt_clean. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. opt_clean¶. psi4.core.opt_clean() → None¶; Cleans up the optimizer’s scratch files. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.opt_clean.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.opt_clean.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html:1766,Availability,toler,tolerance,1766,"m(self); MO dimensions. evals(self); Corresponding eigenvalues of the C matrix. id(self); Unique identifier. integral(self); The integral factory used to create C. name(self); Name of the orbital space. nirrep(self); Returns number of irreps. print_out(self); Print information about the orbital space to the output file. Methods Documentation. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix¶; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi::BasisSet¶; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.c",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.orbitalspace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html:2355,Availability,toler,tolerance,2355,"ore.OrbitalSpace) → psi::BasisSet¶; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str¶; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int¶; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None¶; Print information about the orbital space to the output file. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi::BasisSet; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.Or",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.orbitalspace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html:3654,Availability,toler,tolerance,3654,"f: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str¶; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int¶; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None¶; Print information about the orbital space to the output file. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi::BasisSet; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory; The integral factory used to create C. name(self: psi4.core.O",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.orbitalspace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html:4242,Availability,toler,tolerance,4242,"4.core.OrbitalSpace) → psi::BasisSet; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None; Print information about the orbital space to the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.orbitalspace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html:5043,Deployability,update,updated,5043,"core.OrbitalSpace) → psi::BasisSet; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None; Print information about the orbital space to the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.orbitalspace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html:1787,Integrability,depend,dependencies,1787,"m(self); MO dimensions. evals(self); Corresponding eigenvalues of the C matrix. id(self); Unique identifier. integral(self); The integral factory used to create C. name(self); Name of the orbital space. nirrep(self); Returns number of irreps. print_out(self); Print information about the orbital space to the output file. Methods Documentation. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix¶; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi::BasisSet¶; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.c",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.orbitalspace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html:2035,Integrability,depend,dependent,2035,"e to the output file. Methods Documentation. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix¶; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi::BasisSet¶; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str¶; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int¶; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None¶; Print information about the orbital space to the output file. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix; MO coefficie",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.orbitalspace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html:2376,Integrability,depend,dependencies,2376,"ore.OrbitalSpace) → psi::BasisSet¶; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str¶; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int¶; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None¶; Print information about the orbital space to the output file. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi::BasisSet; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.Or",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.orbitalspace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html:3675,Integrability,depend,dependencies,3675,"f: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str¶; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int¶; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None¶; Print information about the orbital space to the output file. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi::BasisSet; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory; The integral factory used to create C. name(self: psi4.core.O",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.orbitalspace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html:3922,Integrability,depend,dependent,3922,"tion about the orbital space to the output file. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi::BasisSet; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None; Print information about the orbital space to the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.orbitalspace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html:4263,Integrability,depend,dependencies,4263,"4.core.OrbitalSpace) → psi::BasisSet; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None; Print information about the orbital space to the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.orbitalspace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.outfile_name-1.html:386,Deployability,update,updated,386,"﻿. outfile_name. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. outfile_name¶. psi4.core.outfile_name() → str¶; Returns the name of the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.outfile_name-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.outfile_name-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.outfile_name.html:386,Deployability,update,updated,386,"﻿. outfile_name. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. outfile_name¶. psi4.core.outfile_name() → str¶; Returns the name of the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.outfile_name.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.outfile_name.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.overlapint.html:725,Deployability,update,updated,725,"﻿. OverlapInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. OverlapInt¶. class psi4.core.OverlapInt¶; Bases: psi4.core.OneBodyAOInt; Computes overlap integrals. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. origin¶; The origin about which the one body ints are being computed. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.overlapint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.overlapint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.petitelist.html:1115,Deployability,update,updated,1115,"﻿. PetiteList. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. PetiteList¶. class psi4.core.PetiteList¶; Bases: pybind11_builtins.pybind11_object; Handles symmetry transformations; Methods Summary. aotoso(self); Return the AO->SO coefficient matrix. print(self, arg0); Print to outfile. sotoao(self); Return the SO->AO coefficient matrix. Methods Documentation. aotoso(self: psi4.core.PetiteList) → psi4.core.Matrix¶; Return the AO->SO coefficient matrix. print(self: psi4.core.PetiteList, arg0: str) → None¶; Print to outfile. sotoao(self: psi4.core.PetiteList) → psi4.core.Matrix¶; Return the SO->AO coefficient matrix. aotoso(self: psi4.core.PetiteList) → psi4.core.Matrix; Return the AO->SO coefficient matrix. print(self: psi4.core.PetiteList, arg0: str) → None; Print to outfile. sotoao(self: psi4.core.PetiteList) → psi4.core.Matrix; Return the SO->AO coefficient matrix. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.petitelist.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.petitelist.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin-1.html:441,Deployability,update,updated,441,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin¶. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin-1.html:3,Modifiability,plugin,plugin,3,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin¶. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin-1.html:115,Modifiability,plugin,plugin,115,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin¶. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin-1.html:134,Modifiability,plugin,plugin,134,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin¶. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin-1.html:208,Modifiability,plugin,plugin,208,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin¶. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin-1.html:241,Modifiability,plugin,plugin,241,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin¶. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin.html:441,Deployability,update,updated,441,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin¶. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin.html:3,Modifiability,plugin,plugin,3,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin¶. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin.html:115,Modifiability,plugin,plugin,115,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin¶. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin.html:134,Modifiability,plugin,plugin,134,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin¶. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin.html:208,Modifiability,plugin,plugin,208,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin¶. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin.html:241,Modifiability,plugin,plugin,241,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin¶. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close-1.html:390,Deployability,update,updated,390,"﻿. plugin_close. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_close¶. psi4.core.plugin_close(arg0: str) → None¶; Close the plugin of name arg0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_close-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close-1.html:189,Modifiability,plugin,plugin,189,"﻿. plugin_close. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_close¶. psi4.core.plugin_close(arg0: str) → None¶; Close the plugin of name arg0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_close-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close.html:390,Deployability,update,updated,390,"﻿. plugin_close. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_close¶. psi4.core.plugin_close(arg0: str) → None¶; Close the plugin of name arg0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_close.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close.html:189,Modifiability,plugin,plugin,189,"﻿. plugin_close. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_close¶. psi4.core.plugin_close(arg0: str) → None¶; Close the plugin of name arg0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_close.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close_all-1.html:386,Deployability,update,updated,386,"﻿. plugin_close_all. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_close_all¶. psi4.core.plugin_close_all() → None¶; Close all open plugins. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_close_all-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close_all-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close_all-1.html:197,Modifiability,plugin,plugins,197,"﻿. plugin_close_all. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_close_all¶. psi4.core.plugin_close_all() → None¶; Close all open plugins. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_close_all-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close_all-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close_all.html:386,Deployability,update,updated,386,"﻿. plugin_close_all. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_close_all¶. psi4.core.plugin_close_all() → None¶; Close all open plugins. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_close_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close_all.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close_all.html:197,Modifiability,plugin,plugins,197,"﻿. plugin_close_all. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_close_all¶. psi4.core.plugin_close_all() → None¶; Close all open plugins. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_close_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_close_all.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load-1.html:444,Deployability,update,updated,444,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_load-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load-1.html:184,Modifiability,plugin,plugin,184,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_load-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load-1.html:222,Performance,load,loaded,222,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_load-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load-1.html:235,Performance,load,loaded,235,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_load-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load-1.html:256,Performance,load,loaded,256,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_load-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load.html:444,Deployability,update,updated,444,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_load.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load.html:184,Modifiability,plugin,plugin,184,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_load.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load.html:222,Performance,load,loaded,222,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_load.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load.html:235,Performance,load,loaded,235,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_load.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load.html:256,Performance,load,loaded,256,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.plugin_load.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.plugin_load.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.pmlocalizer.html:737,Deployability,update,updated,737,"﻿. PMLocalizer. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. PMLocalizer¶. class psi4.core.PMLocalizer¶; Bases: psi4.core.Localizer; Performs Pipek-Mezey orbital localization. L¶; Localized orbital coefficients. U¶; Orbital rotation matrix. build(arg0: str, arg1: psi4.core.BasisSet, arg2: psi4.core.Matrix) → psi4.core.Localizer¶; Build the localization scheme. converged¶; Did the localization procedure converge?. localize(self: psi4.core.Localizer) → None¶; Perform the localization procedure. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.pmlocalizer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.pmlocalizer.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.pointfunctions.html:2719,Deployability,update,updated,2719,"tring. point_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Vector]¶; docstring. print_out(self: psi4.core.PointFunctions, out_fname: str='outfile', print: int=2) → None¶; docstring. set_ansatz(self: psi4.core.PointFunctions, arg0: int) → None¶; docstring. set_pointers(*args, **kwargs)¶; Overloaded function. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix) -> None. docstring. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) -> None. docstring. ansatz(self: psi4.core.PointFunctions) → int; docstring. basis_values(self: psi4.core.BasisFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. compute_functions(self: psi4.core.BasisFunctions, arg0: psi::BlockOPoints) → None¶; docstring. compute_points(self: psi4.core.PointFunctions, block: psi::BlockOPoints, force_compute: bool=True) → None; docstring. deriv(self: psi4.core.BasisFunctions) → int¶; docstring. max_functions(self: psi4.core.BasisFunctions) → int¶; docstring. max_points(self: psi4.core.BasisFunctions) → int¶; docstring. orbital_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Matrix]; docstring. point_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Vector]; docstring. print_out(self: psi4.core.PointFunctions, out_fname: str='outfile', print: int=2) → None; docstring. set_ansatz(self: psi4.core.PointFunctions, arg0: int) → None; docstring. set_deriv(self: psi4.core.BasisFunctions, arg0: int) → None¶; docstring. set_pointers(*args, **kwargs); Overloaded function. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix) -> None. docstring. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) -> None. docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.pointfunctions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.pointfunctions.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.pointgroup.html:1429,Deployability,update,updated,1429,"﻿. PointGroup. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. PointGroup¶. class psi4.core.PointGroup¶; Bases: pybind11_builtins.pybind11_object; Contains information about the point group; Methods Summary. bits(self); Return the bit representation of the point group. char_table(self); Return the CharacterTable of the point group. order(self); Return the order of the point group. symbol(self); Returns Schoenflies symbol for point group. Methods Documentation. bits(self: psi4.core.PointGroup) → int¶; Return the bit representation of the point group. char_table(self: psi4.core.PointGroup) → psi::CharacterTable¶; Return the CharacterTable of the point group. order(self: psi4.core.PointGroup) → int¶; Return the order of the point group. symbol(self: psi4.core.PointGroup) → str¶; Returns Schoenflies symbol for point group. bits(self: psi4.core.PointGroup) → int; Return the bit representation of the point group. char_table(self: psi4.core.PointGroup) → psi::CharacterTable; Return the CharacterTable of the point group. order(self: psi4.core.PointGroup) → int; Return the order of the point group. symbol(self: psi4.core.PointGroup) → str; Returns Schoenflies symbol for point group. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.pointgroup.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.pointgroup.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.potentialint.html:733,Deployability,update,updated,733,"﻿. PotentialInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. PotentialInt¶. class psi4.core.PotentialInt¶; Bases: psi4.core.OneBodyAOInt; Computes potential integrals. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. origin¶; The origin about which the one body ints are being computed. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.potentialint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.potentialint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.prepare_options_for_module-1.html:491,Deployability,update,updated,491,"﻿. prepare_options_for_module. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. prepare_options_for_module¶. psi4.core.prepare_options_for_module(arg0: str) → None¶; Sets the options module up to return options pertaining to the named argument (e.g. SCF). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.prepare_options_for_module-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.prepare_options_for_module-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.prepare_options_for_module.html:491,Deployability,update,updated,491,"﻿. prepare_options_for_module. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. prepare_options_for_module¶. psi4.core.prepare_options_for_module(arg0: str) → None¶; Sets the options module up to return options pertaining to the named argument (e.g. SCF). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.prepare_options_for_module.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.prepare_options_for_module.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.primitivetype.html:665,Deployability,update,updated,665,"﻿. PrimitiveType. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. PrimitiveType¶. class psi4.core.PrimitiveType¶; Bases: pybind11_builtins.pybind11_object; May be Normalized or Unnormalized; Attributes Summary. Normalized. Unnormalized. Attributes Documentation. Normalized = PrimitiveType.Normalized¶. Unnormalized = PrimitiveType.Unnormalized¶. Normalized = PrimitiveType.Normalized. Unnormalized = PrimitiveType.Unnormalized. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.primitivetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.primitivetype.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_global_options-1.html:448,Deployability,update,updated,448,"﻿. print_global_options. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. print_global_options¶. psi4.core.print_global_options() → None¶; Prints the currently set global (all modules) options to the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.print_global_options-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_global_options-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_global_options.html:448,Deployability,update,updated,448,"﻿. print_global_options. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. print_global_options¶. psi4.core.print_global_options() → None¶; Prints the currently set global (all modules) options to the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.print_global_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_global_options.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_options-1.html:431,Deployability,update,updated,431,"﻿. print_options. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. print_options¶. psi4.core.print_options() → None¶; Prints the currently set options (to the output file) for the current module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.print_options-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_options-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_options.html:431,Deployability,update,updated,431,"﻿. print_options. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. print_options¶. psi4.core.print_options() → None¶; Prints the currently set options (to the output file) for the current module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.print_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_options.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_out-1.html:416,Deployability,update,updated,416,"﻿. print_out. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. print_out¶. psi4.core.print_out(arg0: str) → None¶; Prints a string (using sprintf-like notation) to the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.print_out-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_out-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_out.html:416,Deployability,update,updated,416,"﻿. print_out. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. print_out¶. psi4.core.print_out(arg0: str) → None¶; Prints a string (using sprintf-like notation) to the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.print_out.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_out.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_variables-1.html:415,Deployability,update,updated,415,"﻿. print_variables. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. print_variables¶. psi4.core.print_variables() → None¶; Prints all PSI variables that have been set internally. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.print_variables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_variables-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_variables-1.html:194,Modifiability,variab,variables,194,"﻿. print_variables. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. print_variables¶. psi4.core.print_variables() → None¶; Prints all PSI variables that have been set internally. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.print_variables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_variables-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_variables.html:415,Deployability,update,updated,415,"﻿. print_variables. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. print_variables¶. psi4.core.print_variables() → None¶; Prints all PSI variables that have been set internally. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.print_variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_variables.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_variables.html:194,Modifiability,variab,variables,194,"﻿. print_variables. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. print_variables¶. psi4.core.print_variables() → None¶; Prints all PSI variables that have been set internally. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.print_variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.print_variables.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.prop.html:376,Deployability,update,updated,376,"﻿. Prop. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. Prop¶. class psi4.core.Prop¶; Bases: pybind11_builtins.pybind11_object; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.prop.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.pseudospectralint.html:753,Deployability,update,updated,753,"﻿. PseudospectralInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. PseudospectralInt¶. class psi4.core.PseudospectralInt¶; Bases: psi4.core.OneBodyAOInt; Computes pseudospectral integrals. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. origin¶; The origin about which the one body ints are being computed. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.pseudospectralint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.pseudospectralint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.psimrcc-1.html:405,Deployability,update,updated,405,"﻿. psimrcc. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. psimrcc¶. psi4.core.psimrcc(arg0: psi::Wavefunction) → float¶; Runs the multireference coupled cluster code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.psimrcc-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.psimrcc.html:405,Deployability,update,updated,405,"﻿. psimrcc. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. psimrcc¶. psi4.core.psimrcc(arg0: psi::Wavefunction) → float¶; Runs the multireference coupled cluster code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.psimrcc.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.psireturntype.html:738,Deployability,update,updated,738,"﻿. PsiReturnType. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. PsiReturnType¶. class psi4.core.PsiReturnType¶; Bases: pybind11_builtins.pybind11_object; docstring; Attributes Summary. Balk. EndLoop. Failure. Success. Attributes Documentation. Balk = PsiReturnType.Balk¶. EndLoop = PsiReturnType.EndLoop¶. Failure = PsiReturnType.Failure¶. Success = PsiReturnType.Success¶. Balk = PsiReturnType.Balk. EndLoop = PsiReturnType.EndLoop. Failure = PsiReturnType.Failure. Success = PsiReturnType.Success. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.psireturntype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.psireturntype.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.psi_top_srcdir-1.html:396,Deployability,update,updated,396,"﻿. psi_top_srcdir. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. psi_top_srcdir¶. psi4.core.psi_top_srcdir() → str¶; Returns the location of the source code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.psi_top_srcdir-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.psi_top_srcdir-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.psi_top_srcdir.html:396,Deployability,update,updated,396,"﻿. psi_top_srcdir. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. psi_top_srcdir¶. psi4.core.psi_top_srcdir() → str¶; Returns the location of the source code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.psi_top_srcdir.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.psi_top_srcdir.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.quadrupoleint.html:737,Deployability,update,updated,737,"﻿. QuadrupoleInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. QuadrupoleInt¶. class psi4.core.QuadrupoleInt¶; Bases: psi4.core.OneBodyAOInt; Computes quadrupole integrals. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. origin¶; The origin about which the one body ints are being computed. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.quadrupoleint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.quadrupoleint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.reopen_outfile-1.html:381,Deployability,update,updated,381,"﻿. reopen_outfile. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. reopen_outfile¶. psi4.core.reopen_outfile() → None¶; Reopens the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.reopen_outfile-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.reopen_outfile-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.reopen_outfile.html:381,Deployability,update,updated,381,"﻿. reopen_outfile. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. reopen_outfile¶. psi4.core.reopen_outfile() → None¶; Reopens the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.reopen_outfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.reopen_outfile.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.revoke_global_option_changed-1.html:734,Deployability,update,updated,734,"﻿. revoke_global_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. revoke_global_option_changed¶. psi4.core.revoke_global_option_changed(arg0: str) → None¶; Given a string of a keyword name arg1, sets the has_changed attribute in the global options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.revoke_global_option_changed-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.revoke_global_option_changed-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.revoke_global_option_changed.html:734,Deployability,update,updated,734,"﻿. revoke_global_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. revoke_global_option_changed¶. psi4.core.revoke_global_option_changed(arg0: str) → None¶; Given a string of a keyword name arg1, sets the has_changed attribute in the global options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.revoke_global_option_changed.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.revoke_global_option_changed.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.revoke_local_option_changed-1.html:771,Deployability,update,updated,771,"﻿. revoke_local_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. revoke_local_option_changed¶. psi4.core.revoke_local_option_changed(arg0: str, arg1: str) → None¶; Given a string of a keyword name arg2 and a particular module arg1, sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.revoke_local_option_changed-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.revoke_local_option_changed-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.revoke_local_option_changed.html:771,Deployability,update,updated,771,"﻿. revoke_local_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. revoke_local_option_changed¶. psi4.core.revoke_local_option_changed(arg0: str, arg1: str) → None¶; Given a string of a keyword name arg2 and a particular module arg1, sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.revoke_local_option_changed.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.revoke_local_option_changed.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:16201,Deployability,update,update,16201,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:16959,Deployability,update,updated,16959,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:3171,Energy Efficiency,charge,charges,3171,"turns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.RHF, basis: psi4.core.BasisSet) → psi4.core.RHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavef",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:4291,Energy Efficiency,energy,energy,4291,"ion, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.RHF, basis: psi4.core.BasisSet) → psi4.core.RHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wav",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:6115,Energy Efficiency,energy,energy,6115,"t[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:6123,Energy Efficiency,energy,energy,6123," equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:6197,Energy Efficiency,energy,energy,6197,"ping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. force_doccpi(",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:6969,Energy Efficiency,energy,energy,6969,"ocstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None¶; Forms the F mat",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:7037,Energy Efficiency,energy,energy,7037,"rrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None¶; Forms the F matrix. form_G(self: psi4.core.HF) → None¶; Forms the G matrix. form_H(self: psi4.core.HF) → None¶; Forms the core Hamiltonian.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:14359,Energy Efficiency,energy,energy,14359,"urns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None¶; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: Li",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:4209,Integrability,wrap,wrapper,4209,"xed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.RHF, basis: psi4.core.BasisSet) → psi4.core.RHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:2920,Modifiability,variab,variable,2920,"ial + Kinetic) Integrals. MOM_excited_¶; Are we to do excited-state MOM?. MOM_performed_¶; MOM performed current iteration?. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.RHF, basis: psi4.core.BasisSet) → psi4.core.RHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:3048,Modifiability,variab,variables,3048,"elf: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.RHF, basis: psi4.core.BasisSet) → psi4.core.RHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:5469,Modifiability,variab,variable,5469,"unction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subse",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:5599,Modifiability,variab,variable,5599,"ial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wav",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:10168,Modifiability,variab,variable,10168," → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → float¶; docstring. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key)¶. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. guess(self: psi4.core.HF) → None¶; Forms the guess (guarantees C, D, and E). guess_Ca(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Alpha Orbital Matrix. guess_Cb(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Beta Orbital Matrix. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. has_variable(key)¶. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. initialize()¶; Specialized initialization, compute integrals and does everything to prepare for iterations. initialize_gtfock_jk(self: psi4.core.HF) → None¶; Sets up a GTFock JK object. initialize_jk(memory, jk=None)¶. initialized_diis_manager_¶; docstring. iteration_¶; docstring. iterations(e_conv=None, d_conv=None)¶. jk(self: psi4.core.HF) → psi4.core.JK¶; Returns the internal JK object. legacy_frequencies()¶. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int¶; Number of Alpha electrons. nalphapi(se",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:10289,Modifiability,variab,variable,10289,"List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → float¶; docstring. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key)¶. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. guess(self: psi4.core.HF) → None¶; Forms the guess (guarantees C, D, and E). guess_Ca(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Alpha Orbital Matrix. guess_Cb(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Beta Orbital Matrix. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. has_variable(key)¶. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. initialize()¶; Specialized initialization, compute integrals and does everything to prepare for iterations. initialize_gtfock_jk(self: psi4.core.HF) → None¶; Sets up a GTFock JK object. initialize_jk(memory, jk=None)¶. initialized_diis_manager_¶; docstring. iteration_¶; docstring. iterations(e_conv=None, d_conv=None)¶. jk(self: psi4.core.HF) → psi4.core.JK¶; Returns the internal JK object. legacy_frequencies()¶. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int¶; Number of Alpha electrons. nalphapi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of alpha orbitals per irrep. name(self: psi4.core.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:13681,Modifiability,variab,variable,13681,"terations(self: psi4.core.HF) → None¶; docstring. push_back_external_potential(self: psi4.core.HF, V: psi4.core.Matrix) → None¶; Add an external potential to the private external_potentials list. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. reset_occupation(self: psi4.core.HF) → None¶; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hes",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:13799,Modifiability,variab,variables,13799,"ne¶; Add an external potential to the private external_potentials list. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. reset_occupation(self: psi4.core.HF) → None¶; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:14060,Modifiability,variab,variable,14060," reset_occupation(self: psi4.core.HF) → None¶; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None¶; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the leve",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:15705,Modifiability,variab,variable,15705,"e.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None¶; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], a",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:16429,Modifiability,inherit,inherited,16429,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:16749,Modifiability,variab,variable,16749,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:16765,Modifiability,variab,variables,16765,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:1985,Performance,perform,performed,1985,"ction) → psi4.core.Matrix¶; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Density Matrix. Db_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Beta Density subset. Fa(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix. Fa_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Fock Matrix. Fb_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. MOM_excited_¶; Are we to do excited-state MOM?. MOM_performed_¶; MOM performed current iteration?. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, p",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:8421,Performance,perform,performed,8421,"soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None¶; Forms the F matrix. form_G(self: psi4.core.HF) → None¶; Forms the G matrix. form_H(self: psi4.core.HF) → None¶; Forms the core Hamiltonian. form_Shalf(self: psi4.core.HF) → None¶; Forms the S^1/2 matrix. form_V(self: psi4.core.HF) → None¶; Form the Kohn-Sham Potential Matrices from the current Density Matrices. form_initial_C(self: psi4.core.HF) → None¶; Forms the initial Orbital Matrices from the current Fock Matrices. form_initial_F(self: psi4.core.HF) → None¶; Forms the initial F matrix. frac_performed_¶; Frac performed current iteration?. frac_renormalize(self: psi4.core.HF) → None¶; docstring. frequencies()¶. static from_file(wfn_data)¶; Summary. Parameters:wfn_data (str or dict) – If a str reads a Wavefunction from a disk otherwise, assumes the data; is passed in. Returns:A deserialized Wavefunction object. Return type:Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. functional(self: psi4.core.HF) → psi4.core.SuperFunctional¶; Returns the internal DFT Superfunctional. get_array(key)¶. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html:4200,Usability,simpl,simply,4200,"xed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.RHF, basis: psi4.core.BasisSet) → psi4.core.RHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rksfunctions.html:1617,Deployability,update,updated,1617,"﻿. RKSFunctions. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. RKSFunctions¶. class psi4.core.RKSFunctions¶; Bases: psi4.core.PointFunctions; docstring. ansatz(self: psi4.core.PointFunctions) → int¶; docstring. basis_values(self: psi4.core.BasisFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. compute_functions(self: psi4.core.BasisFunctions, arg0: psi::BlockOPoints) → None¶; docstring. compute_points(self: psi4.core.PointFunctions, block: psi::BlockOPoints, force_compute: bool=True) → None¶; docstring. deriv(self: psi4.core.BasisFunctions) → int¶; docstring. max_functions(self: psi4.core.BasisFunctions) → int¶; docstring. max_points(self: psi4.core.BasisFunctions) → int¶; docstring. orbital_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. point_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Vector]¶; docstring. print_out(self: psi4.core.PointFunctions, out_fname: str='outfile', print: int=2) → None¶; docstring. set_ansatz(self: psi4.core.PointFunctions, arg0: int) → None¶; docstring. set_deriv(self: psi4.core.BasisFunctions, arg0: int) → None¶; docstring. set_pointers(*args, **kwargs)¶; Overloaded function. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix) -> None. docstring. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) -> None. docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rksfunctions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rksfunctions.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:16634,Deployability,update,update,16634,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:17392,Deployability,update,updated,17392,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:3426,Energy Efficiency,charge,charges,3426,"turns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.ROHF, basis: psi4.core.BasisSet) → psi4.core.ROHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wav",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:4548,Energy Efficiency,energy,energy,4548,"n, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.ROHF, basis: psi4.core.BasisSet) → psi4.core.ROHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wav",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:6372,Energy Efficiency,energy,energy,6372,"t[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:6380,Energy Efficiency,energy,energy,6380," equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:6454,Energy Efficiency,energy,energy,6454,"ping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. force_doccpi(",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:7226,Energy Efficiency,energy,energy,7226,"ocstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None¶; Forms the F mat",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:7294,Energy Efficiency,energy,energy,7294,"rrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None¶; Forms the F matrix. form_G(self: psi4.core.HF) → None¶; Forms the G matrix. form_H(self: psi4.core.HF) → None¶; Forms the core Hamiltonian.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:14792,Energy Efficiency,energy,energy,14792,"urns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None¶; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: Li",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:4466,Integrability,wrap,wrapper,4466,"d) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.ROHF, basis: psi4.core.BasisSet) → psi4.core.ROHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:3175,Modifiability,variab,variable,3175,"ial + Kinetic) Integrals. MOM_excited_¶; Are we to do excited-state MOM?. MOM_performed_¶; MOM performed current iteration?. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.ROHF, basis: psi4.core.BasisSet) → psi4.core.ROHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pr",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:3303,Modifiability,variab,variables,3303,"elf: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.ROHF, basis: psi4.core.BasisSet) → psi4.core.ROHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → Non",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:5726,Modifiability,variab,variable,5726,"unction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subse",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:5856,Modifiability,variab,variable,5856,"ial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wav",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:10425,Modifiability,variab,variable,10425," → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → float¶; docstring. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key)¶. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. guess(self: psi4.core.HF) → None¶; Forms the guess (guarantees C, D, and E). guess_Ca(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Alpha Orbital Matrix. guess_Cb(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Beta Orbital Matrix. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. has_variable(key)¶. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. initialize()¶; Specialized initialization, compute integrals and does everything to prepare for iterations. initialize_gtfock_jk(self: psi4.core.HF) → None¶; Sets up a GTFock JK object. initialize_jk(memory, jk=None)¶. initialized_diis_manager_¶; docstring. iteration_¶; docstring. iterations(e_conv=None, d_conv=None)¶. jk(self: psi4.core.HF) → psi4.core.JK¶; Returns the internal JK object. legacy_frequencies()¶. moFa(self: psi4.core.ROHF) → psi4.core.Matrix; docstring. moFb(self: psi4.core.ROHF) → psi4.core.Matrix; docstring. moFeff(self: psi4.core.ROHF) → psi4.core.Matrix; docstring. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. molecu",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:10546,Modifiability,variab,variable,10546,"List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → float¶; docstring. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key)¶. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. guess(self: psi4.core.HF) → None¶; Forms the guess (guarantees C, D, and E). guess_Ca(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Alpha Orbital Matrix. guess_Cb(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Beta Orbital Matrix. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. has_variable(key)¶. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. initialize()¶; Specialized initialization, compute integrals and does everything to prepare for iterations. initialize_gtfock_jk(self: psi4.core.HF) → None¶; Sets up a GTFock JK object. initialize_jk(memory, jk=None)¶. initialized_diis_manager_¶; docstring. iteration_¶; docstring. iterations(e_conv=None, d_conv=None)¶. jk(self: psi4.core.HF) → psi4.core.JK¶; Returns the internal JK object. legacy_frequencies()¶. moFa(self: psi4.core.ROHF) → psi4.core.Matrix; docstring. moFb(self: psi4.core.ROHF) → psi4.core.Matrix; docstring. moFeff(self: psi4.core.ROHF) → psi4.core.Matrix; docstring. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavef",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:14114,Modifiability,variab,variable,14114,"terations(self: psi4.core.HF) → None¶; docstring. push_back_external_potential(self: psi4.core.HF, V: psi4.core.Matrix) → None¶; Add an external potential to the private external_potentials list. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. reset_occupation(self: psi4.core.HF) → None¶; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hes",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:14232,Modifiability,variab,variables,14232,"ne¶; Add an external potential to the private external_potentials list. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. reset_occupation(self: psi4.core.HF) → None¶; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:14493,Modifiability,variab,variable,14493," reset_occupation(self: psi4.core.HF) → None¶; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None¶; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the leve",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:16138,Modifiability,variab,variable,16138,"e.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None¶; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], a",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:16862,Modifiability,inherit,inherited,16862,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:17182,Modifiability,variab,variable,17182,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:17198,Modifiability,variab,variables,17198,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:2240,Performance,perform,performed,2240,"ction) → psi4.core.Matrix¶; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Density Matrix. Db_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Beta Density subset. Fa(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix. Fa_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Fock Matrix. Fb_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. MOM_excited_¶; Are we to do excited-state MOM?. MOM_performed_¶; MOM performed current iteration?. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, p",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:8678,Performance,perform,performed,8678,"soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None¶; Forms the F matrix. form_G(self: psi4.core.HF) → None¶; Forms the G matrix. form_H(self: psi4.core.HF) → None¶; Forms the core Hamiltonian. form_Shalf(self: psi4.core.HF) → None¶; Forms the S^1/2 matrix. form_V(self: psi4.core.HF) → None¶; Form the Kohn-Sham Potential Matrices from the current Density Matrices. form_initial_C(self: psi4.core.HF) → None¶; Forms the initial Orbital Matrices from the current Fock Matrices. form_initial_F(self: psi4.core.HF) → None¶; Forms the initial F matrix. frac_performed_¶; Frac performed current iteration?. frac_renormalize(self: psi4.core.HF) → None¶; docstring. frequencies()¶. static from_file(wfn_data)¶; Summary. Parameters:wfn_data (str or dict) – If a str reads a Wavefunction from a disk otherwise, assumes the data; is passed in. Returns:A deserialized Wavefunction object. Return type:Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. functional(self: psi4.core.HF) → psi4.core.SuperFunctional¶; Returns the internal DFT Superfunctional. get_array(key)¶. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:4457,Usability,simpl,simply,4457,"d) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.ROHF, basis: psi4.core.BasisSet) → psi4.core.ROHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.rohf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.run_gdma-1.html:393,Deployability,update,updated,393,"﻿. run_gdma. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. run_gdma¶. psi4.core.run_gdma(arg0: psi::Wavefunction, arg1: str) → float¶; Runs the GDMA code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.run_gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.run_gdma-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.run_gdma.html:393,Deployability,update,updated,393,"﻿. run_gdma. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. run_gdma¶. psi4.core.run_gdma(arg0: psi::Wavefunction, arg1: str) → float¶; Runs the GDMA code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.run_gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.run_gdma.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.sadguess.html:1663,Deployability,update,updated,1663,"﻿. SADGuess. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. SADGuess¶. class psi4.core.SADGuess¶; Bases: pybind11_builtins.pybind11_object; docstring; Methods Summary. Ca(self). Cb(self). Da(self). Db(self). build_SAD(arg0, arg1). compute_guess(self). set_atomic_fit_bases(self, arg0). set_debug(self, arg0). set_print(self, arg0). Methods Documentation. Ca(self: psi4.core.SADGuess) → psi4.core.Matrix¶. Cb(self: psi4.core.SADGuess) → psi4.core.Matrix¶. Da(self: psi4.core.SADGuess) → psi4.core.Matrix¶. Db(self: psi4.core.SADGuess) → psi4.core.Matrix¶. build_SAD(arg0: psi4.core.BasisSet, arg1: List[psi4.core.BasisSet]) → psi4.core.SADGuess¶. compute_guess(self: psi4.core.SADGuess) → None¶. set_atomic_fit_bases(self: psi4.core.SADGuess, arg0: List[psi4.core.BasisSet]) → None¶. set_debug(self: psi4.core.SADGuess, arg0: int) → None¶. set_print(self: psi4.core.SADGuess, arg0: int) → None¶. Ca(self: psi4.core.SADGuess) → psi4.core.Matrix. Cb(self: psi4.core.SADGuess) → psi4.core.Matrix. Da(self: psi4.core.SADGuess) → psi4.core.Matrix. Db(self: psi4.core.SADGuess) → psi4.core.Matrix. build_SAD(arg0: psi4.core.BasisSet, arg1: List[psi4.core.BasisSet]) → psi4.core.SADGuess. compute_guess(self: psi4.core.SADGuess) → None. set_atomic_fit_bases(self: psi4.core.SADGuess, arg0: List[psi4.core.BasisSet]) → None. set_debug(self: psi4.core.SADGuess, arg0: int) → None. set_print(self: psi4.core.SADGuess, arg0: int) → None. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.sadguess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.sadguess.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.salccomponent.html:1028,Deployability,update,updated,1028,"﻿. SalcComponent. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. SalcComponent¶. class psi4.core.SalcComponent¶; Bases: pybind11_builtins.pybind11_object; Component of a Cartesian displacement SALC in the basis of atomic displacements.; Attributes Summary. atom; The index of the atom being displaced. coef; The coefficient of the displacement. xyz; The direction of the displacement, given by x as 0, y as 1, z as 2. Attributes Documentation. atom¶; The index of the atom being displaced. 0-indexed. coef¶; The coefficient of the displacement. xyz¶; The direction of the displacement, given by x as 0, y as 1, z as 2. atom; The index of the atom being displaced. 0-indexed. coef; The coefficient of the displacement. xyz; The direction of the displacement, given by x as 0, y as 1, z as 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.salccomponent.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.salccomponent.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.sapt-1.html:452,Deployability,update,updated,452,"﻿. sapt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. sapt¶. psi4.core.sapt(arg0: psi::Wavefunction, arg1: psi::Wavefunction, arg2: psi::Wavefunction) → float¶; Runs the symmetry adapted perturbation theory code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.sapt-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.sapt-1.html:238,Energy Efficiency,adapt,adapted,238,"﻿. sapt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. sapt¶. psi4.core.sapt(arg0: psi::Wavefunction, arg1: psi::Wavefunction, arg2: psi::Wavefunction) → float¶; Runs the symmetry adapted perturbation theory code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.sapt-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.sapt-1.html:238,Modifiability,adapt,adapted,238,"﻿. sapt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. sapt¶. psi4.core.sapt(arg0: psi::Wavefunction, arg1: psi::Wavefunction, arg2: psi::Wavefunction) → float¶; Runs the symmetry adapted perturbation theory code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.sapt-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.sapt.html:452,Deployability,update,updated,452,"﻿. sapt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. sapt¶. psi4.core.sapt(arg0: psi::Wavefunction, arg1: psi::Wavefunction, arg2: psi::Wavefunction) → float¶; Runs the symmetry adapted perturbation theory code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.sapt.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.sapt.html:238,Energy Efficiency,adapt,adapted,238,"﻿. sapt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. sapt¶. psi4.core.sapt(arg0: psi::Wavefunction, arg1: psi::Wavefunction, arg2: psi::Wavefunction) → float¶; Runs the symmetry adapted perturbation theory code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.sapt.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.sapt.html:238,Modifiability,adapt,adapted,238,"﻿. sapt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. sapt¶. psi4.core.sapt(arg0: psi::Wavefunction, arg1: psi::Wavefunction, arg2: psi::Wavefunction) → float¶; Runs the symmetry adapted perturbation theory code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.sapt.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.savetype.html:683,Deployability,update,updated,683,"﻿. SaveType. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. SaveType¶. class psi4.core.SaveType¶; Bases: pybind11_builtins.pybind11_object; The layout of the matrix for saving; Attributes Summary. Full. LowerTriangle. SubBlocks. Attributes Documentation. Full = SaveType.Full¶. LowerTriangle = SaveType.LowerTriangle¶. SubBlocks = SaveType.SubBlocks¶. Full = SaveType.Full. LowerTriangle = SaveType.LowerTriangle. SubBlocks = SaveType.SubBlocks. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.savetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.savetype.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variable-1.html:430,Deployability,update,updated,430,"﻿. scalar_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. scalar_variable¶. psi4.core.scalar_variable(arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.scalar_variable-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variable-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variable-1.html:240,Modifiability,variab,variable,240,"﻿. scalar_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. scalar_variable¶. psi4.core.scalar_variable(arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.scalar_variable-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variable-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variable.html:430,Deployability,update,updated,430,"﻿. scalar_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. scalar_variable¶. psi4.core.scalar_variable(arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.scalar_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variable.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variable.html:240,Modifiability,variab,variable,240,"﻿. scalar_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. scalar_variable¶. psi4.core.scalar_variable(arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.scalar_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variable.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variables-1.html:421,Deployability,update,updated,421,"﻿. scalar_variables. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. scalar_variables¶. psi4.core.scalar_variables() → Dict[str, float]¶; Returns dictionary of all double QC variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.scalar_variables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variables-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variables-1.html:230,Modifiability,variab,variables,230,"﻿. scalar_variables. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. scalar_variables¶. psi4.core.scalar_variables() → Dict[str, float]¶; Returns dictionary of all double QC variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.scalar_variables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variables-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variables.html:421,Deployability,update,updated,421,"﻿. scalar_variables. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. scalar_variables¶. psi4.core.scalar_variables() → Dict[str, float]¶; Returns dictionary of all double QC variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.scalar_variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variables.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variables.html:230,Modifiability,variab,variables,230,"﻿. scalar_variables. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. scalar_variables¶. psi4.core.scalar_variables() → Dict[str, float]¶; Returns dictionary of all double QC variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.scalar_variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.scalar_variables.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.scatter-1.html:425,Deployability,update,updated,425,"﻿. scatter. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. scatter¶. psi4.core.scatter(arg0: psi::Molecule, arg1: float, arg2: list, arg3: list, arg4: list) → None¶; New Scatter function. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.scatter-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.scatter-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.scatter.html:425,Deployability,update,updated,425,"﻿. scatter. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. scatter¶. psi4.core.scatter(arg0: psi::Molecule, arg1: float, arg2: list, arg3: list, arg4: list) → None¶; New Scatter function. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.scatter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.scatter.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.scfgrad-1.html:426,Deployability,update,updated,426,"﻿. scfgrad. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. scfgrad¶. psi4.core.scfgrad(arg0: psi::Wavefunction) → psi::Matrix¶; Run scfgrad, which is a specialized DF-SCF gradient program. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.scfgrad-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.scfgrad-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.scfgrad.html:426,Deployability,update,updated,426,"﻿. scfgrad. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. scfgrad¶. psi4.core.scfgrad(arg0: psi::Wavefunction) → psi::Matrix¶; Run scfgrad, which is a specialized DF-SCF gradient program. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.scfgrad.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.scfgrad.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.scfhess-1.html:425,Deployability,update,updated,425,"﻿. scfhess. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. scfhess¶. psi4.core.scfhess(arg0: psi::Wavefunction) → psi::Matrix¶; Run scfhess, which is a specialized DF-SCF hessian program. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.scfhess-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.scfhess-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.scfhess.html:425,Deployability,update,updated,425,"﻿. scfhess. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. scfhess¶. psi4.core.scfhess(arg0: psi::Wavefunction) → psi::Matrix¶; Run scfhess, which is a specialized DF-SCF hessian program. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.scfhess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.scfhess.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_active_molecule-1.html:455,Deployability,update,updated,455,"﻿. set_active_molecule. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_active_molecule¶. psi4.core.set_active_molecule(arg0: psi::Molecule) → None¶; Activates a previously defined (in the input) molecule, by name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_active_molecule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_active_molecule-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_active_molecule.html:455,Deployability,update,updated,455,"﻿. set_active_molecule. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_active_molecule¶. psi4.core.set_active_molecule(arg0: psi::Molecule) → None¶; Activates a previously defined (in the input) molecule, by name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_active_molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_active_molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_array_variable-1.html:454,Deployability,update,updated,454,"﻿. set_array_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_array_variable¶. psi4.core.set_array_variable(arg0: str, arg1: psi::Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_array_variable-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_array_variable-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_array_variable-1.html:264,Modifiability,variab,variable,264,"﻿. set_array_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_array_variable¶. psi4.core.set_array_variable(arg0: str, arg1: psi::Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_array_variable-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_array_variable-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_array_variable.html:454,Deployability,update,updated,454,"﻿. set_array_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_array_variable¶. psi4.core.set_array_variable(arg0: str, arg1: psi::Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_array_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_array_variable.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_array_variable.html:264,Modifiability,variab,variable,264,"﻿. set_array_variable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_array_variable¶. psi4.core.set_array_variable(arg0: str, arg1: psi::Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_array_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_array_variable.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_datadir-1.html:205,Availability,avail,available,205,"﻿. set_datadir. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_datadir¶. psi4.core.set_datadir(arg0: str) → None¶; Returns the amount of memory available to Psi (in bytes). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_datadir-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_datadir-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_datadir-1.html:414,Deployability,update,updated,414,"﻿. set_datadir. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_datadir¶. psi4.core.set_datadir(arg0: str) → None¶; Returns the amount of memory available to Psi (in bytes). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_datadir-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_datadir-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_datadir.html:205,Availability,avail,available,205,"﻿. set_datadir. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_datadir¶. psi4.core.set_datadir(arg0: str) → None¶; Returns the amount of memory available to Psi (in bytes). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_datadir.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_datadir.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_datadir.html:414,Deployability,update,updated,414,"﻿. set_datadir. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_datadir¶. psi4.core.set_datadir(arg0: str) → None¶; Returns the amount of memory available to Psi (in bytes). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_datadir.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_datadir.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_global_option-1.html:807,Deployability,update,updated,807,"﻿. set_global_option. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_global_option¶. psi4.core.set_global_option(*args, **kwargs)¶; Overloaded function. set_global_option(arg0: str, arg1: list) -> bool. Sets value arg2 to array keyword arg1 for all modules. set_global_option(arg0: str, arg1: int) -> bool. Sets value arg2 to integer keyword arg1 for all modules. set_global_option(arg0: str, arg1: float) -> bool. Sets value arg2 to double keyword arg1 for all modules. set_global_option(arg0: str, arg1: str) -> bool. Sets value arg2 to string keyword arg1 for all modules. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_global_option-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_global_option-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_global_option.html:807,Deployability,update,updated,807,"﻿. set_global_option. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_global_option¶. psi4.core.set_global_option(*args, **kwargs)¶; Overloaded function. set_global_option(arg0: str, arg1: list) -> bool. Sets value arg2 to array keyword arg1 for all modules. set_global_option(arg0: str, arg1: int) -> bool. Sets value arg2 to integer keyword arg1 for all modules. set_global_option(arg0: str, arg1: float) -> bool. Sets value arg2 to double keyword arg1 for all modules. set_global_option(arg0: str, arg1: str) -> bool. Sets value arg2 to string keyword arg1 for all modules. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_global_option.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_global_option.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_legacy_gradient-1.html:484,Deployability,update,updated,484,"﻿. set_legacy_gradient. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_legacy_gradient¶. psi4.core.set_legacy_gradient(arg0: psi::Matrix) → None¶; Assigns the global gradient to the values in the (nat, 3) Matrix argument. FOR INTERNAL OPTKING USE ONLY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_legacy_gradient-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_legacy_gradient-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_legacy_gradient.html:484,Deployability,update,updated,484,"﻿. set_legacy_gradient. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_legacy_gradient¶. psi4.core.set_legacy_gradient(arg0: psi::Matrix) → None¶; Assigns the global gradient to the values in the (nat, 3) Matrix argument. FOR INTERNAL OPTKING USE ONLY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_legacy_gradient.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_legacy_gradient.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_legacy_molecule-1.html:455,Deployability,update,updated,455,"﻿. set_legacy_molecule. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_legacy_molecule¶. psi4.core.set_legacy_molecule(arg0: psi::Molecule) → None¶; Activates a previously defined (in the input) molecule, by name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_legacy_molecule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_legacy_molecule-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_legacy_molecule.html:455,Deployability,update,updated,455,"﻿. set_legacy_molecule. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_legacy_molecule¶. psi4.core.set_legacy_molecule(arg0: psi::Molecule) → None¶; Activates a previously defined (in the input) molecule, by name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_legacy_molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_legacy_molecule.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_legacy_wavefunction-1.html:487,Deployability,update,updated,487,"﻿. set_legacy_wavefunction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_legacy_wavefunction¶. psi4.core.set_legacy_wavefunction(arg0: psi::Wavefunction) → None¶; Returns the current legacy_wavefunction object from the most recent computation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_legacy_wavefunction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_legacy_wavefunction-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_legacy_wavefunction.html:487,Deployability,update,updated,487,"﻿. set_legacy_wavefunction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_legacy_wavefunction¶. psi4.core.set_legacy_wavefunction(arg0: psi::Wavefunction) → None¶; Returns the current legacy_wavefunction object from the most recent computation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_legacy_wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_legacy_wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_local_option-1.html:942,Deployability,update,updated,942,"﻿. set_local_option. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_local_option¶. psi4.core.set_local_option(*args, **kwargs)¶; Overloaded function. set_local_option(arg0: str, arg1: str, arg2: list) -> bool. Sets value arg3 to array keyword arg2 scoped only to a specific module arg1. set_local_option(arg0: str, arg1: str, arg2: int) -> bool. Sets value arg3 to integer keyword arg2 scoped only to a specific module arg1. set_local_option(arg0: str, arg1: str, arg2: float) -> bool. Sets value arg3 to double keyword arg2 scoped only to a specific module arg1. set_local_option(arg0: str, arg1: str, arg2: str) -> bool. Sets value arg3 to string keyword arg2 scoped only to a specific module arg1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_local_option-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_local_option-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_local_option.html:942,Deployability,update,updated,942,"﻿. set_local_option. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_local_option¶. psi4.core.set_local_option(*args, **kwargs)¶; Overloaded function. set_local_option(arg0: str, arg1: str, arg2: list) -> bool. Sets value arg3 to array keyword arg2 scoped only to a specific module arg1. set_local_option(arg0: str, arg1: str, arg2: int) -> bool. Sets value arg3 to integer keyword arg2 scoped only to a specific module arg1. set_local_option(arg0: str, arg1: str, arg2: float) -> bool. Sets value arg3 to double keyword arg2 scoped only to a specific module arg1. set_local_option(arg0: str, arg1: str, arg2: str) -> bool. Sets value arg3 to string keyword arg2 scoped only to a specific module arg1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_local_option.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_local_option.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_local_option_python-1.html:477,Deployability,update,updated,477,"﻿. set_local_option_python. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_local_option_python¶. psi4.core.set_local_option_python(arg0: str, arg1: object) → None¶; Sets an option to a Python object, but scoped only to a single module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_local_option_python-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_local_option_python-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_local_option_python.html:477,Deployability,update,updated,477,"﻿. set_local_option_python. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_local_option_python¶. psi4.core.set_local_option_python(arg0: str, arg1: object) → None¶; Sets an option to a Python object, but scoped only to a single module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_local_option_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_local_option_python.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_memory_bytes-1.html:228,Availability,avail,available,228,"﻿. set_memory_bytes. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_memory_bytes¶. psi4.core.set_memory_bytes(memory: int, quiet: bool=False) → None¶; Sets the memory available to Psi (in bytes). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_memory_bytes-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_memory_bytes-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_memory_bytes-1.html:437,Deployability,update,updated,437,"﻿. set_memory_bytes. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_memory_bytes¶. psi4.core.set_memory_bytes(memory: int, quiet: bool=False) → None¶; Sets the memory available to Psi (in bytes). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_memory_bytes-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_memory_bytes-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_memory_bytes.html:228,Availability,avail,available,228,"﻿. set_memory_bytes. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_memory_bytes¶. psi4.core.set_memory_bytes(memory: int, quiet: bool=False) → None¶; Sets the memory available to Psi (in bytes). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_memory_bytes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_memory_bytes.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_memory_bytes.html:437,Deployability,update,updated,437,"﻿. set_memory_bytes. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_memory_bytes¶. psi4.core.set_memory_bytes(memory: int, quiet: bool=False) → None¶; Sets the memory available to Psi (in bytes). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_memory_bytes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_memory_bytes.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_num_threads-1.html:454,Deployability,update,updated,454,"﻿. set_num_threads. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_num_threads¶. psi4.core.set_num_threads(nthread: int, quiet: bool=False) → None¶; Sets the number of threads to use in SMP parallel computations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_num_threads-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_num_threads-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_num_threads.html:454,Deployability,update,updated,454,"﻿. set_num_threads. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_num_threads¶. psi4.core.set_num_threads(nthread: int, quiet: bool=False) → None¶; Sets the number of threads to use in SMP parallel computations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_num_threads.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_num_threads.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_output_file-1.html:472,Deployability,update,updated,472,"﻿. set_output_file. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_output_file¶. psi4.core.set_output_file(*args, **kwargs)¶; Overloaded function. set_output_file(arg0: str) -> None; set_output_file(arg0: str, arg1: bool) -> None. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_output_file-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_output_file-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_output_file.html:472,Deployability,update,updated,472,"﻿. set_output_file. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_output_file¶. psi4.core.set_output_file(*args, **kwargs)¶; Overloaded function. set_output_file(arg0: str) -> None; set_output_file(arg0: str, arg1: bool) -> None. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_output_file.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_output_file.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_parent_symmetry-1.html:514,Deployability,update,updated,514,"﻿. set_parent_symmetry. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_parent_symmetry¶. psi4.core.set_parent_symmetry(arg0: str) → None¶; Sets the symmetry of the ‘parent’ (undisplaced) geometry, by Schoenflies symbol, at the beginning of a finite difference computation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_parent_symmetry-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_parent_symmetry-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_parent_symmetry.html:514,Deployability,update,updated,514,"﻿. set_parent_symmetry. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_parent_symmetry¶. psi4.core.set_parent_symmetry(arg0: str) → None¶; Sets the symmetry of the ‘parent’ (undisplaced) geometry, by Schoenflies symbol, at the beginning of a finite difference computation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_parent_symmetry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_parent_symmetry.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_psi_file_prefix-1.html:380,Deployability,update,updated,380,"﻿. set_psi_file_prefix. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_psi_file_prefix¶. psi4.core.set_psi_file_prefix(arg0: str) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_psi_file_prefix-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_psi_file_prefix-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_psi_file_prefix.html:380,Deployability,update,updated,380,"﻿. set_psi_file_prefix. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_psi_file_prefix¶. psi4.core.set_psi_file_prefix(arg0: str) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_psi_file_prefix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_psi_file_prefix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_scalar_variable-1.html:441,Deployability,update,updated,441,"﻿. set_scalar_variable. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_scalar_variable¶. psi4.core.set_scalar_variable(arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_scalar_variable-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_scalar_variable-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_scalar_variable-1.html:256,Modifiability,variab,variable,256,"﻿. set_scalar_variable. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_scalar_variable¶. psi4.core.set_scalar_variable(arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_scalar_variable-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_scalar_variable-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_scalar_variable.html:441,Deployability,update,updated,441,"﻿. set_scalar_variable. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_scalar_variable¶. psi4.core.set_scalar_variable(arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_scalar_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_scalar_variable.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_scalar_variable.html:256,Modifiability,variab,variable,256,"﻿. set_scalar_variable. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. set_scalar_variable¶. psi4.core.set_scalar_variable(arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.set_scalar_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.set_scalar_variable.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.shellinfo.html:380,Deployability,update,updated,380,"﻿. ShellInfo. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ShellInfo¶. class psi4.core.ShellInfo¶; Bases: pybind11_builtins.pybind11_object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.shellinfo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.shellinfo.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.slice.html:920,Deployability,update,updated,920,"﻿. Slice. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. Slice¶. class psi4.core.Slice¶; Bases: pybind11_builtins.pybind11_object; Slicing for Matrix and Vector objects; Methods Summary. begin(self); Get the first element of this slice. end(self); Get the past-the-end element of this slice. Methods Documentation. begin(self: psi4.core.Slice) → psi4.core.Dimension¶; Get the first element of this slice. end(self: psi4.core.Slice) → psi4.core.Dimension¶; Get the past-the-end element of this slice. begin(self: psi4.core.Slice) → psi4.core.Dimension; Get the first element of this slice. end(self: psi4.core.Slice) → psi4.core.Dimension; Get the past-the-end element of this slice. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.slice.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.slice.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.sobasisset.html:860,Deployability,update,updated,860,"﻿. SOBasisSet. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. SOBasisSet¶. class psi4.core.SOBasisSet¶; Bases: pybind11_builtins.pybind11_object; An SOBasis object describes the transformation from an atomic orbital basis to a symmetry orbital basis.; Methods Summary. petite_list(self); Return the PetiteList object used in creating this SO basis. Methods Documentation. petite_list(self: psi4.core.SOBasisSet) → psi4.core.PetiteList¶; Return the PetiteList object used in creating this SO basis. petite_list(self: psi4.core.SOBasisSet) → psi4.core.PetiteList; Return the PetiteList object used in creating this SO basis. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.sobasisset.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.sobasisset.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.somcscf.html:646,Deployability,update,update,646,"﻿. SOMCSCF. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. SOMCSCF¶. class psi4.core.SOMCSCF¶; Bases: pybind11_builtins.pybind11_object; docstring; Methods Summary. Ck(self, arg0, arg1). H_approx_diag(self). approx_solve(self). compute_AFock(self, arg0). compute_Hk(self, arg0). compute_Q(self, arg0). compute_Qk(self, arg0, arg1, arg2). current_AFock(self). current_IFock(self). current_ci_energy(self). current_docc_energy(self). current_total_energy(self). form_rotation_matrix(self, x, order). gradient(self). gradient_rms(self). rhf_energy(self, arg0). solve(self, arg0, arg1, arg2). update(self, arg0, arg1, arg2, arg3, arg4). zero_redundant(self, arg0). Methods Documentation. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int=2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.somcscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.somcscf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.somcscf.html:1978,Deployability,update,update,1978,".SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int=2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix. current_ci_energy(self: psi4.core.SOMCSCF) → float. current_docc_energy(se",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.somcscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.somcscf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.somcscf.html:3432,Deployability,update,update,3432,", arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix. current_ci_energy(self: psi4.core.SOMCSCF) → float. current_docc_energy(self: psi4.core.SOMCSCF) → float. current_total_energy(self: psi4.core.SOMCSCF) → float. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int=2) → psi4.core.Matrix. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix. gradient_rms(self: psi4.core.SOMCSCF) → float. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.somcscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.somcscf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.somcscf.html:3844,Deployability,update,updated,3844,", arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix. current_ci_energy(self: psi4.core.SOMCSCF) → float. current_docc_energy(self: psi4.core.SOMCSCF) → float. current_total_energy(self: psi4.core.SOMCSCF) → float. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int=2) → psi4.core.Matrix. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix. gradient_rms(self: psi4.core.SOMCSCF) → float. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.somcscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.somcscf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html:15988,Deployability,update,updated,15988,"rFunctional, arg0: int) → None; Sets the maximum number of points. set_name(self: psi4.core.SuperFunctional, arg0: str) → None; Sets the SuperFunctional name. set_vv10_b(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the VV10 b parameter. set_vv10_c(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the VV10 c parameter. set_x_alpha(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the amount of exact global HF exchange. set_x_beta(self: psi4.core.SuperFunctional, arg0: float) → None; Sets how much more long-range exchange than short-range exchange. set_x_omega(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the range-seperation exchange parameter. test_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Vector, arg1: psi4.core.Vector, arg2: psi4.core.Vector, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector) → None; Quick testing capabilities. value(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Vector; Returns a given internal value. values(self: psi4.core.SuperFunctional) → Dict[str, psi4.core.Vector]; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi::Functional; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi::Functional]; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float; Range-seperated exchange parameter. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.superfunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html:428,Energy Efficiency,allocate,allocate,428,"﻿. SuperFunctional. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. SuperFunctional¶. class psi4.core.SuperFunctional¶; Bases: pybind11_builtins.pybind11_object; docstring; Methods Summary. XC_build(arg0, arg1); Builds a SuperFunctional from a XC string. add_c_functional(self, arg0); Add a correlation Functional. add_x_functional(self, arg0); Add a exchange Functional. allocate(self); Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self); SuperFunctional rung. blank(); Initialize a blank SuperFunctional. c_alpha(self); Amount of MP2 correlation. c_functional(self, arg0); Returns the desired C Functional. c_functionals(self); Returns all C Functionals. c_omega(self); Range-seperated correlation parameter. c_os_alpha(self); Amount of SS MP2 correlation. c_ss_alpha(self); Amount of OS MP2 correlation. citation(self); SuperFunctional citation. compute_functional(self, arg0, …); Computes the SuperFunctional. deriv(self); Maximum derivative to compute. description(self); The description of the SuperFunctional. grac_alpha(self); GRAC Alpha. grac_beta(self); GRAC Beta. grac_shift(self); Shift of the bulk potenital. is_c_hybrid(self); Requires MP2 correlation?. is_c_lrc(self); Contains range-seperated correlation?. is_c_scs_hybrid(self); Requires SCS-MP2 correlation?. is_gga(self); Is this a GGA?. is_libxc_func(self); A full SuperFunctional definition from LibXC. is_meta(self); Is this a MGGA?. is_x_hybrid(self); Requires exact exchange?. is_x_lrc(self); Contains range-seperated exchange?. max_points(self); Maximum number of grid points per block. name(self); The name of the SuperFunctional. needs_grac(self); Does this functional need GRAC. needs_vv10(self); Does this functional need VV10 dispersion. needs_xc(self); Does this functional need XC quantities. print_detail(self, arg0); Prints all SuperFunctional information. print_out(self); Prints out functional details. set_c_alpha(self, arg0",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.superfunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html:4007,Energy Efficiency,allocate,allocate,4007,"t_x_beta(self, arg0); Sets how much more long-range exchange than short-range exchange. set_x_omega(self, arg0); Sets the range-seperation exchange parameter. test_functional(self, arg0, arg1, arg2, …); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. Methods Documentation. XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi::Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi::Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self: psi4.core.SuperFunctional) → int¶; SuperFunctional rung. blank() → psi4.core.SuperFunctional¶; Initialize a blank SuperFunctional. c_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of MP2 correlation. c_functional(self: psi4.core.SuperFunctional, arg0: str) → psi::Functional¶; Returns the desired C Functional. c_functionals(self: psi4.core.SuperFunctional) → List[psi::Functional]¶; Returns all C Functionals. c_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated correlation parameter. c_os_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of SS MP2 correlation. c_ss_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of OS MP2 correlation. citation(self: psi4.core.SuperFunctional) → str¶; SuperFunctional citation. compute_functional(self: psi4.core.SuperFunctional, arg0: Dict[str, psi4.core.Vector], arg1: int) → Dict[str, psi4.core.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.superfunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html:10099,Energy Efficiency,allocate,allocate,10099,"ional) → Dict[str, psi4.core.Vector]¶; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float¶; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float¶; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi::Functional¶; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi::Functional]¶; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated exchange parameter. XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi::Functional) → None; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi::Functional) → None; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None; Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self: psi4.core.SuperFunctional) → int; SuperFunctional rung. blank() → psi4.core.SuperFunctional; Initialize a blank SuperFunctional. c_alpha(self: psi4.core.SuperFunctional) → float; Amount of MP2 correlation. c_functional(self: psi4.core.SuperFunctional, arg0: str) → psi::Functional; Returns the desired C Functional. c_functionals(self: psi4.core.SuperFunctional) → List[psi::Functional]; Returns all C Functionals. c_omega(self: psi4.core.SuperFunctional) → float; Range-seperated correlation parameter. c_os_alpha(self: psi4.core.SuperFunctional) → float; Amount of SS MP2 correlation. c_ss_alpha(self: psi4.core.SuperFunctional) → float; Amount of OS MP2 correlation. citation(self: psi4.core.SuperFunctional) → str; SuperFunctional citation. compute_functional(self: psi4.core.SuperFunctional, arg0: Dict[str, psi4.core.Vector], arg1: int) → Dict[str, psi4.core.Vector]; C",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.superfunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html:3225,Testability,test,testing,3225,"ets the amount of SS MP2 correlation. set_citation(self, arg0); Sets the SuperFunctional citation. set_deriv(self, arg0); Sets the derivative level. set_description(self, arg0); Sets the SuperFunctional description. set_do_vv10(self, arg0); Sets whether to do VV10 correction. set_grac_alpha(self, arg0); Sets the GRAC alpha parameter. set_grac_beta(self, arg0); Sets the GRAC beta parameter. set_grac_shift(self, arg0); Sets the GRAC bulk shift value. set_lock(self, arg0); Locks the functional to prevent changes. set_max_points(self, arg0); Sets the maximum number of points. set_name(self, arg0); Sets the SuperFunctional name. set_vv10_b(self, arg0); Sets the VV10 b parameter. set_vv10_c(self, arg0); Sets the VV10 c parameter. set_x_alpha(self, arg0); Sets the amount of exact global HF exchange. set_x_beta(self, arg0); Sets how much more long-range exchange than short-range exchange. set_x_omega(self, arg0); Sets the range-seperation exchange parameter. test_functional(self, arg0, arg1, arg2, …); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. Methods Documentation. XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi::Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi::Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self: psi4.core.SuperFunctional) → int¶; SuperFunctional rung. blank() → ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.superfunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html:8950,Testability,test,testing,8950,"unctional to prevent changes. set_max_points(self: psi4.core.SuperFunctional, arg0: int) → None¶; Sets the maximum number of points. set_name(self: psi4.core.SuperFunctional, arg0: str) → None¶; Sets the SuperFunctional name. set_vv10_b(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 b parameter. set_vv10_c(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 c parameter. set_x_alpha(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the amount of exact global HF exchange. set_x_beta(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets how much more long-range exchange than short-range exchange. set_x_omega(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the range-seperation exchange parameter. test_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Vector, arg1: psi4.core.Vector, arg2: psi4.core.Vector, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector) → None¶; Quick testing capabilities. value(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Vector¶; Returns a given internal value. values(self: psi4.core.SuperFunctional) → Dict[str, psi4.core.Vector]¶; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float¶; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float¶; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi::Functional¶; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi::Functional]¶; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated exchange parameter. XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi::Function",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.superfunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html:14991,Testability,test,testing,14991,"ks the functional to prevent changes. set_max_points(self: psi4.core.SuperFunctional, arg0: int) → None; Sets the maximum number of points. set_name(self: psi4.core.SuperFunctional, arg0: str) → None; Sets the SuperFunctional name. set_vv10_b(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the VV10 b parameter. set_vv10_c(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the VV10 c parameter. set_x_alpha(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the amount of exact global HF exchange. set_x_beta(self: psi4.core.SuperFunctional, arg0: float) → None; Sets how much more long-range exchange than short-range exchange. set_x_omega(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the range-seperation exchange parameter. test_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Vector, arg1: psi4.core.Vector, arg2: psi4.core.Vector, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector) → None; Quick testing capabilities. value(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Vector; Returns a given internal value. values(self: psi4.core.SuperFunctional) → Dict[str, psi4.core.Vector]; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi::Functional; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi::Functional]; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float; Range-seperated exchange parameter. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last upd",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.superfunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.symmetryoperation.html:4711,Deployability,update,updated,4711,"ne¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out the symmetry operation. E(self: psi4.core.SymmetryOperation) → None; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None; Zero out the symmetry operation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.symmetryoperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.symmetryoperation.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.tasklistcomputer.html:635,Deployability,update,updated,635,"﻿. TaskListComputer. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. TaskListComputer¶. class psi4.core.TaskListComputer¶; Bases: pybind11_builtins.pybind11_object; docstring; Methods Summary. set_title(self, arg0); docstring. Methods Documentation. set_title(self: psi4.core.TaskListComputer, arg0: str) → None¶; docstring. set_title(self: psi4.core.TaskListComputer, arg0: str) → None; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.tasklistcomputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.tasklistcomputer.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.threecenteroverlapint.html:845,Deployability,update,updated,845,"﻿. ThreeCenterOverlapInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ThreeCenterOverlapInt¶. class psi4.core.ThreeCenterOverlapInt¶; Bases: pybind11_builtins.pybind11_object; Three center overlap integrals; Methods Summary. compute_shell(self, arg0, arg1, arg2); Compute the integrals of the form (a|b|c). Methods Documentation. compute_shell(self: psi4.core.ThreeCenterOverlapInt, arg0: int, arg1: int, arg2: int) → None¶; Compute the integrals of the form (a|b|c). compute_shell(self: psi4.core.ThreeCenterOverlapInt, arg0: int, arg1: int, arg2: int) → None; Compute the integrals of the form (a|b|c). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.threecenteroverlapint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.threecenteroverlapint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.timer_off-1.html:370,Deployability,update,updated,370,"﻿. timer_off. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. timer_off¶. psi4.core.timer_off(arg0: str) → None¶; Stop timer of label argument. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.timer_off-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.timer_off-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.timer_off.html:370,Deployability,update,updated,370,"﻿. timer_off. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. timer_off¶. psi4.core.timer_off(arg0: str) → None¶; Stop timer of label argument. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.timer_off.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.timer_off.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.timer_on-1.html:383,Deployability,update,updated,383,"﻿. timer_on. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. timer_on¶. psi4.core.timer_on(arg0: str) → None¶; Start timer with argument as label. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.timer_on-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.timer_on-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.timer_on.html:383,Deployability,update,updated,383,"﻿. timer_on. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. timer_on¶. psi4.core.timer_on(arg0: str) → None¶; Start timer with argument as label. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.timer_on.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.timer_on.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.tracelessquadrupoleint.html:774,Deployability,update,updated,774,"﻿. TracelessQuadrupoleInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. TracelessQuadrupoleInt¶. class psi4.core.TracelessQuadrupoleInt¶; Bases: psi4.core.OneBodyAOInt; Computes traceless quadrupole integrals. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. origin¶; The origin about which the one body ints are being computed. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.tracelessquadrupoleint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.tracelessquadrupoleint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.triplet-1.html:568,Deployability,update,updated,568,"﻿. triplet. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. triplet¶. psi4.core.triplet(A: psi4.core.Matrix, B: psi4.core.Matrix, C: psi4.core.Matrix, transA: bool=False, transB: bool=False, transC: bool=False) → psi4.core.Matrix¶; Returns the multiplication of three matrics A, B, and C, with options to transpose each beforehand. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.triplet-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.triplet-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.triplet.html:568,Deployability,update,updated,568,"﻿. triplet. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. triplet¶. psi4.core.triplet(A: psi4.core.Matrix, B: psi4.core.Matrix, C: psi4.core.Matrix, transA: bool=False, transB: bool=False, transC: bool=False) → psi4.core.Matrix¶; Returns the multiplication of three matrics A, B, and C, with options to transpose each beforehand. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.triplet.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.triplet.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.tstart-1.html:343,Deployability,update,updated,343,"﻿. tstart. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. tstart¶. psi4.core.tstart() → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.tstart-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.tstart-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.tstart.html:343,Deployability,update,updated,343,"﻿. tstart. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. tstart¶. psi4.core.tstart() → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.tstart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.tstart.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.tstop-1.html:330,Deployability,update,updated,330,"﻿. tstop. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. tstop¶. psi4.core.tstop() → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.tstop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.tstop-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.tstop.html:330,Deployability,update,updated,330,"﻿. tstop. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. tstop¶. psi4.core.tstop() → None¶; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.tstop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.tstop.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.twobodyaoint.html:788,Deployability,update,updated,788,"﻿. TwoBodyAOInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. TwoBodyAOInt¶. class psi4.core.TwoBodyAOInt¶; Bases: pybind11_builtins.pybind11_object; Two body integral base class; Methods Summary. compute_shell(self, arg0, arg1, arg2, arg3); Compute ERIs between 4 shells. Methods Documentation. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int; Compute ERIs between 4 shells. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.twobodyaoint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.twobodyaoint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.twoelectronint.html:800,Deployability,update,updated,800,"﻿. TwoElectronInt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. TwoElectronInt¶. class psi4.core.TwoElectronInt¶; Bases: psi4.core.TwoBodyAOInt; Computes two-electron repulsion integrals; Methods Summary. compute_shell(self, arg0, arg1, arg2, arg3); Compute ERIs between 4 shells. Methods Documentation. compute_shell(self: psi4.core.TwoElectronInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. compute_shell(self: psi4.core.TwoElectronInt, arg0: int, arg1: int, arg2: int, arg3: int) → int; Compute ERIs between 4 shells. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.twoelectronint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.twoelectronint.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:16201,Deployability,update,update,16201,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:16959,Deployability,update,updated,16959,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:3171,Energy Efficiency,charge,charges,3171,"turns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.UHF, basis: psi4.core.BasisSet) → psi4.core.UHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavef",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:4291,Energy Efficiency,energy,energy,4291,"ion, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.UHF, basis: psi4.core.BasisSet) → psi4.core.UHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wav",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:6115,Energy Efficiency,energy,energy,6115,"t[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:6123,Energy Efficiency,energy,energy,6123," equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:6197,Energy Efficiency,energy,energy,6197,"ping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. force_doccpi(",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:6969,Energy Efficiency,energy,energy,6969,"ocstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None¶; Forms the F mat",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:7037,Energy Efficiency,energy,energy,7037,"rrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None¶; Forms the F matrix. form_G(self: psi4.core.HF) → None¶; Forms the G matrix. form_H(self: psi4.core.HF) → None¶; Forms the core Hamiltonian.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:14359,Energy Efficiency,energy,energy,14359,"urns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None¶; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: Li",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:4209,Integrability,wrap,wrapper,4209,"xed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.UHF, basis: psi4.core.BasisSet) → psi4.core.UHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:2920,Modifiability,variab,variable,2920,"ial + Kinetic) Integrals. MOM_excited_¶; Are we to do excited-state MOM?. MOM_performed_¶; MOM performed current iteration?. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.UHF, basis: psi4.core.BasisSet) → psi4.core.UHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:3048,Modifiability,variab,variables,3048,"elf: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.UHF, basis: psi4.core.BasisSet) → psi4.core.UHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:5469,Modifiability,variab,variable,5469,"unction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subse",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:5599,Modifiability,variab,variable,5599,"ial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; docstring. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. diis(self: psi4.core.HF) → bool¶; docstring. diis_enabled_¶; docstring. diis_manager(self: psi4.core.HF) → psi4.core.DIISManager¶; docstring. diis_start_¶; docstring. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wav",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:10168,Modifiability,variab,variable,10168," → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → float¶; docstring. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key)¶. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. guess(self: psi4.core.HF) → None¶; Forms the guess (guarantees C, D, and E). guess_Ca(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Alpha Orbital Matrix. guess_Cb(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Beta Orbital Matrix. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. has_variable(key)¶. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. initialize()¶; Specialized initialization, compute integrals and does everything to prepare for iterations. initialize_gtfock_jk(self: psi4.core.HF) → None¶; Sets up a GTFock JK object. initialize_jk(memory, jk=None)¶. initialized_diis_manager_¶; docstring. iteration_¶; docstring. iterations(e_conv=None, d_conv=None)¶. jk(self: psi4.core.HF) → psi4.core.JK¶; Returns the internal JK object. legacy_frequencies()¶. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int¶; Number of Alpha electrons. nalphapi(se",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:10289,Modifiability,variab,variable,10289,"List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → float¶; docstring. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key)¶. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. guess(self: psi4.core.HF) → None¶; Forms the guess (guarantees C, D, and E). guess_Ca(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Alpha Orbital Matrix. guess_Cb(self: psi4.core.HF, arg0: psi4.core.Matrix) → None¶; Sets the guess Beta Orbital Matrix. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. has_variable(key)¶. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. initialize()¶; Specialized initialization, compute integrals and does everything to prepare for iterations. initialize_gtfock_jk(self: psi4.core.HF) → None¶; Sets up a GTFock JK object. initialize_jk(memory, jk=None)¶. initialized_diis_manager_¶; docstring. iteration_¶; docstring. iterations(e_conv=None, d_conv=None)¶. jk(self: psi4.core.HF) → psi4.core.JK¶; Returns the internal JK object. legacy_frequencies()¶. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int¶; Number of Alpha electrons. nalphapi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of alpha orbitals per irrep. name(self: psi4.core.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:13681,Modifiability,variab,variable,13681,"terations(self: psi4.core.HF) → None¶; docstring. push_back_external_potential(self: psi4.core.HF, V: psi4.core.Matrix) → None¶; Add an external potential to the private external_potentials list. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. reset_occupation(self: psi4.core.HF) → None¶; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hes",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:13799,Modifiability,variab,variables,13799,"ne¶; Add an external potential to the private external_potentials list. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. reset_occupation(self: psi4.core.HF) → None¶; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:14060,Modifiability,variab,variable,14060," reset_occupation(self: psi4.core.HF) → None¶; docstring. rotate_orbitals(self: psi4.core.HF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. save_density_and_energy(self: psi4.core.HF) → None¶; docstring. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. semicanonicalize(self: psi4.core.HF) → None¶; Semicanonicalizes the orbitals for ROHF. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energies(self: psi4.core.HF, arg0: str, arg1: float) → None¶; docstring. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None¶; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the leve",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:15705,Modifiability,variab,variable,15705,"e.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_jk(self: psi4.core.HF, arg0: psi4.core.JK) → None¶; Sets the internal JK object !expert. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], a",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:16429,Modifiability,inherit,inherited,16429,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:16749,Modifiability,variab,variable,16749,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:16765,Modifiability,variab,variables,16765,"of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_sad_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities basisset. set_sad_fitting_basissets(self: psi4.core.HF, arg0: List[psi4.core.BasisSet]) → None¶; Sets the Superposition of Atomic Densities density-fitted basisset. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. soscf_update(self: psi4.core.HF, arg0: float, arg1: int, arg2: int, arg3: int) → int¶; Computes a second-order SCF update. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. twoel_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. variable(key)¶. variables()¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:1985,Performance,perform,performed,1985,"ction) → psi4.core.Matrix¶; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Density Matrix. Db_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Beta Density subset. Fa(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix. Fa_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Fock Matrix. Fb_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. MOM_excited_¶; Are we to do excited-state MOM?. MOM_performed_¶; MOM performed current iteration?. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, p",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:8421,Performance,perform,performed,8421,"soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → None¶; Forms the F matrix. form_G(self: psi4.core.HF) → None¶; Forms the G matrix. form_H(self: psi4.core.HF) → None¶; Forms the core Hamiltonian. form_Shalf(self: psi4.core.HF) → None¶; Forms the S^1/2 matrix. form_V(self: psi4.core.HF) → None¶; Form the Kohn-Sham Potential Matrices from the current Density Matrices. form_initial_C(self: psi4.core.HF) → None¶; Forms the initial Orbital Matrices from the current Fock Matrices. form_initial_F(self: psi4.core.HF) → None¶; Forms the initial F matrix. frac_performed_¶; Frac performed current iteration?. frac_renormalize(self: psi4.core.HF) → None¶; docstring. frequencies()¶. static from_file(wfn_data)¶; Summary. Parameters:wfn_data (str or dict) – If a str reads a Wavefunction from a disk otherwise, assumes the data; is passed in. Returns:A deserialized Wavefunction object. Return type:Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. functional(self: psi4.core.HF) → psi4.core.SuperFunctional¶; Returns the internal DFT Superfunctional. get_array(key)¶. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_energies(self: psi4.core.HF, arg0: str) → ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html:4200,Usability,simpl,simply,4200,"xed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.UHF, basis: psi4.core.BasisSet) → psi4.core.UHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uhf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uhf.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.uksfunctions.html:1617,Deployability,update,updated,1617,"﻿. UKSFunctions. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. UKSFunctions¶. class psi4.core.UKSFunctions¶; Bases: psi4.core.PointFunctions; docstring. ansatz(self: psi4.core.PointFunctions) → int¶; docstring. basis_values(self: psi4.core.BasisFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. compute_functions(self: psi4.core.BasisFunctions, arg0: psi::BlockOPoints) → None¶; docstring. compute_points(self: psi4.core.PointFunctions, block: psi::BlockOPoints, force_compute: bool=True) → None¶; docstring. deriv(self: psi4.core.BasisFunctions) → int¶; docstring. max_functions(self: psi4.core.BasisFunctions) → int¶; docstring. max_points(self: psi4.core.BasisFunctions) → int¶; docstring. orbital_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. point_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Vector]¶; docstring. print_out(self: psi4.core.PointFunctions, out_fname: str='outfile', print: int=2) → None¶; docstring. set_ansatz(self: psi4.core.PointFunctions, arg0: int) → None¶; docstring. set_deriv(self: psi4.core.BasisFunctions, arg0: int) → None¶; docstring. set_pointers(*args, **kwargs)¶; Overloaded function. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix) -> None. docstring. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) -> None. docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.uksfunctions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.uksfunctions.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html:5984,Deployability,update,updated,5984,".VBase) → None; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None; doctsring. compute_Vx(self: psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs); Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi::BlockOPoints; Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self: psi4.core.VBase) → psi::DFTGrid; Returns the grid object. initialize(*args, **kwargs); Overloaded function. initialize(self: psi4.core.VBase) -> None. doctsring. initialize(self: psi4.core.VBase) -> None. Initializes the V object. nblocks(self: psi4.core.VBase) → int; Total number of blocks. print_header(self: psi4.core.VBase) → None; Prints the objects header. properties(self: psi4.core.VBase) → List[psi::PointFunctions]; Returns the properties computer. quadrature_values(self: psi4.core.VBase) → Dict[str, float]; Returns the quadrature values. set_D(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None; Sets the internal density. set_debug(self: psi4.core.VBase, arg0: int) → None; Sets the debug level of the object. set_print(self: psi4.core.VBase, arg0: int) → None; Sets the print level of the object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vbase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html:394,Performance,cache,cache,394,"﻿. VBase. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. VBase¶. class psi4.core.VBase¶; Bases: pybind11_builtins.pybind11_object; docstring; Methods Summary. Dao(self, arg0); Returns internal AO density. basis(self); Returns the internal basis set. build(arg0, arg1, arg2). build_collocation_cache(self, arg0); Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self); Clears the collocation cache. compute_V(self, arg0); doctsring. compute_Vx(self, arg0, arg1); doctsring. compute_gradient(self); Compute the DFT nuclear gradient contribution. compute_hessain(self); Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs); Overloaded function. functional(self); Returns the interal superfunctional. get_block(self, arg0); Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_V",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vbase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html:480,Performance,cache,cache,480,"﻿. VBase. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. VBase¶. class psi4.core.VBase¶; Bases: pybind11_builtins.pybind11_object; docstring; Methods Summary. Dao(self, arg0); Returns internal AO density. basis(self); Returns the internal basis set. build(arg0, arg1, arg2). build_collocation_cache(self, arg0); Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self); Clears the collocation cache. compute_V(self, arg0); doctsring. compute_Vx(self, arg0, arg1); doctsring. compute_gradient(self); Compute the DFT nuclear gradient contribution. compute_hessain(self); Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs); Overloaded function. functional(self); Returns the interal superfunctional. get_block(self, arg0); Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_V",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vbase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html:1791,Performance,cache,cache,1791,"interal superfunctional. get_block(self, arg0); Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(self: psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None¶; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs)¶; Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional¶; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi::BlockOPoints¶; Returns the requested BlockOPoints. get_np_xyzw()¶; Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vbase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html:1902,Performance,cache,cache,1902,"s the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(self: psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None¶; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs)¶; Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional¶; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi::BlockOPoints¶; Returns the requested BlockOPoints. get_np_xyzw()¶; Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self: psi4.core.VBase) → psi::DFTGrid¶; Returns the grid object. initialize(*args, **kwargs)¶; Ove",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vbase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html:3988,Performance,cache,cache,3988,"4.core.VBase) -> None. Initializes the V object. nblocks(self: psi4.core.VBase) → int¶; Total number of blocks. print_header(self: psi4.core.VBase) → None¶; Prints the objects header. properties(self: psi4.core.VBase) → List[psi::PointFunctions]¶; Returns the properties computer. quadrature_values(self: psi4.core.VBase) → Dict[str, float]¶; Returns the quadrature values. set_D(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Sets the internal density. set_debug(self: psi4.core.VBase, arg0: int) → None¶; Sets the debug level of the object. set_print(self: psi4.core.VBase, arg0: int) → None¶; Sets the print level of the object. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet; Returns the internal basis set. build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None; doctsring. compute_Vx(self: psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs); Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi::BlockOPoints; Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(se",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vbase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html:4098,Performance,cache,cache,4098,"blocks. print_header(self: psi4.core.VBase) → None¶; Prints the objects header. properties(self: psi4.core.VBase) → List[psi::PointFunctions]¶; Returns the properties computer. quadrature_values(self: psi4.core.VBase) → Dict[str, float]¶; Returns the quadrature values. set_D(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Sets the internal density. set_debug(self: psi4.core.VBase, arg0: int) → None¶; Sets the debug level of the object. set_print(self: psi4.core.VBase, arg0: int) → None¶; Sets the print level of the object. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet; Returns the internal basis set. build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None; doctsring. compute_Vx(self: psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs); Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi::BlockOPoints; Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self: psi4.core.VBase) → psi::DFTGrid; Returns the grid object. initialize(*args, **kwargs); Overloaded fu",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vbase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html:8862,Deployability,update,updated,8862,"ber of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. nph; View with irreps. print_out(self: psi4.core.Vector) → None; Prints the vector to the output file. scale(self: psi4.core.Vector, sc: float) → None; Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set(self: psi4.core.Vector, m: int, val: float) -> None. Sets a single element value located at m. set(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.Vector) → None; Set a vector block. shape; Shape of the Psi4 data object. to_array(copy=True, dense=False); Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html:4743,Integrability,depend,depending,4743,"output file. scale(self: psi4.core.Vector, sc: float) → None¶; Scales the elements of a vector by sc. set(*args, **kwargs)¶; Overloaded function. set(self: psi4.core.Vector, m: int, val: float) -> None. Sets a single element value located at m. set(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.Vector) → None¶; Set a vector block. to_array(copy=True, dense=False)¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. array_interface(self: psi4.core.Vector) → list. dim(self: psi4.core.Vector, h: int=0) → int; Returns the dimensions of the vector per irrep h. dimpi(self: psi4.core.Vector) → psi4.core.Dimension; Returns the Dimension object. classmethod from_array(arr, name='New Matrix', dim1=None, dim2=None); Converts a numpy array or list of numpy arrays into a Psi4 Matrix (irreped if list). Parameters:; arr (array or list of arrays) – Numpy array or list of arrays to use as the data for a new core.Matrix; name (str) – Name to give the new core.Matrix; dim1 (list, tuple, or core.Dimension (optional)) – If a single dense numpy array is given, a dimension can be supplied to; app",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html:8356,Integrability,depend,depending,8356,"ber of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. nph; View with irreps. print_out(self: psi4.core.Vector) → None; Prints the vector to the output file. scale(self: psi4.core.Vector, sc: float) → None; Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set(self: psi4.core.Vector, m: int, val: float) -> None. Sets a single element value located at m. set(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.Vector) → None; Set a vector block. shape; Shape of the Psi4 data object. to_array(copy=True, dense=False); Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html:1351,Security,access,accessor,1351,"data object. Methods Summary. array_interface(self). dim(self, h); Returns the dimensions of the vector per irrep h. dimpi(self); Returns the Dimension object. from_array(arr[, name, dim1, dim2]); Converts a numpy array or list of numpy arrays into a Psi4 Matrix (irreped if list). from_list(x). from_serial(json_data); Converts serialized data to the correct Psi4 data type. get(*args, **kwargs); Overloaded function. get_block(self, slice); Get a vector block. nirrep(self); Returns the number of irreps. np_read(filename[, prefix]); Reads the data from a NumPy compress file. np_write([filename, prefix]); Writes the irreped matrix to a NumPy zipped file. print_out(self); Prints the vector to the output file. scale(self, sc); Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set_block(self, slice, block); Set a vector block. to_array([copy, dense]); Converts a Psi4 Matrix or Vector to a numpy array. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. Attributes Documentation. name¶; The name of the Vector. Used in printing. np¶; View without only one irrep. nph¶; View with irreps. shape¶; Shape of the Psi4 data object. Methods Documentation. array_interface(self: psi4.core.Vector) → list¶. dim(self: psi4.core.Vector, h: int=0) → int¶; Returns the dimensions of the vector per irrep h. dimpi(self: psi4.core.Vector) → psi4.core.Dimension¶; Returns the Dimension object. classmethod from_array(arr, name='New Matrix', dim1=None, dim2=None)¶; Converts a numpy array or list of numpy arrays into a Psi4 Matrix (irreped if list). Parameters:; arr (array or list of arrays) – Numpy array or list of arrays to use as the data for a new core.Matrix; name (str) – Name to give the new core.Matrix; dim1 (list, tuple, or core.Dimension (optional)) – If a single dense numpy array is given, a dimension can be supplied to; apply irreps to this array. Note that this discards all extra information; given in the matrix besides the diago",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html:5033,Security,access,accessor,5033," Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.Vector) → None¶; Set a vector block. to_array(copy=True, dense=False)¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. array_interface(self: psi4.core.Vector) → list. dim(self: psi4.core.Vector, h: int=0) → int; Returns the dimensions of the vector per irrep h. dimpi(self: psi4.core.Vector) → psi4.core.Dimension; Returns the Dimension object. classmethod from_array(arr, name='New Matrix', dim1=None, dim2=None); Converts a numpy array or list of numpy arrays into a Psi4 Matrix (irreped if list). Parameters:; arr (array or list of arrays) – Numpy array or list of arrays to use as the data for a new core.Matrix; name (str) – Name to give the new core.Matrix; dim1 (list, tuple, or core.Dimension (optional)) – If a single dense numpy array is given, a dimension can be supplied to; apply irreps to this array. Note that this discards all extra information; given in the matrix besides the diagonal blocks determined by the passed; dimension.; dim2 – Same as dim1 only if using a psi4.core.Dimension object. Returns:matrix – Returns the given Psi4 object. Return type:Matrix or Vector. Notes; T",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html:8645,Security,access,accessor,8645,"ber of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. nph; View with irreps. print_out(self: psi4.core.Vector) → None; Prints the vector to the output file. scale(self: psi4.core.Vector, sc: float) → None; Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set(self: psi4.core.Vector, m: int, val: float) -> None. Sets a single element value located at m. set(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.Vector) → None; Set a vector block. shape; Shape of the Psi4 data object. to_array(copy=True, dense=False); Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html:4327,Usability,simpl,simply,4327,"e.Vector¶; Get a vector block. nirrep(self: psi4.core.Vector) → int¶; Returns the number of irreps. classmethod np_read(filename, prefix='')¶; Reads the data from a NumPy compress file. np_write(filename=None, prefix='')¶; Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. print_out(self: psi4.core.Vector) → None¶; Prints the vector to the output file. scale(self: psi4.core.Vector, sc: float) → None¶; Scales the elements of a vector by sc. set(*args, **kwargs)¶; Overloaded function. set(self: psi4.core.Vector, m: int, val: float) -> None. Sets a single element value located at m. set(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.Vector) → None¶; Set a vector block. to_array(copy=True, dense=False)¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. array_interface(self: psi4.core.Vector) → list. dim(self: psi4.core.Vector, h: int=0) → int; Returns the dimensions of the vector per irrep h. dimpi(self: psi4.core.Vector) → psi4.core.Dimension; Returns the Dimension object. classmethod from_array(arr, nam",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html:7940,Usability,simpl,simply,7940,"ber of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. nph; View with irreps. print_out(self: psi4.core.Vector) → None; Prints the vector to the output file. scale(self: psi4.core.Vector, sc: float) → None; Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set(self: psi4.core.Vector, m: int, val: float) -> None. Sets a single element value located at m. set(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.Vector) → None; Set a vector block. shape; Shape of the Psi4 data object. to_array(copy=True, dense=False); Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector3.html:1864,Deployability,update,updated,1864,"﻿. Vector3. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. Vector3¶. class psi4.core.Vector3¶; Bases: pybind11_builtins.pybind11_object; Class for vectors of length three, often Cartesian coordinate vectors, and their common operations; Methods Summary. cross(self, arg0); Returns cross product of arg1 and arg2. distance(self, arg0); Returns distance between two points represented by arg1 and arg2. dot(self, arg0); Returns dot product of arg1 and arg2. norm(self); Returns Euclidean norm of arg1. normalize(self); Returns vector of unit length and arg1 direction. Methods Documentation. cross(self: psi4.core.Vector3, arg0: psi4.core.Vector3) → psi4.core.Vector3¶; Returns cross product of arg1 and arg2. distance(self: psi4.core.Vector3, arg0: psi4.core.Vector3) → float¶; Returns distance between two points represented by arg1 and arg2. dot(self: psi4.core.Vector3, arg0: psi4.core.Vector3) → float¶; Returns dot product of arg1 and arg2. norm(self: psi4.core.Vector3) → float¶; Returns Euclidean norm of arg1. normalize(self: psi4.core.Vector3) → None¶; Returns vector of unit length and arg1 direction. cross(self: psi4.core.Vector3, arg0: psi4.core.Vector3) → psi4.core.Vector3; Returns cross product of arg1 and arg2. distance(self: psi4.core.Vector3, arg0: psi4.core.Vector3) → float; Returns distance between two points represented by arg1 and arg2. dot(self: psi4.core.Vector3, arg0: psi4.core.Vector3) → float; Returns dot product of arg1 and arg2. norm(self: psi4.core.Vector3) → float; Returns Euclidean norm of arg1. normalize(self: psi4.core.Vector3) → None; Returns vector of unit length and arg1 direction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vector3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector3.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vectormatrix.html:1375,Availability,error,error,1375,"nding all the items in the given list. insert(self, i, x); Insert an item at a given position. pop(*args, **kwargs); Overloaded function. remove(self, x); Remove the first item from the list whose value is x. Methods Documentation. append(self: List[psi::Matrix], x: psi::Matrix) → None¶; Add an item to the end of the list. count(self: List[psi::Matrix], x: psi::Matrix) → int¶; Return the number of times x appears in the list. extend(self: List[psi::Matrix], L: List[psi::Matrix]) → None¶; Extend the list by appending all the items in the given list. insert(self: List[psi::Matrix], i: int, x: psi::Matrix) → None¶; Insert an item at a given position. pop(*args, **kwargs)¶; Overloaded function. pop(self: List[psi::Matrix]) -> psi::Matrix. Remove and return the last item. pop(self: List[psi::Matrix], i: int) -> psi::Matrix. Remove and return the item at index i. remove(self: List[psi::Matrix], x: psi::Matrix) → None¶; Remove the first item from the list whose value is x. It is an error if there is no such item. append(self: List[psi::Matrix], x: psi::Matrix) → None; Add an item to the end of the list. count(self: List[psi::Matrix], x: psi::Matrix) → int; Return the number of times x appears in the list. extend(self: List[psi::Matrix], L: List[psi::Matrix]) → None; Extend the list by appending all the items in the given list. insert(self: List[psi::Matrix], i: int, x: psi::Matrix) → None; Insert an item at a given position. pop(*args, **kwargs); Overloaded function. pop(self: List[psi::Matrix]) -> psi::Matrix. Remove and return the last item. pop(self: List[psi::Matrix], i: int) -> psi::Matrix. Remove and return the item at index i. remove(self: List[psi::Matrix], x: psi::Matrix) → None; Remove the first item from the list whose value is x. It is an error if there is no such item. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wedn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vectormatrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vectormatrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vectormatrix.html:2159,Availability,error,error,2159,"sert an item at a given position. pop(*args, **kwargs); Overloaded function. remove(self, x); Remove the first item from the list whose value is x. Methods Documentation. append(self: List[psi::Matrix], x: psi::Matrix) → None¶; Add an item to the end of the list. count(self: List[psi::Matrix], x: psi::Matrix) → int¶; Return the number of times x appears in the list. extend(self: List[psi::Matrix], L: List[psi::Matrix]) → None¶; Extend the list by appending all the items in the given list. insert(self: List[psi::Matrix], i: int, x: psi::Matrix) → None¶; Insert an item at a given position. pop(*args, **kwargs)¶; Overloaded function. pop(self: List[psi::Matrix]) -> psi::Matrix. Remove and return the last item. pop(self: List[psi::Matrix], i: int) -> psi::Matrix. Remove and return the item at index i. remove(self: List[psi::Matrix], x: psi::Matrix) → None¶; Remove the first item from the list whose value is x. It is an error if there is no such item. append(self: List[psi::Matrix], x: psi::Matrix) → None; Add an item to the end of the list. count(self: List[psi::Matrix], x: psi::Matrix) → int; Return the number of times x appears in the list. extend(self: List[psi::Matrix], L: List[psi::Matrix]) → None; Extend the list by appending all the items in the given list. insert(self: List[psi::Matrix], i: int, x: psi::Matrix) → None; Insert an item at a given position. pop(*args, **kwargs); Overloaded function. pop(self: List[psi::Matrix]) -> psi::Matrix. Remove and return the last item. pop(self: List[psi::Matrix], i: int) -> psi::Matrix. Remove and return the item at index i. remove(self: List[psi::Matrix], x: psi::Matrix) → None; Remove the first item from the list whose value is x. It is an error if there is no such item. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vectormatrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vectormatrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vectormatrix.html:2371,Deployability,update,updated,2371,"sert an item at a given position. pop(*args, **kwargs); Overloaded function. remove(self, x); Remove the first item from the list whose value is x. Methods Documentation. append(self: List[psi::Matrix], x: psi::Matrix) → None¶; Add an item to the end of the list. count(self: List[psi::Matrix], x: psi::Matrix) → int¶; Return the number of times x appears in the list. extend(self: List[psi::Matrix], L: List[psi::Matrix]) → None¶; Extend the list by appending all the items in the given list. insert(self: List[psi::Matrix], i: int, x: psi::Matrix) → None¶; Insert an item at a given position. pop(*args, **kwargs)¶; Overloaded function. pop(self: List[psi::Matrix]) -> psi::Matrix. Remove and return the last item. pop(self: List[psi::Matrix], i: int) -> psi::Matrix. Remove and return the item at index i. remove(self: List[psi::Matrix], x: psi::Matrix) → None¶; Remove the first item from the list whose value is x. It is an error if there is no such item. append(self: List[psi::Matrix], x: psi::Matrix) → None; Add an item to the end of the list. count(self: List[psi::Matrix], x: psi::Matrix) → int; Return the number of times x appears in the list. extend(self: List[psi::Matrix], L: List[psi::Matrix]) → None; Extend the list by appending all the items in the given list. insert(self: List[psi::Matrix], i: int, x: psi::Matrix) → None; Insert an item at a given position. pop(*args, **kwargs); Overloaded function. pop(self: List[psi::Matrix]) -> psi::Matrix. Remove and return the last item. pop(self: List[psi::Matrix], i: int) -> psi::Matrix. Remove and return the item at index i. remove(self: List[psi::Matrix], x: psi::Matrix) → None; Remove the first item from the list whose value is x. It is an error if there is no such item. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vectormatrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vectormatrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vectormatrix.html:345,Modifiability,extend,extend,345,"﻿. VectorMatrix. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. VectorMatrix¶. class psi4.core.VectorMatrix¶; Bases: pybind11_builtins.pybind11_object; Methods Summary. append(self, x); Add an item to the end of the list. count(self, x); Return the number of times x appears in the list. extend(self, L); Extend the list by appending all the items in the given list. insert(self, i, x); Insert an item at a given position. pop(*args, **kwargs); Overloaded function. remove(self, x); Remove the first item from the list whose value is x. Methods Documentation. append(self: List[psi::Matrix], x: psi::Matrix) → None¶; Add an item to the end of the list. count(self: List[psi::Matrix], x: psi::Matrix) → int¶; Return the number of times x appears in the list. extend(self: List[psi::Matrix], L: List[psi::Matrix]) → None¶; Extend the list by appending all the items in the given list. insert(self: List[psi::Matrix], i: int, x: psi::Matrix) → None¶; Insert an item at a given position. pop(*args, **kwargs)¶; Overloaded function. pop(self: List[psi::Matrix]) -> psi::Matrix. Remove and return the last item. pop(self: List[psi::Matrix], i: int) -> psi::Matrix. Remove and return the item at index i. remove(self: List[psi::Matrix], x: psi::Matrix) → None¶; Remove the first item from the list whose value is x. It is an error if there is no such item. append(self: List[psi::Matrix], x: psi::Matrix) → None; Add an item to the end of the list. count(self: List[psi::Matrix], x: psi::Matrix) → int; Return the number of times x appears in the list. extend(self: List[psi::Matrix], L: List[psi::Matrix]) → None; Extend the list by appending all the items in the given list. insert(self: List[psi::Matrix], i: int, x: psi::Matrix) → None; Insert an item at a given position. pop(*args, **kwargs); Overloaded function. pop(self: List[psi::Matrix]) -> psi::Matrix. Remove and return the last item. pop(self: List[psi::Matrix], i: int) -> psi::Matrix. ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vectormatrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vectormatrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vectormatrix.html:815,Modifiability,extend,extend,815,"﻿. VectorMatrix. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. VectorMatrix¶. class psi4.core.VectorMatrix¶; Bases: pybind11_builtins.pybind11_object; Methods Summary. append(self, x); Add an item to the end of the list. count(self, x); Return the number of times x appears in the list. extend(self, L); Extend the list by appending all the items in the given list. insert(self, i, x); Insert an item at a given position. pop(*args, **kwargs); Overloaded function. remove(self, x); Remove the first item from the list whose value is x. Methods Documentation. append(self: List[psi::Matrix], x: psi::Matrix) → None¶; Add an item to the end of the list. count(self: List[psi::Matrix], x: psi::Matrix) → int¶; Return the number of times x appears in the list. extend(self: List[psi::Matrix], L: List[psi::Matrix]) → None¶; Extend the list by appending all the items in the given list. insert(self: List[psi::Matrix], i: int, x: psi::Matrix) → None¶; Insert an item at a given position. pop(*args, **kwargs)¶; Overloaded function. pop(self: List[psi::Matrix]) -> psi::Matrix. Remove and return the last item. pop(self: List[psi::Matrix], i: int) -> psi::Matrix. Remove and return the item at index i. remove(self: List[psi::Matrix], x: psi::Matrix) → None¶; Remove the first item from the list whose value is x. It is an error if there is no such item. append(self: List[psi::Matrix], x: psi::Matrix) → None; Add an item to the end of the list. count(self: List[psi::Matrix], x: psi::Matrix) → int; Return the number of times x appears in the list. extend(self: List[psi::Matrix], L: List[psi::Matrix]) → None; Extend the list by appending all the items in the given list. insert(self: List[psi::Matrix], i: int, x: psi::Matrix) → None; Insert an item at a given position. pop(*args, **kwargs); Overloaded function. pop(self: List[psi::Matrix]) -> psi::Matrix. Remove and return the last item. pop(self: List[psi::Matrix], i: int) -> psi::Matrix. ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vectormatrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vectormatrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.vectormatrix.html:1603,Modifiability,extend,extend,1603,"sert an item at a given position. pop(*args, **kwargs); Overloaded function. remove(self, x); Remove the first item from the list whose value is x. Methods Documentation. append(self: List[psi::Matrix], x: psi::Matrix) → None¶; Add an item to the end of the list. count(self: List[psi::Matrix], x: psi::Matrix) → int¶; Return the number of times x appears in the list. extend(self: List[psi::Matrix], L: List[psi::Matrix]) → None¶; Extend the list by appending all the items in the given list. insert(self: List[psi::Matrix], i: int, x: psi::Matrix) → None¶; Insert an item at a given position. pop(*args, **kwargs)¶; Overloaded function. pop(self: List[psi::Matrix]) -> psi::Matrix. Remove and return the last item. pop(self: List[psi::Matrix], i: int) -> psi::Matrix. Remove and return the item at index i. remove(self: List[psi::Matrix], x: psi::Matrix) → None¶; Remove the first item from the list whose value is x. It is an error if there is no such item. append(self: List[psi::Matrix], x: psi::Matrix) → None; Add an item to the end of the list. count(self: List[psi::Matrix], x: psi::Matrix) → int; Return the number of times x appears in the list. extend(self: List[psi::Matrix], L: List[psi::Matrix]) → None; Extend the list by appending all the items in the given list. insert(self: List[psi::Matrix], i: int, x: psi::Matrix) → None; Insert an item at a given position. pop(*args, **kwargs); Overloaded function. pop(self: List[psi::Matrix]) -> psi::Matrix. Remove and return the last item. pop(self: List[psi::Matrix], i: int) -> psi::Matrix. Remove and return the item at index i. remove(self: List[psi::Matrix], x: psi::Matrix) → None; Remove the first item from the list whose value is x. It is an error if there is no such item. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.vectormatrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vectormatrix.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.version-1.html:368,Deployability,update,updated,368,"﻿. version. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. version¶. psi4.core.version() → str¶; Returns the version ID of this copy of Psi. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.version-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.version-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.version.html:368,Deployability,update,updated,368,"﻿. version. Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. version¶. psi4.core.version() → str¶; Returns the version ID of this copy of Psi. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.version.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.version.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:27672,Deployability,update,updated,27672,"set_energy(self: psi4.core.Wavefunction, arg0: float) → None; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None; Sets the requested external potential. set_frequencies(val). set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None; Sets the requested (case-insensitive) double QC variable. set_variable(key, val). shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of singly occupied orbitals per irrep. to_file(filename=None); Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key). variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:1507,Energy Efficiency,charge,charges,1507,"ha Density Matrix. Da_subset(self, arg0); Returns the requested Alpha Density subset. Db(self); Returns the Beta Density Matrix. Db_subset(self, arg0); Returns the requested Beta Density subset. Fa(self); Returns the Alpha Fock Matrix. Fa_subset(self, arg0); Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self); Returns the Beta Fock Matrix. Fb_subset(self, arg0); Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self); Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self); Whether running a PCM calculation. S(self); Returns the One-electron Overlap Matrix. X(self); Returns the Lagrangian Matrix. alpha_orbital_space(self, arg0, arg1, arg2); docstring. aotoso(self); Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis]). c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key). density_fitted(self); Returns whether this wavefunction was obtained using density fitting or not. doccpi(self); Returns the number of doubly ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:1920,Energy Efficiency,energy,energy,1920,"is (AO,SO). H(self); Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self); Whether running a PCM calculation. S(self); Returns the One-electron Overlap Matrix. X(self); Returns the Lagrangian Matrix. alpha_orbital_space(self, arg0, arg1, arg2); docstring. aotoso(self); Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis]). c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key). density_fitted(self); Returns whether this wavefunction was obtained using density fitting or not. doccpi(self); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction’s energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, arg0, arg1); Returns the requested Alpha Eigenvalues subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, arg0, arg1); Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self); returns electrostatic potenti",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:2547,Energy Efficiency,energy,energy,2547,"(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis]). c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key). density_fitted(self); Returns whether this wavefunction was obtained using density fitting or not. doccpi(self); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction’s energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, arg0, arg1); Returns the requested Alpha Eigenvalues subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, arg0, arg1); Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. force_doccpi(self, arg0); Specialized expert use only. force_soccpi(self, arg0); Specialized expert use only. frequencies(). from_file(wfn_data); Summary. frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). get_basisset(self, arg0); Returns the requested auxiliary basis. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self); Get the print level of the Wavefunction. get_scratch_filename(filenumber); Given a wavefunction",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:2555,Energy Efficiency,energy,energy,2555,"ital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis]). c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key). density_fitted(self); Returns whether this wavefunction was obtained using density fitting or not. doccpi(self); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction’s energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, arg0, arg1); Returns the requested Alpha Eigenvalues subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, arg0, arg1); Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. force_doccpi(self, arg0); Specialized expert use only. force_soccpi(self, arg0); Specialized expert use only. frequencies(). from_file(wfn_data); Summary. frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). get_basisset(self, arg0); Returns the requested auxiliary basis. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self); Get the print level of the Wavefunction. get_scratch_filename(filenumber); Given a wavefunction and a scratch file number, canonicalizes the n",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:2596,Energy Efficiency,energy,energy,2596,"ital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis]). c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key). density_fitted(self); Returns whether this wavefunction was obtained using density fitting or not. doccpi(self); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction’s energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, arg0, arg1); Returns the requested Alpha Eigenvalues subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, arg0, arg1); Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. force_doccpi(self, arg0); Specialized expert use only. force_soccpi(self, arg0); Specialized expert use only. frequencies(). from_file(wfn_data); Summary. frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). get_basisset(self, arg0); Returns the requested auxiliary basis. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self); Get the print level of the Wavefunction. get_scratch_filename(filenumber); Given a wavefunction and a scratch file number, canonicalizes the n",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:5371,Energy Efficiency,energy,energy,5371,"ls per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction’s energy. set_external_potential(self, arg0); Sets the requested external potential. set_frequencies(val). set_gradient(self, arg0); Sets the Wavefunction’s gradient. set_hessian(self, arg0); Sets the Wavefunction’s Hessian. set_legacy_frequencies(self, arg0); Sets the frequencies of the Hessian. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val). shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals basis. soccpi(self); Returns the number of singly occupied orbitals per irrep. to_file([filename]); Converts a Wavefunction object to a base class. variable(key). variables(). Methods Documentation. Ca(self: psi4.core.Wavefunction) → psi4.core.Matri",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:8560,Energy Efficiency,charge,charges,8560,"sis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessi",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:9321,Energy Efficiency,energy,energy,9321,"e. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunc",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:10277,Energy Efficiency,energy,energy,10277,"pute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:10285,Energy Efficiency,energy,energy,10285,"ion) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use onl",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:10359,Energy Efficiency,energy,energy,10359,"vefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribt",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:15271,Energy Efficiency,energy,energy,15271,"on¶; Returns the number of symmetry orbitals per irrep. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:19184,Energy Efficiency,charge,charges,19184,"quested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self: psi4.core.Wavefunction) → bool; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the One-electron Overlap Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]; Returns the dictionary of all Matrix QC variables. arrays(). atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace; docstring. static build(mol, basis=None). c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self: psi4.core.Wavefunction) → float; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes the Hessian of the",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:19939,Energy Efficiency,energy,energy,19939,"C variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]; Returns the dictionary of all Matrix QC variables. arrays(). atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace; docstring. static build(mol, basis=None). c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self: psi4.core.Wavefunction) → float; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int; Removes the requested (case-insensitive) double QC variable. del_variable(key). density_fitted(self: psi4.core.Wavefunction) → bool; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → fl",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:20886,Energy Efficiency,energy,energy,20886,"asis. compute_energy(self: psi4.core.Wavefunction) → float; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int; Removes the requested (case-insensitive) double QC variable. del_variable(key). density_fitted(self: psi4.core.Wavefunction) → bool; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector; returns electrostatic potentials at nuclei. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → Non",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:20894,Energy Efficiency,energy,energy,20894,".Wavefunction) → float; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int; Removes the requested (case-insensitive) double QC variable. del_variable(key). density_fitted(self: psi4.core.Wavefunction) → bool; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector; returns electrostatic potentials at nuclei. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None; Specialized expert use only. Sets ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:20967,Energy Efficiency,energy,energy,20967," of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int; Removes the requested (case-insensitive) double QC variable. del_variable(key). density_fitted(self: psi4.core.Wavefunction) → bool; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector; returns electrostatic potentials at nuclei. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None; Specialized expert use only. Sets the number of singly occupied oribtals per ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:25833,Energy Efficiency,energy,energy,25833,"e.Dimension; Returns the number of symmetry orbitals per irrep. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]; Returns the dictionary of all double QC variables. set_array(key, val). set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None; Sets the requested external potential. set_frequencies(val). set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None; Sets the requested (case-insensitive) double QC variable. set_var",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:1356,Modifiability,variab,variable,1356,"requested Alpha Orbital subset. Cb(self); Returns the Beta Orbitals. Cb_subset(self, arg0, arg1); Returns the requested Beta Orbital subset. Da(self); Returns the Alpha Density Matrix. Da_subset(self, arg0); Returns the requested Alpha Density subset. Db(self); Returns the Beta Density Matrix. Db_subset(self, arg0); Returns the requested Beta Density subset. Fa(self); Returns the Alpha Fock Matrix. Fa_subset(self, arg0); Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self); Returns the Beta Fock Matrix. Fb_subset(self, arg0); Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self); Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self); Whether running a PCM calculation. S(self); Returns the One-electron Overlap Matrix. X(self); Returns the Lagrangian Matrix. alpha_orbital_space(self, arg0, arg1, arg2); docstring. aotoso(self); Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis]). c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variab",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:1429,Modifiability,variab,variables,1429,"rg0, arg1); Returns the requested Beta Orbital subset. Da(self); Returns the Alpha Density Matrix. Da_subset(self, arg0); Returns the requested Alpha Density subset. Db(self); Returns the Beta Density Matrix. Db_subset(self, arg0); Returns the requested Beta Density subset. Fa(self); Returns the Alpha Fock Matrix. Fa_subset(self, arg0); Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self); Returns the Beta Fock Matrix. Fb_subset(self, arg0); Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self); Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self); Whether running a PCM calculation. S(self); Returns the One-electron Overlap Matrix. X(self); Returns the Lagrangian Matrix. alpha_orbital_space(self, arg0, arg1, arg2); docstring. aotoso(self); Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis]). c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key). density_fitted(self); Returns whether this wavefunction was ob",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:2217,Modifiability,variab,variable,2217,"g2); docstring. aotoso(self); Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis]). c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key). density_fitted(self); Returns whether this wavefunction was obtained using density fitting or not. doccpi(self); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction’s energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, arg0, arg1); Returns the requested Alpha Eigenvalues subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, arg0, arg1); Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. force_doccpi(self, arg0); Specialized expert use only. force_soccpi(self, arg0); Specialized expert use only. frequencies(). from_file(wfn_data); Summary. frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:2311,Modifiability,variab,variable,2311,"y_variable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis]). c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key). density_fitted(self); Returns whether this wavefunction was obtained using density fitting or not. doccpi(self); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction’s energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, arg0, arg1); Returns the requested Alpha Eigenvalues subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, arg0, arg1); Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. force_doccpi(self, arg0); Specialized expert use only. force_soccpi(self, arg0); Specialized expert use only. frequencies(). from_file(wfn_data); Summary. frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). get_basisset(self, arg0); Return",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:3756,Modifiability,variab,variable,3756,"elf); Returns the Beta Eigenvalues. epsilon_b_subset(self, arg0, arg1); Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. force_doccpi(self, arg0); Specialized expert use only. force_soccpi(self, arg0); Specialized expert use only. frequencies(). from_file(wfn_data); Summary. frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). get_basisset(self, arg0); Returns the requested auxiliary basis. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self); Get the print level of the Wavefunction. get_scratch_filename(filenumber); Given a wavefunction and a scratch file number, canonicalizes the name so that files can be consistently written and read. get_variable(key). gradient(self); Returns the Wavefunction’s gradient. has_array_variable(self, arg0); Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self, arg0); Is the double QC variable (case-insensitive) set?. has_variable(key). hessian(self); Returns the Wavefunction’s Hessian. legacy_frequencies(). mo_extents(self); returns the wavefunction’s electronic orbital extents. molecule(self); Returns the Wavefunction’s molecule. nalpha(self); Number of Alpha electrons. nalphapi(self); Returns the number of alpha orbitals per irrep. name(self); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:3840,Modifiability,variab,variable,3840,"requested Beta Eigenvalues subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. force_doccpi(self, arg0); Specialized expert use only. force_soccpi(self, arg0); Specialized expert use only. frequencies(). from_file(wfn_data); Summary. frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). get_basisset(self, arg0); Returns the requested auxiliary basis. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self); Get the print level of the Wavefunction. get_scratch_filename(filenumber); Given a wavefunction and a scratch file number, canonicalizes the name so that files can be consistently written and read. get_variable(key). gradient(self); Returns the Wavefunction’s gradient. has_array_variable(self, arg0); Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self, arg0); Is the double QC variable (case-insensitive) set?. has_variable(key). hessian(self); Returns the Wavefunction’s Hessian. legacy_frequencies(). mo_extents(self); returns the wavefunction’s electronic orbital extents. molecule(self); Returns the Wavefunction’s molecule. nalpha(self); Number of Alpha electrons. nalphapi(self); Returns the number of alpha orbitals per irrep. name(self); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(sel",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:5053,Modifiability,variab,variable,5053,"onic orbital extents. molecule(self); Returns the Wavefunction’s molecule. nalpha(self); Number of Alpha electrons. nalphapi(self); Returns the number of alpha orbitals per irrep. name(self); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction’s energy. set_external_potential(self, arg0); Sets the requested external potential. set_frequencies(val). set_gradient(self, arg0); Sets the Wavefunction’s gradient. set_hessian(self, arg0); Sets the Wavefunction’s Hessian. set_legacy_frequencies(self, arg0); Sets the frequencies of the Hessian. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val). shallow_copy(self, arg0); Copies",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:5127,Modifiability,variab,variables,5127,"self); Number of Alpha electrons. nalphapi(self); Returns the number of alpha orbitals per irrep. name(self); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction’s energy. set_external_potential(self, arg0); Sets the requested external potential. set_frequencies(val). set_gradient(self, arg0); Sets the Wavefunction’s gradient. set_hessian(self, arg0); Sets the Wavefunction’s Hessian. set_legacy_frequencies(self, arg0); Sets the frequencies of the Hessian. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val). shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:5245,Modifiability,variab,variable,5245,"); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction’s energy. set_external_potential(self, arg0); Sets the requested external potential. set_frequencies(val). set_gradient(self, arg0); Sets the Wavefunction’s gradient. set_hessian(self, arg0); Sets the Wavefunction’s Hessian. set_legacy_frequencies(self, arg0); Sets the frequencies of the Hessian. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val). shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals basis. soccpi(self); Returns the number of singly occupied orbitals per irrep. to_file([filename]); Conve",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:5951,Modifiability,variab,variable,5951,"f); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction’s energy. set_external_potential(self, arg0); Sets the requested external potential. set_frequencies(val). set_gradient(self, arg0); Sets the Wavefunction’s gradient. set_hessian(self, arg0); Sets the Wavefunction’s Hessian. set_legacy_frequencies(self, arg0); Sets the frequencies of the Hessian. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val). shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals basis. soccpi(self); Returns the number of singly occupied orbitals per irrep. to_file([filename]); Converts a Wavefunction object to a base class. variable(key). variables(). Methods Documentation. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Alpha Orbital subset. Cb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Orbitals. Cb_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Beta Orbital subset. Da(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Alpha Density ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:6249,Modifiability,variab,variable,6249,"set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction’s energy. set_external_potential(self, arg0); Sets the requested external potential. set_frequencies(val). set_gradient(self, arg0); Sets the Wavefunction’s gradient. set_hessian(self, arg0); Sets the Wavefunction’s Hessian. set_legacy_frequencies(self, arg0); Sets the frequencies of the Hessian. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val). shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals basis. soccpi(self); Returns the number of singly occupied orbitals per irrep. to_file([filename]); Converts a Wavefunction object to a base class. variable(key). variables(). Methods Documentation. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Alpha Orbital subset. Cb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Orbitals. Cb_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Beta Orbital subset. Da(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Density Matrix. Db_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Beta Density subset. Fa(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix. Fa_subset(self: psi4.core.Wavefunction, arg0: str",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:6264,Modifiability,variab,variables,6264,"elf, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction’s energy. set_external_potential(self, arg0); Sets the requested external potential. set_frequencies(val). set_gradient(self, arg0); Sets the Wavefunction’s gradient. set_hessian(self, arg0); Sets the Wavefunction’s Hessian. set_legacy_frequencies(self, arg0); Sets the frequencies of the Hessian. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val). shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals basis. soccpi(self); Returns the number of singly occupied orbitals per irrep. to_file([filename]); Converts a Wavefunction object to a base class. variable(key). variables(). Methods Documentation. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Alpha Orbital subset. Cb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Orbitals. Cb_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Beta Orbital subset. Da(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Density Matrix. Db_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Beta Density subset. Fa(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix. Fa_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:8309,Modifiability,variab,variable,8309,"Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Fock Matrix. Fb_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self: psi4.c",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:8437,Modifiability,variab,variables,8437,"Matrix. Fb_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. arrays()¶. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:9798,Modifiability,variab,variable,9798,"atrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → ps",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:9928,Modifiability,variab,variable,9928,"beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. del_variable(key)¶. density_fitted(self: psi4.core.Wavefunction) → bool¶; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; r",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:12662,Modifiability,variab,variable,12662,"n object. Return type:Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. get_array(key)¶. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key)¶. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. has_variable(key)¶. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. legacy_frequencies()¶. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int¶; Number of Alpha electrons. nalphapi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of alpha orbitals per irrep. name(self: psi4.core.Wavefunction) → str¶; The level of theory this wavefunction corresponds to. nbeta(self: psi4.core.Wavefunction) → int¶; Number of Beta electrons. nbetapi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of beta orbitals per irrep. nfrzc(self: psi4.",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:12783,Modifiability,variab,variable,12783,"ozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. get_array(key)¶. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key)¶. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set?. has_variable(key)¶. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. legacy_frequencies()¶. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int¶; Number of Alpha electrons. nalphapi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of alpha orbitals per irrep. name(self: psi4.core.Wavefunction) → str¶; The level of theory this wavefunction corresponds to. nbeta(self: psi4.core.Wavefunction) → int¶; Number of Beta electrons. nbetapi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of beta orbitals per irrep. nfrzc(self: psi4.core.Wavefunction) → int¶; Number of frozen core electrons. nirrep(self: psi4.core.Wavefunction) → int¶; Number of irreps",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:14757,Modifiability,variab,variable,14757,"p(self: psi4.core.Wavefunction) → int¶; Number of irreps in the system. nmo(self: psi4.core.Wavefunction) → int¶; Number of molecule orbitals. nmopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of molecular orbitals per irrep. no_occupations(self: psi4.core.Wavefunction) → List[List[Tuple[float, int, int]]]¶; returns the natural orbital occupations on the wavefunction. nso(self: psi4.core.Wavefunction) → int¶; Number of symmetry orbitals. nsopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of symmetry orbitals per irrep. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:14875,Modifiability,variab,variables,14875,"molecule orbitals. nmopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of molecular orbitals per irrep. no_occupations(self: psi4.core.Wavefunction) → List[List[Tuple[float, int, int]]]¶; returns the natural orbital occupations on the wavefunction. nso(self: psi4.core.Wavefunction) → int¶; Number of symmetry orbitals. nsopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of symmetry orbitals per irrep. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:15049,Modifiability,variab,variable,15049,"ist[List[Tuple[float, int, int]]]¶; returns the natural orbital occupations on the wavefunction. nso(self: psi4.core.Wavefunction) → int¶; Number of symmetry orbitals. nsopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of symmetry orbitals per irrep. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. set_array(key, val)¶. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunc",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:16237,Modifiability,variab,variable,16237,"(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_frequencies(val)¶. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None¶; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key)¶. variables()¶. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix; Returns the requested Alpha Orbital subset. Cb(self: psi4.core.Wavefunction) → psi4.c",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:16743,Modifiability,inherit,inherited,16743,"es of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key)¶. variables()¶. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix; Returns the requested Alpha Orbital subset. Cb(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Beta Orbitals. Cb_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix; Returns the requested Beta Orbital subset. Da(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Beta Density Matrix. Db_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix; Returns the requested Beta Density subset. ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:16916,Modifiability,variab,variable,16916,"Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key)¶. variables()¶. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix; Returns the requested Alpha Orbital subset. Cb(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Beta Orbitals. Cb_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix; Returns the requested Beta Orbital subset. Da(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Beta Density Matrix. Db_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix; Returns the requested Beta Density subset. Fa(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Alpha Fock Matrix. Fa_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix; Returns ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:16932,Modifiability,variab,variables,16932,"rg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. set_variable(key, val)¶. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key)¶. variables()¶. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix; Returns the requested Alpha Orbital subset. Cb(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Beta Orbitals. Cb_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix; Returns the requested Beta Orbital subset. Da(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Beta Density Matrix. Db_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix; Returns the requested Beta Density subset. Fa(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Alpha Fock Matrix. Fa_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix; Returns the Alpha Fock ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:18936,Modifiability,variab,variable,18936,"Matrix; Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Beta Fock Matrix. Fb_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix; Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self: psi4.core.Wavefunction) → bool; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the One-electron Overlap Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]; Returns the dictionary of all Matrix QC variables. arrays(). atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace; docstring. static build(mol, basis=None). c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self: psi4.core.Wave",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:19063,Modifiability,variab,variables,19063,"eta Fock Matrix. Fb_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix; Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self: psi4.core.Wavefunction) → bool; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the One-electron Overlap Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]; Returns the dictionary of all Matrix QC variables. arrays(). atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace; docstring. static build(mol, basis=None). c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self: psi4.core.Wavefunction) → float; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes t",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:20412,Modifiability,variab,variable,20412,"rbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace; docstring. static build(mol, basis=None). c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self: psi4.core.Wavefunction) → float; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int; Removes the requested (case-insensitive) double QC variable. del_variable(key). density_fitted(self: psi4.core.Wavefunction) → bool; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.V",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:20541,Modifiability,variab,variable,20541," basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace; docstring. static build(mol, basis=None). c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_energy(self: psi4.core.Wavefunction) → float; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int; Removes the requested (case-insensitive) Matrix QC variable. del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int; Removes the requested (case-insensitive) double QC variable. del_variable(key). density_fitted(self: psi4.core.Wavefunction) → bool; Returns whether this wavefunction was obtained using density fitting or not. doccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector; returns ele",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:23251,Modifiability,variab,variable,23251,"avefunction object. Return type:Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of frozen virtual orbitals per irrep. get_array(key). get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int; Get the print level of the Wavefunction. get_scratch_filename(filenumber); Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key). gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool; Is the double QC variable (case-insensitive) set?. has_variable(key). hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Wavefunction’s Hessian. legacy_frequencies(). mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int; Number of Alpha electrons. nalphapi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of alpha orbitals per irrep. name(self: psi4.core.Wavefunction) → str; The level of theory this wavefunction corresponds to. nbeta(self: psi4.core.Wavefunction) → int; Number of Beta electrons. nbetapi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of beta orbitals per irrep. nfrzc(self: psi4.core.Wavefun",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:23371,Modifiability,variab,variable,23371,"mber of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of frozen virtual orbitals per irrep. get_array(key). get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int; Get the print level of the Wavefunction. get_scratch_filename(filenumber); Given a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read. get_variable(key). gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool; Is the Matrix QC variable (case-insensitive) set?. has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool; Is the double QC variable (case-insensitive) set?. has_variable(key). hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix; Returns the Wavefunction’s Hessian. legacy_frequencies(). mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]; returns the wavefunction’s electronic orbital extents. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int; Number of Alpha electrons. nalphapi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of alpha orbitals per irrep. name(self: psi4.core.Wavefunction) → str; The level of theory this wavefunction corresponds to. nbeta(self: psi4.core.Wavefunction) → int; Number of Beta electrons. nbetapi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of beta orbitals per irrep. nfrzc(self: psi4.core.Wavefunction) → int; Number of frozen core electrons. nirrep(self: psi4.core.Wavefunction) → int; Number of irreps in the syste",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:25324,Modifiability,variab,variable,25324,"ns. nirrep(self: psi4.core.Wavefunction) → int; Number of irreps in the system. nmo(self: psi4.core.Wavefunction) → int; Number of molecule orbitals. nmopi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of molecular orbitals per irrep. no_occupations(self: psi4.core.Wavefunction) → List[List[Tuple[float, int, int]]]; returns the natural orbital occupations on the wavefunction. nso(self: psi4.core.Wavefunction) → int; Number of symmetry orbitals. nsopi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of symmetry orbitals per irrep. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]; Returns the dictionary of all double QC variables. set_array(key, val). set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None; Sets the requested external potential. set_frequencies(val). set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vec",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:25441,Modifiability,variab,variables,25441,"mber of molecule orbitals. nmopi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of molecular orbitals per irrep. no_occupations(self: psi4.core.Wavefunction) → List[List[Tuple[float, int, int]]]; returns the natural orbital occupations on the wavefunction. nso(self: psi4.core.Wavefunction) → int; Number of symmetry orbitals. nsopi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of symmetry orbitals per irrep. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]; Returns the dictionary of all double QC variables. set_array(key, val). set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None; Sets the requested external potential. set_frequencies(val). set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None; Sets the level ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:25613,Modifiability,variab,variable,25613,"ction) → List[List[Tuple[float, int, int]]]; returns the natural orbital occupations on the wavefunction. nso(self: psi4.core.Wavefunction) → int; Number of symmetry orbitals. nsopi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of symmetry orbitals per irrep. reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float; Returns the requested (case-insensitive) double QC variable. scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]; Returns the dictionary of all double QC variables. set_array(key, val). set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None; Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None; Sets the requested external potential. set_frequencies(val). set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None; Sets the print level of the Wavefunction. set_reference_wavefunction(self:",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:26790,Modifiability,variab,variable,26790,"set_energy(self: psi4.core.Wavefunction, arg0: float) → None; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None; Sets the requested external potential. set_frequencies(val). set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None; Sets the requested (case-insensitive) double QC variable. set_variable(key, val). shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of singly occupied orbitals per irrep. to_file(filename=None); Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key). variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:27291,Modifiability,inherit,inherited,27291,"set_energy(self: psi4.core.Wavefunction, arg0: float) → None; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None; Sets the requested external potential. set_frequencies(val). set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None; Sets the requested (case-insensitive) double QC variable. set_variable(key, val). shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of singly occupied orbitals per irrep. to_file(filename=None); Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key). variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:27464,Modifiability,variab,variable,27464,"set_energy(self: psi4.core.Wavefunction, arg0: float) → None; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None; Sets the requested external potential. set_frequencies(val). set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None; Sets the requested (case-insensitive) double QC variable. set_variable(key, val). shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of singly occupied orbitals per irrep. to_file(filename=None); Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key). variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html:27479,Modifiability,variab,variables,27479,"set_energy(self: psi4.core.Wavefunction, arg0: float) → None; Sets the Wavefunction’s energy. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None; Sets the requested external potential. set_frequencies(val). set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s gradient. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None; Sets the Wavefunction’s Hessian. set_legacy_frequencies(self: psi4.core.Wavefunction, arg0: psi4.core.Vector) → None; Sets the frequencies of the Hessian. set_name(self: psi4.core.Wavefunction, arg0: str) → None; Sets the level of theory this wavefunction corresponds to. set_print(self: psi4.core.Wavefunction, arg0: int) → None; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None; Sets the requested (case-insensitive) double QC variable. set_variable(key, val). shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction) → psi4.core.Dimension; Returns the number of singly occupied orbitals per irrep. to_file(filename=None); Converts a Wavefunction object to a base class. Parameters:; wfn (Wavefunction) – A Wavefunction or inherited class; filename (None, optional) – An optional filename to write the data to. Returns:A dictionary and NumPy representation of the Wavefunction. Return type:dict. variable(key). variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.core.wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.wavefunction.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.activate-1.html:501,Deployability,update,updated,501,"﻿. activate. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. activate¶. psi4.driver.activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.activate-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.activate-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.activate.html:501,Deployability,update,updated,501,"﻿. activate. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. activate¶. psi4.driver.activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.activate.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.activate.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.ancestor-1.html:386,Deployability,update,updated,386,"﻿. ancestor. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ancestor¶. psi4.driver.ancestor(dir, n=1)[source]¶; Get the nth ancestor of a directory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.ancestor-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.ancestor-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.ancestor.html:386,Deployability,update,updated,386,"﻿. ancestor. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ancestor¶. psi4.driver.ancestor(dir, n=1)[source]¶; Get the nth ancestor of a directory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.ancestor.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.ancestor.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.banner-1.html:621,Deployability,update,updated,621,"﻿. banner. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. banner¶. psi4.driver.banner(text, type=1, width=35, strNotOutfile=False)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. If strNotOutfile; is True, function returns string rather than printing it; to output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.banner-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.banner-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.banner.html:621,Deployability,update,updated,621,"﻿. banner. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. banner¶. psi4.driver.banner(text, type=1, width=35, strNotOutfile=False)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. If strNotOutfile; is True, function returns string rather than printing it; to output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.banner.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.banner.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.basis_helper-1.html:784,Deployability,update,updated,784,"﻿. basis_helper. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. basis_helper¶. psi4.driver.basis_helper(block, name='', key='BASIS', set_option=True)[source]¶; For PsiAPI mode, forms a basis specification function from block; and associates it with keyword key under handle name. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see mints2, mints9, and cc54 test cases. Unless; set_option is False, name will be set as current active key,; equivalent to set key name or set_option({key: name}). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.basis_helper-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.basis_helper-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.basis_helper-1.html:467,Testability,test,test,467,"﻿. basis_helper. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. basis_helper¶. psi4.driver.basis_helper(block, name='', key='BASIS', set_option=True)[source]¶; For PsiAPI mode, forms a basis specification function from block; and associates it with keyword key under handle name. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see mints2, mints9, and cc54 test cases. Unless; set_option is False, name will be set as current active key,; equivalent to set key name or set_option({key: name}). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.basis_helper-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.basis_helper-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.basis_helper.html:784,Deployability,update,updated,784,"﻿. basis_helper. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. basis_helper¶. psi4.driver.basis_helper(block, name='', key='BASIS', set_option=True)[source]¶; For PsiAPI mode, forms a basis specification function from block; and associates it with keyword key under handle name. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see mints2, mints9, and cc54 test cases. Unless; set_option is False, name will be set as current active key,; equivalent to set key name or set_option({key: name}). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.basis_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.basis_helper.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.basis_helper.html:467,Testability,test,test,467,"﻿. basis_helper. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. basis_helper¶. psi4.driver.basis_helper(block, name='', key='BASIS', set_option=True)[source]¶; For PsiAPI mode, forms a basis specification function from block; and associates it with keyword key under handle name. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see mints2, mints9, and cc54 test cases. Unless; set_option is False, name will be set as current active key,; equivalent to set key name or set_option({key: name}). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.basis_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.basis_helper.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:7739,Availability,avail,available,7739,"' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_h",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:7775,Availability,avail,available,7775,"of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:11931,Deployability,update,updated,11931,"ated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:199,Energy Efficiency,energy,energy,199,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:415,Energy Efficiency,energy,energy,415,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:818,Energy Efficiency,energy,energy,818,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:948,Energy Efficiency,energy,energy,948,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:972,Energy Efficiency,energy,energy,972,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:1019,Energy Efficiency,energy,energy,1019,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:1797,Energy Efficiency,energy,energy,1797,"ENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right)\]. \[\delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right)\]. \[\delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:1807,Energy Efficiency,energy,energy,1807,"ENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right)\]. \[\delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right)\]. \[\delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:3660,Energy Efficiency,energy,energy,3660,"orl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step o",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:3708,Energy Efficiency,energy,energy,3708,"orl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step o",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:4459,Energy Efficiency,energy,energy,4459,"; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the referen",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:4661,Energy Efficiency,energy,energy,4661,"d to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to b",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:5122,Energy Efficiency,energy,energy,5122,"xt{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:5336,Energy Efficiency,energy,energy,5336," (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarro",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:5374,Energy Efficiency,energy,energy,5374," (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarro",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:5620,Energy Efficiency,energy,energy,5620,"; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string)",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:5660,Energy Efficiency,energy,energy,5660,"; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string)",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:5844,Energy Efficiency,energy,energy,5844,"t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:5907,Energy Efficiency,energy,energy,5907,"t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:6039,Energy Efficiency,energy,energy,6039,"cates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (ba",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:6102,Energy Efficiency,energy,energy,6102,"cates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (ba",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:6201,Energy Efficiency,energy,energy,6201,"ds supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation ener",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:6271,Energy Efficiency,energy,energy,6271,"ds supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation ener",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:6409,Energy Efficiency,energy,energy,6409,"in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Trans",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:6479,Energy Efficiency,energy,energy,6479,"in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Trans",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:6812,Energy Efficiency,energy,energy,6812,"(str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all availabl",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:7048,Energy Efficiency,energy,energy,7048,"ndicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_hel",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:7231,Energy Efficiency,energy,energy,7231,"e (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highe",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:7422,Energy Efficiency,energy,energy,7422,"' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:7462,Energy Efficiency,energy,energy,7462,"y is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_x",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:7985,Energy Efficiency,energy,energy,7985,"c-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:8457,Energy Efficiency,energy,energy,8457,"n energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molec",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:8826,Energy Efficiency,energy,energy,8826,"ailable schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2');",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:9204,Energy Efficiency,energy,energy,9204,"tpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:9597,Energy Efficiency,energy,energy,9597,"highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtp",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:9616,Energy Efficiency,energy,energy,9616,"highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtp",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:9763,Energy Efficiency,energy,energy,9763,"rapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:9782,Energy Efficiency,energy,energy,9782,"rapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:9883,Energy Efficiency,energy,energy,9883,"elta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z',",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:9895,Energy Efficiency,energy,energy,9895,"elta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z',",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:10027,Energy Efficiency,energy,energy,10027,"corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, correct",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:10063,Energy Efficiency,energy,energy,10063,"corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, correct",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:10255,Energy Efficiency,energy,energy,10255,"d interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_c",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:10309,Energy Efficiency,energy,energy,10309,"d interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_c",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:10422,Energy Efficiency,energy,energy,10422,"d interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_c",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:10734,Energy Efficiency,energy,energy,10734," corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. module",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:10770,Energy Efficiency,energy,energy,10770," corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. module",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:11172,Energy Efficiency,energy,energy,11172,"ated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:9376,Integrability,interface,interface,9376,".; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn=",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:439,Modifiability,variab,variables,439,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:5163,Performance,perform,performed,5163,"xt{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:11644,Performance,optimiz,optimize,11644,"ated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:11665,Performance,optimiz,optimize,11665,"ated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:9543,Usability,simpl,simple,9543,"highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtp",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:9701,Usability,simpl,simple,9701,"rapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:7739,Availability,avail,available,7739,"' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_h",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:7775,Availability,avail,available,7775,"of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:11931,Deployability,update,updated,11931,"ated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:199,Energy Efficiency,energy,energy,199,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:415,Energy Efficiency,energy,energy,415,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:818,Energy Efficiency,energy,energy,818,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:948,Energy Efficiency,energy,energy,948,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:972,Energy Efficiency,energy,energy,972,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:1019,Energy Efficiency,energy,energy,1019,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:1797,Energy Efficiency,energy,energy,1797,"ENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right)\]. \[\delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right)\]. \[\delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:1807,Energy Efficiency,energy,energy,1807,"ENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right)\]. \[\delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right)\]. \[\delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:3660,Energy Efficiency,energy,energy,3660,"orl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step o",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:3708,Energy Efficiency,energy,energy,3708,"orl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step o",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:4459,Energy Efficiency,energy,energy,4459,"; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the referen",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:4661,Energy Efficiency,energy,energy,4661,"d to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to b",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:5122,Energy Efficiency,energy,energy,5122,"xt{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:5336,Energy Efficiency,energy,energy,5336," (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarro",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:5374,Energy Efficiency,energy,energy,5374," (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarro",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:5620,Energy Efficiency,energy,energy,5620,"; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string)",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:5660,Energy Efficiency,energy,energy,5660,"; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string)",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:5844,Energy Efficiency,energy,energy,5844,"t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:5907,Energy Efficiency,energy,energy,5907,"t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:6039,Energy Efficiency,energy,energy,6039,"cates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (ba",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:6102,Energy Efficiency,energy,energy,6102,"cates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (ba",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:6201,Energy Efficiency,energy,energy,6201,"ds supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation ener",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:6271,Energy Efficiency,energy,energy,6271,"ds supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation ener",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:6409,Energy Efficiency,energy,energy,6409,"in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Trans",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:6479,Energy Efficiency,energy,energy,6479,"in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Trans",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:6812,Energy Efficiency,energy,energy,6812,"(str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all availabl",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:7048,Energy Efficiency,energy,energy,7048,"ndicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_hel",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:7231,Energy Efficiency,energy,energy,7231,"e (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highe",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:7422,Energy Efficiency,energy,energy,7422,"' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:7462,Energy Efficiency,energy,energy,7462,"y is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_x",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:7985,Energy Efficiency,energy,energy,7985,"c-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:8457,Energy Efficiency,energy,energy,8457,"n energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molec",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:8826,Energy Efficiency,energy,energy,8826,"ailable schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2');",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:9204,Energy Efficiency,energy,energy,9204,"tpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:9597,Energy Efficiency,energy,energy,9597,"highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtp",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:9616,Energy Efficiency,energy,energy,9616,"highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtp",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:9763,Energy Efficiency,energy,energy,9763,"rapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:9782,Energy Efficiency,energy,energy,9782,"rapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:9883,Energy Efficiency,energy,energy,9883,"elta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z',",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:9895,Energy Efficiency,energy,energy,9895,"elta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z',",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:10027,Energy Efficiency,energy,energy,10027,"corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, correct",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:10063,Energy Efficiency,energy,energy,10063,"corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, correct",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:10255,Energy Efficiency,energy,energy,10255,"d interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_c",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:10309,Energy Efficiency,energy,energy,10309,"d interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_c",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:10422,Energy Efficiency,energy,energy,10422,"d interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_c",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:10734,Energy Efficiency,energy,energy,10734," corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. module",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:10770,Energy Efficiency,energy,energy,10770," corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. module",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:11172,Energy Efficiency,energy,energy,11172,"ated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:9376,Integrability,interface,interface,9376,".; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn=",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:439,Modifiability,variab,variables,439,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:5163,Performance,perform,performed,5163,"xt{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:11644,Performance,optimiz,optimize,11644,"ated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:11665,Performance,optimiz,optimize,11665,"ated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:9543,Usability,simpl,simple,9543,"highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtp",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html:9701,Usability,simpl,simple,9701,"rapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. Combined interface. Others. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.check_iwl_file_from_scf_type-1.html:480,Deployability,update,updated,480,"﻿. check_iwl_file_from_scf_type. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. check_iwl_file_from_scf_type¶. psi4.driver.check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.check_iwl_file_from_scf_type-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.check_iwl_file_from_scf_type-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.check_iwl_file_from_scf_type.html:480,Deployability,update,updated,480,"﻿. check_iwl_file_from_scf_type. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. check_iwl_file_from_scf_type¶. psi4.driver.check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.check_iwl_file_from_scf_type.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.check_iwl_file_from_scf_type.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_arrays-1.html:400,Availability,failure,failure,400,"﻿. compare_arrays. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_arrays¶. psi4.driver.compare_arrays(expected, computed, digits, label, rtol=1e-16)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:; absolute(computed - expected) <= (atol + rtol * absolute(expected)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_arrays-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_arrays-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_arrays-1.html:832,Deployability,update,updated,832,"﻿. compare_arrays. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_arrays¶. psi4.driver.compare_arrays(expected, computed, digits, label, rtol=1e-16)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:; absolute(computed - expected) <= (atol + rtol * absolute(expected)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_arrays-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_arrays-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_arrays-1.html:495,Testability,test,test,495,"﻿. compare_arrays. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_arrays¶. psi4.driver.compare_arrays(expected, computed, digits, label, rtol=1e-16)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:; absolute(computed - expected) <= (atol + rtol * absolute(expected)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_arrays-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_arrays-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_arrays.html:400,Availability,failure,failure,400,"﻿. compare_arrays. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_arrays¶. psi4.driver.compare_arrays(expected, computed, digits, label, rtol=1e-16)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:; absolute(computed - expected) <= (atol + rtol * absolute(expected)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_arrays.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_arrays.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_arrays.html:832,Deployability,update,updated,832,"﻿. compare_arrays. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_arrays¶. psi4.driver.compare_arrays(expected, computed, digits, label, rtol=1e-16)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:; absolute(computed - expected) <= (atol + rtol * absolute(expected)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_arrays.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_arrays.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_arrays.html:495,Testability,test,test,495,"﻿. compare_arrays. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_arrays¶. psi4.driver.compare_arrays(expected, computed, digits, label, rtol=1e-16)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:; absolute(computed - expected) <= (atol + rtol * absolute(expected)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_arrays.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_arrays.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_csx-1.html:450,Deployability,update,updated,450,"﻿. compare_csx. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_csx¶. psi4.driver.compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_csx-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_csx-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_csx-1.html:182,Security,validat,validate,182,"﻿. compare_csx. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_csx¶. psi4.driver.compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_csx-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_csx-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_csx.html:450,Deployability,update,updated,450,"﻿. compare_csx. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_csx¶. psi4.driver.compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_csx.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_csx.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_csx.html:182,Security,validat,validate,182,"﻿. compare_csx. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_csx¶. psi4.driver.compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_csx.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_csx.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_cubes-1.html:331,Availability,failure,failure,331,"﻿. compare_cubes. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_cubes¶. psi4.driver.compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_cubes-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_cubes-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_cubes-1.html:559,Deployability,update,updated,559,"﻿. compare_cubes. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_cubes¶. psi4.driver.compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_cubes-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_cubes-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_cubes-1.html:367,Testability,test,test,367,"﻿. compare_cubes. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_cubes¶. psi4.driver.compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_cubes-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_cubes-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_cubes.html:331,Availability,failure,failure,331,"﻿. compare_cubes. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_cubes¶. psi4.driver.compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_cubes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_cubes.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_cubes.html:559,Deployability,update,updated,559,"﻿. compare_cubes. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_cubes¶. psi4.driver.compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_cubes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_cubes.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_cubes.html:367,Testability,test,test,367,"﻿. compare_cubes. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_cubes¶. psi4.driver.compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_cubes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_cubes.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html:343,Availability,failure,failure,343,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html:1039,Deployability,update,updated,1039,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html:546,Energy Efficiency,energy,energy,546,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html:595,Energy Efficiency,energy,energy,595,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html:644,Energy Efficiency,energy,energy,644,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html:683,Energy Efficiency,energy,energy,683,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html:734,Energy Efficiency,energy,energy,734,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html:379,Testability,test,test,379,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html:853,Testability,test,test,853,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html:343,Availability,failure,failure,343,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html:1039,Deployability,update,updated,1039,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html:546,Energy Efficiency,energy,energy,546,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html:595,Energy Efficiency,energy,energy,595,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html:644,Energy Efficiency,energy,energy,644,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html:683,Energy Efficiency,energy,energy,683,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html:734,Energy Efficiency,energy,energy,734,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html:379,Testability,test,test,379,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html:853,Testability,test,test,853,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Function to compare two FCIDUMP files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. Returns:a dictionary of energies computed from the MO integrals. The key-value pairs are:. ‘NUCLEAR REPULSION ENERGY’ : nuclear repulsion plus frozen core energy; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:; expected – reference FCIDUMP file; computed – computed FCIDUMP file; label – string labelling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_integers-1.html:338,Availability,failure,failure,338,"﻿. compare_integers. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_integers¶. psi4.driver.compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_integers-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_integers-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_integers-1.html:566,Deployability,update,updated,566,"﻿. compare_integers. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_integers¶. psi4.driver.compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_integers-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_integers-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_integers-1.html:374,Testability,test,test,374,"﻿. compare_integers. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_integers¶. psi4.driver.compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_integers-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_integers-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_integers.html:338,Availability,failure,failure,338,"﻿. compare_integers. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_integers¶. psi4.driver.compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_integers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_integers.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_integers.html:566,Deployability,update,updated,566,"﻿. compare_integers. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_integers¶. psi4.driver.compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_integers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_integers.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_integers.html:374,Testability,test,test,374,"﻿. compare_integers. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_integers¶. psi4.driver.compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_integers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_integers.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_matrices-1.html:390,Availability,failure,failure,390,"﻿. compare_matrices. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_matrices¶. psi4.driver.compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_matrices-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_matrices-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_matrices-1.html:678,Deployability,update,updated,678,"﻿. compare_matrices. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_matrices¶. psi4.driver.compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_matrices-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_matrices-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_matrices-1.html:486,Testability,test,test,486,"﻿. compare_matrices. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_matrices¶. psi4.driver.compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_matrices-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_matrices-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_matrices.html:390,Availability,failure,failure,390,"﻿. compare_matrices. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_matrices¶. psi4.driver.compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_matrices.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_matrices.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_matrices.html:678,Deployability,update,updated,678,"﻿. compare_matrices. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_matrices¶. psi4.driver.compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_matrices.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_matrices.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_matrices.html:486,Testability,test,test,486,"﻿. compare_matrices. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_matrices¶. psi4.driver.compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_matrices.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_matrices.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_strings-1.html:344,Availability,failure,failure,344,"﻿. compare_strings. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_strings¶. psi4.driver.compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_strings-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_strings-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_strings-1.html:572,Deployability,update,updated,572,"﻿. compare_strings. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_strings¶. psi4.driver.compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_strings-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_strings-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_strings-1.html:380,Testability,test,test,380,"﻿. compare_strings. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_strings¶. psi4.driver.compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_strings-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_strings-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_strings.html:344,Availability,failure,failure,344,"﻿. compare_strings. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_strings¶. psi4.driver.compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_strings.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_strings.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_strings.html:572,Deployability,update,updated,572,"﻿. compare_strings. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_strings¶. psi4.driver.compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_strings.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_strings.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_strings.html:380,Testability,test,test,380,"﻿. compare_strings. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_strings¶. psi4.driver.compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_strings.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_strings.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values-1.html:431,Availability,failure,failure,431,"﻿. compare_values. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_values¶. psi4.driver.compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits < 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_values-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values-1.html:487,Availability,error,error,487,"﻿. compare_values. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_values¶. psi4.driver.compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits < 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_values-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values-1.html:721,Deployability,update,updated,721,"﻿. compare_values. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_values¶. psi4.driver.compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits < 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_values-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values-1.html:493,Integrability,message,message,493,"﻿. compare_values. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_values¶. psi4.driver.compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits < 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_values-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values-1.html:529,Testability,test,test,529,"﻿. compare_values. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_values¶. psi4.driver.compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits < 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_values-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values.html:431,Availability,failure,failure,431,"﻿. compare_values. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_values¶. psi4.driver.compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits < 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_values.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values.html:487,Availability,error,error,487,"﻿. compare_values. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_values¶. psi4.driver.compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits < 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_values.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values.html:721,Deployability,update,updated,721,"﻿. compare_values. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_values¶. psi4.driver.compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits < 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_values.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values.html:493,Integrability,message,message,493,"﻿. compare_values. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_values¶. psi4.driver.compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits < 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_values.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values.html:529,Testability,test,test,529,"﻿. compare_values. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_values¶. psi4.driver.compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits < 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_values.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_values.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_vectors-1.html:386,Availability,failure,failure,386,"﻿. compare_vectors. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_vectors¶. psi4.driver.compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_vectors-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_vectors-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_vectors-1.html:673,Deployability,update,updated,673,"﻿. compare_vectors. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_vectors¶. psi4.driver.compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_vectors-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_vectors-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_vectors-1.html:481,Testability,test,test,481,"﻿. compare_vectors. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_vectors¶. psi4.driver.compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_vectors-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_vectors-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_vectors.html:386,Availability,failure,failure,386,"﻿. compare_vectors. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_vectors¶. psi4.driver.compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_vectors.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_vectors.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_vectors.html:673,Deployability,update,updated,673,"﻿. compare_vectors. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_vectors¶. psi4.driver.compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_vectors.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_vectors.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_vectors.html:481,Testability,test,test,481,"﻿. compare_vectors. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_vectors¶. psi4.driver.compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_vectors.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_vectors.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions-1.html:390,Availability,failure,failure,390,"﻿. compare_wavefunctions. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_wavefunctions¶. psi4.driver.compare_wavefunctions(expected, computed, digits=9, label='Wavefunctions equal')[source]¶; Function to compare two wavefunctions. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions-1.html:618,Deployability,update,updated,618,"﻿. compare_wavefunctions. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_wavefunctions¶. psi4.driver.compare_wavefunctions(expected, computed, digits=9, label='Wavefunctions equal')[source]¶; Function to compare two wavefunctions. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions-1.html:426,Testability,test,test,426,"﻿. compare_wavefunctions. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_wavefunctions¶. psi4.driver.compare_wavefunctions(expected, computed, digits=9, label='Wavefunctions equal')[source]¶; Function to compare two wavefunctions. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions.html:390,Availability,failure,failure,390,"﻿. compare_wavefunctions. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_wavefunctions¶. psi4.driver.compare_wavefunctions(expected, computed, digits=9, label='Wavefunctions equal')[source]¶; Function to compare two wavefunctions. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions.html:618,Deployability,update,updated,618,"﻿. compare_wavefunctions. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_wavefunctions¶. psi4.driver.compare_wavefunctions(expected, computed, digits=9, label='Wavefunctions equal')[source]¶; Function to compare two wavefunctions. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions.html:426,Testability,test,test,426,"﻿. compare_wavefunctions. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. compare_wavefunctions¶. psi4.driver.compare_wavefunctions(expected, computed, digits=9, label='Wavefunctions equal')[source]¶; Function to compare two wavefunctions. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.compare_wavefunctions.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.convergenceerror.html:752,Deployability,update,updated,752,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration)[source]¶; Bases: psi4.driver.p4util.exceptions.PsiException; Error called for problems with converging and iterative method. Parameters:; eqn_description (str) – Type of QC routine that has failed (e.g., SCF); iteration (int) – What iteration we failed on. args¶. with_traceback()¶; Exception.with_traceback(tb) –; set self.__traceback__ to tb and return self. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.convergenceerror.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.convergenceerror.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.convergenceerror.html:384,Integrability,rout,routine,384,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration)[source]¶; Bases: psi4.driver.p4util.exceptions.PsiException; Error called for problems with converging and iterative method. Parameters:; eqn_description (str) – Type of QC routine that has failed (e.g., SCF); iteration (int) – What iteration we failed on. args¶. with_traceback()¶; Exception.with_traceback(tb) –; set self.__traceback__ to tb and return self. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.convergenceerror.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.convergenceerror.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.copy_file_from_scratch-1.html:1186,Deployability,update,updated,1186,"﻿. copy_file_from_scratch. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. copy_file_from_scratch¶. psi4.driver.copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /scratch/parrish/psi.12345.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /scratch/parrish/psi.12345.32 /tmp/temp. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.copy_file_from_scratch-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.copy_file_from_scratch-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.copy_file_from_scratch.html:1186,Deployability,update,updated,1186,"﻿. copy_file_from_scratch. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. copy_file_from_scratch¶. psi4.driver.copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /scratch/parrish/psi.12345.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /scratch/parrish/psi.12345.32 /tmp/temp. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.copy_file_from_scratch.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.copy_file_from_scratch.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.copy_file_to_scratch-1.html:1172,Deployability,update,updated,1172,"﻿. copy_file_to_scratch. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. copy_file_to_scratch¶. psi4.driver.copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file into scratch with correct naming; convention.; Arguments:; @arg filename full path to file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp ./temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /tmp/temp /scratch/parrish/psi.12345.32. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.copy_file_to_scratch-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.copy_file_to_scratch-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.copy_file_to_scratch.html:1172,Deployability,update,updated,1172,"﻿. copy_file_to_scratch. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. copy_file_to_scratch¶. psi4.driver.copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file into scratch with correct naming; convention.; Arguments:; @arg filename full path to file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp ./temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /tmp/temp /scratch/parrish/psi.12345.32. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.copy_file_to_scratch.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.copy_file_to_scratch.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.create_plugin-1.html:440,Deployability,update,updated,440,"﻿. create_plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. create_plugin¶. psi4.driver.create_plugin(name, template)[source]¶; Generate plugin in directory with sanitized name based upon template. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.create_plugin-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.create_plugin-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.create_plugin-1.html:199,Modifiability,plugin,plugin,199,"﻿. create_plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. create_plugin¶. psi4.driver.create_plugin(name, template)[source]¶; Generate plugin in directory with sanitized name based upon template. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.create_plugin-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.create_plugin-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.create_plugin-1.html:224,Security,sanitiz,sanitized,224,"﻿. create_plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. create_plugin¶. psi4.driver.create_plugin(name, template)[source]¶; Generate plugin in directory with sanitized name based upon template. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.create_plugin-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.create_plugin-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.create_plugin.html:440,Deployability,update,updated,440,"﻿. create_plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. create_plugin¶. psi4.driver.create_plugin(name, template)[source]¶; Generate plugin in directory with sanitized name based upon template. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.create_plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.create_plugin.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.create_plugin.html:199,Modifiability,plugin,plugin,199,"﻿. create_plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. create_plugin¶. psi4.driver.create_plugin(name, template)[source]¶; Generate plugin in directory with sanitized name based upon template. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.create_plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.create_plugin.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.create_plugin.html:224,Security,sanitiz,sanitized,224,"﻿. create_plugin. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. create_plugin¶. psi4.driver.create_plugin(name, template)[source]¶; Generate plugin in directory with sanitized name based upon template. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.create_plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.create_plugin.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.csx2endict-1.html:268,Availability,avail,available,268,"﻿. csx2endict. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. csx2endict¶. psi4.driver.csx2endict()[source]¶; Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.csx2endict-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.csx2endict-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.csx2endict-1.html:508,Deployability,update,updated,508,"﻿. csx2endict. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. csx2endict¶. psi4.driver.csx2endict()[source]¶; Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.csx2endict-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.csx2endict-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.csx2endict-1.html:230,Modifiability,variab,variables,230,"﻿. csx2endict. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. csx2endict¶. psi4.driver.csx2endict()[source]¶; Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.csx2endict-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.csx2endict-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.csx2endict.html:268,Availability,avail,available,268,"﻿. csx2endict. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. csx2endict¶. psi4.driver.csx2endict()[source]¶; Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.csx2endict.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.csx2endict.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.csx2endict.html:508,Deployability,update,updated,508,"﻿. csx2endict. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. csx2endict¶. psi4.driver.csx2endict()[source]¶; Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.csx2endict.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.csx2endict.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.csx2endict.html:230,Modifiability,variab,variables,230,"﻿. csx2endict. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. csx2endict¶. psi4.driver.csx2endict()[source]¶; Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.csx2endict.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.csx2endict.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.csxerror.html:549,Deployability,update,updated,549,"﻿. CSXError. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. CSXError¶. exception psi4.driver.CSXError(msg)[source]¶; Bases: psi4.driver.p4util.exceptions.PsiException; Error called when CSX generation fails. args¶. with_traceback()¶; Exception.with_traceback(tb) –; set self.__traceback__ to tb and return self. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.csxerror.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.csxerror.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cubeprop-1.html:954,Deployability,update,updated,954,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cubeprop¶. psi4.driver.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cubeprop-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cubeprop-1.html:459,Energy Efficiency,energy,energy,459,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cubeprop¶. psi4.driver.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cubeprop-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cubeprop-1.html:723,Energy Efficiency,energy,energy,723,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cubeprop¶. psi4.driver.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cubeprop-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cubeprop.html:954,Deployability,update,updated,954,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cubeprop¶. psi4.driver.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cubeprop.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cubeprop.html:459,Energy Efficiency,energy,energy,459,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cubeprop¶. psi4.driver.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cubeprop.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cubeprop.html:723,Energy Efficiency,energy,energy,723,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. cubeprop¶. psi4.driver.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cubeprop.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.dftd3error.html:515,Deployability,update,updated,515,"﻿. Dftd3Error. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. Dftd3Error¶. exception psi4.driver.Dftd3Error(msg)[source]¶; Bases: psi4.driver.p4util.exceptions.PsiException. args¶. with_traceback()¶; Exception.with_traceback(tb) –; set self.__traceback__ to tb and return self. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.dftd3error.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.dftd3error.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.dynamic_variable_bind-1.html:454,Deployability,update,updated,454,"﻿. dynamic_variable_bind. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. dynamic_variable_bind¶. psi4.driver.dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the core.Molecule class. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.dynamic_variable_bind-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.dynamic_variable_bind-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.dynamic_variable_bind.html:454,Deployability,update,updated,454,"﻿. dynamic_variable_bind. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. dynamic_variable_bind¶. psi4.driver.dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the core.Molecule class. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.dynamic_variable_bind.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.dynamic_variable_bind.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html:2924,Availability,error,error,2924,"present for engine=libdisp. Psi4 class instance prepared; to compute dispersion. Type:psi4.core.Dispersion. ordered_params¶; Fixed-order list of relevant parameters for dashlevel. Matches; DFT_DISPERSION_PARAMETERS ordering. Used for printing. Type:list. Parameters:; name_hint (str, optional) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; dashcoeff[dashlevel][functional-without-dashlevel] or; dashcoeff_supplement[dashlevel][functional-with-dashlevel]; can be overwritten via `param_tweaks.; level_hint (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; param_tweaks (list or dict, optional) – Values for the same keys as dashcoeff[dashlevel][‘default’]; (and same order if list) used to override any or all values; initialized by name_hint. Extra parameters will error.; engine (str, optional) – Override which code computes dispersion. See above for allowed; values. Really only relevant for -D2, which can be computed by; libdisp or dftd3. Methods Summary. compute_energy(molecule); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:Dispersion energy [Eh]. Return type:float. Notes. DISPERSION CORRECTION ENERGY; Disp always set. Overridden in SCF finalization, but th",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html:6219,Deployability,update,updated,6219,"0]. Return type:psi4.core.Matrix. compute_hessian(molecule)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:(3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. Return type:psi4.core.Matrix. print_out()[source]¶; Format dispersion parameters of self for output file. compute_energy(molecule)[source]; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:Dispersion energy [Eh]. Return type:float. Notes. DISPERSION CORRECTION ENERGY; Disp always set. Overridden in SCF finalization, but that only changes for “-3C” methods.; self.fctldash + DISPERSION CORRECTION ENERGY; Set if fctldash nonempty. compute_gradient(molecule)[source]; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:(nat, 3) dispersion gradient [Eh/a0]. Return type:psi4.core.Matrix. compute_hessian(molecule)[source]; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:(3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. Return type:psi4.core.Matrix. print_out()[source]; Format dispersion parameters of self for output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html:3165,Energy Efficiency,energy,energy,3165,"meters:; name_hint (str, optional) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; dashcoeff[dashlevel][functional-without-dashlevel] or; dashcoeff_supplement[dashlevel][functional-with-dashlevel]; can be overwritten via `param_tweaks.; level_hint (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; param_tweaks (list or dict, optional) – Values for the same keys as dashcoeff[dashlevel][‘default’]; (and same order if list) used to override any or all values; initialized by name_hint. Extra parameters will error.; engine (str, optional) – Override which code computes dispersion. See above for allowed; values. Really only relevant for -D2, which can be computed by; libdisp or dftd3. Methods Summary. compute_energy(molecule); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:Dispersion energy [Eh]. Return type:float. Notes. DISPERSION CORRECTION ENERGY; Disp always set. Overridden in SCF finalization, but that only changes for “-3C” methods.; self.fctldash + DISPERSION CORRECTION ENERGY; Set if fctldash nonempty. compute_gradient(molecule)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.c",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html:3603,Energy Efficiency,energy,energy,3603," to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; param_tweaks (list or dict, optional) – Values for the same keys as dashcoeff[dashlevel][‘default’]; (and same order if list) used to override any or all values; initialized by name_hint. Extra parameters will error.; engine (str, optional) – Override which code computes dispersion. See above for allowed; values. Really only relevant for -D2, which can be computed by; libdisp or dftd3. Methods Summary. compute_energy(molecule); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:Dispersion energy [Eh]. Return type:float. Notes. DISPERSION CORRECTION ENERGY; Disp always set. Overridden in SCF finalization, but that only changes for “-3C” methods.; self.fctldash + DISPERSION CORRECTION ENERGY; Set if fctldash nonempty. compute_gradient(molecule)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:(nat, 3) dispersion gradient [Eh/a0]. Return type:psi4.core.Matrix. compute_hessian(molecule)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:molecule (psi4.core.Molecule) – System for which to compute empir",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html:3792,Energy Efficiency,energy,energy,3792,"eff[dashlevel][‘default’]; (and same order if list) used to override any or all values; initialized by name_hint. Extra parameters will error.; engine (str, optional) – Override which code computes dispersion. See above for allowed; values. Really only relevant for -D2, which can be computed by; libdisp or dftd3. Methods Summary. compute_energy(molecule); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:Dispersion energy [Eh]. Return type:float. Notes. DISPERSION CORRECTION ENERGY; Disp always set. Overridden in SCF finalization, but that only changes for “-3C” methods.; self.fctldash + DISPERSION CORRECTION ENERGY; Set if fctldash nonempty. compute_gradient(molecule)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:(nat, 3) dispersion gradient [Eh/a0]. Return type:psi4.core.Matrix. compute_hessian(molecule)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:(3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. Return type:psi4.core.Matrix. print_out()[source]¶; Format dispersion parameters of self for outpu",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html:4849,Energy Efficiency,energy,energy,4849,"NERGY; Disp always set. Overridden in SCF finalization, but that only changes for “-3C” methods.; self.fctldash + DISPERSION CORRECTION ENERGY; Set if fctldash nonempty. compute_gradient(molecule)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:(nat, 3) dispersion gradient [Eh/a0]. Return type:psi4.core.Matrix. compute_hessian(molecule)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:(3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. Return type:psi4.core.Matrix. print_out()[source]¶; Format dispersion parameters of self for output file. compute_energy(molecule)[source]; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:Dispersion energy [Eh]. Return type:float. Notes. DISPERSION CORRECTION ENERGY; Disp always set. Overridden in SCF finalization, but that only changes for “-3C” methods.; self.fctldash + DISPERSION CORRECTION ENERGY; Set if fctldash nonempty. compute_gradient(molecule)[source]; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:(nat, 3) dispersion gradient [Eh/a0]. Return type:psi4.core.Matrix. compute_hessian(molecule)[source]; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirica",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html:5038,Energy Efficiency,energy,energy,5038,"adient(molecule)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:(nat, 3) dispersion gradient [Eh/a0]. Return type:psi4.core.Matrix. compute_hessian(molecule)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:(3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. Return type:psi4.core.Matrix. print_out()[source]¶; Format dispersion parameters of self for output file. compute_energy(molecule)[source]; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:Dispersion energy [Eh]. Return type:float. Notes. DISPERSION CORRECTION ENERGY; Disp always set. Overridden in SCF finalization, but that only changes for “-3C” methods.; self.fctldash + DISPERSION CORRECTION ENERGY; Set if fctldash nonempty. compute_gradient(molecule)[source]; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:(nat, 3) dispersion gradient [Eh/a0]. Return type:psi4.core.Matrix. compute_hessian(molecule)[source]; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:molecule (psi4.core.Molecule) – System for which to compute empirical dispersion correction. Returns:(3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. Return type:psi4.core.Matrix. print_out()[source]; Format dispersion parameters of self for output f",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html:677,Modifiability,flexible,flexible,677,"﻿. EmpiricalDispersion. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. EmpiricalDispersion¶. class psi4.driver.EmpiricalDispersion(name_hint=None, level_hint=None, param_tweaks=None, **kwargs)[source]¶; Bases: object; Lightweight unification of empirical dispersion calculation modes. dashlevel¶; Name of dispersion correction to be applied. Resolved; from name_hint and/or level_hint into a key of; dashparam.dashcoeff. Type:{‘d1’, ‘d2’, ‘d3zero’, ‘d3bj’, ‘d3mzero’, ‘d3mbj’, ‘chg’, ‘das2009’, ‘das2010’, ‘nl’}. dashparams¶; Complete (number and parameter names vary by dashlevel); set of parameter values defining the flexible parts; of dashlevel. Resolved into a complete set (keys of; dashcoeff[dashlevel][‘default’]) from name_hint and/or; dashcoeff_supplement and/or user param_tweaks. Type:dict. fctldash¶; If dashparams for dashlevel corresponds to a defined,; named, untweaked “functional-dashlevel” set, then that; functional. Otherwise, empty string. Type:str. description¶; Tagline for dispersion dashlevel. Type:str. dashlevel_citation¶; Literature reference for dispersion dashlevel in general,; not necessarily for dashparams. Type:str. dashparams_citation¶; Literature reference for dispersion parameters, if dashparams; corresponds to a defined, named, untweaked “functional-dashlevel”; set with a citation. Otherwise, empty string. Type:str. dashcoeff_supplement¶; See description in qcdb.intf_dftd3.dashparam.from_arrays. Used; here to “bless” the dispersion definitions attached to; the procedures/dft/*_functionals-defined dictionaries; as legit, non-custom, and of equal validity to; qcdb.intf_dftd3.dashparam.dashcoeff itself for purposes of; validating fctldash. Type:dict. engine¶; Compute engine for dispersion. One of Psi4’s internal libdisp; library, Grimme’s DFTD3 executable, or nl. Type:{‘libdisp’, ‘dftd3’, ‘nl’}. disp¶; Only present for engine=libdisp. Psi4 class instance prepared; to compute dispersion. Type:",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html:1723,Security,validat,validating,1723,"into a complete set (keys of; dashcoeff[dashlevel][‘default’]) from name_hint and/or; dashcoeff_supplement and/or user param_tweaks. Type:dict. fctldash¶; If dashparams for dashlevel corresponds to a defined,; named, untweaked “functional-dashlevel” set, then that; functional. Otherwise, empty string. Type:str. description¶; Tagline for dispersion dashlevel. Type:str. dashlevel_citation¶; Literature reference for dispersion dashlevel in general,; not necessarily for dashparams. Type:str. dashparams_citation¶; Literature reference for dispersion parameters, if dashparams; corresponds to a defined, named, untweaked “functional-dashlevel”; set with a citation. Otherwise, empty string. Type:str. dashcoeff_supplement¶; See description in qcdb.intf_dftd3.dashparam.from_arrays. Used; here to “bless” the dispersion definitions attached to; the procedures/dft/*_functionals-defined dictionaries; as legit, non-custom, and of equal validity to; qcdb.intf_dftd3.dashparam.dashcoeff itself for purposes of; validating fctldash. Type:dict. engine¶; Compute engine for dispersion. One of Psi4’s internal libdisp; library, Grimme’s DFTD3 executable, or nl. Type:{‘libdisp’, ‘dftd3’, ‘nl’}. disp¶; Only present for engine=libdisp. Psi4 class instance prepared; to compute dispersion. Type:psi4.core.Dispersion. ordered_params¶; Fixed-order list of relevant parameters for dashlevel. Matches; DFT_DISPERSION_PARAMETERS ordering. Used for printing. Type:list. Parameters:; name_hint (str, optional) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; dashcoeff[dashlevel][functional-without-dashlevel] or; dashcoeff_supplement[dashlevel][functional-with-dashlevel]; can be overwritten via `param_tweaks.; level_hint (str, optional) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; pa",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.empiricaldispersion.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energies_from_fcidump-1.html:387,Deployability,update,updated,387,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energies_from_fcidump¶. psi4.driver.energies_from_fcidump(intdump)[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energies_from_fcidump-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energies_from_fcidump-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energies_from_fcidump.html:387,Deployability,update,updated,387,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energies_from_fcidump¶. psi4.driver.energies_from_fcidump(intdump)[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energies_from_fcidump.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:4550,Deployability,configurat,configuration,4550,"inear CCD [manual] [details]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. ccsd(at); CCSD with asymmetric perturbative triples (CCSD(AT)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual]. ccenergy; expert full control over ccenergy module. dfocc; expert full control over dfocc module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual]. fci; full configuration interaction (FCI) [manual]. detci; expert full control over detci module. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. dmrg-scf; density matrix renormalization group SCF [manual]. dmrg-caspt2; density matrix renormalization group CASPT2 [manual]. dmrg-ci; density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramole",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:4850,Deployability,configurat,configuration,4850,"(CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. ccsd(at); CCSD with asymmetric perturbative triples (CCSD(AT)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual]. ccenergy; expert full control over ccenergy module. dfocc; expert full control over dfocc module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual]. fci; full configuration interaction (FCI) [manual]. detci; expert full control over detci module. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. dmrg-scf; density matrix renormalization group SCF [manual]. dmrg-caspt2; density matrix renormalization group CASPT2 [manual]. dmrg-ci; density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispe",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:21815,Deployability,update,updated,21815,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:3,Energy Efficiency,energy,energy,3,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:115,Energy Efficiency,energy,energy,115,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:136,Energy Efficiency,energy,energy,136,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:217,Energy Efficiency,energy,energy,217,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:258,Energy Efficiency,energy,energy,258,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:308,Energy Efficiency,energy,energy,308,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:348,Energy Efficiency,energy,energy,348,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:910,Energy Efficiency,energy,energy,910,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:5431,Energy Efficiency,adapt,adapted,5431,"nual]. ccenergy; expert full control over ccenergy module. dfocc; expert full control over dfocc module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual]. fci; full configuration interaction (FCI) [manual]. detci; expert full control over detci module. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. dmrg-scf; density matrix renormalization group SCF [manual]. dmrg-caspt2; density matrix renormalization group CASPT2 [manual]. dmrg-ci; density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispersion [manual]. sapt2+(3)(ccd); SAPT2+(3) with CC-based dispersion [manual]. sapt2+3(ccd); SAPT2+3 with CC-based dispersion [manual]. sapt2+dmp2; SAPT including all 2nd-order terms and MP2 correction [manual]. sapt2+(3)dmp2; SAPT including perturbative triples and MP2 correction [manual]. sapt2+3dmp2; SAPT including all 3rd-order terms and MP2 correction [manual]. sapt2+(ccd)dmp2; SAPT2+ with CC-based dispersion and MP2 correction [manual]. sapt2+(3)(ccd)dmp2; SAPT2+(3) with CC-based dispersion and MP2 correction [manual]. sapt2+3(ccd)dmp2; SAPT2+3 with CC-based disper",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:6504,Energy Efficiency,charge,charge,6504,"al exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispersion [manual]. sapt2+(3)(ccd); SAPT2+(3) with CC-based dispersion [manual]. sapt2+3(ccd); SAPT2+3 with CC-based dispersion [manual]. sapt2+dmp2; SAPT including all 2nd-order terms and MP2 correction [manual]. sapt2+(3)dmp2; SAPT including perturbative triples and MP2 correction [manual]. sapt2+3dmp2; SAPT including all 3rd-order terms and MP2 correction [manual]. sapt2+(ccd)dmp2; SAPT2+ with CC-based dispersion and MP2 correction [manual]. sapt2+(3)(ccd)dmp2; SAPT2+(3) with CC-based dispersion and MP2 correction [manual]. sapt2+3(ccd)dmp2; SAPT2+3 with CC-based dispersion and MP2 correction [manual]. sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation [manual]. sapt2-ct; SAPT2 plus CT [manual]. sapt2+-ct; SAPT2+ plus CT [manual]. sapt2+(3)-ct; SAPT2+(3) plus CT [manual]. sapt2+3-ct; SAPT2+3 plus CT [manual]. sapt2+(ccd)-ct; SAPT2+(CCD) plus CT [manual]. sapt2+(3)(ccd)-ct; SAPT2+(3)(CCD) plus CT [manual]. sapt2+3(ccd)-ct; SAPT2+3(CCD) plus CT [manual]. adc; 2nd-order algebraic diagrammatic construction (ADC) [manual]. eom-cc2; EOM-CC2 [manual]. eom-ccsd; equation of motion (EOM) CCSD [manual]. eom-cc3; EOM-CC3 [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj;  . b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b2gpplyp; B2GPPLYP Double Hybrid Exchange-Correlation Functional. b2gpplyp-d3bj;  . b2gpplyp-nl; B2GPPLYP Double Hybrid Exchange-Correlation Functional. b2plyp; B2PLYP Double Hybrid Exchange-Correlation Functional. b2plyp-d3bj;  . b2plyp-d3mbj;  . b2plyp-nl; B2PLYP Double Hybrid Exchan",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:20237,Energy Efficiency,energy,energy,20237,"sdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). mrccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). mrccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:20469,Energy Efficiency,energy,energy,20469,"st expensive terms). mrccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:20536,Energy Efficiency,energy,energy,20536,"nd Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for mo",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:20853,Energy Efficiency,energy,energy,20853,"cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:20971,Energy Efficiency,energy,energy,20971,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:21163,Energy Efficiency,energy,energy,21163,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:21200,Energy Efficiency,energy,energy,21200,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:21308,Energy Efficiency,energy,energy,21308,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:21556,Energy Efficiency,energy,energy,21556,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:403,Modifiability,variab,variables,403,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:4550,Modifiability,config,configuration,4550,"inear CCD [manual] [details]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. ccsd(at); CCSD with asymmetric perturbative triples (CCSD(AT)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual]. ccenergy; expert full control over ccenergy module. dfocc; expert full control over dfocc module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual]. fci; full configuration interaction (FCI) [manual]. detci; expert full control over detci module. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. dmrg-scf; density matrix renormalization group SCF [manual]. dmrg-caspt2; density matrix renormalization group CASPT2 [manual]. dmrg-ci; density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramole",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:4850,Modifiability,config,configuration,4850,"(CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. ccsd(at); CCSD with asymmetric perturbative triples (CCSD(AT)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual]. ccenergy; expert full control over ccenergy module. dfocc; expert full control over dfocc module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual]. fci; full configuration interaction (FCI) [manual]. detci; expert full control over detci module. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. dmrg-scf; density matrix renormalization group SCF [manual]. dmrg-caspt2; density matrix renormalization group CASPT2 [manual]. dmrg-ci; density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispe",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:5431,Modifiability,adapt,adapted,5431,"nual]. ccenergy; expert full control over ccenergy module. dfocc; expert full control over dfocc module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual]. fci; full configuration interaction (FCI) [manual]. detci; expert full control over detci module. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. dmrg-scf; density matrix renormalization group SCF [manual]. dmrg-caspt2; density matrix renormalization group CASPT2 [manual]. dmrg-ci; density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispersion [manual]. sapt2+(3)(ccd); SAPT2+(3) with CC-based dispersion [manual]. sapt2+3(ccd); SAPT2+3 with CC-based dispersion [manual]. sapt2+dmp2; SAPT including all 2nd-order terms and MP2 correction [manual]. sapt2+(3)dmp2; SAPT including perturbative triples and MP2 correction [manual]. sapt2+3dmp2; SAPT including all 3rd-order terms and MP2 correction [manual]. sapt2+(ccd)dmp2; SAPT2+ with CC-based dispersion and MP2 correction [manual]. sapt2+(3)(ccd)dmp2; SAPT2+(3) with CC-based dispersion and MP2 correction [manual]. sapt2+3(ccd)dmp2; SAPT2+3 with CC-based disper",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:2056,Performance,optimiz,optimized,2056,"fective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. scs-omp2; spin-component scaled OMP2 [manual]. scs(n)-omp2; a special version of SCS-OMP2 for nucleobase interactions [manual]. scs-omp2-vdw; a special version of SCS-OMP2 (from ethene dimers) [manual]. sos-omp2; spin-opposite scaled OMP2 [manual]. sos-pi-omp2; A special version of SOS-OMP2 for pi systems [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. scs-omp3; spin-component scaled OMP3 [manual]. scs(n)-omp3; a special version of SCS-OMP3 for nucleobase interactions [manual]. scs-omp3-vdw; a special version of SCS-OMP3 (from ethene dimers) [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. sos-pi-omp3; A special version of SOS-OMP3 for pi systems [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. f",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:2443,Performance,optimiz,optimized,2443,"ion theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. scs-omp2; spin-component scaled OMP2 [manual]. scs(n)-omp2; a special version of SCS-OMP2 for nucleobase interactions [manual]. scs-omp2-vdw; a special version of SCS-OMP2 (from ethene dimers) [manual]. sos-omp2; spin-opposite scaled OMP2 [manual]. sos-pi-omp2; A special version of SOS-OMP2 for pi systems [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. scs-omp3; spin-component scaled OMP3 [manual]. scs(n)-omp3; a special version of SCS-OMP3 for nucleobase interactions [manual]. scs-omp3-vdw; a special version of SCS-OMP3 (from ethene dimers) [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. sos-pi-omp3; A special version of SOS-OMP3 for pi systems [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual]. fno-aqcc; AQCC with frozen natural orbitals [manu",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:2831,Performance,optimiz,optimized,2831,"P4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. scs-omp2; spin-component scaled OMP2 [manual]. scs(n)-omp2; a special version of SCS-OMP2 for nucleobase interactions [manual]. scs-omp2-vdw; a special version of SCS-OMP2 (from ethene dimers) [manual]. sos-omp2; spin-opposite scaled OMP2 [manual]. sos-pi-omp2; A special version of SOS-OMP2 for pi systems [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. scs-omp3; spin-component scaled OMP3 [manual]. scs(n)-omp3; a special version of SCS-OMP3 for nucleobase interactions [manual]. scs-omp3-vdw; a special version of SCS-OMP3 (from ethene dimers) [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. sos-pi-omp3; A special version of SOS-OMP3 for pi systems [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual]. fno-aqcc; AQCC with frozen natural orbitals [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual]. fno-qcisd; QCISD with frozen natural orbitals [manual]. lccd; Linear CCD [manual] [details]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coup",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:3684,Performance,optimiz,optimized,3684,"s) [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. sos-pi-omp3; A special version of SOS-OMP3 for pi systems [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual]. fno-aqcc; AQCC with frozen natural orbitals [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual]. fno-qcisd; QCISD with frozen natural orbitals [manual]. lccd; Linear CCD [manual] [details]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. ccsd(at); CCSD with asymmetric perturbative triples (CCSD(AT)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual]. ccenergy; expert full control over ccenergy module. dfocc; expert full control over dfocc module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt;",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:16958,Performance,tune,tuned-cam-,16958,Exchange-Correlation Functional. sogga; SOGGA Exchange + PBE Correlation Functional. sogga11; SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj;  . svwn; SVWN3 (RPA) LSDA Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj;  . tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj;  . tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj;  . wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d;  . wb97x-d3bj;  . wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj;  . wpbe-d3mbj;  . wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj;  . xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj;  . zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Kallay’s MRCC program [manual]. mrccsd; CC through doubles. mrccsdt; CC through triples. mrccsdtq; CC through quadruples. mrccsdtqp; CC through quintuples. mrccsdtqph; CC through sextuples. mrccsd(t); CC,MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:21261,Performance,perform,perform,21261,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:21363,Performance,perform,perform,21363,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:4550,Deployability,configurat,configuration,4550,"inear CCD [manual] [details]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. ccsd(at); CCSD with asymmetric perturbative triples (CCSD(AT)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual]. ccenergy; expert full control over ccenergy module. dfocc; expert full control over dfocc module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual]. fci; full configuration interaction (FCI) [manual]. detci; expert full control over detci module. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. dmrg-scf; density matrix renormalization group SCF [manual]. dmrg-caspt2; density matrix renormalization group CASPT2 [manual]. dmrg-ci; density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramole",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:4850,Deployability,configurat,configuration,4850,"(CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. ccsd(at); CCSD with asymmetric perturbative triples (CCSD(AT)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual]. ccenergy; expert full control over ccenergy module. dfocc; expert full control over dfocc module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual]. fci; full configuration interaction (FCI) [manual]. detci; expert full control over detci module. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. dmrg-scf; density matrix renormalization group SCF [manual]. dmrg-caspt2; density matrix renormalization group CASPT2 [manual]. dmrg-ci; density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispe",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:21815,Deployability,update,updated,21815,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:3,Energy Efficiency,energy,energy,3,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:115,Energy Efficiency,energy,energy,115,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:136,Energy Efficiency,energy,energy,136,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:217,Energy Efficiency,energy,energy,217,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:258,Energy Efficiency,energy,energy,258,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:308,Energy Efficiency,energy,energy,308,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:348,Energy Efficiency,energy,energy,348,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:910,Energy Efficiency,energy,energy,910,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:5431,Energy Efficiency,adapt,adapted,5431,"nual]. ccenergy; expert full control over ccenergy module. dfocc; expert full control over dfocc module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual]. fci; full configuration interaction (FCI) [manual]. detci; expert full control over detci module. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. dmrg-scf; density matrix renormalization group SCF [manual]. dmrg-caspt2; density matrix renormalization group CASPT2 [manual]. dmrg-ci; density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispersion [manual]. sapt2+(3)(ccd); SAPT2+(3) with CC-based dispersion [manual]. sapt2+3(ccd); SAPT2+3 with CC-based dispersion [manual]. sapt2+dmp2; SAPT including all 2nd-order terms and MP2 correction [manual]. sapt2+(3)dmp2; SAPT including perturbative triples and MP2 correction [manual]. sapt2+3dmp2; SAPT including all 3rd-order terms and MP2 correction [manual]. sapt2+(ccd)dmp2; SAPT2+ with CC-based dispersion and MP2 correction [manual]. sapt2+(3)(ccd)dmp2; SAPT2+(3) with CC-based dispersion and MP2 correction [manual]. sapt2+3(ccd)dmp2; SAPT2+3 with CC-based disper",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:6504,Energy Efficiency,charge,charge,6504,"al exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispersion [manual]. sapt2+(3)(ccd); SAPT2+(3) with CC-based dispersion [manual]. sapt2+3(ccd); SAPT2+3 with CC-based dispersion [manual]. sapt2+dmp2; SAPT including all 2nd-order terms and MP2 correction [manual]. sapt2+(3)dmp2; SAPT including perturbative triples and MP2 correction [manual]. sapt2+3dmp2; SAPT including all 3rd-order terms and MP2 correction [manual]. sapt2+(ccd)dmp2; SAPT2+ with CC-based dispersion and MP2 correction [manual]. sapt2+(3)(ccd)dmp2; SAPT2+(3) with CC-based dispersion and MP2 correction [manual]. sapt2+3(ccd)dmp2; SAPT2+3 with CC-based dispersion and MP2 correction [manual]. sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation [manual]. sapt2-ct; SAPT2 plus CT [manual]. sapt2+-ct; SAPT2+ plus CT [manual]. sapt2+(3)-ct; SAPT2+(3) plus CT [manual]. sapt2+3-ct; SAPT2+3 plus CT [manual]. sapt2+(ccd)-ct; SAPT2+(CCD) plus CT [manual]. sapt2+(3)(ccd)-ct; SAPT2+(3)(CCD) plus CT [manual]. sapt2+3(ccd)-ct; SAPT2+3(CCD) plus CT [manual]. adc; 2nd-order algebraic diagrammatic construction (ADC) [manual]. eom-cc2; EOM-CC2 [manual]. eom-ccsd; equation of motion (EOM) CCSD [manual]. eom-cc3; EOM-CC3 [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj;  . b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b2gpplyp; B2GPPLYP Double Hybrid Exchange-Correlation Functional. b2gpplyp-d3bj;  . b2gpplyp-nl; B2GPPLYP Double Hybrid Exchange-Correlation Functional. b2plyp; B2PLYP Double Hybrid Exchange-Correlation Functional. b2plyp-d3bj;  . b2plyp-d3mbj;  . b2plyp-nl; B2PLYP Double Hybrid Exchan",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:20237,Energy Efficiency,energy,energy,20237,"sdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). mrccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). mrccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:20469,Energy Efficiency,energy,energy,20469,"st expensive terms). mrccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:20536,Energy Efficiency,energy,energy,20536,"nd Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for mo",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:20853,Energy Efficiency,energy,energy,20853,"cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:20971,Energy Efficiency,energy,energy,20971,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:21163,Energy Efficiency,energy,energy,21163,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:21200,Energy Efficiency,energy,energy,21200,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:21308,Energy Efficiency,energy,energy,21308,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:21556,Energy Efficiency,energy,energy,21556,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:403,Modifiability,variab,variables,403,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. restart_file (string) – ['file.1, file.32] || ./file || etc.; Binary data files to be renamed for calculation restart. name; calls method. efp; effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-avera",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:4550,Modifiability,config,configuration,4550,"inear CCD [manual] [details]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. ccsd(at); CCSD with asymmetric perturbative triples (CCSD(AT)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual]. ccenergy; expert full control over ccenergy module. dfocc; expert full control over dfocc module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual]. fci; full configuration interaction (FCI) [manual]. detci; expert full control over detci module. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. dmrg-scf; density matrix renormalization group SCF [manual]. dmrg-caspt2; density matrix renormalization group CASPT2 [manual]. dmrg-ci; density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramole",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:4850,Modifiability,config,configuration,4850,"(CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. ccsd(at); CCSD with asymmetric perturbative triples (CCSD(AT)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual]. ccenergy; expert full control over ccenergy module. dfocc; expert full control over dfocc module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual]. fci; full configuration interaction (FCI) [manual]. detci; expert full control over detci module. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. dmrg-scf; density matrix renormalization group SCF [manual]. dmrg-caspt2; density matrix renormalization group CASPT2 [manual]. dmrg-ci; density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispe",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:5431,Modifiability,adapt,adapted,5431,"nual]. ccenergy; expert full control over ccenergy module. dfocc; expert full control over dfocc module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual]. fci; full configuration interaction (FCI) [manual]. detci; expert full control over detci module. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. dmrg-scf; density matrix renormalization group SCF [manual]. dmrg-caspt2; density matrix renormalization group CASPT2 [manual]. dmrg-ci; density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispersion [manual]. sapt2+(3)(ccd); SAPT2+(3) with CC-based dispersion [manual]. sapt2+3(ccd); SAPT2+3 with CC-based dispersion [manual]. sapt2+dmp2; SAPT including all 2nd-order terms and MP2 correction [manual]. sapt2+(3)dmp2; SAPT including perturbative triples and MP2 correction [manual]. sapt2+3dmp2; SAPT including all 3rd-order terms and MP2 correction [manual]. sapt2+(ccd)dmp2; SAPT2+ with CC-based dispersion and MP2 correction [manual]. sapt2+(3)(ccd)dmp2; SAPT2+(3) with CC-based dispersion and MP2 correction [manual]. sapt2+3(ccd)dmp2; SAPT2+3 with CC-based disper",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:2056,Performance,optimiz,optimized,2056,"fective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. scs-omp2; spin-component scaled OMP2 [manual]. scs(n)-omp2; a special version of SCS-OMP2 for nucleobase interactions [manual]. scs-omp2-vdw; a special version of SCS-OMP2 (from ethene dimers) [manual]. sos-omp2; spin-opposite scaled OMP2 [manual]. sos-pi-omp2; A special version of SOS-OMP2 for pi systems [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. scs-omp3; spin-component scaled OMP3 [manual]. scs(n)-omp3; a special version of SCS-OMP3 for nucleobase interactions [manual]. scs-omp3-vdw; a special version of SCS-OMP3 (from ethene dimers) [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. sos-pi-omp3; A special version of SOS-OMP3 for pi systems [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. f",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:2443,Performance,optimiz,optimized,2443,"ion theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. scs-omp2; spin-component scaled OMP2 [manual]. scs(n)-omp2; a special version of SCS-OMP2 for nucleobase interactions [manual]. scs-omp2-vdw; a special version of SCS-OMP2 (from ethene dimers) [manual]. sos-omp2; spin-opposite scaled OMP2 [manual]. sos-pi-omp2; A special version of SOS-OMP2 for pi systems [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. scs-omp3; spin-component scaled OMP3 [manual]. scs(n)-omp3; a special version of SCS-OMP3 for nucleobase interactions [manual]. scs-omp3-vdw; a special version of SCS-OMP3 (from ethene dimers) [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. sos-pi-omp3; A special version of SOS-OMP3 for pi systems [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual]. fno-aqcc; AQCC with frozen natural orbitals [manu",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:2831,Performance,optimiz,optimized,2831,"P4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. scs-omp2; spin-component scaled OMP2 [manual]. scs(n)-omp2; a special version of SCS-OMP2 for nucleobase interactions [manual]. scs-omp2-vdw; a special version of SCS-OMP2 (from ethene dimers) [manual]. sos-omp2; spin-opposite scaled OMP2 [manual]. sos-pi-omp2; A special version of SOS-OMP2 for pi systems [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. scs-omp3; spin-component scaled OMP3 [manual]. scs(n)-omp3; a special version of SCS-OMP3 for nucleobase interactions [manual]. scs-omp3-vdw; a special version of SCS-OMP3 (from ethene dimers) [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. sos-pi-omp3; A special version of SOS-OMP3 for pi systems [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual]. fno-aqcc; AQCC with frozen natural orbitals [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual]. fno-qcisd; QCISD with frozen natural orbitals [manual]. lccd; Linear CCD [manual] [details]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coup",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:3684,Performance,optimiz,optimized,3684,"s) [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. sos-pi-omp3; A special version of SOS-OMP3 for pi systems [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual]. fno-aqcc; AQCC with frozen natural orbitals [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual]. fno-qcisd; QCISD with frozen natural orbitals [manual]. lccd; Linear CCD [manual] [details]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. ccsd(at); CCSD with asymmetric perturbative triples (CCSD(AT)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual]. ccenergy; expert full control over ccenergy module. dfocc; expert full control over dfocc module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt;",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:16958,Performance,tune,tuned-cam-,16958,Exchange-Correlation Functional. sogga; SOGGA Exchange + PBE Correlation Functional. sogga11; SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj;  . svwn; SVWN3 (RPA) LSDA Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj;  . tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj;  . tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj;  . wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d;  . wb97x-d3bj;  . wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj;  . wpbe-d3mbj;  . wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj;  . xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj;  . zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Kallay’s MRCC program [manual]. mrccsd; CC through doubles. mrccsdt; CC through triples. mrccsdtq; CC through quadruples. mrccsdtqp; CC through quintuples. mrccsdtqph; CC through sextuples. mrccsd(t); CC,MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:21261,Performance,perform,perform,21261,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html:21363,Performance,perform,perform,21363,"ster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fchk-1.html:1003,Deployability,update,updated,1003,"﻿. fchk. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fchk¶. psi4.driver.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; so “CC” is always used for the post-HF case. Examples:. >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.fchk-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fchk-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fchk-1.html:759,Energy Efficiency,energy,energy,759,"﻿. fchk. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fchk¶. psi4.driver.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; so “CC” is always used for the post-HF case. Examples:. >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.fchk-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fchk-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fchk.html:1003,Deployability,update,updated,1003,"﻿. fchk. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fchk¶. psi4.driver.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; so “CC” is always used for the post-HF case. Examples:. >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fchk.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fchk.html:759,Energy Efficiency,energy,energy,759,"﻿. fchk. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fchk¶. psi4.driver.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; so “CC” is always used for the post-HF case. Examples:. >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fchk.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump-1.html:1266,Deployability,update,updated,1266,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fcidump¶. psi4.driver.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989); Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Returns:None. Raises:ValidationError when SCF wavefunction is not RHF. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; fname – name of the integrals file, defaults to INTDUMP; oe_ints – list of additional one-electron integrals to save to file. So far only EIGENVALUES is a valid option. Examples:. >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.fcidump-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump-1.html:881,Energy Efficiency,energy,energy,881,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fcidump¶. psi4.driver.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989); Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Returns:None. Raises:ValidationError when SCF wavefunction is not RHF. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; fname – name of the integrals file, defaults to INTDUMP; oe_ints – list of additional one-electron integrals to save to file. So far only EIGENVALUES is a valid option. Examples:. >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.fcidump-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump-1.html:1011,Energy Efficiency,energy,energy,1011,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fcidump¶. psi4.driver.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989); Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Returns:None. Raises:ValidationError when SCF wavefunction is not RHF. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; fname – name of the integrals file, defaults to INTDUMP; oe_ints – list of additional one-electron integrals to save to file. So far only EIGENVALUES is a valid option. Examples:. >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.fcidump-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump.html:1266,Deployability,update,updated,1266,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fcidump¶. psi4.driver.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989); Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Returns:None. Raises:ValidationError when SCF wavefunction is not RHF. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; fname – name of the integrals file, defaults to INTDUMP; oe_ints – list of additional one-electron integrals to save to file. So far only EIGENVALUES is a valid option. Examples:. >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump.html:881,Energy Efficiency,energy,energy,881,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fcidump¶. psi4.driver.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989); Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Returns:None. Raises:ValidationError when SCF wavefunction is not RHF. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; fname – name of the integrals file, defaults to INTDUMP; oe_ints – list of additional one-electron integrals to save to file. So far only EIGENVALUES is a valid option. Examples:. >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump.html:1011,Energy Efficiency,energy,energy,1011,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fcidump¶. psi4.driver.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989); Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Returns:None. Raises:ValidationError when SCF wavefunction is not RHF. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; fname – name of the integrals file, defaults to INTDUMP; oe_ints – list of additional one-electron integrals to save to file. So far only EIGENVALUES is a valid option. Examples:. >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump_from_file-1.html:933,Deployability,update,updated,933,"﻿. fcidump_from_file. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fcidump_from_file¶. psi4.driver.fcidump_from_file(fname)[source]¶; Function to read in a FCIDUMP file. Returns:a dictionary with FCIDUMP header and integrals. The key-value pairs are:. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘enuc’ : nuclear repulsion plus frozen core energy; ‘epsilon’ : orbital energies; ‘hcore’ : core Hamiltonian; ‘eri’ : electron-repulsion integrals. Parameters:fname – FCIDUMP file name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.fcidump_from_file-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump_from_file-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump_from_file-1.html:611,Energy Efficiency,energy,energy,611,"﻿. fcidump_from_file. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fcidump_from_file¶. psi4.driver.fcidump_from_file(fname)[source]¶; Function to read in a FCIDUMP file. Returns:a dictionary with FCIDUMP header and integrals. The key-value pairs are:. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘enuc’ : nuclear repulsion plus frozen core energy; ‘epsilon’ : orbital energies; ‘hcore’ : core Hamiltonian; ‘eri’ : electron-repulsion integrals. Parameters:fname – FCIDUMP file name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.fcidump_from_file-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump_from_file-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump_from_file.html:933,Deployability,update,updated,933,"﻿. fcidump_from_file. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fcidump_from_file¶. psi4.driver.fcidump_from_file(fname)[source]¶; Function to read in a FCIDUMP file. Returns:a dictionary with FCIDUMP header and integrals. The key-value pairs are:. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘enuc’ : nuclear repulsion plus frozen core energy; ‘epsilon’ : orbital energies; ‘hcore’ : core Hamiltonian; ‘eri’ : electron-repulsion integrals. Parameters:fname – FCIDUMP file name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.fcidump_from_file.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump_from_file.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump_from_file.html:611,Energy Efficiency,energy,energy,611,"﻿. fcidump_from_file. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. fcidump_from_file¶. psi4.driver.fcidump_from_file(fname)[source]¶; Function to read in a FCIDUMP file. Returns:a dictionary with FCIDUMP header and integrals. The key-value pairs are:. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘enuc’ : nuclear repulsion plus frozen core energy; ‘epsilon’ : orbital energies; ‘hcore’ : core Hamiltonian; ‘eri’ : electron-repulsion integrals. Parameters:fname – FCIDUMP file name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.fcidump_from_file.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.fcidump_from_file.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.find_approximate_string_matches-1.html:522,Deployability,update,updated,522,"﻿. find_approximate_string_matches. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. find_approximate_string_matches¶. psi4.driver.find_approximate_string_matches(seq1, options, max_distance)[source]¶; Find list of approximate (within max_distance) matches to string seq1 among options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.find_approximate_string_matches-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.find_approximate_string_matches-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.find_approximate_string_matches.html:522,Deployability,update,updated,522,"﻿. find_approximate_string_matches. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. find_approximate_string_matches¶. psi4.driver.find_approximate_string_matches(seq1, options, max_distance)[source]¶; Find list of approximate (within max_distance) matches to string seq1 among options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.find_approximate_string_matches.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.find_approximate_string_matches.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:1403,Availability,avail,available,1403,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:1464,Availability,avail,available,1464,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:1870,Availability,avail,available,1870,"n be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:1978,Availability,avail,availability,1978,"arrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · .",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:2143,Availability,avail,available,2143,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:3035,Deployability,update,updated,3035,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:273,Energy Efficiency,energy,energy,273,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradien",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:325,Energy Efficiency,energy,energy,325,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradien",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:801,Energy Efficiency,energy,energy,801,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradien",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:963,Energy Efficiency,energy,energy,963,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradien",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:1090,Energy Efficiency,energy,energy,1090," Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:1363,Energy Efficiency,energy,energy,1363,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:1018,Performance,perform,performed,1018,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradien",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:1112,Performance,perform,performs,1112," Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:1518,Performance,perform,performed,1518,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:2770,Performance,optimiz,optimize,2770,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:867,Security,access,accessed,867,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradien",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html:1066,Security,access,accesses,1066," Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:1403,Availability,avail,available,1403,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:1464,Availability,avail,available,1464,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:1870,Availability,avail,available,1870,"n be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:1978,Availability,avail,availability,1978,"arrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · .",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:2143,Availability,avail,available,2143,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:3035,Deployability,update,updated,3035,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:273,Energy Efficiency,energy,energy,273,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradien",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:325,Energy Efficiency,energy,energy,325,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradien",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:801,Energy Efficiency,energy,energy,801,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradien",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:963,Energy Efficiency,energy,energy,963,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradien",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:1090,Energy Efficiency,energy,energy,1090," Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:1363,Energy Efficiency,energy,energy,1363,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:1018,Performance,perform,performed,1018,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradien",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:1112,Performance,perform,performs,1112," Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:1518,Performance,perform,performed,1518,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:2770,Performance,optimiz,optimize,2770,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:867,Security,access,accessed,867,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradien",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html:1066,Security,access,accesses,1066," Python. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:1424,Availability,avail,available,1424,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:1485,Availability,avail,available,1485,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:1891,Availability,avail,available,1891,"n be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:1999,Availability,avail,availability,1999,"arrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · .",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:2164,Availability,avail,available,2164,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:3056,Deployability,update,updated,3056,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:294,Energy Efficiency,energy,energy,294,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to av",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:346,Energy Efficiency,energy,energy,346,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to av",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:822,Energy Efficiency,energy,energy,822,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to av",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:984,Energy Efficiency,energy,energy,984,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to av",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:1111,Energy Efficiency,energy,energy,1111,"encies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:1384,Energy Efficiency,energy,energy,1384,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:1039,Performance,perform,performed,1039,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to av",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:1133,Performance,perform,performs,1133,"encies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:1539,Performance,perform,performed,1539,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:2791,Performance,optimiz,optimize,2791,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:888,Security,access,accessed,888,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to av",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html:1087,Security,access,accesses,1087,"encies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:1424,Availability,avail,available,1424,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:1485,Availability,avail,available,1485,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:1891,Availability,avail,available,1891,"n be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:1999,Availability,avail,availability,1999,"arrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · .",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:2164,Availability,avail,available,2164,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:3056,Deployability,update,updated,3056,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:294,Energy Efficiency,energy,energy,294,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to av",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:346,Energy Efficiency,energy,energy,346,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to av",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:822,Energy Efficiency,energy,energy,822,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to av",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:984,Energy Efficiency,energy,energy,984,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to av",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:1111,Energy Efficiency,energy,energy,1111,"encies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:1384,Energy Efficiency,energy,energy,1384,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:1039,Performance,perform,performed,1039,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to av",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:1133,Performance,perform,performs,1133,"encies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:1539,Performance,perform,performed,1539,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:2791,Performance,optimiz,optimize,2791,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:888,Security,access,accessed,888,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to av",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html:1087,Security,access,accesses,1087,"encies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:1426,Availability,avail,available,1426,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:1487,Availability,avail,available,1487,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:1893,Availability,avail,available,1893,"n be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:2001,Availability,avail,availability,2001,"arrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · .",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:2166,Availability,avail,available,2166,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:3058,Deployability,update,updated,3058,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:296,Energy Efficiency,energy,energy,296,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:348,Energy Efficiency,energy,energy,348,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:824,Energy Efficiency,energy,energy,824,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:986,Energy Efficiency,energy,energy,986,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:1113,Energy Efficiency,energy,energy,1113,"¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:1386,Energy Efficiency,energy,energy,1386,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:1041,Performance,perform,performed,1041,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:1135,Performance,perform,performs,1135,"¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:1541,Performance,perform,performed,1541,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:2793,Performance,optimiz,optimize,2793,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:890,Security,access,accessed,890,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html:1089,Security,access,accesses,1089,"¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:1426,Availability,avail,available,1426,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:1487,Availability,avail,available,1487,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:1893,Availability,avail,available,1893,"n be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:2001,Availability,avail,availability,2001,"arrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · .",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:2166,Availability,avail,available,2166,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:3058,Deployability,update,updated,3058,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:296,Energy Efficiency,energy,energy,296,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:348,Energy Efficiency,energy,energy,348,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:824,Energy Efficiency,energy,energy,824,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:986,Energy Efficiency,energy,energy,986,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:1113,Energy Efficiency,energy,energy,1113,"¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:1386,Energy Efficiency,energy,energy,1386,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:1041,Performance,perform,performed,1041,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:1135,Performance,perform,performs,1135,"¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:1541,Performance,perform,performed,1541,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:2793,Performance,optimiz,optimize,2793,"' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:890,Security,access,accessed,890,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html:1089,Security,access,accesses,1089,"¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.gdma-1.html:1016,Deployability,update,updated,1016,"﻿. gdma. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. gdma¶. psi4.driver.gdma(wfn, datafile='')[source]¶; Function to use wavefunction information in wfn and, if specified,; additional commands in filename to run GDMA analysis. New in version 0.6. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate DMA analysis; datafile (string) – optional control file (see GDMA manual) to peform more complicated DMA; analyses. If this option is used, the File keyword must be set to read; a filename.fchk, where filename is provided by WRITER_FILE_LABEL . Examples:. >>> # [1] DMA analysis from MP2 wavefunction. N.B. gradient must be requested to generate MP2 density.; >>> grad, wfn = gradient('mp2', return_wfn=True); >>> gdma(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.gdma-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.gdma.html:1016,Deployability,update,updated,1016,"﻿. gdma. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. gdma¶. psi4.driver.gdma(wfn, datafile='')[source]¶; Function to use wavefunction information in wfn and, if specified,; additional commands in filename to run GDMA analysis. New in version 0.6. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate DMA analysis; datafile (string) – optional control file (see GDMA manual) to peform more complicated DMA; analyses. If this option is used, the File keyword must be set to read; a filename.fchk, where filename is provided by WRITER_FILE_LABEL . Examples:. >>> # [1] DMA analysis from MP2 wavefunction. N.B. gradient must be requested to generate MP2 density.; >>> grad, wfn = gradient('mp2', return_wfn=True); >>> gdma(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.gdma.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.geometry-1.html:576,Deployability,update,updated,576,"﻿. geometry. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. geometry¶. psi4.driver.geometry(geom, name='default')[source]¶; Function to create a molecule object of name name from the; geometry in string geom. Permitted for user use but deprecated; in driver in favor of explicit molecule-passing. Comments within; the string are filtered. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.geometry-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.geometry-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.geometry.html:576,Deployability,update,updated,576,"﻿. geometry. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. geometry¶. psi4.driver.geometry(geom, name='default')[source]¶; Function to create a molecule object of name name from the; geometry in string geom. Permitted for user use but deprecated; in driver in favor of explicit molecule-passing. Comments within; the string are filtered. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.geometry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.geometry.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.getfromdict.html:367,Deployability,update,updated,367,"﻿. getFromDict. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. getFromDict¶. psi4.driver.getFromDict(dataDict, mapList)[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.getfromdict.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.getfromdict.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.get_memory-1.html:395,Deployability,update,updated,395,"﻿. get_memory. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_memory¶. psi4.driver.get_memory()[source]¶; Function to return the total memory allocation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.get_memory-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.get_memory-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.get_memory.html:395,Deployability,update,updated,395,"﻿. get_memory. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. get_memory¶. psi4.driver.get_memory()[source]¶; Function to return the total memory allocation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.get_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.get_memory.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.gradient-1.html:873,Deployability,update,updated,873,"﻿. gradient. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. gradient¶. psi4.driver.gradient(name, **kwargs)[source]¶; Function complementary to :py:func:~driver.optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns:Matrix – Total electronic gradient in Hartrees/Bohr. Returns:(Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples:. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.gradient-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.gradient-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.gradient-1.html:218,Performance,optimiz,optimize,218,"﻿. gradient. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. gradient¶. psi4.driver.gradient(name, **kwargs)[source]¶; Function complementary to :py:func:~driver.optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns:Matrix – Total electronic gradient in Hartrees/Bohr. Returns:(Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples:. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.gradient-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.gradient-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.gradient.html:873,Deployability,update,updated,873,"﻿. gradient. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. gradient¶. psi4.driver.gradient(name, **kwargs)[source]¶; Function complementary to :py:func:~driver.optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns:Matrix – Total electronic gradient in Hartrees/Bohr. Returns:(Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples:. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.gradient.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.gradient.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.gradient.html:218,Performance,optimiz,optimize,218,"﻿. gradient. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. gradient¶. psi4.driver.gradient(name, **kwargs)[source]¶; Function complementary to :py:func:~driver.optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns:Matrix – Total electronic gradient in Hartrees/Bohr. Returns:(Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples:. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.gradient.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.gradient.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.hessian-1.html:1003,Deployability,update,updated,1003,"﻿. hessian. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. hessian¶. psi4.driver.hessian(name, **kwargs)[source]¶; Function complementary to frequency(). Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. Returns:Matrix – Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. Returns:(Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.hessian-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.hessian-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.hessian.html:1003,Deployability,update,updated,1003,"﻿. hessian. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. hessian¶. psi4.driver.hessian(name, **kwargs)[source]¶; Function complementary to frequency(). Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. Returns:Matrix – Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. Returns:(Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.hessian.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.hessian.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.join_path-1.html:357,Deployability,update,updated,357,"﻿. join_path. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. join_path¶. psi4.driver.join_path(prefix, *args)[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.join_path-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.join_path-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.join_path.html:357,Deployability,update,updated,357,"﻿. join_path. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. join_path¶. psi4.driver.join_path(prefix, *args)[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.join_path.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.join_path.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.levenshtein-1.html:414,Deployability,update,updated,414,"﻿. levenshtein. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. levenshtein¶. psi4.driver.levenshtein(seq1, seq2)[source]¶; Compute the Levenshtein distance between two strings. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.levenshtein-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.levenshtein-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.levenshtein.html:414,Deployability,update,updated,414,"﻿. levenshtein. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. levenshtein¶. psi4.driver.levenshtein(seq1, seq2)[source]¶; Compute the Levenshtein distance between two strings. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.levenshtein.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.levenshtein.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.managedmethoderror.html:541,Deployability,update,updated,541,"﻿. ManagedMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. ManagedMethodError¶. exception psi4.driver.ManagedMethodError(circs)[source]¶; Bases: psi4.driver.p4util.exceptions.PsiException. args¶. with_traceback()¶; Exception.with_traceback(tb) –; set self.__traceback__ to tb and return self. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.managedmethoderror.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.managedmethoderror.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden-1.html:2194,Deployability,update,updated,2194,"n to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (string) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. >>> # [1] Molden file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). >>> # [2] Molden file for CI/MCSCF computation using NO roots; >>> E, wfn = energy('ci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.opdm(0, 0, ""A"", True)). >>> # [3] The following does NOT work, please see below; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). >>> # [4] This WILL work, note the transformation of Da (SO->MO); >>> E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molden-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden-1.html:474,Energy Efficiency,energy,energy,474,"﻿. molden. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. molden¶. psi4.driver.molden(wfn, filename=None, density_a=None, density_b=None, dovirtual=None)[source]¶; Function to write wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (string) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. >>> # [1] Molden file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). >>> # [2] Molden file for CI/MCSCF computation using NO roots; >>> E, wfn = energy('ci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.opdm(0, 0, ""A"", True)). >>> # [3] The following does NOT work, please see below; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). >>> # [4] This WILL work, note the transformation of Da (SO->MO); >>> E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', densi",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molden-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden-1.html:1275,Energy Efficiency,energy,energy,1275,"n to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (string) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. >>> # [1] Molden file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). >>> # [2] Molden file for CI/MCSCF computation using NO roots; >>> E, wfn = energy('ci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.opdm(0, 0, ""A"", True)). >>> # [3] The following does NOT work, please see below; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). >>> # [4] This WILL work, note the transformation of Da (SO->MO); >>> E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molden-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden-1.html:1419,Energy Efficiency,energy,energy,1419,"n to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (string) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. >>> # [1] Molden file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). >>> # [2] Molden file for CI/MCSCF computation using NO roots; >>> E, wfn = energy('ci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.opdm(0, 0, ""A"", True)). >>> # [3] The following does NOT work, please see below; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). >>> # [4] This WILL work, note the transformation of Da (SO->MO); >>> E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molden-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden-1.html:1593,Energy Efficiency,energy,energy,1593,"n to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (string) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. >>> # [1] Molden file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). >>> # [2] Molden file for CI/MCSCF computation using NO roots; >>> E, wfn = energy('ci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.opdm(0, 0, ""A"", True)). >>> # [3] The following does NOT work, please see below; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). >>> # [4] This WILL work, note the transformation of Da (SO->MO); >>> E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molden-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden.html:2194,Deployability,update,updated,2194,"n to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (string) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. >>> # [1] Molden file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). >>> # [2] Molden file for CI/MCSCF computation using NO roots; >>> E, wfn = energy('ci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.opdm(0, 0, ""A"", True)). >>> # [3] The following does NOT work, please see below; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). >>> # [4] This WILL work, note the transformation of Da (SO->MO); >>> E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden.html:474,Energy Efficiency,energy,energy,474,"﻿. molden. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. molden¶. psi4.driver.molden(wfn, filename=None, density_a=None, density_b=None, dovirtual=None)[source]¶; Function to write wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (string) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. >>> # [1] Molden file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). >>> # [2] Molden file for CI/MCSCF computation using NO roots; >>> E, wfn = energy('ci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.opdm(0, 0, ""A"", True)). >>> # [3] The following does NOT work, please see below; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). >>> # [4] This WILL work, note the transformation of Da (SO->MO); >>> E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', densi",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden.html:1275,Energy Efficiency,energy,energy,1275,"n to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (string) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. >>> # [1] Molden file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). >>> # [2] Molden file for CI/MCSCF computation using NO roots; >>> E, wfn = energy('ci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.opdm(0, 0, ""A"", True)). >>> # [3] The following does NOT work, please see below; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). >>> # [4] This WILL work, note the transformation of Da (SO->MO); >>> E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden.html:1419,Energy Efficiency,energy,energy,1419,"n to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (string) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. >>> # [1] Molden file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). >>> # [2] Molden file for CI/MCSCF computation using NO roots; >>> E, wfn = energy('ci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.opdm(0, 0, ""A"", True)). >>> # [3] The following does NOT work, please see below; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). >>> # [4] This WILL work, note the transformation of Da (SO->MO); >>> E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden.html:1593,Energy Efficiency,energy,energy,1593,"n to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (string) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. >>> # [1] Molden file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). >>> # [2] Molden file for CI/MCSCF computation using NO roots; >>> E, wfn = energy('ci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.opdm(0, 0, ""A"", True)). >>> # [3] The following does NOT work, please see below; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). >>> # [4] This WILL work, note the transformation of Da (SO->MO); >>> E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_from_arrays-1.html:346,Deployability,update,updated,346,"﻿. driver.molecule_from_arrays. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. driver.molecule_from_arrays¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molecule_from_arrays-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_from_arrays-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_from_arrays.html:346,Deployability,update,updated,346,"﻿. driver.molecule_from_arrays. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. driver.molecule_from_arrays¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molecule_from_arrays.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_from_arrays.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_from_schema-1.html:346,Deployability,update,updated,346,"﻿. driver.molecule_from_schema. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. driver.molecule_from_schema¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molecule_from_schema-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_from_schema-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_from_schema.html:346,Deployability,update,updated,346,"﻿. driver.molecule_from_schema. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. driver.molecule_from_schema¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molecule_from_schema.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_from_schema.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_from_string-1.html:346,Deployability,update,updated,346,"﻿. driver.molecule_from_string. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. driver.molecule_from_string¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molecule_from_string-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_from_string-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_from_string.html:346,Deployability,update,updated,346,"﻿. driver.molecule_from_string. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. driver.molecule_from_string¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molecule_from_string.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_from_string.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_get_attr-1.html:437,Deployability,update,updated,437,"﻿. molecule_get_attr. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. molecule_get_attr¶. psi4.driver.molecule_get_attr(self, name)[source]¶; Function to redefine __getattr__ method of molecule class. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molecule_get_attr-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_get_attr-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_get_attr.html:437,Deployability,update,updated,437,"﻿. molecule_get_attr. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. molecule_get_attr¶. psi4.driver.molecule_get_attr(self, name)[source]¶; Function to redefine __getattr__ method of molecule class. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molecule_get_attr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_get_attr.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_set_attr-1.html:444,Deployability,update,updated,444,"﻿. molecule_set_attr. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. molecule_set_attr¶. psi4.driver.molecule_set_attr(self, name, value)[source]¶; Function to redefine __setattr__ method of molecule class. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molecule_set_attr-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_set_attr-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_set_attr.html:444,Deployability,update,updated,444,"﻿. molecule_set_attr. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. molecule_set_attr¶. psi4.driver.molecule_set_attr(self, name, value)[source]¶; Function to redefine __setattr__ method of molecule class. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.molecule_set_attr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.molecule_set_attr.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.oeprop-1.html:784,Deployability,update,updated,784,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. oeprop¶. psi4.driver.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties. How to specify args, which are actually the most important. Parameters:title (string) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.oeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.oeprop-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.oeprop-1.html:514,Energy Efficiency,energy,energy,514,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. oeprop¶. psi4.driver.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties. How to specify args, which are actually the most important. Parameters:title (string) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.oeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.oeprop-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.oeprop.html:784,Deployability,update,updated,784,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. oeprop¶. psi4.driver.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties. How to specify args, which are actually the most important. Parameters:title (string) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.oeprop.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.oeprop.html:514,Energy Efficiency,energy,energy,514,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. oeprop¶. psi4.driver.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties. How to specify args, which are actually the most important. Parameters:title (string) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.oeprop.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html:1661,Availability,avail,available,1661,"be applied to the database. May be any valid argument to; energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html:2085,Availability,avail,available,2085,"dditionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html:13125,Deployability,update,updated,13125,"tional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html:245,Energy Efficiency,energy,energy,245,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:opt(). Returns:float – Total electronic energy of optimized structure in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:psi4.OptimizationConvergenceError if |optking__geom_maxiter| exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the ge",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html:320,Energy Efficiency,energy,energy,320,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:opt(). Returns:float – Total electronic energy of optimized structure in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:psi4.OptimizationConvergenceError if |optking__geom_maxiter| exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the ge",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html:713,Energy Efficiency,energy,energy,713,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:opt(). Returns:float – Total electronic energy of optimized structure in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:psi4.OptimizationConvergenceError if |optking__geom_maxiter| exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the ge",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html
https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html:986,Energy Efficiency,energy,energy,986,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:opt(). Returns:float – Total electronic energy of optimized structure in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:psi4.OptimizationConvergenceError if |optking__geom_maxiter| exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the ge",MatchSource.WIKI,psi4manual/1.3.2/api/psi4.driver.opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html
