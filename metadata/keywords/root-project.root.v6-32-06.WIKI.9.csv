quality_attribute,keyword,matched_word,sentence,source,filename,author,repo,version,wiki,url
Modifiability,inherit,inherited,"n standard ROOT I/O; auto h1 = (TH1*) f->Get(""histo"");; if (h1!=0) { h1->SetDirectory(0); h1->Draw(); }; auto obj = f->Get(""arr"");; if (obj!=0) obj->Print(""*"");; // close connection to DB; delete f;; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::SetDirectoryvirtual void SetDirectory(TDirectory *dir)By default, when a histogram is created, it is added to the list of histogram objects in the current ...Definition TH1.cxx:8937; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; The ""SQL I/O"" package is currently under development. Any bug reports and suggestions are welcome. Author: S.Linev, GSI Darmstadt, S.Lin.nosp@m.ev@g.nosp@m.si.de ; Definition at line 30 of file TSQLFile.h. Public Types; enum  EIndexesKinds { kIndexesNone = 0; , kIndexesBasic = 1; , kIndexesClass = 2; , kIndexesAll = 3; };  ; enum  ETransactionKinds { kTransactionsOff = 0; , kTransactionsAuto = 1; , kTransactionsUser = 2; };  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken ",MatchSource.WIKI,doc/master/classTSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLFile.html
Performance,perform,performance,"""RECREATE"" and only before first write operation. These options are: . Name Description . SetUseSuffixes() suffix usage in column names (default - on) . SetArrayLimit() defines maximum array size, which can has column for each element (default 21) . SetTablesType() table type name in MySQL database (default ""InnoDB"") . SetUseIndexes() usage of indexes in database (default kIndexesBasic) . Normally these functions should be called immediately after TSQLFile constructor. When objects data written to database, by default START TRANSACTION/COMMIT SQL commands are used before and after data storage. If TSQLFile detects any problems, ROLLBACK command will be used to restore previous state of data base. If transactions not supported by SQL server, they can be disabled by SetUseTransactions(kTransactionsOff). Or user can take responsibility to use transactions function himself. By default only indexes for basic tables are created. In most cases usage of indexes increase performance to data reading, but it also can increase time of writing data to database. There are several modes of index usage available in SetUseIndexes() method There is MakeSelectQuery(TClass*) method, which produces SELECT statement to get objects data of specified class. Difference from simple statement like: mysql> SELECT * FROM TH1I_ver1 that not only data for that class, but also data from parent classes will be extracted from other tables and combined in single result table. Such select query can be useful for external access to objects data.; Up to now MySQL 4.1 and Oracle 9i were tested. Some extra work is required for other SQL databases. Hopefully, this should be straightforward.; Known problems and open questions.; TTree is not supported by TSQLFile. There is independent development of TTreeSQL class, which allows to store trees directly in SQL database; TClonesArray is store objects in raw format, which can not be accessed outside ROOT. This will be changed later.; TDirectory cannot work. Hope",MatchSource.WIKI,doc/master/classTSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLFile.html
Safety,avoid,avoid," ""ObjectsTable"". In this there are following columns: . Name Description . ""key:id"" key identifier to which belong object . ""obj:id"" object identifier . ""Class"" object class name . ""Version"" object class version . Data in each ""ObjectsTable"" row uniquely identify, in which table and which column object is stored.; In normal situation all class data should be sorted column-wise. Up to now following member are supported:; Basic data types. Here is everything clear. Column SQL type will be as much as possible close to the original type of value.; Fixed array of basic data types. In this case n columns like fArr[0], fArr[1] and so on will be created. If there is multidimensional array, names will be fArr2[1][2][1] and so on; Parent class. In this case version of parent class is stored and data of parent class will be stored with the same obj:id in correspondent table. There is a special case, when parent store nothing (this is for instance TQObject). In that case just -1 is written to avoid any extra checks if table exist or not.; Object as data member. In that case object is saved in normal way to data base and column will contain id of this object.; Pointer on object. Same as before. In case if object was already stored, just its id will be placed in the column. For NULL pointer 0 is used.; TString. Now column with limited width like VARCAHR(255) in MySQL is used. Later this will be improved to support maximum possible strings; Anything else. Data will be converted to raw format and saved in streamer table. Each row supplied with obj:id and row:id, where row:id indicates data, corresponding to this particular data member, and column will contain this raw:id. All conversion to SQL statements are done with help of TSQLStructure class. This is special hierarchical structure wich internally is very similar to XML structures. TBufferSQL2 creates these structures, when object data is streamed by ROOT and only afterwards all SQL statements will be produced and applied all tog",MatchSource.WIKI,doc/master/classTSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLFile.html
Security,access,access,". ROOT: TSQLFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TSQLFile Class ReferencefinalInput/Output Library. ; Access an SQL db via the TFile interface. ; The main motivation for the TSQLFile development is to have ""transparent"" access to SQL data base via standard TFile interface. The main approach that each class (but not each object) has one or two tables with names like _ver$(VERSION) and _raw$(VERSION) For example: TAxis_ver8 or TList_raw5 Second kind of tables appears, when some of class members can not be converted to normalized form or when class has custom streamer. For instance, for TH1 class two tables are required: TH1_ver4 and TH1_raw4 Most of members are stored in TH1_ver4 table column-wise, and only member: Double_t* fBuffer; //[fBufferSize] can not be represented as column while size of array is not fixed. Therefore, fBuffer will be written as list of values in TH1_raw4 table. All objects, stored in the DB, will be registered in table ""ObjectsTable"". In this there are following columns: . Name Description . ""key:id"" key identifier to which belong object . ""obj:id"" object identifier . ""Class"" object class name . ""Version"" object class version . Data in each ""ObjectsTable"" row uniquely identify, in which table and which column object is stored.; In normal situation all class data should be sorted column-wise. Up to now following member are supported:; Basic data types. Here is everything clear. Column SQL type will be as much as possible close to the original type of value.; Fixed array of basic data types. In this case n columns like fArr[0], fArr[1] and so on will be created. If there is multidimensional array, names will be fArr2[1][2][1] and so on; Parent class. I",MatchSource.WIKI,doc/master/classTSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLFile.html
Testability,test,tested,"ed before and after data storage. If TSQLFile detects any problems, ROLLBACK command will be used to restore previous state of data base. If transactions not supported by SQL server, they can be disabled by SetUseTransactions(kTransactionsOff). Or user can take responsibility to use transactions function himself. By default only indexes for basic tables are created. In most cases usage of indexes increase performance to data reading, but it also can increase time of writing data to database. There are several modes of index usage available in SetUseIndexes() method There is MakeSelectQuery(TClass*) method, which produces SELECT statement to get objects data of specified class. Difference from simple statement like: mysql> SELECT * FROM TH1I_ver1 that not only data for that class, but also data from parent classes will be extracted from other tables and combined in single result table. Such select query can be useful for external access to objects data.; Up to now MySQL 4.1 and Oracle 9i were tested. Some extra work is required for other SQL databases. Hopefully, this should be straightforward.; Known problems and open questions.; TTree is not supported by TSQLFile. There is independent development of TTreeSQL class, which allows to store trees directly in SQL database; TClonesArray is store objects in raw format, which can not be accessed outside ROOT. This will be changed later.; TDirectory cannot work. Hopefully, will (changes in ROOT basic I/O is required); Streamer infos are not written to file, therefore schema evolution is not yet supported. All eforts are done to enable this feature in the near future. Example how TSQLFile can be used; A session saving data to a SQL data base; auto dbname = ""mysql://host.domain:3306/dbname"";; auto username = ""username"";; auto userpass = ""userpass"";; ; // Clean data base and create primary tables; auto f = new TSQLFile(dbname, ""recreate"", username, userpass);; // Write with standard I/O functions; arr->Write(""arr"", TObject::kS",MatchSource.WIKI,doc/master/classTSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLFile.html
Usability,clear,clear,"mple: TAxis_ver8 or TList_raw5 Second kind of tables appears, when some of class members can not be converted to normalized form or when class has custom streamer. For instance, for TH1 class two tables are required: TH1_ver4 and TH1_raw4 Most of members are stored in TH1_ver4 table column-wise, and only member: Double_t* fBuffer; //[fBufferSize] can not be represented as column while size of array is not fixed. Therefore, fBuffer will be written as list of values in TH1_raw4 table. All objects, stored in the DB, will be registered in table ""ObjectsTable"". In this there are following columns: . Name Description . ""key:id"" key identifier to which belong object . ""obj:id"" object identifier . ""Class"" object class name . ""Version"" object class version . Data in each ""ObjectsTable"" row uniquely identify, in which table and which column object is stored.; In normal situation all class data should be sorted column-wise. Up to now following member are supported:; Basic data types. Here is everything clear. Column SQL type will be as much as possible close to the original type of value.; Fixed array of basic data types. In this case n columns like fArr[0], fArr[1] and so on will be created. If there is multidimensional array, names will be fArr2[1][2][1] and so on; Parent class. In this case version of parent class is stored and data of parent class will be stored with the same obj:id in correspondent table. There is a special case, when parent store nothing (this is for instance TQObject). In that case just -1 is written to avoid any extra checks if table exist or not.; Object as data member. In that case object is saved in normal way to data base and column will contain id of this object.; Pointer on object. Same as before. In case if object was already stored, just its id will be placed in the column. For NULL pointer 0 is used.; TString. Now column with limited width like VARCAHR(255) in MySQL is used. Later this will be improved to support maximum possible strings; Anyt",MatchSource.WIKI,doc/master/classTSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLFile.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLMonitoringWriter.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLMonitoringWriter.html
Modifiability,inherit,inherited,"LMonitoringWriter (const char *serv, const char *user, const char *pass, const char *table);  Constructor. ;  ; virtual ~TSQLMonitoringWriter ();  Destructor. ;  ; TClass * IsA () const override;  ; Bool_t SendParameters (TList *values, const char *) override;  Register query log using the information in the list which is in the form TParameter(<par>,<value>) or TNamed(<name>,<string>). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Verbose (Bool_t onoff) override;  ;  Public Member Functions inherited from TVirtualMonitoringWriter;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; virtual Bool_t SendFileCloseEvent (TFile *);  ; virtual Bool_t SendFileOpenProgress (TFile *, TList *, const char *, Bool_t=kFALSE);  ; virtual Bool_t SendFileReadProgress (TFile *);  ; virtual Bool_t SendFileWriteProgress (TFile *);  ; virtual Bool_t SendInfoDescription (const char *);  ; virtual Bool_t SendInfoStatus (const char *);  ; virtual Bool_t SendInfoTime ();  ; virtual Bool_t SendInfoUser (const char *=nullptr);  ; virtual Bool_t SendProcessingProgress (Double_t, Double_t, Bool_t=kFALSE);  ; virtual Bool_t SendProcessingStatus (const char *, Bool_t=kFALSE);  ; virtual void SetLogLevel (const char *=""WARNING"");  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newnam",MatchSource.WIKI,doc/master/classTSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLMonitoringWriter.html
Performance,concurren,concurrently,"ibing current object ; Reimplemented from TNamed.; Definition at line 51 of file TSQLMonitoring.h. ◆ operator=(). TSQLMonitoringWriter & TSQLMonitoringWriter::operator= ; (; const TSQLMonitoringWriter & ; ). privatedelete . ◆ SendParameters(). Bool_t TSQLMonitoringWriter::SendParameters ; (; TList * ; values, . const char * ; opt . ). overridevirtual . Register query log using the information in the list which is in the form TParameter(<par>,<value>) or TNamed(<name>,<string>). ; For bulk sending, the first entry in the list is an TObjString defining the variable names in the format VARname1,VARname2,... while the other entries are TObjStrings with the multiplets to be sent VARvalue1,VARvalue2,...; The string 'opt' allows the following additional control: table=[<db>.]<table> allows to insert to a different table from the one defined at construction (change is not persistent); if <db> is not specified, the same db defined at cinstruction is used. bulk Do a bulk insert More options can be given concurrently, comma-separated . The specified table must already have been created in the DB. ; Reimplemented from TVirtualMonitoringWriter.; Definition at line 87 of file TSQLMonitoring.cxx. ◆ Streamer(). void TSQLMonitoringWriter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSQLMonitoringWriter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file TSQLMonitoring.h. ◆ Verbose(). void TSQLMonitoringWriter::Verbose ; (; Bool_t ; onoff). inlineoverridevirtual . Reimplemented from TVirtualMonitoringWriter.; Definition at line 49 of file TSQLMonitoring.h. Member Data Documentation. ◆ fDB. TSQLServer* TSQLMonitoringWriter::fDB. private . Definition at line 33 of file TSQLMonitoring.h. ◆ fMaxBulkSize. Long64_t TSQLMonitoringWriter::fMaxBulkSize. private . Definition at line 36 of file TSQLMonitoring.h. ◆ fTable. TString TSQLMonitoringWri",MatchSource.WIKI,doc/master/classTSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLMonitoringWriter.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLMonitoringWriter.html
Testability,log,log,". ROOT: TSQLMonitoringWriter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSQLMonitoringWriter Class Reference. . Definition at line 30 of file TSQLMonitoring.h. Public Member Functions;  TSQLMonitoringWriter (const char *serv, const char *user, const char *pass, const char *table);  Constructor. ;  ; virtual ~TSQLMonitoringWriter ();  Destructor. ;  ; TClass * IsA () const override;  ; Bool_t SendParameters (TList *values, const char *) override;  Register query log using the information in the list which is in the form TParameter(<par>,<value>) or TNamed(<name>,<string>). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Verbose (Bool_t onoff) override;  ;  Public Member Functions inherited from TVirtualMonitoringWriter;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; virtual Bool_t SendFileCloseEvent (TFile *);  ; virtual Bool_t SendFileOpenProgress (TFile *, TList *, const char *, Bool_t=kFALSE);  ; virtual Bool_t SendFileReadProgress (TFile *);  ; virtual Bool_t SendFileWriteProgress (TFile *);  ; virtual Bool_t SendInfoDescription (const char *);  ; virtual Bool_t SendInfoStatus (const char *);  ; virtual Bool_t SendInfoTime ();  ; virtual Bool_t SendInfoUser (const char *=nullptr);  ; virtual Bool_t SendProcessingProgress (Double_t, Double_t, Bool_t=kFALSE);  ; virtual Bool_t SendProcessingStatus (const char *, Bool_t=kFALSE);  ; virtual void SetLogLevel (const char *=""WARNING"");  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b)",MatchSource.WIKI,doc/master/classTSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLMonitoringWriter.html
Availability,error,errormsg,"ck (const char *tname, const char *value);  add emulated data this used to place version or TObject raw data, read from normal tables ;  ; void AddUnpackInt (const char *tname, Int_t value);  emulate integer value in raw data ;  ; const char * GetBlobPrefixName () const;  ; const char * GetBlobTypeName () const;  ; TSQLClassInfo * GetInfo () const;  ; const char * GetLocatedField () const;  ; Long64_t GetObjId () const;  ; const char * GetValue () const;  ; TClass * IsA () const override;  ; Bool_t IsBlobData () const;  ; Bool_t LocateColumn (const char *colname, Bool_t isblob=kFALSE);  locate column of that name in results ;  ; Bool_t PrepareForRawData ();  prepare to read data from raw table ;  ; void ShiftToNextValue ();  shift to next column or next row in blob data ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t VerifyDataType (const char *tname, Bool_t errormsg=kTRUE);  checks if data type corresponds to that stored in raw table ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the St",MatchSource.WIKI,doc/master/classTSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLObjectData.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLObjectData.html
Modifiability,inherit,inherited,"ck (const char *tname, const char *value);  add emulated data this used to place version or TObject raw data, read from normal tables ;  ; void AddUnpackInt (const char *tname, Int_t value);  emulate integer value in raw data ;  ; const char * GetBlobPrefixName () const;  ; const char * GetBlobTypeName () const;  ; TSQLClassInfo * GetInfo () const;  ; const char * GetLocatedField () const;  ; Long64_t GetObjId () const;  ; const char * GetValue () const;  ; TClass * IsA () const override;  ; Bool_t IsBlobData () const;  ; Bool_t LocateColumn (const char *colname, Bool_t isblob=kFALSE);  locate column of that name in results ;  ; Bool_t PrepareForRawData ();  prepare to read data from raw table ;  ; void ShiftToNextValue ();  shift to next column or next row in blob data ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t VerifyDataType (const char *tname, Bool_t errormsg=kTRUE);  checks if data type corresponds to that stored in raw table ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the St",MatchSource.WIKI,doc/master/classTSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLObjectData.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLObjectData.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLObjectDataPool.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLObjectDataPool.html
Modifiability,inherit,inherited,". ROOT: TSQLObjectDataPool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TSQLObjectDataPool Class ReferenceInput/Output Library. ; XML object keeper class. ; Definition at line 108 of file TSQLObjectData.h. Public Member Functions;  TSQLObjectDataPool ();  ;  TSQLObjectDataPool (TSQLClassInfo *info, TSQLResult *data);  ;  ~TSQLObjectDataPool () override;  Destructor of TSQLObjectDataPool class Deletes not used rows and class data table. ;  ; TSQLResult * GetClassData () const;  ; TSQLRow * GetObjectRow (Long64_t objid);  Returns single sql row with object data for that class. ;  ; TSQLClassInfo * GetSqlInfo () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  C",MatchSource.WIKI,doc/master/classTSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLObjectDataPool.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLObjectDataPool.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLObjectInfo.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLObjectInfo.html
Modifiability,inherit,inherited,". ROOT: TSQLObjectInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TSQLObjectInfo Class ReferenceInput/Output Library. ; Info (classname, version) about object in database. ; Definition at line 26 of file TSQLObjectData.h. Public Member Functions;  TSQLObjectInfo ();  ;  TSQLObjectInfo (Long64_t objid, const char *classname, Version_t version);  ;  ~TSQLObjectInfo () override;  ; const char * GetObjClassName () const;  ; Long64_t GetObjId () const;  ; Version_t GetObjVersion () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option",MatchSource.WIKI,doc/master/classTSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLObjectInfo.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLObjectInfo.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSqlRawBuffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSqlRawBuffer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSqlRawBuffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSqlRawBuffer.html
Modifiability,inherit,inherited,". ROOT: TSqlRawBuffer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TSqlRawBuffer Class Reference. . Definition at line 1077 of file TSQLStructure.cxx. Public Member Functions;  TSqlRawBuffer (TSqlRegistry *reg, TSQLClassInfo *sqlinfo);  ;  ~TSqlRawBuffer () override;  ; void AddLine (const char *name, const char *value, const char *topname=nullptr, const char *ns=nullptr);  ; Bool_t IsAnyData () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the ",MatchSource.WIKI,doc/master/classTSqlRawBuffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSqlRawBuffer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classTSqlRawBuffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSqlRawBuffer.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSqlRegistry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSqlRegistry.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSqlRegistry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSqlRegistry.html
Modifiability,inherit,inherited,". ROOT: TSqlRegistry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TSqlRegistry Class Reference. . Definition at line 821 of file TSQLStructure.cxx. Public Member Functions;  TSqlRegistry ();  ;  ~TSqlRegistry () override;  ; Int_t AddLongString (const char *strvalue);  ; void AddRegCmd (Long64_t objid, TClass *cl);  ; void AddSqlCmd (const char *query);  ; void ConvertPoolValues ();  ; void ConvertSqlValues (TObjArray &values, const char *tablename);  ; TSqlCmdsBuffer * GetCmdsBuffer (TSQLClassInfo *sqlinfo);  ; Long64_t GetNextObjId ();  ; void InsertToNormalTable (TSQLTableData *columns, TSQLClassInfo *sqlinfo);  ; Bool_t InsertToNormalTableOracle (TSQLTableData *columns, TSQLClassInfo *sqlinfo);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *opt",MatchSource.WIKI,doc/master/classTSqlRegistry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSqlRegistry.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classTSqlRegistry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSqlRegistry.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLResult.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLResult.html
Modifiability,inherit,inherited,". ROOT: TSQLResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSQLResult Class Referenceabstract. . Definition at line 31 of file TSQLResult.h. Public Member Functions; virtual ~TSQLResult ();  ; virtual void Close (Option_t *option="""")=0;  ; virtual Int_t GetFieldCount ()=0;  ; virtual const char * GetFieldName (Int_t field)=0;  ; virtual Int_t GetRowCount () const;  ; TClass * IsA () const override;  ; virtual TSQLRow * Next ()=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoP",MatchSource.WIKI,doc/master/classTSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLResult.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLResult.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLRow.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLRow.html
Modifiability,inherit,inherited,". ROOT: TSQLRow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TSQLRow Class Referenceabstract. . Definition at line 30 of file TSQLRow.h. Public Member Functions; virtual ~TSQLRow ();  ; virtual void Close (Option_t *option="""")=0;  ; virtual const char * GetField (Int_t field)=0;  ; virtual ULong_t GetFieldLength (Int_t field)=0;  ; TClass * IsA () const override;  ; const char * operator[] (Int_t field);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from ",MatchSource.WIKI,doc/master/classTSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLRow.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLRow.html
Availability,error,error,"UUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual ~TSQLServer ();  ; virtual void Close (Option_t *option="""")=0;  ; virtual Bool_t Commit ();  submit ""COMMIT"" query to database return kTRUE, if successful ;  ; virtual Int_t CreateDataBase (const char *dbname)=0;  ; virtual Int_t DropDataBase (const char *dbname)=0;  ; virtual void EnableErrorOutput (Bool_t on=kTRUE);  ; virtual Bool_t Exec (const char *sql);  Execute sql query. ;  ; virtual TSQLResult * GetColumns (const char *dbname, const char *table, const char *wild=nullptr)=0;  ; virtual TSQLResult * GetDataBases (const char *wild=nullptr)=0;  ; const char * GetDB () const;  ; const char * GetDBMS () const;  ; virtual Int_t GetErrorCode () const;  returns error code of last operation if res==0, no error Each specific implementation of TSQLServer provides its own error coding ;  ; virtual const char * GetErrorMsg () const;  returns error message of last operation if no errors, return 0 Each specific implementation of TSQLServer provides its own error messages ;  ; const char * GetHost () const;  ; virtual Int_t GetMaxIdentifierLength ();  ; Int_t GetPort () const;  ; virtual TSQLTableInfo * GetTableInfo (const char *tablename);  Produce TSQLTableInfo object, which contain info about table itself and each table column Object must be deleted by user. ;  ; virtual TSQLResult * GetTables (const char *dbname, const char *wild=nullptr)=0;  ; virtual TList * GetTablesList (const char *wild=nullptr);  Return list of user tables Parameter wild specifies wildcard for table names. ;  ; virtual Bool_t HasStatement () const;  ; virtual Bool_t HasTable (const char *tablename);  Tests if table of that name exists in database Return kTRUE, if table exists. ;  ; virtual Bool_t HasTransactionInFlight ();  returns kTRUE when transaction is running Must be implemented in derived classes ;  ; TClass * IsA () con",MatchSource.WIKI,doc/master/classTSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLServer.html
Integrability,message,message,"UUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual ~TSQLServer ();  ; virtual void Close (Option_t *option="""")=0;  ; virtual Bool_t Commit ();  submit ""COMMIT"" query to database return kTRUE, if successful ;  ; virtual Int_t CreateDataBase (const char *dbname)=0;  ; virtual Int_t DropDataBase (const char *dbname)=0;  ; virtual void EnableErrorOutput (Bool_t on=kTRUE);  ; virtual Bool_t Exec (const char *sql);  Execute sql query. ;  ; virtual TSQLResult * GetColumns (const char *dbname, const char *table, const char *wild=nullptr)=0;  ; virtual TSQLResult * GetDataBases (const char *wild=nullptr)=0;  ; const char * GetDB () const;  ; const char * GetDBMS () const;  ; virtual Int_t GetErrorCode () const;  returns error code of last operation if res==0, no error Each specific implementation of TSQLServer provides its own error coding ;  ; virtual const char * GetErrorMsg () const;  returns error message of last operation if no errors, return 0 Each specific implementation of TSQLServer provides its own error messages ;  ; const char * GetHost () const;  ; virtual Int_t GetMaxIdentifierLength ();  ; Int_t GetPort () const;  ; virtual TSQLTableInfo * GetTableInfo (const char *tablename);  Produce TSQLTableInfo object, which contain info about table itself and each table column Object must be deleted by user. ;  ; virtual TSQLResult * GetTables (const char *dbname, const char *wild=nullptr)=0;  ; virtual TList * GetTablesList (const char *wild=nullptr);  Return list of user tables Parameter wild specifies wildcard for table names. ;  ; virtual Bool_t HasStatement () const;  ; virtual Bool_t HasTable (const char *tablename);  Tests if table of that name exists in database Return kTRUE, if table exists. ;  ; virtual Bool_t HasTransactionInFlight ();  returns kTRUE when transaction is running Must be implemented in derived classes ;  ; TClass * IsA () con",MatchSource.WIKI,doc/master/classTSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLServer.html
Modifiability,inherit,inherited,". ROOT: TSQLServer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TSQLServer Class Referenceabstract. . Definition at line 41 of file TSQLServer.h. Public Types; enum  ESQLDataTypes { ;   kSQL_NONE = -1; , kSQL_CHAR = 1; , kSQL_VARCHAR = 2; , kSQL_INTEGER = 3; , ;   kSQL_FLOAT = 4; , kSQL_DOUBLE = 5; , kSQL_NUMERIC = 6; , kSQL_BINARY = 7; , ;   kSQL_TIMESTAMP = 8. };  printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual ~TSQLServer ();  ; virtual void Close (Option_t *option="""")=0;  ; virtual Bool_t Commit ();  submit ""COMMIT"" query to database return kTRUE, if successful ;  ; virtual Int_t CreateDataBase (const char *dbname)=0;  ; virtual Int_t DropDataBase (const char *dbname)=0;  ; virtual void EnableErrorOutput (Bool_t on=kTRUE);  ; virtual Bool_t Exec (const char *sql);  Execute sql query. ;  ; virtual TSQLResult * GetColumns (const char *dbname, const char *table, const char *wild=nullptr)=0;  ; virtual TSQLResult * GetDataBases (const char *wild=nullptr)=0;  ; const char * GetDB () const;  ; const char * GetDBM",MatchSource.WIKI,doc/master/classTSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLServer.html
Performance,load,loaded,"inition at line 117 of file TSQLServer.h. ◆ ClearError(). void TSQLServer::ClearError ; (; ). protected . reset error fields ; Definition at line 119 of file TSQLServer.cxx. ◆ Close(). virtual void TSQLServer::Close ; (; Option_t * ; option = """"). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ Commit(). Bool_t TSQLServer::Commit ; (; ). virtual . submit ""COMMIT"" query to database return kTRUE, if successful ; Reimplemented in TMySQLServer, TODBCServer, and TSQLiteServer.; Definition at line 160 of file TSQLServer.cxx. ◆ Connect(). TSQLServer * TSQLServer::Connect ; (; const char * ; db, . const char * ; uid, . const char * ; pw . ). static . The db should be of the form: <dbms>://<host>[:<port>][/<database>], e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, pgsql://... or sqlite://<database>... The uid is the username and pw the password that should be used for the connection. ; Depending on the <dbms> the shared library (plugin) for the selected system will be loaded. When the connection could not be opened 0 is returned. ; Definition at line 61 of file TSQLServer.cxx. ◆ CreateDataBase(). virtual Int_t TSQLServer::CreateDataBase ; (; const char * ; dbname). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ DeclFileName(). static const char * TSQLServer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 117 of file TSQLServer.h. ◆ DropDataBase(). virtual Int_t TSQLServer::DropDataBase ; (; const char * ; dbname). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ EnableErrorOutput(). virtual void TSQLServer::EnableErrorOutput ; (; Bool_t ; on = kTRUE). inlinevirtual . Definition at line 102 of file TSQLServer.h. ◆ Exec(). Bool_t TSQLServer::Exec ; (; const char * ; sql). virtual . Execute sql query. ; Useful for commands like DROP TABLE or INSERT, where resul",MatchSource.WIKI,doc/master/classTSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLServer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLServer.html
Testability,test,test,"em error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSQLServer * Connect (const char *db, const char *uid, const char *pw);  The db should be of the form: <dbms>://<host>[:<port>][/<database>], e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, pgsql://... or sqlite://<database>... The uid is the username and pw the password that should be used for the connection. ;  ; static const char * DeclFileName ();  ; static const char * GetFloatFormat ();  return current printf format for float/double members, default ""%e"" ;  ; static void SetFloatFormat (const char *fmt=""%e"");  set printf format for float/double members, default ""%e"" ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TSQLServer ();  ; void ClearErr",MatchSource.WIKI,doc/master/classTSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLServer.html
Availability,error,error," Public Member Functions; virtual ~TSQLStatement ()=default;  ; virtual void Close (Option_t *="""");  ; virtual void EnableErrorOutput (Bool_t on=kTRUE);  ; virtual Bool_t GetBinary (Int_t, void *&, Long_t &);  ; virtual Int_t GetBufferLength () const =0;  ; virtual Bool_t GetDate (Int_t, Int_t &, Int_t &, Int_t &);  ; TDatime GetDatime (Int_t);  return value of parameter in form of TDatime Be aware, that TDatime does not allow dates before 1995-01-01 ;  ; virtual Bool_t GetDatime (Int_t, Int_t &, Int_t &, Int_t &, Int_t &, Int_t &, Int_t &);  ; Int_t GetDay (Int_t);  return day value for parameter (if applicable) ;  ; virtual Double_t GetDouble (Int_t);  ; virtual Int_t GetErrorCode () const;  returns error code of last operation if res==0, no error Each specific implementation of TSQLStatement provides its own error coding ;  ; virtual const char * GetErrorMsg () const;  returns error message of last operation if no errors, return 0 Each specific implementation of TSQLStatement provides its own error messages ;  ; virtual const char * GetFieldName (Int_t)=0;  ; Int_t GetHour (Int_t);  return hours value for parameter (if applicable) ;  ; virtual Int_t GetInt (Int_t);  ; virtual Bool_t GetLargeObject (Int_t col, void *&mem, Long_t &size);  ; virtual Long_t GetLong (Int_t);  ; virtual Long64_t GetLong64 (Int_t);  ; Int_t GetMinute (Int_t);  return minutes value for parameter (if applicable) ;  ; Int_t GetMonth (Int_t);  return month value for parameter (if applicable) ;  ; virtual Int_t GetNumAffectedRows ();  ; virtual Int_t GetNumFields ()=0;  ; virtual Int_t GetNumParameters ()=0;  ; Int_t GetSecond (Int_",MatchSource.WIKI,doc/master/classTSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLStatement.html
Integrability,message,message," Public Member Functions; virtual ~TSQLStatement ()=default;  ; virtual void Close (Option_t *="""");  ; virtual void EnableErrorOutput (Bool_t on=kTRUE);  ; virtual Bool_t GetBinary (Int_t, void *&, Long_t &);  ; virtual Int_t GetBufferLength () const =0;  ; virtual Bool_t GetDate (Int_t, Int_t &, Int_t &, Int_t &);  ; TDatime GetDatime (Int_t);  return value of parameter in form of TDatime Be aware, that TDatime does not allow dates before 1995-01-01 ;  ; virtual Bool_t GetDatime (Int_t, Int_t &, Int_t &, Int_t &, Int_t &, Int_t &, Int_t &);  ; Int_t GetDay (Int_t);  return day value for parameter (if applicable) ;  ; virtual Double_t GetDouble (Int_t);  ; virtual Int_t GetErrorCode () const;  returns error code of last operation if res==0, no error Each specific implementation of TSQLStatement provides its own error coding ;  ; virtual const char * GetErrorMsg () const;  returns error message of last operation if no errors, return 0 Each specific implementation of TSQLStatement provides its own error messages ;  ; virtual const char * GetFieldName (Int_t)=0;  ; Int_t GetHour (Int_t);  return hours value for parameter (if applicable) ;  ; virtual Int_t GetInt (Int_t);  ; virtual Bool_t GetLargeObject (Int_t col, void *&mem, Long_t &size);  ; virtual Long_t GetLong (Int_t);  ; virtual Long64_t GetLong64 (Int_t);  ; Int_t GetMinute (Int_t);  return minutes value for parameter (if applicable) ;  ; Int_t GetMonth (Int_t);  return month value for parameter (if applicable) ;  ; virtual Int_t GetNumAffectedRows ();  ; virtual Int_t GetNumFields ()=0;  ; virtual Int_t GetNumParameters ()=0;  ; Int_t GetSecond (Int_",MatchSource.WIKI,doc/master/classTSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLStatement.html
Modifiability,inherit,inherited,"t parameter as TTimeStamp. ;  ; virtual Bool_t SetTimestamp (Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t=0);  Set parameter as timestamp. ;  ; virtual Bool_t SetUInt (Int_t, UInt_t);  ; virtual Bool_t SetULong64 (Int_t, ULong64_t);  ; virtual Bool_t SetVDouble (Int_t, const std::vector< Double_t >, const char *, const char *);  ; virtual Bool_t SetVInt (Int_t, const std::vector< Int_t >, const char *, const char *);  ; virtual Bool_t SetVLong (Int_t, const std::vector< Long_t >, const char *, const char *);  ; virtual Bool_t SetVLong64 (Int_t, const std::vector< Long64_t >, const char *, const char *);  ; virtual Bool_t SetVUInt (Int_t, const std::vector< UInt_t >, const char *, const char *);  ; virtual Bool_t SetVULong64 (Int_t, const std::vector< ULong64_t >, const char *, const char *);  ; virtual Bool_t StoreResult ()=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLStatement.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLStatement.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLStructure.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLStructure.html
Modifiability,inherit,inherited,"ass, value for each data member and so on. Such structure in some sense similar to XML node and subnodes structure Once it created, it converted to SQL statements, which are submitted to database server. ; Definition at line 88 of file TSQLStructure.h. Public Types; enum  ESQLColumns { ;   kColUnknown = 0; , kColSimple = 1; , kColSimpleArray = 2; , kColParent = 3; , ;   kColObject = 4; , kColObjectArray = 5; , kColNormObject = 6; , kColNormObjectArray = 7; , ;   kColObjectPtr = 8; , kColTString = 9; , kColRawData = 10. };  ; enum  ESQLIdType { kIdTable = 0; , kIdRawTable = 1; , kIdColumn = 2; };  ; enum  ESQLTypes { ;   kSqlObject = 10001; , kSqlPointer = 10002; , kSqlVersion = 10003; , kSqlStreamerInfo = 10004; , ;   kSqlClassStreamer = 10005; , kSqlElement = 10006; , kSqlValue = 10007; , kSqlArray = 10008; , ;   kSqlObjectData = 10009; , kSqlCustomClass = 10010; , kSqlCustomElement = 10011. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSQLStructure ();  ;  ~TSQLStructure () override;  destructor ;  ; void Add (TSQLStructure *child);  Add child structure. ;  ; void AddObjectData (TSQLObjectData *objdata);  add element with pointer to object data ;  ; void AddValue (const char *value, const char *tname=nullptr);  Add child structure as value. ;  ; void AddVersion (const TClass *cl, Int_t version=-100);  add child as version ;  ; void ChangeValueOnly (con",MatchSource.WIKI,doc/master/classTSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLStructure.html
Performance,perform,perform,"tructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Bool_t CheckNormalClassPair (TSQLStructure *vers, TSQLStructure *info);  check if pair of two element corresponds to start of object, stored in normal form ;  ; Long64_t FindMaxObjectId ();  define maximum reference id, used for objects ;  ; void PerformConversion (TSqlRegistry *reg, TSqlRawBuffer *blobs, const char *topname, Bool_t useblob=kFALSE);  perform conversion of structure to sql statements first tries convert it to normal form if fails, produces data for raw table ;  ; Bool_t RecognizeTString (const char *&value);  prove that structure contains TString data ;  ; Bool_t StoreClassInNormalForm (TSqlRegistry *reg);  produces data for complete class table where not possible, raw data for some elements are created ;  ; Bool_t StoreElementInNormalForm (TSqlRegistry *reg, TSQLTableData *columns);  tries to store element data in column ;  ; Bool_t StoreObject (TSqlRegistry *reg, Long64_t objid, TClass *cl, Bool_t registerobj=kTRUE);  convert object data to sql statements if normal (column-wise) representation is not possible, complete object will be converted to raw format ;  ; Bool_t StoreObjectInNormalForm (TSqlRegistry *reg);  this function verify object child elements and calls transformation to class table ;  ; Bool_t StoreTObject (TSqlRegistry *reg);  store data of TObject in special table workaround custom TObject streamer ;  ; Bool_t StoreTString (TSqlRegistry *reg);  store data of TString in special table it is required when TString stored as pointer and reference to it possible ;  ; Bool_t TryConvertObjectArray (TSqlRegistry *reg, TSqlRawBuffer *blobs);  tries to write array of objects as list of object references in streamer table, while objects itself will be stored in other tables. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char",MatchSource.WIKI,doc/master/classTSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLStructure.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classTSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLStructure.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLTableData.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLTableData.html
Modifiability,inherit,inherited,". ROOT: TSQLTableData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSQLTableData Class Reference. . Definition at line 59 of file TSQLStructure.h. Public Member Functions;  TSQLTableData (TSQLFile *f=nullptr, TSQLClassInfo *info=nullptr);  normal constructor ;  ;  ~TSQLTableData () override;  destructor ;  ; void AddColumn (const char *name, const char *sqltype, const char *value, Bool_t numeric);  Add normal column to list of columns. ;  ; void AddColumn (const char *name, Long64_t value);  Add INT column to list of columns. ;  ;  ClassDefOverride (TSQLTableData, 1);  ; const char * GetColumn (Int_t n);  return column value ;  ; Int_t GetNumColumns ();  returns number of columns in provided set ;  ; Bool_t IsNumeric (Int_t n);  identifies if column has numeric value ;  ; TObjArray * TakeColInfos ();  take ownership over colinfos ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t",MatchSource.WIKI,doc/master/classTSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLTableData.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classTSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLTableData.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLTableInfo.html
Deployability,update,update,". ROOT: TSQLTableInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TSQLTableInfo Class Reference. . Definition at line 20 of file TSQLTableInfo.h. Public Member Functions;  TSQLTableInfo ();  table update time ;  ;  TSQLTableInfo (const char *tablename, TList *columns, const char *comment=""SQL table"", const char *engine=nullptr, const char *create_time=nullptr, const char *update_time=nullptr);  normal constructor ;  ; virtual ~TSQLTableInfo ();  destructor ;  ; TSQLColumnInfo * FindColumn (const char *columnname);  Return column info object of given name. ;  ; TList * GetColumns () const;  ; const char * GetCreateTime () const;  ; const char * GetEngine () const;  ; const char * GetUpdateTime () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Prints table and table columns info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns ti",MatchSource.WIKI,doc/master/classTSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLTableInfo.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLTableInfo.html
Modifiability,inherit,inherited," Attributes |; List of all members ; TSQLTableInfo Class Reference. . Definition at line 20 of file TSQLTableInfo.h. Public Member Functions;  TSQLTableInfo ();  table update time ;  ;  TSQLTableInfo (const char *tablename, TList *columns, const char *comment=""SQL table"", const char *engine=nullptr, const char *create_time=nullptr, const char *update_time=nullptr);  normal constructor ;  ; virtual ~TSQLTableInfo ();  destructor ;  ; TSQLColumnInfo * FindColumn (const char *columnname);  Return column info object of given name. ;  ; TList * GetColumns () const;  ; const char * GetCreateTime () const;  ; const char * GetEngine () const;  ; const char * GetUpdateTime () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Prints table and table columns info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; ",MatchSource.WIKI,doc/master/classTSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLTableInfo.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ",MatchSource.WIKI,doc/master/classTSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSQLTableInfo.html
Availability,error,error,"rride;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSocket;  TSocket (const char *host, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (const char *host, Int_t port, Int_t tcpwindowsize=-1);  Create a socket; see CreateAuthSocket for the form of url. ;  ;  TSocket (const char *sockpath);  Create a socket in the Unix domain on 'sockpath'. ;  ;  TSocket (const TSocket &s);  TSocket copy ctor. ;  ;  TSocket (Int_t descriptor);  Create a socket. ;  ;  TSocket (Int_t descriptor, const char *sockpath);  Create a socket. ;  ;  TSocket (TInetAddress address, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (TInetAddress address, Int_t port, Int_t tcpwindowsize=-1);  Create a socket. ;  ; virtual ~TSocket ();  ; UInt_t GetBytesRecv () const;  ; UInt_t GetBytesSent () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Int_t GetDescriptor () const;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetInetAddress () const;  ; TTimeStamp GetLastUsage ();  ; virtual TInetAddress GetLocalInetAddress ();  Return internet address of local host to which the socket is bound. ;  ; virtual Int_t GetLocalPort ();  Return the local port # to which the socket is bound. ;  ; virtual Int_t GetOption (ESockOptions opt, Int_t &val);  Get socket options. Returns -1 in case of error. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; Int_t GetTcpWindowSize () const;  ; const char * GetUrl () const;  ; virtual Bool_t IsAuthenticated () const;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to cha",MatchSource.WIKI,doc/master/classTSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSSLSocket.html
Deployability,configurat,configuration,"nique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetUpSSL (const char *cafile, const char *capath, const char *ucert, const char *ukey);  Set up the static configuration variables. ;  ;  Static Public Member Functions inherited from TSocket; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSocket * CreateAuthSocket (const char *url, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server. ;  ; static TSocket * CreateAuthSocket (const char *user, const char *host, Int_t port, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ;  ; static const char * DeclFileName ();  ; static Int_t GetClientProtocol ();  Static method returning supported client protocol. ;  ; static ULong64_t Ge",MatchSource.WIKI,doc/master/classTSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSSLSocket.html
Integrability,message,message,"t of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TSSLSocket Class Reference. . Definition at line 28 of file TSSLSocket.h. Public Member Functions;  TSSLSocket (const char *host, const char *service, Int_t tcpwindowsize=-1);  ;  TSSLSocket (const char *sockpath);  ;  TSSLSocket (const char *url, Int_t port, Int_t tcpwindowsize=-1);  ;  TSSLSocket (const TSSLSocket &s);  ;  TSSLSocket (Int_t desc);  ;  TSSLSocket (Int_t desc, const char *sockpath);  ;  TSSLSocket (TInetAddress addr, const char *service, Int_t tcpwindowsize=-1);  ;  TSSLSocket (TInetAddress addr, Int_t port, Int_t tcpwindowsize=-1);  ; virtual ~TSSLSocket ();  Close gracefully the connection, and free SSL structures. ;  ; void Close (Option_t *option="""") override;  Close the SSL connection. ;  ; TClass * IsA () const override;  ; Int_t Recv (char *mess, Int_t max) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (char *mess, Int_t max, Int_t &kind) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (Int_t &status, Int_t &kind) override;  Receives a status and a message type. ;  ; Int_t Recv (TMessage *&mess) override;  Receive a TMessage object. ;  ; Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Receive a raw buffer of specified length bytes. ;  ; Int_t Send (const char *mess, Int_t kind=kMESS_STRING) override;  Send a character string buffer. ;  ; Int_t Send (const TMessage &mess) override;  Send a TMessage object. ;  ; Int_t Send (Int_t kind) override;  Send a single message opcode. ;  ; Int_t Send (Int_t status, Int_t kind) override;  Send a status and a single message opcode. ;  ; Int_t SendRaw (const void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Send a raw buffer of specified length. ;  ; void Streamer (TB",MatchSource.WIKI,doc/master/classTSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSSLSocket.html
Modifiability,inherit,inherited,"ring message of maximum max length. ;  ; Int_t Recv (Int_t &status, Int_t &kind) override;  Receives a status and a message type. ;  ; Int_t Recv (TMessage *&mess) override;  Receive a TMessage object. ;  ; Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Receive a raw buffer of specified length bytes. ;  ; Int_t Send (const char *mess, Int_t kind=kMESS_STRING) override;  Send a character string buffer. ;  ; Int_t Send (const TMessage &mess) override;  Send a TMessage object. ;  ; Int_t Send (Int_t kind) override;  Send a single message opcode. ;  ; Int_t Send (Int_t status, Int_t kind) override;  Send a status and a single message opcode. ;  ; Int_t SendRaw (const void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Send a raw buffer of specified length. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSocket;  TSocket (const char *host, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (const char *host, Int_t port, Int_t tcpwindowsize=-1);  Create a socket; see CreateAuthSocket for the form of url. ;  ;  TSocket (const char *sockpath);  Create a socket in the Unix domain on 'sockpath'. ;  ;  TSocket (const TSocket &s);  TSocket copy ctor. ;  ;  TSocket (Int_t descriptor);  Create a socket. ;  ;  TSocket (Int_t descriptor, const char *sockpath);  Create a socket. ;  ;  TSocket (TInetAddress address, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (TInetAddress address, Int_t port, Int_t tcpwindowsize=-1);  Create a socket. ;  ; virtual ~TSocket ();  ; UInt_t GetBytesRecv () const;  ; UInt_t GetBytesSent () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Int_t GetDescriptor () const;  ; Int_t GetErrorCode () const;  Returns erro",MatchSource.WIKI,doc/master/classTSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSSLSocket.html
Safety,timeout,timeout,"ss address, Int_t port, Int_t tcpwindowsize=-1);  Create a socket. ;  ; virtual ~TSocket ();  ; UInt_t GetBytesRecv () const;  ; UInt_t GetBytesSent () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Int_t GetDescriptor () const;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetInetAddress () const;  ; TTimeStamp GetLastUsage ();  ; virtual TInetAddress GetLocalInetAddress ();  Return internet address of local host to which the socket is bound. ;  ; virtual Int_t GetLocalPort ();  Return the local port # to which the socket is bound. ;  ; virtual Int_t GetOption (ESockOptions opt, Int_t &val);  Get socket options. Returns -1 in case of error. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; Int_t GetTcpWindowSize () const;  ; const char * GetUrl () const;  ; virtual Bool_t IsAuthenticated () const;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to change status. ;  ; virtual Int_t SendObject (const TObject *obj, Int_t kind=kMESS_OBJECT);  Send an object. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm: settings = 100 * algorithm + level. ;  ; virtual Int_t SetOption (ESockOptions opt, Int_t val);  Set socket options. ;  ; void SetRemoteProtocol (Int_t rproto);  ; void SetSecContext (TSecContext *ctx);  ; void SetServ",MatchSource.WIKI,doc/master/classTSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSSLSocket.html
Security,hash,hash,"void SetUrl (const char *url);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Touch ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSSLSocket.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStatistic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatistic.html
Deployability,update,updates,"file TStatistic.cxx. ◆ ~TStatistic(). TStatistic::~TStatistic ; (; ). override . TStatistic destructor. ; Definition at line 52 of file TStatistic.cxx. Member Function Documentation. ◆ Class(). static TClass * TStatistic::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TStatistic::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TStatistic::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 77 of file TStatistic.h. ◆ DeclFileName(). static const char * TStatistic::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 77 of file TStatistic.h. ◆ Fill(). void TStatistic::Fill ; (; Double_t ; val, . Double_t ; w = 1. . ). Increment the entries in the object by one value-weight pair. ; Parameters. [in]valValue to fill the Tstatistic with ; [in]wThe weight of the value. Also updates statistics in the object. For number of entries, sum of weights, sum of squared weights and sum of (value*weight), one extra value is added to the statistic. For the sum of squared (value*weight) pairs, the function uses formula 1.4 in Chan-Golub, LeVeque : Algorithms for computing the Sample Variance (1983), generalized by LM for the case of weights: ; \[; \frac{w_j}{\sum_{i=0}^{j} w_i \cdot \sum_{i=0}^{j-1} w_i} \cdot; \left(; \sum_{i=0}^{j} w_i \cdot val_i -; \sum_{i=0}^{j} \left(w_i \cdot val_i\right); \right); \]. The minimum(maximum) is computed by checking that the fill value is either less(greater) than the current minimum(maximum) ; Definition at line 78 of file TStatistic.cxx. ◆ GetM2(). Double_t TStatistic::GetM2 ; (; ); const. inline . Definition at line 57 of file TStatistic.h. ◆ GetMax(). Double_t TStatistic::GetMax ; (; ); const. inline . Definition at line 65 of file TStatistic.h. ◆ GetMean(). Double_t TStatistic::GetMean ; (; ); const. inline . Definition at line 58 of file ",MatchSource.WIKI,doc/master/classTStatistic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatistic.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStatistic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatistic.html
Modifiability,variab,variable,". ROOT: TStatistic Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TStatistic Class ReferenceMath » MathCore. ; Statistical variable, defined by its mean and variance (RMS). ; Named, streamable, storable and mergeable. ; Definition at line 33 of file TStatistic.h. Public Member Functions;  TStatistic (const char *name, Int_t n, const Double_t *val, const Double_t *w=nullptr);  Constructor from a vector of values. ;  ;  TStatistic (const char *name="""");  ;  ~TStatistic () override;  TStatistic destructor. ;  ; void Fill (Double_t val, Double_t w=1.);  Increment the entries in the object by one value-weight pair. ;  ; Double_t GetM2 () const;  ; Double_t GetMax () const;  ; Double_t GetMean () const;  ; Double_t GetMeanErr () const;  ; Double_t GetMin () const;  ; Long64_t GetN () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Long64_t GetNeff () const;  ; Double_t GetRMS () const;  ; Double_t GetVar () const;  ; Double_t GetW () const;  ; Double_t GetW2 () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void ls (Option_t *opt="""") const override;  The ls function lists the contents of a class on stdout. ;  ; Int_t Merge (TCollection *in);  Merge implementation of TStatistic. ;  ; void Print (Option_t *="""") const override;  Print the content of the object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that ",MatchSource.WIKI,doc/master/classTStatistic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatistic.html
Performance,queue,queue,"ct ; Reimplemented from TObject.; Definition at line 77 of file TStatistic.h. ◆ ls(). void TStatistic::ls ; (; Option_t * ; option = """"); const. inlineoverridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). ; Reimplemented from TObject.; Definition at line 75 of file TStatistic.h. ◆ Merge(). Int_t TStatistic::Merge ; (; TCollection * ; in). Merge implementation of TStatistic. ; Parameters. [in]inOther TStatistic objects to be added to the current one. The function merges the statistics of all objects together to form a new one. Merging quantities is done via simple addition for the following class data members:; number of entries fN; the sum of weights fW; the sum of squared weights fW2; the sum of (value*weight) fM. The sum of squared (value*weight) pairs fM2 is updated using the same formula as in TStatistic::Fill() function.; The minimum(maximum) is updated by checking that the minimum(maximum) of the next TStatistic object in the queue is either less(greater) than the current minimum(maximum). ; Definition at line 137 of file TStatistic.cxx. ◆ Print(). void TStatistic::Print ; (; Option_t * ; = """"); const. overridevirtual . Print the content of the object. ; Prints the statistics held by the object in one line. These include the mean, mean error, RMS, the total number of values, the minimum and the maximum. ; Reimplemented from TObject.; Definition at line 115 of file TStatistic.cxx. ◆ Streamer(). void TStatistic::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TStatistic::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 77 of file TStatistic.h. Member Data Documentation. ◆ fM. Double_t TStatistic::fM. private . Sum of elements (i.e. sum of (val * weight) pairs. ; Definition at line 40 of file TStatistic.h. ◆ fM2. Double_t TStatistic::fM2. private . Seco",MatchSource.WIKI,doc/master/classTStatistic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatistic.html
Security,hash,hash,"ber Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TStatistic Class ReferenceMath » MathCore. ; Statistical variable, defined by its mean and variance (RMS). ; Named, streamable, storable and mergeable. ; Definition at line 33 of file TStatistic.h. Public Member Functions;  TStatistic (const char *name, Int_t n, const Double_t *val, const Double_t *w=nullptr);  Constructor from a vector of values. ;  ;  TStatistic (const char *name="""");  ;  ~TStatistic () override;  TStatistic destructor. ;  ; void Fill (Double_t val, Double_t w=1.);  Increment the entries in the object by one value-weight pair. ;  ; Double_t GetM2 () const;  ; Double_t GetMax () const;  ; Double_t GetMean () const;  ; Double_t GetMeanErr () const;  ; Double_t GetMin () const;  ; Long64_t GetN () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Long64_t GetNeff () const;  ; Double_t GetRMS () const;  ; Double_t GetVar () const;  ; Double_t GetW () const;  ; Double_t GetW2 () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void ls (Option_t *opt="""") const override;  The ls function lists the contents of a class on stdout. ;  ; Int_t Merge (TCollection *in);  Merge implementation of TStatistic. ;  ; void Print (Option_t *="""") const override;  Print the content of the object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void",MatchSource.WIKI,doc/master/classTStatistic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatistic.html
Testability,log,logarithmic,"of file TStatistic.h. ◆ GetRMS(). Double_t TStatistic::GetRMS ; (; ); const. inline . Definition at line 60 of file TStatistic.h. ◆ GetVar(). Double_t TStatistic::GetVar ; (; ); const. inline . Definition at line 61 of file TStatistic.h. ◆ GetW(). Double_t TStatistic::GetW ; (; ); const. inline . Definition at line 62 of file TStatistic.h. ◆ GetW2(). Double_t TStatistic::GetW2 ; (; ); const. inline . Definition at line 63 of file TStatistic.h. ◆ Hash(). ULong_t TStatistic::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498; TStatistic::HashULong_t Hash() const overrideReturn hash value for this object.Definition TStatistic.h:53. Reimplemented from TObject.; Definition at line 53 of file TStatistic.h. ◆ IsA(). TClass * TStatistic::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented fr",MatchSource.WIKI,doc/master/classTStatistic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatistic.html
Usability,simpl,simple,"2498; TStatistic::HashULong_t Hash() const overrideReturn hash value for this object.Definition TStatistic.h:53. Reimplemented from TObject.; Definition at line 53 of file TStatistic.h. ◆ IsA(). TClass * TStatistic::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 77 of file TStatistic.h. ◆ ls(). void TStatistic::ls ; (; Option_t * ; option = """"); const. inlineoverridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). ; Reimplemented from TObject.; Definition at line 75 of file TStatistic.h. ◆ Merge(). Int_t TStatistic::Merge ; (; TCollection * ; in). Merge implementation of TStatistic. ; Parameters. [in]inOther TStatistic objects to be added to the current one. The function merges the statistics of all objects together to form a new one. Merging quantities is done via simple addition for the following class data members:; number of entries fN; the sum of weights fW; the sum of squared weights fW2; the sum of (value*weight) fM. The sum of squared (value*weight) pairs fM2 is updated using the same formula as in TStatistic::Fill() function.; The minimum(maximum) is updated by checking that the minimum(maximum) of the next TStatistic object in the queue is either less(greater) than the current minimum(maximum). ; Definition at line 137 of file TStatistic.cxx. ◆ Print(). void TStatistic::Print ; (; Option_t * ; = """"); const. overridevirtual . Print the content of the object. ; Prints the statistics held by the object in one line. These include the mean, mean error, RMS, the total number of values, the minimum and the maximum. ; Reimplemented from TObject.; Definition at line 115 of file TStatistic.cxx. ◆ Streamer(). void TStatistic::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TStatistic::StreamerNVirtual ; (; TBuffer & ;",MatchSource.WIKI,doc/master/classTStatistic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatistic.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStatsFeedback.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatsFeedback.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStatsFeedback.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatsFeedback.html
Modifiability,inherit,inherited,". ROOT: TStatsFeedback Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TStatsFeedback Class ReferencePROOF » PROOF kernel Libraries. ; Utility class to display PROOF stats feedback histos during queries. ; Definition at line 32 of file TStatsFeedback.h. Public Member Functions;  TStatsFeedback (TProof *proof=0);  Constructor. ;  ;  ~TStatsFeedback () override;  Destructor. ;  ; void Feedback (TList *objs);  Display feedback. ;  ; const char * GetName () const override;  Returns name of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObje",MatchSource.WIKI,doc/master/classTStatsFeedback.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatsFeedback.html
Security,hash,hash,". ROOT: TStatsFeedback Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TStatsFeedback Class ReferencePROOF » PROOF kernel Libraries. ; Utility class to display PROOF stats feedback histos during queries. ; Definition at line 32 of file TStatsFeedback.h. Public Member Functions;  TStatsFeedback (TProof *proof=0);  Constructor. ;  ;  ~TStatsFeedback () override;  Destructor. ;  ; void Feedback (TList *objs);  Display feedback. ;  ; const char * GetName () const override;  Returns name of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObje",MatchSource.WIKI,doc/master/classTStatsFeedback.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatsFeedback.html
Testability,log,logarithmic,"back.h. ◆ Feedback(). void TStatsFeedback::Feedback ; (; TList * ; objs). Display feedback. ; Definition at line 74 of file TStatsFeedback.cxx. ◆ GetName(). const char * TStatsFeedback::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 41 of file TStatsFeedback.h. ◆ Hash(). ULong_t TStatsFeedback::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498; TStatsFeedback::HashULong_t Hash() const overrideReturn hash value for this object.Definition TStatsFeedback.h:42. Reimplemented from TObject.; Definition at line 42 of file TStatsFeedback.h. ◆ IsA(). TClass * TStatsFeedback::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; ",MatchSource.WIKI,doc/master/classTStatsFeedback.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatsFeedback.html
Usability,feedback,feedback,". ROOT: TStatsFeedback Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TStatsFeedback Class ReferencePROOF » PROOF kernel Libraries. ; Utility class to display PROOF stats feedback histos during queries. ; Definition at line 32 of file TStatsFeedback.h. Public Member Functions;  TStatsFeedback (TProof *proof=0);  Constructor. ;  ;  ~TStatsFeedback () override;  Destructor. ;  ; void Feedback (TList *objs);  Display feedback. ;  ; const char * GetName () const override;  Returns name of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObje",MatchSource.WIKI,doc/master/classTStatsFeedback.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatsFeedback.html
Availability,error,error,". ROOT: TStatus Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TStatus Class ReferencePROOF » PROOF kernel Libraries. ; This class holds the status of an ongoing operation and collects error messages. ; It provides a Merge() operation allowing it to be used in PROOF to monitor status in the slaves. No messages indicates success. ; Definition at line 32 of file TStatus.h. Public Types; enum  EProcStatus { kNotOk = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TStatus ();  Default constructor. ;  ;  ~TStatus () override;  ; void Add (const char *mesg);  Add an error message. ;  ; void AddInfo (const char *mesg);  Add an info message. ;  ; Int_t GetExitStatus () const;  ; Long_t GetResMemMax (Bool_t master=kFALSE) const;  ; Long_t GetVirtMemMax (Bool_t master=kFALSE) const;  ; TClass * IsA () const override;  ; Bool_t IsOk () const;  ; virtual Int_t Merge (TCollection *list);  PROOF Merge() function. ;  ; const char * NextMesg ();  Return the next message or 0. ;  ; void Print (Option_t *option="""") const override;  Standard print function. ;  ; void Reset ();  Reset the iterator on the messages. ;  ; void SetExitStatus (Int_t est);  ; void SetMemVal",MatchSource.WIKI,doc/master/classTStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatus.html
Energy Efficiency,monitor,monitor,". ROOT: TStatus Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TStatus Class ReferencePROOF » PROOF kernel Libraries. ; This class holds the status of an ongoing operation and collects error messages. ; It provides a Merge() operation allowing it to be used in PROOF to monitor status in the slaves. No messages indicates success. ; Definition at line 32 of file TStatus.h. Public Types; enum  EProcStatus { kNotOk = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TStatus ();  Default constructor. ;  ;  ~TStatus () override;  ; void Add (const char *mesg);  Add an error message. ;  ; void AddInfo (const char *mesg);  Add an info message. ;  ; Int_t GetExitStatus () const;  ; Long_t GetResMemMax (Bool_t master=kFALSE) const;  ; Long_t GetVirtMemMax (Bool_t master=kFALSE) const;  ; TClass * IsA () const override;  ; Bool_t IsOk () const;  ; virtual Int_t Merge (TCollection *list);  PROOF Merge() function. ;  ; const char * NextMesg ();  Return the next message or 0. ;  ; void Print (Option_t *option="""") const override;  Standard print function. ;  ; void Reset ();  Reset the iterator on the messages. ;  ; void SetExitStatus (Int_t est);  ; void SetMemVal",MatchSource.WIKI,doc/master/classTStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatus.html
Integrability,message,messages,". ROOT: TStatus Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TStatus Class ReferencePROOF » PROOF kernel Libraries. ; This class holds the status of an ongoing operation and collects error messages. ; It provides a Merge() operation allowing it to be used in PROOF to monitor status in the slaves. No messages indicates success. ; Definition at line 32 of file TStatus.h. Public Types; enum  EProcStatus { kNotOk = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TStatus ();  Default constructor. ;  ;  ~TStatus () override;  ; void Add (const char *mesg);  Add an error message. ;  ; void AddInfo (const char *mesg);  Add an info message. ;  ; Int_t GetExitStatus () const;  ; Long_t GetResMemMax (Bool_t master=kFALSE) const;  ; Long_t GetVirtMemMax (Bool_t master=kFALSE) const;  ; TClass * IsA () const override;  ; Bool_t IsOk () const;  ; virtual Int_t Merge (TCollection *list);  PROOF Merge() function. ;  ; const char * NextMesg ();  Return the next message or 0. ;  ; void Print (Option_t *option="""") const override;  Standard print function. ;  ; void Reset ();  Reset the iterator on the messages. ;  ; void SetExitStatus (Int_t est);  ; void SetMemVal",MatchSource.WIKI,doc/master/classTStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatus.html
Modifiability,inherit,inherited,". ROOT: TStatus Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TStatus Class ReferencePROOF » PROOF kernel Libraries. ; This class holds the status of an ongoing operation and collects error messages. ; It provides a Merge() operation allowing it to be used in PROOF to monitor status in the slaves. No messages indicates success. ; Definition at line 32 of file TStatus.h. Public Types; enum  EProcStatus { kNotOk = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TStatus ();  Default constructor. ;  ;  ~TStatus () override;  ; void Add (const char *mesg);  Add an error message. ;  ; void AddInfo (const char *mesg);  Add an info message. ;  ; Int_t GetExitStatus () const;  ; Long_t GetResMemMax (Bool_t master=kFALSE) const;  ; Long_t GetVirtMemMax (Bool_t master=kFALSE) const;  ; TClass * IsA () const override;  ; Bool_t IsOk () const;  ; virtual Int_t Merge (TCollection *list);  PROOF Merge() function. ;  ; const char * NextMesg ();  Return the next message or 0. ;  ; void Print (Option_t *option="""") const override;  Standard print function. ;  ; void Reset ();  Reset the iterator on the messages. ;  ; void SetExitStatus (Int_t est);  ; void SetMemVal",MatchSource.WIKI,doc/master/classTStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatus.html
Security,hash,hash," override;  Stream an object of class TStatus. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ",MatchSource.WIKI,doc/master/classTStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStatus.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStdExceptionHandler.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStdExceptionHandler.html
Modifiability,inherit,inherited,". ROOT: TStdExceptionHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; List of all members ; TStdExceptionHandler Class Referenceabstract. . Definition at line 172 of file TSysEvtHandler.h. Public Types; enum  EStatus { kSEProceed; , kSEHandled; , kSEAbort; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TStdExceptionHandler ();  Handle standard C++ exceptions intercepted by the TSystem::Run(). ;  ; virtual ~TStdExceptionHandler ();  ; void Add () override;  Add std::exception handler to system handler list. ;  ; virtual EStatus Handle (std::exception &exc)=0;  ; TClass * IsA () const override;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove std::exception handler from system handler list. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA",MatchSource.WIKI,doc/master/classTStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStdExceptionHandler.html
Safety,abort,abortion,"ude <TSysEvtHandler.h>. Inheritance diagram for TStdExceptionHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EStatus. enum TStdExceptionHandler::EStatus. EnumeratorkSEProceed ; kSEHandled ; kSEAbort . Definition at line 175 of file TSysEvtHandler.h. Constructor & Destructor Documentation. ◆ TStdExceptionHandler(). TStdExceptionHandler::TStdExceptionHandler ; (; ). Handle standard C++ exceptions intercepted by the TSystem::Run(). ; Virtual method EStatus Handle(std::exception& exc) is called on the collection of handlers registered to TSystem. The return value of each handler influences the continuation of handling procedure:; kSEProceed - Proceed with passing of the exception to other handlers, the exception has not been handled.; kSEHandled - The exception has been handled, do not pass it to other handlers.; kSEAbort - Abort application. If all handlers return kSEProceed TSystem::Run() rethrows the exception, possibly resulting in process abortion. . Definition at line 202 of file TSysEvtHandler.cxx. ◆ ~TStdExceptionHandler(). virtual TStdExceptionHandler::~TStdExceptionHandler ; (; ). inlinevirtual . Definition at line 178 of file TSysEvtHandler.h. Member Function Documentation. ◆ Add(). void TStdExceptionHandler::Add ; (; ). overridevirtual . Add std::exception handler to system handler list. ; Implements TSysEvtHandler.; Definition at line 209 of file TSysEvtHandler.cxx. ◆ Class(). static TClass * TStdExceptionHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TStdExceptionHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TStdExceptionHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 186 of file TSysEvtHandler.h. ◆ DeclFileName(). static const char * TStdExceptionHandler::DeclFileName ; (; ). inlinestat",MatchSource.WIKI,doc/master/classTStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStdExceptionHandler.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStdExceptionHandler.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTStopTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStopTimer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTStopTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStopTimer.html
Modifiability,inherit,inherited,". ROOT: TStopTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TStopTimer Class Reference. . Definition at line 169 of file TProofPlayer.cxx. Public Member Functions;  TStopTimer (TProofPlayer *p, Bool_t abort, Int_t to);  Constructor for the timer to stop/abort processing. ;  ; Bool_t Notify () override;  Handle the signal coming from the expiration of the timer associated with an abort or stop request. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at",MatchSource.WIKI,doc/master/classTStopTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStopTimer.html
Safety,abort,abort,". ROOT: TStopTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TStopTimer Class Reference. . Definition at line 169 of file TProofPlayer.cxx. Public Member Functions;  TStopTimer (TProofPlayer *p, Bool_t abort, Int_t to);  Constructor for the timer to stop/abort processing. ;  ; Bool_t Notify () override;  Handle the signal coming from the expiration of the timer associated with an abort or stop request. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at",MatchSource.WIKI,doc/master/classTStopTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStopTimer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTStopTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStopTimer.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStopwatch.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStopwatch.html
Modifiability,inherit,inherited,"; Definition at line 28 of file TStopwatch.h. Public Member Functions;  TStopwatch ();  Create a stopwatch and start it. ;  ; void Continue ();  Resume a stopped stopwatch. ;  ; Int_t Counter () const;  ; Double_t CpuTime ();  Stop the stopwatch (if it is running) and return the cputime (in seconds) passed between the start and stop events. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print the real and cpu time passed between the start and stop events. ;  ; Double_t RealTime ();  Stop the stopwatch (if it is running) and return the realtime (in seconds) passed between the start and stop events. ;  ; void Reset ();  ; void ResetCpuTime (Double_t time=0);  ; void ResetRealTime (Double_t time=0);  ; void Start (Bool_t reset=kTRUE);  Start the stopwatch. ;  ; void Stop ();  Stop the stopwatch. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStopwatch.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStopwatch.html
Deployability,toggle,toggle,". ROOT: TStorage Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Types |; Static Private Attributes |; List of all members ; TStorage Class ReferenceCore ROOT classes » Base ROOT classes. ; Storage manager. ; The storage manager works best in conjunction with the custom ROOT new and delete operators defined in the file NewDelete.cxx (libNew.so). Only when using the custom allocation operators will memory usage statistics be gathered using the TStorage EnterStat(), RemoveStat(), etc. functions. Memory checking is by default enabled (when using libNew.so) and usage statistics is gathered. Using the resource (in .rootrc): Root.MemStat one can toggle statistics gathering on or off. More specifically on can trap the allocation of a block of memory of a certain size. This can be specified using the resource: Root.MemStat.size, using the resource Root.MemStat.cnt one can specify after how many allocations of this size the trap should occur.; Set the compile option R__NOSTATS to de-activate all memory checking and statistics gathering in the system. ; Definition at line 33 of file TStorage.h. Public Member Functions; virtual ~TStorage ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void * Alloc (size_t size);  Allocate a block of memory, that later can be resized using TStorage::ReAlloc(). ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void Dealloc (void *ptr);  De-allocate block of memory, that was allocated via TStorage::Alloc(). ;  ; static const char * DeclFileName ();  ; static void EnableStatistics (int size=-1, int ix=-1);  Enable memory usage statistics gathering. ;  ; static void EnterSta",MatchSource.WIKI,doc/master/classTStorage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStorage.html
Energy Efficiency,allocate,allocate,"libNew.so) and usage statistics is gathered. Using the resource (in .rootrc): Root.MemStat one can toggle statistics gathering on or off. More specifically on can trap the allocation of a block of memory of a certain size. This can be specified using the resource: Root.MemStat.size, using the resource Root.MemStat.cnt one can specify after how many allocations of this size the trap should occur.; Set the compile option R__NOSTATS to de-activate all memory checking and statistics gathering in the system. ; Definition at line 33 of file TStorage.h. Public Member Functions; virtual ~TStorage ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void * Alloc (size_t size);  Allocate a block of memory, that later can be resized using TStorage::ReAlloc(). ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void Dealloc (void *ptr);  De-allocate block of memory, that was allocated via TStorage::Alloc(). ;  ; static const char * DeclFileName ();  ; static void EnableStatistics (int size=-1, int ix=-1);  Enable memory usage statistics gathering. ;  ; static void EnterStat (size_t size, void *p);  Register a memory allocation operation. ;  ; static Bool_t FilledByObjectAlloc (volatile const UInt_t *const member);  ; static FreeHookFun_t GetFreeHook ();  ; static void * GetFreeHookData ();  return static free hook data ;  ; static size_t GetMaxBlockSize ();  ; static Bool_t HasCustomNewDelete ();  return the has custom delete flag ;  ; static void * ObjectAlloc (size_t size);  Used to allocate a TObject on the heap (via TObject::operator new()). ;  ; static void * ObjectAlloc (size_t size, void *vp);  Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)) in position vp. ;  ; static void * ObjectAllocArray (size_t size);  Used to allocate array of TObj",MatchSource.WIKI,doc/master/classTStorage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStorage.html
Integrability,rout,routine," *const ; member). inlinestatic . Definition at line 88 of file TStorage.h. ◆ GetFreeHook(). FreeHookFun_t TStorage::GetFreeHook ; (; ). inlinestatic . Definition at line 135 of file TStorage.h. ◆ GetFreeHookData(). void * TStorage::GetFreeHookData ; (; ). static . return static free hook data ; Definition at line 426 of file TStorage.cxx. ◆ GetMaxBlockSize(). size_t TStorage::GetMaxBlockSize ; (; ). inlinestatic . Definition at line 131 of file TStorage.h. ◆ HasCustomNewDelete(). Bool_t TStorage::HasCustomNewDelete ; (; ). static . return the has custom delete flag ; Definition at line 434 of file TStorage.cxx. ◆ IsA(). virtual TClass * TStorage::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 85 of file TStorage.h. ◆ ObjectAlloc() [1/2]. void * TStorage::ObjectAlloc ; (; size_t ; sz). static . Used to allocate a TObject on the heap (via TObject::operator new()). ; Directly after this routine one can call (in the TObject ctor) TStorage::FilledByObjectAlloc() to find out if the just created object is on the heap. This technique is necessary as there is one stack per thread and we can not rely on comparison with the current stack memory position. ; Definition at line 291 of file TStorage.cxx. ◆ ObjectAlloc() [2/2]. void * TStorage::ObjectAlloc ; (; size_t ; size, . void * ; vp . ). static . Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)) in position vp. ; vp is already allocated (maybe on heap, maybe on stack) so just return. ; Definition at line 314 of file TStorage.cxx. ◆ ObjectAllocArray(). void * TStorage::ObjectAllocArray ; (; size_t ; sz). static . Used to allocate array of TObject on the heap (via TObject::operator new[]()). ; Unlike the 'singular' ObjectAlloc, we do not mark those object has being allocated on the heap as they can not be individually deleted. ; Definition at line 303 of file TStorage.cxx. ◆ ObjectDealloc() [1/2]. void TStorage::ObjectDealloc ; (; void * ; vp). st",MatchSource.WIKI,doc/master/classTStorage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStorage.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerArtificial.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerArtificial.html
Modifiability,inherit,inherited,". ROOT: TStreamerArtificial Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TStreamerArtificial Class Reference. . Definition at line 449 of file TStreamerElement.h. Public Member Functions;  TStreamerArtificial (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  ; ROOT::TSchemaRule::ReadFuncPtr_t GetReadFunc ();  ; ROOT::TSchemaRule::ReadRawFuncPtr_t GetReadRawFunc ();  ; TClass * IsA () const override;  ; void SetReadFunc (ROOT::TSchemaRule::ReadFuncPtr_t val);  ; void SetReadRawFunc (ROOT::TSchemaRule::ReadRawFuncPtr_t val);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; virtual const char * GetInclude () const;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () con",MatchSource.WIKI,doc/master/classTStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerArtificial.html
Performance,cache,cached,"lement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; virtual const char * GetInclude () const;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; virtual Int_t GetSize () const;  Returns size of this element in bytes. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldForm",MatchSource.WIKI,doc/master/classTStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerArtificial.html
Safety,detect,detected,"quence information including 'cached','repeat','write' or 'nodelete'. ;  ; virtual Int_t GetSize () const;  Returns size of this element in bytes. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; virtual void SetArrayDim (Int_t dim);  Set number of array dimensions. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TStrea",MatchSource.WIKI,doc/master/classTStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerArtificial.html
Security,hash,hash,"Class *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classTStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerArtificial.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBase.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBase.html
Modifiability,inherit,inherited,"sTransient=kFALSE);  ; void Init (TVirtualStreamerInfo *obj=nullptr) override;  Setup the element. ;  ; TClass * IsA () const override;  ; Bool_t IsBase () const override;  Return kTRUE if the element represent a base class. ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; Int_t ReadBuffer (TBuffer &b, char *pointer);  Read the content of the buffer. ;  ; void SetBaseCheckSum (UInt_t cs);  ; void SetBaseVersion (Int_t v);  ; void SetErrorMessage (const char *msg);  ; void SetNewBaseClass (TClass *cl);  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerBase. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (const TClass *oldClass, TClass *newClass) override;  Function called by the TClass constructor when replacing an emulated class by the real class. ;  ; Int_t WriteBuffer (TBuffer &b, char *pointer);  Write the base class into the buffer. ;  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation ",MatchSource.WIKI,doc/master/classTStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBase.html
Performance,cache,cached,"se class into the buffer. ;  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not ",MatchSource.WIKI,doc/master/classTStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBase.html
Safety,detect,detected,"me into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; virtual void SetArrayDim (Int_t dim);  Set number of array dimensions. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TStrea",MatchSource.WIKI,doc/master/classTStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBase.html
Security,hash,hash,";  Stream an object of class TStreamerElement. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classTStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBase.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBasicPointer.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBasicPointer.html
Modifiability,inherit,inherited,"TClass * GetClassPointer () const override;  Returns a pointer to the TClass of this element. ;  ; const char * GetCountClass () const;  ; const char * GetCountName () const;  ; Int_t GetCountVersion () const;  ; ULongptr_t GetMethod () const override;  return offset of counter ;  ; Int_t GetSize () const override;  Returns size of basicpointer in bytes. ;  ; Bool_t HasCounter () const override;  ; void Init (TVirtualStreamerInfo *obj=nullptr) override;  Setup the element. ;  ; TClass * IsA () const override;  ; Bool_t IsaPointer () const override;  ; void SetArrayDim (Int_t dim) override;  Set number of array dimensions. ;  ; void SetCountClass (const char *clname);  ; void SetCountName (const char *name);  ; void SetCountVersion (Int_t count);  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerBasicPointer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (const TClass *, TClass *) override;  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; virtual const char * GetInclude () const;  ; Int_t GetMaxIndex (Int_t i) const;  ; TClass * GetNewClass () cons",MatchSource.WIKI,doc/master/classTStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBasicPointer.html
Performance,cache,cached,"ss ;  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; virtual const char * GetInclude () const;  ; Int_t GetMaxIndex (Int_t i) const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the eleme",MatchSource.WIKI,doc/master/classTStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBasicPointer.html
Safety,detect,detected,"ude () const;  ; Int_t GetMaxIndex (Int_t i) const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerElement. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b",MatchSource.WIKI,doc/master/classTStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBasicPointer.html
Security,hash,hash,";  Stream an object of class TStreamerElement. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classTStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBasicPointer.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBasicType.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBasicType.html
Modifiability,inherit,inherited,"Member Functions |; List of all members ; TStreamerBasicType Class Reference. . Definition at line 269 of file TStreamerElement.h. Public Member Functions;  TStreamerBasicType ();  value of data member when referenced by an array ;  ;  TStreamerBasicType (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerBasicType object. ;  ; virtual ~TStreamerBasicType ();  TStreamerBasicType dtor. ;  ; TClass * GetClassPointer () const override;  Returns a pointer to the TClass of this element. ;  ; Int_t GetCounter () const;  ; ULongptr_t GetMethod () const override;  return address of counter ;  ; Int_t GetSize () const override;  Returns size of this element in bytes. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerBasicType. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (const TClass *, TClass *) override;  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; virtual const char * GetInclude () const;  ; Int_t GetMaxIndex (Int_t i) const;  ; TClass * GetNewClass () cons",MatchSource.WIKI,doc/master/classTStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBasicType.html
Performance,cache,cached,"ss ;  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; virtual const char * GetInclude () const;  ; Int_t GetMaxIndex (Int_t i) const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeNam",MatchSource.WIKI,doc/master/classTStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBasicType.html
Safety,detect,detected,"ceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; virtual void SetArrayDim (Int_t dim);  Set number of array dimensions. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TStrea",MatchSource.WIKI,doc/master/classTStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBasicType.html
Security,hash,hash,";  Stream an object of class TStreamerElement. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classTStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerBasicType.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerElement.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerElement.html
Modifiability,inherit,inherited,"NotDelete = (1ULL << ( 13 )); , kWholeObject = (1ULL << ( 14 )); , kWarned = (1ULL << ( 21 )). };  ; enum class  EStatusBitsDupExceptions { kDoNotDelete = TStreamerElement::kDoNotDelete; , kHasRange = TStreamerElement::kHasRange; };  ; enum  ESTLtype { ;   kSTL = ROOT::kSTLany; , kSTLstring = ROOT::kSTLstring; , kSTLvector = ROOT::kSTLvector; , kSTLlist = ROOT::kSTLlist; , ;   kSTLforwardlist = ROOT::kSTLforwardlist; , kSTLdeque = ROOT::kSTLdeque; , kSTLmap = ROOT::kSTLmap; , kSTLmultimap = ROOT::kSTLmultimap; , ;   kSTLset = ROOT::kSTLset; , kSTLmultiset = ROOT::kSTLmultiset; , kSTLunorderedset = ROOT::kSTLunorderedset; , kSTLunorderedmultiset = ROOT::kSTLunorderedmultiset; , ;   kSTLunorderedmap = ROOT::kSTLunorderedmap; , kSTLunorderedmultimap = ROOT::kSTLunorderedmultimap; , kSTLbitset = ROOT::kSTLbitset. };  Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin) More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * G",MatchSource.WIKI,doc/master/classTStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerElement.html
Performance,cache,cached,"lement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; virtual const char * GetInclude () const;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; virtual Int_t GetSize () const;  Returns size of this element in bytes. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldForm",MatchSource.WIKI,doc/master/classTStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerElement.html
Safety,detect,detected,"quence information including 'cached','repeat','write' or 'nodelete'. ;  ; virtual Int_t GetSize () const;  Returns size of this element in bytes. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; virtual void SetArrayDim (Int_t dim);  Set number of array dimensions. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TStrea",MatchSource.WIKI,doc/master/classTStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerElement.html
Security,hash,hash,"Class *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classTStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerElement.html
Availability,error,error,"Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TStreamerInfoinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DeleteArray(void *p, Bool_t dtorOnly=kFALSE) overrideTStreamerInfovirtual; Destructor(void *p, Bool_t dtorOnly=kFALSE) overrideTStreamerInfovirtual; DestructorImpl(void *p, Bool_t dtorOnly)TStreamerInfoprivate; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EReadWrite enum nameTVirtualStreamerInfo; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTVirtualStreamerInfo; EStatusBitsDupExceptions enum nameTVirtualStreamerInfo; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Factory()TVirtualStreamerInfostatic; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fCheckSumTStreamerInfoprivate; fClassTStreamerInfoprivate; fClassVersionTStreamerInfoprivate; fCompTStreamerInfoprivate; fCompFullTStreamerInfoprivate; fCompOptTStreamerInfoprivate; fElementsTStreamerInfoprivate; fgCanDeleteTVirtualStreamerInfoprotectedstatic; fgCountTStreamerInfoprivatestatic; fgDtorOnlyTObjectprivatestatic; fgInfoFactoryTVirtualStreamerInfoprotectedstatic; fgObjectStatTObjectprivatestatic; fgOptimizeTVirtualStreamerInfoprotectedstatic; fgStreamMemberWiseTVirtualStreamerInfoprotectedstatic; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fIsBuiltTVirtualStreamerInfoprotected; fIsCompiledTVirtualStreamerInfoprotected; f",MatchSource.WIKI,doc/master/classTStreamerInfo-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfo-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TStreamerInfo Member List. This is the complete list of members for TStreamerInfo, including all inherited members. AbstractMethod(const char *method) constTObject; AddReadAction(TStreamerInfoActions::TActionSequence *readSequence, Int_t index, TCompInfo *compinfo)TStreamerInfoprivate; AddReadMemberWiseVecPtrAction(TStreamerInfoActions::TActionSequence *readSequence, Int_t index, TCompInfo *compinfo)TStreamerInfoprivate; AddReadTextAction(TStreamerInfoActions::TActionSequence *readSequence, Int_t index, TCompInfo *compinfo)TStreamerInfoprivate; AddToTObjectTable(TObject *)TObjectprivatestatic; AddWriteAction(TStreamerInfoActions::TActionSequence *writeSequence, Int_t index, TCompInfo *compinfo)TStreamerInfoprivate; AddWriteMemberWiseVecPtrAction(TStreamerInfoActions::TActionSequence *writeSequence, Int_t index, TCompInfo *compinfo)TStreamerInfoprivate; AddWriteTextAction(TStreamerInfoActions::TActionSequence *writeSequence, Int_t index, TCompInfo *compinfo)TStreamerInfoprivate; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; Build(Bool_t isTransient=kFALSE) overrideTStreamerInfovirtual; BuildCheck(TFile *file=nullptr, Bool_t load=kTRUE) overrideTStreamerInfovirtual; BuildEmulated(TFile *file) overrideTStreamerInfovirtual; BuildFor(const TClass *cl) overrideTStreamerInfovirtual; BuildOld() overrideTStreamerInfovirtual; CallShowMembers(const void *obj, TMemberInspector &insp, Bool_t isTransient) const overrideTStreamerInfovirtual; CanDelete()TVirtualStreamerInfostatic; CanOptimize()TVirtualStreamerInfostatic; CheckedHash()TObjectinline; Class()TStreamerInfostatic; Class_Name()TStreamerInfostatic; Class_Version()TStreamerInfoinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""") overrideTStreamerInfovirtual; Clone(const char *newname="""") const overrideTStreamerInfovirtual; Compare(const TObject *obj) const overrideTNamedvirt",MatchSource.WIKI,doc/master/classTStreamerInfo-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfo-members.html
Performance,load,load,"(TStreamerInfoActions::TActionSequence *readSequence, Int_t index, TCompInfo *compinfo)TStreamerInfoprivate; AddReadMemberWiseVecPtrAction(TStreamerInfoActions::TActionSequence *readSequence, Int_t index, TCompInfo *compinfo)TStreamerInfoprivate; AddReadTextAction(TStreamerInfoActions::TActionSequence *readSequence, Int_t index, TCompInfo *compinfo)TStreamerInfoprivate; AddToTObjectTable(TObject *)TObjectprivatestatic; AddWriteAction(TStreamerInfoActions::TActionSequence *writeSequence, Int_t index, TCompInfo *compinfo)TStreamerInfoprivate; AddWriteMemberWiseVecPtrAction(TStreamerInfoActions::TActionSequence *writeSequence, Int_t index, TCompInfo *compinfo)TStreamerInfoprivate; AddWriteTextAction(TStreamerInfoActions::TActionSequence *writeSequence, Int_t index, TCompInfo *compinfo)TStreamerInfoprivate; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; Build(Bool_t isTransient=kFALSE) overrideTStreamerInfovirtual; BuildCheck(TFile *file=nullptr, Bool_t load=kTRUE) overrideTStreamerInfovirtual; BuildEmulated(TFile *file) overrideTStreamerInfovirtual; BuildFor(const TClass *cl) overrideTStreamerInfovirtual; BuildOld() overrideTStreamerInfovirtual; CallShowMembers(const void *obj, TMemberInspector &insp, Bool_t isTransient) const overrideTStreamerInfovirtual; CanDelete()TVirtualStreamerInfostatic; CanOptimize()TVirtualStreamerInfostatic; CheckedHash()TObjectinline; Class()TStreamerInfostatic; Class_Name()TStreamerInfostatic; Class_Version()TStreamerInfoinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""") overrideTStreamerInfovirtual; Clone(const char *newname="""") const overrideTStreamerInfovirtual; Compare(const TObject *obj) const overrideTNamedvirtual; CompareContent(TClass *cl, TVirtualStreamerInfo *info, Bool_t warn, Bool_t complete, TFile *file) overrideTStreamerInfovirtual; Compile() overrideTStreamerInfovirtual; ComputeSize()TStreamerInfo; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TStreamerInfoin",MatchSource.WIKI,doc/master/classTStreamerInfo-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfo-members.html
Security,checksum,checksum,"reamerInfo; kShort enum valueTVirtualStreamerInfo; kSingleKey enum valueTObject; kSkip enum valueTVirtualStreamerInfo; kSkipL enum valueTVirtualStreamerInfo; kSkipP enum valueTVirtualStreamerInfo; kSTL enum valueTVirtualStreamerInfo; kSTLp enum valueTVirtualStreamerInfo; kSTLstring enum valueTVirtualStreamerInfo; kStreamer enum valueTVirtualStreamerInfo; kStreamLoop enum valueTVirtualStreamerInfo; kTNamed enum valueTVirtualStreamerInfo; kTObject enum valueTVirtualStreamerInfo; kTString enum valueTVirtualStreamerInfo; kUChar enum valueTVirtualStreamerInfo; kUInt enum valueTVirtualStreamerInfo; kULong enum valueTVirtualStreamerInfo; kULong64 enum valueTVirtualStreamerInfo; kUnset enum valueTVirtualStreamerInfo; kUnsupportedConversion enum valueTVirtualStreamerInfo; kUShort enum valueTVirtualStreamerInfo; kWriteDelete enum valueTObject; kZombie enum valueTObject; ls(Option_t *option="""") const overrideTStreamerInfovirtual; MakeZombie()TObjectinlineprotected; MatchLegacyCheckSum(UInt_t checksum) constTStreamerInfo; MayNotUse(const char *method) constTObject; New(void *obj=nullptr) overrideTStreamerInfovirtual; NewArray(Long_t nElements, void *ary=nullptr) overrideTStreamerInfovirtual; NewInfo(TClass *cl) overrideTStreamerInfoinlinevirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TStreamerInfo &)=deleteTStreamerInfoprivate; TVirtualStreamerInfo::operator=(const TVirtualStreamerInfo &)TVirtualStreamerInfoprotected; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Optimize(Bool_t opt=kTRUE)TVirtualStre",MatchSource.WIKI,doc/master/classTStreamerInfo-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfo-members.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html
Deployability,update,update,"tic void PrintValueAux (char *ladd, Int_t atype, TStreamerElement *aElement, Int_t aleng, Int_t *count);  print value of element in object at pointer, type atype, leng aleng or *count The function may be called in two ways: -method1 len < 0 i is assumed to be the TStreamerElement number i in StreamerInfo -method2 len >= 0 i is the type address of variable is directly pointer. ;  . Private Attributes; UInt_t fCheckSum;  Checksum of original class. ;  ; TClass * fClass;  !pointer to class ;  ; Int_t fClassVersion;  Class version identifier. ;  ; TCompInfo * fComp;  ![fNslots with less than fElements->GetEntries()*1.5 used] Compiled info ;  ; TCompInfo ** fCompFull;  ![fElements->GetEntries()] ;  ; TCompInfo ** fCompOpt;  ![fNdata] ;  ; TObjArray * fElements;  Array of TStreamerElements. ;  ; Int_t fNdata;  !number of optimized elements ;  ; Int_t fNfulldata;  !number of elements ;  ; Int_t fNslots;  !total number of slots in fComp. ;  ; Int_t fNumber;  !Unique identifier ;  ; Int_t fNVirtualInfoLoc;  ! Number of virtual info location to update. ;  ; Version_t fOldVersion;  ! Version of the TStreamerInfo object read from the file ;  ; Int_t fOnFileClassVersion;  !Class version identifier as stored on file. ;  ; TStreamerInfoActions::TActionSequence * fReadMemberWise;  ! List of read action resulting from the compilation for use in member wise streaming. ;  ; TStreamerInfoActions::TActionSequence * fReadMemberWiseVecPtr;  ! List of read action resulting from the compilation for use in member wise streaming. ;  ; TStreamerInfoActions::TActionSequence * fReadObjectWise;  ! List of read action resulting from the compilation. ;  ; TStreamerInfoActions::TActionSequence * fReadText;  ! List of text read action resulting from the compilation, used for JSON. ;  ; Int_t fSize;  !size of the persistent class ;  ; ULong_t * fVirtualInfoLoc;  ![fNVirtualInfoLoc] Location of the pointer to the TStreamerInfo inside the object (when emulated) ;  ; TStreamerInfoActions::TActionSequence ",MatchSource.WIKI,doc/master/classTStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html
Energy Efficiency,allocate,allocate," k, Int_t eoffset) const;  ; Double_t GetValueSTL (TVirtualCollectionProxy *cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const;  ; Double_t GetValueSTLP (TVirtualCollectionProxy *cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const;  ; TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions (Bool_t forCollection);  ; TStreamerInfoActions::TActionSequence * GetWriteObjectWiseActions ();  ; TStreamerInfoActions::TActionSequence * GetWriteTextActions ();  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  List the TStreamerElement list and also the precomputed tables if option contains the string ""incOrig"", also prints the original (non-optimized elements in the list of compiled elements. ;  ; Bool_t MatchLegacyCheckSum (UInt_t checksum) const;  Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ;  ; void * New (void *obj=nullptr) override;  An emulated object is created at address obj, if obj is null we allocate memory for the object. ;  ; void * NewArray (Long_t nElements, void *ary=nullptr) override;  An array of emulated objects is created at address ary, if ary is null, we allocate memory for the array. ;  ; TVirtualStreamerInfo * NewInfo (TClass *cl) override;  ; void PrintValue (const char *name, char *pointer, Int_t i, Int_t len, Int_t lenmax=1000) const;  print value of element i in object at pointer The function may be called in two ways: -method1 len < 0 i is assumed to be the TStreamerElement number i in StreamerInfo -method2 len >= 0 i is the type address of variable is directly pointer. ;  ; void PrintValueClones (const char *name, TClonesArray *clones, Int_t i, Int_t eoffset, Int_t lenmax=1000) const;  Print value of element i in a TClonesArray. ;  ; void PrintValueSTL (const char *name, TVirtualCollectionProxy *cont, Int_t i, Int_t eoffset, Int_t lenmax=1000) const;  Print value of element i in a TClonesArray. ;  ; template<class ",MatchSource.WIKI,doc/master/classTStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html
Integrability,rout,routine,"t (const char *) const override;  Return the offset of the data member as indicated by this StreamerInfo. ;  ; Int_t GetOffset (Int_t id) const override;  ; Version_t GetOldVersion () const override;  ; Int_t GetOnFileClassVersion () const override;  ; TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions (Bool_t forCollection);  ; TStreamerInfoActions::TActionSequence * GetReadObjectWiseActions ();  ; TStreamerInfoActions::TActionSequence * GetReadTextActions ();  ; Int_t GetSize () const override;  Return total size of all persistent elements of the class (with offsets). ;  ; Int_t GetSizeElements () const;  Return total size of all persistent elements of the class use GetSize if you want to get the real size in memory. ;  ; TStreamerElement * GetStreamerElement (const char *datamember, Int_t &offset) const override;  Return the StreamerElement of ""datamember"" inside our class or any of its base classes. ;  ; TStreamerElement * GetStreamerElementReal (Int_t i, Int_t j) const;  Obsolete: this routine is obsolete and should not longer be used. ;  ; Int_t GetType (Int_t id) const;  ; template<typename T > ; T GetTypedValue (char *pointer, Int_t i, Int_t j, Int_t len) const;  Return value of element i in object at pointer. ;  ; template<typename T > ; T GetTypedValueClones (TClonesArray *clones, Int_t i, Int_t j, Int_t k, Int_t eoffset) const;  ; template<typename T > ; T GetTypedValueSTL (TVirtualCollectionProxy *cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const;  Return value of element i in object number j in a TClonesArray and eventually element k in a sub-array. ;  ; template<typename T > ; T GetTypedValueSTLP (TVirtualCollectionProxy *cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const;  Return value of element i in object number j in a TClonesArray and eventually element k in a sub-array. ;  ; Double_t GetValue (char *pointer, Int_t i, Int_t j, Int_t len) const;  ; Double_t GetValueClones (TClonesArray *clones, Int_t i, Int_t j, Int_t k, Int_t ",MatchSource.WIKI,doc/master/classTStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html
Modifiability,inherit,inherited,"an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; A TStreamerInfo is a list of TStreamerElement objects (one per data member or base class). When streaming an object, the system (TClass) loops on all the TStreamerElement objects and calls the appropriate function for each element type. ; Definition at line 39 of file TStreamerInfo.h. Classes; class  TCompInfo;  ; class  TPointerCollectionAdapter;  . Public Types; typedef TCompInfo TCompInfo_t;  ;  Public Types inherited from TVirtualStreamerInfo; enum  EReadWrite { ;   kBase = 0; , kOffsetL = 20; , kOffsetP = 40; , kCounter = 6; , ;   kCharStar = 7; , kChar = 1; , kShort = 2; , kInt = 3; , ;   kLong = 4; , kFloat = 5; , kDouble = 8; , kDouble32 = 9; , ;   kLegacyChar = 10; , kUChar = 11; , kUShort = 12; , kUInt = 13; , ;   kULong = 14; , kBits = 15; , kLong64 = 16; , kULong64 = 17; , ;   kBool = 18; , kFloat16 = 19; , kObject = 61; , kAny = 62; , ;   kObjectp = 63; , kObjectP = 64; , kTString = 65; , kTObject = 66; , ;   kTNamed = 67; , kAnyp = 68; , kAnyP = 69; , kAnyPnoVT = 70; , ;   kSTLp = 71; , kSkip = 100; , kSkipL = 120; , kSkipP = 140; , ;   kConv = 200; , kConvL = 220; , kConvP = 240; , kSTL = ROOT::kSTLany; , ;   kSTLstring = ROOT::kSTLstring; , kStreamer = 500; , kStreamLoop = 501; , kCache = 600; , ;   kArtificial = 1000; , kCacheNew = 1001; , kCacheDelete = 1002; , kNeedObjectForVirtualBaseClass = 99997; , ;   kMissing = 99999; , kNoType = -1; , kUnsupportedConversion = -2; , kUnset = -3. };  EReadWrite Enumerator. More...;  ; enum  EStatusBits { ;   kCannotOptimize = (1ULL << ( 12 )); , kIgnoreTObjectStreamer = (1ULL << ( 13 )); , kRecovered = (1ULL << ( 14 )); , kNeedCheck = (1ULL << ( 15 )); , ;   kIsCompiled = (1ULL << ( 16 )); , kBuildOldUsed = (1ULL << ( 17 )); , kBuildRunning = (1ULL << ( 18 )). };  ; enum class  EStatusBitsDupExceptions { kIgnoreTObjectStreamer = TVirtualStreamerInfo::kIgnoreTObjectStreamer; };  ;  Public Types inherit",MatchSource.WIKI,doc/master/classTStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html
Performance,load,load," kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TStreamerInfo ();  Status bits See TVirtualStreamerInfo::EStatusBits for the values. ;  ;  TStreamerInfo (TClass *cl);  Create a TStreamerInfo object. ;  ;  ~TStreamerInfo () override;  TStreamerInfo dtor. ;  ; void Build (Bool_t isTransient=kFALSE) override;  Build the I/O data structure for the current class version. ;  ; void BuildCheck (TFile *file=nullptr, Bool_t load=kTRUE) override;  Check if built and consistent with the class dictionary. ;  ; void BuildEmulated (TFile *file) override;  Create an Emulation TStreamerInfo object. ;  ; Bool_t BuildFor (const TClass *cl) override;  Check if we can build this for foreign class - do we have some rules to do that. ;  ; void BuildOld () override;  rebuild the TStreamerInfo structure ;  ; void CallShowMembers (const void *obj, TMemberInspector &insp, Bool_t isTransient) const override;  Emulated a call ShowMembers() on the obj of this class type, passing insp and parent. ;  ; void Clear (Option_t *="""") override;  If opt contains 'built', reset this StreamerInfo as if Build or BuildOld was never called on it (useful to force their re-running). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Bool_t CompareContent (TClass *cl, TVirtualStreamerInfo *info, Bool_t warn, Bool_t complete, TFile *file) override;  Return True if the current StreamerI",MatchSource.WIKI,doc/master/classTStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html
Security,checksum,checksum,"nst std::string &secondname, bool silent, size_t hint_pair_offset, size_t hint_pair_size) override;  Generate the TClass and TStreamerInfo for the requested pair. ;  ; TVirtualStreamerInfo * GenerateInfoForPair (const std::string &pairclassname, bool silent, size_t hint_pair_offset, size_t hint_pair_size) override;  Generate the TClass and TStreamerInfo for the requested pair. ;  ; TClassStreamer * GenExplicitClassStreamer (const ::ROOT::Detail::TCollectionProxyInfo &info, TClass *cl) override;  Generate class streamer from static functions. ;  ; TVirtualCollectionProxy * GenExplicitProxy (const ::ROOT::Detail::TCollectionProxyInfo &info, TClass *cl) override;  Generate proxy from static functions. ;  ; TClass * GetActualClass (const void *obj) const override;  Assuming that obj points to (the part of) an object that is of the type described by this streamerInfo, return the actual type of the object (i.e. ;  ; UInt_t GetCheckSum () const override;  ; UInt_t GetCheckSum (TClass::ECheckSum code) const;  Recalculate the checksum of this TStreamerInfo based on its code. ;  ; TClass * GetClass () const override;  ; Int_t GetClassVersion () const override;  ; Int_t GetDataMemberOffset (TDataMember *dm, TMemberStreamer *&streamer) const;  Compute data member offset. ;  ; TStreamerElement * GetElem (Int_t id) const override;  ; TStreamerElement * GetElement (Int_t id) const override;  ; Int_t GetElementOffset (Int_t id) const override;  ; TObjArray * GetElements () const override;  ; Int_t GetLength (Int_t id) const;  ; ULongptr_t GetMethod (Int_t id) const;  ; Int_t GetNdata () const;  ; Int_t GetNelement () const;  ; Int_t GetNewType (Int_t id) const;  ; Int_t GetNumber () const override;  ; Int_t GetOffset (const char *) const override;  Return the offset of the data member as indicated by this StreamerInfo. ;  ; Int_t GetOffset (Int_t id) const override;  ; Version_t GetOldVersion () const override;  ; Int_t GetOnFileClassVersion () const override;  ; TStreamerInfoActio",MatchSource.WIKI,doc/master/classTStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTStreamerInfoActions_1_1TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfoActions_1_1TActionSequence.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTStreamerInfoActions_1_1TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfoActions_1_1TActionSequence.html
Modifiability,inherit,inherited,". ROOT: TStreamerInfoActions::TActionSequence Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TStreamerInfoActions::TActionSequence Class Reference. . Definition at line 177 of file TStreamerInfoActions.h. Classes; struct  SequencePtr;  . Public Types; enum class  EStatusBits { kVectorPtrLooper = (1ULL << ( 14 )); };  ; using SequenceGetter_t = SequencePtr(*)(TStreamerInfo *info, TVirtualCollectionProxy *collectionProxy, TClass *originalClass);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TActionSequence (TVirtualStreamerInfo *info, UInt_t maxdata, Bool_t isForVecPtr=kFALSE);  ;  ~TActionSequence () override;  ; template<typename action_t > ; void AddAction (action_t action, TConfiguration *conf);  ; void AddAction (const TConfiguredAction &action);  ; void AddToOffset (Int_t delta);  ; void AddToSubSequence (TActionSequence *sequence, const TIDs &element_ids, Int_t offset, SequenceGetter_t create);  ; TActionSequence * CreateCopy ();  ; TActionSequence * CreateSubSequence (const std::vector< Int_t > &element_ids, size_t offset);  ; TActionSequence * CreateSubSequence (const TIDs &element_ids, size_t offset, SequenceGetter_t crea",MatchSource.WIKI,doc/master/classTStreamerInfoActions_1_1TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfoActions_1_1TActionSequence.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTStreamerInfoActions_1_1TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfoActions_1_1TActionSequence.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html
Modifiability,inherit,inherited,"eamerInfoActions.h. Public Member Functions;  TConfiguredAction ();  ;  TConfiguredAction (const TConfiguredAction &rval);  ;  TConfiguredAction (TStreamerInfoAction_t action, TConfiguration *conf);  ;  TConfiguredAction (TStreamerInfoLoopAction_t action, TConfiguration *conf);  ;  TConfiguredAction (TStreamerInfoVecPtrLoopAction_t action, TConfiguration *conf);  ;  ~TConfiguredAction () override;  ; TClass * IsA () const override;  ; Int_t operator() (TBuffer &buffer, void *object) const;  ; Int_t operator() (TBuffer &buffer, void *start_collection, const void *end_collection) const;  ; Int_t operator() (TBuffer &buffer, void *start_collection, const void *end_collection, const TLoopConfiguration *loopconf) const;  ; TConfiguredAction & operator= (const TConfiguredAction &rval);  ; void PrintDebug (TBuffer &buffer, void *object) const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html
Performance,cache,cached,". ROOT: TStreamerInfo::TCompInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TStreamerInfo::TCompInfo Class Reference. . Definition at line 41 of file TStreamerInfo.h. Public Member Functions;  TCompInfo ();  ;  ~TCompInfo ();  ; void Update (const TClass *oldcl, TClass *newcl);  Update the TClass pointer cached in this object. ;  . Public Attributes; TClass * fClass;  Not Owned. ;  ; TString fClassName;  ; TStreamerElement * fElem;  Not Owned. ;  ; Int_t fLength;  ; ULongptr_t fMethod;  ; TClass * fNewClass;  Not Owned. ;  ; Int_t fNewType;  ; Int_t fOffset;  ; TMemberStreamer * fStreamer;  Not Owned. ;  ; Int_t fType;  . Constructor & Destructor Documentation. ◆ TCompInfo(). TStreamerInfo::TCompInfo::TCompInfo ; (; ). inline . Definition at line 57 of file TStreamerInfo.h. ◆ ~TCompInfo(). TStreamerInfo::TCompInfo::~TCompInfo ; (; ). inline . Definition at line 59 of file TStreamerInfo.h. Member Function Documentation. ◆ Update(). void TStreamerInfo::TCompInfo::Update ; (; const TClass * ; oldcl, . TClass * ; newcl . ). Update the TClass pointer cached in this object. ; Definition at line 5644 of file TStreamerInfo.cxx. Member Data Documentation. ◆ fClass. TClass* TStreamerInfo::TCompInfo::fClass. Not Owned. ; Definition at line 53 of file TStreamerInfo.h. ◆ fClassName. TString TStreamerInfo::TCompInfo::fClassName. Definition at line 55 of file TStreamerInfo.h. ◆ fElem. TStreamerElement* TStreamerInfo::TCompInfo::fElem. Not Owned. ; Definition at line 51 of file TStreamerInfo.h. ◆ fLength. Int_t TStreamerInfo::TCompInfo::fLength. Definition at line 50 of file TStreamerInfo.h. ◆ fMethod. ULongptr_t TStreamerInfo::TCompInfo::fMethod. Definition at line 52 of file TStreamerInfo.h. ◆ fNewClass. TClass* TStreamerInfo::TCompInfo::fNewClass. Not Owned. ; Definition at line 54 of file TStreamerInfo.h. ◆ fNewType. Int_t TStreamerI",MatchSource.WIKI,doc/master/classTStreamerInfo_1_1TCompInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerInfo_1_1TCompInfo.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerLoop.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerLoop.html
Modifiability,inherit,inherited,"char *countName, const char *countClass, Int_t version, const char *typeName);  Create a TStreamerLoop object. ;  ; virtual ~TStreamerLoop ();  TStreamerLoop dtor. ;  ; const char * GetCountClass () const;  ; const char * GetCountName () const;  ; Int_t GetCountVersion () const;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; ULongptr_t GetMethod () const override;  return address of counter ;  ; Int_t GetSize () const override;  Returns size of counter in bytes. ;  ; Bool_t HasCounter () const override;  ; void Init (TVirtualStreamerInfo *obj=nullptr) override;  Setup the element. ;  ; TClass * IsA () const override;  ; Bool_t IsaPointer () const override;  ; void SetCountClass (const char *clname);  ; void SetCountName (const char *name);  ; void SetCountVersion (Int_t count);  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerLoop. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; TClass * GetNewClass () const;  ; Int_t GetNewTyp",MatchSource.WIKI,doc/master/classTStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerLoop.html
Performance,cache,cached,"rElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (tr",MatchSource.WIKI,doc/master/classTStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerLoop.html
Safety,detect,detected," function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; virtual void SetArrayDim (Int_t dim);  Set number of array dimensions. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virt",MatchSource.WIKI,doc/master/classTStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerLoop.html
Security,hash,hash,"Class *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classTStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerLoop.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObject.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObject.html
Modifiability,inherit,inherited,"OOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TStreamerObject Class Reference. . Definition at line 293 of file TStreamerElement.h. Public Member Functions;  TStreamerObject ();  Default ctor. ;  ;  TStreamerObject (const char *name, const char *title, Int_t offset, const char *typeName);  Create a TStreamerObject object. ;  ; virtual ~TStreamerObject ();  TStreamerObject dtor. ;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; Int_t GetSize () const override;  Returns size of object class in bytes. ;  ; void Init (TVirtualStreamerInfo *obj=nullptr) override;  Setup the element. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass ",MatchSource.WIKI,doc/master/classTStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObject.html
Performance,cache,cached," ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTrans",MatchSource.WIKI,doc/master/classTStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObject.html
Safety,detect,detected,") const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; virtual void SetArrayDim (Int_t dim);  Set number of array dimensions. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virt",MatchSource.WIKI,doc/master/classTStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObject.html
Security,hash,hash,"Class *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classTStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObject.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAny.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAny.html
Modifiability,inherit,inherited,"Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TStreamerObjectAny Class Reference. . Definition at line 312 of file TStreamerElement.h. Public Member Functions;  TStreamerObjectAny ();  Default ctor. ;  ;  TStreamerObjectAny (const char *name, const char *title, Int_t offset, const char *typeName);  Create a TStreamerObjectAny object. ;  ; virtual ~TStreamerObjectAny ();  TStreamerObjectAny dtor. ;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; Int_t GetSize () const override;  Returns size of anyclass in bytes. ;  ; void Init (TVirtualStreamerInfo *obj=nullptr) override;  Setup the element. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerObjectAny. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass ",MatchSource.WIKI,doc/master/classTStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAny.html
Performance,cache,cached," ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTrans",MatchSource.WIKI,doc/master/classTStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAny.html
Safety,detect,detected,") const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; virtual void SetArrayDim (Int_t dim);  Set number of array dimensions. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virt",MatchSource.WIKI,doc/master/classTStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAny.html
Security,hash,hash,"Class *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classTStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAny.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAnyPointer.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAnyPointer.html
Modifiability,inherit,inherited,"; List of all members ; TStreamerObjectAnyPointer Class Reference. . Definition at line 352 of file TStreamerElement.h. Public Member Functions;  TStreamerObjectAnyPointer ();  Default ctor. ;  ;  TStreamerObjectAnyPointer (const char *name, const char *title, Int_t offset, const char *typeName);  Create a TStreamerObjectAnyPointer object. ;  ; virtual ~TStreamerObjectAnyPointer ();  TStreamerObjectAnyPointer dtor. ;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; Int_t GetSize () const override;  Returns size of objectpointer in bytes. ;  ; void Init (TVirtualStreamerInfo *obj=nullptr) override;  Setup the element. ;  ; TClass * IsA () const override;  ; Bool_t IsaPointer () const override;  ; void SetArrayDim (Int_t dim) override;  Set number of array dimensions. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerObjectAnyPointer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass ",MatchSource.WIKI,doc/master/classTStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAnyPointer.html
Performance,cache,cached," ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the ele",MatchSource.WIKI,doc/master/classTStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAnyPointer.html
Safety,detect,detected,"onst;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update (const TClass *oldClass, TClass *newClass);  function called",MatchSource.WIKI,doc/master/classTStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAnyPointer.html
Security,hash,hash,"Class *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classTStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAnyPointer.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectPointer.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectPointer.html
Modifiability,inherit,inherited,"te Member Functions |; List of all members ; TStreamerObjectPointer Class Reference. . Definition at line 331 of file TStreamerElement.h. Public Member Functions;  TStreamerObjectPointer ();  Default ctor. ;  ;  TStreamerObjectPointer (const char *name, const char *title, Int_t offset, const char *typeName);  Create a TStreamerObjectPointer object. ;  ; virtual ~TStreamerObjectPointer ();  TStreamerObjectPointer dtor. ;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; Int_t GetSize () const override;  Returns size of objectpointer in bytes. ;  ; void Init (TVirtualStreamerInfo *obj=nullptr) override;  Setup the element. ;  ; TClass * IsA () const override;  ; Bool_t IsaPointer () const override;  ; void SetArrayDim (Int_t dim) override;  Set number of array dimensions. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerObjectPointer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass ",MatchSource.WIKI,doc/master/classTStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectPointer.html
Performance,cache,cached," ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the ele",MatchSource.WIKI,doc/master/classTStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectPointer.html
Safety,detect,detected,"onst;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update (const TClass *oldClass, TClass *newClass);  function called",MatchSource.WIKI,doc/master/classTStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectPointer.html
Security,hash,hash,"Class *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classTStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerObjectPointer.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerSTL.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerSTL.html
Modifiability,variab,variable,". ROOT: TStreamerSTL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TStreamerSTL Class Reference. . Definition at line 391 of file TStreamerElement.h. Public Member Functions;  TStreamerSTL ();  Default ctor. ;  ;  TStreamerSTL (const char *name, const char *title, Int_t offset, const char *typeName, const char *trueType, Bool_t dmPointer);  Create a TStreamerSTL object. ;  ;  TStreamerSTL (const char *name, const char *title, Int_t offset, const char *typeName, const TVirtualCollectionProxy &proxy, Bool_t dmPointer);  Create a TStreamerSTL object. ;  ; virtual ~TStreamerSTL ();  TStreamerSTL dtor. ;  ; Bool_t CannotSplit () const override;  We can not split STL's which are inside a variable size array. ;  ; Int_t GetCtype () const;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; Int_t GetSize () const override;  Returns size of STL container in bytes. ;  ; Int_t GetSTLtype () const;  ; TClass * IsA () const override;  ; Bool_t IsaPointer () const override;  Return true if the data member is a pointer. ;  ; Bool_t IsBase () const override;  Return kTRUE if the element represent a base class. ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; void SetCtype (Int_t t);  ; void SetSTLtype (Int_t t);  ; void SetStreamer (TMemberStreamer *streamer) override;  Set pointer to Streamer function for this element NOTE: we do not take ownership. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerSTL. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *t",MatchSource.WIKI,doc/master/classTStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerSTL.html
Performance,cache,cached,"rNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element r",MatchSource.WIKI,doc/master/classTStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerSTL.html
Safety,detect,detected,"t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; virtual void SetArrayDim (Int_t dim);  Set number of array dimensions. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update (const TClass *oldClass, TClass *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited fr",MatchSource.WIKI,doc/master/classTStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerSTL.html
Security,hash,hash,"Class *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classTStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerSTL.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerSTLstring.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerSTLstring.html
Modifiability,inherit,inherited,". ROOT: TStreamerSTLstring Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TStreamerSTLstring Class Reference. . Definition at line 425 of file TStreamerElement.h. Public Member Functions;  TStreamerSTLstring ();  Default ctor. ;  ;  TStreamerSTLstring (const char *name, const char *title, Int_t offset, const char *typeName, Bool_t dmPointer);  Create a TStreamerSTLstring object. ;  ; virtual ~TStreamerSTLstring ();  TStreamerSTLstring dtor. ;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; Int_t GetSize () const override;  Returns size of anyclass in bytes. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerSTLstring. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerSTL;  TStreamerSTL ();  Default ctor. ;  ;  TStreamerSTL (const char *name, const char *title, Int_t offset, const char *typeName, const char *trueType, Bool_t dmPointer);  Create a TStreamerSTL object. ;  ;  TStreamerSTL (const char *name, const char *title, Int_t offset, const char *typeName, const TVirtualCollectionProxy &proxy, Bool_t dmPointer);  Create a TStreamerSTL object. ;  ; virtual ~TStreamerSTL ();  TStreamerSTL dtor. ;  ; Bool_t CannotSplit () const override;  We can not split STL's which are inside a variable size array. ;  ; Int_t GetCtype () const;  ; Int_t GetSTLtype () const;  ; Bool_t IsaPointer () const override;  Return true if the data member is a pointer. ;  ; Bool_t IsBase () const override;  Return kTRUE if the element represent a base class. ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; void SetCtype (Int_t t);  ; void SetSTLtype (Int_t t);  ; void SetStreamer (TMemberStreamer ",MatchSource.WIKI,doc/master/classTStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerSTLstring.html
Performance,cache,cached,"rNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element r",MatchSource.WIKI,doc/master/classTStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerSTLstring.html
Safety,detect,detected,"t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; virtual void SetArrayDim (Int_t dim);  Set number of array dimensions. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update (const TClass *oldClass, TClass *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited fr",MatchSource.WIKI,doc/master/classTStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerSTLstring.html
Security,hash,hash,"Class *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classTStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerSTLstring.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerString.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerString.html
Modifiability,inherit,inherited,". ROOT: TStreamerString Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TStreamerString Class Reference. . Definition at line 373 of file TStreamerElement.h. Public Member Functions;  TStreamerString ();  Default ctor. ;  ;  TStreamerString (const char *name, const char *title, Int_t offset);  Create a TStreamerString object. ;  ; virtual ~TStreamerString ();  TStreamerString dtor. ;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; Int_t GetSize () const override;  Returns size of anyclass in bytes. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerString. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t ",MatchSource.WIKI,doc/master/classTStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerString.html
Performance,cache,cached," ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if t",MatchSource.WIKI,doc/master/classTStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerString.html
Safety,detect,detected,"tOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; virtual void SetArrayDim (Int_t dim);  Set number of array dimensions. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virt",MatchSource.WIKI,doc/master/classTStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerString.html
Security,hash,hash,"Class *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classTStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStreamerString.html
Availability,error,error,"); const. Returns true if all characters in string are octal digits (0-7). ; Returns false in case string length is 0 or string contains other characters. ; Definition at line 1924 of file TString.cxx. ◆ IsWhitespace(). Bool_t TString::IsWhitespace ; (; ); const. inline . Definition at line 415 of file TString.h. ◆ Itoa(). TString TString::Itoa ; (; Int_t ; value, . Int_t ; base . ). static . Converts an Int_t to a TString with respect to the base specified (2-36). ; Thus it is an enhanced version of sprintf (adapted from versions 0.4 of http://www.jb.man.ac.uk/~slowe/cpp/itoa.html). Usage: the following statement produce the same output, namely ""1111"" std::cout << TString::Itoa(15,2) ;; std::cout << TString::Itoa(0xF,2) ; /// 0x prefix to handle hex; std::cout << TString::Itoa(017,2) ; /// 0 prefix to handle oct; TString::Itoastatic TString Itoa(Int_t value, Int_t base)Converts an Int_t to a TString with respect to the base specified (2-36).Definition TString.cxx:2092; In case of error returns the ""!"" string. ; Definition at line 2092 of file TString.cxx. ◆ Last(). Ssiz_t TString::Last ; (; char ; c); const. Find last occurrence of a character c. ; Definition at line 931 of file TString.cxx. ◆ Length(). Ssiz_t TString::Length ; (; ); const. inline . Definition at line 417 of file TString.h. ◆ LLtoa(). TString TString::LLtoa ; (; Long64_t ; value, . Int_t ; base . ). static . Converts a Long64_t to a TString with respect to the base specified (2-36). ; Thus it is an enhanced version of sprintf (adapted from versions 0.4 of http://www.jb.man.ac.uk/~slowe/cpp/itoa.html). In case of error returns the ""!"" string. ; Definition at line 2144 of file TString.cxx. ◆ MaxSize(). static Ssiz_t TString::MaxSize ; (; ). inlinestaticprivate . Definition at line 261 of file TString.h. ◆ MaxWaste(). Ssiz_t TString::MaxWaste ; (; Ssiz_t ; mw = 15). static . Set maximum space that may be wasted in a string before doing a resize. ; Default is 15. ; Definition at line 1612 of file TStri",MatchSource.WIKI,doc/master/classTString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTString.html
Energy Efficiency,allocate,allocated,"(; Ssiz_t ; nc). Return string capacity. ; If nc != current capacity Clone() the string in a string with the desired capacity. ; Definition at line 442 of file TString.cxx. ◆ Chop(). TString & TString::Chop ; (; ). inline . Definition at line 691 of file TString.h. ◆ Class(). static TClass * TString::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TString::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TString::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 473 of file TString.h. ◆ Clear(). void TString::Clear ; (; ). Clear string without changing its capacity. ; Definition at line 1235 of file TString.cxx. ◆ Clobber(). Ssiz_t TString::Clobber ; (; Ssiz_t ; nc). protected . Clear string and make sure it has a capacity of nc. ; WarningIf nc > MaxSize(), then Fatal() is raised, and only MaxSize() elements are allocated if Fatal does not abort ; ReturnsResulting allocated capacity (after clamping, if needed) ; Definition at line 1246 of file TString.cxx. ◆ Clone(). void TString::Clone ; (; Ssiz_t ; tot). private . Make self a distinct copy with capacity of at least tot, where tot cannot be smaller than the current length. ; Preserve previous contents. WarningIf tot > MaxSize(), then Fatal() is raised and only MaxSize() elements are allocated ; Definition at line 1279 of file TString.cxx. ◆ CompareTo() [1/2]. int TString::CompareTo ; (; const char * ; cs2, . ECaseCompare ; cmp = kExact . ); const. Compare a string to char *cs2. ; Returns returns zero if the two strings are identical, otherwise returns the difference between the first two differing bytes (treated as unsigned char values, so that ‘\200’ is greater than ‘\0’, for example). Zero-length strings are always identical. ; Definition at line 457 of file TString.cxx. ◆ CompareTo() [2/2]. int TString::CompareTo ; (; const TString & ; str, . ECaseCompare ; cmp = kExa",MatchSource.WIKI,doc/master/classTString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTString.html
Integrability,depend,depending,", . Bool_t ; chop = kTRUE . ). Read one line from the stream, including the \n, or until EOF. ; Remove the trailing [\r]\n if chop is true. Returns kTRUE if data was read. ; Definition at line 204 of file Stringio.cxx. ◆ GetShortPointer() [1/2]. char * TString::GetShortPointer ; (; ). inlineprivate . Definition at line 254 of file TString.h. ◆ GetShortPointer() [2/2]. const char * TString::GetShortPointer ; (; ); const. inlineprivate . Definition at line 255 of file TString.h. ◆ GetShortSize(). Ssiz_t TString::GetShortSize ; (; ); const. inlineprivate . Definition at line 244 of file TString.h. ◆ Hash() [1/2]. UInt_t TString::Hash ; (; const void * ; txt, . Int_t ; ntxt . ). static . Calculates hash index from any char string. ; (static function); For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. This employs two different hash functions, depending on ntxt:; ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/ . Definition at line 850 of file TString.cxx. ◆ Hash() [2/2]. UInt_t TString::Hash ; (; ECaseCompare ; cmp = kExact); const. Return hash value. ; Definition at line 677 of file TString.cxx. ◆ HashCase(). UInt_t TString::HashCase ; (; ); const. private . Return a case-sensitive hash value (endian independent). ; Definition at line 633 of file TString.cxx. ◆ HashFoldCase(). UInt_t TString::HashFoldCase ; (; ); const. private . Return a case-insensitive hash value (endian independent). ; Definition at line 662 of file TString.cxx. ◆ Index() [1/8]. Ssiz_t TString::Index ; (; const char * ; pat, . Ssiz_t ; i = 0, . ECaseCompare ; cmp = kExact . ); const. inline . Definition at line 651 of file TString.h. ◆ Index() [2/8]. Ssiz_t TString::Index ; (; const char * ; pattern, . Ssiz_t ; plen, . Ssiz_t ; startIndex, . ECaseCompare ; cmp . ); const. Search for a string in the TString. ; Pl",MatchSource.WIKI,doc/master/classTString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTString.html
Modifiability,enhance,enhanced,"xpressed in the base specified (range=2-36), i.e. ; {0,1} for base 2, {0-9,a-f,A-F} for base 16, {0-9,a-z,A-Z} for base 36. Returns false in case string length is 0 or string contains other characters. ; Definition at line 1957 of file TString.cxx. ◆ IsLong(). Bool_t TString::IsLong ; (; ); const. inlineprivate . Definition at line 238 of file TString.h. ◆ IsNull(). Bool_t TString::IsNull ; (; ); const. inline . Definition at line 414 of file TString.h. ◆ IsOct(). Bool_t TString::IsOct ; (; ); const. Returns true if all characters in string are octal digits (0-7). ; Returns false in case string length is 0 or string contains other characters. ; Definition at line 1924 of file TString.cxx. ◆ IsWhitespace(). Bool_t TString::IsWhitespace ; (; ); const. inline . Definition at line 415 of file TString.h. ◆ Itoa(). TString TString::Itoa ; (; Int_t ; value, . Int_t ; base . ). static . Converts an Int_t to a TString with respect to the base specified (2-36). ; Thus it is an enhanced version of sprintf (adapted from versions 0.4 of http://www.jb.man.ac.uk/~slowe/cpp/itoa.html). Usage: the following statement produce the same output, namely ""1111"" std::cout << TString::Itoa(15,2) ;; std::cout << TString::Itoa(0xF,2) ; /// 0x prefix to handle hex; std::cout << TString::Itoa(017,2) ; /// 0 prefix to handle oct; TString::Itoastatic TString Itoa(Int_t value, Int_t base)Converts an Int_t to a TString with respect to the base specified (2-36).Definition TString.cxx:2092; In case of error returns the ""!"" string. ; Definition at line 2092 of file TString.cxx. ◆ Last(). Ssiz_t TString::Last ; (; char ; c); const. Find last occurrence of a character c. ; Definition at line 931 of file TString.cxx. ◆ Length(). Ssiz_t TString::Length ; (; ); const. inline . Definition at line 417 of file TString.h. ◆ LLtoa(). TString TString::LLtoa ; (; Long64_t ; value, . Int_t ; base . ). static . Converts a Long64_t to a TString with respect to the base specified (2-36). ; Thus it is an enhanced vers",MatchSource.WIKI,doc/master/classTString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTString.html
Safety,abort,abort,"(; Ssiz_t ; nc). Return string capacity. ; If nc != current capacity Clone() the string in a string with the desired capacity. ; Definition at line 442 of file TString.cxx. ◆ Chop(). TString & TString::Chop ; (; ). inline . Definition at line 691 of file TString.h. ◆ Class(). static TClass * TString::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TString::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TString::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 473 of file TString.h. ◆ Clear(). void TString::Clear ; (; ). Clear string without changing its capacity. ; Definition at line 1235 of file TString.cxx. ◆ Clobber(). Ssiz_t TString::Clobber ; (; Ssiz_t ; nc). protected . Clear string and make sure it has a capacity of nc. ; WarningIf nc > MaxSize(), then Fatal() is raised, and only MaxSize() elements are allocated if Fatal does not abort ; ReturnsResulting allocated capacity (after clamping, if needed) ; Definition at line 1246 of file TString.cxx. ◆ Clone(). void TString::Clone ; (; Ssiz_t ; tot). private . Make self a distinct copy with capacity of at least tot, where tot cannot be smaller than the current length. ; Preserve previous contents. WarningIf tot > MaxSize(), then Fatal() is raised and only MaxSize() elements are allocated ; Definition at line 1279 of file TString.cxx. ◆ CompareTo() [1/2]. int TString::CompareTo ; (; const char * ; cs2, . ECaseCompare ; cmp = kExact . ); const. Compare a string to char *cs2. ; Returns returns zero if the two strings are identical, otherwise returns the difference between the first two differing bytes (treated as unsigned char values, so that ‘\200’ is greater than ‘\0’, for example). Zero-length strings are always identical. ; Definition at line 457 of file TString.cxx. ◆ CompareTo() [2/2]. int TString::CompareTo ; (; const TString & ; str, . ECaseCompare ; cmp = kExa",MatchSource.WIKI,doc/master/classTString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTString.html
Security,access,accessed,". ROOT: TString Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TString Class ReferenceCore ROOT classes » Base ROOT classes. ; Basic string class. ; Cannot be stored in a TCollection... use TObjString instead.; The underlying string is stored as a char* that can be accessed via TString::Data(). TString provides Short String Optimization (SSO) so that short strings (<15 on 64-bit and <11 on 32-bit) are contained in the TString internal data structure without the need for mallocing the required space.; Substring operations are provided by the TSubString class, which holds a reference to the original string and its data, along with the offset and length of the substring. To retrieve the substring as a TString, construct a TString from it, eg: root [0] TString s(""hello world""); root [1] TString s2( s(0,5) ); root [2] s2; (class TString)""hello""; hellostd::string hello(std::string who, std::string msg)Definition FunModule.C:5; TStringBasic string class.Definition TString.h:139. Definition at line 139 of file TString.h. Classes; struct  LongStr_t;  ; struct  RawStr_t;  ; struct  Rep_t;  ; struct  ShortStr_t;  ; union  UStr_t;  . Public Types; enum  ECaseCompare { kExact; , kIgnoreCase; };  ; enum  EStripType { kLeading = 0x1; , kTrailing = 0x2; , kBoth = 0x3; };  ; using size_type = Ssiz_t;  . Public Member Functions;  TString ();  TString default ctor. ;  ;  TString (char c);  Initialize a string with a single character. ;  ;  TString (char c, Ssiz_t s);  Initialize the first n locations of a TString with character c. ;  ;  TString (const char *s);  Create TString and",MatchSource.WIKI,doc/master/classTString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTString.html
Usability,simpl,simple,", . Bool_t ; chop = kTRUE . ). Read one line from the stream, including the \n, or until EOF. ; Remove the trailing [\r]\n if chop is true. Returns kTRUE if data was read. ; Definition at line 204 of file Stringio.cxx. ◆ GetShortPointer() [1/2]. char * TString::GetShortPointer ; (; ). inlineprivate . Definition at line 254 of file TString.h. ◆ GetShortPointer() [2/2]. const char * TString::GetShortPointer ; (; ); const. inlineprivate . Definition at line 255 of file TString.h. ◆ GetShortSize(). Ssiz_t TString::GetShortSize ; (; ); const. inlineprivate . Definition at line 244 of file TString.h. ◆ Hash() [1/2]. UInt_t TString::Hash ; (; const void * ; txt, . Int_t ; ntxt . ). static . Calculates hash index from any char string. ; (static function); For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. This employs two different hash functions, depending on ntxt:; ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/ . Definition at line 850 of file TString.cxx. ◆ Hash() [2/2]. UInt_t TString::Hash ; (; ECaseCompare ; cmp = kExact); const. Return hash value. ; Definition at line 677 of file TString.cxx. ◆ HashCase(). UInt_t TString::HashCase ; (; ); const. private . Return a case-sensitive hash value (endian independent). ; Definition at line 633 of file TString.cxx. ◆ HashFoldCase(). UInt_t TString::HashFoldCase ; (; ); const. private . Return a case-insensitive hash value (endian independent). ; Definition at line 662 of file TString.cxx. ◆ Index() [1/8]. Ssiz_t TString::Index ; (; const char * ; pat, . Ssiz_t ; i = 0, . ECaseCompare ; cmp = kExact . ); const. inline . Definition at line 651 of file TString.h. ◆ Index() [2/8]. Ssiz_t TString::Index ; (; const char * ; pattern, . Ssiz_t ; plen, . Ssiz_t ; startIndex, . ECaseCompare ; cmp . ); const. Search for a string in the TString. ; Pl",MatchSource.WIKI,doc/master/classTString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTString.html
Availability,error,error,"  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructNode.html
Energy Efficiency,allocate,allocated,"ns maximum number of objects displayed when the node is top node on scene. ;  ; TList * GetMembers () const;  Returns list with pointers to daughter nodes. ;  ; ULong_t GetMembersCount () const;  Returns numbers of members of node. ;  ; Float_t GetMiddle () const;  Returns center of outlining box on y-axis. ;  ; const char * GetName () const override;  Returns name of object. ;  ; ENodeType GetNodeType () const;  Returns type of node. ;  ; TStructNode * GetParent () const;  Returns pointer to parent node. ;  ; void * GetPointer () const;  Returns main pointer. ;  ; ULong_t GetRelativeMembersCount () const;  Returns relative numbers of members. ;  ; ULong_t GetRelativeSize () const;  Returns relative size of node. ;  ; ULong_t GetRelativeVolume () const;  Returns size or number of members. ;  ; Float_t GetRelativeVolumeRatio ();  Returns ratio - relative volume to area taken by utlining box. ;  ; ULong_t GetSize () const;  Returns size of node. ;  ; ULong_t GetTotalSize () const;  Returns total size of allocated memory in bytes. ;  ; TString GetTypeName () const;  Returns name of class. ;  ; ULong_t GetVolume () const;  Returns size or number of members. ;  ; Float_t GetVolumeRatio ();  Returns ratio - volme of node to area taken by outlining box. ;  ; Float_t GetWidth () const;  Returns width of outlining box. ;  ; Float_t GetX () const;  Returns X coordinate. ;  ; Float_t GetY () const;  Returns Y coordinate. ;  ; TClass * IsA () const override;  ; Bool_t IsCollapsed () const;  Returns true if node is colllapsed. ;  ; Bool_t IsSortable () const override;  Returns true, because we have overrided method Compare. ;  ; bool IsVisible () const;  Returns true if node is visible. ;  ; void SetAllMembersCount (ULong_t count);  Sets numbers of all members to ""number"". ;  ; void SetCollapsed (Bool_t collapsed);  Sets collapsing of node to ""collapse"". ;  ; void SetHeight (Float_t h);  Sets width of outlining box to ""w"". ;  ; void SetMaxLevel (UInt_t level);  Sets maximum numb",MatchSource.WIKI,doc/master/classTStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructNode.html
Integrability,message,message,"  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructNode.html
Modifiability,inherit,inherited,"ode on scene. ;  ; void SetMaxObjects (UInt_t max);  Sets maximum number of objects displayed when the node is top node on scene. ;  ; void SetMembers (TList *list);  Sets list of dauther nodes to ""list"". ;  ; void SetMembersCount (ULong_t count);  Sets number of members to ""number"". ;  ; void SetNodeType (ENodeType type);  Sets type of node to ""type"". ;  ; void SetPointer (void *pointer);  Sets main pointer to ""pointer"". ;  ; void SetSize (ULong_t size);  Sets size of node to ""size"". ;  ; void SetTotalSize (ULong_t size);  Sets total size of allocated memory in bytes to value ""size"". ;  ; void SetVisible (bool visible);  Sets visibility of node to ""visible"". ;  ; void SetWidth (Float_t w);  Sets width of outlining box to ""w"". ;  ; void SetX (Float_t x);  Sets X coordinate to ""x"". ;  ; void SetY (Float_t y);  Sets Y coordinate to ""y"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  ",MatchSource.WIKI,doc/master/classTStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructNode.html
Security,hash,hash,"xecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructNode.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructNodeProperty.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructNodeProperty.html
Modifiability,inherit,inherited,"me"" with color ""color"". ;  ;  TStructNodeProperty (const char *name, Pixel_t pixel);  Contructs a TStructNodeProperty with p as parent window for class ""name"" with color ""pixel"". ;  ;  ~TStructNodeProperty () override;  Destructor. ;  ; Int_t Compare (const TObject *obj) const override;  Overrided method. Compare two objects of TStructNodeProperty class. ;  ; TColor GetColor () const;  Returns color of class. ;  ; Pixel_t GetPixel () const;  Return color in Pixel_t format. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  Retruns true, because we have overrided method Compare. ;  ; void SetColor (const TColor &color);  Sets the color to ""color"". ;  ; void SetColor (Int_t color);  Sets the color to ""color"". ;  ; void SetColor (Pixel_t pixel);  Sets the color to ""pixel"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  P",MatchSource.WIKI,doc/master/classTStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructNodeProperty.html
Security,hash,hash," SetColor (Pixel_t pixel);  Sets the color to ""pixel"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method th",MatchSource.WIKI,doc/master/classTStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructNodeProperty.html
Availability,error,error,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructViewer.html
Energy Efficiency,allocate,allocated,"ect to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void AddNode (TStructNode *node, ULong_t size);  Find list with nodes on specified level and add node to this list and increment list of sizes and list of members. ;  ; void CountMembers (TClass *cl, TStructNode *parent, void *pointer);  Count allocated memory, increase member counters, find child nodes. ;  ; void Prepare ();  Create top node and find all member nodes. ;  ; void Reset ();  Deleting nodes, maps and array. ;  . Private Attributes; TList fColors;  ; TStructViewerGUI * fGUI;  ; TObjArray fLevelArray;  ; TExMap fLevelMembersCount;  ; TExMap fLevelSize;  ; void * fPointer;  ; TClass * fPointerClass;  ; TExMap fPointers;  ; TStructNode * fTopNode;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannot",MatchSource.WIKI,doc/master/classTStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructViewer.html
Integrability,message,message,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructViewer.html
Modifiability,inherit,inherited,");  Returns canvas used to keep TGeoVolumes. ;  ; TColor GetColor (const char *typeName);  Returns color associated with type ""typeName"". ;  ; TGMainFrame * GetFrame ();  Returns pointer to main window. ;  ; TExMap GetLevelMembersCount () const;  Returns TExMap with pairs <level number, number of objects> ;  ; TExMap GetLevelSize () const;  Returns TExMap with pairs <level number, size of level in bytes> ;  ; Bool_t GetLinksVisibility () const;  Get visibility of links between objects. ;  ; void * GetPointer () const;  Return main pointer. ;  ; TClass * IsA () const override;  ; void SetColor (TString name, Int_t color);  Sets color for the class ""name"" to color ""color"". ;  ; void SetLinksVisibility (Bool_t val);  ISets links visibility. ;  ; void SetPointer (void *ptr, const char *clname=nullptr);  Set main pointer of class ""clname"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructViewer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructViewer.html
Availability,error,error,"u don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html
Deployability,update,updates,"* GetCanvas ();  ; Int_t GetColor (TStructNode *node);  Returns color form fColors for given ""node"". ;  ; TStructNodeProperty * GetDefaultColor ();  Return default color for nodes. ;  ; Bool_t GetLinksVisibility () const;  Returns true if links are visible, otherwise return false. ;  ; TStructNode * GetNodePtr () const;  Returns top node pointer. ;  ; void GLWidgetProcessedEventSlot (Event_t *event);  Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. ;  ; void LevelDistValueSetSlot (Long_t dist);  Emmited when user changes distance between levels. ;  ; void MouseOverSlot (TGLPhysicalShape *shape);  MouseOver slot. ;  ; void RedoButtonSlot ();  Activated when user click Redo button. Repeat last Undo action. ;  ; void ResetButtonSlot ();  Resets camera. ;  ; void ScaleByChangedSlot ();  Activated when user press radio button. ;  ; void SetLinksVisibility (Bool_t val);  Sets links visibility to ""visible"". ;  ; void SetNodePtr (TStructNode *val);  Sets top node pointer and updates view. ;  ; void SetPointerButtonSlot ();  Sets pointer given in fPointerTestEntry to the main pointer. ;  ; void ShowLinksToggled (Bool_t on);  Changes links visibility and refresh view. ;  ; void UndoButtonSlot ();  UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. ;  ; void Update (Bool_t resetCamera=false);  Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. ;  ; void UpdateButtonSlot ();  Update button slot. Updates scene. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() s",MatchSource.WIKI,doc/master/classTStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html
Integrability,message,messages,"const;  Bind key to a window. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; const char * GetIconPixmap () const;  ; void GetMWMHints (UInt_t &value, UInt_t &funcs, UInt_t &input) const;  ; const char * GetWindowName () const;  ; void GetWMPosition (Int_t &x, Int_t &y) const;  ; void GetWMSize (UInt_t &w, UInt_t &h) const;  ; void GetWMSizeHints (UInt_t &wmin, UInt_t &hmin, UInt_t &wmax, UInt_t &hmax, UInt_t &winc, UInt_t &hinc) const;  ; EInitialState GetWMState () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events. ;  ; Bool_t HandleClientMessage (Event_t *event) override;  Handle client messages sent to this frame. ;  ; Bool_t HandleKey (Event_t *event) override;  Handle keyboard events. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion events. ;  ; Bool_t HandleSelection (Event_t *event) override;  Handle primary selection event. ;  ; Bool_t HandleSelectionRequest (Event_t *event) override;  Handle selection request event. ;  ; TClass * IsA () const override;  ; virtual void RemoveBind (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Remove key binding. ;  ; virtual Bool_t SaveFrameAsCodeOrImage ();  Opens dialog window allowing user to save the frame contents as a ROOT macro or as an image. ;  ; virtual Bool_t SaveFrameAsCodeOrImage (const TString &fileName);  Saves the frame contents as a ROOT macro or as an image, depending on the extension of the fileName argument. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a main frame widget as a C++ statement(s) on output stream out. ",MatchSource.WIKI,doc/master/classTStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html
Modifiability,inherit,inherited," *shape);  MouseOver slot. ;  ; void RedoButtonSlot ();  Activated when user click Redo button. Repeat last Undo action. ;  ; void ResetButtonSlot ();  Resets camera. ;  ; void ScaleByChangedSlot ();  Activated when user press radio button. ;  ; void SetLinksVisibility (Bool_t val);  Sets links visibility to ""visible"". ;  ; void SetNodePtr (TStructNode *val);  Sets top node pointer and updates view. ;  ; void SetPointerButtonSlot ();  Sets pointer given in fPointerTestEntry to the main pointer. ;  ; void ShowLinksToggled (Bool_t on);  Changes links visibility and refresh view. ;  ; void UndoButtonSlot ();  UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. ;  ; void Update (Bool_t resetCamera=false);  Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. ;  ; void UpdateButtonSlot ();  Update button slot. Updates scene. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; const char * GetIconPixmap () const;  ; void GetMWMHints (UInt_t &value, UInt_t &funcs, UInt_t &input) const;  ; const char * GetWindowName () const;  ; void GetWMPosition (Int_t &x, Int_t &y) const;  ; void GetWMSize (UInt_t &w, UInt_t &h) const;  ; void GetWMSizeHints (UInt_t &wmin, UInt_t &hmin, ",MatchSource.WIKI,doc/master/classTStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html
Security,hash,hash,"TGIdleHandler *);  ; Bool_t HandleTimer (TTimer *) override;  Execute action in response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html
Availability,error,error,"overrideTStylevirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; TAttText::Copy(TAttText &atttext) constTAttText; DeclFileName()TStyleinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTStylevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EPaperSize enum nameTStyle; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fAttDateTStyleprivate; fAxisMaxDigitsTStyleprivate; fBarOffsetTStyleprivate; fBarWidthTStyleprivate; fBitsTObjectprivate; fCandleBoxRangeTStyleprivate; fCandleScaledTStyleprivate; fCandleWhiskerRangeTStyleprivate; fCanvasBorderModeTStyleprivate; fCanvasBorderSizeTStyleprivate; fCanvasColorTStyleprivate; fCanvasDefHTStyleprivate; fCanvasDefWTStyleprivate; fCanvasDefXTStyleprivate; fCanvasDefYTStyleprivate; fCanvasPreferGLTStyleprivate; fCapLinePSTStyleprivate; fColorModelPSTStyleprivate; fDateXTStyleprivate; fDateYTStyleprivate; fDrawBorderTStyleprivate; fEndErrorSizeTStyleprivate; fErrorXTStyleprivate; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFitFormatTStyleprivate; fFrameBorderModeTStyleprivate; fFrameBorderSizeTStyleprivate; fFrameFillColorTStyleprivate; fFrameFillStyleTStyleprivat",MatchSource.WIKI,doc/master/classTStyle-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStyle-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TStyle Member List. This is the complete list of members for TStyle, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; AxisChoice(Option_t *axis) constTStyle; Browse(TBrowser *b) overrideTStylevirtual; BuildStyles()TStylestatic; cd()TStylevirtual; CheckedHash()TObjectinline; Class()TStylestatic; Class_Name()TStylestatic; Class_Version()TStyleinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &style) const overrideTStylevirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; TAttText::Copy(TAttText &atttext) constTAttText; DeclFileName()TStyleinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTStylevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EPaperSize enum nameTStyle; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual;",MatchSource.WIKI,doc/master/classTStyle-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStyle-members.html
Testability,log,logx,"t size=0.04, Option_t *axis=""X"")TStyle; SetLegendBorderSize(Width_t size=4)TStyleinline; SetLegendFillColor(Color_t color=0)TStyleinline; SetLegendFillStyle(Style_t style=1001)TStyleinline; SetLegendFont(Style_t font=62)TStyleinline; SetLegendTextSize(Double_t size=0.)TStyleinline; SetLegoInnerR(Float_t rad=0.5)TStyleinline; SetLineAttributes()TAttLinevirtual; SetLineColor(Color_t lcolor)TAttLineinlinevirtual; SetLineColorAlpha(Color_t lcolor, Float_t lalpha)TAttLinevirtual; SetLineScalePS(Float_t scale=3)TStyleinline; SetLineStyle(Style_t lstyle)TAttLineinlinevirtual; SetLineStyleString(Int_t i, const char *text)TStyle; SetLineWidth(Width_t lwidth)TAttLineinlinevirtual; SetMarkerAttributes()TAttMarkervirtual; SetMarkerColor(Color_t mcolor=1)TAttMarkerinlinevirtual; SetMarkerColorAlpha(Color_t mcolor, Float_t malpha)TAttMarkervirtual; SetMarkerSize(Size_t msize=1)TAttMarkerinlinevirtual; SetMarkerStyle(Style_t mstyle=1)TAttMarkerinlinevirtual; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetNdivisions(Int_t n=510, Option_t *axis=""X"")TStyle; SetNumberContours(Int_t number=20)TStyle; SetObjectStat(Bool_t stat)TObjectstatic; SetOptDate(Int_t datefl=1)TStyle; SetOptFile(Int_t file=1)TStyleinline; SetOptFit(Int_t fit=1)TStyle; SetOptLogx(Int_t logx=1)TStyleinline; SetOptLogy(Int_t logy=1)TStyleinline; SetOptLogz(Int_t logz=1)TStyleinline; SetOptStat(Int_t stat=1)TStyle; SetOptStat(Option_t *stat)TStyle; SetOptTitle(Int_t tit=1)TStyleinline; SetOrthoCamera(Bool_t on=kTRUE)TStyleinline; SetPadBorderMode(Int_t mode=1)TStyleinline; SetPadBorderSize(Width_t size=1)TStyleinline; SetPadBottomMargin(Float_t margin=0.1)TStyleinline; SetPadColor(Color_t color=19)TStyleinline; SetPadGridX(Bool_t gridx)TStyleinline; SetPadGridY(Bool_t gridy)TStyleinline; SetPadLeftMargin(Float_t margin=0.1)TStyleinline; SetPadRightMargin(Float_t margin=0.1)TStyleinline; SetPadTickX(Int_t tickx)TStyleinline; SetPadTickY(Int_t ticky)TStyleinlin",MatchSource.WIKI,doc/master/classTStyle-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStyle-members.html
Availability,error,error,"given fraction of the distribution. ;  ; void SetCandleScaled (Bool_t on=kFALSE);  ; void SetCandleWhiskerRange (Double_t wRange=1.0);  By setting whisker-range for candle plot, one can force the whiskers to cover the fraction of the distribution. ;  ; void SetCanvasBorderMode (Int_t mode=1);  ; void SetCanvasBorderSize (Width_t size=1);  ; void SetCanvasColor (Color_t color=19);  ; void SetCanvasDefH (Int_t h=500);  ; void SetCanvasDefW (Int_t w=700);  ; void SetCanvasDefX (Int_t topx=10);  ; void SetCanvasDefY (Int_t topy=10);  ; void SetCanvasPreferGL (Bool_t prefer=kTRUE);  ; void SetCapLinePS (Int_t capline=0);  Set the line cap method used for PostScript, PDF and SVG output. See TPostScript::SetLineCap for details. ;  ; void SetColorModelPS (Int_t c=0);  Define the color model used by TPostScript and TPDF (RGB or CMYK). ;  ; void SetDateX (Float_t x=0.01);  ; void SetDateY (Float_t y=0.01);  ; void SetDrawBorder (Int_t drawborder=1);  ; void SetEndErrorSize (Float_t np=2);  Set the size (in pixels) of the small lines drawn at the end of the error bars (TH1 or TGraphErrors). ;  ; void SetErrorX (Float_t errorx=0.5);  ; void SetExponentOffset (Float_t xoff=0., Float_t yoff=0., Option_t *axis=""XY"");  Method set X and Y offset of the axis 10^n notation. ;  ; void SetFitFormat (const char *format=""5.4g"");  ; void SetFrameBorderMode (Int_t mode=1);  ; void SetFrameBorderSize (Width_t size=1);  ; void SetFrameFillColor (Color_t color=1);  ; void SetFrameFillStyle (Style_t styl=0);  ; void SetFrameLineColor (Color_t color=1);  ; void SetFrameLineStyle (Style_t styl=0);  ; void SetFrameLineWidth (Width_t width=1);  ; void SetFuncColor (Color_t color=1);  ; void SetFuncStyle (Style_t style=1);  ; void SetFuncWidth (Width_t width=4);  ; void SetGridColor (Color_t color=0);  ; void SetGridStyle (Style_t style=3);  ; void SetGridWidth (Width_t width=1);  ; void SetHatchesLineWidth (Int_t l);  ; void SetHatchesSpacing (Double_t h);  ; void SetHeaderPS (const char *header);  ",MatchSource.WIKI,doc/master/classTStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStyle.html
Integrability,message,message,"plement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStyle.html
Modifiability,inherit,inherit,". ROOT: TStyle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TStyle Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; TStyle objects may be created to define special styles. ; By default ROOT creates a default style that can be accessed via the gStyle pointer.; This class includes functions to set some of the following object attributes.; Canvas; Pad; Histogram axis; Lines; Fill areas; Text; Markers; Functions; Histogram Statistics and Titles. All objects that can be drawn in a pad inherit from one or more attribute classes like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their default attributes are taken from the current style. The current style is an object of the classTStyle and can be referenced via the global variable gStyle (in TStyle.h).; ROOT provides two styles called ""Default"" and ""Plain"". The ""Default"" style is created simply by:; auto default = new TStyle(""Default"",""Default Style"");; TStyle::TStyleTStyle()Default constructor.Definition TStyle.cxx:145; The Plain style can be used if you are working on a monochrome display or if you want to get a ""conventional"" Postscript output. These are the instructions in the ROOT constructor to create the Plain style.; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");; ; plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; You can set the current style with:; gROOT->SetStyle(style_name);; gROOT#define gROOTDefinition TROOT.h:406; You can get a pointer to an existing style with:; auto style = gROOT->GetStyle(style_name);; styleOption_t Option_t styleDefinition TGWin32VirtualXProxy.cxx:46; You can create additional styles with:; TSty",MatchSource.WIKI,doc/master/classTStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStyle.html
Performance,scalab,scalable,"IsReading member to reading (default=kTRUE). ; fIsReading (used via gStyle->IsReading()) can be used in the functions myclass::UseCurrentStyle to read from the current style or write to the current style ; Definition at line 1374 of file TStyle.cxx. ◆ SetJoinLinePS(). void TStyle::SetJoinLinePS ; (; Int_t ; joinline = 0). inline . Set the line join method used for PostScript, PDF and SVG output. See TPostScript::SetLineJoin for details. ; Definition at line 306 of file TStyle.h. ◆ SetLabelColor(). void TStyle::SetLabelColor ; (; Color_t ; color = 1, . Option_t * ; axis = ""X"" . ). Set axis labels color. ; axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 axes ; Definition at line 1393 of file TStyle.cxx. ◆ SetLabelFont(). void TStyle::SetLabelFont ; (; Style_t ; font = 62, . Option_t * ; axis = ""X"" . ). Set font number used to draw axis labels. . font : Text font code = 10*fontnumber + precision; Font numbers must be between 1 and 14; precision = 1 fast hardware fonts (steps in the size); precision = 2 scalable and rotatable hardware fonts The default font number is 62. axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 axes . Definition at line 1413 of file TStyle.cxx. ◆ SetLabelOffset(). void TStyle::SetLabelOffset ; (; Float_t ; offset = 0.005, . Option_t * ; axis = ""X"" . ). Set offset between axis and axis labels. ; The offset is expressed as a percent of the pad height. axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 axes ; Definition at line 1429 of file TStyle.cxx. ◆ SetLabelSize(). void TStyle::SetLabelSize ; (; Float_t ; size = 0.04, . Option_t * ; axis = ""X"" . ). Set size of axis labels. ; The size is expressed as a percent of the pad height. axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 axes ; Definition at line 1444 of file TStyle.cxx. ◆ SetLegendBorderSize(). void TStyle::SetLegendBorderSize ; (; Width_t ; size = 4). inline . Definitio",MatchSource.WIKI,doc/master/classTStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStyle.html
Security,access,accessed,". ROOT: TStyle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TStyle Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; TStyle objects may be created to define special styles. ; By default ROOT creates a default style that can be accessed via the gStyle pointer.; This class includes functions to set some of the following object attributes.; Canvas; Pad; Histogram axis; Lines; Fill areas; Text; Markers; Functions; Histogram Statistics and Titles. All objects that can be drawn in a pad inherit from one or more attribute classes like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their default attributes are taken from the current style. The current style is an object of the classTStyle and can be referenced via the global variable gStyle (in TStyle.h).; ROOT provides two styles called ""Default"" and ""Plain"". The ""Default"" style is created simply by:; auto default = new TStyle(""Default"",""Default Style"");; TStyle::TStyleTStyle()Default constructor.Definition TStyle.cxx:145; The Plain style can be used if you are working on a monochrome display or if you want to get a ""conventional"" Postscript output. These are the instructions in the ROOT constructor to create the Plain style.; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");; ; plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; You can set the current style with:; gROOT->SetStyle(style_name);; gROOT#define gROOTDefinition TROOT.h:406; You can get a pointer to an existing style with:; auto style = gROOT->GetStyle(style_name);; styleOption_t Option_t styleDefinition TGWin32VirtualXProxy.cxx:46; You can create additional styles with:; TSty",MatchSource.WIKI,doc/master/classTStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStyle.html
Testability,log,logx,"lor_t color=0);  ; void SetLegendFillStyle (Style_t style=1001);  ; void SetLegendFont (Style_t font=62);  ; void SetLegendTextSize (Double_t size=0.);  ; void SetLegoInnerR (Float_t rad=0.5);  ; void SetLineScalePS (Float_t scale=3);  ; void SetLineStyleString (Int_t i, const char *text);  Set line style string using the PostScript convention. ;  ; void SetNdivisions (Int_t n=510, Option_t *axis=""X"");  Set the number of divisions to draw an axis. ;  ; void SetNumberContours (Int_t number=20);  Set the default number of contour levels when drawing 2-d plots. ;  ; void SetOptDate (Int_t datefl=1);  If optdate is non null, the current date/time will be printed in the canvas. ;  ; void SetOptFile (Int_t file=1);  ; void SetOptFit (Int_t fit=1);  The type of information about fit parameters printed in the histogram statistics box can be selected via the parameter mode. ;  ; void SetOptLogx (Int_t logx=1);  ; void SetOptLogy (Int_t logy=1);  ; void SetOptLogz (Int_t logz=1);  ; void SetOptStat (Int_t stat=1);  The type of information printed in the histogram statistics box can be selected via the parameter mode. ;  ; void SetOptStat (Option_t *stat);  The parameter mode can be any combination of kKsSiourRmMen. ;  ; void SetOptTitle (Int_t tit=1);  ; void SetOrthoCamera (Bool_t on=kTRUE);  ; void SetPadBorderMode (Int_t mode=1);  ; void SetPadBorderSize (Width_t size=1);  ; void SetPadBottomMargin (Float_t margin=0.1);  ; void SetPadColor (Color_t color=19);  ; void SetPadGridX (Bool_t gridx);  ; void SetPadGridY (Bool_t gridy);  ; void SetPadLeftMargin (Float_t margin=0.1);  ; void SetPadRightMargin (Float_t margin=0.1);  ; void SetPadTickX (Int_t tickx);  ; void SetPadTickY (Int_t ticky);  ; void SetPadTopMargin (Float_t margin=0.1);  ; void SetPaintTextFormat (const char *format=""g"");  ; void SetPalette (Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.);  See TColor::SetPalette. ;  ; void SetPalette (TString fileName, Float_t alpha=1.);  ; void SetPaperSize ",MatchSource.WIKI,doc/master/classTStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStyle.html
Usability,simpl,simply,"ypes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TStyle Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; TStyle objects may be created to define special styles. ; By default ROOT creates a default style that can be accessed via the gStyle pointer.; This class includes functions to set some of the following object attributes.; Canvas; Pad; Histogram axis; Lines; Fill areas; Text; Markers; Functions; Histogram Statistics and Titles. All objects that can be drawn in a pad inherit from one or more attribute classes like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their default attributes are taken from the current style. The current style is an object of the classTStyle and can be referenced via the global variable gStyle (in TStyle.h).; ROOT provides two styles called ""Default"" and ""Plain"". The ""Default"" style is created simply by:; auto default = new TStyle(""Default"",""Default Style"");; TStyle::TStyleTStyle()Default constructor.Definition TStyle.cxx:145; The Plain style can be used if you are working on a monochrome display or if you want to get a ""conventional"" Postscript output. These are the instructions in the ROOT constructor to create the Plain style.; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");; ; plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; You can set the current style with:; gROOT->SetStyle(style_name);; gROOT#define gROOTDefinition TROOT.h:406; You can get a pointer to an existing style with:; auto style = gROOT->GetStyle(style_name);; styleOption_t Option_t styleDefinition TGWin32VirtualXProxy.cxx:46; You can create additional styles with:; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; gStyleR__EXTERN TStyle * gStyleDefi",MatchSource.WIKI,doc/master/classTStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTStyle.html
Availability,error,errors,"...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; List of all members ; TSVDUnfold Class ReferenceHistogram Library. ; SVD Approach to Data Unfolding. ; Reference: Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] ; TSVDUnfold implements the singular value decomposition based unfolding method (see reference). Currently, the unfolding of one-dimensional histograms is supported, with the same number of bins for the measured and the unfolded spectrum. ; The unfolding procedure is based on singular value decomposition of the response matrix. The regularisation of the unfolding is implemented via a discrete minimum-curvature condition. ; Monte Carlo inputs: . xini: true underlying spectrum (TH1D, n bins) . bini: reconstructed spectrum (TH1D, n bins) . Adet: response matrix (TH2D, nxn bins) . Consider the unfolding of a measured spectrum bdat with covariance matrix Bcov (if not passed explicitly, a diagonal covariance will be built given the errors of bdat). The corresponding spectrum in the Monte Carlo is given by bini, with the true underlying spectrum given by xini. The detector response is described by Adet, with Adet filled with events (not probabilities) with the true observable on the y-axis and the reconstructed observable on the x-axis. ; The measured distribution can be unfolded for any combination of resolution, efficiency and acceptance effects, provided an appropriate definition of xini and Adet. The unfolding can be performed by TSVDUnfold *tsvdunf = new TSVDUnfold( bdat, Bcov, bini, xini, Adet );; TH1D* unfresult = tsvdunf->Unfold( kreg );; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TSVDUnfoldSVD Approach to Data Unfolding.Definition TSVDUnfold.h:46; TSVDUnfold::UnfoldTH1D * Unfold(Int_t kreg)Perform the unfolding with regularisation parameter kreg.Definition TSVDUnfold.cxx:237; where kreg determ",MatchSource.WIKI,doc/master/classTSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSVDUnfold.html
Integrability,rout,routine,"f->GetXinv(). The distribution of singular values can be retrieved using tsvdunf->GetSV(). ; See also the tutorial for a toy example. ; Definition at line 46 of file TSVDUnfold.h. Public Member Functions;  TSVDUnfold (const TH1D *bdat, const TH1D *bini, const TH1D *xini, const TH2D *Adet);  Alternative constructor User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. ;  ;  TSVDUnfold (const TH1D *bdat, TH2D *Bcov, const TH1D *bini, const TH1D *xini, const TH2D *Adet);  Default constructor Initialisation of TSVDUnfold User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. ;  ;  TSVDUnfold (const TSVDUnfold &other);  Copy constructor. ;  ;  ~TSVDUnfold () override;  Destructor. ;  ; Double_t ComputeChiSquared (const TH1D &truspec, const TH1D &unfspec);  Helper routine to compute chi-squared between distributions using the computed inverse of the covariance matrix for the unfolded spectrum as given in paper. ;  ; TH2D * GetAdetCovMatrix (Int_t ntoys, Int_t seed=1);  Determine covariance matrix of unfolded spectrum from finite statistics in response matrix using pseudo experiments ""ntoys"" - number of pseudo experiments used for the propagation ""seed"" - seed for pseudo experiments. ;  ; TH2D * GetBCov () const;  Returns the covariance matrix. ;  ; TH1D * GetD () const;  Returns d vector (for choosing appropriate regularisation) ;  ; Int_t GetKReg () const;  ; TH1D * GetSV () const;  Returns singular values vector. ;  ; TH2D * GetUnfoldCovMatrix (const TH2D *cov, Int_t ntoys, Int_t seed=1);  Determine for given input error matrix covariance matrix of unfolded spectrum from toy simulation given the passed covariance matrix on measured spectrum ""cov"" - covariance matrix on the measured spectrum, to be propagated ""ntoys"" - number of pseudo experiments used for the propagation ""se",MatchSource.WIKI,doc/master/classTSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSVDUnfold.html
Modifiability,inherit,inherited,"atrix of unfolded spectrum from toy simulation given the passed covariance matrix on measured spectrum ""cov"" - covariance matrix on the measured spectrum, to be propagated ""ntoys"" - number of pseudo experiments used for the propagation ""seed"" - seed for pseudo experiments Note that this covariance matrix will contain effects of forced normalisation if spectrum is normalised to unit area. ;  ; TH2D * GetXinv () const;  Returns the computed inverse of the covariance matrix. ;  ; TH2D * GetXtau () const;  Returns the computed regularized covariance matrix corresponding to total uncertainties on measured spectrum as passed in the constructor. ;  ; TClass * IsA () const override;  ; void SetNormalize (Bool_t normalize);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; TH1D * Unfold (Int_t kreg);  Perform the unfolding with regularisation parameter kreg. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSVDUnfold.html
Performance,perform,performed,". The regularisation of the unfolding is implemented via a discrete minimum-curvature condition. ; Monte Carlo inputs: . xini: true underlying spectrum (TH1D, n bins) . bini: reconstructed spectrum (TH1D, n bins) . Adet: response matrix (TH2D, nxn bins) . Consider the unfolding of a measured spectrum bdat with covariance matrix Bcov (if not passed explicitly, a diagonal covariance will be built given the errors of bdat). The corresponding spectrum in the Monte Carlo is given by bini, with the true underlying spectrum given by xini. The detector response is described by Adet, with Adet filled with events (not probabilities) with the true observable on the y-axis and the reconstructed observable on the x-axis. ; The measured distribution can be unfolded for any combination of resolution, efficiency and acceptance effects, provided an appropriate definition of xini and Adet. The unfolding can be performed by TSVDUnfold *tsvdunf = new TSVDUnfold( bdat, Bcov, bini, xini, Adet );; TH1D* unfresult = tsvdunf->Unfold( kreg );; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TSVDUnfoldSVD Approach to Data Unfolding.Definition TSVDUnfold.h:46; TSVDUnfold::UnfoldTH1D * Unfold(Int_t kreg)Perform the unfolding with regularisation parameter kreg.Definition TSVDUnfold.cxx:237; where kreg determines the regularisation of the unfolding. In general, overregularisation (too small kreg) will bias the unfolded spectrum towards the Monte Carlo input, while underregularisation (too large kreg) will lead to large fluctuations in the unfolded spectrum. The optimal regularisation can be determined following guidelines in Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] using the distribution of the |d_i| that can be obtained by tsvdunf->GetD() and/or using pseudo-experiments. ; Covariance matrices on the measured spectrum (for either the total uncertainties or individual sources of uncertainties) can be propagated to covariance matrices using the",MatchSource.WIKI,doc/master/classTSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSVDUnfold.html
Safety,detect,detector,"rum. Meth. A372, 469 (1996) [hep-ph/9509307] ; TSVDUnfold implements the singular value decomposition based unfolding method (see reference). Currently, the unfolding of one-dimensional histograms is supported, with the same number of bins for the measured and the unfolded spectrum. ; The unfolding procedure is based on singular value decomposition of the response matrix. The regularisation of the unfolding is implemented via a discrete minimum-curvature condition. ; Monte Carlo inputs: . xini: true underlying spectrum (TH1D, n bins) . bini: reconstructed spectrum (TH1D, n bins) . Adet: response matrix (TH2D, nxn bins) . Consider the unfolding of a measured spectrum bdat with covariance matrix Bcov (if not passed explicitly, a diagonal covariance will be built given the errors of bdat). The corresponding spectrum in the Monte Carlo is given by bini, with the true underlying spectrum given by xini. The detector response is described by Adet, with Adet filled with events (not probabilities) with the true observable on the y-axis and the reconstructed observable on the x-axis. ; The measured distribution can be unfolded for any combination of resolution, efficiency and acceptance effects, provided an appropriate definition of xini and Adet. The unfolding can be performed by TSVDUnfold *tsvdunf = new TSVDUnfold( bdat, Bcov, bini, xini, Adet );; TH1D* unfresult = tsvdunf->Unfold( kreg );; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TSVDUnfoldSVD Approach to Data Unfolding.Definition TSVDUnfold.h:46; TSVDUnfold::UnfoldTH1D * Unfold(Int_t kreg)Perform the unfolding with regularisation parameter kreg.Definition TSVDUnfold.cxx:237; where kreg determines the regularisation of the unfolding. In general, overregularisation (too small kreg) will bias the unfolded spectrum towards the Monte Carlo input, while underregularisation (too large kreg) will lead to large fluctuations in the unfolded spectrum. The optimal regularisation can be",MatchSource.WIKI,doc/master/classTSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSVDUnfold.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSVDUnfold.html
Testability,test,test,"->GetD() and/or using pseudo-experiments. ; Covariance matrices on the measured spectrum (for either the total uncertainties or individual sources of uncertainties) can be propagated to covariance matrices using the GetUnfoldCovMatrix method, which uses pseudo experiments for the propagation. In addition, GetAdetCovMatrix allows for the propagation of the statistical uncertainties on the response matrix using pseudo experiments. The covariance matrix corresponding to Bcov is also computed as described in Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] and can be obtained from tsvdunf->GetXtau() and its (regularisation independent) inverse from tsvdunf->GetXinv(). The distribution of singular values can be retrieved using tsvdunf->GetSV(). ; See also the tutorial for a toy example. ; Definition at line 46 of file TSVDUnfold.h. Public Member Functions;  TSVDUnfold (const TH1D *bdat, const TH1D *bini, const TH1D *xini, const TH2D *Adet);  Alternative constructor User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. ;  ;  TSVDUnfold (const TH1D *bdat, TH2D *Bcov, const TH1D *bini, const TH1D *xini, const TH2D *Adet);  Default constructor Initialisation of TSVDUnfold User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. ;  ;  TSVDUnfold (const TSVDUnfold &other);  Copy constructor. ;  ;  ~TSVDUnfold () override;  Destructor. ;  ; Double_t ComputeChiSquared (const TH1D &truspec, const TH1D &unfspec);  Helper routine to compute chi-squared between distributions using the computed inverse of the covariance matrix for the unfolded spectrum as given in paper. ;  ; TH2D * GetAdetCovMatrix (Int_t ntoys, Int_t seed=1);  Determine covariance matrix of unfolded spectrum from finite statistics in response matrix using pseudo experiments ""ntoys"" - number of pseudo experiments use",MatchSource.WIKI,doc/master/classTSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSVDUnfold.html
Usability,guid,guidelines," with the true observable on the y-axis and the reconstructed observable on the x-axis. ; The measured distribution can be unfolded for any combination of resolution, efficiency and acceptance effects, provided an appropriate definition of xini and Adet. The unfolding can be performed by TSVDUnfold *tsvdunf = new TSVDUnfold( bdat, Bcov, bini, xini, Adet );; TH1D* unfresult = tsvdunf->Unfold( kreg );; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TSVDUnfoldSVD Approach to Data Unfolding.Definition TSVDUnfold.h:46; TSVDUnfold::UnfoldTH1D * Unfold(Int_t kreg)Perform the unfolding with regularisation parameter kreg.Definition TSVDUnfold.cxx:237; where kreg determines the regularisation of the unfolding. In general, overregularisation (too small kreg) will bias the unfolded spectrum towards the Monte Carlo input, while underregularisation (too large kreg) will lead to large fluctuations in the unfolded spectrum. The optimal regularisation can be determined following guidelines in Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] using the distribution of the |d_i| that can be obtained by tsvdunf->GetD() and/or using pseudo-experiments. ; Covariance matrices on the measured spectrum (for either the total uncertainties or individual sources of uncertainties) can be propagated to covariance matrices using the GetUnfoldCovMatrix method, which uses pseudo experiments for the propagation. In addition, GetAdetCovMatrix allows for the propagation of the statistical uncertainties on the response matrix using pseudo experiments. The covariance matrix corresponding to Bcov is also computed as described in Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] and can be obtained from tsvdunf->GetXtau() and its (regularisation independent) inverse from tsvdunf->GetXinv(). The distribution of singular values can be retrieved using tsvdunf->GetSV(). ; See also the tutorial for a toy example. ; Definition at line 46 of file TSVDUnfold.h. P",MatchSource.WIKI,doc/master/classTSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSVDUnfold.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSVG.html
Energy Efficiency,power,power,"lPS.; Definition at line 1402 of file TSVG.cxx. ◆ DrawPS() [2/2]. void TSVG::DrawPS ; (; Int_t ; n, . Float_t * ; xw, . Float_t * ; yw . ). overridevirtual . Not needed in SVG case. ; Implements TVirtualPS.; Definition at line 2064 of file TSVG.cxx. ◆ Initialize(). void TSVG::Initialize ; (; ). Initialize the SVG file. ; The main task of the function is to output the SVG header file which consist in <title>, <desc> and <defs>. The HeaderPS provided by the user program is written in the <defs> part. ; Definition at line 1508 of file TSVG.cxx. ◆ IsA(). TClass * TSVG::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 80 of file TSVG.h. ◆ MovePS(). void TSVG::MovePS ; (; Double_t ; ix, . Double_t ; iy . ). Move to a new position (ix, iy). ; The move is done in relative coordinates which allows to have short numbers which decrease the size of the file. This function use the full power of the SVG's paths by using the horizontal and vertical move whenever it is possible. ; Definition at line 1543 of file TSVG.cxx. ◆ NewPage(). void TSVG::NewPage ; (; ). overridevirtual . Start the SVG page. ; This function initialize the pad conversion coefficients and output the <svg> directive which is close later in the the function Close. ; Implements TVirtualPS.; Definition at line 1564 of file TSVG.cxx. ◆ Off(). void TSVG::Off ; (; ). Deactivate an already open SVG file. ; Definition at line 203 of file TSVG.cxx. ◆ On(). void TSVG::On ; (; ). Activate an already open SVG file. ; Definition at line 187 of file TSVG.cxx. ◆ Open(). void TSVG::Open ; (; const char * ; filename, . Int_t ; type = -111 . ). overridevirtual . Open a SVG file. ; Implements TVirtualPS.; Definition at line 113 of file TSVG.cxx. ◆ Range(). void TSVG::Range ; (; Float_t ; xrange, . Float_t ; yrange . ). Set the range for the paper in centimetres. ; Definition at line 1596 of file TSVG.cxx. ◆ SetColor() [1/2]. void TSVG::SetColor ; (;",MatchSource.WIKI,doc/master/classTSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSVG.html
Integrability,interface,interface,"st char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t heightDefinition TGWin32VirtualXProxy.cxx:164; It is best viewed with Internet Explorer and you need the Adobe SVG Viewer; To zoom using the Adobe SVG Viewer, position the mouse over the area you want to zoom and click the right button.; To define the zoom area, use Control+drag to mark the boundaries of the zoom area.; To pan, use Alt+drag. By clicking with the right mouse button on the SVG graphics you will get a pop-up menu giving other ways to interact with the image.; SVG files can be used directly in compressed mode to minimize the time transfer over the network. Compressed SVG files should be created using gzip on a normal ASCII SVG file and should then be renamed using the file extension .svgz. ; Definition at line 20 of file TSVG.h. Public Member Functions;  TSVG ();  Default SVG constructor. ;  ;  TSVG (const char *filename, Int_t type=-113);  Initialize the SVG interface. ;  ;  ~TSVG () override;  Default SVG destructor. ;  ; void CellArrayBegin (Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2) override;  Begin the Cell Array painting. ;  ; void CellArrayEnd () override;  End the Cell Array painting. ;  ; void CellArrayFill (Int_t r, Int_t g, Int_t b) override;  Paint the Cell Array. ;  ; void Close (Option_t *opt="""") override;  Close a SVG file. ;  ; Double_t CMtoSVG (Double_t u);  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Draw a Box. ;  ; void DrawFrame (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light) override;  Draw a Frame around a box. ;  ; void DrawPolyLine (Int_t n, TPoints *xy);  Draw a PolyLine. ;  ; void DrawPolyLineNDC (Int_t n, TPoints *uv);  Draw a PolyLine in NDC space. ;  ; void DrawPolyMarker (Int_t n, Double_t *x, Double_t *y) override;  Paint PolyMarker. ;  ; void DrawPolyMarker (Int",MatchSource.WIKI,doc/master/classTSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSVG.html
Modifiability,inherit,inherited,"inewidth=1) override;  Set the lines width. ;  ; void SetMarkerColor (Color_t cindex=1) override;  Set color index for markers. ;  ; void SetTextColor (Color_t cindex=1) override;  Set color index for text. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Text (Double_t x, Double_t y, const char *string) override;  Draw text. ;  ; void Text (Double_t, Double_t, const wchar_t *) override;  ; void TextNDC (Double_t u, Double_t v, const char *string);  Write a string of characters in NDC. ;  ; void TextNDC (Double_t, Double_t, const wchar_t *);  ; Double_t UtoSVG (Double_t u);  Convert U from NDC coordinate to SVG. ;  ; Double_t VtoSVG (Double_t v);  Convert V from NDC coordinate to SVG. ;  ; Double_t XtoSVG (Double_t x);  Convert X from world coordinate to SVG. ;  ; Double_t YtoSVG (Double_t y);  Convert Y from world coordinate to SVG. ;  ;  Public Member Functions inherited from TVirtualPS;  TVirtualPS ();  VirtualPS default constructor. ;  ;  TVirtualPS (const char *filename, Int_t type=-111);  VirtualPS constructor. ;  ; virtual ~TVirtualPS ();  VirtualPS destructor. ;  ; virtual void * GetStream () const;  ; virtual Int_t GetType () const;  ; TClass * IsA () const override;  ; virtual void PrintFast (Int_t nch, const char *string="""");  Fast version of Print. ;  ; virtual void PrintRaw (Int_t len, const char *str);  Print a raw. ;  ; virtual void PrintStr (const char *string="""");  Output the string str in the output buffer. ;  ; virtual void SetStream (std::ofstream *os);  ; virtual void SetType (Int_t=-111);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WriteInteger (Int_t i, Bool_t space=kTRUE);  Write one Integer to the file. ;  ; virtual void WriteReal (Float_t r, Bool_t space=kTRUE);  Write a Real number to the file. ;  ;  Public Member Functions inh",MatchSource.WIKI,doc/master/classTSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSVG.html
Security,hash,hash,"ger to the file. ;  ; virtual void WriteReal (Float_t r, Bool_t space=kTRUE);  Write a Real number to the file. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSVG.html
Usability,simpl,simply,". ROOT: TSVG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TSVG Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Interface to SVG. ; SVG (Scalable Vector Graphics) is a language for describing two-dimensional graphics in XML. SVG allows high quality vector graphics in HTML pages.; To print a ROOT canvas ""c1"" into an SVG file simply do: c1->Print(""c1.svg"");; c1return c1Definition legend1.C:41; The result is the ASCII file c1.svg.; It can be open directly using a web browser or included in a html document the following way: <embed width=""95%"" height=""500"" src=""c1.svg"">; widthOption_t Option_t widthDefinition TGWin32VirtualXProxy.cxx:56; srcOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t srcDefinition TGWin32VirtualXProxy.cxx:164; heightOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t heightDefinition TGWin32VirtualXProxy.cxx:164; It is best viewed with Internet Explorer and you need the Adobe SVG Viewer; To zoom using the Adobe SVG Viewer, position the mouse over the area you want to zoom and click the right button.; To define the zoom area, use Control+drag to mark the boundaries of the zoom area.; To pan, use Alt+drag. By clicking with the right mouse button on the SVG graphics you will get a pop-up menu giving other ways to interact with the image.; SVG files can be used directly in compressed mode to minimize the time transfer over the network. Compressed SVG files should be created using gzip on a normal ASCII SVG file and should then be renamed using the file extension .svgz. ;",MatchSource.WIKI,doc/master/classTSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSVG.html
Availability,error,error,". ROOT: TSynapse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSynapse Class Reference. ; This is a simple weighted bidirectional connection between two neurons. ; A network is built connecting two neurons by a synapse. In addition to the value, the synapse can return the DeDw ; Definition at line 20 of file TSynapse.h. Public Member Functions;  TSynapse ();  Default constructor. ;  ;  TSynapse (TNeuron *, TNeuron *, Double_t w=1);  Constructor that connects two neurons. ;  ;  ~TSynapse () override;  ; Double_t GetDeDw () const;  Computes the derivative of the error wrt the synapse weight. ;  ; Double_t GetDEDw () const;  ; TNeuron * GetPost () const;  ; TNeuron * GetPre () const;  ; Double_t GetValue () const;  Returns the value: weighted input. ;  ; Double_t GetWeight () const;  ; TClass * IsA () const override;  ; void SetDEDw (Double_t in);  Sets the derivative of the total error wrt the synapse weight. ;  ; void SetPost (TNeuron *post);  Sets the post-neuron. ;  ; void SetPre (TNeuron *pre);  Sets the pre-neuron. ;  ; void SetWeight (Double_t w);  Sets the weight of the synapse. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and",MatchSource.WIKI,doc/master/classTSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSynapse.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSynapse.html
Modifiability,inherit,inherited,"pse can return the DeDw ; Definition at line 20 of file TSynapse.h. Public Member Functions;  TSynapse ();  Default constructor. ;  ;  TSynapse (TNeuron *, TNeuron *, Double_t w=1);  Constructor that connects two neurons. ;  ;  ~TSynapse () override;  ; Double_t GetDeDw () const;  Computes the derivative of the error wrt the synapse weight. ;  ; Double_t GetDEDw () const;  ; TNeuron * GetPost () const;  ; TNeuron * GetPre () const;  ; Double_t GetValue () const;  Returns the value: weighted input. ;  ; Double_t GetWeight () const;  ; TClass * IsA () const override;  ; void SetDEDw (Double_t in);  Sets the derivative of the total error wrt the synapse weight. ;  ; void SetPost (TNeuron *post);  Sets the post-neuron. ;  ; void SetPre (TNeuron *pre);  Sets the pre-neuron. ;  ; void SetWeight (Double_t w);  Sets the weight of the synapse. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSynapse.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSynapse.html
Usability,simpl,simple,". ROOT: TSynapse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSynapse Class Reference. ; This is a simple weighted bidirectional connection between two neurons. ; A network is built connecting two neurons by a synapse. In addition to the value, the synapse can return the DeDw ; Definition at line 20 of file TSynapse.h. Public Member Functions;  TSynapse ();  Default constructor. ;  ;  TSynapse (TNeuron *, TNeuron *, Double_t w=1);  Constructor that connects two neurons. ;  ;  ~TSynapse () override;  ; Double_t GetDeDw () const;  Computes the derivative of the error wrt the synapse weight. ;  ; Double_t GetDEDw () const;  ; TNeuron * GetPost () const;  ; TNeuron * GetPre () const;  ; Double_t GetValue () const;  Returns the value: weighted input. ;  ; Double_t GetWeight () const;  ; TClass * IsA () const override;  ; void SetDEDw (Double_t in);  Sets the derivative of the total error wrt the synapse weight. ;  ; void SetPost (TNeuron *post);  Sets the post-neuron. ;  ; void SetPre (TNeuron *pre);  Sets the pre-neuron. ;  ; void SetWeight (Double_t w);  Sets the weight of the synapse. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and",MatchSource.WIKI,doc/master/classTSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSynapse.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSysEvtHandler.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSysEvtHandler.html
Modifiability,inherit,inherited," Private Member Functions |; Private Attributes |; List of all members ; TSysEvtHandler Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Abstract base class for handling system events. ; Definition at line 28 of file TSysEvtHandler.h. Public Member Functions;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Add ()=0;  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual Bool_t Notify () override=0;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; virtual void Remove ()=0;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSysEvtHandler.html
Performance,load,load,"eimplemented from TQObject.; Definition at line 33 of file TSysEvtHandler.h. ◆ IsA(). TClass * TSysEvtHandler::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TTimer.; Definition at line 53 of file TSysEvtHandler.h. ◆ IsActive(). Bool_t TSysEvtHandler::IsActive ; (; ); const. inline . Definition at line 41 of file TSysEvtHandler.h. ◆ Notified(). virtual void TSysEvtHandler::Notified ; (; ). inlinevirtual . Definition at line 49 of file TSysEvtHandler.h. ◆ Notify(). virtual Bool_t TSysEvtHandler::Notify ; (; ). overridepure virtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Implemented in TFileHandler, TSignalHandler, TStdExceptionHandler, TProcessEventTimer, TTimer, TIdleTimer, TSingleShotCleaner, TBrowserTimer, TInterruptHandler, TTermInputHandler, TThreadTimer, TGLRedrawTimer, TViewTimer, TGContainerKeyboardTimer, TGContainerScrollTimer, TGInputHandler, TViewUpdateTimer, TPopupDelayTimer, TRepeatTimer, TSBRepeatTimer, TBlinkTimer, TTipDelayTimer, TGuiBldDragManagerRepeatTimer, TARInterruptHandler, TASLogHandler, TASInterruptHandler, TASSigPipeHandler, TASInputHandler, TSocketHandler, TTimeOutTimer, TProofInterruptHandler, TProofInputHandler, TProofServLogHandler, TShutdownTimer, TReaperTimer, TIdleTOTimer, TProofServTerminationHandler, TProofServInterruptHandler, TProofServSigPipeHandler, TProofServInputHandler, TProofServLiteInterruptHandler, TProofServLiteSigPipeHandler, TProofServLiteTerminatio",MatchSource.WIKI,doc/master/classTSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSysEvtHandler.html
Safety,avoid,avoid,"-activated handler. ; Definition at line 32 of file TSysEvtHandler.cxx. ◆ Activated(). virtual void TSysEvtHandler::Activated ; (; ). inlinevirtual . Definition at line 47 of file TSysEvtHandler.h. ◆ Add(). virtual void TSysEvtHandler::Add ; (; ). pure virtual . Implemented in TFileHandler, TSignalHandler, TStdExceptionHandler, and TTimer. ◆ Added(). virtual void TSysEvtHandler::Added ; (; ). inlinevirtual . Definition at line 50 of file TSysEvtHandler.h. ◆ Class(). static TClass * TSysEvtHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSysEvtHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSysEvtHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 53 of file TSysEvtHandler.h. ◆ DeActivate(). void TSysEvtHandler::DeActivate ; (; ). De-activate a system event handler. ; Use this method to temporarily disable an event handler to avoid it from being recursively called. Use DeActivate() / Activate() instead of Remove() / Add() for this purpose, since the Add() will add the handler back to the end of the list of handlers and cause it to be called again for the same, already handled, event. ; Definition at line 46 of file TSysEvtHandler.cxx. ◆ DeActivated(). virtual void TSysEvtHandler::DeActivated ; (; ). inlinevirtual . Definition at line 48 of file TSysEvtHandler.h. ◆ DeclFileName(). static const char * TSysEvtHandler::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 53 of file TSysEvtHandler.h. ◆ GetSender(). void * TSysEvtHandler::GetSender ; (; ). inlineoverrideprivatevirtual . Reimplemented from TQObject.; Definition at line 33 of file TSysEvtHandler.h. ◆ IsA(). TClass * TSysEvtHandler::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TTimer.; Definiti",MatchSource.WIKI,doc/master/classTSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSysEvtHandler.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSysEvtHandler.html
Availability,error,error,"ual; DoBeep(Int_t=-1, Int_t=-1) constTSysteminlineprotectedvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; DynamicPathName(const char *lib, Bool_t quiet=kFALSE)TSystem; DynFindSymbol(const char *module, const char *entry)TSystemvirtual; EAclicMode enum nameTSystem; EAclicProperties enum nameTSystem; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Exec(const char *shellcmd)TSystemvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Exit(int code, Bool_t mode=kTRUE)TSystemvirtual; ExitLoop()TSystemvirtual; ExpandFileName(const char *fname)TSystemprotectedvirtual; ExpandFileName(TString &fname)TSystemprotectedvirtual; ExpandFileName(const char *fname, char *xname, const int kBufSize)TSystemprivate; ExpandPathName(TString &path)TSystemvirtual; ExpandPathName(const char *path)TSystemvirtual; fAclicModeTSystemprotected; fAclicPropertiesTSystemprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBeepDurationTSystemprotected; fBeepFreqTSystemprotected; fBitsTObjectprivate; fBuildArchTSystemprotected; fBuildCompilerTSystemprotected; fBuildCompilerVersionTSystemprotected; fBuildCompilerVersionStrTSystemprotected; fBuildDirTSystemprotected; fBuildNodeTSystemprotected; fCompiledTSystemprotected; fDoneTSystemprotected; fFileHandlerTSystemprotected; fFlagsDebugTSystemprotected; fFlagsOptTSystemprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHelpersTSystemprotected; fHostnameTSystemprotected; FillBuffer(char *&buffer)TNamedvirtual; fIncludeP",MatchSource.WIKI,doc/master/classTSystem-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystem-members.html
Integrability,protocol,protocol,"eTObjectprotected; kOpt enum valueTSystem; kOverwrite enum valueTObject; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; Link(const char *from, const char *to)TSystemvirtual; ListLibraries(const char *regexp="""")TSystemvirtual; ListSymbols(const char *module, const char *re="""")TSystemvirtual; Load(const char *module, const char *entry="""", Bool_t system=kFALSE)TSystemvirtual; LoadAllLibraries()TSystemvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeDirectory(const char *name)TSystemvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; mkdir(const char *name, Bool_t recursive=kFALSE)TSystemvirtual; NextTimeOut(Bool_t mode)TSystemvirtual; Notify()TObjectvirtual; NotifyApplicationCreated()TSystemvirtual; Now()TSystemvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; OpenConnection(const char *server, int port, int tcpwindowsize=-1, const char *protocol=""tcp"")TSystemvirtual; OpenDirectory(const char *name)TSystemvirtual; Openlog(const char *name, Int_t options, ELogFacility facility)TSystemvirtual; OpenPipe(const char *command, const char *mode)TSystemvirtual; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TSystem &)=deleteTSystemprivate; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *option="""")TObjectvirtual; Pop()TObjectvirtual; PrependPathName(const char *dir, TString &name)TSystemvirtual; Print(Option_t *option="""") const overrideTNamedvirtual; ProcessEvents()TSystemvirtual; pwd()TSysteminline; Read(const char *name)TObjectvirtual; RecursiveRemove(TObject *obj",MatchSource.WIKI,doc/master/classTSystem-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystem-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TSystem Member List. This is the complete list of members for TSystem, including all inherited members. Abort(int code=0)TSystemvirtual; AbstractMethod(const char *method) constTObject; AcceptConnection(int sock)TSystemvirtual; AccessPathName(const char *path, EAccessMode mode=kFileExists)TSystemvirtual; AddDynamicPath(const char *pathname)TSystemvirtual; AddFileHandler(TFileHandler *fh)TSystemvirtual; AddIncludePath(const char *includePath)TSystemvirtual; AddLinkedLibs(const char *linkedLib)TSystemvirtual; AddSignalHandler(TSignalHandler *sh)TSystemvirtual; AddStdExceptionHandler(TStdExceptionHandler *eh)TSystemvirtual; AddTimer(TTimer *t)TSystemvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize=-1)TSystemvirtual; AnnounceUdpService(int port, int backlog)TSystemvirtual; AnnounceUnixService(int port, int backlog)TSystemvirtual; AnnounceUnixService(const char *sockpath, int backlog)TSystemvirtual; AppendPad(Option_t *option="""")TObjectvirtual; BaseName(const char *pathname)TSystemvirtual; Beep(Int_t freq=-1, Int_t duration=-1, Bool_t setDefault=kFALSE)TSystem; Browse(TBrowser *b)TObjectvirtual; cd(const char *path)TSysteminline; ChangeDirectory(const char *path)TSystemvirtual; CheckedHash()TObjectinline; Chmod(const char *file, UInt_t mode)TSystemvirtual; Class()TSystemstatic; Class_Name()TSystemstatic; Class_Version()TSysteminlinestatic; ClassName() constTObjectvirtual; CleanCompiledMacros()TSystemvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloseConnection(int sock, Bool_t force=kFALSE)TSystemvirtual; Closelog()TSystemvirtual; ClosePipe(FILE *pipe)TSystemvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; CompileMacro(const char *filename, Option_t *opt="""", const char *library_name="""", const char *bui",MatchSource.WIKI,doc/master/classTSystem-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystem-members.html
Safety,timeout,timeout,"ad(const char *name)TObjectvirtual; RecursiveRemove(TObject *obj)TObjectvirtual; RecvBuf(int sock, void *buffer, int length)TSystemvirtual; RecvRaw(int sock, void *buffer, int length, int flag)TSystemvirtual; RedirectOutput(const char *name, const char *mode=""a"", RedirectHandle_t *h=nullptr)TSystemvirtual; RemoveFileHandler(TFileHandler *fh)TSystemvirtual; RemoveOnExit(TObject *obj)TSystem; RemoveSignalHandler(TSignalHandler *sh)TSystemvirtual; RemoveStdExceptionHandler(TStdExceptionHandler *eh)TSystemvirtual; RemoveTimer(TTimer *t)TSystemvirtual; Rename(const char *from, const char *to)TSystemvirtual; ResetBit(UInt_t f)TObjectinline; ResetErrno()TSystemstatic; ResetSignal(ESignals sig, Bool_t reset=kTRUE)TSystemvirtual; ResetSignals()TSystemvirtual; ResetTimer(TTimer *)TSysteminlinevirtual; Run()TSystemvirtual; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; Select(TList *active, Long_t timeout)TSystemvirtual; Select(TFileHandler *fh, Long_t timeout)TSystemvirtual; SendBuf(int sock, const void *buffer, int length)TSystemvirtual; SendRaw(int sock, const void *buffer, int length, int flag)TSystemvirtual; SetAclicMode(EAclicMode mode)TSystemvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetBuildDir(const char *build_dir, Bool_t isflat=kFALSE)TSystemvirtual; SetDisplay()TSystemvirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetDynamicPath(const char *pathname)TSystemvirtual; Setenv(const char *name, const char *value)TSystemvirtual; SetErrorStr(const char *errstr)TSystem; SetFlagsDebug(const char *)TSystemvirtual; SetFlagsOpt(const char *)TSystemvirtual; SetFPEMask(Int_t mask=kDefaultMask)TSystemvirtual; SetIncludePath(const char *includePath)TSystemvirtual; SetLinkdefSuffix(const char *suffix)TSystemvirtual; SetLinkedLibs(const char *linkedLibs)TSystemvirtual; SetMakeExe(const char *directives)TSys",MatchSource.WIKI,doc/master/classTSystem-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystem-members.html
Availability,error,error,"ndler to list of system exception handlers. ;  ; virtual void AddTimer (TTimer *t);  Add timer to list of system timers. ;  ; virtual int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1);  Announce TCP/IP service. ;  ; virtual int AnnounceUdpService (int port, int backlog);  Announce UDP service. ;  ; virtual int AnnounceUnixService (const char *sockpath, int backlog);  Announce unix domain service. ;  ; virtual int AnnounceUnixService (int port, int backlog);  Announce unix domain service. ;  ; virtual const char * BaseName (const char *pathname);  Base name of a file name. Base name of /user/root is root. ;  ; void Beep (Int_t freq=-1, Int_t duration=-1, Bool_t setDefault=kFALSE);  Beep for duration milliseconds with a tone of frequency freq. ;  ; Bool_t cd (const char *path);  ; virtual Bool_t ChangeDirectory (const char *path);  Change directory. ;  ; virtual int Chmod (const char *file, UInt_t mode);  Set the file permission bits. Returns -1 in case or error, 0 otherwise. ;  ; virtual void CleanCompiledMacros ();  Remove the shared libs produced by the CompileMacro() function, together with their rootmaps, linkdefs, and pcms (and some more on Windows). ;  ; virtual void CloseConnection (int sock, Bool_t force=kFALSE);  Close socket connection. ;  ; virtual void Closelog ();  Close connection to system log daemon. ;  ; virtual int ClosePipe (FILE *pipe);  Close the pipe. ;  ; virtual int CompileMacro (const char *filename, Option_t *opt="""", const char *library_name="""", const char *build_dir="""", UInt_t dirmode=0);  This method compiles and loads a shared library containing the code from the file ""filename"". ;  ; virtual char * ConcatFileName (const char *dir, const char *name);  Concatenate a directory and a file name. User must delete returned string. ;  ; virtual int CopyFile (const char *from, const char *to, Bool_t overwrite=kFALSE);  Copy a file. ;  ; virtual const char * DirName (const char *pathname);  Return the directory nam",MatchSource.WIKI,doc/master/classTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystem.html
Deployability,update,updated,"e getting rid of special shell characters like ~. ; $, etc. For Unix/Win32 compatibility use instead of $XXX when using environment variables in a pathname. If compatibility is not an issue you can use on Unix directly $XXX. The user must delete returned string. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1285 of file TSystem.cxx. ◆ ExpandPathName() [2/2]. Bool_t TSystem::ExpandPathName ; (; TString & ; path). virtual . Expand a pathname getting rid of special shell characters like ~. ; $, etc. For Unix/Win32 compatibility use instead of $XXX when using environment variables in a pathname. If compatibility is not an issue you can use on Unix directly $XXX. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1274 of file TSystem.cxx. ◆ FindDynamicLibrary(). const char * TSystem::FindDynamicLibrary ; (; TString & ; lib, . Bool_t ; quiet = kFALSE . ). virtual . Find a dynamic library using the system search paths. ; lib will be updated to contain the absolute filename if found. Returns lib if found, or NULL if a library called lib was not found. This function does not open the library. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 2034 of file TSystem.cxx. ◆ FindFile(). const char * TSystem::FindFile ; (; const char * ; search, . TString & ; file, . EAccessMode ; mode = kFileExists . ). virtual . Find location of file in a search path. ; Return value points to TString for compatibility with Which(const char *, const char *, EAccessMode). Returns 0 in case file is not found. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1538 of file TSystem.cxx. ◆ FindHelper(). TSystem * TSystem::FindHelper ; (; const char * ; path, . void * ; dirptr = nullptr . ). protected . Create helper TSystem to handle file and directory operations that might be special for remote file access. ; Definition at line 746 of file TSystem.cxx. ◆ FreeDirectory(). void TSystem::FreeDirectory ; (; void * ; dirp). vi",MatchSource.WIKI,doc/master/classTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystem.html
Integrability,interface,interface,". ROOT: TSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TSystem Class ReferenceCore ROOT classes » Base ROOT classes. ; Abstract base class defining a generic interface to the underlying Operating System. ; This is not an ABC in the strict sense of the (C++) word. For every member function there is an implementation (often not more than a call to AbstractMethod() which prints a warning saying that the method should be overridden in a derived class), which allows a simple partial implementation for new OS'es. ; Definition at line 266 of file TSystem.h. Public Types; enum  EAclicMode { kDefault; , kDebug; , kOpt; };  ; enum  EAclicProperties { kFlatBuildDir = (1ULL << ( 0 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual Bool_t AccessPathName (const char *path, EAccessMode",MatchSource.WIKI,doc/master/classTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystem.html
Modifiability,inherit,inherited,"m Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TSystem Class ReferenceCore ROOT classes » Base ROOT classes. ; Abstract base class defining a generic interface to the underlying Operating System. ; This is not an ABC in the strict sense of the (C++) word. For every member function there is an implementation (often not more than a call to AbstractMethod() which prints a warning saying that the method should be overridden in a derived class), which allows a simple partial implementation for new OS'es. ; Definition at line 266 of file TSystem.h. Public Types; enum  EAclicMode { kDefault; , kDebug; , kOpt; };  ; enum  EAclicProperties { kFlatBuildDir = (1ULL << ( 0 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual Bool_t AccessPathName (const char *path, EAccessMode mode=kFileEx",MatchSource.WIKI,doc/master/classTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystem.html
Performance,load,loads,"ar * BaseName (const char *pathname);  Base name of a file name. Base name of /user/root is root. ;  ; void Beep (Int_t freq=-1, Int_t duration=-1, Bool_t setDefault=kFALSE);  Beep for duration milliseconds with a tone of frequency freq. ;  ; Bool_t cd (const char *path);  ; virtual Bool_t ChangeDirectory (const char *path);  Change directory. ;  ; virtual int Chmod (const char *file, UInt_t mode);  Set the file permission bits. Returns -1 in case or error, 0 otherwise. ;  ; virtual void CleanCompiledMacros ();  Remove the shared libs produced by the CompileMacro() function, together with their rootmaps, linkdefs, and pcms (and some more on Windows). ;  ; virtual void CloseConnection (int sock, Bool_t force=kFALSE);  Close socket connection. ;  ; virtual void Closelog ();  Close connection to system log daemon. ;  ; virtual int ClosePipe (FILE *pipe);  Close the pipe. ;  ; virtual int CompileMacro (const char *filename, Option_t *opt="""", const char *library_name="""", const char *build_dir="""", UInt_t dirmode=0);  This method compiles and loads a shared library containing the code from the file ""filename"". ;  ; virtual char * ConcatFileName (const char *dir, const char *name);  Concatenate a directory and a file name. User must delete returned string. ;  ; virtual int CopyFile (const char *from, const char *to, Bool_t overwrite=kFALSE);  Copy a file. ;  ; virtual const char * DirName (const char *pathname);  Return the directory name in pathname. ;  ; virtual void DispatchOneEvent (Bool_t pendingOnly=kFALSE);  Dispatch a single event. ;  ; char * DynamicPathName (const char *lib, Bool_t quiet=kFALSE);  Find a dynamic library called lib using the system search paths. ;  ; virtual Func_t DynFindSymbol (const char *module, const char *entry);  Find specific entry point in specified library. ;  ; virtual Int_t Exec (const char *shellcmd);  Execute a command. ;  ; virtual void Exit (int code, Bool_t mode=kTRUE);  Exit the application. ;  ; virtual void ExitLoop ();  Exit fr",MatchSource.WIKI,doc/master/classTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystem.html
Safety,timeout,timeout,"handler from the list of file handlers. ;  ; void RemoveOnExit (TObject *obj);  Objects that should be deleted on exit of the OS interface. ;  ; virtual TSignalHandler * RemoveSignalHandler (TSignalHandler *sh);  Remove a signal handler from list of signal handlers. ;  ; virtual TStdExceptionHandler * RemoveStdExceptionHandler (TStdExceptionHandler *eh);  Remove an exception handler from list of exception handlers. ;  ; virtual TTimer * RemoveTimer (TTimer *t);  Remove timer from list of system timers. ;  ; virtual int Rename (const char *from, const char *to);  Rename a file. ;  ; virtual void ResetSignal (ESignals sig, Bool_t reset=kTRUE);  If reset is true reset the signal handler for the specified signal to the default handler, else restore previous behaviour. ;  ; virtual void ResetSignals ();  Reset signals handlers to previous behaviour. ;  ; virtual void ResetTimer (TTimer *);  ; virtual void Run ();  System event loop. ;  ; virtual Int_t Select (TFileHandler *fh, Long_t timeout);  Select on active file descriptors (called by TMonitor). ;  ; virtual Int_t Select (TList *active, Long_t timeout);  Select on active file descriptors (called by TMonitor). ;  ; virtual int SendBuf (int sock, const void *buffer, int length);  Send a buffer headed by a length indicator. ;  ; virtual int SendRaw (int sock, const void *buffer, int length, int flag);  Send exactly length bytes from buffer. ;  ; virtual void SetAclicMode (EAclicMode mode);  AclicMode indicates whether the library should be built in debug mode or optimized. ;  ; virtual void SetBuildDir (const char *build_dir, Bool_t isflat=kFALSE);  Set the location where ACLiC will create libraries and use as a scratch area. ;  ; virtual void SetDisplay ();  Set DISPLAY environment variable based on utmp entry. Only for UNIX. ;  ; virtual void SetDynamicPath (const char *pathname);  Set the dynamic path to a new value. ;  ; virtual void Setenv (const char *name, const char *value);  Set environment variable. ;  ; void S",MatchSource.WIKI,doc/master/classTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystem.html
Security,access,access,"om TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists);  Returns FALSE if one can access a file using the specified access mode. ;  ; virtual void AddDynamicPath (const char *pathname);  Add a new directory to the dynamic path. ;  ; virtual void AddFileHandler (TFileHandler *fh);  Add a file handler to the list of system file handlers. ;  ; virtual void AddIncludePath (const char *includePath);  Add a directory to the already set include path. ;  ; virtual void AddLinkedLibs (const char *linkedLib);  Add linkedLib to already set linked libs. ;  ; virtual void AddSignalHandler (TSignalHandler *sh);  Add a signal handler to list of system signal handlers. ;  ; virtual void AddStdExceptionHandler (TStdExceptionHandler *eh);  Add an exception handler to list of system exception handlers. ;  ; virtual void AddTimer (TTimer *t);  Add timer to list of system timers. ;  ; virtual int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1);  Announce TCP/IP service. ;  ; virtual int AnnounceUdpService (int port, int bac",MatchSource.WIKI,doc/master/classTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystem.html
Testability,log,log,"virtual int AnnounceUnixService (const char *sockpath, int backlog);  Announce unix domain service. ;  ; virtual int AnnounceUnixService (int port, int backlog);  Announce unix domain service. ;  ; virtual const char * BaseName (const char *pathname);  Base name of a file name. Base name of /user/root is root. ;  ; void Beep (Int_t freq=-1, Int_t duration=-1, Bool_t setDefault=kFALSE);  Beep for duration milliseconds with a tone of frequency freq. ;  ; Bool_t cd (const char *path);  ; virtual Bool_t ChangeDirectory (const char *path);  Change directory. ;  ; virtual int Chmod (const char *file, UInt_t mode);  Set the file permission bits. Returns -1 in case or error, 0 otherwise. ;  ; virtual void CleanCompiledMacros ();  Remove the shared libs produced by the CompileMacro() function, together with their rootmaps, linkdefs, and pcms (and some more on Windows). ;  ; virtual void CloseConnection (int sock, Bool_t force=kFALSE);  Close socket connection. ;  ; virtual void Closelog ();  Close connection to system log daemon. ;  ; virtual int ClosePipe (FILE *pipe);  Close the pipe. ;  ; virtual int CompileMacro (const char *filename, Option_t *opt="""", const char *library_name="""", const char *build_dir="""", UInt_t dirmode=0);  This method compiles and loads a shared library containing the code from the file ""filename"". ;  ; virtual char * ConcatFileName (const char *dir, const char *name);  Concatenate a directory and a file name. User must delete returned string. ;  ; virtual int CopyFile (const char *from, const char *to, Bool_t overwrite=kFALSE);  Copy a file. ;  ; virtual const char * DirName (const char *pathname);  Return the directory name in pathname. ;  ; virtual void DispatchOneEvent (Bool_t pendingOnly=kFALSE);  Dispatch a single event. ;  ; char * DynamicPathName (const char *lib, Bool_t quiet=kFALSE);  Find a dynamic library called lib using the system search paths. ;  ; virtual Func_t DynFindSymbol (const char *module, const char *entry);  Find specific entry",MatchSource.WIKI,doc/master/classTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystem.html
Usability,simpl,simple,". ROOT: TSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TSystem Class ReferenceCore ROOT classes » Base ROOT classes. ; Abstract base class defining a generic interface to the underlying Operating System. ; This is not an ABC in the strict sense of the (C++) word. For every member function there is an implementation (often not more than a call to AbstractMethod() which prints a warning saying that the method should be overridden in a derived class), which allows a simple partial implementation for new OS'es. ; Definition at line 266 of file TSystem.h. Public Types; enum  EAclicMode { kDefault; , kDebug; , kOpt; };  ; enum  EAclicProperties { kFlatBuildDir = (1ULL << ( 0 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual Bool_t AccessPathName (const char *path, EAccessMode",MatchSource.WIKI,doc/master/classTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystem.html
Availability,error,error,"eamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystemDirectory.html
Energy Efficiency,allocate,allocated,"ystemDirectory.h. ◆ Copy() [1/2]. void TSystemDirectory::Copy ; (; const char * ; to). inlineoverridevirtual . copy this file ; Reimplemented from TSystemFile.; Definition at line 59 of file TSystemDirectory.h. ◆ Copy() [2/2]. void TSystemDirectory::Copy ; (; TObject & ; named); const. inlineoverridevirtual . Copy this to obj. ; Reimplemented from TNamed.; Definition at line 69 of file TSystemDirectory.h. ◆ DeclFileName(). static const char * TSystemDirectory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 71 of file TSystemDirectory.h. ◆ Delete() [1/2]. void TSystemDirectory::Delete ; (; ). inlineoverridevirtual . delete this file ; Reimplemented from TSystemFile.; Definition at line 58 of file TSystemDirectory.h. ◆ Delete() [2/2]. void TSystemDirectory::Delete ; (; Option_t * ; option). inlineoverridevirtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Definition at line 68 of file TSystemDirectory.h. ◆ DrawClass(). void TSystemDirectory::DrawClass ; (; ); const. inlineoverridevirtual . Draw class inheritance tree of the class to which this object belongs. ; If a class B inherits from a class A, description of B is drawn on the right side of description of A. Member functions overridden by B are shown in class A with a blue line crossing-out the corresponding member function. The following picture is the class inheritance tree of class TPaveLabel:. Reimplemented from TObject.; Definition at line 63 of file TSystemDirectory.h. ◆ DrawClone(). TObject * TSystemDirectory::DrawClone ; (; Option_t * ; option); const. inlineoverridevirtual . Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ; If pad was not selected - gPad will be used. ; Reimplemented from TObject.; Definition at line 64 of file TSystemDirectory.h. ◆ Edit(). void TSy",MatchSource.WIKI,doc/master/classTSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystemDirectory.html
Integrability,message,message,"eamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystemDirectory.html
Modifiability,inherit,inheritance,"ence Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSystemDirectory Class ReferenceCore ROOT classes » Base ROOT classes. ; Describes an Operating System directory for the browser. ; Definition at line 32 of file TSystemDirectory.h. Public Member Functions;  TSystemDirectory ();  Create a system directory object. ;  ;  TSystemDirectory (const char *dirname, const char *path);  Create a system directory object. ;  ; virtual ~TSystemDirectory ();  Delete system directory object. ;  ; void Browse (TBrowser *b) override;  Browse OS system directories. ;  ; void Copy (const char *) override;  copy this file ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; void Delete () override;  delete this file ;  ; void Delete (Option_t *) override;  Delete this object. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *) const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; void Edit () override;  Invoke text editor on this file. ;  ; virtual TList * GetListOfFiles () const;  Returns a TList of TSystemFile objects representing the contents of the directory. ;  ; TClass * IsA () const override;  ; Bool_t IsDirectory (const char *=nullptr) const override;  Check if object is a directory. ;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; void Move (const char *) override;  move this file ;  ; virtual void SetDirectory (const char *name);  Create a system directory object. ;  ; void SetDrawOption (Option_t *) override;  Set drawing option for object. ;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetTitle (const char *title)",MatchSource.WIKI,doc/master/classTSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystemDirectory.html
Security,hash,hash,"rride;  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics obje",MatchSource.WIKI,doc/master/classTSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystemDirectory.html
Availability,error,error,"eamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystemFile.html
Energy Efficiency,allocate,allocated," . ReturnsVersion of this class ; Definition at line 61 of file TSystemFile.h. ◆ Copy() [1/2]. void TSystemFile::Copy ; (; const char * ; to). virtual . copy this file ; Reimplemented in TSystemDirectory.; Definition at line 102 of file TSystemFile.cxx. ◆ Copy() [2/2]. void TSystemFile::Copy ; (; TObject & ; named); const. inlineoverridevirtual . Copy this to obj. ; Reimplemented from TNamed.; Definition at line 59 of file TSystemFile.h. ◆ DeclFileName(). static const char * TSystemFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 61 of file TSystemFile.h. ◆ Delete() [1/2]. void TSystemFile::Delete ; (; ). virtual . delete this file ; Reimplemented in TSystemDirectory.; Definition at line 154 of file TSystemFile.cxx. ◆ Delete() [2/2]. void TSystemFile::Delete ; (; Option_t * ; option). inlineoverridevirtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Definition at line 58 of file TSystemFile.h. ◆ DrawClass(). void TSystemFile::DrawClass ; (; ); const. inlineoverridevirtual . Draw class inheritance tree of the class to which this object belongs. ; If a class B inherits from a class A, description of B is drawn on the right side of description of A. Member functions overridden by B are shown in class A with a blue line crossing-out the corresponding member function. The following picture is the class inheritance tree of class TPaveLabel:. Reimplemented from TObject.; Definition at line 53 of file TSystemFile.h. ◆ DrawClone(). TObject * TSystemFile::DrawClone ; (; Option_t * ; option); const. inlineoverridevirtual . Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ; If pad was not selected - gPad will be used. ; Reimplemented from TObject.; Definition at line 54 of file TSystemFile.h. ◆ Dump(). void TSystemFile::Dump ; (; ); co",MatchSource.WIKI,doc/master/classTSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystemFile.html
Integrability,message,message,"eamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystemFile.html
Modifiability,inherit,inheritance,"lic Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSystemFile Class ReferenceCore ROOT classes » Base ROOT classes. ; A TSystemFile describes an operating system file. ; The information is used by the browser (see TBrowser). ; Definition at line 29 of file TSystemFile.h. Public Member Functions;  TSystemFile ();  TSystemFile default constructor. ;  ;  TSystemFile (const char *filename, const char *dirname);  TSystemFile normal constructor. ;  ; virtual ~TSystemFile ();  Delete TSystemFile object. ;  ; void Browse (TBrowser *b) override;  Execute default action for this system file (action is specified in the $HOME/.root.mimes or $ROOTSYS/etc/root.mimes file. ;  ; virtual void Copy (const char *to);  copy this file ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual void Delete ();  delete this file ;  ; void Delete (Option_t *) override;  Delete this object. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *) const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; void Dump () const override;  dump this file ;  ; virtual void Edit ();  Invoke text editor on this file. ;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; void Inspect () const override;  inspect this file ;  ; TClass * IsA () const override;  ; virtual Bool_t IsDirectory (const char *dir=nullptr) const;  Check if object is a directory. ;  ; virtual void Move (const char *to);  move this file ;  ; virtual void Rename (const char *name);  rename this file ;  ; void SetDrawOption (Option_t *) override;  Set drawing option for object. ;  ; virtual void SetIconName (const char *name);  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetTitle (const char *title) override;  Set the title of the TNamed. ;  ; void Stre",MatchSource.WIKI,doc/master/classTSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystemFile.html
Security,hash,hash,"rride;  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics obje",MatchSource.WIKI,doc/master/classTSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSystemFile.html
Availability,error,errorLevel," void RehashGlobalFunctions ();  Reload global functions. ;  ; void RehashGlobals ();  Reload globals. ;  ; void RehashPragmas ();  Reload pragmas. ;  ; void RehashSysIncFiles ();  Reload system include files. ;  ; void RehashUsers ();  Reload users. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static Char_t AllAgreeOnChar (int i, const TSeqCollection *pList, Int_t &nGoodStrings);  [static utility function]/////////////////////////////////////////// ;  ; static void AppendListOfFilesInDirectory (const char dirName[], TSeqCollection *pList);  [static utility function]///////////////////////////// ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TString DetermineClass (const char varName[]);  [static utility function]///////////////////////////// ;  ; static Bool_t ExcludedByFignore (TString s);  [static utility function]///////////////////////////// ;  ; static TString GetSysIncludePath ();  [static utility function]///////////////////////////// ;  ; static Bool_t IsDirectory (const char fileName[]);  [static utility function]///////////////////////////// ;  ; static TSeqCollection * NewListOfFilesInPath (const char path[]);  [static utility function]///////////////////////////// ;  ; static void NoMsg (Int_t errorLevel);  [static utility function]///////////////////////////// ;  ; static Bool_t PathIsSpecifiedInFileName (const TString &fileName);  [static utility function]///////////////////////////// ;  . Private Member Functions;  TTabCom (const TTabCom &)=delete;  ; Int_t Complete (const TRegexp &re, const TSeqCollection *pListOfCandidates, const char appendage[], std::ostream &out, TString::ECaseCompare cmp=TString::kExact);  [private] ;  ; void CopyMatch (char *dest, int dest_len, const char *localName, const char *appendage=nullptr, const char *fullNa",MatchSource.WIKI,doc/master/classTTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTabCom.html
Energy Efficiency,allocate,allocated," . [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the name of a class. ; user must delete. returns 0 in case of error. ; Definition at line 2206 of file TTabCom.cxx. ◆ MakeClassFromVarName(). TClass * TTabCom::MakeClassFromVarName ; (; const char ; varName[], . EContext_t & ; context, . int ; iter = 0 . ). private . [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the name of a variable. ; user must delete. returns 0 in case of error. if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf. context sensitive behavior. ; Definition at line 2255 of file TTabCom.cxx. ◆ NewListOfFilesInPath(). TSeqCollection * TTabCom::NewListOfFilesInPath ; (; const char ; path1[]). static . [static utility function]///////////////////////////// ; creates a list containing the full path name for each file in the (colon separated) string ""path1""; memory is allocated with ""new"", so whoever calls this function takes responsibility for deleting it. ; Definition at line 1049 of file TTabCom.cxx. ◆ NoMsg(). void TTabCom::NoMsg ; (; Int_t ; errorLevel). static . [static utility function]///////////////////////////// ; calling ""NoMsg( errorLevel )"", sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that all errors with ""level < errorLevel"" will be ignored.; calling the function with a negative argument (e.g., ""NoMsg( -1 )"") resets gErrorIgnoreLevel to its previous value. ; Definition at line 1108 of file TTabCom.cxx. ◆ operator=(). TTabCom & TTabCom::operator= ; (; const TTabCom & ; ). privatedelete . ◆ ParseReverse(). int TTabCom::ParseReverse ; (; const char * ; var_str, . int ; start . ). private . Returns the place in the string where to put the \0, starting the search from ""start"". ; Definition at line 2565 of file TTabCom.cxx. ◆ PathIsSpecifiedInFileName(). Bool_t TTabCom::PathIsSpecifiedInFileName ; (; ",MatchSource.WIKI,doc/master/classTTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTabCom.html
Integrability,message,message,"ext () const;  [private] ;  ; TString DeterminePath (const TString &fileName, const char defaultPath[]) const;  [private] ;  ; TString ExtendPath (const char originalPath[], TString newBase) const;  [private] ;  ; void InitPatterns ();  [private] ;  ; TClass * MakeClassFromClassName (const char className[]) const;  [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the name of a class. ;  ; TClass * MakeClassFromVarName (const char varName[], EContext_t &context, int iter=0);  [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the name of a variable. ;  ; TTabCom & operator= (const TTabCom &)=delete;  ; int ParseReverse (const char *var_str, int start);  Returns the place in the string where to put the \0, starting the search from ""start"". ;  ; void SetPattern (EContext_t handle, const char regexp[]);  [private] ;  ; TClass * TryMakeClassFromClassName (const char className[]) const;  Same as above but does not print the error message. ;  . Private Attributes; char * fBuf;  ; Int_t fLastIter;  ; Pattern_t fPat [kNUM_PAT][1024];  ; TSeqCollection * fpClasses;  ; TSeqCollection * fpDirectives;  ; TSeqCollection * fpEnvVars;  ; TSeqCollection * fpFiles;  ; TSeqCollection * fpGlobals;  ; int * fpLoc;  ; TSeqCollection * fpPragmas;  ; ULong64_t fPrevInterpMarker;  ; TSeqCollection * fpSysIncFiles;  ; TSeqCollection * fpUsers;  ; const char * fRegExp [kNUM_PAT];  ; Bool_t fVarIsPointer;  . #include <TTabCom.h>; Member Typedef Documentation. ◆ TContainer. typedef TList TTabCom::TContainer. Definition at line 59 of file TTabCom.h. ◆ TContIter. typedef TListIter TTabCom::TContIter. Definition at line 60 of file TTabCom.h. Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkDebug . Definition at line 111 of file TTabCom.h. ◆ EContext_t. enum TTabCom::EContext_t. EnumeratorkUNKNOWN_CONTEXT ; kSYS_UserNa",MatchSource.WIKI,doc/master/classTTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTabCom.html
Modifiability,variab,variables," 52 of file TTabCom.h. Public Types; enum  { kDebug = 17; };  ; enum  EContext_t { ;   kUNKNOWN_CONTEXT =-1; , kSYS_UserName; , kSYS_EnvVar; , kCINT_stdout; , ;   kCINT_stderr; , kCINT_stdin; , kCINT_Edit; , kCINT_Load; , ;   kCINT_Exec; , kCINT_EXec; , kCINT_pragma; , kCINT_includeSYS; , ;   kCINT_includePWD; , kCINT_cpp; , kROOT_Load; , kSYS_FileName; , ;   kCXX_NewProto; , kCXX_ConstructorProto; , kCXX_ScopeProto; , kCXX_DirectProto; , ;   kCXX_IndirectProto; , kCXX_ScopeMember; , kCXX_DirectMember; , kCXX_IndirectMember; , ;   kCXX_Global; , kCXX_GlobalProto; , kNUM_PAT. };  ; typedef TList TContainer;  ; typedef TListIter TContIter;  . Public Member Functions;  TTabCom ();  Default constructor. ;  ; virtual ~TTabCom ();  ; void ClearAll ();  clears all lists except for user names and system include files. ;  ; void ClearClasses ();  Clear classes and namespace collections. ;  ; void ClearCppDirectives ();  Forget all Cpp directives seen so far. ;  ; void ClearEnvVars ();  Forget all environment variables seen so far. ;  ; void ClearFiles ();  Close all files. ;  ; void ClearGlobalFunctions ();  Forget all global functions seen so far. ;  ; void ClearGlobals ();  Forget all global variables seen so far. ;  ; void ClearPragmas ();  Forget all pragmas seen so far. ;  ; void ClearSysIncFiles ();  Close system files. ;  ; void ClearUsers ();  Forget all user seen so far. ;  ; const TSeqCollection * GetListOfClasses ();  Return the list of classes. ;  ; const TSeqCollection * GetListOfCppDirectives ();  Return the list of CPP directives. ;  ; const TSeqCollection * GetListOfEnvVars ();  Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. ;  ; const TSeqCollection * GetListOfFilesInPath (const char path[]);  ""path"" should be initialized with a colon separated list of system directories ;  ; TCollection * GetListOfGlobalFunctions ();  Return the list of global functions. ;  ; const TSeqCollection * GetListOfGlobals ();  Return the list of globals",MatchSource.WIKI,doc/master/classTTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTabCom.html
Testability,test,test,". static . [static utility function]///////////////////////////// ; calling ""NoMsg( errorLevel )"", sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that all errors with ""level < errorLevel"" will be ignored.; calling the function with a negative argument (e.g., ""NoMsg( -1 )"") resets gErrorIgnoreLevel to its previous value. ; Definition at line 1108 of file TTabCom.cxx. ◆ operator=(). TTabCom & TTabCom::operator= ; (; const TTabCom & ; ). privatedelete . ◆ ParseReverse(). int TTabCom::ParseReverse ; (; const char * ; var_str, . int ; start . ). private . Returns the place in the string where to put the \0, starting the search from ""start"". ; Definition at line 2565 of file TTabCom.cxx. ◆ PathIsSpecifiedInFileName(). Bool_t TTabCom::PathIsSpecifiedInFileName ; (; const TString & ; fileName). static . [static utility function]///////////////////////////// ; true if ""fileName""; is an absolute path (""/tmp/a""); is a relative path (""../whatever"", ""./test""); starts with user name (""~/mail""); starts with an environment variable (""$ROOTSYS/bin"") . Definition at line 1088 of file TTabCom.cxx. ◆ RehashAll(). void TTabCom::RehashAll ; (; ). clears and then rebuilds all lists except for user names and system include files. ; Definition at line 415 of file TTabCom.cxx. ◆ RehashClasses(). void TTabCom::RehashClasses ; (; ). Do the class rehash. ; Definition at line 335 of file TTabCom.cxx. ◆ RehashCppDirectives(). void TTabCom::RehashCppDirectives ; (; ). Cpp rehashing. ; Definition at line 344 of file TTabCom.cxx. ◆ RehashEnvVars(). void TTabCom::RehashEnvVars ; (; ). Environemnt variables rehashing. ; Definition at line 353 of file TTabCom.cxx. ◆ RehashFiles(). void TTabCom::RehashFiles ; (; ). Close files. ; Definition at line 362 of file TTabCom.cxx. ◆ RehashGlobalFunctions(). void TTabCom::RehashGlobalFunctions ; (; ). Reload global functions. ; Definition at line 370 of file TTabCom.cxx. ◆ RehashGlobals(). void TTabCom::RehashGlobals ; (; ). Reload globals. ; Definition at line 37",MatchSource.WIKI,doc/master/classTTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTabCom.html
Usability,clear,clears,"ng...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TTabCom Class Reference. . Definition at line 52 of file TTabCom.h. Public Types; enum  { kDebug = 17; };  ; enum  EContext_t { ;   kUNKNOWN_CONTEXT =-1; , kSYS_UserName; , kSYS_EnvVar; , kCINT_stdout; , ;   kCINT_stderr; , kCINT_stdin; , kCINT_Edit; , kCINT_Load; , ;   kCINT_Exec; , kCINT_EXec; , kCINT_pragma; , kCINT_includeSYS; , ;   kCINT_includePWD; , kCINT_cpp; , kROOT_Load; , kSYS_FileName; , ;   kCXX_NewProto; , kCXX_ConstructorProto; , kCXX_ScopeProto; , kCXX_DirectProto; , ;   kCXX_IndirectProto; , kCXX_ScopeMember; , kCXX_DirectMember; , kCXX_IndirectMember; , ;   kCXX_Global; , kCXX_GlobalProto; , kNUM_PAT. };  ; typedef TList TContainer;  ; typedef TListIter TContIter;  . Public Member Functions;  TTabCom ();  Default constructor. ;  ; virtual ~TTabCom ();  ; void ClearAll ();  clears all lists except for user names and system include files. ;  ; void ClearClasses ();  Clear classes and namespace collections. ;  ; void ClearCppDirectives ();  Forget all Cpp directives seen so far. ;  ; void ClearEnvVars ();  Forget all environment variables seen so far. ;  ; void ClearFiles ();  Close all files. ;  ; void ClearGlobalFunctions ();  Forget all global functions seen so far. ;  ; void ClearGlobals ();  Forget all global variables seen so far. ;  ; void ClearPragmas ();  Forget all pragmas seen so far. ;  ; void ClearSysIncFiles ();  Close system files. ;  ; void ClearUsers ();  Forget all user seen so far. ;  ; const TSeqCollection * GetListOfClasses ();  Return the list of classes. ;  ; const TSeqCollection * GetListOfCppDirectives ();  Return the list of CPP directives. ;  ; const TSeqCollection * GetListOfEnvVars ();  Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. ;  ; const TSeqCollection * GetListOfFilesInPath (const char path[]);  ""path""",MatchSource.WIKI,doc/master/classTTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTabCom.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTask.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTask.html
Integrability,interface,interface,". ROOT: TTask Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TTask Class ReferenceCore ROOT classes » Base ROOT classes. ; Legacy Code TTask is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TTask might still be a valid solution. ; TTask is a base class that can be used to build a complex tree of Tasks. Each TTask derived class may contain other TTasks that can be executed recursively, such that a complex program can be dynamically built and executed by invoking the services of the top level Task or one of its subtasks.; Use the TTask::Add function to add a subtask to an existing TTask. To execute a TTask, one calls the ExecuteTask function. ExecuteTask will call recursively:. the TTask::Exec function of the derived class; TTask::ExecuteTasks to execute for each task the list of its subtasks. If the top level task (see example below) is added to the list of Root browsable objects, the tree of tasks can be visualized by the Root browser. The browser can be used to start a task, set break points at the beginning of a task or when the task has completed. At a breakpoint, data structures generated by the execution up this point may be inspected asynchronously and then the execution can be resumed by selecting the ""Continue"" function of a task.; A Task may be active or inactive (controlled by TTask::SetActive). When a task is not active, its sub tasks are not executed.; A TTask tree may be made persistent, saving the status of all the tasks.; The Root browser's picture below has been generated by executing the following script: {; TTask *aliroot = new TTask(""aliroot"",""ALICE reconstruction main task"");; TTask *geominit = new TTask(""",MatchSource.WIKI,doc/master/classTTask.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTask.html
Modifiability,inherit,inherited,"point. ;  ; virtual void Exec (Option_t *option);  Dummy Execute. ;  ; virtual void ExecuteTask (Option_t *option=""0"");  Execute main task and its subtasks. ;  ; virtual void ExecuteTasks (Option_t *option);  Execute all the subtasks of a task. ;  ; Int_t GetBreakin () const;  ; Int_t GetBreakout () const;  ; TList * GetListOfTasks () const;  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; void ls (Option_t *option=""*"") const override;  List the tree of tasks. ;  ; TTask & operator= (const TTask &tt);  Assignment operator. ;  ; void SetActive (Bool_t active=kTRUE);  ; void SetBreakin (Int_t breakin=1);  ; void SetBreakout (Int_t breakout=1);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void ",MatchSource.WIKI,doc/master/classTTask.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTask.html
Security,hash,hash,"kin (Int_t breakin=1);  ; void SetBreakout (Int_t breakout=1);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classTTask.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTask.html
Usability,resume,resumed,"nding on the context, using TTask might still be a valid solution. ; TTask is a base class that can be used to build a complex tree of Tasks. Each TTask derived class may contain other TTasks that can be executed recursively, such that a complex program can be dynamically built and executed by invoking the services of the top level Task or one of its subtasks.; Use the TTask::Add function to add a subtask to an existing TTask. To execute a TTask, one calls the ExecuteTask function. ExecuteTask will call recursively:. the TTask::Exec function of the derived class; TTask::ExecuteTasks to execute for each task the list of its subtasks. If the top level task (see example below) is added to the list of Root browsable objects, the tree of tasks can be visualized by the Root browser. The browser can be used to start a task, set break points at the beginning of a task or when the task has completed. At a breakpoint, data structures generated by the execution up this point may be inspected asynchronously and then the execution can be resumed by selecting the ""Continue"" function of a task.; A Task may be active or inactive (controlled by TTask::SetActive). When a task is not active, its sub tasks are not executed.; A TTask tree may be made persistent, saving the status of all the tasks.; The Root browser's picture below has been generated by executing the following script: {; TTask *aliroot = new TTask(""aliroot"",""ALICE reconstruction main task"");; TTask *geominit = new TTask(""geomInit"",""Initialize ALICE geometry"");; TTask *matinit = new TTask(""matInit"",""Initialize ALICE materials"");; TTask *physinit = new TTask(""physInit"",""Initialize Physics processes"");; TTask *tracker = new TTask(""tracker"",""Track reconstruction manager"");; TTask *tpcrec = new TTask(""tpcrec"",""TPC reconstruction"");; TTask *itsrec = new TTask(""itsrec"",""ITS reconstruction"");; TTask *muonrec = new TTask(""muonRec"",""Muon Reconstruction"");; TTask *phosrec = new TTask(""phosRec"",""Phos Reconstruction"");; TTask *richre",MatchSource.WIKI,doc/master/classTTask.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTask.html
Availability,mask,mask,". ROOT: TTermInputHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TTermInputHandler Class Reference. . Definition at line 121 of file TRint.cxx. Public Member Functions;  TTermInputHandler (Int_t fd);  ; Bool_t Notify () override;  Notify implementation. Call the application interupt handler. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteNotify ();  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const ov",MatchSource.WIKI,doc/master/classTTermInputHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTermInputHandler.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTTermInputHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTermInputHandler.html
Modifiability,inherit,inherited,". ROOT: TTermInputHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TTermInputHandler Class Reference. . Definition at line 121 of file TRint.cxx. Public Member Functions;  TTermInputHandler (Int_t fd);  ; Bool_t Notify () override;  Notify implementation. Call the application interupt handler. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteNotify ();  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const ov",MatchSource.WIKI,doc/master/classTTermInputHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTermInputHandler.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTTermInputHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTermInputHandler.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTeXDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTeXDump.html
Energy Efficiency,green,green,"TeXDump.h. ◆ NewPage(). void TTeXDump::NewPage ; (; ). overridevirtual . Start the TeX page. This function starts the tikzpicture environment. ; Implements TVirtualPS.; Definition at line 648 of file TTeXDump.cxx. ◆ Off(). void TTeXDump::Off ; (; ). Deactivate an already open TeX file. ; Definition at line 240 of file TTeXDump.cxx. ◆ On(). void TTeXDump::On ; (; ). Activate an already open TeX file. ; Definition at line 224 of file TTeXDump.cxx. ◆ Open(). void TTeXDump::Open ; (; const char * ; filename, . Int_t ; type = -111 . ). overridevirtual . Open a TeX file. ; Implements TVirtualPS.; Definition at line 131 of file TTeXDump.cxx. ◆ Range(). void TTeXDump::Range ; (; Float_t ; xrange, . Float_t ; yrange . ). Set the range for the paper in centimetres. ; Definition at line 672 of file TTeXDump.cxx. ◆ SetColor() [1/2]. void TTeXDump::SetColor ; (; Float_t ; r, . Float_t ; g, . Float_t ; b . ). overridevirtual . Set color with its R G B components. . r: % of red in [0,1]; g: % of green in [0,1]; b: % of blue in [0,1] . Implements TVirtualPS.; Definition at line 757 of file TTeXDump.cxx. ◆ SetColor() [2/2]. void TTeXDump::SetColor ; (; Int_t ; color = 1). Set color with its color index. ; Definition at line 736 of file TTeXDump.cxx. ◆ SetFillColor(). void TTeXDump::SetFillColor ; (; Color_t ; cindex = 1). overridevirtual . Set color index for fill areas. ; Reimplemented from TAttFill.; Definition at line 683 of file TTeXDump.cxx. ◆ SetLineColor(). void TTeXDump::SetLineColor ; (; Color_t ; cindex = 1). overridevirtual . Set color index for lines. ; Reimplemented from TAttLine.; Definition at line 691 of file TTeXDump.cxx. ◆ SetLineScale(). void TTeXDump::SetLineScale ; (; Float_t ; scale = 1). inline . Definition at line 67 of file TTeXDump.h. ◆ SetLineStyle(). void TTeXDump::SetLineStyle ; (; Style_t ; linestyle = 1). overridevirtual . Change the line style. . linestyle = 2 dashed; linestyle = 3 dotted; linestyle = 4 dash-dotted; linestyle = else solid (1 in is use",MatchSource.WIKI,doc/master/classTTeXDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTeXDump.html
Integrability,interface,interface," Then, the generated file (hpx.tex) can be included in a LaTeX document (simple.tex) in the following way: \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}; TTeXDumpInterface to TeX.Definition TTeXDump.h:20; Rcpp::asTString as(SEXP s)Definition RExports.h:86; TMVA_SOFIE_GNN.endendDefinition TMVA_SOFIE_GNN.py:207; Note the three directives needed at the top of the LaTeX file: \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; Then including the picture in the document is done with the \input directive.; The command pdflatex simple.tex will generate the corresponding pdf file simple.pdf. ; Definition at line 20 of file TTeXDump.h. Public Member Functions;  TTeXDump ();  Default TeX constructor. ;  ;  TTeXDump (const char *filename, Int_t type=-113);  Initialize the TeX interface. ;  ;  ~TTeXDump () override;  Default TeX destructor. ;  ; void CellArrayBegin (Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2) override;  Begin the Cell Array painting. ;  ; void CellArrayEnd () override;  End the Cell Array painting. ;  ; void CellArrayFill (Int_t r, Int_t g, Int_t b) override;  Paint the Cell Array. ;  ; void Close (Option_t *opt="""") override;  Close a TeX file. ;  ; Int_t CMtoTeX (Double_t u);  ; void DefineMarkers ();  add additional pgfplotmarks ;  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Draw a Box. ;  ; void DrawFrame (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light) override;  Draw a Frame around a box. ;  ; void DrawPolyLine (Int_t n, TPoints *xy);  Draw a PolyLine. ;  ; void DrawPolyLineNDC (Int_t n, TPoints *uv);  Draw a PolyLine in NDC space. ;  ; void DrawPolyMarker (Int_t n, Double_t *x, Double_t *y",MatchSource.WIKI,doc/master/classTTeXDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTeXDump.html
Modifiability,inherit,inherited,"Color_t cindex=1) override;  Set color index for markers. ;  ; void SetMarkerSize (Size_t msize=1) override;  Set size for markers. ;  ; void SetTextColor (Color_t cindex=1) override;  Set color index for text. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Text (Double_t x, Double_t y, const char *string) override;  Draw text. ;  ; void Text (Double_t, Double_t, const wchar_t *) override;  ; void TextNDC (Double_t u, Double_t v, const char *string);  Write a string of characters in NDC. ;  ; void TextNDC (Double_t, Double_t, const wchar_t *);  ; Float_t UtoTeX (Double_t u);  Convert U from NDC coordinate to TeX. ;  ; Float_t VtoTeX (Double_t v);  Convert V from NDC coordinate to TeX. ;  ; Float_t XtoTeX (Double_t x);  Convert X from world coordinate to TeX. ;  ; Float_t YtoTeX (Double_t y);  Convert Y from world coordinate to TeX. ;  ;  Public Member Functions inherited from TVirtualPS;  TVirtualPS ();  VirtualPS default constructor. ;  ;  TVirtualPS (const char *filename, Int_t type=-111);  VirtualPS constructor. ;  ; virtual ~TVirtualPS ();  VirtualPS destructor. ;  ; virtual void * GetStream () const;  ; virtual Int_t GetType () const;  ; TClass * IsA () const override;  ; virtual void PrintFast (Int_t nch, const char *string="""");  Fast version of Print. ;  ; virtual void PrintRaw (Int_t len, const char *str);  Print a raw. ;  ; virtual void PrintStr (const char *string="""");  Output the string str in the output buffer. ;  ; virtual void SetStream (std::ofstream *os);  ; virtual void SetType (Int_t=-111);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WriteInteger (Int_t i, Bool_t space=kTRUE);  Write one Integer to the file. ;  ; virtual void WriteReal (Float_t r, Bool_t space=kTRUE);  Write a Real number to the file. ;  ;  Public Member Functions inh",MatchSource.WIKI,doc/master/classTTeXDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTeXDump.html
Security,hash,hash,"ger to the file. ;  ; virtual void WriteReal (Float_t r, Bool_t space=kTRUE);  Write a Real number to the file. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTTeXDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTeXDump.html
Usability,user-friendly,user-friendly,". ROOT: TTeXDump Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TTeXDump Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Interface to TeX. ; This class allow to generate PGF/TikZ vector graphics output which can be included in TeX and LaTeX documents.; PGF is a TeX macro package for generating graphics. It is platform and format-independent and works together with the most important TeX backend drivers, including pdftex and dvips. It comes with a user-friendly syntax layer called TikZ.; To generate a such file it is enough to do: gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TStyle::SetPaperSizevoid SetPaperSize(EPaperSize size)Set paper size for PostScript output.Definition TStyle.cxx:1704; Then, the generated file (hpx.tex) can be included in a LaTeX document (simple.tex) in the following way: \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}; TTeXDumpInterface to TeX.Definition TTeXDump.h:20; Rcpp::asTString as(SEXP s)Definition RExports.h:86; TMVA_SOFIE_GNN.endendDefinition TMVA_SOFIE_GNN.py:207; Note the three directives needed at the top of the LaTeX file: \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; Then including the picture in the document is done with the \input directive.; The command pdflatex simple.tex will generate the corresponding pdf file simple.pdf. ; Definition at line 20 of file TTeXDump.h. Public Member Functions;  TTeXDump ();  Default TeX constructor. ;  ;  TTeXDump (con",MatchSource.WIKI,doc/master/classTTeXDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTeXDump.html
Availability,error,error,"t &text) const overrideTTextvirtual; TAttText::Copy(TAttText &atttext) constTAttText; DeclFileName()TTextinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTTextvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawText(Double_t x, Double_t y, const char *text)TTextvirtual; DrawText(Double_t x, Double_t y, const wchar_t *text)TTextvirtual; DrawTextNDC(Double_t x, Double_t y, const char *text)TTextvirtual; DrawTextNDC(Double_t x, Double_t y, const wchar_t *text)TTextvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTTextvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fNameTNamedprotected; fTextAlignTAttTextprotected; fTextAngleTAttTextprotected; fTextColorTAttTextprotected; fTextFontTAttTextprotected; fTextSizeTAttTextprotected; fTitleTNamedprotected; fUniqueIDTObjectprivate; fWcsTitleTTextprotected; fXTTextprotected; fYTTextprotected; GetBBox() overrideTTextvirtual; GetBBoxCenter() overrideTTextvirtual; GetBoundingBox(UInt_t &w, UInt_t &h, Bool_t angle=kFALSE)TTextvirtual; GetControlBox(Int_t x, Int_t y, Double_t theta, Int_t cBoxX[4], Int_t cBoxY[4])TTextvirtual; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetIcon",MatchSource.WIKI,doc/master/classTText-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTText-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TText Member List. This is the complete list of members for TText, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TTextstatic; Class_Name()TTextstatic; Class_Version()TTextinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &text) const overrideTTextvirtual; TAttText::Copy(TAttText &atttext) constTAttText; DeclFileName()TTextinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTTextvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawText(Double_t x, Double_t y, const char *text)TTextvirtual; DrawText(Double_t x, Double_t y, const wchar_t *text)TTextvirtual; DrawTextNDC(Double_t x, Double_t y, const char *text)TTextvirtual; DrawTextNDC(Double_t x, Double_t y, const wchar_t *text)TTextvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTTextvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffe",MatchSource.WIKI,doc/master/classTText-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTText-members.html
Availability,error,error," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTText.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTText.html
Integrability,message,message," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTText.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTText.html
Modifiability,inherit,inherited,";; t->SetTextAngle(45);; t->Draw();; }; kRed@ kRedDefinition Rtypes.h:66; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextAnglevirtual void SetTextAngle(Float_t tangle=0)Set the text angle.Definition TAttText.h:43; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TTextBase class for several text objects.Definition TText.h:22; TText::TTextTText()Definition TText.h:35. Definition at line 22 of file TText.h. Public Types; enum  { kTextNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TText ();  ;  TText (const TText &text);  Copy constructor. ;  ;  TText (Double_t x, Double_t y, const char *text);  Text normal constructor. ;  ;  TText (Double_t x, Double_t y, const wchar_t *text);  Text normal constructor. ;  ;  ~TText () override;  Text default destructor. ;  ; void Copy (TObject &text) const override;  Copy this text to text. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTText.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTText.html
Security,hash,hash,"t x);  ; virtual void SetY (Double_t y);  ; void Streamer (TBuffer &) override;  Stream an object of class TText. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to cu",MatchSource.WIKI,doc/master/classTText.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTText.html
Deployability,patch,patch,"se the TrueType fonts interface. ;  ; static Bool_t IsInitialized ();  ; static void LayoutGlyphs ();  Compute the glyphs positions, fgAscent and fgWidth (needed for alignment). ;  ; static void PrepareString (const char *string);  Put the characters in ""string"" in the ""glyphs"" array. ;  ; static void PrepareString (const wchar_t *string);  Put the characters in ""string"" in the ""glyphs"" array. ;  ; static void SetHinting (Bool_t state);  Set hinting flag. ;  ; static void SetKerning (Bool_t state);  Set kerning flag. ;  ; static void SetRotationMatrix (Float_t angle);  Set the rotation matrix used to rotate the font outlines. ;  ; static void SetSmoothing (Bool_t state);  Set smoothing (anti-aliasing) flag. ;  ; static Int_t SetTextFont (const char *fontname, Int_t italic=0);  Set text font to specified name. ;  ; static void SetTextFont (Font_t fontnumber);  Set specified font. ;  ; static void SetTextSize (Float_t textsize);  Set current text size. ;  ; static void Version (Int_t &major, Int_t &minor, Int_t &patch);  . Protected Types; enum  { kTTMaxFonts = 32; , kMaxGlyphs = 1024; };  . Static Protected Attributes; static Int_t fgAscent = 0;  string ascent, used to compute Y alignment ;  ; static FT_BBox fgCBox;  string control box ;  ; static FT_CharMap fgCharMap [kTTMaxFonts];  font character map ;  ; static Int_t fgCurFontIdx = -1;  current font index ;  ; static FT_Face fgFace [kTTMaxFonts];  font face ;  ; static Int_t fgFontCount = 0;  number of fonts loaded ;  ; static char * fgFontName [kTTMaxFonts];  font name ;  ; static TTF::TTGlyph fgGlyphs [kMaxGlyphs];  glyphs ;  ; static Bool_t fgHinting = kFALSE;  use hinting (true by default) ;  ; static Bool_t fgInit = kFALSE;  true if the Init has been called ;  ; static Bool_t fgKerning = kTRUE;  use kerning (true by default) ;  ; static FT_Library fgLibrary;  FreeType font library. ;  ; static Int_t fgNumGlyphs = 0;  number of glyphs in the string ;  ; static FT_Matrix * fgRotMatrix = nullptr;  rotation matri",MatchSource.WIKI,doc/master/classTTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTF.html
Integrability,interface,interface,"TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void Cleanup ();  Cleanup. Is called by the gCleanupTTF destructor. ;  ; static void ComputeTrailingBlanksWidth (Int_t n);  Compute the trailing blanks width. ;  ; static const char * DeclFileName ();  ; static Int_t GetAscent ();  ; static const FT_BBox & GetBox ();  ; static TTGlyph * GetGlyphs ();  ; static Bool_t GetHinting ();  ; static Bool_t GetKerning ();  ; static Int_t GetNumGlyphs ();  ; static FT_Matrix * GetRotMatrix ();  ; static Bool_t GetSmoothing ();  ; static void GetTextAdvance (UInt_t &a, char *text);  Get advance (a) when text is horizontal. ;  ; static void GetTextExtent (UInt_t &w, UInt_t &h, char *text);  Get width (w) and height (h) when text is horizontal. ;  ; static void GetTextExtent (UInt_t &w, UInt_t &h, wchar_t *text);  Get width (w) and height (h) when text is horizontal. ;  ; static Int_t GetTrailingBlanksWidth ();  ; static Int_t GetWidth ();  ; static void Init ();  Initialise the TrueType fonts interface. ;  ; static Bool_t IsInitialized ();  ; static void LayoutGlyphs ();  Compute the glyphs positions, fgAscent and fgWidth (needed for alignment). ;  ; static void PrepareString (const char *string);  Put the characters in ""string"" in the ""glyphs"" array. ;  ; static void PrepareString (const wchar_t *string);  Put the characters in ""string"" in the ""glyphs"" array. ;  ; static void SetHinting (Bool_t state);  Set hinting flag. ;  ; static void SetKerning (Bool_t state);  Set kerning flag. ;  ; static void SetRotationMatrix (Float_t angle);  Set the rotation matrix used to rotate the font outlines. ;  ; static void SetSmoothing (Bool_t state);  Set smoothing (anti-aliasing) flag. ;  ; static Int_t SetTextFont (const char *fontname, Int_t italic=0);  Set text font to specified name. ;  ; static void SetTextFont (Font_t fontnumber);  Set specified font. ;  ; static void SetTextSize (Float_t textsize);  Set current text siz",MatchSource.WIKI,doc/master/classTTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTF.html
Performance,load,loaded,"(Bool_t state);  Set kerning flag. ;  ; static void SetRotationMatrix (Float_t angle);  Set the rotation matrix used to rotate the font outlines. ;  ; static void SetSmoothing (Bool_t state);  Set smoothing (anti-aliasing) flag. ;  ; static Int_t SetTextFont (const char *fontname, Int_t italic=0);  Set text font to specified name. ;  ; static void SetTextFont (Font_t fontnumber);  Set specified font. ;  ; static void SetTextSize (Float_t textsize);  Set current text size. ;  ; static void Version (Int_t &major, Int_t &minor, Int_t &patch);  . Protected Types; enum  { kTTMaxFonts = 32; , kMaxGlyphs = 1024; };  . Static Protected Attributes; static Int_t fgAscent = 0;  string ascent, used to compute Y alignment ;  ; static FT_BBox fgCBox;  string control box ;  ; static FT_CharMap fgCharMap [kTTMaxFonts];  font character map ;  ; static Int_t fgCurFontIdx = -1;  current font index ;  ; static FT_Face fgFace [kTTMaxFonts];  font face ;  ; static Int_t fgFontCount = 0;  number of fonts loaded ;  ; static char * fgFontName [kTTMaxFonts];  font name ;  ; static TTF::TTGlyph fgGlyphs [kMaxGlyphs];  glyphs ;  ; static Bool_t fgHinting = kFALSE;  use hinting (true by default) ;  ; static Bool_t fgInit = kFALSE;  true if the Init has been called ;  ; static Bool_t fgKerning = kTRUE;  use kerning (true by default) ;  ; static FT_Library fgLibrary;  FreeType font library. ;  ; static Int_t fgNumGlyphs = 0;  number of glyphs in the string ;  ; static FT_Matrix * fgRotMatrix = nullptr;  rotation matrix ;  ; static Bool_t fgSmoothing = kTRUE;  use anti-aliasing (true when >8 planes, false otherwise) ;  ; static Int_t fgSymbItaFontIdx = -1;  Symbol italic font index. ;  ; static Int_t fgTBlankW = 0;  trailing blanks width ;  ; static Int_t fgWidth = 0;  string width, used to compute X alignment ;  . Friends; class TGWin32;  ; class TGX11TTF;  ; class TMathTextRenderer;  . #include <TTF.h>; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. protected . EnumeratorkTT",MatchSource.WIKI,doc/master/classTTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTF.html
Availability,error,error,"ct to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTThread.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThread.html
Energy Efficiency,allocate,allocated,"t TThread::CleanUpPop ; (; Int_t ; exe = 0). static . Static method which pops thread cleanup method off stack. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 697 of file TThread.cxx. ◆ CleanUpPush(). Int_t TThread::CleanUpPush ; (; void * ; free, . void * ; arg = nullptr . ). static . Static method which pushes thread cleanup method on stack. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 685 of file TThread.cxx. ◆ Constructor(). void TThread::Constructor ; (; ). private . Common thread constructor. ; Definition at line 364 of file TThread.cxx. ◆ DeclFileName(). static const char * TThread::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 180 of file TThread.h. ◆ Delete() [1/2]. void TThread::Delete ; (; Option_t * ; option = """"). inlineoverridevirtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Definition at line 127 of file TThread.h. ◆ Delete() [2/2]. Int_t TThread::Delete ; (; TThread *& ; th). static . Static method to delete the specified thread. ; Returns -1 in case the thread was running and has been killed. Returns 0 in case the thread has been Delete and Cleaned up. The th pointer is not valid anymore in that case. ; Definition at line 416 of file TThread.cxx. ◆ DoError(). void TThread::DoError ; (; Int_t ; level, . const char * ; location, . const char * ; fmt, . va_list ; va . ); const. overrideprivatevirtual . Interface to ErrorHandler. ; User has to specify the class name as part of the location, just like for the global Info(), Warning() and Error() functions. ; Reimplemented from TObject.; Definition at line 1000 of file TThread.cxx. ◆ ErrorHandler(). void TThread::ErrorHandler ; (; int ; level, . const char * ; location, . const char * ; fmt, . va_list ; ap . ); const. private . Thread specif",MatchSource.WIKI,doc/master/classTThread.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThread.html
Integrability,interface,interface,". ROOT: TThread Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TThread Class Reference. ; Legacy Code TThread is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TThread might still be a valid solution. ; This class implements threads. A thread is an execution environment much lighter than a process. A single process can have multiple threads. The actual work is done via the TThreadImp class (either TPosixThread or TWin32Thread). ; Definition at line 40 of file TThread.h. Public Types; enum  EPriority { kLowPriority; , kNormalPriority; , kHighPriority; };  ; enum  EState { ;   kInvalidState; , kNewState; , kRunningState; , kTerminatedState; , ;   kFinishedState; , kCancelingState; , kCanceledState; , kDeletingState. };  ; typedef void(* VoidFunc_t) (void *);  ; typedef void *(* VoidRtnFunc_t) (void *);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TThread (const char *thname, VoidFunc_t fn, void *arg=nullptr, EPriority pri=kNormalPrior",MatchSource.WIKI,doc/master/classTThread.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThread.html
Modifiability,inherit,inherited,"s |; Static Private Attributes |; Friends |; List of all members ; TThread Class Reference. ; Legacy Code TThread is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TThread might still be a valid solution. ; This class implements threads. A thread is an execution environment much lighter than a process. A single process can have multiple threads. The actual work is done via the TThreadImp class (either TPosixThread or TWin32Thread). ; Definition at line 40 of file TThread.h. Public Types; enum  EPriority { kLowPriority; , kNormalPriority; , kHighPriority; };  ; enum  EState { ;   kInvalidState; , kNewState; , kRunningState; , kTerminatedState; , ;   kFinishedState; , kCancelingState; , kCanceledState; , kDeletingState. };  ; typedef void(* VoidFunc_t) (void *);  ; typedef void *(* VoidRtnFunc_t) (void *);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TThread (const char *thname, VoidFunc_t fn, void *arg=nullptr, EPriority pri=kNormalPriority);  Create a detached thread with a name. ;  ;  TThread (const char *thname, VoidRtnFunc_t fn, void *arg=nullptr, EPriority pri=kNormalPriority);  Create thread with a name. ;  ;  TThread (Long_t id=0);  Create a TThread for a already running thread. ;  ;  TThread (VoidFunc_t fn, void *arg",MatchSource.WIKI,doc/master/classTThread.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThread.html
Safety,safe,safe,"s ();  Static method to check if threads exist. ;  ; static Int_t Exit (void *ret=nullptr);  Static method which terminates the execution of the calling thread. ;  ; static TThread * GetThread (const char *name);  Static method to find a thread by name. ;  ; static TThread * GetThread (Long_t id);  Static method to find a thread by id. ;  ; static Int_t GetTime (ULong_t *absSec, ULong_t *absNanoSec);  Static method to get the current time. ;  ; static void Initialize ();  Initialize the Thread package. ;  ; static Bool_t IsInitialized ();  Return true, if the TThread objects have been initialize. ;  ; static Long_t Join (Long_t id, void **ret=nullptr);  Static method to join a thread by id. ;  ; static Int_t Kill (const char *name);  Static method to kill thread by name. ;  ; static Int_t Kill (Long_t id);  Static method to kill the thread by id. ;  ; static Int_t Lock ();  Static method to lock the main thread mutex. ;  ; static void Printf (const char *fmt,...);  Static method providing a thread safe printf. Appends a newline. ;  ; static void Ps ();  Static method listing the existing threads. ;  ; static void ps ();  ; static TThread * Self ();  Static method returning pointer to current thread. ;  ; static Long_t SelfId ();  Static method returning the id for the current thread. ;  ; static Int_t SetCancelAsynchronous ();  Static method to set the cancellation response type of the calling thread to asynchronous, i.e. ;  ; static Int_t SetCancelDeferred ();  Static method to set the cancellation response type of the calling thread to deferred, i.e. ;  ; static Int_t SetCancelOff ();  Static method to turn off thread cancellation. ;  ; static Int_t SetCancelOn ();  Static method to turn on thread cancellation. ;  ; static Int_t Sleep (ULong_t secs, ULong_t nanos=0);  Static method to sleep the calling thread. ;  ; static Int_t TryLock ();  Static method to try to lock the main thread mutex. ;  ; static void ** Tsd (void *dflt, Int_t k);  Static method returning a ",MatchSource.WIKI,doc/master/classTThread.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThread.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTThread.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThread.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTThreadFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThreadFactory.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTThreadFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThreadFactory.html
Modifiability,inherit,inherited,". ROOT: TThreadFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TThreadFactory Class Referenceabstract. . Definition at line 32 of file TThreadFactory.h. Public Member Functions;  TThreadFactory (const char *name=""Unknown"", const char *title=""Unknown Thread Factory"");  TThreadFactory ctor only called by derived classes. ;  ; virtual ~TThreadFactory ();  ; virtual TConditionImp * CreateConditionImp (TMutexImp *m)=0;  ; virtual TMutexImp * CreateMutexImp (Bool_t recursive)=0;  ; virtual TThreadImp * CreateThreadImp ()=0;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (O",MatchSource.WIKI,doc/master/classTThreadFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThreadFactory.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTThreadFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThreadFactory.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTThreadImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThreadImp.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTThreadImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThreadImp.html
Modifiability,inherit,inherited,"|; Public Member Functions |; Static Public Member Functions |; List of all members ; TThreadImp Class Referenceabstract. . Definition at line 31 of file TThreadImp.h. Public Member Functions;  TThreadImp ();  ; virtual ~TThreadImp ();  ; virtual Int_t CancelPoint ()=0;  ; virtual Int_t CleanUp (void **main)=0;  ; virtual Int_t CleanUpPop (void **main, Int_t exe)=0;  ; virtual Int_t CleanUpPush (void **main, void *free, void *arg)=0;  ; virtual Int_t Exit (void *ret)=0;  ; TClass * IsA () const override;  ; virtual Int_t Join (TThread *th, void **ret)=0;  ; virtual Int_t Kill (TThread *th)=0;  ; virtual Int_t Run (TThread *th, const int affinity=-1)=0;  ; virtual Long_t SelfId ()=0;  ; virtual Int_t SetCancelAsynchronous ()=0;  ; virtual Int_t SetCancelDeferred ()=0;  ; virtual Int_t SetCancelOff ()=0;  ; virtual Int_t SetCancelOn ()=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTThreadImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThreadImp.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTThreadImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThreadImp.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTThreadTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThreadTimer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTThreadTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThreadTimer.html
Modifiability,inherit,inherited,". ROOT: TThreadTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TThreadTimer Class Reference. . Definition at line 203 of file TThread.h. Public Member Functions;  TThreadTimer (Long_t ms=kItimerResolution+10);  Create thread timer. ;  ; Bool_t Notify () override;  Periodically execute the TThread::XAction() method in the main thread. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual",MatchSource.WIKI,doc/master/classTThreadTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThreadTimer.html
Safety,timeout,timeout,"r * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (co",MatchSource.WIKI,doc/master/classTThreadTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThreadTimer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTThreadTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTThreadTimer.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTTimeOutTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTimeOutTimer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTTimeOutTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTimeOutTimer.html
Modifiability,inherit,inherited,". ROOT: TTimeOutTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TTimeOutTimer Class Reference. . Definition at line 76 of file TMonitor.cxx. Public Member Functions;  TTimeOutTimer (TMonitor *m, Long_t ms);  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UIn",MatchSource.WIKI,doc/master/classTTimeOutTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTimeOutTimer.html
Performance,load,load,"ject. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TTimeOutTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TTimeOutTimer(). TTimeOutTimer::TTimeOutTimer ; (; TMonitor * ; m, . Long_t ; ms . ). Definition at line 85 of file TMonitor.cxx. Member Function Documentation. ◆ Notify(). Bool_t TTimeOutTimer::Notify ; (; ). overridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Implements TSysEvtHandler.; Definition at line 93 of file TMonitor.cxx. Member Data Documentation. ◆ fMonitor. TMonitor* TTimeOutTimer::fMonitor. private . Definition at line 78 of file TMonitor.cxx. net/net/src/TMonitor.cxx. TTimeOutTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTTimeOutTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTimeOutTimer.html
Safety,timeout,timeout,"r * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (co",MatchSource.WIKI,doc/master/classTTimeOutTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTimeOutTimer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTTimeOutTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTimeOutTimer.html
Availability,error,error,"st char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr)TQObjectstatic; Disconnect(const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr)TQObjectstatic; Disconnected(const char *)TQObjectinlinevirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Emit(const char *signal, const T &arg)TQObjectinline; Emit(const char *signal)TQObjectinline; EmitVA(const char *signal_name, Int_t, const T &... params)TQObjectinline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAbsTimeTTimerprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fCommandTTimerprotected; fgAllSignalsBlockedTQObjectprotectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fIntSyscallsTTimerprotected; fIsActiveTSysEvtHandlerprivate; fListOfConnectionsTQObjectprotected; fListOfSignalsTQObjectprotected; fObjectTTimerprotected; fSignalsBlockedTQObjectprotected; fSyncTTimerprotected; fTimeTTimerprotected; fTimeIDTTimerprotected; fTimeoutTTimerprotected; fUniqueIDTObjectprivate; GetAbsTime() constTTimerinline; GetCommand() constTTimerinline; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetIconName() constTObjectvirtual; GetListOfClassSignals() constTQObject; GetListOfConnections() constTQOb",MatchSource.WIKI,doc/master/classTTimer-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTimer-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TTimer Member List. This is the complete list of members for TTimer, including all inherited members. AbstractMethod(const char *method) constTObject; Activate()TSysEvtHandler; Activated()TSysEvtHandlerinlinevirtual; Add() overrideTTimerinlinevirtual; Added()TSysEvtHandlerinlinevirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; AreAllSignalsBlocked()TQObjectstatic; AreSignalsBlocked() constTQObjectinline; BlockAllSignals(Bool_t b)TQObjectstatic; BlockSignals(Bool_t b)TQObjectinline; Browse(TBrowser *b)TObjectvirtual; ChangedBy(const char *method)TQObjectinlinevirtual; CheckConnectArgs(TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot)TQObjectprotectedstatic; CheckedHash()TObjectinline; CheckTimer(const TTime &now)TTimer; Class()TTimerstatic; Class_Name()TTimerstatic; Class_Version()TTimerinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; CollectClassSignalLists(TList &list, TClass *cls)TQObject; Compare(const TObject *obj) constTObjectvirtual; CompressName(const char *method_name)TQObjectprotectedstatic; Connect(const char *signal, const char *receiver_class, void *receiver, const char *slot)TQObject; Connect(TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot)TQObjectstatic; Connect(const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot)TQObjectstatic; Connected(const char *)TQObjectinlinevirtual; ConnectToClass(TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot)TQObjectprotectedstatic; ConnectToClass(const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot)TQObjectprotectedstatic; Copy(TOb",MatchSource.WIKI,doc/master/classTTimer-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTimer-members.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTimer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTimer.html
Modifiability,inherit,inherited,"Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consi",MatchSource.WIKI,doc/master/classTTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTimer.html
Safety,timeout,timeout,"mbers |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TTimer Class ReferenceCore ROOT classes » Base ROOT classes. ; Handles synchronous and a-synchronous timer events. . synchronous timer is registered into TSystem and is processed within the standard ROOT event-loop.; asynchronous timer is passed to the operating system which sends an external signal to ROOT and thus interrupts its event-loop. You can use this class in one of the following ways:; Sub-class TTimer and override the Notify() method.; Re-implement the TObject::HandleTimer() method in your class and pass a pointer to this object to timer, see the SetObject() method.; Pass an interpreter command to timer, see SetCommand() method.; Create a TTimer, connect its Timeout() signal to the appropriate methods. Then when the time is up it will emit a Timeout() signal and call connected slots. Minimum timeout interval is defined in TSystem::ESysConstants as kItimerResolution (currently 10 ms).; Signal/slots example: TTimer *timer = new TTimer();; timer->Connect(""Timeout()"", ""myObjectClassName"",; myObject, ""TimerDone()"");; timer->Start(2000, kTRUE); // 2 seconds single-shot; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; TQObject::ConnectBool_t Connect(const char *signal, const char *receiver_class, void *receiver, const char *slot)Non-static method is used to connect from the signal of this object to the receiver slot.Definition TQObject.cxx:869; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; TTimer::Startvirtual void Start(Long_t milliSec=-1, Bool_t singleShot=kFALSE)Starts the timer with a milliSec timeout.Definition TTimer.cxx:213; To emit the Timeout signal repeatedly with minimum timeout: timer->Start(0, kFALSE);; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94. Definition at line 51 of file TTimer.h. Public Member Functions;  TTimer (const char *command, Long_t milliSe",MatchSource.WIKI,doc/master/classTTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTimer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTimer.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTTipDelayTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTipDelayTimer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTTipDelayTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTipDelayTimer.html
Modifiability,inherit,inherited,". ROOT: TTipDelayTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TTipDelayTimer Class Reference. . Definition at line 56 of file TGToolTip.cxx. Public Member Functions;  TTipDelayTimer (TGToolTip *tip, Long_t ms);  ; Bool_t Notify () override;  Notify when timer times out and reset the timer. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with",MatchSource.WIKI,doc/master/classTTipDelayTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTipDelayTimer.html
Safety,timeout,timeout," timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (co",MatchSource.WIKI,doc/master/classTTipDelayTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTipDelayTimer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTTipDelayTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTipDelayTimer.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTToggle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTToggle.html
Deployability,toggle,toggle,". ROOT: TToggle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TToggle Class Reference. ; This class defines toggling facility for both - object's method or variables. ; Assume that user provides an object with a two-state field , and methods to Get/Set value of this field. This object enables to switch values via this method when the only thing you know about the field is the name of the method (or method itself) which sets the field. This facility is required in context Pop-Up menu, when the only information about how to toggle a field is a name of methhod which sets it. This class may be also used for toggling an integer variable, which may be important while building universal objects... When user provides a ""set-method"" of name SetXXX this object tries automaticaly find a matching ""get-method"" by lookin for a method with name GetXXX, IsXXX or HasXXX for given object. ; Definition at line 47 of file TToggle.h. Public Member Functions;  TToggle ();  TToggle default constructor. ;  ; TMethodCall * GetGetter () const;  ; virtual Long_t GetOffValue ();  ; virtual Long_t GetOnValue ();  ; TMethodCall * GetSetter () const;  ; virtual Bool_t GetState ();  Returns the state of Toggle according to its current value and fOnValue, returns true if they match. ;  ; virtual Int_t GetValue ();  ; TClass * IsA () const override;  ; virtual Bool_t IsInitialized ();  ; virtual void SetOffValue (Long_t lof);  ; virtual void SetOnValue (Long_t lon);  ; virtual void SetState (Bool_t state);  Sets the value of toggle to fOnValue or fOffValue according to passed argument. ;  ; virtual void SetToggledObject (TObject *obj, TMethod *anymethod);  Initializes it to toggle an object's datamember using this object's method. ;  ; virtual void SetToggledVariable (Int_t &var);  Initializes object",MatchSource.WIKI,doc/master/classTToggle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTToggle.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTToggle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTToggle.html
Modifiability,variab,variables,". ROOT: TToggle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TToggle Class Reference. ; This class defines toggling facility for both - object's method or variables. ; Assume that user provides an object with a two-state field , and methods to Get/Set value of this field. This object enables to switch values via this method when the only thing you know about the field is the name of the method (or method itself) which sets the field. This facility is required in context Pop-Up menu, when the only information about how to toggle a field is a name of methhod which sets it. This class may be also used for toggling an integer variable, which may be important while building universal objects... When user provides a ""set-method"" of name SetXXX this object tries automaticaly find a matching ""get-method"" by lookin for a method with name GetXXX, IsXXX or HasXXX for given object. ; Definition at line 47 of file TToggle.h. Public Member Functions;  TToggle ();  TToggle default constructor. ;  ; TMethodCall * GetGetter () const;  ; virtual Long_t GetOffValue ();  ; virtual Long_t GetOnValue ();  ; TMethodCall * GetSetter () const;  ; virtual Bool_t GetState ();  Returns the state of Toggle according to its current value and fOnValue, returns true if they match. ;  ; virtual Int_t GetValue ();  ; TClass * IsA () const override;  ; virtual Bool_t IsInitialized ();  ; virtual void SetOffValue (Long_t lof);  ; virtual void SetOnValue (Long_t lon);  ; virtual void SetState (Bool_t state);  Sets the value of toggle to fOnValue or fOffValue according to passed argument. ;  ; virtual void SetToggledObject (TObject *obj, TMethod *anymethod);  Initializes it to toggle an object's datamember using this object's method. ;  ; virtual void SetToggledVariable (Int_t &var);  Initializes object",MatchSource.WIKI,doc/master/classTToggle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTToggle.html
Security,hash,hash,"treamerNVirtual_b);  ; virtual void Toggle ();  Toggles the Values and State of this object and connected data! ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTToggle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTToggle.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTToggleGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTToggleGroup.html
Deployability,toggle,togglegroup,". ROOT: TToggleGroup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TToggleGroup Class Reference. ; This class defines check-box facility for TToggle objects It is used in context menu ""selectors"" for picking up a value. ; Definition at line 30 of file TToggleGroup.h. Public Member Functions;  TToggleGroup ();  Constructor. ;  ;  TToggleGroup (const TToggleGroup &);  Copy constructor. ;  ; virtual ~TToggleGroup ();  Deletes togglegroup but does not disposes toggled objects! ;  ; virtual Int_t Add (TToggle *t, Bool_t select=1);  Add a new toggle. ;  ; virtual TToggle * At (Int_t idx);  ; virtual void DeleteAll ();  Disposes of all objects and clears array. ;  ; virtual TToggle * First ();  ; virtual Int_t GetTogglesCount ();  ; virtual Int_t IndexOf (TToggle *t);  ; virtual Int_t InsertAt (TToggle *t, Int_t pos, Bool_t select=1);  Add a new toggle at a specific position. ;  ; TClass * IsA () const override;  ; virtual TToggle * Last ();  ; TToggleGroup & operator= (const TToggleGroup &);  Assignment operator. ;  ; virtual void Remove (Int_t pos);  ; virtual void Remove (TToggle *t);  ; virtual void Select (Int_t idx);  Select a toggle. ;  ; virtual void Select (TToggle *t);  Selector a toggle. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer ",MatchSource.WIKI,doc/master/classTToggleGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTToggleGroup.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTToggleGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTToggleGroup.html
Modifiability,inherit,inherited,"oggleGroup ();  Deletes togglegroup but does not disposes toggled objects! ;  ; virtual Int_t Add (TToggle *t, Bool_t select=1);  Add a new toggle. ;  ; virtual TToggle * At (Int_t idx);  ; virtual void DeleteAll ();  Disposes of all objects and clears array. ;  ; virtual TToggle * First ();  ; virtual Int_t GetTogglesCount ();  ; virtual Int_t IndexOf (TToggle *t);  ; virtual Int_t InsertAt (TToggle *t, Int_t pos, Bool_t select=1);  Add a new toggle at a specific position. ;  ; TClass * IsA () const override;  ; virtual TToggle * Last ();  ; TToggleGroup & operator= (const TToggleGroup &);  Assignment operator. ;  ; virtual void Remove (Int_t pos);  ; virtual void Remove (TToggle *t);  ; virtual void Select (Int_t idx);  Select a toggle. ;  ; virtual void Select (TToggle *t);  Selector a toggle. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; ",MatchSource.WIKI,doc/master/classTToggleGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTToggleGroup.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTToggleGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTToggleGroup.html
Usability,clear,clears,". ROOT: TToggleGroup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TToggleGroup Class Reference. ; This class defines check-box facility for TToggle objects It is used in context menu ""selectors"" for picking up a value. ; Definition at line 30 of file TToggleGroup.h. Public Member Functions;  TToggleGroup ();  Constructor. ;  ;  TToggleGroup (const TToggleGroup &);  Copy constructor. ;  ; virtual ~TToggleGroup ();  Deletes togglegroup but does not disposes toggled objects! ;  ; virtual Int_t Add (TToggle *t, Bool_t select=1);  Add a new toggle. ;  ; virtual TToggle * At (Int_t idx);  ; virtual void DeleteAll ();  Disposes of all objects and clears array. ;  ; virtual TToggle * First ();  ; virtual Int_t GetTogglesCount ();  ; virtual Int_t IndexOf (TToggle *t);  ; virtual Int_t InsertAt (TToggle *t, Int_t pos, Bool_t select=1);  Add a new toggle at a specific position. ;  ; TClass * IsA () const override;  ; virtual TToggle * Last ();  ; TToggleGroup & operator= (const TToggleGroup &);  Assignment operator. ;  ; virtual void Remove (Int_t pos);  ; virtual void Remove (TToggle *t);  ; virtual void Select (Int_t idx);  Select a toggle. ;  ; virtual void Select (TToggle *t);  Selector a toggle. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer ",MatchSource.WIKI,doc/master/classTToggleGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTToggleGroup.html
Availability,error,error," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTRAP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRAP.html
Energy Efficiency,allocate,allocate,"tDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void SetPoints (Double_t *points) const override;  Create TRAP points. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fAlpha1;  ; Float_t fAlpha2;  ; Float_t fBl1;  ; Float_t fBl2;  ; Float_t fH1;  ; Float_t fH2;  ; Float_t fTl1;  ; Float_t fTl2;  ;  Protected Attributes inherited from TBRIK; Float_t fDx;  ; Float_t fDy;  ; Float_t fDz;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Lin",MatchSource.WIKI,doc/master/classTTRAP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRAP.html
Integrability,message,message," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTRAP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRAP.html
Modifiability,inherit,inherited,"he centre of the side at -H2 in y to the centre of the side at +H2 in y of the face at +DZ in z . Definition at line 33 of file TTRAP.h. Public Member Functions;  TTRAP ();  TRAP shape default constructor. ;  ;  TTRAP (const char *name, const char *title, const char *material, Float_t dz, Float_t theta, Float_t phi, Float_t h1, Float_t bl1, Float_t tl1, Float_t alpha1, Float_t h2, Float_t bl2, Float_t tl2, Float_t alpha2);  TRAP shape normal constructor. ;  ;  ~TTRAP () override;  TRAP shape default destructor. ;  ; virtual Float_t GetAlpha1 () const;  ; virtual Float_t GetAlpha2 () const;  ; virtual Float_t GetBl1 () const;  ; virtual Float_t GetBl2 () const;  ; virtual Float_t GetH1 () const;  ; virtual Float_t GetH2 () const;  ; virtual Float_t GetTl1 () const;  ; virtual Float_t GetTl2 () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBRIK;  TBRIK ();  BRIK shape default constructor. ;  ;  TBRIK (const char *name, const char *title, const char *material, Float_t dx, Float_t dy, Float_t dz);  BRIK shape normal constructor. ;  ;  ~TBRIK () override;  BRIK shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a BRIK. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3D. ;  ; Float_t GetDx () const;  ; Float_t GetDy () const;  ; Float_t GetDz () const;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TShape;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *material);  Shape normal constructor. ;  ;  TShape (const TShape &);  copy constructor ;  ;  ~TShape () override;  Sh",MatchSource.WIKI,doc/master/classTTRAP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRAP.html
Security,hash,hash,"NVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely a",MatchSource.WIKI,doc/master/classTTRAP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRAP.html
Availability,error,error," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTRD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRD1.html
Energy Efficiency,allocate,allocate,"tDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void SetPoints (Double_t *points) const override;  Create TRD1 points. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fDx2;  ;  Protected Attributes inherited from TBRIK; Float_t fDx;  ; Float_t fDy;  ; Float_t fDz;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited f",MatchSource.WIKI,doc/master/classTTRD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRD1.html
Integrability,message,message," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTRD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRD1.html
Modifiability,inherit,inherited,"Protected Attributes |; List of all members ; TTRD1 Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A trapezoid with the x dimension varying along z. . It has 7 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); dx1: half-length along x at the z surface positioned at -DZ; dx2: half-length along x at the z surface positioned at +DZ; dy: half-length along the y-axis; dz: half-length along the z-axis . Definition at line 28 of file TTRD1.h. Public Member Functions;  TTRD1 ();  TRD1 shape default constructor. ;  ;  TTRD1 (const char *name, const char *title, const char *material, Float_t dx1, Float_t dx2, Float_t dy, Float_t dz);  TRD1 shape normal constructor. ;  ;  ~TTRD1 () override;  TRD1 shape default destructor. ;  ; virtual Float_t GetDx2 () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBRIK;  TBRIK ();  BRIK shape default constructor. ;  ;  TBRIK (const char *name, const char *title, const char *material, Float_t dx, Float_t dy, Float_t dz);  BRIK shape normal constructor. ;  ;  ~TBRIK () override;  BRIK shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a BRIK. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3D. ;  ; Float_t GetDx () const;  ; Float_t GetDy () const;  ; Float_t GetDz () const;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TShape;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *material);  Shape normal constructor. ;  ;  TShape (const TShape &);  copy constructor ;  ;  ~TShape () override;  Sh",MatchSource.WIKI,doc/master/classTTRD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRD1.html
Security,hash,hash,"NVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely a",MatchSource.WIKI,doc/master/classTTRD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRD1.html
Availability,error,error," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTRD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRD2.html
Energy Efficiency,allocate,allocate,"tDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void SetPoints (Double_t *points) const override;  Create TRD2 points. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fDx2;  ; Float_t fDy2;  ;  Protected Attributes inherited from TBRIK; Float_t fDx;  ; Float_t fDy;  ; Float_t fDz;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attri",MatchSource.WIKI,doc/master/classTTRD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRD2.html
Integrability,message,message," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTRD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRD2.html
Modifiability,inherit,inherited,"both x and y dimensions varying along z. . It has 8 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); dx1: half-length along x at the z surface positioned at -DZ; dx2: half-length along x at the z surface positioned at +DZ; dy1: half-length along y at the z surface positioned at -DZ; dy2: half-length along y at the z surface positioned at +DZ; dz: half-length along the z-axis . Definition at line 29 of file TTRD2.h. Public Member Functions;  TTRD2 ();  TRD2 shape default constructor. ;  ;  TTRD2 (const char *name, const char *title, const char *material, Float_t dx1, Float_t dx2, Float_t dy1, Float_t dy2, Float_t dz);  TRD2 shape normal constructor. ;  ;  ~TTRD2 () override;  TRD2 shape default destructor. ;  ; Float_t GetDx2 () const;  ; Float_t GetDy2 () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBRIK;  TBRIK ();  BRIK shape default constructor. ;  ;  TBRIK (const char *name, const char *title, const char *material, Float_t dx, Float_t dy, Float_t dz);  BRIK shape normal constructor. ;  ;  ~TBRIK () override;  BRIK shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a BRIK. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3D. ;  ; Float_t GetDx () const;  ; Float_t GetDy () const;  ; Float_t GetDz () const;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TShape;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *material);  Shape normal constructor. ;  ;  TShape (const TShape &);  copy constructor ;  ;  ~TShape () override;  Sh",MatchSource.WIKI,doc/master/classTTRD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRD2.html
Security,hash,hash,"NVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely a",MatchSource.WIKI,doc/master/classTTRD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTRD2.html
Availability,error,error,"_t *opt) overrideTTreeinlinevirtual; Draw(const char *varexp, const TCut &selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)TTreevirtual; Draw(const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)TTreevirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DropBaskets()TTreevirtual; DropBranchFromCache(const char *bname, bool subbranches=false)TTreevirtual; DropBranchFromCache(TBranch *branch, bool subbranches=false)TTreevirtual; DropBuffers(Int_t nbytes)TTreevirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; ELockStatusBits enum nameTTreeprotected; EnableCache()TTree; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; ESetBranchAddressStatus enum nameTTree; EStatusBits enum nameTTree; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAliasesTTreeprotected; fAllocationCountTTreemutableprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fAutoFlushTTreeprotected; fAutoSaveTTreeprotected; fBitsTObjectprivate; fBranchesTTreeprotected; fBranchRefTTreeprotected; fCacheDoAutoInitTTreeprotected; fCacheDoClusterPrefetchTTreeprotected; fCacheSizeTTreeprotected; fCacheUserSetTTreeprotected; fChainOffsetTTreeprotected; fClonesTTreeprotected; fClusterRangeEndTTreeprotected; fClusterSizeTTreeprotected; fDebugTTreeprotected; fDebugMaxTTreeprotected; fDebugMinTTreeprotected; fDefaultEntryOffsetLenTTreeprotected; fDirectoryTTreeprotected; fEntriesTTreeprotected; fEntryListTTreeprotected; fEstimateTTreeprotected; fEventListTTreeprotected; fExternalFriendsTTreeprotected; fFileNumberTTreeprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFlushedBytesTTreeprotected; fFriendLockStatusTT",MatchSource.WIKI,doc/master/classTTree-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree-members.html
Deployability,update,updateExisting,"hAddress(const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr)TTreevirtual; SetBranchAddress(const char *bname, T **add, TBranch **ptr=nullptr)TTreeinline; SetBranchAddress(const char *bname, T *add, TBranch **ptr=nullptr)TTreeinline; SetBranchAddressImp(TBranch *branch, void *addr, TBranch **ptr)TTreeprotected; SetBranchStatus(const char *bname, bool status=true, UInt_t *found=nullptr)TTreevirtual; SetBranchStyle(Int_t style=1)TTreestatic; SetCacheEntryRange(Long64_t first, Long64_t last)TTreevirtual; SetCacheLearnEntries(Int_t n=10)TTreevirtual; SetCacheSize(Long64_t cachesize=-1)TTreevirtual; SetCacheSizeAux(bool autocache=true, Long64_t cacheSize=0)TTreeprotected; SetChainOffset(Long64_t offset=0)TTreeinlinevirtual; SetCircular(Long64_t maxEntries)TTreevirtual; SetClusterPrefetch(bool enabled)TTreeinlinevirtual; SetDebug(Int_t level=1, Long64_t min=0, Long64_t max=9999999)TTreevirtual; SetDefaultEntryOffsetLen(Int_t newdefault, bool updateExisting=false)TTreevirtual; SetDirectory(TDirectory *dir)TTreevirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEntries(Long64_t n=-1)TTreevirtual; SetEntryList(TEntryList *list, Option_t *opt="""")TTreevirtual; SetEstimate(Long64_t nentries=1000000)TTreevirtual; SetEventList(TEventList *list)TTreevirtual; SetFileNumber(Int_t number=0)TTreevirtual; SetFillAttributes()TAttFillvirtual; SetFillColor(Color_t fcolor)TAttFillinlinevirtual; SetFillColorAlpha(Color_t fcolor, Float_t falpha)TAttFillvirtual; SetFillStyle(Style_t fstyle)TAttFillinlinevirtual; SetImplicitMT(bool enabled)TTreeinlinevirtual; SetIOFeatures(const ROOT::TIOFeatures &)TTree; SetLineAttributes()TAttLinevirtual; SetLineColor(Color_t lcolor)TAttLineinlinevirtual; SetLineColorAlpha(Color_t lcolor, Float_t lalpha)TAttLinevirtual; SetLineStyle(Style_t lstyle)TAttLineinlinevirtual; SetLineWidth(Width_t lwidth)TAttLineinlinevirtual; SetMakeClass(Int_t make)TTreevirtual; SetMarkerAtt",MatchSource.WIKI,doc/master/classTTree-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TTree Member List. This is the complete list of members for TTree, including all inherited members. AbstractMethod(const char *method) constTObject; AddAllocationCount(UInt_t count)TTreeinline; AddBranchToCache(const char *bname, bool subbranches=false)TTreevirtual; AddBranchToCache(TBranch *branch, bool subbranches=false)TTreevirtual; AddClone(TTree *)TTree; AddFriend(const char *treename, const char *filename="""")TTreevirtual; AddFriend(const char *treename, TFile *file)TTreevirtual; AddFriend(TTree *tree, const char *alias="""", bool warn=false)TTreevirtual; AddTotBytes(Int_t tot)TTreeinlinevirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AddZipBytes(Int_t zip)TTreeinlinevirtual; AppendPad(Option_t *option="""")TObjectvirtual; AutoSave(Option_t *option="""")TTreevirtual; Branch(const char *name, T *obj, Int_t bufsize=32000, Int_t splitlevel=99)TTreeinline; Branch(const char *name, T **addobj, Int_t bufsize=32000, Int_t splitlevel=99)TTreeinline; Branch(TCollection *list, Int_t bufsize=32000, Int_t splitlevel=99, const char *name="""")TTreevirtual; Branch(TList *list, Int_t bufsize=32000, Int_t splitlevel=99)TTreevirtual; Branch(const char *folder, Int_t bufsize=32000, Int_t splitlevel=99)TTreevirtual; Branch(const char *name, void *address, const char *leaflist, Int_t bufsize=32000)TTreevirtual; Branch(const char *name, char *address, const char *leaflist, Int_t bufsize=32000)TTreeinline; Branch(const char *name, Longptr_t address, const char *leaflist, Int_t bufsize=32000)TTreeinline; Branch(const char *name, int address, const char *leaflist, Int_t bufsize=32000)TTreeinline; Branch(const char *name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=99)TTreevirtual; Branch(const char *name, const char *classname, T *obj, Int_t bufsize=32000, Int_t splitlevel=99)TTreeinline; Branch(const char *name, const char *classname, T **addobj, Int_",MatchSource.WIKI,doc/master/classTTree-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree-members.html
Performance,cache,cachesize,"ong64_t autos=-300000000)TTreevirtual; SetBasketSize(const char *bname, Int_t buffsize=16000)TTreevirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)TTreevirtual; SetBranchAddress(const char *bname, void *add, TClass *realClass, EDataType datatype, bool isptr)TTreevirtual; SetBranchAddress(const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr)TTreevirtual; SetBranchAddress(const char *bname, T **add, TBranch **ptr=nullptr)TTreeinline; SetBranchAddress(const char *bname, T *add, TBranch **ptr=nullptr)TTreeinline; SetBranchAddressImp(TBranch *branch, void *addr, TBranch **ptr)TTreeprotected; SetBranchStatus(const char *bname, bool status=true, UInt_t *found=nullptr)TTreevirtual; SetBranchStyle(Int_t style=1)TTreestatic; SetCacheEntryRange(Long64_t first, Long64_t last)TTreevirtual; SetCacheLearnEntries(Int_t n=10)TTreevirtual; SetCacheSize(Long64_t cachesize=-1)TTreevirtual; SetCacheSizeAux(bool autocache=true, Long64_t cacheSize=0)TTreeprotected; SetChainOffset(Long64_t offset=0)TTreeinlinevirtual; SetCircular(Long64_t maxEntries)TTreevirtual; SetClusterPrefetch(bool enabled)TTreeinlinevirtual; SetDebug(Int_t level=1, Long64_t min=0, Long64_t max=9999999)TTreevirtual; SetDefaultEntryOffsetLen(Int_t newdefault, bool updateExisting=false)TTreevirtual; SetDirectory(TDirectory *dir)TTreevirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEntries(Long64_t n=-1)TTreevirtual; SetEntryList(TEntryList *list, Option_t *opt="""")TTreevirtual; SetEstimate(Long64_t nentries=1000000)TTreevirtual; SetEventList(TEventList *list)TTreevirtual; SetFileNumber(Int_t number=0)TTreevirtual; SetFillAttributes()TAttFillvirtual; SetFillColor(Color_t fcolor)TAttFillinlinevirtual; SetFillColorAlpha(Color_t fcolor, Float_t falpha)TAttFillvirtual; SetFillStyle(Style_t fstyle)TAttFillinlinevirtual; SetImplicitMT(bool en",MatchSource.WIKI,doc/master/classTTree-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree-members.html
Usability,undo,undo," Int_t splitlevel)TTreeprotectedvirtual; Browse(TBrowser *) overrideTTreevirtual; BuildIndex(const char *majorname, const char *minorname=""0"")TTreevirtual; BuildStreamerInfo(TClass *cl, void *pointer=nullptr, bool canOptimize=true)TTree; ChangeFile(TFile *file)TTreevirtual; CheckBranchAddressType(TBranch *branch, TClass *ptrClass, EDataType datatype, bool ptr)TTreeprotectedvirtual; CheckedHash()TObjectinline; Class()TTreestatic; Class_Name()TTreestatic; Class_Version()TTreeinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloneTree(Long64_t nentries=-1, Option_t *option="""")TTreevirtual; Compare(const TObject *obj) const overrideTNamedvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CopyAddresses(TTree *, bool undo=false)TTreevirtual; CopyEntries(TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false)TTreevirtual; CopyTree(const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)TTreevirtual; CreateBasket(TBranch *)TTreevirtual; Debug() constTTreeinline; DeclFileName()TTreeinlinestatic; Delete(Option_t *option="""") overrideTTreevirtual; DirectoryAutoAdd(TDirectory *)TTreevirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *opt) overrideTTreeinlinevirtual; Draw(const char *varexp, const TCut &selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)TTreevirtual; Draw(const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentr",MatchSource.WIKI,doc/master/classTTree-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree-members.html
Availability,avail,available,"ress before filling the branch again. This is done via the TBranch::SetAddress member function. Add a column holding objects; MyClass object;; auto branch = tree.Branch(branchname, &object, bufsize, splitlevel); object; Note: The 2nd parameter must be the address of a valid object. The object must not be destroyed (i.e. be deleted) until the TTree is deleted or TTree::ResetBranchAddress is called. if splitlevel=0, the object is serialized in the branch buffer.; if splitlevel=1 (default), this branch will automatically be split into subbranches, with one subbranch for each data member or object of the object itself. In case the object member is a TClonesArray, the mechanism described in case C is applied to this array.; if splitlevel=2 ,this branch will automatically be split into subbranches, with one subbranch for each data member or object of the object itself. In case the object member is a TClonesArray, it is processed as a TObject*, only one branch. Another available syntax is the following:; auto branch = tree.Branch(branchname, &p_object, bufsize, splitlevel); auto branch = tree.Branch(branchname, className, &p_object, bufsize, splitlevel). p_object is a pointer to an object.; If className is not specified, Branch uses the type of p_object to determine the type of the object.; If className is used to specify explicitly the object type, the className must be of a type related to the one pointed to by the pointer. It should be either a parent or derived class. Note: The pointer whose address is passed to TTree::Branch must not be destroyed (i.e. go out of scope) until the TTree is deleted or TTree::ResetBranchAddress is called.; Note: The pointer p_object must be initialized before calling TTree::Branch; Do either: MyDataClass* p_object = nullptr;; tree.Branch(branchname, &p_object);. Or: auto p_object = new MyDataClass;; tree.Branch(branchname, &p_object);; Whether the pointer is set to zero or not, the ownership of the object is not taken over by the TTree. I",MatchSource.WIKI,doc/master/classTTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree.html
Deployability,update,update,"er of the object TTrack. Fill the Tree; A TTree instance is filled with the invocation of the TTree::Fill method: tree.Fill(); Upon its invocation, a loop on all defined branches takes place that for each branch invokes the TBranch::Fill method. Add a column to an already existing Tree; You may want to add a branch to an existing tree. For example, if one variable in the tree was computed with a certain algorithm, you may want to try another algorithm and compare the results. One solution is to add a new branch, fill it, and save the tree. The code below adds a simple branch to an existing tree. Note the kOverwrite option in the Write method, it overwrites the existing tree. If it is not specified, two copies of the tree headers are saved. void tree3AddBranch() {; TFile f(""tree3.root"", ""update"");; ; Float_t new_v;; auto t3 = f->Get<TTree>(""t3"");; auto newBranch = t3->Branch(""new_v"", &new_v, ""new_v/F"");; ; Long64_t nentries = t3->GetEntries(); // read the number of entries in the t3; ; for (Long64_t i = 0; i < nentries; i++) {; new_v = gRandom->Gaus(0, 1);; newBranch->Fill();; }; ; t3->Write("""", TObject::kOverwrite); // save only the new version of the tree; }; f#define f(i)Definition RSha256.hxx:104; Float_tfloat Float_tDefinition RtypesCore.h:57; Long64_tlong long Long64_tDefinition RtypesCore.h:69; nentriesint nentriesDefinition THbookFile.cxx:91; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TObject::kOverwrite@ kOverwriteoverwrite existing object with same nameDefinition TObject.h:92; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TTree::Fillvirtual Int_t Fill()Fill all branches.Definition TTree.cxx:4603; TTree::BranchTBranch * Branch(const char *name, T *obj, Int_t buf",MatchSource.WIKI,doc/master/classTTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree.html
Energy Efficiency,allocate,allocated,". ROOT: TTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTree Class ReferenceTree Library. ; A TTree represents a columnar dataset. ; Any C++ type can be stored in its columns.; A TTree, often called in jargon tree, consists of a list of independent columns or branches, represented by the TBranch class. Behind each branch, buffers are allocated automatically by ROOT. Such buffers are automatically written to disk or kept in memory until the size stored in the attribute fMaxVirtualSize is reached. Variables of one branch are written to the same buffer. A branch buffer is automatically compressed if the file compression attribute is set (default). Branches may be written to different files (see TBranch::SetFile).; The ROOT user can decide to make one single branch and serialize one object into one single I/O buffer or to make several branches. Making several branches is particularly interesting in the data analysis phase, when it is desirable to have a high reading rate and not all columns are equally interesting. Create a TTree to store columnar data. Construct a TTree; Add a column of Fundamental Types and Arrays thereof; Add a column of a STL Collection instances; Add a column holding an object; Add a column holding a TObjectArray; Fill the tree; Add a column to an already existing Tree; An Example. Construct a TTree; TTree tree(name, title); namechar name[80]Definition TGX11.cxx:110; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; Creates a Tree with name and title.; Various kinds of branches can be added to a tree:; Variables representing fundamental type",MatchSource.WIKI,doc/master/classTTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree.html
Integrability,interface,interface,"T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr=nullptr);  Change branch address, dealing with clone trees properly. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual void SetBranchStatus (const char *bname, bool status=true, UInt_t *found=nullptr);  Set branch status to Process or DoNotProcess. ;  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual Int_t SetCacheSize (Long64_t cachesize=-1);  Set maximum size of the file cache . ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual void SetDirectory (TDirectory *dir);  Change the tree's directory. ;  ; virtual Long64_t SetEntries (Long64_t n=-1);  Change number of entries in the tree. ;  ; virtual void SetEntryList (TEntryList *list, Option_t *opt="""");  Set an EntryList. ;  ; virtual void SetEstimate (Long64_t nentri",MatchSource.WIKI,doc/master/classTTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree.html
Modifiability,variab,variables," if the file compression attribute is set (default). Branches may be written to different files (see TBranch::SetFile).; The ROOT user can decide to make one single branch and serialize one object into one single I/O buffer or to make several branches. Making several branches is particularly interesting in the data analysis phase, when it is desirable to have a high reading rate and not all columns are equally interesting. Create a TTree to store columnar data. Construct a TTree; Add a column of Fundamental Types and Arrays thereof; Add a column of a STL Collection instances; Add a column holding an object; Add a column holding a TObjectArray; Fill the tree; Add a column to an already existing Tree; An Example. Construct a TTree; TTree tree(name, title); namechar name[80]Definition TGX11.cxx:110; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; Creates a Tree with name and title.; Various kinds of branches can be added to a tree:; Variables representing fundamental types, simple classes/structures or list of variables: for example for C or Fortran structures.; Any C++ object or collection, provided by the STL or ROOT. In the following, the details about the creation of different types of branches are given. Add a column (""branch"") holding fundamental types and arrays thereof; This strategy works also for lists of variables, e.g. to describe simple structures. It is strongly recommended to persistify those as objects rather than lists of leaves.; auto branch = tree.Branch(branchname, address, leaflist, bufsize). address is the address of the first item of a structure; leaflist is the concatenation of all the variable names and types separated by a colon character : The variable name and the variable type are separated by a slash (/). The variable type must be 1 character. (Characters after the first are legal and will be appended to the visible name of the leaf, but have no effect.) If no type is given, the type of the variable is assumed to be the sa",MatchSource.WIKI,doc/master/classTTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree.html
Performance,perform,performance,"nition TProfile.h:32; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169. PyROOT; The TTree class has several additions for its use from Python, which are also available in its subclasses e.g. TChain and TNtuple.; First, TTree instances are iterable in Python. Therefore, assuming t is a TTree instance, we can do: for entry in t:; x = entry.branch_name; ...; At each iteration, a new entry of the tree will be read. In the code above, entry allows to access the branch values for the current entry. This can be done with the syntax entry.branch_name or, if the branch name is incompatible with Python naming rules, with e.g. ""getattr(entry, '1_branch_name')"".; Please note that iterating in Python can be slow, so only iterate over a tree as described above if performance is not an issue or when dealing with a small dataset. To read and process the entries of a tree in a much faster way, please use ROOT::RDataFrame.; Second, a couple of TTree methods have been modified to facilitate their use from Python: TTree::Branch and TTree::SetBranchAddress.; Regarding TTree::Branch, the following example shows how we can create different types of branches of a TTree. Note that Branch will just link the new branch with a given Python object, so it is still necessary to fill such object with the desired content before calling TTree::Fill. from array import array; import numpy as np; import ROOT; from ROOT import addressof; ; # Basic type branch (float) - use array of length 1; n = array('f', [ 1.5 ]); t.Branch('floatb', n, 'floatb/F'); ; # Array branch - use array of length N; N = 10; a = array('d', N*[ 0. ]); t.Branch('arrayb', a, 'arrayb[' + str(N) + ']/D'); ; # Array branch - use NumPy array of length N; npa = np.array(N*[ 0. ]); t.",MatchSource.WIKI,doc/master/classTTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree.html
Safety,detect,detector,"s stored in TFiles: for example, these files might not be writeable, just readable. In addition, modifying in place a TTree causes a new TTree instance to be written and the previous one to be deleted. For this reasons, ROOT offers the concept of friends for TTree and TChain: if is good practice to rely on friend trees rather than adding a branch manually. An Example. // A simple example with histograms and a tree; //; // This program creates :; // - a one dimensional histogram; // - a two dimensional histogram; // - a profile histogram; // - a tree; //; // These objects are filled with some random numbers and saved on a file.; ; #include ""TFile.h""; #include ""TH1.h""; #include ""TH2.h""; #include ""TProfile.h""; #include ""TRandom.h""; #include ""TTree.h""; ; //__________________________________________________________________________; main(int argc, char **argv); {; // Create a new ROOT binary machine independent file.; // Note that this file may contain any kind of ROOT objects, histograms,trees; // pictures, graphics objects, detector geometries, tracks, events, etc..; // This file is now becoming the current directory.; TFile hfile(""htree.root"",""RECREATE"",""Demo ROOT file with histograms & trees"");; ; // Create some histograms and a profile histogram; TH1F hpx(""hpx"",""This is the px distribution"",100,-4,4);; TH2F hpxpy(""hpxpy"",""py ps px"",40,-4,4,40,-4,4);; TProfile hprof(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; ; // Define some simple structures; typedef struct {Float_t x,y,z;} POINT;; typedef struct {; Int_t ntrack,nseg,nvertex;; UInt_t flag;; Float_t temperature;; } EVENTN;; POINT point;; EVENTN eventn;; ; // Create a ROOT Tree; TTree tree(""T"",""An example of ROOT tree with a few branches"");; tree.Branch(""point"",&point,""x:y:z"");; tree.Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; tree.Branch(""hpx"",""TH1F"",&hpx,128000,0);; ; Float_t px,py,pz;; ; // Here we start a loop on 1000 events; for ( Int_t i=0; i<1000; i++) {; gRandom->Rannor(px,py)",MatchSource.WIKI,doc/master/classTTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree.html
Security,access,access,"the one pointed to by the pointer. It should be either a parent or derived class. Note: The pointer whose address is passed to TTree::Branch must not be destroyed (i.e. go out of scope) until the TTree is deleted or TTree::ResetBranchAddress is called.; Note: The pointer p_object must be initialized before calling TTree::Branch; Do either: MyDataClass* p_object = nullptr;; tree.Branch(branchname, &p_object);. Or: auto p_object = new MyDataClass;; tree.Branch(branchname, &p_object);; Whether the pointer is set to zero or not, the ownership of the object is not taken over by the TTree. I.e. even though an object will be allocated by TTree::Branch if the pointer p_object is zero, the object will not be deleted when the TTree is deleted. Add a column holding TClonesArray instances; It is recommended to use STL containers instead of TClonesArrays*.; // clonesarray is the address of a pointer to a TClonesArray.; auto branch = tree.Branch(branchname,clonesarray, bufsize, splitlevel); The TClonesArray is a direct access list of objects of the same class. For example, if the TClonesArray is an array of TTrack objects, this function will create one subbranch for each data member of the object TTrack. Fill the Tree; A TTree instance is filled with the invocation of the TTree::Fill method: tree.Fill(); Upon its invocation, a loop on all defined branches takes place that for each branch invokes the TBranch::Fill method. Add a column to an already existing Tree; You may want to add a branch to an existing tree. For example, if one variable in the tree was computed with a certain algorithm, you may want to try another algorithm and compare the results. One solution is to add a new branch, fill it, and save the tree. The code below adds a simple branch to an existing tree. Note the kOverwrite option in the Write method, it overwrites the existing tree. If it is not specified, two copies of the tree headers are saved. void tree3AddBranch() {; TFile f(""tree3.root"", ""update"");; ; Float",MatchSource.WIKI,doc/master/classTTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree.html
Testability,test,tests,"Bytes ; (; Int_t ; zip). inlinevirtual . Definition at line 332 of file TTree.h. ◆ AutoSave(). Long64_t TTree::AutoSave ; (; Option_t * ; option = """"). virtual . AutoSave tree header every fAutoSave bytes. ; When large Trees are produced, it is safe to activate the AutoSave procedure. Some branches may have buffers holding many entries. If fAutoSave is negative, AutoSave is automatically called by TTree::Fill when the number of bytes generated since the previous AutoSave is greater than -fAutoSave bytes. If fAutoSave is positive, AutoSave is automatically called by TTree::Fill every N entries. This function may also be invoked by the user. Each AutoSave generates a new key on the file. Once the key with the tree header has been written, the previous cycle (if any) is deleted.; Note that calling TTree::AutoSave too frequently (or similarly calling TTree::SetAutoSave with a small value) is an expensive operation. You should make tests for your own application to find a compromise between speed and the quantity of information you may loose in case of a job crash.; In case your program crashes before closing the file holding this tree, the file will be automatically recovered when you will connect the file in UPDATE mode. The Tree will be recovered at the status corresponding to the last AutoSave.; if option contains ""SaveSelf"", gDirectory->SaveSelf() is called. This allows another process to analyze the Tree while the Tree is being filled.; if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all the current basket are closed-out and written to disk individually.; By default the previous header is deleted after having written the new header. if option contains ""Overwrite"", the previous Tree header is deleted before written the new header. This option is slightly faster, but the default option is safer in case of a problem (disk quota exceeded) when writing the new header.; The function returns the number of bytes written to the file. if the number of by",MatchSource.WIKI,doc/master/classTTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree.html
Usability,simpl,simple," if the file compression attribute is set (default). Branches may be written to different files (see TBranch::SetFile).; The ROOT user can decide to make one single branch and serialize one object into one single I/O buffer or to make several branches. Making several branches is particularly interesting in the data analysis phase, when it is desirable to have a high reading rate and not all columns are equally interesting. Create a TTree to store columnar data. Construct a TTree; Add a column of Fundamental Types and Arrays thereof; Add a column of a STL Collection instances; Add a column holding an object; Add a column holding a TObjectArray; Fill the tree; Add a column to an already existing Tree; An Example. Construct a TTree; TTree tree(name, title); namechar name[80]Definition TGX11.cxx:110; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; Creates a Tree with name and title.; Various kinds of branches can be added to a tree:; Variables representing fundamental types, simple classes/structures or list of variables: for example for C or Fortran structures.; Any C++ object or collection, provided by the STL or ROOT. In the following, the details about the creation of different types of branches are given. Add a column (""branch"") holding fundamental types and arrays thereof; This strategy works also for lists of variables, e.g. to describe simple structures. It is strongly recommended to persistify those as objects rather than lists of leaves.; auto branch = tree.Branch(branchname, address, leaflist, bufsize). address is the address of the first item of a structure; leaflist is the concatenation of all the variable names and types separated by a colon character : The variable name and the variable type are separated by a slash (/). The variable type must be 1 character. (Characters after the first are legal and will be appended to the visible name of the leaf, but have no effect.) If no type is given, the type of the variable is assumed to be the sa",MatchSource.WIKI,doc/master/classTTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree.html
Availability,avail,available,"; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TTreeCache Class ReferenceTree Library. ; A cache to speed-up the reading of ROOT datasets. . A cache to speed-up the reading of ROOT datasets. Table of Contents. Motivation; General Description; Changes in behaviour; Self-optimization; Examples of usage; Check performance and stats. Motivation: why having a cache is needed?; When writing a TTree, the branch buffers are kept in memory. A typical branch buffersize (before compression) is typically 32 KBytes. After compression, the zipped buffer may be just a few Kbytes. The branch buffers cannot be much larger in case of TTrees with several hundred or thousand branches.; When writing, this does not generate a performance problem because branch buffers are always written sequentially and, thanks to OS optimisations, content is flushed to the output file when a few MBytes of data are available. On the other hand, when reading, one may hit performance problems because of latencies e.g imposed by network. For example in a WAN with 10ms latency, reading 1000 buffers of 10 KBytes each with no cache will imply 10s penalty where a local read of the 10 MBytes would take about 1 second.; The TreeCache tries to prefetch all the buffers for the selected branches in order to transfer a few multi-Megabytes large buffers instead of many multi-kilobytes small buffers. In addition, TTreeCache can sort the blocks to be read in increasing order such that the file is read sequentially.; Systems like xrootd, dCache or httpd take advantage of the TTreeCache in reading ahead as much data as they can and return to the application the maximum data specified in the cache and have the next chunk of data ready when the next request comes. Are there cases for which the usage of TTreeCache i",MatchSource.WIKI,doc/master/classTTreeCache.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCache.html
Energy Efficiency,allocate,allocated,"eeCache::SetLearnEntries ; (; Int_t ; n = 10). static . Static function to set the number of entries to be used in learning mode The default value for n is 10. ; n must be >= 1 ; Definition at line 2145 of file TTreeCache.cxx. ◆ SetLearnPrefill(). void TTreeCache::SetLearnPrefill ; (; TTreeCache::EPrefillType ; type = kNoPrefill). virtual . Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches. The default prefilling behavior can be controlled by setting TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. . Definition at line 2160 of file TTreeCache.cxx. ◆ SetOptimizeMisses(). void TTreeCache::SetOptimizeMisses ; (; bool ; opt). Start of methods for the miss cache. ; Enable / disable the miss cache.; The first time this is called on a TTreeCache object, the corresponding data structures will be allocated. Subsequent enable / disables will simply turn the functionality on/off. ; Definition at line 683 of file TTreeCache.cxx. ◆ StartLearningPhase(). void TTreeCache::StartLearningPhase ; (; ). The name should be enough to explain the method. ; The only additional comments is that the cache is cleaned before the new learning phase. ; Definition at line 2170 of file TTreeCache.cxx. ◆ StopLearningPhase(). void TTreeCache::StopLearningPhase ; (; ). virtual . This is the counterpart of StartLearningPhase() and can be used to stop the learning phase. ; It's useful when the user knows exactly what branches they are going to use. For the moment it's just a call to FillBuffer() since that method will create the buffer lists from the specified branches. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2187 of file TTreeCache.cxx. ◆ Streamer(). void TTreeCache::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TO",MatchSource.WIKI,doc/master/classTTreeCache.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCache.html
Integrability,interface,interfaces,"ample scenario where such behavior is desirable, is an analysis where a set of collections are read only for a few events in which a certain condition is respected, e.g. a trigger fired. Additional memory and CPU usage when optimizing for cache misses; When this mode is enabled, the memory dedicated to the cache can increase by at most a factor two in the case of cache miss. Additionally, on the first miss of an event, we must iterate through all the ""active branches"" for the miss cache and find the correct basket. This can be potentially a CPU-expensive operation compared to, e.g., the latency of a SSD. This is why the miss cache is currently disabled by default. Example usages of TTreeCache; A few use cases are discussed below. A cache may be created with automatic sizing when a TTree is used:; In some applications, e.g. central processing workflows of experiments, the list of branches to read is known a priori. For these cases, the TTreeCache can be instructed about the branches which will be read via explicit calls to the TTree or TTreeCache interfaces. In less streamlined applications such as analysis, predicting the branches which will be read can be difficult. In such cases, ROOT I/O flags used branches automatically when a branch buffer is read during the learning phase.; In the examples below, portions of analysis code are shown. The few statements involving the TreeCache are marked with //<<<. ROOT::RDataFrame and TTreeReader Examples; If you use RDataFrame or TTreeReader, the system will automatically cache the best set of branches: no action is required by the user. TTree::Draw Example; The TreeCache is automatically used by TTree::Draw. The method knows which branches are used in the query and it puts automatically these branches in the cache. The entry range is also inferred automatically. TTree::Process and TSelectors Examples; The user must enable the cache and tell the system which branches to cache and also specify the entry range. It is important ",MatchSource.WIKI,doc/master/classTTreeCache.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCache.html
Modifiability,variab,variable,"ple, when reading only a small fraction of all entries such that not all branch buffers are read. General Description; This class acts as a file cache, registering automatically the baskets from the branches being processed via direct manipulation of TTrees or with tools such as TTree::Draw, TTree::Process, TSelector, TTreeReader and RDataFrame when in the learning phase. The learning phase is by default 100 entries. It can be changed via TTreeCache::SetLearnEntries.; The usage of a TTreeCache can considerably improve the runtime performance at the price of a modest investment in memory, in particular when the TTree is accessed remotely, e.g. via a high latency network.; For each TTree being processed a TTreeCache object is created. This object is automatically deleted when the Tree is deleted or when the file is deleted. The user can change the size of the cache with the TTree::SetCacheSize method (by default the size is 30 Megabytes). This feature can be controlled with the environment variable ROOT_TTREECACHE_SIZE or the TTreeCache.Size option. The entry range for which the cache is active can also be set with the SetEntryRange method. Changes of behavior when using TChain and TEventList; The usage of TChain or TEventList have influence on the behaviour of the cache:. Special case of a TChain Once the training is done on the first Tree, the list of branches in the cache is kept for the following files.; Special case of a TEventlist if the Tree or TChain has a TEventlist, only the buffers referenced by the list are put in the cache. The learning phase is started or restarted when:; TTree automatically creates a cache.; TTree::SetCacheSize is called with a non-zero size and a cache did not previously exist; TTreeCache::StartLearningPhase is called.; TTreeCache::SetEntryRange is called and the learning is not yet finished and has not been set to manual and the new minimun entry is different. The learning period is stopped (and prefetching is started) when:; TTreeCach",MatchSource.WIKI,doc/master/classTTreeCache.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCache.html
Performance,cache,cache,". ROOT: TTreeCache Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TTreeCache Class ReferenceTree Library. ; A cache to speed-up the reading of ROOT datasets. . A cache to speed-up the reading of ROOT datasets. Table of Contents. Motivation; General Description; Changes in behaviour; Self-optimization; Examples of usage; Check performance and stats. Motivation: why having a cache is needed?; When writing a TTree, the branch buffers are kept in memory. A typical branch buffersize (before compression) is typically 32 KBytes. After compression, the zipped buffer may be just a few Kbytes. The branch buffers cannot be much larger in case of TTrees with several hundred or thousand branches.; When writing, this does not generate a performance problem because branch buffers are always written sequentially and, thanks to OS optimisations, content is flushed to the output file when a few MBytes of data are available. On the other hand, when reading, one may hit performance problems because of latencies e.g imposed by network. For example in a WAN with 10ms latency, reading 1000 buffers of 10 KBytes each with no cache will imply 10s penalty where a local read of the 10 MBytes would take about 1 second.; The TreeCache tries to prefetch all the buffers for the selected branches in order to transfer a few multi-Megabytes large buffers instead of many multi-kilobytes small buffers. In addition, TTreeCache can sort the blocks to be read in increasing order such that the file is read sequentially.; Systems like xrootd, dCache or httpd take advantage of the TTreeCache in reading ahead as much data as they can and return to the application the maximum data specified in the cache and have the next chunk of data ready when the",MatchSource.WIKI,doc/master/classTTreeCache.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCache.html
Safety,predict,predicting,"h a certain condition is respected, e.g. a trigger fired. Additional memory and CPU usage when optimizing for cache misses; When this mode is enabled, the memory dedicated to the cache can increase by at most a factor two in the case of cache miss. Additionally, on the first miss of an event, we must iterate through all the ""active branches"" for the miss cache and find the correct basket. This can be potentially a CPU-expensive operation compared to, e.g., the latency of a SSD. This is why the miss cache is currently disabled by default. Example usages of TTreeCache; A few use cases are discussed below. A cache may be created with automatic sizing when a TTree is used:; In some applications, e.g. central processing workflows of experiments, the list of branches to read is known a priori. For these cases, the TTreeCache can be instructed about the branches which will be read via explicit calls to the TTree or TTreeCache interfaces. In less streamlined applications such as analysis, predicting the branches which will be read can be difficult. In such cases, ROOT I/O flags used branches automatically when a branch buffer is read during the learning phase.; In the examples below, portions of analysis code are shown. The few statements involving the TreeCache are marked with //<<<. ROOT::RDataFrame and TTreeReader Examples; If you use RDataFrame or TTreeReader, the system will automatically cache the best set of branches: no action is required by the user. TTree::Draw Example; The TreeCache is automatically used by TTree::Draw. The method knows which branches are used in the query and it puts automatically these branches in the cache. The entry range is also inferred automatically. TTree::Process and TSelectors Examples; The user must enable the cache and tell the system which branches to cache and also specify the entry range. It is important to specify the entry range in case only a subset of the events is processed to avoid wasteful caching.; Reading all branches; TTr",MatchSource.WIKI,doc/master/classTTreeCache.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCache.html
Security,access,accessed,"cks to be read in increasing order such that the file is read sequentially.; Systems like xrootd, dCache or httpd take advantage of the TTreeCache in reading ahead as much data as they can and return to the application the maximum data specified in the cache and have the next chunk of data ready when the next request comes. Are there cases for which the usage of TTreeCache is detrimental for performance?; Yes, some corner cases. For example, when reading only a small fraction of all entries such that not all branch buffers are read. General Description; This class acts as a file cache, registering automatically the baskets from the branches being processed via direct manipulation of TTrees or with tools such as TTree::Draw, TTree::Process, TSelector, TTreeReader and RDataFrame when in the learning phase. The learning phase is by default 100 entries. It can be changed via TTreeCache::SetLearnEntries.; The usage of a TTreeCache can considerably improve the runtime performance at the price of a modest investment in memory, in particular when the TTree is accessed remotely, e.g. via a high latency network.; For each TTree being processed a TTreeCache object is created. This object is automatically deleted when the Tree is deleted or when the file is deleted. The user can change the size of the cache with the TTree::SetCacheSize method (by default the size is 30 Megabytes). This feature can be controlled with the environment variable ROOT_TTREECACHE_SIZE or the TTreeCache.Size option. The entry range for which the cache is active can also be set with the SetEntryRange method. Changes of behavior when using TChain and TEventList; The usage of TChain or TEventList have influence on the behaviour of the cache:. Special case of a TChain Once the training is done on the first Tree, the list of branches in the cache is kept for the following files.; Special case of a TEventlist if the Tree or TChain has a TEventlist, only the buffers referenced by the list are put in the cache.",MatchSource.WIKI,doc/master/classTTreeCache.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCache.html
Usability,learn,learning,"each with no cache will imply 10s penalty where a local read of the 10 MBytes would take about 1 second.; The TreeCache tries to prefetch all the buffers for the selected branches in order to transfer a few multi-Megabytes large buffers instead of many multi-kilobytes small buffers. In addition, TTreeCache can sort the blocks to be read in increasing order such that the file is read sequentially.; Systems like xrootd, dCache or httpd take advantage of the TTreeCache in reading ahead as much data as they can and return to the application the maximum data specified in the cache and have the next chunk of data ready when the next request comes. Are there cases for which the usage of TTreeCache is detrimental for performance?; Yes, some corner cases. For example, when reading only a small fraction of all entries such that not all branch buffers are read. General Description; This class acts as a file cache, registering automatically the baskets from the branches being processed via direct manipulation of TTrees or with tools such as TTree::Draw, TTree::Process, TSelector, TTreeReader and RDataFrame when in the learning phase. The learning phase is by default 100 entries. It can be changed via TTreeCache::SetLearnEntries.; The usage of a TTreeCache can considerably improve the runtime performance at the price of a modest investment in memory, in particular when the TTree is accessed remotely, e.g. via a high latency network.; For each TTree being processed a TTreeCache object is created. This object is automatically deleted when the Tree is deleted or when the file is deleted. The user can change the size of the cache with the TTree::SetCacheSize method (by default the size is 30 Megabytes). This feature can be controlled with the environment variable ROOT_TTREECACHE_SIZE or the TTreeCache.Size option. The entry range for which the cache is active can also be set with the SetEntryRange method. Changes of behavior when using TChain and TEventList; The usage of TChain or TE",MatchSource.WIKI,doc/master/classTTreeCache.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCache.html
Availability,failure,failure," (in general called by the TFile destructor) ;  ; Int_t AddBranch (const char *branch, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t AddBranch (TBranch *b, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t CreateTasks ();  We create a TTaskGroup and asynchronously maps each group of baskets(> 100 kB in total) to a task. ;  ; bool FillBuffer () override;  Fill the cache buffer with the branches in the cache. ;  ; Int_t GetNFound ();  ; Int_t GetNMissed ();  ; Int_t GetNUnzip ();  ; Int_t GetRecordHeader (char *buf, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header from the buffer buf. ;  ; Int_t GetUnzipBuffer (char **buf, Long64_t pos, Int_t len, bool *free) override;  We try to read a buffer that has already been unzipped Returns -1 in case of read failure, 0 in case it's not in the cache and n>0 in case read from cache (number of bytes copied). ;  ; Int_t GetUnzipGroupSize ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print cache statistics. ;  ; Int_t ReadBufferExt (char *buf, Long64_t pos, Int_t len, Int_t &loc) override;  ; void ResetCache () override;  This will delete the list of buffers that are in the unzipping cache and will reset certain values in the cache. ;  ; Int_t SetBufferSize (Long64_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; void SetEntryRange (Long64_t emin, Long64_t emax) override;  Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ;  ; void SetUnzipBufferSize (Long64_t bufferSize);  Sets the size for the unzipping cache... by default it should be two times the size of the prefetching cac",MatchSource.WIKI,doc/master/classTTreeCacheUnzip.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html
Deployability,update,update,"x) override;  Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ;  ; void SetUnzipBufferSize (Long64_t bufferSize);  Sets the size for the unzipping cache... by default it should be two times the size of the prefetching cache. ;  ; void SetUnzipGroupSize (Int_t groupSize);  ; void StopLearningPhase () override;  It's the same as TTreeCache::StopLearningPhase but we guarantee that we start the unzipping just after getting the buffers. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t UnzipBuffer (char **dest, char *src);  Unzips a ROOT specific buffer... by reading the header at the beginning. ;  ; Int_t UnzipCache (Int_t index);  This inflates a basket in the cache. ;  ; void UpdateBranches (TTree *tree) override;  update pointer to current Tree and recompute pointers to the branches in the cache ;  ;  Public Member Functions inherited from TTreeCache;  TTreeCache ();  Default Constructor. ;  ;  TTreeCache (TTree *tree, Int_t buffersize=0);  Constructor. ;  ;  ~TTreeCache () override;  Destructor. (in general called by the TFile destructor) ;  ; virtual void Disable ();  ; virtual Int_t DropBranch (const char *branch, bool subbranches=false);  Remove a branch to the list of branches to be stored in the cache this is to be used by user (thats why we pass the name of the branch). ;  ; virtual Int_t DropBranch (TBranch *b, bool subbranches=false);  Remove a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket. ;  ; virtual void Enable ();  ; const TObjArray * GetCachedBranches () const;  ; EPrefillType GetConfiguredPrefillType () const;  Return the desired prefill type from the environment or resource variable. ;  ; Double_t GetEfficiency () const;  Give the total efficiency of the primary cache... defined as th",MatchSource.WIKI,doc/master/classTTreeCacheUnzip.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html
Energy Efficiency,adapt,adapted,"acheUnzip.h. ◆ GetNUnzip(). Int_t TTreeCacheUnzip::GetNUnzip ; (; ). inline . Definition at line 152 of file TTreeCacheUnzip.h. ◆ GetParallelUnzip(). TTreeCacheUnzip::EParUnzipMode TTreeCacheUnzip::GetParallelUnzip ; (; ). static . Static function that returns the parallel option (to indicate an additional thread) ; Definition at line 408 of file TTreeCacheUnzip.cxx. ◆ GetRecordHeader(). Int_t TTreeCacheUnzip::GetRecordHeader ; (; char * ; buf, . Int_t ; maxbytes, . Int_t & ; nbytes, . Int_t & ; objlen, . Int_t & ; keylen . ). Read the logical record header from the buffer buf. ; That must be the pointer tho the header part not the object by itself and must contain data of at least maxbytes Returns nread;; In output arguments:. nbytes : number of bytes in record if negative, this is a deleted record if 0, cannot read record, wrong value of argument first; objlen : uncompressed object size; keylen : length of logical record header. Note that the arguments objlen and keylen are returned only if maxbytes >=16 Note: This was adapted from TFile... so some things dont apply ; Definition at line 470 of file TTreeCacheUnzip.cxx. ◆ GetUnzipBuffer(). Int_t TTreeCacheUnzip::GetUnzipBuffer ; (; char ** ; buf, . Long64_t ; pos, . Int_t ; len, . bool * ; free . ). overridevirtual . We try to read a buffer that has already been unzipped Returns -1 in case of read failure, 0 in case it's not in the cache and n>0 in case read from cache (number of bytes copied). ; pos and len are the original values as were passed to ReadBuffer but instead we will return the inflated buffer. Note!! : If *buf == 0 we will allocate the buffer and it will be the responsibility of the caller to free it... it is useful for example to pass it to the creator of TBuffer ; Reimplemented from TFileCacheRead.; Definition at line 669 of file TTreeCacheUnzip.cxx. ◆ GetUnzipGroupSize(). Int_t TTreeCacheUnzip::GetUnzipGroupSize ; (; ). inline . Definition at line 142 of file TTreeCacheUnzip.h. ◆ Init(). void TTree",MatchSource.WIKI,doc/master/classTTreeCacheUnzip.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTTreeCacheUnzip.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html
Modifiability,inherit,inherited,". ROOT: TTreeCacheUnzip Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TTreeCacheUnzip Class ReferenceTree Library. ; A TTreeCache which exploits parallelized decompression of its own content. ; Definition at line 35 of file TTreeCacheUnzip.h. Classes; struct  UnzipState;  . Public Types; enum  EParUnzipMode { kEnable; , kDisable; , kForce; };  ; enum  EUnzipState { kUntouched; , kProgress; , kFinished; };  ;  Public Types inherited from TTreeCache; enum  EPrefillType { kNoPrefill; , kAllBranches; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeCacheUnzip ();  ;  TTreeCacheUnzip (TTree *tree, Int_t buffersize=0);  Constructor. ;  ;  ~TTreeCacheUnzip () override;  Destructor. (in general called by the TFile destructor) ;  ; Int_t AddBranch (const char *branch, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t AddBranch (TBranch *b, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this functi",MatchSource.WIKI,doc/master/classTTreeCacheUnzip.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html
Performance,cache,cache,"NotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeCacheUnzip ();  ;  TTreeCacheUnzip (TTree *tree, Int_t buffersize=0);  Constructor. ;  ;  ~TTreeCacheUnzip () override;  Destructor. (in general called by the TFile destructor) ;  ; Int_t AddBranch (const char *branch, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t AddBranch (TBranch *b, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t CreateTasks ();  We create a TTaskGroup and asynchronously maps each group of baskets(> 100 kB in total) to a task. ;  ; bool FillBuffer () override;  Fill the cache buffer with the branches in the cache. ;  ; Int_t GetNFound ();  ; Int_t GetNMissed ();  ; Int_t GetNUnzip ();  ; Int_t GetRecordHeader (char *buf, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header from the buffer buf. ;  ; Int_t GetUnzipBuffer (char **buf, Long64_t pos, Int_t len, bool *free) override;  We try to read a buffer that has already been unzipped Returns -1 in case of read failure, 0 in case it's not in the cache and n>0 in case read from cache (number of bytes copied). ;  ; Int_t GetUnzipGroupSize ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print cache statistic",MatchSource.WIKI,doc/master/classTTreeCacheUnzip.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html
Safety,avoid,avoid," bool ; subbranches = false . ). overridevirtual . Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: . 0 branch added or already included; -1 on error . Reimplemented from TTreeCache.; Definition at line 248 of file TTreeCacheUnzip.cxx. ◆ Class(). static TClass * TTreeCacheUnzip::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTreeCacheUnzip::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTreeCacheUnzip::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 159 of file TTreeCacheUnzip.h. ◆ CreateTasks(). Int_t TTreeCacheUnzip::CreateTasks ; (; ). We create a TTaskGroup and asynchronously maps each group of baskets(> 100 kB in total) to a task. ; In TTaskGroup, we use TThreadExecutor to do the actually work of unzipping a group of basket. The purpose of creating TTaskGroup is to avoid competing with main thread. ; Definition at line 614 of file TTreeCacheUnzip.cxx. ◆ DeclFileName(). static const char * TTreeCacheUnzip::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 159 of file TTreeCacheUnzip.h. ◆ FillBuffer(). bool TTreeCacheUnzip::FillBuffer ; (; ). overridevirtual . Fill the cache buffer with the branches in the cache. ; Reimplemented from TTreeCache.; Definition at line 267 of file TTreeCacheUnzip.cxx. ◆ GetNFound(). Int_t TTreeCacheUnzip::GetNFound ; (; ). inline . Definition at line 154 of file TTreeCacheUnzip.h. ◆ GetNMissed(). Int_t TTreeCacheUnzip::GetNMissed ; (; ). inline . Definition at line 153 of file TTreeCacheUnzip.h. ◆ GetNUnzip(). Int_t TTreeCacheUnzip::GetNUnzip ; (; ). inline . Definition at line 152 of file TTreeCacheUnzip.h. ◆ GetParallelUnzip(). TTreeCacheUnzip::EParUnzipMode TTreeCacheUnzip::GetParallelUnzip ; (; ). static . Static function that returns the parallel ",MatchSource.WIKI,doc/master/classTTreeCacheUnzip.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTTreeCacheUnzip.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html
Testability,log,logical,")); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeCacheUnzip ();  ;  TTreeCacheUnzip (TTree *tree, Int_t buffersize=0);  Constructor. ;  ;  ~TTreeCacheUnzip () override;  Destructor. (in general called by the TFile destructor) ;  ; Int_t AddBranch (const char *branch, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t AddBranch (TBranch *b, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t CreateTasks ();  We create a TTaskGroup and asynchronously maps each group of baskets(> 100 kB in total) to a task. ;  ; bool FillBuffer () override;  Fill the cache buffer with the branches in the cache. ;  ; Int_t GetNFound ();  ; Int_t GetNMissed ();  ; Int_t GetNUnzip ();  ; Int_t GetRecordHeader (char *buf, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header from the buffer buf. ;  ; Int_t GetUnzipBuffer (char **buf, Long64_t pos, Int_t len, bool *free) override;  We try to read a buffer that has already been unzipped Returns -1 in case of read failure, 0 in case it's not in the cache and n>0 in case read from cache (number of bytes copied). ;  ; Int_t GetUnzipGroupSize ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print cache statistics. ;  ; Int_t ReadBufferExt (char *buf, Long64_t pos, Int_t len, Int_t &loc) override;  ; void ResetCache () override;  This will delete the list of buffers that are in the unzipping cache and will reset certain values in the cache. ;  ; Int_t SetBufferSize (Long64_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; void SetEntryRange (Long64_t emin, Long64_t emax) override;  Set the minimum and maximum entry number to be processed this informatio",MatchSource.WIKI,doc/master/classTTreeCacheUnzip.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html
Usability,learn,learning,"o the number of reads so far. ;  ; virtual Int_t GetEntryMax () const;  ; virtual Int_t GetEntryMin () const;  ; virtual EPrefillType GetLearnPrefill () const;  ; Double_t GetMissEfficiency () const;  The total efficiency of the 'miss cache' - defined as the ratio of blocks found in the cache versus the number of blocks prefetched. ;  ; Double_t GetMissEfficiencyRel () const;  Relative efficiency of the 'miss cache' - ratio of the reads found in cache to the number of reads so far. ;  ; bool GetOptimizeMisses () const;  ; TTree * GetTree () const;  ; bool IsAutoCreated () const;  ; virtual bool IsEnabled () const;  ; bool IsLearning () const override;  ; Int_t LearnBranch (TBranch *b, bool subgbranches=false) override;  Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ;  ; virtual void LearnPrefill ();  Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ;  ; Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len) override;  Read buffer at position pos if the request is in the list of prefetched blocks read from fBuffer. ;  ; virtual Int_t ReadBufferNormal (char *buf, Long64_t pos, Int_t len);  Old method ReadBuffer before the addition of the prefetch mechanism. ;  ; virtual Int_t ReadBufferPrefetch (char *buf, Long64_t pos, Int_t len);  Used to read a chunk from a block previously fetched. ;  ; void ResetMissCache ();  Reset all the miss cache training. ;  ; void SetAutoCreated (bool val);  ; void SetFile (TFile *file, TFile::ECacheAction action=TFile::kDisconnect) override;  Change the file that is being cached. ;  ; virtual void SetLearnPrefill (EPrefillType type=kNoPrefill);  Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ;  ; void SetOptimizeMisses (bool opt);  Start of methods for the miss cach",MatchSource.WIKI,doc/master/classTTreeCacheUnzip.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html
Availability,error,error,"fBasketNum;  [fMaxBaskets] index of the basket within the branch. ;  ; Long64_t * fBasketSeek;  [fMaxBaskets] list of basket position to be read. ;  ; Long64_t fCacheSize;  Requested size of the file cache. ;  ; UInt_t fCloneMethod;  Indicates which cloning method was selected. ;  ; TFileCacheRead * fFileCache;  File Cache used to reduce the number of individual reads. ;  ; TObjArray fFromBranches;  ; TTree * fFromTree;  ; bool fIsValid;  ; UInt_t fMaxBaskets;  ; Option_t * fMethod;  ; bool fNeedConversion;  True if the fast merge is not possible but a slow merge might possible. ;  ; UInt_t fOptions;  ; UShort_t fPidOffset;  Offset to be added to the copied key/basket. ;  ; TFileCacheRead * fPrevCache;  Cache that set before the TTreeCloner ctor for the 'from' TTree if any. ;  ; TObjArray fToBranches;  ; TDirectory * fToDirectory;  ; TFile * fToFile;  ; Long64_t fToStartEntries;  Number of entries in the target tree before any addition. ;  ; TTree * fToTree;  ; TString fWarningMsg;  Text of the error message lead to an 'invalid' state. ;  . Friends; class CompareEntry;  ; class CompareSeek;  . #include <TTreeCloner.h>; Member Enumeration Documentation. ◆ ECloneMethod. enum TTreeCloner::ECloneMethod. private . EnumeratorkDefault ; kSortBasketsByBranch ; kSortBasketsByOffset ; kSortBasketsByEntry . Definition at line 62 of file TTreeCloner.h. ◆ EClonerOptions. enum TTreeCloner::EClonerOptions. EnumeratorkNone ; kNoWarnings ; kIgnoreMissingTopLevel ; kNoFileCache . Definition at line 98 of file TTreeCloner.h. Constructor & Destructor Documentation. ◆ TTreeCloner() [1/4]. TTreeCloner::TTreeCloner ; (; const TTreeCloner & ; ). privatedelete . ◆ TTreeCloner() [2/4]. TTreeCloner::TTreeCloner ; (; TTree * ; from, . TTree * ; to, . TDirectory * ; newdirectory, . Option_t * ; method, . UInt_t ; options = kNone . ). private . Constructor implementation. ; Definition at line 127 of file TTreeCloner.cxx. ◆ TTreeCloner() [3/4]. TTreeCloner::TTreeCloner ; (; TTree * ; from, . TTree",MatchSource.WIKI,doc/master/classTTreeCloner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCloner.html
Deployability,update,updates,"guously. This tends to optimize reading speed when reading a small number (1->5) of branches, since all their baskets will be clustered together instead of being spread across the file. However it might decrease the performance when reading more branches (or the full entry).; When using SortBasketsByEntry the baskets with the lowest starting entry are written first. (i.e. the baskets are sorted on the index/number of the first entry they contain). This means that on the file the baskets will be in the order in which they will be needed when reading the whole tree sequentially. ; Definition at line 104 of file TTreeCloner.cxx. ◆ TTreeCloner() [4/4]. TTreeCloner::TTreeCloner ; (; TTree * ; from, . TDirectory * ; newdirectory, . Option_t * ; method, . UInt_t ; options = kNone . ). Constructor. In place cloning. ; This object would transfer the data from 'from' the original location to 'newdirectory' the new directory using the sorting method indicated in method. It updates the 'from' TTree with the new information. See TTreeCloner::TTreeCloner(TTree *from, TTree *to, Option_t *method, UInt_t options) for details on the sorting methods. ; Definition at line 119 of file TTreeCloner.cxx. ◆ ~TTreeCloner(). TTreeCloner::~TTreeCloner ; (; ). virtual . TTreeCloner destructor. ; Definition at line 246 of file TTreeCloner.cxx. Member Function Documentation. ◆ ClassDef(). TTreeCloner::ClassDef ; (; TTreeCloner ; , . 0 ;  . ). ◆ CloseOutWriteBaskets(). void TTreeCloner::CloseOutWriteBaskets ; (; ). Before we can start adding new basket, we need to flush to disk the partially filled baskets (the WriteBasket) ; Definition at line 262 of file TTreeCloner.cxx. ◆ CollectBaskets(). void TTreeCloner::CollectBaskets ; (; ). Collect the information about the on-file basket that need to be copied. ; Definition at line 451 of file TTreeCloner.cxx. ◆ CollectBranches() [1/3]. UInt_t TTreeCloner::CollectBranches ; (; ). Fill the array of branches, matching the branches of the 'from' and 'to' T",MatchSource.WIKI,doc/master/classTTreeCloner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCloner.html
Energy Efficiency,reduce,reduce,entation. ;  ; void CreateCache ();  Create a TFileCacheRead if it was requested. ;  ; UInt_t FillCache (UInt_t from);  Fill the file cache with the next set of basket. ;  ; void ImportClusterRanges ();  Set the entries and import the cluster range of the. ;  ; TTreeCloner & operator= (const TTreeCloner &)=delete;  ; void RestoreCache ();  Restore the TFileCacheRead to its previous value. ;  . Private Attributes; UInt_t * fBasketBranchNum;  [fMaxBaskets] Index of the branch(es) of the basket. ;  ; Long64_t * fBasketEntry;  [fMaxBaskets] list of basket start entries. ;  ; UInt_t * fBasketIndex;  [fMaxBaskets] ordered list of basket indices to be written. ;  ; UInt_t * fBasketNum;  [fMaxBaskets] index of the basket within the branch. ;  ; Long64_t * fBasketSeek;  [fMaxBaskets] list of basket position to be read. ;  ; Long64_t fCacheSize;  Requested size of the file cache. ;  ; UInt_t fCloneMethod;  Indicates which cloning method was selected. ;  ; TFileCacheRead * fFileCache;  File Cache used to reduce the number of individual reads. ;  ; TObjArray fFromBranches;  ; TTree * fFromTree;  ; bool fIsValid;  ; UInt_t fMaxBaskets;  ; Option_t * fMethod;  ; bool fNeedConversion;  True if the fast merge is not possible but a slow merge might possible. ;  ; UInt_t fOptions;  ; UShort_t fPidOffset;  Offset to be added to the copied key/basket. ;  ; TFileCacheRead * fPrevCache;  Cache that set before the TTreeCloner ctor for the 'from' TTree if any. ;  ; TObjArray fToBranches;  ; TDirectory * fToDirectory;  ; TFile * fToFile;  ; Long64_t fToStartEntries;  Number of entries in the target tree before any addition. ;  ; TTree * fToTree;  ; TString fWarningMsg;  Text of the error message lead to an 'invalid' state. ;  . Friends; class CompareEntry;  ; class CompareSeek;  . #include <TTreeCloner.h>; Member Enumeration Documentation. ◆ ECloneMethod. enum TTreeCloner::ECloneMethod. private . EnumeratorkDefault ; kSortBasketsByBranch ; kSortBasketsByOffset ; kSortBasketsByEntry . Definit,MatchSource.WIKI,doc/master/classTTreeCloner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCloner.html
Integrability,message,message,"fBasketNum;  [fMaxBaskets] index of the basket within the branch. ;  ; Long64_t * fBasketSeek;  [fMaxBaskets] list of basket position to be read. ;  ; Long64_t fCacheSize;  Requested size of the file cache. ;  ; UInt_t fCloneMethod;  Indicates which cloning method was selected. ;  ; TFileCacheRead * fFileCache;  File Cache used to reduce the number of individual reads. ;  ; TObjArray fFromBranches;  ; TTree * fFromTree;  ; bool fIsValid;  ; UInt_t fMaxBaskets;  ; Option_t * fMethod;  ; bool fNeedConversion;  True if the fast merge is not possible but a slow merge might possible. ;  ; UInt_t fOptions;  ; UShort_t fPidOffset;  Offset to be added to the copied key/basket. ;  ; TFileCacheRead * fPrevCache;  Cache that set before the TTreeCloner ctor for the 'from' TTree if any. ;  ; TObjArray fToBranches;  ; TDirectory * fToDirectory;  ; TFile * fToFile;  ; Long64_t fToStartEntries;  Number of entries in the target tree before any addition. ;  ; TTree * fToTree;  ; TString fWarningMsg;  Text of the error message lead to an 'invalid' state. ;  . Friends; class CompareEntry;  ; class CompareSeek;  . #include <TTreeCloner.h>; Member Enumeration Documentation. ◆ ECloneMethod. enum TTreeCloner::ECloneMethod. private . EnumeratorkDefault ; kSortBasketsByBranch ; kSortBasketsByOffset ; kSortBasketsByEntry . Definition at line 62 of file TTreeCloner.h. ◆ EClonerOptions. enum TTreeCloner::EClonerOptions. EnumeratorkNone ; kNoWarnings ; kIgnoreMissingTopLevel ; kNoFileCache . Definition at line 98 of file TTreeCloner.h. Constructor & Destructor Documentation. ◆ TTreeCloner() [1/4]. TTreeCloner::TTreeCloner ; (; const TTreeCloner & ; ). privatedelete . ◆ TTreeCloner() [2/4]. TTreeCloner::TTreeCloner ; (; TTree * ; from, . TTree * ; to, . TDirectory * ; newdirectory, . Option_t * ; method, . UInt_t ; options = kNone . ). private . Constructor implementation. ; Definition at line 127 of file TTreeCloner.cxx. ◆ TTreeCloner() [3/4]. TTreeCloner::TTreeCloner ; (; TTree * ; from, . TTree",MatchSource.WIKI,doc/master/classTTreeCloner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCloner.html
Performance,cache,cache,"ion about the on-file basket that need to be copied. ;  ; UInt_t CollectBranches ();  Fill the array of branches, matching the branches of the 'from' and 'to' TTrees Returns the total number of baskets in all the branches. ;  ; UInt_t CollectBranches (TBranch *from, TBranch *to);  Fill the array of branches, adding the branch 'from' and 'to', and matching the sub-branches of the 'from' and 'to' branches. ;  ; UInt_t CollectBranches (TObjArray *from, TObjArray *to);  Fill the array of branches, matching the branches of the 'from' and 'to' arrays. ;  ; void CopyMemoryBaskets ();  Transfer the basket from the input file to the output file. ;  ; void CopyProcessIds ();  Make sure that all the needed TStreamerInfo are present in the output file. ;  ; void CopyStreamerInfos ();  Make sure that all the needed TStreamerInfo are present in the output file. ;  ; bool Exec ();  Execute the cloning. ;  ; const char * GetWarning () const;  ; bool IsInPlace () const;  ; bool IsValid ();  ; bool NeedConversion ();  ; void SetCacheSize (Long64_t size);  Set the cache size used by the matching TFile. ;  ; void SortBaskets ();  Sort the basket according to the user request. ;  ; void WriteBaskets ();  Transfer the basket from the input file to the output file. ;  . Private Types; enum  ECloneMethod { kDefault = 0; , kSortBasketsByBranch = 1; , kSortBasketsByOffset = 2; , kSortBasketsByEntry = 3; };  . Private Member Functions;  TTreeCloner (const TTreeCloner &)=delete;  ;  TTreeCloner (TTree *from, TTree *to, TDirectory *newdirectory, Option_t *method, UInt_t options=kNone);  Constructor implementation. ;  ; void CreateCache ();  Create a TFileCacheRead if it was requested. ;  ; UInt_t FillCache (UInt_t from);  Fill the file cache with the next set of basket. ;  ; void ImportClusterRanges ();  Set the entries and import the cluster range of the. ;  ; TTreeCloner & operator= (const TTreeCloner &)=delete;  ; void RestoreCache ();  Restore the TFileCacheRead to its previous value. ;  . ",MatchSource.WIKI,doc/master/classTTreeCloner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeCloner.html
Availability,error,error," { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeDrawArgsParser ();  Constructor - cleans all the class variables. ;  ;  ~TTreeDrawArgsParser () override;  Destructor. ;  ; bool GetAdd () const;  ; Int_t GetDimension () const;  ; TString const & GetExp () const;  ; Double_t GetIfSpecified (Int_t num, Double_t def) const;  ; Int_t GetNoParameters () const;  ; TString const & GetObjectName () const;  ; TString GetObjectTitle () const;  Returns the desired plot title. ;  ; bool GetOptionSame () const;  ; TObject * GetOriginal () const;  ; Double_t GetParameter (int num) const;  returns num-th parameter from brackets in the expression in case of an error (wrong number) returns 0.0 num - number of parameter (counted from 0) ;  ; TString GetProofSelectorName () const;  Returns appropriate TSelector class name for proof for the object that is to be drawn assumes that Parse() method has been called before. ;  ; TString const & GetSelection () const;  ; bool GetShouldDraw () const;  ; TString GetVarExp () const;  Returns the variable string, i.e. [var1[:var2[:var2[:var4]]]]. ;  ; TString GetVarExp (Int_t num) const;  Returns the num-th variable string in case of an error prints an error message and returns an empty string. ;  ; TClass * IsA () const override;  ; bool IsSpecified (int num) const;  returns true if the num-th parameter was specified otherwise returns fFALSE in case of an error (wrong num) prints an error message and returns false. ;  ; bool Parse (const char *varexp, const char *selection, Option_t *option);  Parses parameters from TTree::Draw().",MatchSource.WIKI,doc/master/classTTreeDrawArgsParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeDrawArgsParser.html
Integrability,message,message,"estructor. ;  ; bool GetAdd () const;  ; Int_t GetDimension () const;  ; TString const & GetExp () const;  ; Double_t GetIfSpecified (Int_t num, Double_t def) const;  ; Int_t GetNoParameters () const;  ; TString const & GetObjectName () const;  ; TString GetObjectTitle () const;  Returns the desired plot title. ;  ; bool GetOptionSame () const;  ; TObject * GetOriginal () const;  ; Double_t GetParameter (int num) const;  returns num-th parameter from brackets in the expression in case of an error (wrong number) returns 0.0 num - number of parameter (counted from 0) ;  ; TString GetProofSelectorName () const;  Returns appropriate TSelector class name for proof for the object that is to be drawn assumes that Parse() method has been called before. ;  ; TString const & GetSelection () const;  ; bool GetShouldDraw () const;  ; TString GetVarExp () const;  Returns the variable string, i.e. [var1[:var2[:var2[:var4]]]]. ;  ; TString GetVarExp (Int_t num) const;  Returns the num-th variable string in case of an error prints an error message and returns an empty string. ;  ; TClass * IsA () const override;  ; bool IsSpecified (int num) const;  returns true if the num-th parameter was specified otherwise returns fFALSE in case of an error (wrong num) prints an error message and returns false. ;  ; bool Parse (const char *varexp, const char *selection, Option_t *option);  Parses parameters from TTree::Draw(). ;  ; void SetObjectName (const char *s);  ; void SetOriginal (TObject *o);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void Ap",MatchSource.WIKI,doc/master/classTTreeDrawArgsParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeDrawArgsParser.html
Modifiability,inherit,inherited,". ROOT: TTreeDrawArgsParser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; List of all members ; TTreeDrawArgsParser Class Reference. ; A class that parses all parameters for TTree::Draw(). ; See TTree::Draw() for the format description. ; Definition at line 29 of file TTreeDrawArgsParser.h. Public Types; enum  EOutputType { ;   kUNKNOWN; , kEVENTLIST; , kENTRYLIST; , kPROFILE; , ;   kPROFILE2D; , kGRAPH; , kPOLYMARKER3D; , kHISTOGRAM1D; , ;   kHISTOGRAM2D; , kLISTOFGRAPHS; , kLISTOFPOLYMARKERS3D; , kHISTOGRAM3D. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeDrawArgsParser ();  Constructor - cleans all the class variables. ;  ;  ~TTreeDrawArgsParser () override;  Destructor. ;  ; bool GetAdd () const;  ; Int_t GetDimension () const;  ; TString const & GetExp () const;  ; Double_t GetIfSpecified (Int_t num, Double_t def) const;  ; Int_t GetNoParameters () const;  ; TString const & GetObjectName () const;  ; TString GetObjectTitle () const;  Returns the desired plot title. ;  ; bool GetOptionSame () const;  ; TObject * GetOriginal () const;  ; Double_t GetParameter (int num) const;  returns num-th parameter from brackets in",MatchSource.WIKI,doc/master/classTTreeDrawArgsParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeDrawArgsParser.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTTreeDrawArgsParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeDrawArgsParser.html
Availability,avail,available," master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TTreeFormula Class Reference. ; Used to pass a selection expression to the Tree drawing routine. ; See TTree::Draw; A TreeFormula can contain any arithmetic expression including standard operators and mathematical functions separated by operators. Examples of valid expression: ""x<y && sqrt(z)>3.2""; TTreeFormula now relies on a variety of TFormLeafInfo classes to handle the reading of the information. Here is the list of theses classes:; TFormLeafInfo; TFormLeafInfoDirect; TFormLeafInfoNumerical; TFormLeafInfoClones; TFormLeafInfoCollection; TFormLeafInfoPointer; TFormLeafInfoMethod; TFormLeafInfoMultiVarDim; TFormLeafInfoMultiVarDimDirect; TFormLeafInfoCast. The following method are available from the TFormLeafInfo interface:. AddOffset(Int_t offset, TStreamerElement* element); GetCounterValue(TLeaf* leaf) : return the size of the array pointed to.; GetObjectAddress(TLeafElement* leaf) : Returns the location of the object pointed to.; GetMultiplicity() : Returns info on the variability of the number of elements; GetNdata(TLeaf* leaf) : Returns the number of elements; GetNdata() : Used by GetNdata(TLeaf* leaf); GetValue(TLeaf *leaf, Int_t instance = 0) : Return the value; GetValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value; GetLocalValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value of 'this' LeafInfo; IsString(); ReadValue(char *where, Int_t instance = 0) : Internal function to interpret the location 'where'; Update() : react to the possible loading of a shared library. . Definition at line 58 of file TTreeFormula.h. Classes; struct  RealInstanceCache;  . Public Member Functions;  TTreeFormula ();  ;  TTreeFormul",MatchSource.WIKI,doc/master/classTTreeFormula.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html
Deployability,update,update,"rrideprotectedvirtual . Try to 'demote' a string into an array bytes. ; If this is not possible, return false. ; Reimplemented from ROOT::v5::TFormula.; Definition at line 5078 of file TTreeFormula.cxx. ◆ SwitchToFormLeafInfo(). bool TTreeFormula::SwitchToFormLeafInfo ; (; Int_t ; code). protectedvirtual . Convert the underlying lookup method from the direct technique (dereferencing the address held by the branch) to the method using TFormLeafInfo. ; This is in particular useful in the case where we need to append an additional TFormLeafInfo (for example to call a method). Return false if the switch was unsuccessful (basically in the case of an old style split tree). ; Definition at line 5714 of file TTreeFormula.cxx. ◆ UpdateFormulaLeaves(). void TTreeFormula::UpdateFormulaLeaves ; (; ). virtual . This function is called TTreePlayer::UpdateFormulaLeaves, itself called by TChain::LoadTree when a new Tree is loaded. ; Because Trees in a TChain may have a different list of leaves, one must update the leaves numbers in the TTreeFormula used by the TreePlayer.; A safer alternative would be to recompile the whole thing .... However currently compile HAS TO be called from the constructor! ; Definition at line 5107 of file TTreeFormula.cxx. Friends And Related Symbol Documentation. ◆ TTreeFormulaManager. friend class TTreeFormulaManager. friend . Definition at line 60 of file TTreeFormula.h. Member Data Documentation. ◆ fAliases. TObjArray TTreeFormula::fAliases. protected . ! List of TTreeFormula for each alias used. ; Definition at line 107 of file TTreeFormula.h. ◆ fAliasesUsed. std::vector<std::string> TTreeFormula::fAliasesUsed. protected . ! List of aliases used during the parsing of the expression. ; Definition at line 128 of file TTreeFormula.h. ◆ fAxis. TAxis* TTreeFormula::fAxis. protected . ! pointer to histogram axis if this is a string ; Definition at line 122 of file TTreeFormula.h. ◆ fBranches. TObjArray TTreeFormula::fBranches. protected . ! List of branche",MatchSource.WIKI,doc/master/classTTreeFormula.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html
Integrability,rout,routine,". ROOT: TTreeFormula Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TTreeFormula Class Reference. ; Used to pass a selection expression to the Tree drawing routine. ; See TTree::Draw; A TreeFormula can contain any arithmetic expression including standard operators and mathematical functions separated by operators. Examples of valid expression: ""x<y && sqrt(z)>3.2""; TTreeFormula now relies on a variety of TFormLeafInfo classes to handle the reading of the information. Here is the list of theses classes:; TFormLeafInfo; TFormLeafInfoDirect; TFormLeafInfoNumerical; TFormLeafInfoClones; TFormLeafInfoCollection; TFormLeafInfoPointer; TFormLeafInfoMethod; TFormLeafInfoMultiVarDim; TFormLeafInfoMultiVarDimDirect; TFormLeafInfoCast. The following method are available from the TFormLeafInfo interface:. AddOffset(Int_t offset, TStreamerElement* element); GetCounterValue(TLeaf* leaf) : return the size of the array pointed to.; GetObjectAddress(TLeafElement* leaf) : Returns the location of the object pointed to.; GetMultiplicity() : Returns info on the variability of the number of elements; GetNdata(TLeaf* leaf) : Returns the number of elements; GetNdata() : Used by GetNdata(TLeaf* leaf); GetValue(TLeaf *leaf, Int_t instance = 0) : Return the value; GetValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value; GetLocalValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value of 'this' LeafInfo; IsString(); ReadValue(char *where, Int_t instance = 0) : Internal function to interpret the location 'where'; Update() : react to the possible loading of a shared library. . Definition at line 58 of file TTreeFormula.h. Classes; struct  RealInstanceCache;  . Public Mem",MatchSource.WIKI,doc/master/classTTreeFormula.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html
Modifiability,variab,variability,"mples of valid expression: ""x<y && sqrt(z)>3.2""; TTreeFormula now relies on a variety of TFormLeafInfo classes to handle the reading of the information. Here is the list of theses classes:; TFormLeafInfo; TFormLeafInfoDirect; TFormLeafInfoNumerical; TFormLeafInfoClones; TFormLeafInfoCollection; TFormLeafInfoPointer; TFormLeafInfoMethod; TFormLeafInfoMultiVarDim; TFormLeafInfoMultiVarDimDirect; TFormLeafInfoCast. The following method are available from the TFormLeafInfo interface:. AddOffset(Int_t offset, TStreamerElement* element); GetCounterValue(TLeaf* leaf) : return the size of the array pointed to.; GetObjectAddress(TLeafElement* leaf) : Returns the location of the object pointed to.; GetMultiplicity() : Returns info on the variability of the number of elements; GetNdata(TLeaf* leaf) : Returns the number of elements; GetNdata() : Used by GetNdata(TLeaf* leaf); GetValue(TLeaf *leaf, Int_t instance = 0) : Return the value; GetValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value; GetLocalValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value of 'this' LeafInfo; IsString(); ReadValue(char *where, Int_t instance = 0) : Internal function to interpret the location 'where'; Update() : react to the possible loading of a shared library. . Definition at line 58 of file TTreeFormula.h. Classes; struct  RealInstanceCache;  . Public Member Functions;  TTreeFormula ();  ;  TTreeFormula (const char *name, const char *formula, TTree *tree);  Normal TTree Formula Constructor. ;  ;  ~TTreeFormula () override;  Tree Formula default destructor. ;  ; Int_t DefinedVariable (TString &variable, Int_t &action) override;  Check if name is in the list of Tree/Branch leaves. ;  ; virtual TClass * EvalClass () const;  Evaluate the class of this treeformula. ;  ; template<typename T > ; T EvalInstance (Int_t i=0, const char *stringStack[]=nullptr);  Evaluate this treeformula. ;  ; virtual Double_t EvalInstance (Int_t i=0, const char *strin",MatchSource.WIKI,doc/master/classTTreeFormula.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html
Performance,load,loading,"mples of valid expression: ""x<y && sqrt(z)>3.2""; TTreeFormula now relies on a variety of TFormLeafInfo classes to handle the reading of the information. Here is the list of theses classes:; TFormLeafInfo; TFormLeafInfoDirect; TFormLeafInfoNumerical; TFormLeafInfoClones; TFormLeafInfoCollection; TFormLeafInfoPointer; TFormLeafInfoMethod; TFormLeafInfoMultiVarDim; TFormLeafInfoMultiVarDimDirect; TFormLeafInfoCast. The following method are available from the TFormLeafInfo interface:. AddOffset(Int_t offset, TStreamerElement* element); GetCounterValue(TLeaf* leaf) : return the size of the array pointed to.; GetObjectAddress(TLeafElement* leaf) : Returns the location of the object pointed to.; GetMultiplicity() : Returns info on the variability of the number of elements; GetNdata(TLeaf* leaf) : Returns the number of elements; GetNdata() : Used by GetNdata(TLeaf* leaf); GetValue(TLeaf *leaf, Int_t instance = 0) : Return the value; GetValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value; GetLocalValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value of 'this' LeafInfo; IsString(); ReadValue(char *where, Int_t instance = 0) : Internal function to interpret the location 'where'; Update() : react to the possible loading of a shared library. . Definition at line 58 of file TTreeFormula.h. Classes; struct  RealInstanceCache;  . Public Member Functions;  TTreeFormula ();  ;  TTreeFormula (const char *name, const char *formula, TTree *tree);  Normal TTree Formula Constructor. ;  ;  ~TTreeFormula () override;  Tree Formula default destructor. ;  ; Int_t DefinedVariable (TString &variable, Int_t &action) override;  Check if name is in the list of Tree/Branch leaves. ;  ; virtual TClass * EvalClass () const;  Evaluate the class of this treeformula. ;  ; template<typename T > ; T EvalInstance (Int_t i=0, const char *stringStack[]=nullptr);  Evaluate this treeformula. ;  ; virtual Double_t EvalInstance (Int_t i=0, const char *strin",MatchSource.WIKI,doc/master/classTTreeFormula.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html
Safety,redund,redundant," . Definition at line 192 of file TTreeFormula.h. ◆ GetMethodCall(). TMethodCall * TTreeFormula::GetMethodCall ; (; Int_t ; code); const. Return methodcall corresponding to code. ; function called by TLeafObject::GetValue with the value of fLookupType computed in TTreeFormula::DefinedVariable ; Definition at line 4476 of file TTreeFormula.cxx. ◆ GetMultiplicity(). virtual Int_t TTreeFormula::GetMultiplicity ; (; ); const. inlinevirtual . Definition at line 194 of file TTreeFormula.h. ◆ GetNcodes(). virtual Int_t TTreeFormula::GetNcodes ; (; ); const. inlinevirtual . Definition at line 196 of file TTreeFormula.h. ◆ GetNdata(). Int_t TTreeFormula::GetNdata ; (; ). virtual . Return number of available instances in the formula. ; Definition at line 4485 of file TTreeFormula.cxx. ◆ GetRealInstance(). Int_t TTreeFormula::GetRealInstance ; (; Int_t ; instance, . Int_t ; codeindex . ). protected . Now let calculate what physical instance we really need. ; Some redundant code is used to speed up the cases where they are no dimensions.; We know that instance is less that fCumulUsedSize[0] so we can skip the modulo when virt_dim is 0. ; Definition at line 3362 of file TTreeFormula.cxx. ◆ GetTree(). virtual TTree * TTreeFormula::GetTree ; (; ); const. inlinevirtual . Definition at line 213 of file TTreeFormula.h. ◆ GetValueFromMethod(). Double_t TTreeFormula::GetValueFromMethod ; (; Int_t ; i, . TLeaf * ; leaf . ); const. protectedvirtual . Return result of a leafobject method. ; Definition at line 4493 of file TTreeFormula.cxx. ◆ GetValuePointerFromMethod(). void * TTreeFormula::GetValuePointerFromMethod ; (; Int_t ; i, . TLeaf * ; leaf . ); const. protectedvirtual . Return result of a leafobject method. ; Definition at line 4554 of file TTreeFormula.cxx. ◆ Init(). void TTreeFormula::Init ; (; const char * ; name, . const char * ; formula . ). protected . Initialization called from the constructors. ; Definition at line 178 of file TTreeFormula.cxx. ◆ IsA(). TClass * TTreeForm",MatchSource.WIKI,doc/master/classTTreeFormula.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html
Security,hash,hash,"as TF1Old in memory ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTTreeFormula.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html
Usability,simpl,simple,"return:; -1 in case of failure; 0 in case we did not find $Alt; the action number in case of success. . Definition at line 657 of file TTreeFormula.cxx. ◆ DefineDimensions(). void TTreeFormula::DefineDimensions ; (; Int_t ; code, . Int_t ; size, . TFormLeafInfoMultiVarDim * ; info, . Int_t & ; virt_dim . ). protected . This method is used internally to decode the dimensions of the variables. ; Definition at line 356 of file TTreeFormula.cxx. ◆ DefinedVariable(). Int_t TTreeFormula::DefinedVariable ; (; TString & ; name, . Int_t & ; action . ). overridevirtual . Check if name is in the list of Tree/Branch leaves. ; This member function redefines the function in ROOT::v5::TFormula If a leaf has a name corresponding to the argument name, then returns a new code.; A TTreeFormula may contain more than one variable. For each variable referenced, the pointers to the corresponding branch and leaf is stored in the object arrays fBranches and fLeaves.; name can be :; Leaf_Name (simple variable or data member of a ClonesArray); Branch_Name.Leaf_Name; Branch_Name.Method_Name; Leaf_Name[index]; Branch_Name.Leaf_Name[index]; Branch_Name.Leaf_Name[index1]; Branch_Name.Leaf_Name[][index2]; Branch_Name.Leaf_Name[index1][index2]. New additions:; Branch_Name.Leaf_Name[OtherLeaf_Name]; Branch_Name.Datamember_Name; '.' can be replaced by '->'; and. Branch_Name[index1].Leaf_Name[index2]; Leaf_name[index].Action().OtherAction(param); Leaf_name[index].Action()[val].OtherAction(param). The expected returned values are; -2 : the name has been recognized but won't be usable; -1 : the name has not been recognized, or is too long, or tree does not exist.; >=0 : the name has been recognized, return the internal code for this name. . Reimplemented from ROOT::v5::TFormula.; Definition at line 2698 of file TTreeFormula.cxx. ◆ EvalClass() [1/2]. TClass * TTreeFormula::EvalClass ; (; ); const. virtual . Evaluate the class of this treeformula. ; If the 'value' of this formula is a simple pointer to an",MatchSource.WIKI,doc/master/classTTreeFormula.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html
Availability,avail,available,"OOT: TTreeFormulaManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTreeFormulaManager Class Reference. ; Used to coordinate one or more TTreeFormula objects. ; In particular it makes sure that the dimensions and size of all the formulas is properly coordinated. ; Definition at line 30 of file TTreeFormulaManager.h. Public Member Functions;  TTreeFormulaManager ();  Tree FormulaManger default constructor. ;  ;  ~TTreeFormulaManager () override;  Tree FormulaManager default destructor. ;  ; virtual void Add (TTreeFormula *);  Add a new formula to the list of formulas managed The manager of the formula will be changed and the old one will be deleted if it is empty. ;  ; virtual Int_t GetMultiplicity () const;  ; virtual Int_t GetNdata (bool forceLoadDim=false);  Return number of available instances in the formulas. ;  ; TClass * IsA () const override;  ; bool Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; virtual void Remove (TTreeFormula *);  Remove a formula from this manager. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Sync ();  Synchronize all the formulae. ;  ; virtual void UpdateFormulaLeaves ();  This function could be called TTreePlayer::UpdateFormulaLeaves, itself called by TChain::LoadTree when a new Tree is loaded. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don'",MatchSource.WIKI,doc/master/classTTreeFormulaManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeFormulaManager.html
Deployability,update,update,"tor= ; (; const TTreeFormulaManager & ; ). privatedelete . ◆ Remove(). void TTreeFormulaManager::Remove ; (; TTreeFormula * ; adding). virtual . Remove a formula from this manager. ; Definition at line 61 of file TTreeFormulaManager.cxx. ◆ Streamer(). void TTreeFormulaManager::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TTreeFormulaManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 73 of file TTreeFormulaManager.h. ◆ Sync(). bool TTreeFormulaManager::Sync ; (; ). virtual . Synchronize all the formulae. ; Definition at line 219 of file TTreeFormulaManager.cxx. ◆ UpdateFormulaLeaves(). void TTreeFormulaManager::UpdateFormulaLeaves ; (; ). virtual . This function could be called TTreePlayer::UpdateFormulaLeaves, itself called by TChain::LoadTree when a new Tree is loaded. ; Because Trees in a TChain may have a different list of leaves, one must update the leaves numbers in the TTreeFormula used by the TreePlayer. ; Definition at line 291 of file TTreeFormulaManager.cxx. ◆ UpdateUsedSize(). void TTreeFormulaManager::UpdateUsedSize ; (; Int_t & ; virt_dim, . Int_t ; vsize . ). protectedvirtual . Reload the array sizes. ; Definition at line 308 of file TTreeFormulaManager.cxx. Friends And Related Symbol Documentation. ◆ TTreeFormula. friend class TTreeFormula. friend . Definition at line 47 of file TTreeFormulaManager.h. Member Data Documentation. ◆ fCumulUsedSizes. Int_t TTreeFormulaManager::fCumulUsedSizes[kMAXFORMDIM+1]. private . Accumulated size of lower dimensions as seen for this entry. ; Definition at line 38 of file TTreeFormulaManager.h. ◆ fCumulUsedVarDims. TArrayI* TTreeFormulaManager::fCumulUsedVarDims. private . fCumulUsedSizes(1) for multi variable dimensions case ; Definition at line 39 of file TTreeFormulaManager.h. ◆ fFormulas. TObjArray TTreeFormulaManager::fFormulas. private . Definition at line 32 of file",MatchSource.WIKI,doc/master/classTTreeFormulaManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeFormulaManager.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTTreeFormulaManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeFormulaManager.html
Modifiability,inherit,inherited,"estructor. ;  ; virtual void Add (TTreeFormula *);  Add a new formula to the list of formulas managed The manager of the formula will be changed and the old one will be deleted if it is empty. ;  ; virtual Int_t GetMultiplicity () const;  ; virtual Int_t GetNdata (bool forceLoadDim=false);  Return number of available instances in the formulas. ;  ; TClass * IsA () const override;  ; bool Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; virtual void Remove (TTreeFormula *);  Remove a formula from this manager. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Sync ();  Synchronize all the formulae. ;  ; virtual void UpdateFormulaLeaves ();  This function could be called TTreePlayer::UpdateFormulaLeaves, itself called by TChain::LoadTree when a new Tree is loaded. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTTreeFormulaManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeFormulaManager.html
Performance,load,loaded,"rmulaManager ();  Tree FormulaManger default constructor. ;  ;  ~TTreeFormulaManager () override;  Tree FormulaManager default destructor. ;  ; virtual void Add (TTreeFormula *);  Add a new formula to the list of formulas managed The manager of the formula will be changed and the old one will be deleted if it is empty. ;  ; virtual Int_t GetMultiplicity () const;  ; virtual Int_t GetNdata (bool forceLoadDim=false);  Return number of available instances in the formulas. ;  ; TClass * IsA () const override;  ; bool Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; virtual void Remove (TTreeFormula *);  Remove a formula from this manager. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Sync ();  Synchronize all the formulae. ;  ; virtual void UpdateFormulaLeaves ();  This function could be called TTreePlayer::UpdateFormulaLeaves, itself called by TChain::LoadTree when a new Tree is loaded. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a c",MatchSource.WIKI,doc/master/classTTreeFormulaManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeFormulaManager.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTTreeFormulaManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeFormulaManager.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTreeIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeIndex.html
Deployability,update,update," variables eg: ""run-90000"", ""event +3*xx"". However the result must be integer.; In case an expression is specified, the equivalent expression must be computed when calling GetEntryWithIndex.; To build an index with only majorname, specify minorname=""0"" (default). TreeIndex and Friend Trees; Assuming a parent Tree T and a friend Tree TF, the following cases are supported:; CASE 1: T->GetEntry(entry) is called In this case, the serial number entry is used to retrieve the data in both Trees.; CASE 2: T->GetEntry(entry) is called, TF has a TreeIndex the expressions given in major/minorname of TF are used to compute the value pair major,minor with the data in T. TF->GetEntryWithIndex(major,minor) is then called (tricky case!); CASE 3: T->GetEntryWithIndex(major,minor) is called. It is assumed that both T and TF have a TreeIndex built using the same major and minor name. Saving the TreeIndex; Once the index is built, it can be saved with the TTree object with tree.Write(); (if the file has been open in ""update"" mode).; The most convenient place to create the index is at the end of the filling process just before saving the Tree header. If a previous index was computed, it is redefined by this new call.; Note that this function can also be applied to a TChain.; The return value is the number of entries in the Index (< 0 indicates failure); It is possible to play with different TreeIndex in the same Tree. see comments in TTree::SetTreeIndex. ; Definition at line 128 of file TTreeIndex.cxx. ◆ ~TTreeIndex(). TTreeIndex::~TTreeIndex ; (; ). override . Destructor. ; Definition at line 223 of file TTreeIndex.cxx. Member Function Documentation. ◆ Append(). void TTreeIndex::Append ; (; const TVirtualIndex * ; add, . bool ; delaySort = false . ). overridevirtual . Append 'add' to this index. ; Entry 0 in add will become entry n+1 in this. If delaySort is true, do not sort the value, then you must call Append(0,false); ; Implements TVirtualIndex.; Definition at line 240 of file TTre",MatchSource.WIKI,doc/master/classTTreeIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeIndex.html
Energy Efficiency,allocate,allocated,"TreeIndex.cxx. Member Function Documentation. ◆ Append(). void TTreeIndex::Append ; (; const TVirtualIndex * ; add, . bool ; delaySort = false . ). overridevirtual . Append 'add' to this index. ; Entry 0 in add will become entry n+1 in this. If delaySort is true, do not sort the value, then you must call Append(0,false); ; Implements TVirtualIndex.; Definition at line 240 of file TTreeIndex.cxx. ◆ Class(). static TClass * TTreeIndex::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTreeIndex::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTreeIndex::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 73 of file TTreeIndex.h. ◆ Clone(). TObject * TTreeIndex::Clone ; (; const char * ; newname = """"); const. overridevirtual . Create a deep copy of the TTreeIndex. ; Parameters. [in]newnameA new name for the index. The new index is allocated on the heap without being managed. Also, it is not attached to any tree. It is the responsibility of the caller to manage its lifetime and attach it to a tree if necessary. ; Reimplemented from TNamed.; Definition at line 650 of file TTreeIndex.cxx. ◆ ConvertOldToNew(). bool TTreeIndex::ConvertOldToNew ; (; ). conversion from old 64bit indexes return true if index was converted ; Definition at line 321 of file TTreeIndex.cxx. ◆ DeclFileName(). static const char * TTreeIndex::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 73 of file TTreeIndex.h. ◆ FindValues(). Long64_t TTreeIndex::FindValues ; (; Long64_t ; major, . Long64_t ; minor . ); const. find position where major|minor values are in the IndexValues tables this is the index in IndexValues table, not entry# ! use lower_bound STD algorithm. ; Definition at line 381 of file TTreeIndex.cxx. ◆ GetEntryNumberFriend(). Long64_t TTreeIndex::GetEntryNumberFriend ; (; const T",MatchSource.WIKI,doc/master/classTTreeIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeIndex.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTreeIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeIndex.html
Modifiability,inherit,inherited,"eeFormula * GetMinorFormula ();  Return a pointer to the TreeFormula corresponding to the minorname. ;  ; const char * GetMinorName () const override;  ; Long64_t GetN () const override;  ; TClass * IsA () const override;  ; bool IsValidFor (const TTree *parent) override;  Return true if index can be applied to the TTree. ;  ; void Print (Option_t *option="""") const override;  Print the table with : serial number, majorname, minorname. ;  ; void SetTree (TTree *T) override;  this function is called by TChain::LoadTree and TTreePlayer::UpdateFormulaLeaves when a new Tree is loaded. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TTreeIndex. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateFormulaLeaves (const TTree *parent) override;  Called by TChain::LoadTree when the parent chain changes it's tree. ;  ;  Public Member Functions inherited from TVirtualIndex;  TVirtualIndex ();  pointer to Tree ;  ;  ~TVirtualIndex () override;  ; virtual TTree * GetTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for t",MatchSource.WIKI,doc/master/classTTreeIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeIndex.html
Performance,load,loaded,"and minor number. ;  ; Long64_t GetEntryNumberWithIndex (Long64_t major, Long64_t minor) const override;  Return entry number corresponding to major and minor number. ;  ; virtual Long64_t * GetIndex () const;  ; virtual Long64_t * GetIndexValues () const;  ; virtual Long64_t * GetIndexValuesMinor () const;  ; virtual TTreeFormula * GetMajorFormula ();  Return a pointer to the TreeFormula corresponding to the majorname. ;  ; const char * GetMajorName () const override;  ; virtual TTreeFormula * GetMinorFormula ();  Return a pointer to the TreeFormula corresponding to the minorname. ;  ; const char * GetMinorName () const override;  ; Long64_t GetN () const override;  ; TClass * IsA () const override;  ; bool IsValidFor (const TTree *parent) override;  Return true if index can be applied to the TTree. ;  ; void Print (Option_t *option="""") const override;  Print the table with : serial number, majorname, minorname. ;  ; void SetTree (TTree *T) override;  this function is called by TChain::LoadTree and TTreePlayer::UpdateFormulaLeaves when a new Tree is loaded. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TTreeIndex. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateFormulaLeaves (const TTree *parent) override;  Called by TChain::LoadTree when the parent chain changes it's tree. ;  ;  Public Member Functions inherited from TVirtualIndex;  TVirtualIndex ();  pointer to Tree ;  ;  ~TVirtualIndex () override;  ; virtual TTree * GetTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") ",MatchSource.WIKI,doc/master/classTTreeIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeIndex.html
Security,hash,hash,"ndex () override;  ; virtual TTree * GetTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ",MatchSource.WIKI,doc/master/classTTreeIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeIndex.html
Availability,error,error,") constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &object) constTObjectvirtual; CurrentPerfStats()TVirtualPerfStatsstatic; DeclFileName()TTreePerfStatsinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTTreePerfStatsvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTTreePerfStatsvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EEventType enum nameTVirtualPerfStats; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; EventType(EEventType type)TVirtualPerfStatsstatic; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTTreePerfStatsvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBasketsInfoTTreePerfStatsprotected; fBitsTObjectprivate; fBranchIndexCacheTTreePerfStatsprotected; fBytesReadTTreePerfStatsprotected; fBytesReadExtraTTreePerfStatsprotected; fCompressTTreePerfStatsprotected; fCpuTimeTTreePerfStatsprotected; fDiskTimeTTreePerfStatsprotected; fFileTTreePerfStatsprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fGraphIOTTreePerfStatsprotected; fGraphTimeTTreePerfStatsprotected; fHostInfoTTreePerfStatsprotected; fHostInfoTextTTreePerfStatsprotected; FileEvent(const char *, const char *, const char *, const char *, bool) overrideTTreePerfStatsinlinevirtual; FileOpenEvent(TFile *, const char *, Double_t) overrideTTreePerfStatsinlinevirtual; FileReadEvent(TFile *file, Int_t len, Double_t start) overrideTTreePerfSta",MatchSource.WIKI,doc/master/classTTreePerfStats-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePerfStats-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TTreePerfStats Member List. This is the complete list of members for TTreePerfStats, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; BasketList_t typedefTTreePerfStats; Browse(TBrowser *b) overrideTTreePerfStatsvirtual; CheckedHash()TObjectinline; Class()TTreePerfStatsstatic; Class_Name()TTreePerfStatsstatic; Class_Version()TTreePerfStatsinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &object) constTObjectvirtual; CurrentPerfStats()TVirtualPerfStatsstatic; DeclFileName()TTreePerfStatsinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTTreePerfStatsvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTTreePerfStatsvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EEventType enum nameTVirtualPerfStats; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; EventType(EEventType type)TVirtualPerfStatsstatic; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTTreePerfStatsvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBasketsInfoTTreePerfStatsprotected; fBitsTObjectprivate; fBranchIndexCacheTTreePerfStatsprotected; fBytesReadTTreePerfStatsprotected; fBytesReadExtraTTreePerfStatsprotected; fCompres",MatchSource.WIKI,doc/master/classTTreePerfStats-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePerfStats-members.html
Availability,error,error," this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTTreePerfStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePerfStats.html
Energy Efficiency,monitor,monitored,"read-ahead cache. ;  ; Double_t fCompress;  Tree compression factor. ;  ; Double_t fCpuTime;  Cpu time. ;  ; Double_t fDiskTime;  Time spent in pure raw disk IO. ;  ; TFile * fFile;  ! Pointer to the file containing the Tree ;  ; TGraphErrors * fGraphIO;  Pointer to the graph with IO data. ;  ; TGraphErrors * fGraphTime;  Pointer to the graph with timestamp info. ;  ; TString fHostInfo;  Name of the host system, ROOT version and date. ;  ; TText * fHostInfoText;  Graphics Text object with the fHostInfo data. ;  ; TString fName;  Name of this TTreePerfStats. ;  ; Int_t fNleaves;  Number of leaves in the tree. ;  ; TPaveText * fPave;  Pointer to annotation pavetext. ;  ; Int_t fReadaheadSize;  Read-ahead cache size. ;  ; Int_t fReadCalls;  Number of read calls. ;  ; Double_t fRealNorm;  Real time scale factor for fGraphTime. ;  ; Double_t fRealTime;  Real time. ;  ; TGaxis * fRealTimeAxis;  Pointer to TGaxis object showing real-time. ;  ; TTree * fTree;  ! Pointer to the Tree being monitored ;  ; Int_t fTreeCacheSize;  TTreeCache buffer size. ;  ; Long64_t fUnzipInputSize;  Compressed bytes seen by the decompressor. ;  ; Long64_t fUnzipObjSize;  Uncompressed bytes produced by the decompressor. ;  ; Double_t fUnzipTime;  Time spent uncompressing the data. ;  ; TStopwatch * fWatch;  TStopwatch pointer. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TTreePerfStats.h>. Inheritance diagram for TTreePerfStats:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BasketList_t. using TTreePerfStats::BasketList_t = std::vector<std::pair<TBranch*, std::vector<size_t> >>. Definition at line 48 of file TTreePerfStats.h. Constructor & Destructor Documentation. ◆ TTreePerfStats() [1/2]. TTreePerfStats::TTreePerfStats ; (; ). default constructor (used when reading an object only) ; Definition at line 107 of file TTreePerfSta",MatchSource.WIKI,doc/master/classTTreePerfStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePerfStats.html
Integrability,message,message," this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTTreePerfStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePerfStats.html
Modifiability,inherit,inherited," percent; Real Time = Real Time in seconds; CPU Time = CPU Time in seconds; Disk Time = Real Time spent in pure raw disk IO; Disk IO = Raw disk IO speed in MBytes/second; ReadUZRT = Unzipped MBytes per RT second; ReadUZCP = Unipped MBytes per CP second; ReadRT = Zipped MBytes per RT second; ReadCP = Zipped MBytes per CP second. NOTE 1 :; The ReadTotal value indicates the effective number of zipped bytes returned to the application. The physical number of bytes read from the device (as measured for example with strace) is ReadTotal +ReadTotal*Readextra/100. Same for ReadSize. NOTE 2 :; A consequence of NOTE1, the Disk I/O speed corresponds to the effective number of bytes returned to the application per second. The Physical disk speed is DiskIO + DiskIO*ReadExtra/100. ; Definition at line 38 of file TTreePerfStats.h. Classes; struct  BasketInfo;  . Public Types; using BasketList_t = std::vector< std::pair< TBranch *, std::vector< size_t > > >;  ;  Public Types inherited from TVirtualPerfStats; enum  EEventType { ;   kUnDefined; , kPacket; , kStart; , kStop; , ;   kFile; , kFileOpen; , kFileRead; , kRate; , ;   kNumEventType. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreePerfStats ();  default constructor (used when reading an object only) ;  ;  TTreePerfStats (const char *name, TTree *T);  Create a TTree I/O perf stats object. ;  ;  ~TTreePerfStats (",MatchSource.WIKI,doc/master/classTTreePerfStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePerfStats.html
Performance,perform,performance,". ROOT: TTreePerfStats Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TTreePerfStats Class Reference. ; TTree I/O performance measurement. ; see example of use below.; The function FileReadEvent is called from TFile::ReadBuffer. For each call the following information is stored in fGraphIO; x[i] = Tree entry number; y[i] = 1e-6*(file position); ey[i] = 1e-9*number of bytes read For each call the following information is stored in fGraphTime; x[i] = Tree entry number; y[i] = Time now; ey[i] = readtime, eg timenow - start The TTreePerfStats object can be saved in a ROOT file in such a way that its inspection can be done outside the job that generated it. Example of use: {; TFile *f = TFile::Open(""RelValMinBias-GEN-SIM-RECO.root"");; T = (TTree*)f->Get(""Events"");; Long64_t nentries = T->GetEntries();; T->SetCacheSize(10000000);; T->SetCacheEntryRange(0,nentries);; T->AddBranchToCache(""*"");; //; TTreePerfStats *ps= new TTreePerfStats(""ioperf"",T);; //; for (Int_t i=0;i<nentries;i++) {; T->GetEntry(i);; }; ps->SaveAs(""cmsperf.root"");; }; f#define f(i)Definition RSha256.hxx:104; Long64_tlong long Long64_tDefinition RtypesCore.h:69; nentriesint nentriesDefinition THbookFile.cxx:91; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TTreePerfStatsTTree I/O performance measurement.Definition TTreePerfStats.h:38; TTreePerfStats::SaveAsvoid SaveAs(const char *filename="""", Option_t *option="""") const overrideSave this object to filename.Defini",MatchSource.WIKI,doc/master/classTTreePerfStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePerfStats.html
Security,hash,hash,"his object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTTreePerfStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePerfStats.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTTreePlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html
Deployability,update,updated," name corresponding to colindex in varexp. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDimension;  Dimension of the current expression. ;  ; TList * fFormulaList;  ! Pointer to a list of coordinated list TTreeFormula (used by Scan and Query) ;  ; TH1 * fHistogram;  ! Pointer to histogram used for the projection ;  ; TList * fInput;  ! input list to the selector ;  ; const char * fScanFileName;  Name of the file where Scan is redirected. ;  ; bool fScanRedirect;  Switch to redirect TTree::Scan output to a file. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; TSelectorDraw * fSelector;  ! Pointer to current selector ;  ; TClass * fSelectorClass;  ! Pointer to the actual class of the TSelectorFromFile ;  ; TSelector * fSelectorFromFile;  ! Pointer to a user defined selector created by this TTreePlayer object ;  ; TSelector * fSelectorUpdate;  ! Set to the selector address when it's entry list needs to be updated by the UpdateFormulaLeaves function ;  ; TTree * fTree;  ! Pointer to current Tree ;  . Private Member Functions;  TTreePlayer (const TTreePlayer &)=delete;  ; TTreePlayer & operator= (const TTreePlayer &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = ",MatchSource.WIKI,doc/master/classTTreePlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html
Energy Efficiency,efficient,efficient,"o use the 'branchname' as if it was a data member; protection against array out-of-bound; ability to use the branch data as object (when the user code is available). For example with Event.root, if Double_t somepx = fTracks.fPx[2];; double; is executed by one of the method of the skeleton, somepx will be updated with the current value of fPx of the 3rd track.; Both macrofilename and the optional cutfilename are expected to be the name of source files which contain at least a free standing function with the signature: x_t macrofilename(); // i.e function with the same name as the file; and y_t cutfilename(); // i.e function with the same name as the file; x_t and y_t needs to be types that can convert respectively to a double and a bool (because the skeleton uses: if (cutfilename()) htemp->Fill(macrofilename());; This 2 functions are run in a context such that the branch names are available as local variables of the correct (read-only) type.; Note that if you use the same 'variable' twice, it is more efficient to 'cache' the value. For example Int_t n = fEventNumber; // Read fEventNumber; if (n<10 || n>10) { ... }; int; nconst Int_t nDefinition legend1.C:16; is more efficient than if (fEventNumber<10 || fEventNumber>10); Access to TClonesArray.; If a branch (or member) is a TClonesArray (let's say fTracks), you can access the TClonesArray itself by using ->: fTracks->GetLast();; However this will load the full TClonesArray object and its content. To quickly read the size of the TClonesArray use (note the dot): fTracks.GetEntries();; This will read only the size from disk if the TClonesArray has been split. To access the content of the TClonesArray, use the [] operator: float px = fTracks[i].fPx; // fPx of the i-th track; Warning:; The variable actually use for access are 'wrapper' around the real data type (to add autoload for example) and hence getting to the data involves the implicit call to a C++ conversion operator. This conversion is automatic in most case. How",MatchSource.WIKI,doc/master/classTTreePlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html
Integrability,wrap,wrapperPrefix," Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TTreePlayer Class Reference. ; Implement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc). ; Definition at line 37 of file TTreePlayer.h. Public Member Functions;  TTreePlayer ();  Default Tree constructor. ;  ;  ~TTreePlayer () override;  Tree destructor. ;  ; TVirtualIndex * BuildIndex (const TTree *T, const char *majorname, const char *minorname) override;  Build the index for the tree (see TTree::BuildIndex) ;  ; TTree * CopyTree (const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Copy a Tree with selection, make a clone of this Tree header, then copy the selected entries. ;  ; Long64_t DrawScript (const char *wrapperPrefix, const char *macrofilename, const char *cutfilename, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Draw the result of a C++ script. ;  ; Long64_t DrawSelect (const char *varexp, const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Draw expression varexp for specified entries that matches the selection. ;  ; Int_t Fit (const char *formula, const char *varexp, const char *selection, Option_t *option, Option_t *goption, Long64_t nentries, Long64_t firstentry) override;  Fit a projected item(s) from a Tree. ;  ; Int_t GetDimension () const override;  ; Long64_t GetEntries (const char *selection) override;  Return the number of entries matching the selection. ;  ; virtual Long64_t GetEntriesToProcess (Long64_t firstentry, Long64_t nentries) const;  return the number of entries to be processed this function checks that nentries is not bigger than the number of entries in the Tree or in the associated TEventlist ;  ; TH1 * GetHistogram () const override;  ; Int_t GetNfill () const ",MatchSource.WIKI,doc/master/classTTreePlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html
Modifiability,variab,variable,"irstentry) override;  Interface to the Principal Components Analysis class. ;  ; Long64_t Process (const char *filename, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Process this tree executing the TSelector code in the specified filename. ;  ; Long64_t Process (TSelector *selector, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Process this tree executing the code in the specified selector. ;  ; TSQLResult * Query (const char *varexp, const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Loop on Tree and return TSQLResult object containing entries passing selection. ;  ; void RecursiveRemove (TObject *obj) override;  cleanup pointers in the player pointing to obj ;  ; Long64_t Scan (const char *varexp, const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Loop on Tree and print entries passing selection. ;  ; bool ScanRedirected ();  ; void SetEstimate (Long64_t n) override;  Set number of entries to estimate variable limits. ;  ; void SetScanFileName (const char *name);  ; void SetScanRedirect (bool on=false);  ; void SetTree (TTree *t) override;  ; void StartViewer (Int_t ww, Int_t wh) override;  Start the TTreeViewer on this TTree. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t UnbinnedFit (const char *formula, const char *varexp, const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Unbinned fit of one or more variable(s) from a Tree. ;  ; void UpdateFormulaLeaves () override;  this function is called by TChain::LoadTree when a new Tree is loaded. ;  ;  Public Member Functions inherited from TVirtualTreePlayer;  TVirtualTreePlayer ();  ;  ~TVirtualTreePlayer () override;  Common destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject.",MatchSource.WIKI,doc/master/classTTreePlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html
Performance,load,loaded,"(TObject *obj) override;  cleanup pointers in the player pointing to obj ;  ; Long64_t Scan (const char *varexp, const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Loop on Tree and print entries passing selection. ;  ; bool ScanRedirected ();  ; void SetEstimate (Long64_t n) override;  Set number of entries to estimate variable limits. ;  ; void SetScanFileName (const char *name);  ; void SetScanRedirect (bool on=false);  ; void SetTree (TTree *t) override;  ; void StartViewer (Int_t ww, Int_t wh) override;  Start the TTreeViewer on this TTree. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t UnbinnedFit (const char *formula, const char *varexp, const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Unbinned fit of one or more variable(s) from a Tree. ;  ; void UpdateFormulaLeaves () override;  this function is called by TChain::LoadTree when a new Tree is loaded. ;  ;  Public Member Functions inherited from TVirtualTreePlayer;  TVirtualTreePlayer ();  ;  ~TVirtualTreePlayer () override;  Common destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consisten",MatchSource.WIKI,doc/master/classTTreePlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html
Security,access,access,". ROOT: TTreePlayer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TTreePlayer Class Reference. ; Implement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc). ; Definition at line 37 of file TTreePlayer.h. Public Member Functions;  TTreePlayer ();  Default Tree constructor. ;  ;  ~TTreePlayer () override;  Tree destructor. ;  ; TVirtualIndex * BuildIndex (const TTree *T, const char *majorname, const char *minorname) override;  Build the index for the tree (see TTree::BuildIndex) ;  ; TTree * CopyTree (const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Copy a Tree with selection, make a clone of this Tree header, then copy the selected entries. ;  ; Long64_t DrawScript (const char *wrapperPrefix, const char *macrofilename, const char *cutfilename, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Draw the result of a C++ script. ;  ; Long64_t DrawSelect (const char *varexp, const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Draw expression varexp for specified entries that matches the selection. ;  ; Int_t Fit (const char *formula, const char *varexp, const char *selection, Option_t *option, Option_t *goption, Long64_t nentries, Long64_t firstentry) override;  Fit a projected item(s) from a Tree. ;  ; Int_t GetDimension () const override;  ; Long64_t GetEntries (const char *selection) override;  Return the number of entries matching the selection. ;  ; virtual Long64_t GetEntriesToProcess (Long64_t firstentry, Long64_t nentries) const;  return the number of entries to be processed this function checks that nentries is not bigger than the number of entries in the Tree or in the a",MatchSource.WIKI,doc/master/classTTreePlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html
Testability,test,test,"e 130 of file TTreePlayer.h. ◆ CopyTree(). TTree * TTreePlayer::CopyTree ; (; const char * ; selection, . Option_t * ; option, . Long64_t ; nentries, . Long64_t ; firstentry . ). overridevirtual . Copy a Tree with selection, make a clone of this Tree header, then copy the selected entries. . selection is a standard selection expression (see TTreePlayer::Draw); option is reserved for possible future use; nentries is the number of entries to process (default is all); first is the first entry to process (default is 0). IMPORTANT: The copied tree stays connected with this tree until this tree is deleted. In particular, any changes in branch addresses in this tree are forwarded to the clone trees. Any changes made to the branch addresses of the copied trees are over-ridden anytime this tree changes its branch addresses. Once this tree is deleted, all the addresses of the copied tree are reset to their default values.; The following example illustrates how to copy some events from the Tree generated in $ROOTSYS/test/Event gSystem->Load(""libEvent"");; TFile f(""Event.root"");; TTree *T = (TTree*)f.Get(""T"");; Event *event = new Event();; T->SetBranchAddress(""event"",&event);; TFile f2(""Event2.root"",""recreate"");; TTree *T2 = T->CopyTree(""fNtrack<595"");; T2->Write();; f#define f(i)Definition RSha256.hxx:104; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; EventDefinition collection_proxies.C:172; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; T2#define T2Definition md5.inl:147. Implements TVirtualTreePlayer.; Definition at line 195 of file TTreePlayer.cxx. ◆ DeclFileName(). static const char * TTreePlayer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing th",MatchSource.WIKI,doc/master/classTTreePlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html
Availability,robust,robust,". ROOT: TTreeReader Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Types |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTreeReader Class ReferenceTreePlayer Library. ; A simple, robust and fast interface to read values from ROOT columnar datasets such as TTree, TChain or TNtuple. ; TTreeReader is associated to TTreeReaderValue and TTreeReaderArray which are handles to concretely access the information in the dataset.; Example code can be found in; tutorials/tree/hsimpleReader.C; tutorials/tree/h1analysisTreeReader.C; This example. You can generate a skeleton of TTreeReaderValue<T> and TTreeReaderArray<T> declarations for all of a tree's branches using TTree::MakeSelector().; Roottest contains an example showing the full power.; A simpler analysis example can be found below: it histograms a function of the px and py branches.; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; TH1F(""h1"", ""ntuple"", 100, -4, 4);; ; // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");; ; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the",MatchSource.WIKI,doc/master/classTTreeReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeReader.html
Deployability,update,update,"terator_t begin ();  Return an iterator to the 0th TTree entry. ;  ; Iterator_t end ();  Return an iterator beyond the last TTree entry. ;  ; Long64_t GetCurrentEntry () const;  Returns the index of the current entry being read. ;  ; Long64_t GetEntries () const;  Returns the number of entries of the TEntryList if one is provided, else of the TTree / TChain, independent of a range set by SetEntriesRange() by calling TTree/TChain::GetEntriesFast. ;  ; Long64_t GetEntries (bool force);  Returns the number of entries of the TEntryList if one is provided, else of the TTree / TChain, independent of a range set by SetEntriesRange(). ;  ; TEntryList * GetEntryList () const;  ; EEntryStatus GetEntryStatus () const;  ; TTree * GetTree () const;  ; TClass * IsA () const override;  ; bool IsChain () const;  ; bool IsInvalid () const;  ; bool Notify () override;  Notify director and values of a change in tree. ;  ; void SetTree (const char *keyname, TDirectory *dir, TEntryList *entryList=nullptr);  Set (or update) the which tree to read from, passing the name of a tree in a directory. ;  ; void SetTree (const char *keyname, TEntryList *entryList=nullptr);  ; void SetTree (TTree *tree, TEntryList *entryList=nullptr);  Set (or update) the which tree to read from. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Entry setters; bool Next ();  Move to the next entry (or index of the TEntryList if that is set). ;  ; EEntryStatus SetEntry (Long64_t entry);  Set the next entry (or index of the TEntryList if that is set). ;  ; EEntryStatus SetLocalEntry (Long64_t entry);  Set the next local tree entry. ;  ; EEntryStatus SetEntriesRange (Long64_t beginEntry, Long64_t endEntry);  Set the range of entries to be loaded by Next(); end will not be loaded. ;  ; std::pair< Long64_t, Long64_t > GetEntriesRange () const;  Get the begin and end entry numbers. ;  ; void Restart ();  Restart a Next() lo",MatchSource.WIKI,doc/master/classTTreeReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeReader.html
Energy Efficiency,power,power,". ROOT: TTreeReader Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Types |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTreeReader Class ReferenceTreePlayer Library. ; A simple, robust and fast interface to read values from ROOT columnar datasets such as TTree, TChain or TNtuple. ; TTreeReader is associated to TTreeReaderValue and TTreeReaderArray which are handles to concretely access the information in the dataset.; Example code can be found in; tutorials/tree/hsimpleReader.C; tutorials/tree/h1analysisTreeReader.C; This example. You can generate a skeleton of TTreeReaderValue<T> and TTreeReaderArray<T> declarations for all of a tree's branches using TTree::MakeSelector().; Roottest contains an example showing the full power.; A simpler analysis example can be found below: it histograms a function of the px and py branches.; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; TH1F(""h1"", ""ntuple"", 100, -4, 4);; ; // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");; ; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the",MatchSource.WIKI,doc/master/classTTreeReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeReader.html
Integrability,interface,interface,". ROOT: TTreeReader Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Types |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTreeReader Class ReferenceTreePlayer Library. ; A simple, robust and fast interface to read values from ROOT columnar datasets such as TTree, TChain or TNtuple. ; TTreeReader is associated to TTreeReaderValue and TTreeReaderArray which are handles to concretely access the information in the dataset.; Example code can be found in; tutorials/tree/hsimpleReader.C; tutorials/tree/h1analysisTreeReader.C; This example. You can generate a skeleton of TTreeReaderValue<T> and TTreeReaderArray<T> declarations for all of a tree's branches using TTree::MakeSelector().; Roottest contains an example showing the full power.; A simpler analysis example can be found below: it histograms a function of the px and py branches.; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; TH1F(""h1"", ""ntuple"", 100, -4, 4);; ; // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");; ; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the",MatchSource.WIKI,doc/master/classTTreeReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeReader.html
Modifiability,variab,variable,"m the tree entries:; TTreeReaderValue<std::vector<Muon>> muons(reader, ""muons"");; ; //Read the pT for all jets in the tree entry:; TTreeReaderArray<double> jetPt(reader, ""jets.pT"");; ; // Read the taus in the tree entry:; TTreeReaderArray<Tau> taus(reader, ""taus"");; ; ; // Now iterate through the TTree entries and fill a histogram.; ; TH1F(""hist"", ""TTreeReader example histogram"", 10, 0., 100.);; ; bool firstEntry = true;; while (reader.Next()) {; if (firstEntry) {; // Check that branches exist and their types match our expectation.; if (!CheckValue(weight)) return false;; if (!CheckValue(triggerInfo)) return false;; if (!CheckValue(muons)) return false;; if (!CheckValue(jetPt)) return false;; if (!CheckValue(taus)) return false;; firstentry = false;; }; ; // Access the TriggerInfo object as if it's a pointer.; if (!triggerInfo->hasMuonL1()); continue;; ; // Ditto for the vector<Muon>.; if (!muons->size()); continue;; ; // Access the jetPt as an array, whether the TTree stores this as; // a std::vector, std::list, TClonesArray or Jet* C-style array, with; // fixed or variable array size.; if (jetPt.GetSize() < 2 || jetPt[0] < 100); continue;; ; // Access the array of taus.; if (!taus.IsEmpty()) {; // Access a float value - need to dereference as TTreeReaderValue; // behaves like an iterator; float currentWeight = *weight;; for (const Tau& tau: taus) {; hist->Fill(tau.eta(), currentWeight);; }; }; } // TTree entry / event loop; ; // Return true if we have iterated through all entries.; return reader.GetEntryStatus() == TTreeReader::kEntryBeyondEnd;; }; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TH1.h; TTreeReaderArray.h; ROOT::Internal::TTreeReaderValueBaseBase class of TTreeReaderValue.Definition TTreeReaderValue.h:45; TTreeReaderArrayAn interface for reading collections stored in ROOT columnar datasets.D",MatchSource.WIKI,doc/master/classTTreeReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeReader.html
Performance,load,loaded," ; bool IsChain () const;  ; bool IsInvalid () const;  ; bool Notify () override;  Notify director and values of a change in tree. ;  ; void SetTree (const char *keyname, TDirectory *dir, TEntryList *entryList=nullptr);  Set (or update) the which tree to read from, passing the name of a tree in a directory. ;  ; void SetTree (const char *keyname, TEntryList *entryList=nullptr);  ; void SetTree (TTree *tree, TEntryList *entryList=nullptr);  Set (or update) the which tree to read from. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Entry setters; bool Next ();  Move to the next entry (or index of the TEntryList if that is set). ;  ; EEntryStatus SetEntry (Long64_t entry);  Set the next entry (or index of the TEntryList if that is set). ;  ; EEntryStatus SetLocalEntry (Long64_t entry);  Set the next local tree entry. ;  ; EEntryStatus SetEntriesRange (Long64_t beginEntry, Long64_t endEntry);  Set the range of entries to be loaded by Next(); end will not be loaded. ;  ; std::pair< Long64_t, Long64_t > GetEntriesRange () const;  Get the begin and end entry numbers. ;  ; void Restart ();  Restart a Next() loop from entry 0 (of TEntryList index 0 of fEntryList is set). ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtua",MatchSource.WIKI,doc/master/classTTreeReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeReader.html
Security,access,access,". ROOT: TTreeReader Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Types |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTreeReader Class ReferenceTreePlayer Library. ; A simple, robust and fast interface to read values from ROOT columnar datasets such as TTree, TChain or TNtuple. ; TTreeReader is associated to TTreeReaderValue and TTreeReaderArray which are handles to concretely access the information in the dataset.; Example code can be found in; tutorials/tree/hsimpleReader.C; tutorials/tree/h1analysisTreeReader.C; This example. You can generate a skeleton of TTreeReaderValue<T> and TTreeReaderArray<T> declarations for all of a tree's branches using TTree::MakeSelector().; Roottest contains an example showing the full power.; A simpler analysis example can be found below: it histograms a function of the px and py branches.; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; TH1F(""h1"", ""ntuple"", 100, -4, 4);; ; // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");; ; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the",MatchSource.WIKI,doc/master/classTTreeReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeReader.html
Usability,simpl,simple,". ROOT: TTreeReader Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Types |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTreeReader Class ReferenceTreePlayer Library. ; A simple, robust and fast interface to read values from ROOT columnar datasets such as TTree, TChain or TNtuple. ; TTreeReader is associated to TTreeReaderValue and TTreeReaderArray which are handles to concretely access the information in the dataset.; Example code can be found in; tutorials/tree/hsimpleReader.C; tutorials/tree/h1analysisTreeReader.C; This example. You can generate a skeleton of TTreeReaderValue<T> and TTreeReaderArray<T> declarations for all of a tree's branches using TTree::MakeSelector().; Roottest contains an example showing the full power.; A simpler analysis example can be found below: it histograms a function of the px and py branches.; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; TH1F(""h1"", ""ntuple"", 100, -4, 4);; ; // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");; ; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the",MatchSource.WIKI,doc/master/classTTreeReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeReader.html
Availability,error,error,"sets;  ; TTreeReader * fTreeReader;  Tree reader we belong to. ;  . #include <TTreeReaderValue.h>. Inheritance diagram for TTreeReaderValue< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ NonConstT_t. template<typename T > . using TTreeReaderValue< T >::NonConstT_t = typename std::remove_const<T>::type. Definition at line 178 of file TTreeReaderValue.h. Constructor & Destructor Documentation. ◆ TTreeReaderValue() [1/2]. template<typename T > . TTreeReaderValue< T >::TTreeReaderValue ; (; ). delete . ◆ TTreeReaderValue() [2/2]. template<typename T > . TTreeReaderValue< T >::TTreeReaderValue ; (; TTreeReader & ; tr, . const char * ; branchname . ). inline . Definition at line 180 of file TTreeReaderValue.h. Member Function Documentation. ◆ Get(). template<typename T > . T * TTreeReaderValue< T >::Get ; (; ). inline . Return a pointer to the value of the current entry. ; Return a nullptr and print an error if no entry has been loaded yet. The returned address is guaranteed to stay constant while a given TTree is being read from a given file, unless the branch addresses are manipulated directly (e.g. through TTree::SetBranchAddress()). The address might also change when the underlying TTree/TFile is switched, e.g. when a TChain switches files. ; Definition at line 189 of file TTreeReaderValue.h. ◆ GetDerivedTypeName(). template<typename T > . const char * TTreeReaderValue< T >::GetDerivedTypeName ; (; ); const. inlineoverrideprotectedvirtual . Get the template argument as a string. ; Implements ROOT::Internal::TTreeReaderValueBase.; Definition at line 211 of file TTreeReaderValue.h. ◆ operator*(). template<typename T > . T & TTreeReaderValue< T >::operator* ; (; ). inline . Return a reference to the value of the current entry. ; Equivalent to dereferencing the pointer returned by Get(). Behavior is undefined if no entry has been loaded yet. Most likely a crash will occur. ; Definition ",MatchSource.WIKI,doc/master/classTTreeReaderValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeReaderValue.html
Integrability,interface,interface,". ROOT: TTreeReaderValue< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; List of all members ; TTreeReaderValue< T > Class Template ReferencefinalTreePlayer Library. ; template<typename T>; class TTreeReaderValue< T >An interface for reading values stored in ROOT columnar datasets. ; The TTreeReaderValue is a type-safe tool to be used in association with a TTreeReader to access the values stored in TTree, TNtuple and TChain datasets. TTreeReaderValue can be also used to access collections such as std::vectors or TClonesArray stored in columnar datasets but it is recommended to use TTreeReaderArray instead as it offers several advantages.; See the documentation of TTreeReader for more details and examples. ; Definition at line 174 of file TTreeReaderValue.h. Public Types; using NonConstT_t = typename std::remove_const< T >::type;  ;  Public Types inherited from ROOT::Internal::TTreeReaderValueBase; typedef bool(ROOT::Detail::TBranchProxy::* BranchProxyRead_t) ();  ; enum  EReadStatus { kReadSuccess = 0; , kReadNothingYet; , kReadError; };  ; enum  ESetupStatus { ;   kSetupNotSetup = -7; , kSetupTreeDestructed = -8; , kSetupMakeClassModeMismatch = -9; , kSetupMissingCounterBranch = -6; , ;   kSetupMissingBranch = -5; , kSetupInternalError = -4; , kSetupMissingDictionary = -3; , kSetupMismatch = -2; , ;   kSetupNotACollection = -1; , kSetupMatch = 0; , kSetupMatchBranch = 7; , kSetupNoCheck = 5; , ;   kSetupMatchLeaf = 6. };  Status flags, 0 is good. More...;  . Public Member Functions;  TTreeReaderValue ()=delete;  ;  TTreeReaderValue (TTreeReader &tr, const char *branchname);  ; T * Get ();  Return a pointer to the value of the current entry. ;  ; T & operator* ();  Return a reference to the value of the current entry. ;  ; T * operator-> ();  Return a pointer to the value of the current entry. ;  ;  Public Mem",MatchSource.WIKI,doc/master/classTTreeReaderValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeReaderValue.html
Modifiability,inherit,inherited,"erValue< T > Class Template ReferencefinalTreePlayer Library. ; template<typename T>; class TTreeReaderValue< T >An interface for reading values stored in ROOT columnar datasets. ; The TTreeReaderValue is a type-safe tool to be used in association with a TTreeReader to access the values stored in TTree, TNtuple and TChain datasets. TTreeReaderValue can be also used to access collections such as std::vectors or TClonesArray stored in columnar datasets but it is recommended to use TTreeReaderArray instead as it offers several advantages.; See the documentation of TTreeReader for more details and examples. ; Definition at line 174 of file TTreeReaderValue.h. Public Types; using NonConstT_t = typename std::remove_const< T >::type;  ;  Public Types inherited from ROOT::Internal::TTreeReaderValueBase; typedef bool(ROOT::Detail::TBranchProxy::* BranchProxyRead_t) ();  ; enum  EReadStatus { kReadSuccess = 0; , kReadNothingYet; , kReadError; };  ; enum  ESetupStatus { ;   kSetupNotSetup = -7; , kSetupTreeDestructed = -8; , kSetupMakeClassModeMismatch = -9; , kSetupMissingCounterBranch = -6; , ;   kSetupMissingBranch = -5; , kSetupInternalError = -4; , kSetupMissingDictionary = -3; , kSetupMismatch = -2; , ;   kSetupNotACollection = -1; , kSetupMatch = 0; , kSetupMatchBranch = 7; , kSetupNoCheck = 5; , ;   kSetupMatchLeaf = 6. };  Status flags, 0 is good. More...;  . Public Member Functions;  TTreeReaderValue ()=delete;  ;  TTreeReaderValue (TTreeReader &tr, const char *branchname);  ; T * Get ();  Return a pointer to the value of the current entry. ;  ; T & operator* ();  Return a reference to the value of the current entry. ;  ; T * operator-> ();  Return a pointer to the value of the current entry. ;  ;  Public Member Functions inherited from ROOT::Internal::TTreeReaderValueBase; virtual ~TTreeReaderValueBase ();  Unregister from tree reader, cleanup. ;  ; void * GetAddress ();  Returns the memory address of the object being read. ;  ; const char * GetBranchName () const;  ",MatchSource.WIKI,doc/master/classTTreeReaderValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeReaderValue.html
Performance,load,loaded,"sets;  ; TTreeReader * fTreeReader;  Tree reader we belong to. ;  . #include <TTreeReaderValue.h>. Inheritance diagram for TTreeReaderValue< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ NonConstT_t. template<typename T > . using TTreeReaderValue< T >::NonConstT_t = typename std::remove_const<T>::type. Definition at line 178 of file TTreeReaderValue.h. Constructor & Destructor Documentation. ◆ TTreeReaderValue() [1/2]. template<typename T > . TTreeReaderValue< T >::TTreeReaderValue ; (; ). delete . ◆ TTreeReaderValue() [2/2]. template<typename T > . TTreeReaderValue< T >::TTreeReaderValue ; (; TTreeReader & ; tr, . const char * ; branchname . ). inline . Definition at line 180 of file TTreeReaderValue.h. Member Function Documentation. ◆ Get(). template<typename T > . T * TTreeReaderValue< T >::Get ; (; ). inline . Return a pointer to the value of the current entry. ; Return a nullptr and print an error if no entry has been loaded yet. The returned address is guaranteed to stay constant while a given TTree is being read from a given file, unless the branch addresses are manipulated directly (e.g. through TTree::SetBranchAddress()). The address might also change when the underlying TTree/TFile is switched, e.g. when a TChain switches files. ; Definition at line 189 of file TTreeReaderValue.h. ◆ GetDerivedTypeName(). template<typename T > . const char * TTreeReaderValue< T >::GetDerivedTypeName ; (; ); const. inlineoverrideprotectedvirtual . Get the template argument as a string. ; Implements ROOT::Internal::TTreeReaderValueBase.; Definition at line 211 of file TTreeReaderValue.h. ◆ operator*(). template<typename T > . T & TTreeReaderValue< T >::operator* ; (; ). inline . Return a reference to the value of the current entry. ; Equivalent to dereferencing the pointer returned by Get(). Behavior is undefined if no entry has been loaded yet. Most likely a crash will occur. ; Definition ",MatchSource.WIKI,doc/master/classTTreeReaderValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeReaderValue.html
Safety,safe,safe,". ROOT: TTreeReaderValue< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; List of all members ; TTreeReaderValue< T > Class Template ReferencefinalTreePlayer Library. ; template<typename T>; class TTreeReaderValue< T >An interface for reading values stored in ROOT columnar datasets. ; The TTreeReaderValue is a type-safe tool to be used in association with a TTreeReader to access the values stored in TTree, TNtuple and TChain datasets. TTreeReaderValue can be also used to access collections such as std::vectors or TClonesArray stored in columnar datasets but it is recommended to use TTreeReaderArray instead as it offers several advantages.; See the documentation of TTreeReader for more details and examples. ; Definition at line 174 of file TTreeReaderValue.h. Public Types; using NonConstT_t = typename std::remove_const< T >::type;  ;  Public Types inherited from ROOT::Internal::TTreeReaderValueBase; typedef bool(ROOT::Detail::TBranchProxy::* BranchProxyRead_t) ();  ; enum  EReadStatus { kReadSuccess = 0; , kReadNothingYet; , kReadError; };  ; enum  ESetupStatus { ;   kSetupNotSetup = -7; , kSetupTreeDestructed = -8; , kSetupMakeClassModeMismatch = -9; , kSetupMissingCounterBranch = -6; , ;   kSetupMissingBranch = -5; , kSetupInternalError = -4; , kSetupMissingDictionary = -3; , kSetupMismatch = -2; , ;   kSetupNotACollection = -1; , kSetupMatch = 0; , kSetupMatchBranch = 7; , kSetupNoCheck = 5; , ;   kSetupMatchLeaf = 6. };  Status flags, 0 is good. More...;  . Public Member Functions;  TTreeReaderValue ()=delete;  ;  TTreeReaderValue (TTreeReader &tr, const char *branchname);  ; T * Get ();  Return a pointer to the value of the current entry. ;  ; T & operator* ();  Return a reference to the value of the current entry. ;  ; T * operator-> ();  Return a pointer to the value of the current entry. ;  ;  Public Mem",MatchSource.WIKI,doc/master/classTTreeReaderValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeReaderValue.html
Security,access,access,". ROOT: TTreeReaderValue< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; List of all members ; TTreeReaderValue< T > Class Template ReferencefinalTreePlayer Library. ; template<typename T>; class TTreeReaderValue< T >An interface for reading values stored in ROOT columnar datasets. ; The TTreeReaderValue is a type-safe tool to be used in association with a TTreeReader to access the values stored in TTree, TNtuple and TChain datasets. TTreeReaderValue can be also used to access collections such as std::vectors or TClonesArray stored in columnar datasets but it is recommended to use TTreeReaderArray instead as it offers several advantages.; See the documentation of TTreeReader for more details and examples. ; Definition at line 174 of file TTreeReaderValue.h. Public Types; using NonConstT_t = typename std::remove_const< T >::type;  ;  Public Types inherited from ROOT::Internal::TTreeReaderValueBase; typedef bool(ROOT::Detail::TBranchProxy::* BranchProxyRead_t) ();  ; enum  EReadStatus { kReadSuccess = 0; , kReadNothingYet; , kReadError; };  ; enum  ESetupStatus { ;   kSetupNotSetup = -7; , kSetupTreeDestructed = -8; , kSetupMakeClassModeMismatch = -9; , kSetupMissingCounterBranch = -6; , ;   kSetupMissingBranch = -5; , kSetupInternalError = -4; , kSetupMissingDictionary = -3; , kSetupMismatch = -2; , ;   kSetupNotACollection = -1; , kSetupMatch = 0; , kSetupMatchBranch = 7; , kSetupNoCheck = 5; , ;   kSetupMatchLeaf = 6. };  Status flags, 0 is good. More...;  . Public Member Functions;  TTreeReaderValue ()=delete;  ;  TTreeReaderValue (TTreeReader &tr, const char *branchname);  ; T * Get ();  Return a pointer to the value of the current entry. ;  ; T & operator* ();  Return a reference to the value of the current entry. ;  ; T * operator-> ();  Return a pointer to the value of the current entry. ;  ;  Public Mem",MatchSource.WIKI,doc/master/classTTreeReaderValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeReaderValue.html
Availability,recover,recover,"askets, buffers and entries count in all branches and leaves. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Resets the state of this TTree after a merge (keep the customization but forget the data). ;  ; virtual void ResetBranchAddress (TBranch *);  Tell all of our branches to set their addresses to zero. ;  ; virtual void ResetBranchAddresses ();  Tell all of our branches to drop their current objects and allocate new ones. ;  ; virtual Long64_t Scan (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over tree entries and print entries passing selection. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr=nullptr);  Change branch address, dealing with clone trees properly. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual void SetBranchStatus (const char *bname, bool s",MatchSource.WIKI,doc/master/classTTreeSQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html
Deployability,update,updated,"*name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=99) override;  Not implemented yet. ;  ; Int_t Fill () override;  Copy the information from the user object to the TTree. ;  ; Long64_t GetEntries () const override;  Get the number of rows in the database. ;  ; Long64_t GetEntries (const char *sel) override;  Return the number of entries matching the selection. ;  ; Long64_t GetEntriesFast () const override;  Return the number of entries as of the last check. ;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  Load the data for the entry from the database. ;  ; TString GetTableName ();  ; TClass * IsA () const override;  ; Long64_t LoadTree (Long64_t entry) override;  Setup the tree to the load the specified entry. ;  ; virtual Long64_t PrepEntry (Long64_t entry);  Make sure the server and result set are setup for the requested entry. ;  ; void Refresh () override;  Refresh contents of this Tree and its branches from the current Tree status in the database One can call this function in case the Tree on its file is being updated by another process. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTree;  TTree ();  Default constructor and I/O constructor. ;  ;  TTree (const char *name, const char *title, Int_t splitlevel=99, TDirectory *dir=(::ROOT::Internal::TDirectoryAtomicAdapter{}));  Normal tree constructor. ;  ;  TTree (const TTree &tt)=delete;  ;  ~TTree () override;  Destructor. ;  ; void AddAllocationCount (UInt_t count);  ; virtual Int_t AddBranchToCache (const char *bname, bool subbranches=false);  Add branch with name bname to the Tree cache. ;  ; virtual Int_t AddBranchToCache (TBranch *branch, bool subbranches=false);  Add branch b to the Tree cache. ;  ; void AddClone (TTree *);  Add a cloned tree to our list of trees to be notified whenever we change our branch addresses or when we a",MatchSource.WIKI,doc/master/classTTreeSQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html
Energy Efficiency,allocate,allocate,"ad branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual void RemoveFriend (TTree *);  Remove a friend from the list of friends. ;  ; virtual void Reset (Option_t *option="""");  Reset baskets, buffers and entries count in all branches and leaves. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Resets the state of this TTree after a merge (keep the customization but forget the data). ;  ; virtual void ResetBranchAddress (TBranch *);  Tell all of our branches to set their addresses to zero. ;  ; virtual void ResetBranchAddresses ();  Tell all of our branches to drop their current objects and allocate new ones. ;  ; virtual Long64_t Scan (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over tree entries and print entries passing selection. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch ",MatchSource.WIKI,doc/master/classTTreeSQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html
Integrability,interface,interface,"T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr=nullptr);  Change branch address, dealing with clone trees properly. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual void SetBranchStatus (const char *bname, bool status=true, UInt_t *found=nullptr);  Set branch status to Process or DoNotProcess. ;  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual Int_t SetCacheSize (Long64_t cachesize=-1);  Set maximum size of the file cache . ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual void SetDirectory (TDirectory *dir);  Change the tree's directory. ;  ; virtual Long64_t SetEntries (Long64_t n=-1);  Change number of entries in the tree. ;  ; virtual void SetEntryList (TEntryList *list, Option_t *opt="""");  Set an EntryList. ;  ; virtual void SetEstimate (Long64_t nentri",MatchSource.WIKI,doc/master/classTTreeSQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html
Modifiability,inherit,inherited,"mber of rows in the database. ;  ; Long64_t GetEntries (const char *sel) override;  Return the number of entries matching the selection. ;  ; Long64_t GetEntriesFast () const override;  Return the number of entries as of the last check. ;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  Load the data for the entry from the database. ;  ; TString GetTableName ();  ; TClass * IsA () const override;  ; Long64_t LoadTree (Long64_t entry) override;  Setup the tree to the load the specified entry. ;  ; virtual Long64_t PrepEntry (Long64_t entry);  Make sure the server and result set are setup for the requested entry. ;  ; void Refresh () override;  Refresh contents of this Tree and its branches from the current Tree status in the database One can call this function in case the Tree on its file is being updated by another process. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTree;  TTree ();  Default constructor and I/O constructor. ;  ;  TTree (const char *name, const char *title, Int_t splitlevel=99, TDirectory *dir=(::ROOT::Internal::TDirectoryAtomicAdapter{}));  Normal tree constructor. ;  ;  TTree (const TTree &tt)=delete;  ;  ~TTree () override;  Destructor. ;  ; void AddAllocationCount (UInt_t count);  ; virtual Int_t AddBranchToCache (const char *bname, bool subbranches=false);  Add branch with name bname to the Tree cache. ;  ; virtual Int_t AddBranchToCache (TBranch *branch, bool subbranches=false);  Add branch b to the Tree cache. ;  ; void AddClone (TTree *);  Add a cloned tree to our list of trees to be notified whenever we change our branch addresses or when we are deleted. ;  ; virtual TFriendElement * AddFriend (const char *treename, const char *filename="""");  Add a TFriendElement to the list of friends. ;  ; virtual TFriendElement * AddFriend (const char *treename, TFile *file);  Add a TFriendElement to the list ",MatchSource.WIKI,doc/master/classTTreeSQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html
Performance,load,load,"implemented yet. ;  ; Int_t Branch (TList *list, Int_t bufsize=32000, Int_t splitlevel=99) override;  Not implemented yet. ;  ; TBranch * BranchOld (const char *name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=1) override;  Not implemented yet. ;  ; TBranch * Bronch (const char *name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=99) override;  Not implemented yet. ;  ; Int_t Fill () override;  Copy the information from the user object to the TTree. ;  ; Long64_t GetEntries () const override;  Get the number of rows in the database. ;  ; Long64_t GetEntries (const char *sel) override;  Return the number of entries matching the selection. ;  ; Long64_t GetEntriesFast () const override;  Return the number of entries as of the last check. ;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  Load the data for the entry from the database. ;  ; TString GetTableName ();  ; TClass * IsA () const override;  ; Long64_t LoadTree (Long64_t entry) override;  Setup the tree to the load the specified entry. ;  ; virtual Long64_t PrepEntry (Long64_t entry);  Make sure the server and result set are setup for the requested entry. ;  ; void Refresh () override;  Refresh contents of this Tree and its branches from the current Tree status in the database One can call this function in case the Tree on its file is being updated by another process. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTree;  TTree ();  Default constructor and I/O constructor. ;  ;  TTree (const char *name, const char *title, Int_t splitlevel=99, TDirectory *dir=(::ROOT::Internal::TDirectoryAtomicAdapter{}));  Normal tree constructor. ;  ;  TTree (const TTree &tt)=delete;  ;  ~TTree () override;  Destructor. ;  ; void AddAllocationCount (UInt_t count);  ; virtual Int_t AddBranchToCache (const char *bname, bool subb",MatchSource.WIKI,doc/master/classTTreeSQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html
Safety,recover,recover,"askets, buffers and entries count in all branches and leaves. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Resets the state of this TTree after a merge (keep the customization but forget the data). ;  ; virtual void ResetBranchAddress (TBranch *);  Tell all of our branches to set their addresses to zero. ;  ; virtual void ResetBranchAddresses ();  Tell all of our branches to drop their current objects and allocate new ones. ;  ; virtual Long64_t Scan (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over tree entries and print entries passing selection. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr=nullptr);  Change branch address, dealing with clone trees properly. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual void SetBranchStatus (const char *bname, bool s",MatchSource.WIKI,doc/master/classTTreeSQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html
Security,hash,hash,"nst char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object ",MatchSource.WIKI,doc/master/classTTreeSQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html
Usability,undo,undo,"evel=99);  Add a new branch, and infer the data type from the array addobj being passed. ;  ; template<class T > ; TBranch * Branch (const char *name, T *obj, Int_t bufsize=32000, Int_t splitlevel=99);  Add a new branch, and infer the data type from the type of obj being passed. ;  ; virtual TBranch * BranchRef ();  Build the optional branch supporting the TRefTable. ;  ; void Browse (TBrowser *) override;  Browse content of the TTree. ;  ; virtual Int_t BuildIndex (const char *majorname, const char *minorname=""0"");  Build a Tree Index (default is TTreeIndex). ;  ; TStreamerInfo * BuildStreamerInfo (TClass *cl, void *pointer=nullptr, bool canOptimize=true);  Build StreamerInfo for class cl. ;  ; virtual TFile * ChangeFile (TFile *file);  Called by TTree::Fill() when file has reached its maximum fgMaxTreeSize. ;  ; virtual TTree * CloneTree (Long64_t nentries=-1, Option_t *option="""");  Create a clone of this tree and copy nentries. ;  ; virtual void CopyAddresses (TTree *, bool undo=false);  Set branch addresses of passed tree equal to ours. ;  ; virtual Long64_t CopyEntries (TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false);  Copy nentries from given tree to this tree. ;  ; virtual TTree * CopyTree (const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Copy a tree with selection. ;  ; Int_t Debug () const;  ; void Delete (Option_t *option="""") override;  Delete this tree from memory or/and disk. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Called by TKey and TObject::Clone to automatically add us to a directory when we are read from a file. ;  ; virtual Long64_t Draw (const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Draw expression varexp for entries and objects that pass a (optional) selection. ;  ; virtual Long64_t Draw (const char *varexp, const TCut &selection, Option_t *option="""", Long64_t nentries=kMaxEn",MatchSource.WIKI,doc/master/classTTreeSQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html
Availability,error,error,"wBorder()TGFramevirtual; DrawClass() const overrideTGFrameinlinevirtual; DrawClone(Option_t *="""") const overrideTGFrameinlinevirtual; DrawCopy(Handle_t, Int_t, Int_t)TGFrameinlinevirtual; Dump() const overrideTGFrameinlinevirtual; EDeprecatedStatusBits enum nameTObject; EditExpression()TTreeViewer; EEditMode enum nameTGWindow; EListItemType enum nameTTreeViewer; Emit(const char *signal, const T &arg)TQObjectinline; Emit(const char *signal)TQObjectinline; EmitVA(const char *signal_name, Int_t, const T &... params)TQObjectinline; Empty()TTreeViewer; EmptyAll()TTreeViewer; EmptyBrackets(const char *name)TTreeViewerprivate; En(Int_t n)TTreeViewerprivate; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGWindow; Ex()TTreeViewerprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteCommand(const char *command, bool fast=false)TTreeViewer; ExecuteDraw()TTreeViewer; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; ExecuteSpider()TTreeViewer; ExpressionItem(Int_t index)TTreeViewer; ExpressionList()TTreeViewer; Ey()TTreeViewerprivate; Ez()TTreeViewerprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBackgroundTGFrameprotected; fBarCommandTTreeViewerprivate; fBarHTTreeViewerprivate; fBarHistTTreeViewerprivate; fBarLayoutTTreeViewerprivate; fBarLbl1TTreeViewerprivate; fBarLbl2TTreeViewerprivate; fBarLbl3TTreeViewerprivate; fBarListInTTreeViewerprivate; fBarListOutTTreeViewerprivate; fBarOptionTTreeViewerprivate; fBarRecTTreeViewerprivate; fBarScanTTreeViewerprivate; fBFrameTTreeViewerprivate; fBGFirstTTreeViewerprivate; fBGLastTTreeViewerprivate; fBGNextTTreeViewerprivate; fBGPreviousTTreeViewerprivate; fBGRecordTTreeViewerprivate; fBindListTGMainFrameprotected; fBitsTObjectprivate; fBLbl4TTreeViewerprivate; fBLbl5TTreeViewerprivate; fBorderWidthTGFrameprotected; fClass",MatchSource.WIKI,doc/master/classTTreeViewer-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeViewer-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TTreeViewer Member List. This is the complete list of members for TTreeViewer, including all inherited members. AbstractMethod(const char *method) constTObject; Activate(Bool_t)TGFrameinlinevirtual; ActivateButtons(bool first, bool previous, bool next, bool last)TTreeViewer; AddFrame(TGFrame *f, TGLayoutHints *l=nullptr)TGCompositeFramevirtual; AddInput(UInt_t emask)TGFrame; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; AppendTree(TTree *tree)TTreeViewer; AreAllSignalsBlocked()TQObjectstatic; AreSignalsBlocked() constTQObjectinline; BindKey(const TGWindow *w, Int_t keycode, Int_t modifier) constTGMainFramevirtual; BlockAllSignals(Bool_t b)TQObjectstatic; BlockSignals(Bool_t b)TQObjectinline; Browse(TBrowser *b)TObjectvirtual; BuildInterface()TTreeViewerprivate; ChangeBackground(Pixel_t back)TGFramevirtual; ChangedBy(const char *method)TQObjectinlinevirtual; ChangeOptions(UInt_t options) overrideTGCompositeFramevirtual; ChangeSubframesBackground(Pixel_t back)TGCompositeFramevirtual; CheckConnectArgs(TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot)TQObjectprotectedstatic; CheckedHash()TObjectinline; Class()TTreeViewerstatic; Class_Name()TTreeViewerstatic; Class_Version()TTreeViewerinlinestatic; ClassName() constTObjectvirtual; Cleanup()TGCompositeFramevirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; CloseWindow() overrideTTreeViewervirtual; CollectClassSignalLists(TList &list, TClass *cls)TQObject; Compare(const TObject *obj) constTObjectvirtual; CompressName(const char *method_name)TQObjectprotectedstatic; Connect(const char *signal, const char *receiver_class, void *receiver, const char *slot)TQObject; Connect(TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot)TQObje",MatchSource.WIKI,doc/master/classTTreeViewer-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeViewer-members.html
Availability,echo,echoed,"  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TTreeViewer Class Reference. ; A graphic user interface designed to handle ROOT trees and to take advantage of TTree class features. ; It uses ROOT native GUI widgets adapted for ""drag and drop"" functionality. in the same session. The following capabilities are making the viewer a helpful tool for analysis:. several trees may be opened in the same session;; branches and leaves can be easily browsed or scanned;; fast drawing of branch expressions by double-clicking;; new variables/selections easy to compose with the built-in editor;; histograms can be composed by dragging leaves or user-defined expressions to X, Y and Z axis items;; the tree entries to be processed can be selected with a double slider;; selections can be defined and activated by dragging them to the 'Cut' item;; all expressions can be aliased and aliases can be used in composing others;; input/output event lists easy to handle;; menu with histogram drawing options;; user commands may be executed within the viewer and the current command can be echoed;; current 'Draw' event loop is reflected by a progress bar and may be interrupted by the user;; all widgets have self-explaining tool tips and/or context menus;; expressions/leaves can be dragged to a 'scan box' and scanned by double-clicking this item. The result can be redirected to an ASCII file;. The layout has the following items:. a menu bar with entries : File, Edit, Run, Options and Help;; a toolbar in the upper part where you can issue user commands, change the drawing option and the histogram name, three check buttons Hist, Rec and Scan.HIST toggles histogram drawing mode, REC enables recording of the last command issued and SCAN enables redirecting of TTree::Scan command in an ASCII file (see -Scanning expressions-);; a button bar in the lower ",MatchSource.WIKI,doc/master/classTTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html
Deployability,toggle,toggles,"liases can be used in composing others;; input/output event lists easy to handle;; menu with histogram drawing options;; user commands may be executed within the viewer and the current command can be echoed;; current 'Draw' event loop is reflected by a progress bar and may be interrupted by the user;; all widgets have self-explaining tool tips and/or context menus;; expressions/leaves can be dragged to a 'scan box' and scanned by double-clicking this item. The result can be redirected to an ASCII file;. The layout has the following items:. a menu bar with entries : File, Edit, Run, Options and Help;; a toolbar in the upper part where you can issue user commands, change the drawing option and the histogram name, three check buttons Hist, Rec and Scan.HIST toggles histogram drawing mode, REC enables recording of the last command issued and SCAN enables redirecting of TTree::Scan command in an ASCII file (see -Scanning expressions-);; a button bar in the lower part with : buttons DRAW/STOP that issue histogram drawing and stop the current command respectively, two text widgets where input and output event lists can be specified, a message box and a RESET button on the right that clear edited expression content (see Editing...); a tree-type list on the main left panel where you can select among trees or branches. The tree/branch will be detailed in the right panel. Mapped trees are provided with context menus, activated by right-clicking;; a view-type list on the right panel. The first column contain X, Y and Z expression items, an optional cut and ten optional editable expressions. Expressions and leaf-type items can be dragged or deleted. A right click on the list-box or item activates context menus. Opening a new tree and saving a session :; To open a new tree in the viewer use <File/Open tree file> menu The content of the file (keys) will be listed. Use <SetTreeName> function from the context menu of the right panel, entering a tree name among those listed.; To save",MatchSource.WIKI,doc/master/classTTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html
Energy Efficiency,adapt,adapted,". ROOT: TTreeViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TTreeViewer Class Reference. ; A graphic user interface designed to handle ROOT trees and to take advantage of TTree class features. ; It uses ROOT native GUI widgets adapted for ""drag and drop"" functionality. in the same session. The following capabilities are making the viewer a helpful tool for analysis:. several trees may be opened in the same session;; branches and leaves can be easily browsed or scanned;; fast drawing of branch expressions by double-clicking;; new variables/selections easy to compose with the built-in editor;; histograms can be composed by dragging leaves or user-defined expressions to X, Y and Z axis items;; the tree entries to be processed can be selected with a double slider;; selections can be defined and activated by dragging them to the 'Cut' item;; all expressions can be aliased and aliases can be used in composing others;; input/output event lists easy to handle;; menu with histogram drawing options;; user commands may be executed within the viewer and the current command can be echoed;; current 'Draw' event loop is reflected by a progress bar and may be interrupted by the user;; all widgets have self-explaining tool tips and/or context menus;; expressions/leaves can be dragged to a 'scan box' and scanned by double-clicking this item. The result can be redirected to an ASCII file;. The layout has the following items:. a menu bar with entries : File, Edit, Run, Options and Help;; a toolbar in the upper part where you can issue user commands, change the drawing option and the histogram name, three check buttons Hist, Rec and Scan.HIST toggles histogram drawing mode, REC enables recording of the last command issued and SCAN enables redirecting of TTree::Scan command",MatchSource.WIKI,doc/master/classTTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html
Integrability,interface,interface,". ROOT: TTreeViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TTreeViewer Class Reference. ; A graphic user interface designed to handle ROOT trees and to take advantage of TTree class features. ; It uses ROOT native GUI widgets adapted for ""drag and drop"" functionality. in the same session. The following capabilities are making the viewer a helpful tool for analysis:. several trees may be opened in the same session;; branches and leaves can be easily browsed or scanned;; fast drawing of branch expressions by double-clicking;; new variables/selections easy to compose with the built-in editor;; histograms can be composed by dragging leaves or user-defined expressions to X, Y and Z axis items;; the tree entries to be processed can be selected with a double slider;; selections can be defined and activated by dragging them to the 'Cut' item;; all expressions can be aliased and aliases can be used in composing others;; input/output event lists easy to handle;; menu with histogram drawing options;; user commands may be executed within the viewer and the current command can be echoed;; current 'Draw' event loop is reflected by a progress bar and may be interrupted by the user;; all widgets have self-explaining tool tips and/or context menus;; expressions/leaves can be dragged to a 'scan box' and scanned by double-clicking this item. The result can be redirected to an ASCII file;. The layout has the following items:. a menu bar with entries : File, Edit, Run, Options and Help;; a toolbar in the upper part where you can issue user commands, change the drawing option and the histogram name, three check buttons Hist, Rec and Scan.HIST toggles histogram drawing mode, REC enables recording of the last command issued and SCAN enables redirecting of TTree::Scan command",MatchSource.WIKI,doc/master/classTTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html
Modifiability,adapt,adapted,". ROOT: TTreeViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TTreeViewer Class Reference. ; A graphic user interface designed to handle ROOT trees and to take advantage of TTree class features. ; It uses ROOT native GUI widgets adapted for ""drag and drop"" functionality. in the same session. The following capabilities are making the viewer a helpful tool for analysis:. several trees may be opened in the same session;; branches and leaves can be easily browsed or scanned;; fast drawing of branch expressions by double-clicking;; new variables/selections easy to compose with the built-in editor;; histograms can be composed by dragging leaves or user-defined expressions to X, Y and Z axis items;; the tree entries to be processed can be selected with a double slider;; selections can be defined and activated by dragging them to the 'Cut' item;; all expressions can be aliased and aliases can be used in composing others;; input/output event lists easy to handle;; menu with histogram drawing options;; user commands may be executed within the viewer and the current command can be echoed;; current 'Draw' event loop is reflected by a progress bar and may be interrupted by the user;; all widgets have self-explaining tool tips and/or context menus;; expressions/leaves can be dragged to a 'scan box' and scanned by double-clicking this item. The result can be redirected to an ASCII file;. The layout has the following items:. a menu bar with entries : File, Edit, Run, Options and Help;; a toolbar in the upper part where you can issue user commands, change the drawing option and the histogram name, three check buttons Hist, Rec and Scan.HIST toggles histogram drawing mode, REC enables recording of the last command issued and SCAN enables redirecting of TTree::Scan command",MatchSource.WIKI,doc/master/classTTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html
Performance,load,load,"nt of TTree::Process();; SaveSource : save the current session as a C++ macro;; SetScanFileName : define a name for the file where TTree::Scan command is redirected when the <Scan> button is checked;; SetTreeName : open a new tree with this name in the viewer;. A specific context menu is activated if expressions/leaves are right-clicked.; Commands are :; Draw : draw a histogram for this item;; EditExpression : pops-up the expression editor;; Empty : empty the name and alias of this item;; RemoveItem : removes clicked item from the list;; Scan : scan this expression;; SetExpression : edit name and alias for this item by hand;. Starting the viewer. From the TBrowser: Select a tree in the TBrowser, then call the StartViewer() method from its context menu (right-click on the tree).; From the command line: Start a ROOT session in the directory where you have your tree. You will need first to load the library for TTreeViewer and optionally other libraries for user defined classes (you can do this later in the session) : root [0] gSystem->Load(\""TTreeViewer\"");; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; Supposing you have the tree MyTree in the file MyFile, you can do : root [1] TFile file(""Myfile"");; root [2] new TTreeViewer(""Mytree"");; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features.Definition TTreeViewer.h:54; or : root [2] TTreeViewer *tv = new TTreeViewer();; root [3] tv->SetTreeName(""Mytree"");; . Definition at line 54 of file TTreeViewer.h. Public Types; enum  EListItemType { ;   kLTNoType = 0; , kLTPackType = (1ULL << ( 0 )); , kLTTreeType = (1ULL << ( 1 )); , kLTBranchType = (1ULL << ( 2 )); , ;   kLTLeafType = (1U",MatchSource.WIKI,doc/master/classTTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html
Security,hash,hash," * GetName () const override;  Return unique name, used in SavePrimitive methods. ;  ; const TGWindow * GetParent () const;  ; virtual Bool_t HandleExpose (Event_t *event);  ; virtual Bool_t HandleIdleEvent (TGIdleHandler *);  ; virtual void IconifyWindow ();  iconify window ;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html
Usability,progress bar,progress bar,"  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TTreeViewer Class Reference. ; A graphic user interface designed to handle ROOT trees and to take advantage of TTree class features. ; It uses ROOT native GUI widgets adapted for ""drag and drop"" functionality. in the same session. The following capabilities are making the viewer a helpful tool for analysis:. several trees may be opened in the same session;; branches and leaves can be easily browsed or scanned;; fast drawing of branch expressions by double-clicking;; new variables/selections easy to compose with the built-in editor;; histograms can be composed by dragging leaves or user-defined expressions to X, Y and Z axis items;; the tree entries to be processed can be selected with a double slider;; selections can be defined and activated by dragging them to the 'Cut' item;; all expressions can be aliased and aliases can be used in composing others;; input/output event lists easy to handle;; menu with histogram drawing options;; user commands may be executed within the viewer and the current command can be echoed;; current 'Draw' event loop is reflected by a progress bar and may be interrupted by the user;; all widgets have self-explaining tool tips and/or context menus;; expressions/leaves can be dragged to a 'scan box' and scanned by double-clicking this item. The result can be redirected to an ASCII file;. The layout has the following items:. a menu bar with entries : File, Edit, Run, Options and Help;; a toolbar in the upper part where you can issue user commands, change the drawing option and the histogram name, three check buttons Hist, Rec and Scan.HIST toggles histogram drawing mode, REC enables recording of the last command issued and SCAN enables redirecting of TTree::Scan command in an ASCII file (see -Scanning expressions-);; a button bar in the lower ",MatchSource.WIKI,doc/master/classTTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html
Performance,cache,cache,"terIterator (TTree *tree, Long64_t firstEntry);  Regular constructor. ;  . Private Member Functions; Long64_t GetEstimatedClusterSize ();  Estimate the cluster size. ;  . Private Attributes; Int_t fClusterRange;  ; Long64_t fEstimatedSize;  ; Long64_t fNextEntry;  ; Long64_t fStartEntry;  ; TTree * fTree;  . Friends; class TTree;  . #include <TTree.h>; Constructor & Destructor Documentation. ◆ TClusterIterator(). TTree::TClusterIterator::TClusterIterator ; (; TTree * ; tree, . Long64_t ; firstEntry . ). protected . Regular constructor. ; TTree is not set as const, since we might modify if it is a TChain. ; Definition at line 560 of file TTree.cxx. Member Function Documentation. ◆ GetEstimatedClusterSize(). Long64_t TTree::TClusterIterator::GetEstimatedClusterSize ; (; ). private . Estimate the cluster size. ; In almost all cases, this quickly returns the size of the auto-flush in the TTree.; However, in the case where the cluster size was not fixed (old files and case where autoflush was explicitly set to zero), we need estimate a cluster size in relation to the size of the cache.; After this value is calculated once for the TClusterIterator, it is cached and reused in future calls. ; Definition at line 611 of file TTree.cxx. ◆ GetNextEntry(). Long64_t TTree::TClusterIterator::GetNextEntry ; (; ). inline . Definition at line 307 of file TTree.h. ◆ GetStartEntry(). Long64_t TTree::TClusterIterator::GetStartEntry ; (; ). inline . Definition at line 302 of file TTree.h. ◆ Next(). Long64_t TTree::TClusterIterator::Next ; (; ). Move on to the next cluster and return the starting entry of this next cluster. ; Definition at line 650 of file TTree.cxx. ◆ operator()(). Long64_t TTree::TClusterIterator::operator() ; (; ). inline . Definition at line 311 of file TTree.h. ◆ Previous(). Long64_t TTree::TClusterIterator::Previous ; (; ). Move on to the previous cluster and return the starting entry of this previous cluster. ; Definition at line 694 of file TTree.cxx. Friends And ",MatchSource.WIKI,doc/master/classTTree_1_1TClusterIterator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTree_1_1TClusterIterator.html
Availability,error,error," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTUBE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTUBE.html
Energy Efficiency,allocate,allocate,"sion_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions;  TTUBE (const TTUBE &);  Table of cos(fPhi1) .... cos(fPhil+fDphi1) ;  ; virtual void MakeTableOfCoSin () const;  Make table of sine and cosine. ;  ; TTUBE & operator= (const TTUBE &);  assignment operator ;  ; void SetPoints (Double_t *points) const override;  Create TUBE points. ;  ; virtual void SetSegsAndPols (TBuffer3D &buffer) const;  Set segments and polygons. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fAspectRatio;  ; Double_t * fCoTab;  Table of sin(fPhi1) .... sin(fPhil+fDphi1) ;  ; Float_t fDz;  ; Int_t fNdiv;  ; Float_t fRmax;  ; Float_t fRmin;  ; Double_t * fSiTab;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ; ",MatchSource.WIKI,doc/master/classTTUBE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTUBE.html
Integrability,message,message," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTUBE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTUBE.html
Modifiability,inherit,inherited," Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetDz () const;  ; virtual Int_t GetNdiv () const;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetRmax () const;  ; virtual Float_t GetRmin () const;  ; TClass * IsA () const override;  ; virtual void SetAspectRatio (Float_t factor=1);  ; virtual void SetNumberOfDivisions (Int_t ndiv);  Set number of divisions used to draw this tube. ;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) override;  Stream an object of class TTUBE. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TShape;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *material);  Shape normal constructor. ;  ;  TShape (const TShape &);  copy constructor ;  ;  ~TShape () override;  Shape default destructor. ;  ; TMaterial * GetMaterial () const;  ; virtual Int_t GetNumber () const;  ; Int_t GetVisibility () const;  ; TShape & operator= (const TShape &);  assignment operator ;  ; void Paint (Option_t *option="""") override;  This method is used only when a shape is painted outside a TNode. ;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; virtual void SetVisibility (Int_t vis);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named",MatchSource.WIKI,doc/master/classTTUBE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTUBE.html
Security,hash,hash,"NVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely a",MatchSource.WIKI,doc/master/classTTUBE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTUBE.html
Usability,simpl,simplified,". ROOT: TTUBE Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TTUBE Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A tube. . It has 6 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); rmin: inside radius; rmax: outside radius; dz: half length in z . Definition at line 32 of file TTUBE.h. Public Member Functions;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetDz () const;  ; virtual Int_t GetNdiv () const;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetRmax () const;  ; virtual Float_t GetRmin () const;  ; TClass * IsA () const override;  ; virtual void SetAspectRatio (Float_t factor=1);  ; virtual void SetNumberOfDivisions (Int_t ndiv);  Set number of divisions used to draw this tube. ;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) override;  Stream an object of class TTUBE. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TShape;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *mat",MatchSource.WIKI,doc/master/classTTUBE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTUBE.html
Availability,error,error," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTUBS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTUBS.html
Energy Efficiency,allocate,allocate,"lFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void MakeTableOfCoSin () const override;  Make table of sine and cosine. ;  ; void SetPoints (Double_t *points) const override;  Create TUBS points. ;  ;  Protected Member Functions inherited from TTUBE;  TTUBE (const TTUBE &);  Table of cos(fPhi1) .... cos(fPhil+fDphi1) ;  ; TTUBE & operator= (const TTUBE &);  assignment operator ;  ; virtual void SetSegsAndPols (TBuffer3D &buffer) const;  Set segments and polygons. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fPhi1;  ; Float_t fPhi2;  ;  Protected Attributes inherited from TTUBE; Float_t fAspectRatio;  ; Double_t * fCoTab;  Table of sin(fPhi1) .... sin(fPhil+fDphi1) ;  ; Float_t fDz;  ; Int_t fNdiv;  ; Float_t fRmax;  ; Float_t fRmin;  ; Double_t * fSiTab;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAt",MatchSource.WIKI,doc/master/classTTUBS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTUBS.html
Integrability,message,message," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTUBS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTUBS.html
Modifiability,inherit,inherited,"BS ();  TUBS shape default constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape ""simplified"" constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape normal constructor. ;  ;  ~TTUBS () override;  TUBS shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetPhi1 () const;  ; virtual Float_t GetPhi2 () const;  ; TClass * IsA () const override;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) override;  Stream an object of class TTUBE. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; virtual Float_t GetAspectRatio () const;  ; virtual Float_t GetDz () const;  ; virtual Int_t GetNdiv () const;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetRmax () const;  ; virtual Float_t GetRmin () const;  ; virtual void SetAspectRatio (Float_t factor=1);  ; virtual void SetNumberOfDivisions (Int_t ndiv);  Set number of divisions used to draw this tube. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TShape;  TShape ();  Shape default constructor. ;  ;  TShape (",MatchSource.WIKI,doc/master/classTTUBS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTUBS.html
Security,hash,hash,"NVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely a",MatchSource.WIKI,doc/master/classTTUBS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTUBS.html
Usability,simpl,simplified,". ROOT: TTUBS Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TTUBS Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A segment of a tube. . It has 8 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); rmin: inside radius; rmax: outside radius; dz: half length in z; phi1: starting angle of the segment; phi2: ending angle of the segment. NOTE: phi1 should be smaller than phi2. If this is not the case, the system adds 360 degrees to phi2. ; Definition at line 29 of file TTUBS.h. Public Member Functions;  TTUBS ();  TUBS shape default constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape ""simplified"" constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape normal constructor. ;  ;  ~TTUBS () override;  TUBS shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetPhi1 () const;  ; virtual Float_t GetPhi2 () const;  ; TClass * IsA () const override;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) override;  Stream an object of class TTUBE. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (co",MatchSource.WIKI,doc/master/classTTUBS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTUBS.html
Availability,down,down,"t TGWindow *p, UInt_t w, UInt_t h, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a list view container. ;  ;  TGLVContainer (TGCanvas *p, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a list view container. ;  ;  ~TGLVContainer () override;  Delete list view container. ;  ; virtual void AddItem (TGLVEntry *item);  ; const char * GetHeader (Int_t idx) const;  ; TGListView * GetListView () const;  ; virtual TGDimension GetMaxItemSize () const;  Get size of largest item in container. ;  ; virtual Int_t GetMaxSubnameWidth (Int_t idx) const;  Get width of largest subname in container. ;  ; Bool_t GetMultipleSelection () const;  ; TGDimension GetPageDimension () const override;  Returns page dimension. ;  ; TList * GetSelectedEntries ();  Get list of selected items in container. ;  ; TList * GetSelectedItems ();  Get list of selected items in container. ;  ; EListViewMode GetViewMode () const;  ; TClass * IsA () const override;  ; void LineDown (Bool_t select=kFALSE) override;  Move one line down. ;  ; void LineLeft (Bool_t select=kFALSE) override;  Move current position one column left. ;  ; void LineRight (Bool_t select=kFALSE) override;  Move current position one column right. ;  ; void LineUp (Bool_t select=kFALSE) override;  Make current position first line in window by scrolling up. ;  ; virtual void RemoveItemWithData (void *userData);  Remove item with fUserData == userData from container. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a list view container as a C++ statement(s) on output stream out. ;  ; virtual void SelectEntry (TGLVEntry *item);  Select the TGLVEntry given as argument and de-select the previous one if the container is not in multi-selection mode. ;  ; virtual void SetColHeaders (const char *n1="""", const char *n2="""", const char *n3="""", const char *n4="""", const char *n5="""", const char *n6="""", const char *n7="""", const char *n8="""", const char *n9=""""",MatchSource.WIKI,doc/master/classTTVLVContainer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVLVContainer.html
Integrability,message,message,"d DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ;  ; virtual Bool_t HandleSelectionClear (Event_t *);  ; virtual Bool_t HandleSelectionRequest (Event_t *);  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; virtual Bool_t IsActive () const;  ; Bool_t IsDNDSource () const;  ; Bool_t IsDNDTarget () const;  ; Bool_t IsEditable () const override;",MatchSource.WIKI,doc/master/classTTVLVContainer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVLVContainer.html
Modifiability,inherit,inherited,"urn the cut entry. ;  ; void EmptyAll ();  Clear all names and aliases for expression type items. ;  ; const char * Ex ();  Return the expression on X. ;  ; TTVLVEntry * ExpressionItem (Int_t index);  Return the expression item at specific position. ;  ; TList * ExpressionList ();  Return the list of user-defined expressions. ;  ; const char * Ey ();  Return the expression on Y. ;  ; const char * Ez ();  Return the expression on Z. ;  ; TTreeViewer * GetViewer ();  ; bool HandleButton (Event_t *event) override;  Handle mouse button event in container. ;  ; bool HandleMotion (Event_t *event) override;  Handle mouse motion events. ;  ; void RemoveNonStatic ();  Remove all non-static items from the list view, except expressions. ;  ; const char * ScanList ();  Return the cut entry. ;  ; void SelectItem (const char *name);  Select an item. ;  ; void SetListView (TGListView *lv) override;  ; void SetViewer (TTreeViewer *viewer);  ;  Public Member Functions inherited from TGLVContainer;  TGLVContainer (const TGWindow *p, UInt_t w, UInt_t h, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a list view container. ;  ;  TGLVContainer (TGCanvas *p, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a list view container. ;  ;  ~TGLVContainer () override;  Delete list view container. ;  ; virtual void AddItem (TGLVEntry *item);  ; const char * GetHeader (Int_t idx) const;  ; TGListView * GetListView () const;  ; virtual TGDimension GetMaxItemSize () const;  Get size of largest item in container. ;  ; virtual Int_t GetMaxSubnameWidth (Int_t idx) const;  Get width of largest subname in container. ;  ; Bool_t GetMultipleSelection () const;  ; TGDimension GetPageDimension () const override;  Returns page dimension. ;  ; TList * GetSelectedEntries ();  Get list of selected items in container. ;  ; TList * GetSelectedItems ();  Get list of selected items in container. ;  ; EListViewMode GetViewMode () const;  ; TClass * IsA",MatchSource.WIKI,doc/master/classTTVLVContainer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVLVContainer.html
Security,expose,expose,"UE);  Find frame located int container at position x,y. ;  ; virtual TGFrame * FindFrameByName (const char *name);  Find frame by name. ;  ; virtual void * FindItem (const TString &name, Bool_t direction=kTRUE, Bool_t caseSensitive=kTRUE, Bool_t subString=kFALSE);  ; TGCanvas * GetCanvas () const;  ; virtual TGHScrollBar * GetHScrollbar () const;  returns pointer to hor. scroll bar ;  ; virtual TGFrame * GetLastActive () const;  ; const TGWindow * GetMessageWindow () const;  ; virtual const TGFrame * GetNextSelected (void **current);  Return the next selected item. ;  ; const TGPicture * GetObjPicture (TGFrame *f);  Retrieve icons associated with class ""name"". ;  ; virtual TGPosition GetPagePosition () const;  Returns page position. ;  ; virtual TGVScrollBar * GetVScrollbar () const;  returns pointer to vert. scroll bar ;  ; Bool_t HandleDNDFinished () override;  ; Bool_t HandleDoubleClick (Event_t *event) override;  Handle double click mouse event. ;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose events. Do not use double buffer. ;  ; Bool_t HandleKey (Event_t *event) override;  The key press event handler converts a key press to some line editor action. ;  ; virtual void Home (Bool_t select=kFALSE);  Move to upper-left corner of container. ;  ; virtual void InvertSelection ();  Invert the selection, all selected items become unselected and vice versa. ;  ; virtual void KeyPressed (TGFrame *, UInt_t keysym, UInt_t mask);  Signal emitted when keyboard key pressed. ;  ; void Layout () override;  Layout container entries. ;  ; virtual Int_t NumItems () const;  ; virtual Int_t NumSelected () const;  ; virtual void OnMouseOver (TGFrame *);  Signal emitted when pointer is over entry. ;  ; virtual void PageDown (Bool_t select=kFALSE);  Move position one page down. ;  ; virtual void PageUp (Bool_t select=kFALSE);  Move position one page up. ;  ; void RemoveAll () override;  Remove all items from the container. ;  ; virtual void RemoveItem (TGFrame *item); ",MatchSource.WIKI,doc/master/classTTVLVContainer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVLVContainer.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTVLVEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVLVEntry.html
Integrability,message,message,"heritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleButton (Event_t *);  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event_t *event) override;  Ha",MatchSource.WIKI,doc/master/classTTVLVEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVLVEntry.html
Modifiability,inherit,inherited," * GetContainer ();  ; TGItemContext * GetContext ();  ; const char * GetConvName ();  ; TGToolTip * GetTip ();  ; const char * GetTrueName ();  ; bool HandleCrossing (Event_t *event) override;  Handle mouse crossing event. ;  ; bool HasAlias ();  Check if alias name is not empty. ;  ; bool IsCut ();  ; void PrependTilde ();  Prepend a ~ to item alias. ;  ; void SetAlias (const char *alias);  ; void SetCutType (bool type=false);  Set cut type. ;  ; void SetExpression (const char *name, const char *alias, bool cutType=false);  Set the true name, alias and type of the expression, then refresh it. ;  ; void SetItemName (const char *name);  Redraw this entry with new name. ;  ; void SetSmallPic (const TGPicture *spic);  Set small picture. ;  ; void SetToolTipText (const char *text, Long_t delayms=1000);  Set tool tip text associated with this item. ;  ; void SetTrueName (const char *name);  ;  Public Member Functions inherited from TGLVEntry;  TGLVEntry (const TGLVContainer *p, const TString &name, const TString &cname, TGString **subnames=nullptr, UInt_t options=kChildFrame, Pixel_t back=GetWhitePixel());  Create a list view item. ;  ;  TGLVEntry (const TGWindow *p=nullptr, const TGPicture *bigpic=nullptr, const TGPicture *smallpic=nullptr, TGString *name=nullptr, TGString **subnames=nullptr, EListViewMode ViewMode=kLVDetails, UInt_t options=kChildFrame, Pixel_t back=GetWhitePixel());  Create a list view item. ;  ;  ~TGLVEntry () override;  Delete a list view item. ;  ; void Activate (Bool_t a) override;  Make list view item active. ;  ; void DrawCopy (Handle_t id, Int_t x, Int_t y) override;  Draw list view item in other window. ;  ; TGDimension GetDefaultSize () const override;  Get default size of list item. ;  ; TGString * GetItemName () const;  ; const TGPicture * GetPicture () const;  ; virtual TGString * GetSubname (Int_t idx) const;  ; virtual TGString ** GetSubnames () const;  ; virtual Int_t GetSubnameWidth (Int_t idx) const;  ; const char * GetTitle () const ",MatchSource.WIKI,doc/master/classTTVLVEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVLVEntry.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTTVLVEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVLVEntry.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTVRecord.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVRecord.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTVRecord.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVRecord.html
Modifiability,inherit,inherited,"Code () const;  ; const char * GetX () const;  ; const char * GetY () const;  ; const char * GetZ () const;  ; bool HasUserCode () const;  ; TClass * IsA () const override;  ; bool MustExecuteCode () const;  ; void PlugIn (TTreeViewer *tv);  Change treeviewer status to this record. ;  ; void SaveSource (std::ofstream &out);  Save the TTVRecord in a C++ macro file. ;  ; void SetAutoexec (bool autoexec=true);  ; void SetCut (const char *cut="""", const char *cal=""-empty-"");  ; void SetName (const char *name="""");  ; void SetOption (const char *option="""");  ; void SetRC (bool redirect=false, bool cut=true);  ; void SetUserCode (const char *code, bool autoexec=true);  ; void SetX (const char *x="""", const char *xal=""-empty-"");  ; void SetY (const char *y="""", const char *yal=""-empty-"");  ; void SetZ (const char *z="""", const char *zal=""-empty-"");  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTTVRecord.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVRecord.html
Security,hash,hash,"xecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTTVRecord.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVRecord.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTVSession.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVSession.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTTVSession.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVSession.html
Modifiability,inherit,inherited,"erride;  Destructor. ;  ; TTVRecord * AddRecord (bool fromFile=false);  Add a record. ;  ; TTVRecord * First ();  ; TTVRecord * GetCurrent ();  ; Int_t GetEntries ();  ; const char * GetName () const override;  Returns name of object. ;  ; TTVRecord * GetRecord (Int_t i);  Return record at index i. ;  ; TClass * IsA () const override;  ; TTVRecord * Last ();  ; TTVRecord * Next ();  ; TTVRecord * Previous ();  ; void RemoveLastRecord ();  Remove current record from list. ;  ; void SaveSource (std::ofstream &out);  Save the TTVSession in a C++ macro file. ;  ; void SetName (const char *name);  ; void SetRecordName (const char *name);  Set record name. ;  ; void Show (TTVRecord *rec);  Display record rec. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateRecord (const char *name);  Updates current record according to new X, Y, Z settings. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTTVSession.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVSession.html
Security,hash,hash,"xecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTTVSession.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTTVSession.html
Availability,error,error," ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TUDPSocket (const char *host, const char *service);  Create a socket. ;  ;  TUDPSocket (const char *host, Int_t port);  Create a socket; see CreateAuthSocket for the form of url. ;  ;  TUDPSocket (const char *sockpath);  Create a socket in the Unix domain on 'sockpath'. ;  ;  TUDPSocket (const TUDPSocket &s);  TUDPSocket copy ctor. ;  ;  TUDPSocket (Int_t descriptor);  Create a socket. ;  ;  TUDPSocket (Int_t descriptor, const char *sockpath);  Create a socket. ;  ;  TUDPSocket (TInetAddress address, const char *service);  Create a socket. ;  ;  TUDPSocket (TInetAddress address, Int_t port);  Create a socket. ;  ; virtual ~TUDPSocket ();  ; virtual void Close (Option_t *opt="""");  Close the socket. ;  ; UInt_t GetBytesRecv () const;  ; UInt_t GetBytesSent () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Int_t GetDescriptor () const;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetInetAddress () const;  ; TTimeStamp GetLastUsage ();  ; virtual TInetAddress GetLocalInetAddress ();  Return internet address of local host to which the socket is bound. ;  ; virtual Int_t GetLocalPort ();  Return the local port # to which the socket is bound. ;  ; virtual Int_t GetOption (ESockOptions opt, Int_t &val);  Get socket options. Returns -1 in case of error. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Recv (char *mess, Int_t max);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (char *mess, Int_t max,",MatchSource.WIKI,doc/master/classTUDPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html
Integrability,message,message,"ort);  Create a socket. ;  ; virtual ~TUDPSocket ();  ; virtual void Close (Option_t *opt="""");  Close the socket. ;  ; UInt_t GetBytesRecv () const;  ; UInt_t GetBytesSent () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Int_t GetDescriptor () const;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetInetAddress () const;  ; TTimeStamp GetLastUsage ();  ; virtual TInetAddress GetLocalInetAddress ();  Return internet address of local host to which the socket is bound. ;  ; virtual Int_t GetLocalPort ();  Return the local port # to which the socket is bound. ;  ; virtual Int_t GetOption (ESockOptions opt, Int_t &val);  Get socket options. Returns -1 in case of error. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Recv (char *mess, Int_t max);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (char *mess, Int_t max, Int_t &kind);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (Int_t &status, Int_t &kind);  Receives a status and a message type. ;  ; virtual Int_t Recv (TMessage *&mess);  Receive a TMessage object. ;  ; virtual Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Receive a raw buffer of specified length bytes. ;  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to change status. ;  ; virtual Int_t Send (const char *mess, Int_t kind=kMESS_STRING);  Send a character string buffer. ;  ; virtual Int_t Send (const TMessage &mess);  Send a TMessage object. ;  ; virtual Int_t Send (Int_t kind);  Send a single message opcode. ;  ; virtual In",MatchSource.WIKI,doc/master/classTUDPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html
Modifiability,inherit,inherited,". ROOT: TUDPSocket Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TUDPSocket Class Reference. . Definition at line 37 of file TUDPSocket.h. Public Types; enum  EInterest { kRead = 1; , kWrite = 2; };  ; enum  EServiceType { kSOCKD; , kROOTD; , kPROOFD; };  ; enum  EStatusBits { kIsUnix = (1ULL << ( 16 )); , kBrokenConn = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TUDPSocket (const char *host, const char *service);  Create a socket. ;  ;  TUDPSocket (const char *host, Int_t port);  Create a socket; see CreateAuthSocket for the form of url. ;  ;  TUDPSocket (const char *sockpath);  Create a socket in the Unix domain on 'sockpath'. ;  ;  TUDPSocket (const TUDPSocket &s);  TUDPSocket copy ctor. ;  ;  TUDPSocket (Int_t descriptor);  Create a socket. ;  ;  TUDPSocket (Int_t descriptor, const char *sockpath);  Create a socket. ;  ;  TUDPSocket (TInetAddress address, const char *service);  Create a socket. ;  ;  TUDPSocket (TInetAddress address, Int_t port);  Create a socket. ;  ; virtual ~TUDPSocket ();  ; virtual void Close (Option_t *opt="""");  Clos",MatchSource.WIKI,doc/master/classTUDPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html
Safety,timeout,timeout,"; virtual Int_t GetOption (ESockOptions opt, Int_t &val);  Get socket options. Returns -1 in case of error. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Recv (char *mess, Int_t max);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (char *mess, Int_t max, Int_t &kind);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (Int_t &status, Int_t &kind);  Receives a status and a message type. ;  ; virtual Int_t Recv (TMessage *&mess);  Receive a TMessage object. ;  ; virtual Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Receive a raw buffer of specified length bytes. ;  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to change status. ;  ; virtual Int_t Send (const char *mess, Int_t kind=kMESS_STRING);  Send a character string buffer. ;  ; virtual Int_t Send (const TMessage &mess);  Send a TMessage object. ;  ; virtual Int_t Send (Int_t kind);  Send a single message opcode. ;  ; virtual Int_t Send (Int_t status, Int_t kind);  Send a status and a single message opcode. ;  ; virtual Int_t SendObject (const TObject *obj, Int_t kind=kMESS_OBJECT);  Send an object. ;  ; virtual Int_t SendRaw (const void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Send a raw buffer of specified length. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaul",MatchSource.WIKI,doc/master/classTUDPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html
Security,hash,hash," an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Touch ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTUDPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html
Availability,avail,available,"ons A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfold has an adjustable regularisation term and also supports an optional constraint on the total number of events.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfold. TUnfoldDensity adds various features to TUnfold, such as: background subtraction, propagation of systematic uncertainties, complex multidimensional arrangements of the bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfold are the getter functions. For TUnfold, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfold: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Basic formulae:; χ2A=(Ax-y)TVyy-1(Ax-y); χ2L=(x-f*x0)TLTL(x-f*x0); χ2unf=χ2A+τ2χ2L+λΣi(Ax-y)i; x:result, A:probabilities, y:data, Vyy:data covariance, f:bias scale, x0:bias, L:regularisation conditions, τ:regularisation strength, λ:Lagrangian multiplier; Without area constraint, λ is set to zero, and χ2unf is minimized to determine x. With area constraint, both x and λ are determined. ; Definition at line 107 of file TUnfold.h. Public Types; enum  EConstraint",MatchSource.WIKI,doc/master/classTUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfold.html
Deployability,update,updates,"ons A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfold has an adjustable regularisation term and also supports an optional constraint on the total number of events.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfold. TUnfoldDensity adds various features to TUnfold, such as: background subtraction, propagation of systematic uncertainties, complex multidimensional arrangements of the bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfold are the getter functions. For TUnfold, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfold: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Basic formulae:; χ2A=(Ax-y)TVyy-1(Ax-y); χ2L=(x-f*x0)TLTL(x-f*x0); χ2unf=χ2A+τ2χ2L+λΣi(Ax-y)i; x:result, A:probabilities, y:data, Vyy:data covariance, f:bias scale, x0:bias, L:regularisation conditions, τ:regularisation strength, λ:Lagrangian multiplier; Without area constraint, λ is set to zero, and χ2unf is minimized to determine x. With area constraint, both x and λ are determined. ; Definition at line 107 of file TUnfold.h. Public Types; enum  EConstraint",MatchSource.WIKI,doc/master/classTUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfold.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfold.html
Modifiability,inherit,inherited,"using various GetXXX() methods . Basic formulae:; χ2A=(Ax-y)TVyy-1(Ax-y); χ2L=(x-f*x0)TLTL(x-f*x0); χ2unf=χ2A+τ2χ2L+λΣi(Ax-y)i; x:result, A:probabilities, y:data, Vyy:data covariance, f:bias scale, x0:bias, L:regularisation conditions, τ:regularisation strength, λ:Lagrangian multiplier; Without area constraint, λ is set to zero, and χ2unf is minimized to determine x. With area constraint, both x and λ are determined. ; Definition at line 107 of file TUnfold.h. Public Types; enum  EConstraint { kEConstraintNone =0; , kEConstraintArea =1; };  type of extra constraint More...;  ; enum  EHistMap { kHistMapOutputHoriz = 0; , kHistMapOutputVert = 1; };  arrangement of axes for the response matrix (TH2 histogram) More...;  ; enum  ERegMode { ;   kRegModeNone = 0; , kRegModeSize = 1; , kRegModeDerivative = 2; , kRegModeCurvature = 3; , ;   kRegModeMixed = 4. };  choice of regularisation scheme More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TUnfold (const TH2 *hist_A, EHistMap histmap, ERegMode regmode=kRegModeSize, EConstraint constraint=kEConstraintArea);  Set up response matrix and regularisation scheme. ;  ;  TUnfold (void);  only for use by root streamer or derived classes ;  ;  ~TUnfold (void) override;  ; virtual Double_t DoUnfold (Double_t tau);  perform the unfolding for a given regularisation parameter tau ;  ; Double_t DoUnfold (Double_t tau, const",MatchSource.WIKI,doc/master/classTUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfold.html
Performance,perform,performed,"; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfold. TUnfoldDensity adds various features to TUnfold, such as: background subtraction, propagation of systematic uncertainties, complex multidimensional arrangements of the bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfold are the getter functions. For TUnfold, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfold: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Basic formulae:; χ2A=(Ax-y)TVyy-1(Ax-y); χ2L=(x-f*x0)TLTL(x-f*x0); χ2unf=χ2A+τ2χ2L+λΣi(Ax-y)i; x:result, A:probabilities, y:data, Vyy:data covariance, f:bias scale, x0:bias, L:regularisation conditions, τ:regularisation strength, λ:Lagrangian multiplier; Without area constraint, λ is set to zero, and χ2unf is minimized to determine x. With area constraint, both x and λ are determined. ; Definition at line 107 of file TUnfold.h. Public Types; enum  EConstraint { kEConstraintNone =0; , kEConstraintArea =1; };  type of extra constraint More...;  ; enum  EHistMap { kHistMapOutputHoriz = 0; , kHistMapOutputVert = 1; };  arrangement of axes for the response matrix (TH2 histogram) More...;  ; enum  ERegMode { ;   kRegModeNone = 0; , kRegModeSize = 1; , kRegModeDeriva",MatchSource.WIKI,doc/master/classTUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfold.html
Safety,detect,detector,". ROOT: TUnfold Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TUnfold Class Reference. ; An algorithm to unfold distributions from detector to truth level. ; TUnfold is used to decompose a measurement y into several sources x, given the measurement uncertainties and a matrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfold has an adjustable regularisation term and also supports an optional constraint on the total number of events.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfold. TUnfoldDensity adds various features to TUnfold, such as: background subtraction, propagation of systematic uncertainties, complex multidimensional arrangements of the bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfold are the getter functions. For TUnfold, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfold: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple ti",MatchSource.WIKI,doc/master/classTUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfold.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfold.html
Testability,log,logTauX,"ss * IsA () const override;  ; Int_t RegularizeBins (int start, int step, int nbin, ERegMode regmode);  add regularisation conditions for a group of bins ;  ; Int_t RegularizeBins2D (int start_bin, int step1, int nbin1, int step2, int nbin2, ERegMode regmode);  add regularisation conditions for 2d unfolding ;  ; Int_t RegularizeCurvature (int left_bin, int center_bin, int right_bin, Double_t scale_left=1.0, Double_t scale_right=1.0);  add a regularisation condition on the curvature of three truth bin ;  ; Int_t RegularizeDerivative (int left_bin, int right_bin, Double_t scale=1.0);  add a regularisation condition on the difference of two truth bin ;  ; Int_t RegularizeSize (int bin, Double_t scale=1.0);  add a regularisation condition on the magnitude of a truth bin ;  ; virtual Int_t ScanLcurve (Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph **lCurve, TSpline **logTauX=nullptr, TSpline **logTauY=nullptr, TSpline **logTauCurvature=nullptr);  scan the L curve, determine tau and unfold at the final value of tau ;  ; virtual Int_t ScanSURE (Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph **logTauSURE=nullptr, TGraph **df_chi2A=nullptr, TGraph **lCurve=nullptr);  minimize Stein's unbiased risk estimator ""SURE"" using successive calls to DoUnfold at various tau. ;  ; void SetBias (const TH1 *bias);  set bias vector ;  ; void SetConstraint (EConstraint constraint);  set type of area constraint ;  ; void SetEpsMatrix (Double_t eps);  set numerical accuracy for Eigenvalue analysis when inverting matrices with rank problems ;  ; virtual Int_t SetInput (const TH1 *hist_y, Double_t scaleBias=0.0, Double_t oneOverZeroError=0.0, const TH2 *hist_vyy=nullptr, const TH2 *hist_vyy_inv=nullptr);  Define input data for subsequent calls to DoUnfold(tau) ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject cons",MatchSource.WIKI,doc/master/classTUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfold.html
Usability,simpl,simple,". ROOT: TUnfold Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TUnfold Class Reference. ; An algorithm to unfold distributions from detector to truth level. ; TUnfold is used to decompose a measurement y into several sources x, given the measurement uncertainties and a matrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfold has an adjustable regularisation term and also supports an optional constraint on the total number of events.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfold. TUnfoldDensity adds various features to TUnfold, such as: background subtraction, propagation of systematic uncertainties, complex multidimensional arrangements of the bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfold are the getter functions. For TUnfold, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfold: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple ti",MatchSource.WIKI,doc/master/classTUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfold.html
Availability,avail,available,". ROOT: TUnfoldBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TUnfoldBinning Class Reference. ; Binning schemes for use with the unfolding algorithm TUnfoldDensity. ; Binning schemes are used to map analysis bins on a single histogram axis and back. The analysis bins may include unconnected bins (e.g nuisances for background normalisation) or various multidimensional histograms (signal bins, differential background normalisation bins, etc). ; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Functionality; The TUnfoldBinning objects are connected by a tree-like structure. The structure does not hold any data, but is only responsible for arranging the analysis bins in the proper order. Each node of the tree is responsible for a group of bins. That group may consist of . several unconnected bins, each with a dedicated name. . bins organized in a multidimensional distribution, defined by a set of axes. The axes are defined by a number of bins N and by (N+1) bin borders. In addition to the N bins inside there may be an underflow and an overflow bin . Each bin has a ""global"" bin number, which can be found using the GetGlobalBinNumber() methods. The global bin number 0 is reserved and corresponds to the case where no bin is found in the TUnfoldBinning tree.; Use in the analysis; Booking histograms: . Define binning schemes on detector level and on truth level. This can be done using the XML language, use the class TUnfoldBinningXML to read the binning scheme. The TUnfoldBinning objects can be written to a root file, preferentially together with the corresponding histograms. . For Monte Carlo, ",MatchSource.WIKI,doc/master/classTUnfoldBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldBinning.html
Deployability,update,updates,". ROOT: TUnfoldBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TUnfoldBinning Class Reference. ; Binning schemes for use with the unfolding algorithm TUnfoldDensity. ; Binning schemes are used to map analysis bins on a single histogram axis and back. The analysis bins may include unconnected bins (e.g nuisances for background normalisation) or various multidimensional histograms (signal bins, differential background normalisation bins, etc). ; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Functionality; The TUnfoldBinning objects are connected by a tree-like structure. The structure does not hold any data, but is only responsible for arranging the analysis bins in the proper order. Each node of the tree is responsible for a group of bins. That group may consist of . several unconnected bins, each with a dedicated name. . bins organized in a multidimensional distribution, defined by a set of axes. The axes are defined by a number of bins N and by (N+1) bin borders. In addition to the N bins inside there may be an underflow and an overflow bin . Each bin has a ""global"" bin number, which can be found using the GetGlobalBinNumber() methods. The global bin number 0 is reserved and corresponds to the case where no bin is found in the TUnfoldBinning tree.; Use in the analysis; Booking histograms: . Define binning schemes on detector level and on truth level. This can be done using the XML language, use the class TUnfoldBinningXML to read the binning scheme. The TUnfoldBinning objects can be written to a root file, preferentially together with the corresponding histograms. . For Monte Carlo, ",MatchSource.WIKI,doc/master/classTUnfoldBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldBinning.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTUnfoldBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldBinning.html
Modifiability,inherit,inherited,"tograms which are booked have all analysis bins arranged on one axis (global bin number). TUnfoldBinning provides methods to locate the global bin number: . Use the method FindNode() to locate a group of bins (e.g. signal, control distribution, etc) by their name, then: . Use the method GetGlobalBinNumber() to locate a bin in a distribution, then: . Use the TH1::Fill() method and the bin number to fill the appropriate bin in one of the histograms booked above. . Unfolding: Specify the response matrix and the binning schemes when constructing a TUnfoldDensity object. Tell TUnfoldDensity about the data, bakcground, systematic error histograms using the corresponding methods of class TUnfoldDensity. Then run the unfolding. Use the GetXXX() methods to retreive the unfolding results into properly binned multidimensional histograms. ; Definition at line 58 of file TUnfoldBinning.h. Public Types; enum  { MAXDIM =32; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TUnfoldBinning (const char *name=nullptr, Int_t nBins=0, const char *binNames=nullptr);  create a new node without axis ;  ;  TUnfoldBinning (const TAxis &axis, Int_t includeUnderflow, Int_t includeOverflow);  create a new node containing a distribution with one axis ;  ;  ~TUnfoldBinning (void) override;  ; Bool_t AddAxis (const char *name, Int_t nBins, const Double_t *binBorders, Bool_t hasUnderflow, Bo",MatchSource.WIKI,doc/master/classTUnfoldBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldBinning.html
Safety,detect,detector,"owing citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Functionality; The TUnfoldBinning objects are connected by a tree-like structure. The structure does not hold any data, but is only responsible for arranging the analysis bins in the proper order. Each node of the tree is responsible for a group of bins. That group may consist of . several unconnected bins, each with a dedicated name. . bins organized in a multidimensional distribution, defined by a set of axes. The axes are defined by a number of bins N and by (N+1) bin borders. In addition to the N bins inside there may be an underflow and an overflow bin . Each bin has a ""global"" bin number, which can be found using the GetGlobalBinNumber() methods. The global bin number 0 is reserved and corresponds to the case where no bin is found in the TUnfoldBinning tree.; Use in the analysis; Booking histograms: . Define binning schemes on detector level and on truth level. This can be done using the XML language, use the class TUnfoldBinningXML to read the binning scheme. The TUnfoldBinning objects can be written to a root file, preferentially together with the corresponding histograms. . For Monte Carlo, book histograms for the response matrix (detector vs truth level) using the method CreateHistogramOfMigrations() . For data and background, book histograms using the ""detector level"" binning scheme and the method CreateHistogram() . (if required) for the data covarianve matrix, book a histogram using the ""detector level"" binning scheme and the method CreateErrorMatrixHistogram() . For truth histograms, book histograms using the ""truth level"" binning scheme and the method CreateHistogram() . The histograms which are booked have all analysis bins arranged on one axis (global bin number). TUnfoldBinning provides methods to locate the global bin number: . Use the method FindNode() to locate a group of bins (e.g. signal, contro",MatchSource.WIKI,doc/master/classTUnfoldBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldBinning.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTUnfoldBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldBinning.html
Availability,avail,available,". ROOT: TUnfoldBinningXML Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; List of all members ; TUnfoldBinningXML Class Reference. ; XML interfate to binning schemes, for use with the unfolding algorithm TUnfoldDensity. ; Binning schemes are used to map analysis bins on a single histogram axis and back. The analysis bins may include unconnected bins (e.g nuisances for background normalisation) or various multidimensional histograms (signal bins, differential background normalisation bins, etc). ; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Please consult the documentation of the class TUnfoldBinning about how to use binning schemes. This class provides methods to read and write binning schemes in the XML language. There is also a method which writes out a dtd file for validation. Example XML code; The example below encodes two binning schemes, detector and generator. The detecor scheme consists of a single, three-dimensional distribution (pt,eta,discriminator). The generator scheme consists of two two-dimensional distributions, signal and background. ; <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>; <!DOCTYPE TUnfoldBinning SYSTEM ""tunfoldbinning.dtd"">; <TUnfoldBinning>; <BinningNode name=""detector"" firstbin=""1"" factor=""1"">; <BinningNode name=""detectordistribution"" firstbin=""1"" factor=""1"">; ; <Bin repeat=""3"" width=""0.5"" >; <Bin repeat=""3"" width=""1"" >; <Bin width=""2"" >; <Bin width=""3"" >; <Bin location=""overflow"">; ; <Bin repeat=""2"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""4"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""2"" width=""0.5"" >; ; <Bin width=""0.15"" >; <Bin repeat=""2"" width=""0.35"" >; <Bin width=",MatchSource.WIKI,doc/master/classTUnfoldBinningXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldBinningXML.html
Deployability,update,updates,". ROOT: TUnfoldBinningXML Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; List of all members ; TUnfoldBinningXML Class Reference. ; XML interfate to binning schemes, for use with the unfolding algorithm TUnfoldDensity. ; Binning schemes are used to map analysis bins on a single histogram axis and back. The analysis bins may include unconnected bins (e.g nuisances for background normalisation) or various multidimensional histograms (signal bins, differential background normalisation bins, etc). ; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Please consult the documentation of the class TUnfoldBinning about how to use binning schemes. This class provides methods to read and write binning schemes in the XML language. There is also a method which writes out a dtd file for validation. Example XML code; The example below encodes two binning schemes, detector and generator. The detecor scheme consists of a single, three-dimensional distribution (pt,eta,discriminator). The generator scheme consists of two two-dimensional distributions, signal and background. ; <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>; <!DOCTYPE TUnfoldBinning SYSTEM ""tunfoldbinning.dtd"">; <TUnfoldBinning>; <BinningNode name=""detector"" firstbin=""1"" factor=""1"">; <BinningNode name=""detectordistribution"" firstbin=""1"" factor=""1"">; ; <Bin repeat=""3"" width=""0.5"" >; <Bin repeat=""3"" width=""1"" >; <Bin width=""2"" >; <Bin width=""3"" >; <Bin location=""overflow"">; ; <Bin repeat=""2"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""4"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""2"" width=""0.5"" >; ; <Bin width=""0.15"" >; <Bin repeat=""2"" width=""0.35"" >; <Bin width=",MatchSource.WIKI,doc/master/classTUnfoldBinningXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldBinningXML.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTUnfoldBinningXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldBinningXML.html
Modifiability,inherit,inherited,,MatchSource.WIKI,doc/master/classTUnfoldBinningXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldBinningXML.html
Safety,detect,detector,"r Functions |; Protected Member Functions |; Static Protected Member Functions |; List of all members ; TUnfoldBinningXML Class Reference. ; XML interfate to binning schemes, for use with the unfolding algorithm TUnfoldDensity. ; Binning schemes are used to map analysis bins on a single histogram axis and back. The analysis bins may include unconnected bins (e.g nuisances for background normalisation) or various multidimensional histograms (signal bins, differential background normalisation bins, etc). ; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Please consult the documentation of the class TUnfoldBinning about how to use binning schemes. This class provides methods to read and write binning schemes in the XML language. There is also a method which writes out a dtd file for validation. Example XML code; The example below encodes two binning schemes, detector and generator. The detecor scheme consists of a single, three-dimensional distribution (pt,eta,discriminator). The generator scheme consists of two two-dimensional distributions, signal and background. ; <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>; <!DOCTYPE TUnfoldBinning SYSTEM ""tunfoldbinning.dtd"">; <TUnfoldBinning>; <BinningNode name=""detector"" firstbin=""1"" factor=""1"">; <BinningNode name=""detectordistribution"" firstbin=""1"" factor=""1"">; ; <Bin repeat=""3"" width=""0.5"" >; <Bin repeat=""3"" width=""1"" >; <Bin width=""2"" >; <Bin width=""3"" >; <Bin location=""overflow"">; ; <Bin repeat=""2"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""4"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""2"" width=""0.5"" >; ; <Bin width=""0.15"" >; <Bin repeat=""2"" width=""0.35"" >; <Bin width=""0.15"" >; </Axis>; </Axis>; </Axis>; </BinningNode>; </BinningNode>; <BinningNode name=""generator"" firstbin=""1"" factor=""1"">; <BinningNode name=""signal"" firstbin=""1"" factor=""1"">; ; <Bin location",MatchSource.WIKI,doc/master/classTUnfoldBinningXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldBinningXML.html
Security,validat,validation,"Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; List of all members ; TUnfoldBinningXML Class Reference. ; XML interfate to binning schemes, for use with the unfolding algorithm TUnfoldDensity. ; Binning schemes are used to map analysis bins on a single histogram axis and back. The analysis bins may include unconnected bins (e.g nuisances for background normalisation) or various multidimensional histograms (signal bins, differential background normalisation bins, etc). ; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Please consult the documentation of the class TUnfoldBinning about how to use binning schemes. This class provides methods to read and write binning schemes in the XML language. There is also a method which writes out a dtd file for validation. Example XML code; The example below encodes two binning schemes, detector and generator. The detecor scheme consists of a single, three-dimensional distribution (pt,eta,discriminator). The generator scheme consists of two two-dimensional distributions, signal and background. ; <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>; <!DOCTYPE TUnfoldBinning SYSTEM ""tunfoldbinning.dtd"">; <TUnfoldBinning>; <BinningNode name=""detector"" firstbin=""1"" factor=""1"">; <BinningNode name=""detectordistribution"" firstbin=""1"" factor=""1"">; ; <Bin repeat=""3"" width=""0.5"" >; <Bin repeat=""3"" width=""1"" >; <Bin width=""2"" >; <Bin width=""3"" >; <Bin location=""overflow"">; ; <Bin repeat=""2"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""4"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""2"" width=""0.5"" >; ; <Bin width=""0.15"" >; <Bin repeat=""2"" width=""0.35"" >; <Bin width=""0.15"" >; </Axis>; </Axis>; </Axis>; </BinningNode>; </BinningNode>; <BinningNode name=""generator"" firstbin=""1"" fac",MatchSource.WIKI,doc/master/classTUnfoldBinningXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldBinningXML.html
Availability,avail,available,"d distributions from detector to truth level. ; TUnfoldDensity is used to decompose a measurement y into several sources x, given the measurement uncertainties, background b and a matrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfoldDensity has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties. Complex, multidimensional arrangements of signal and background bins are managed with the help of the class TUnfoldBinning.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys:. Set up binning schemes for the truth and measured distributions. The binning schemes may be coded in the XML language, for reading use TUnfoldBinningXML. . A matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . A vector of measurements is given as one-dimensional histogram using the SetInput() method . Repeated calls to SubtractBackground() to specify background sources . Repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . or multiple times in a scan to determine the best chouce of tau, method ScanTau() . Unfolding results are retrieved using various GetXXX() methods . A detailed documentation of the various GetXXX() methods to control systematic u",MatchSource.WIKI,doc/master/classTUnfoldDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html
Deployability,update,updates,"d distributions from detector to truth level. ; TUnfoldDensity is used to decompose a measurement y into several sources x, given the measurement uncertainties, background b and a matrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfoldDensity has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties. Complex, multidimensional arrangements of signal and background bins are managed with the help of the class TUnfoldBinning.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys:. Set up binning schemes for the truth and measured distributions. The binning schemes may be coded in the XML language, for reading use TUnfoldBinningXML. . A matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . A vector of measurements is given as one-dimensional histogram using the SetInput() method . Repeated calls to SubtractBackground() to specify background sources . Repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . or multiple times in a scan to determine the best chouce of tau, method ScanTau() . Unfolding results are retrieved using various GetXXX() methods . A detailed documentation of the various GetXXX() methods to control systematic u",MatchSource.WIKI,doc/master/classTUnfoldDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html
Energy Efficiency,monitor,monitoring,". protected . regularize the distribution fof the given node ; Parameters. [in]binningcurrent node ; [in]regmoderegularisation mode ; [in]densityModetype of regularisation scaling ; [in]axisSteeringdetailed steering for the axes of the distribution . Definition at line 424 of file TUnfoldDensity.cxx. ◆ ScanTau(). Int_t TUnfoldDensity::ScanTau ; (; Int_t ; nPoint, . Double_t ; tauMin, . Double_t ; tauMax, . TSpline ** ; scanResult, . Int_t ; mode = kEScanTauRhoAvg, . const char * ; distribution = nullptr, . const char * ; axisSteering = nullptr, . TGraph ** ; lCurvePlot = nullptr, . TSpline ** ; logTauXPlot = nullptr, . TSpline ** ; logTauYPlot = nullptr . ). virtual . scan a function wrt tau and determine the minimum ; Parameters. [in]nPointnumber of points to be scanned ; [in]tauMinsmallest tau value to study ; [in]tauMaxlargest tau value to study ; [out]scanResultthe scanned function wrt log(tau) ; [in]mode1st parameter for the scan function ; [in]distribution2nd parameter for the scan function ; [in]projectionMode3rd parameter for the scan function ; [out]lCurvePlotfor monitoring, shows the L-curve ; [out]logTauXPlotfor monitoring, L-curve(X) as a function of log(tau) ; [out]logTauYPlotfor monitoring, L-curve(Y) as a function of log(tau). Return value: the coordinate number on the curve scanResult which corresponds to the minimum ; The function is scanned by repeating the following steps nPoint times . Choose a value of tau . Perform the unfolding for this choice of tau, DoUnfold(tau) . Determinethe scan variable GetScanVariable() . The method GetScanVariable() defines scans of correlation coefficients, where mode is chosen from the enum EScanTauMode. In addition one may set distribution and/or projectionMode to refine the calculation of correlations (e.g. restrict the calcuation to the signal distribution and/or exclude underflow and overflow bins). See the documentation of GetScanVariable() for details. Alternative scan variables may be defined by overriding the",MatchSource.WIKI,doc/master/classTUnfoldDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUnfoldDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html
Modifiability,variab,variable," In TUnfoldDensity, such complex binning schemes are handled with the help of the class TUnfoldBinning. For both the measurement and the truth there is a tree structure. The tree nodes may correspond to single bins (e.g. nuisance parameters) or may hold multi-dimensional distributions. ; For example, the ""measurement"" tree could have two leaves, one for the primary distribution and one for auxillary measurements. Similarly, the ""truth"" tree could have two leaves, one for the signal and one for the background. Each of the leaves may then have a multi-dimensional distribution. ; The class TUnfoldBinning takes care to map all bins of the ""measurement"" to a one-dimensional vector y. Similarly, the ""truth"" bins are mapped to the vector x.; How to choose the regularisation settings; In TUnfoldDensity, two methods are implemented to determine tau**2 . ScanLcurve() locate the tau where the L-curve plot has a ""kink"" this function is implemented in the TUnfold class . ScanTau() finds the solution such that some variable (e.g. global correlation coefficient) is minimized. This function is implemented in the TUnfoldDensity class . Each of the algorithms has its own advantages and disadvantages. The algorithm (1) does not work if the input data are too similar to the MC prediction. Typical no-go cases of the L-curve scan are: . the number of measurements is too small (e.g. ny=nx) . the input data have no statistical fluctuations [identical MC events are used to fill the matrix of migrations and the vector y for a ""closure test""] . The algorithm (2) only works if the variable does have a real minimum as a function of tau. If global correlations are minimized, the situation is as follows: The matrix of migration typically introduces negative correlations. The area constraint introduces some positive correlation. Regularisation on the ""size"" introduces no correlation. Regularisation on 1st or 2nd derivatives adds positive correlations. ; For these reasons, ""size"" regularisation does",MatchSource.WIKI,doc/master/classTUnfoldDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html
Performance,perform,performed,"ty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties. Complex, multidimensional arrangements of signal and background bins are managed with the help of the class TUnfoldBinning.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys:. Set up binning schemes for the truth and measured distributions. The binning schemes may be coded in the XML language, for reading use TUnfoldBinningXML. . A matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . A vector of measurements is given as one-dimensional histogram using the SetInput() method . Repeated calls to SubtractBackground() to specify background sources . Repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . or multiple times in a scan to determine the best chouce of tau, method ScanTau() . Unfolding results are retrieved using various GetXXX() methods . A detailed documentation of the various GetXXX() methods to control systematic uncertainties is given with the method TUnfoldSys.; Why to use complex binning schemes; in literature on unfolding, the ""standard"" test case is a one-dimensional distribution without underflow or overflow bins. The migration matrix is almost diagonal. ; This ""standard"" case is rarely realized for real problems. ; Often one has to deal with multi-dimensional distributions. In addition, there are underflow and overflow bins or other background bins, possibly determined with the help of auxillary measurements. ; In TUnfoldDensity, such complex binning schemes are handled with the help of the class TUnfo",MatchSource.WIKI,doc/master/classTUnfoldDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html
Safety,detect,detector,". ROOT: TUnfoldDensity Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TUnfoldDensity Class Reference. ; An algorithm to unfold distributions from detector to truth level. ; TUnfoldDensity is used to decompose a measurement y into several sources x, given the measurement uncertainties, background b and a matrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfoldDensity has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties. Complex, multidimensional arrangements of signal and background bins are managed with the help of the class TUnfoldBinning.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys:. Set up binning schemes for the truth and measured distributions. The binning schemes may be coded in the XML language, for reading use TUnfoldBinningXML. . A matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . A vector of measurements is given as one-dimensional histogram using the SetInput() method . Repeated calls to SubtractBackground() to specify background sources . Repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed pa",MatchSource.WIKI,doc/master/classTUnfoldDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html
Security,access,access,"t char *histogramName, const char *histogramTitle=nullptr, const char *distributionName=nullptr, const char *projectionMode=nullptr, Bool_t useAxisBinning=kTRUE);  get covariance matrix including all contributions ;  ; TH1 * GetFoldedOutput (const char *histogramName, const char *histogramTitle=nullptr, const char *distributionName=nullptr, const char *projectionMode=nullptr, Bool_t useAxisBinning=kTRUE, Bool_t addBgr=kFALSE) const;  retreive unfolding result folded back as a new histogram ;  ; TH1 * GetInput (const char *histogramName, const char *histogramTitle=nullptr, const char *distributionName=nullptr, const char *projectionMode=nullptr, Bool_t useAxisBinning=kTRUE) const;  retreive input distribution in a new histogram ;  ; const TUnfoldBinning * GetInputBinning (const char *distributionName=nullptr) const;  locate a binning node for the input (measured) quantities ;  ; TH2 * GetL (const char *histogramName, const char *histogramTitle=nullptr, Bool_t useAxisBinning=kTRUE);  access matrix of regularisation conditions in a new histogram ;  ; TUnfoldBinning * GetLBinning (void) const;  return binning scheme for regularisation conditions (matrix L) ;  ; TH1 * GetLxMinusBias (const char *histogramName, const char *histogramTitle=nullptr);  get regularisation conditions multiplied by result vector minus bias L(x-biasScale*biasVector) ;  ; TH1 * GetOutput (const char *histogramName, const char *histogramTitle=nullptr, const char *distributionName=nullptr, const char *projectionMode=nullptr, Bool_t useAxisBinning=kTRUE) const;  retreive unfolding result as a new histogram ;  ; const TUnfoldBinning * GetOutputBinning (const char *distributionName=nullptr) const;  locate a binning node for the unfolded (truth level) quantities ;  ; TH2 * GetProbabilityMatrix (const char *histogramName, const char *histogramTitle=nullptr, Bool_t useAxisBinning=kTRUE) const;  get matrix of probabilities in a new histogram ;  ; TH2 * GetRhoIJtotal (const char *histogramName, const char *h",MatchSource.WIKI,doc/master/classTUnfoldDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html
Testability,test,test,"easured distributions. The binning schemes may be coded in the XML language, for reading use TUnfoldBinningXML. . A matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . A vector of measurements is given as one-dimensional histogram using the SetInput() method . Repeated calls to SubtractBackground() to specify background sources . Repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . or multiple times in a scan to determine the best chouce of tau, method ScanTau() . Unfolding results are retrieved using various GetXXX() methods . A detailed documentation of the various GetXXX() methods to control systematic uncertainties is given with the method TUnfoldSys.; Why to use complex binning schemes; in literature on unfolding, the ""standard"" test case is a one-dimensional distribution without underflow or overflow bins. The migration matrix is almost diagonal. ; This ""standard"" case is rarely realized for real problems. ; Often one has to deal with multi-dimensional distributions. In addition, there are underflow and overflow bins or other background bins, possibly determined with the help of auxillary measurements. ; In TUnfoldDensity, such complex binning schemes are handled with the help of the class TUnfoldBinning. For both the measurement and the truth there is a tree structure. The tree nodes may correspond to single bins (e.g. nuisance parameters) or may hold multi-dimensional distributions. ; For example, the ""measurement"" tree could have two leaves, one for the primary distribution and one for auxillary measurements. Similarly, the ""truth"" tree could have two leaves, one for the signal and one for the background. Each of the leaves may then have a multi-dimensional distribution. ; The class TUnfoldBinning takes c",MatchSource.WIKI,doc/master/classTUnfoldDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html
Usability,simpl,simple,". ROOT: TUnfoldDensity Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TUnfoldDensity Class Reference. ; An algorithm to unfold distributions from detector to truth level. ; TUnfoldDensity is used to decompose a measurement y into several sources x, given the measurement uncertainties, background b and a matrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfoldDensity has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties. Complex, multidimensional arrangements of signal and background bins are managed with the help of the class TUnfoldBinning.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys:. Set up binning schemes for the truth and measured distributions. The binning schemes may be coded in the XML language, for reading use TUnfoldBinningXML. . A matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . A vector of measurements is given as one-dimensional histogram using the SetInput() method . Repeated calls to SubtractBackground() to specify background sources . Repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed pa",MatchSource.WIKI,doc/master/classTUnfoldDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUnfoldIterativeEM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldIterativeEM.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUnfoldIterativeEM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldIterativeEM.html
Modifiability,inherit,inherited,"tions);  ; Double_t GetDeviance (void) const;  ; Double_t GetDF (void) const;  ; TH1 * GetFoldedOutput (const char *histogramName, const char *histogramTitle=nullptr, const char *distributionName=nullptr, const char *projectionMode=nullptr, Bool_t useAxisBinning=kTRUE, Bool_t addBgr=kFALSE) const;  ; TH1 * GetOutput (const char *histogramName, const char *histogramTitle=nullptr, const char *distributionName=nullptr, const char *projectionMode=nullptr, Bool_t useAxisBinning=kTRUE) const;  ; Double_t GetSURE (void) const;  ; TClass * IsA () const override;  ; virtual Int_t ScanSURE (Int_t nIterMax, TGraph **SURE=nullptr, TGraph **df_deviance=nullptr);  ; virtual Int_t SetInput (const TH1 *hist_y, Double_t scaleBias=1.0);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SubtractBackground (const TH1 *hist_bgr, const char *name, Double_t scale=1.0);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ",MatchSource.WIKI,doc/master/classTUnfoldIterativeEM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldIterativeEM.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTUnfoldIterativeEM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldIterativeEM.html
Availability,avail,available,"ch a simple template fit, TUnfoldSys has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfoldSys. TUnfoldDensity adds features to TUnfoldSys, related to possible complex multidimensional arrangements of bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfoldSys are the getter functions. For TUnfoldSys, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . repeated calls to SubtractBackground() to specify background sources . repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Description of (systematic) uncertainties available in TUnfoldSys. There are covariance matrix contributions and there are systematic shifts. Systematic shifts correspond to the variation of a (buicance) parameter, for example a background normalisation or a one-sigma variation of a correlated systematic error. . Set ",MatchSource.WIKI,doc/master/classTUnfoldSys.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html
Deployability,update,updates,"ch a simple template fit, TUnfoldSys has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfoldSys. TUnfoldDensity adds features to TUnfoldSys, related to possible complex multidimensional arrangements of bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfoldSys are the getter functions. For TUnfoldSys, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . repeated calls to SubtractBackground() to specify background sources . repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Description of (systematic) uncertainties available in TUnfoldSys. There are covariance matrix contributions and there are systematic shifts. Systematic shifts correspond to the variation of a (buicance) parameter, for example a background normalisation or a one-sigma variation of a correlated systematic error. . Set ",MatchSource.WIKI,doc/master/classTUnfoldSys.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUnfoldSys.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html
Modifiability,inherit,inherited,". (i)SetInput() GetEmatrixInput()n.a.statistical uncertainty of the input (the measurement) . (i)+(d)+(e)see aboveGetEmatrix()n.a. Partial sun of uncertainties: all sources which are propagated to the covariance before unfolding . (i)+(a)+(b)+(c)+(d)+(e)see aboveGetEmatrixTotal() n.a.All known error sources summed up . Note: (a), (b), (c) are propagated to the result AFTER unfolding, whereas the background errors (d) and (e) are added to the data errors BEFORE unfolding. For this reason the errors of type (d) and (e) are INCLUDED in the standard error matrix and other methods provided by the base class TUnfold, whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods provided by the base class TUnfold. ; Definition at line 59 of file TUnfoldSys.h. Public Types; enum  ESysErrMode { kSysErrModeMatrix =0; , kSysErrModeShift =1; , kSysErrModeRelative =2; };  type of matrix specified with AddSysError() More...;  ;  Public Types inherited from TUnfold; enum  EConstraint { kEConstraintNone =0; , kEConstraintArea =1; };  type of extra constraint More...;  ; enum  EHistMap { kHistMapOutputHoriz = 0; , kHistMapOutputVert = 1; };  arrangement of axes for the response matrix (TH2 histogram) More...;  ; enum  ERegMode { ;   kRegModeNone = 0; , kRegModeSize = 1; , kRegModeDerivative = 2; , kRegModeCurvature = 3; , ;   kRegModeMixed = 4. };  choice of regularisation scheme More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); ,",MatchSource.WIKI,doc/master/classTUnfoldSys.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html
Performance,perform,performed," TUnfoldSys. TUnfoldDensity adds features to TUnfoldSys, related to possible complex multidimensional arrangements of bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfoldSys are the getter functions. For TUnfoldSys, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . repeated calls to SubtractBackground() to specify background sources . repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Description of (systematic) uncertainties available in TUnfoldSys. There are covariance matrix contributions and there are systematic shifts. Systematic shifts correspond to the variation of a (buicance) parameter, for example a background normalisation or a one-sigma variation of a correlated systematic error. . Set by Access covariance matrix Access vector of shifts Description . (a)TUnfoldSys constructor GetEmatrixSysUncorr()n.a. uncorrelated errors on the input matrix histA, taken as the errors provided with the histogram. These are typically statistical errors from finite Monte Carlo samples. . (b)AddSysError()GetEmatrixSysSource() GetDeltaSysSource() correlated shifts of the input matrix histA. These shifts are taken as one-sigma effects when switchig on",MatchSource.WIKI,doc/master/classTUnfoldSys.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html
Safety,detect,detector,". ROOT: TUnfoldSys Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TUnfoldSys Class ReferenceHistogram Library » TUnfold classes. ; An algorithm to unfold distributions from detector to truth level, with background subtraction and propagation of systematic uncertainties. ; TUnfoldSys is used to decompose a measurement y into several sources x, given the measurement uncertainties, background b and a matrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfoldSys has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfoldSys. TUnfoldDensity adds features to TUnfoldSys, related to possible complex multidimensional arrangements of bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfoldSys are the getter functions. For TUnfoldSys, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as ar",MatchSource.WIKI,doc/master/classTUnfoldSys.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTUnfoldSys.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html
Testability,log,logTauX," regularisation parameter ;  ; Int_t RegularizeBins (int start, int step, int nbin, ERegMode regmode);  add regularisation conditions for a group of bins ;  ; Int_t RegularizeBins2D (int start_bin, int step1, int nbin1, int step2, int nbin2, ERegMode regmode);  add regularisation conditions for 2d unfolding ;  ; Int_t RegularizeCurvature (int left_bin, int center_bin, int right_bin, Double_t scale_left=1.0, Double_t scale_right=1.0);  add a regularisation condition on the curvature of three truth bin ;  ; Int_t RegularizeDerivative (int left_bin, int right_bin, Double_t scale=1.0);  add a regularisation condition on the difference of two truth bin ;  ; Int_t RegularizeSize (int bin, Double_t scale=1.0);  add a regularisation condition on the magnitude of a truth bin ;  ; virtual Int_t ScanLcurve (Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph **lCurve, TSpline **logTauX=nullptr, TSpline **logTauY=nullptr, TSpline **logTauCurvature=nullptr);  scan the L curve, determine tau and unfold at the final value of tau ;  ; virtual Int_t ScanSURE (Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph **logTauSURE=nullptr, TGraph **df_chi2A=nullptr, TGraph **lCurve=nullptr);  minimize Stein's unbiased risk estimator ""SURE"" using successive calls to DoUnfold at various tau. ;  ; void SetBias (const TH1 *bias);  set bias vector ;  ; void SetConstraint (EConstraint constraint);  set type of area constraint ;  ; void SetEpsMatrix (Double_t eps);  set numerical accuracy for Eigenvalue analysis when inverting matrices with rank problems ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option",MatchSource.WIKI,doc/master/classTUnfoldSys.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html
Usability,simpl,simple,". ROOT: TUnfoldSys Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TUnfoldSys Class ReferenceHistogram Library » TUnfold classes. ; An algorithm to unfold distributions from detector to truth level, with background subtraction and propagation of systematic uncertainties. ; TUnfoldSys is used to decompose a measurement y into several sources x, given the measurement uncertainties, background b and a matrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfoldSys has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfoldSys. TUnfoldDensity adds features to TUnfoldSys, related to possible complex multidimensional arrangements of bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfoldSys are the getter functions. For TUnfoldSys, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as ar",MatchSource.WIKI,doc/master/classTUnfoldSys.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html
Availability,error,error,"steminlineprotectedvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; DynamicPathName(const char *lib, Bool_t quiet=kFALSE)TSystem; DynFindSymbol(const char *module, const char *entry) overrideTUnixSystemvirtual; EAclicMode enum nameTSystem; EAclicProperties enum nameTSystem; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Exec(const char *shellcmd) overrideTUnixSystemvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Exit(int code, Bool_t mode=kTRUE) overrideTUnixSystemvirtual; ExitLoop()TSystemvirtual; ExpandFileName(const char *fname)TSystemprotectedvirtual; ExpandFileName(TString &fname)TSystemprotectedvirtual; ExpandFileName(const char *fname, char *xname, const int kBufSize)TSystemprivate; ExpandPathName(TString &patbuf) overrideTUnixSystemvirtual; ExpandPathName(const char *path) overrideTUnixSystemvirtual; fAclicModeTSystemprotected; fAclicPropertiesTSystemprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBeepDurationTSystemprotected; fBeepFreqTSystemprotected; fBitsTObjectprivate; fBuildArchTSystemprotected; fBuildCompilerTSystemprotected; fBuildCompilerVersionTSystemprotected; fBuildCompilerVersionStrTSystemprotected; fBuildDirTSystemprotected; fBuildNodeTSystemprotected; fCompiledTSystemprotected; fDoneTSystemprotected; fFileHandlerTSystemprotected; fFlagsDebugTSystemprotected; fFlagsOptTSystemprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHelpersTSystemprotected; fHostnameTSystemprotected; FillBuffer(char *&buff",MatchSource.WIKI,doc/master/classTUnixSystem-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnixSystem-members.html
Integrability,protocol,protocol," overrideTUnixSystemvirtual; CheckChilds()TUnixSystem; CheckDescriptors()TUnixSystem; CheckedHash()TObjectinline; CheckSignals(Bool_t sync)TUnixSystem; Chmod(const char *file, UInt_t mode) overrideTUnixSystemvirtual; Class()TUnixSystemstatic; Class_Name()TUnixSystemstatic; Class_Version()TUnixSysteminlinestatic; ClassName() constTObjectvirtual; CleanCompiledMacros()TSystemvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloseConnection(int sock, Bool_t force=kFALSE) overrideTUnixSystemvirtual; Closelog() overrideTUnixSystemvirtual; ClosePipe(FILE *pipe) overrideTUnixSystemvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; CompileMacro(const char *filename, Option_t *opt="""", const char *library_name="""", const char *build_dir="""", UInt_t dirmode=0)TSystemvirtual; ConcatFileName(const char *dir, const char *name)TSystemvirtual; ConnectService(const char *server, int port, int tcpwindowsize, const char *protocol=""tcp"")TUnixSystem; ConsistentWith(const char *path, void *dirptr=nullptr)TSystemprotectedvirtual; Copy(TObject &named) const overrideTNamedvirtual; CopyFile(const char *from, const char *to, Bool_t overwrite=kFALSE) overrideTUnixSystemvirtual; DeclFileName()TUnixSysteminlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirName(const char *pathname)TSystemvirtual; DispatchOneEvent(Bool_t pendingOnly=kFALSE) overrideTUnixSystemvirtual; DispatchSignals(ESignals sig)TUnixSystem; DispatchTimers(Bool_t mode)TUnixSystem; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoBeep(Int_t=-1, Int_t=-1) constTSysteminlineprotectedvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; DynamicPathName(const char *lib, Bool_t quiet=kFALSE)TSystem; DynFindSymbol(const char *module, con",MatchSource.WIKI,doc/master/classTUnixSystem-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnixSystem-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TUnixSystem Member List. This is the complete list of members for TUnixSystem, including all inherited members. Abort(int code=0) overrideTUnixSystemvirtual; AbstractMethod(const char *method) constTObject; AcceptConnection(int sock) overrideTUnixSystemvirtual; AccessPathName(const char *path, EAccessMode mode=kFileExists) overrideTUnixSystemvirtual; AddDynamicPath(const char *lib) overrideTUnixSystemvirtual; AddFileHandler(TFileHandler *fh) overrideTUnixSystemvirtual; AddIncludePath(const char *includePath)TSystemvirtual; AddLinkedLibs(const char *linkedLib)TSystemvirtual; AddSignalHandler(TSignalHandler *sh) overrideTUnixSystemvirtual; AddStdExceptionHandler(TStdExceptionHandler *eh)TSystemvirtual; AddTimer(TTimer *ti) overrideTUnixSystemvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize=-1) overrideTUnixSystemvirtual; AnnounceUdpService(int port, int backlog) overrideTUnixSystemvirtual; AnnounceUnixService(int port, int backlog) overrideTUnixSystemvirtual; AnnounceUnixService(const char *sockpath, int backlog) overrideTUnixSystemvirtual; AppendPad(Option_t *option="""")TObjectvirtual; BaseName(const char *pathname)TSystemvirtual; Beep(Int_t freq=-1, Int_t duration=-1, Bool_t setDefault=kFALSE)TSystem; Browse(TBrowser *b)TObjectvirtual; cd(const char *path)TSysteminline; ChangeDirectory(const char *path) overrideTUnixSystemvirtual; CheckChilds()TUnixSystem; CheckDescriptors()TUnixSystem; CheckedHash()TObjectinline; CheckSignals(Bool_t sync)TUnixSystem; Chmod(const char *file, UInt_t mode) overrideTUnixSystemvirtual; Class()TUnixSystemstatic; Class_Name()TUnixSystemstatic; Class_Version()TUnixSysteminlinestatic; ClassName() constTObjectvirtual; CleanCompiledMacros()TSystemvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual;",MatchSource.WIKI,doc/master/classTUnixSystem-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnixSystem-members.html
Safety,timeout,timeout,"errideTUnixSystemvirtual; RecvRaw(int sock, void *buffer, int length, int flag) overrideTUnixSystemvirtual; RedirectOutput(const char *name, const char *mode=""a"", RedirectHandle_t *h=nullptr) overrideTUnixSystemvirtual; RemoveFileHandler(TFileHandler *fh) overrideTUnixSystemvirtual; RemoveOnExit(TObject *obj)TSystem; RemoveSignalHandler(TSignalHandler *sh) overrideTUnixSystemvirtual; RemoveStdExceptionHandler(TStdExceptionHandler *eh)TSystemvirtual; RemoveTimer(TTimer *ti) overrideTUnixSystemvirtual; Rename(const char *from, const char *to) overrideTUnixSystemvirtual; ResetBit(UInt_t f)TObjectinline; ResetErrno()TSystemstatic; ResetSignal(ESignals sig, Bool_t reset=kTRUE) overrideTUnixSystemvirtual; ResetSignals() overrideTUnixSystemvirtual; ResetTimer(TTimer *ti) overrideTUnixSystemvirtual; Run()TSystemvirtual; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; Select(TList *active, Long_t timeout) overrideTUnixSystemvirtual; Select(TFileHandler *fh, Long_t timeout) overrideTUnixSystemvirtual; SendBuf(int sock, const void *buffer, int length) overrideTUnixSystemvirtual; SendRaw(int sock, const void *buffer, int length, int flag) overrideTUnixSystemvirtual; SetAclicMode(EAclicMode mode)TSystemvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetBuildDir(const char *build_dir, Bool_t isflat=kFALSE)TSystemvirtual; SetDisplay() overrideTUnixSystemvirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetDynamicPath(const char *lib) overrideTUnixSystemvirtual; Setenv(const char *name, const char *value) overrideTUnixSystemvirtual; SetErrorStr(const char *errstr)TSystem; SetFlagsDebug(const char *)TSystemvirtual; SetFlagsOpt(const char *)TSystemvirtual; SetFPEMask(Int_t mask=kDefaultMask) overrideTUnixSystemvirtual; SetIncludePath(const char *includePath)TSystemvirtual; SetLinkdefSuffix(const char *suffix)TSystemv",MatchSource.WIKI,doc/master/classTUnixSystem-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnixSystem-members.html
Availability,error,error,"ist of system timers. ;  ; int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1) override;  Announce TCP/IP service. ;  ; int AnnounceUdpService (int port, int backlog) override;  Announce UDP service. ;  ; int AnnounceUnixService (const char *sockpath, int backlog) override;  Announce unix domain service on path 'sockpath'. ;  ; int AnnounceUnixService (int port, int backlog) override;  Announce unix domain service on path ""kServerPath/<port>"". ;  ; Bool_t ChangeDirectory (const char *path) override;  Change directory. Returns kTRUE in case of success, kFALSE otherwise. ;  ; void CheckChilds ();  Check if children have finished. ;  ; Bool_t CheckDescriptors ();  Check if there is activity on some file descriptors and call their Notify() member. ;  ; Bool_t CheckSignals (Bool_t sync);  Check if some signals were raised and call their Notify() member. ;  ; int Chmod (const char *file, UInt_t mode) override;  Set the file permission bits. Returns -1 in case or error, 0 otherwise. ;  ; void CloseConnection (int sock, Bool_t force=kFALSE) override;  Close socket. ;  ; void Closelog () override;  Close connection to system log daemon. ;  ; int ClosePipe (FILE *pipe) override;  Close the pipe. ;  ; int ConnectService (const char *server, int port, int tcpwindowsize, const char *protocol=""tcp"");  Connect to service servicename on server servername. ;  ; int CopyFile (const char *from, const char *to, Bool_t overwrite=kFALSE) override;  Copy a file. ;  ; void DispatchOneEvent (Bool_t pendingOnly=kFALSE) override;  Dispatch a single event. ;  ; void DispatchSignals (ESignals sig);  Handle and dispatch signals. ;  ; Bool_t DispatchTimers (Bool_t mode);  Handle and dispatch timers. ;  ; Func_t DynFindSymbol (const char *module, const char *entry) override;  dynamic linking of module ;  ; Int_t Exec (const char *shellcmd) override;  Execute a command. ;  ; void Exit (int code, Bool_t mode=kTRUE) override;  Exit the application. ;  ; char * ExpandPat",MatchSource.WIKI,doc/master/classTUnixSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html
Integrability,protocol,protocol,"ce unix domain service on path 'sockpath'. ;  ; int AnnounceUnixService (int port, int backlog) override;  Announce unix domain service on path ""kServerPath/<port>"". ;  ; Bool_t ChangeDirectory (const char *path) override;  Change directory. Returns kTRUE in case of success, kFALSE otherwise. ;  ; void CheckChilds ();  Check if children have finished. ;  ; Bool_t CheckDescriptors ();  Check if there is activity on some file descriptors and call their Notify() member. ;  ; Bool_t CheckSignals (Bool_t sync);  Check if some signals were raised and call their Notify() member. ;  ; int Chmod (const char *file, UInt_t mode) override;  Set the file permission bits. Returns -1 in case or error, 0 otherwise. ;  ; void CloseConnection (int sock, Bool_t force=kFALSE) override;  Close socket. ;  ; void Closelog () override;  Close connection to system log daemon. ;  ; int ClosePipe (FILE *pipe) override;  Close the pipe. ;  ; int ConnectService (const char *server, int port, int tcpwindowsize, const char *protocol=""tcp"");  Connect to service servicename on server servername. ;  ; int CopyFile (const char *from, const char *to, Bool_t overwrite=kFALSE) override;  Copy a file. ;  ; void DispatchOneEvent (Bool_t pendingOnly=kFALSE) override;  Dispatch a single event. ;  ; void DispatchSignals (ESignals sig);  Handle and dispatch signals. ;  ; Bool_t DispatchTimers (Bool_t mode);  Handle and dispatch timers. ;  ; Func_t DynFindSymbol (const char *module, const char *entry) override;  dynamic linking of module ;  ; Int_t Exec (const char *shellcmd) override;  Execute a command. ;  ; void Exit (int code, Bool_t mode=kTRUE) override;  Exit the application. ;  ; char * ExpandPathName (const char *path) override;  Expand a pathname getting rid of special shell characaters like ~. ;  ; Bool_t ExpandPathName (TString &patbuf) override;  Expand a pathname getting rid of special shell characters like ~. ;  ; const char * FindDynamicLibrary (TString &lib, Bool_t quiet=kFALSE) override;  Retur",MatchSource.WIKI,doc/master/classTUnixSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html
Modifiability,variab,variable," ;  ; const char * FindFile (const char *search, TString &file, EAccessMode mode=kFileExists) override;  Find location of file ""wfil"" in a search path. ;  ; void FreeDirectory (void *dirp) override;  Close a Unix file system directory. ;  ; int GetCpuInfo (CpuInfo_t *info, Int_t sampleTime=1000) const override;  Returns cpu load average and load info into the CpuInfo_t structure. ;  ; Int_t GetCryptoRandom (void *buf, Int_t len) override;  Return cryptographic random number Fill provided buffer with random values Returns number of bytes written to buffer or -1 in case of error. ;  ; const char * GetDirEntry (void *dirp) override;  Get next Unix file system directory entry. Returns 0 if no more entries. ;  ; const char * GetDynamicPath () override;  Return the dynamic path (used to find shared libraries). ;  ; Int_t GetEffectiveGid () override;  Returns the effective group id. ;  ; Int_t GetEffectiveUid () override;  Returns the effective user id. ;  ; const char * Getenv (const char *name) override;  Get environment variable. ;  ; const char * GetError () override;  Return system error string. ;  ; Int_t GetFPEMask () override;  Return the bitmap of conditions that trigger a floating point exception. ;  ; int GetFsInfo (const char *path, Long_t *id, Long_t *bsize, Long_t *blocks, Long_t *bfree) override;  Get info about a file system: id, bsize, bfree, blocks. ;  ; Int_t GetGid (const char *group=nullptr) override;  Returns the group's id. If group = 0, returns current user's group. ;  ; UserGroup_t * GetGroupInfo (const char *group=nullptr) override;  Returns all group info in the UserGroup_t structure. ;  ; UserGroup_t * GetGroupInfo (Int_t gid) override;  Returns all group info in the UserGroup_t structure. ;  ; std::string GetHomeDirectory (const char *userName=nullptr) const override;  Return the user's home directory. ;  ; TInetAddress GetHostByName (const char *server) override;  Get Internet Protocol (IP) address of host. ;  ; int GetMemInfo (MemInfo_t *info)",MatchSource.WIKI,doc/master/classTUnixSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html
Performance,load,load," dispatch timers. ;  ; Func_t DynFindSymbol (const char *module, const char *entry) override;  dynamic linking of module ;  ; Int_t Exec (const char *shellcmd) override;  Execute a command. ;  ; void Exit (int code, Bool_t mode=kTRUE) override;  Exit the application. ;  ; char * ExpandPathName (const char *path) override;  Expand a pathname getting rid of special shell characaters like ~. ;  ; Bool_t ExpandPathName (TString &patbuf) override;  Expand a pathname getting rid of special shell characters like ~. ;  ; const char * FindDynamicLibrary (TString &lib, Bool_t quiet=kFALSE) override;  Returns the path of a shared library (searches for library in the shared library search path). ;  ; const char * FindFile (const char *search, TString &file, EAccessMode mode=kFileExists) override;  Find location of file ""wfil"" in a search path. ;  ; void FreeDirectory (void *dirp) override;  Close a Unix file system directory. ;  ; int GetCpuInfo (CpuInfo_t *info, Int_t sampleTime=1000) const override;  Returns cpu load average and load info into the CpuInfo_t structure. ;  ; Int_t GetCryptoRandom (void *buf, Int_t len) override;  Return cryptographic random number Fill provided buffer with random values Returns number of bytes written to buffer or -1 in case of error. ;  ; const char * GetDirEntry (void *dirp) override;  Get next Unix file system directory entry. Returns 0 if no more entries. ;  ; const char * GetDynamicPath () override;  Return the dynamic path (used to find shared libraries). ;  ; Int_t GetEffectiveGid () override;  Returns the effective group id. ;  ; Int_t GetEffectiveUid () override;  Returns the effective user id. ;  ; const char * Getenv (const char *name) override;  Get environment variable. ;  ; const char * GetError () override;  Return system error string. ;  ; Int_t GetFPEMask () override;  Return the bitmap of conditions that trigger a floating point exception. ;  ; int GetFsInfo (const char *path, Long_t *id, Long_t *bsize, Long_t *blocks, Long_t *",MatchSource.WIKI,doc/master/classTUnixSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html
Safety,timeout,timeout,"name, const char *mode=""a"", RedirectHandle_t *h=nullptr) override;  Redirect standard output (stdout, stderr) to the specified file. ;  ; TFileHandler * RemoveFileHandler (TFileHandler *fh) override;  Remove a file handler from the list of file handlers. ;  ; TSignalHandler * RemoveSignalHandler (TSignalHandler *sh) override;  Remove a signal handler from list of signal handlers. ;  ; TTimer * RemoveTimer (TTimer *ti) override;  Remove timer from list of system timers. ;  ; int Rename (const char *from, const char *to) override;  Rename a file. Returns 0 when successful, -1 in case of failure. ;  ; void ResetSignal (ESignals sig, Bool_t reset=kTRUE) override;  If reset is true reset the signal handler for the specified signal to the default handler, else restore previous behaviour. ;  ; void ResetSignals () override;  Reset signals handlers to previous behaviour. ;  ; void ResetTimer (TTimer *ti) override;  Reset a-sync timer. ;  ; Int_t Select (TFileHandler *fh, Long_t timeout) override;  Select on the file descriptor related to file handler h. ;  ; Int_t Select (TList *active, Long_t timeout) override;  Select on file descriptors. ;  ; int SendBuf (int sock, const void *buffer, int length) override;  Send a buffer headed by a length indicator. ;  ; int SendRaw (int sock, const void *buffer, int length, int flag) override;  Send exactly length bytes from buffer. ;  ; void SetDisplay () override;  Set DISPLAY environment variable based on utmp entry. Only for UNIX. ;  ; void SetDynamicPath (const char *lib) override;  Set the dynamic path to a new value. ;  ; void Setenv (const char *name, const char *value) override;  Set environment variable. ;  ; Int_t SetFPEMask (Int_t mask=kDefaultMask) override;  Set which conditions trigger a floating point exception. ;  ; void SetProgname (const char *name) override;  Set the application name (from command line, argv[0]) and copy it in gProgName. ;  ; int SetSockOpt (int sock, int option, int val) override;  Set socket option",MatchSource.WIKI,doc/master/classTUnixSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html
Security,access,access,". ROOT: TUnixSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Member Functions |; List of all members ; TUnixSystem Class Reference. . Definition at line 32 of file TUnixSystem.h. Public Member Functions;  TUnixSystem ();  ; virtual ~TUnixSystem ();  Reset to original state. ;  ; void Abort (int code=0) override;  Abort the application. ;  ; int AcceptConnection (int sock) override;  Accept a connection. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void AddDynamicPath (const char *lib) override;  Add a new directory to the dynamic path. ;  ; void AddFileHandler (TFileHandler *fh) override;  Add a file handler to the list of system file handlers. ;  ; void AddSignalHandler (TSignalHandler *sh) override;  Add a signal handler to list of system signal handlers. ;  ; void AddTimer (TTimer *ti) override;  Add timer to list of system timers. ;  ; int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1) override;  Announce TCP/IP service. ;  ; int AnnounceUdpService (int port, int backlog) override;  Announce UDP service. ;  ; int AnnounceUnixService (const char *sockpath, int backlog) override;  Announce unix domain service on path 'sockpath'. ;  ; int AnnounceUnixService (int port, int backlog) override;  Announce unix domain service on path ""kServerPath/<port>"". ;  ; Bool_t ChangeDirectory (const char *path) override;  Change directory. Returns kTRUE in case of success, kFALSE otherwise. ;  ; void CheckChilds ();  Check if children have finished. ;  ; Bool_t CheckDescriptors ();  Check if there is activity on some file descriptors and call their Notify() member. ;  ; Bool_t CheckSignals (Bool_t sync);  Check if some s",MatchSource.WIKI,doc/master/classTUnixSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html
Testability,log,log,"vice. ;  ; int AnnounceUdpService (int port, int backlog) override;  Announce UDP service. ;  ; int AnnounceUnixService (const char *sockpath, int backlog) override;  Announce unix domain service on path 'sockpath'. ;  ; int AnnounceUnixService (int port, int backlog) override;  Announce unix domain service on path ""kServerPath/<port>"". ;  ; Bool_t ChangeDirectory (const char *path) override;  Change directory. Returns kTRUE in case of success, kFALSE otherwise. ;  ; void CheckChilds ();  Check if children have finished. ;  ; Bool_t CheckDescriptors ();  Check if there is activity on some file descriptors and call their Notify() member. ;  ; Bool_t CheckSignals (Bool_t sync);  Check if some signals were raised and call their Notify() member. ;  ; int Chmod (const char *file, UInt_t mode) override;  Set the file permission bits. Returns -1 in case or error, 0 otherwise. ;  ; void CloseConnection (int sock, Bool_t force=kFALSE) override;  Close socket. ;  ; void Closelog () override;  Close connection to system log daemon. ;  ; int ClosePipe (FILE *pipe) override;  Close the pipe. ;  ; int ConnectService (const char *server, int port, int tcpwindowsize, const char *protocol=""tcp"");  Connect to service servicename on server servername. ;  ; int CopyFile (const char *from, const char *to, Bool_t overwrite=kFALSE) override;  Copy a file. ;  ; void DispatchOneEvent (Bool_t pendingOnly=kFALSE) override;  Dispatch a single event. ;  ; void DispatchSignals (ESignals sig);  Handle and dispatch signals. ;  ; Bool_t DispatchTimers (Bool_t mode);  Handle and dispatch timers. ;  ; Func_t DynFindSymbol (const char *module, const char *entry) override;  dynamic linking of module ;  ; Int_t Exec (const char *shellcmd) override;  Execute a command. ;  ; void Exit (int code, Bool_t mode=kTRUE) override;  Exit the application. ;  ; char * ExpandPathName (const char *path) override;  Expand a pathname getting rid of special shell characaters like ~. ;  ; Bool_t ExpandPathName (TString &",MatchSource.WIKI,doc/master/classTUnixSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html
Availability,error,error,";  Initialize method for the Poisson distribution. ;  ; bool IsDistCont () const;  Return true for a univariate continuous distribution. ;  ; bool IsDistDiscrete () const;  Return true for a discrete distribution. ;  ; bool IsDistEmpirical () const;  Return true for an empirical distribution. ;  ; bool IsDistMultiCont () const;  Return true for a multivariate continuous distribution. ;  ; const std::string & MethodName () const;  used Unuran method ;  ; TUnuran & operator= (const TUnuran &rhs)=delete;  ; TUnuran & operator= (TUnuran &&rhs)=delete;  ; bool ReInitDiscrDist (unsigned int npar, double *params);  Reinitialize UNURAN by changing the distribution parameters but maintaining same distribution and method. ;  ; double Sample ();  Sample 1D distribution. ;  ; int SampleDiscr ();  Sample discrete distributions. ;  ; bool SampleMulti (double *x);  Sample multidimensional distributions. ;  ; bool SetLogLevel (unsigned int iflag=1);  set log level ;  ; bool SetLogStream ();  set stream for log and error (not yet implemented) ;  ; void SetRandom (TRandom *r);  Set the random engine. ;  ; void SetSeed (unsigned int seed);  set the seed for the random number generator ;  . Protected Member Functions; bool SetContDistribution (const TUnuranContDist &dist);  ; bool SetDiscreteDistribution (const TUnuranDiscrDist &dist);  ; bool SetEmpiricalDistribution (const TUnuranEmpDist &dist);  ; bool SetMethodAndInit ();  change the method and initialize Unuran with the previously given distribution ;  ; bool SetMultiDistribution (const TUnuranMultiContDist &dist);  ; bool SetRandomGenerator ();  . Protected Attributes; std::unique_ptr< TUnuranBaseDist > fDist;  ; UNUR_GEN * fGen;  ; std::string fMethod;  ; TRandom * fRng;  ; UNUR_DISTR * fUdistr;  ; UNUR_URNG * fUrng;  . #include <TUnuran.h>; Constructor & Destructor Documentation. ◆ TUnuran() [1/3]. TUnuran::TUnuran ; (; TRandom * ; r = nullptr, . unsigned int ; log = 0 . ). Constructor with a generator instance and given level ",MatchSource.WIKI,doc/master/classTUnuran.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuran.html
Deployability,continuous,continuous,"generator in the constructor of the class, its seed via the TUnuran::SetSeed() method. ; Definition at line 79 of file TUnuran.h. Public Member Functions;  TUnuran (const TUnuran &)=delete;  ;  TUnuran (TRandom *r=nullptr, unsigned int log=0);  Constructor with a generator instance and given level of log output. ;  ;  TUnuran (TUnuran &&)=delete;  ;  ~TUnuran ();  Destructor. ;  ; int GetDimension () const;  Return the dimension of unuran generator method. ;  ; int GetDistType () const;  Return the type of the distribution. ;  ; std::string GetGenId () const;  Return an ID string about the unuran generator method. ;  ; std::string GetInfo (bool extended=false);  Return an information string about the used Unuran generator method. ;  ; TRandom * GetRandom ();  Return instance of the random engine used. ;  ; bool Init (const std::string &distr, const std::string &method);  Initialize with Unuran string API interface. ;  ; bool Init (const TUnuranContDist &distr, const std::string &method=""auto"");  Initialize method for continuous one-dimensional distribution. ;  ; bool Init (const TUnuranDiscrDist &distr, const std::string &method=""auto"");  Initialize method for continuous one-dimensional discrete distribution. ;  ; bool Init (const TUnuranEmpDist &distr, const std::string &method=""empk"");  Initialize method for continuous empirical distribution. ;  ; bool Init (const TUnuranMultiContDist &distr, const std::string &method=""vnrou"");  Initialize method for continuous multi-dimensional distribution. ;  ; bool InitBinomial (unsigned int ntot, double prob, const std::string &method=""dstd"");  Initialize method for the Binomial distribution. ;  ; bool InitPoisson (double mu, const std::string &method=""dstd"");  Initialize method for the Poisson distribution. ;  ; bool IsDistCont () const;  Return true for a univariate continuous distribution. ;  ; bool IsDistDiscrete () const;  Return true for a discrete distribution. ;  ; bool IsDistEmpirical () const;  Return true for an emp",MatchSource.WIKI,doc/master/classTUnuran.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuran.html
Integrability,wrap,wraps,". ROOT: TUnuran Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TUnuran Class ReferenceMath » Unuran. ; TUnuran class. ; Interface to the UNU.RAN package for generating non uniform random numbers. This class wraps the UNU.RAN calls in C++ methods. It provides methods for initializing Unuran and then to sample the desired distribution. It provides support for initializing UNU.RAN in these following way (various signatures for TUnuran::Init); with string API via TUnuran::Init passing the distribution type and the method; using a one-dimensional distribution object defined by TUnuranContDist; using a multi-dimensional distribution object defined by TUnuranMultiContDist; using a discrete one-dimensional distribution object defined by TUnuranDiscrDist; using an empirical distribution defined by TUnuranEmpDist; using pre-defined distributions. Presently only support for Poisson (TUnuran::InitPoisson) and Binomial (TUnuran::InitBinomial) are provided. Other distributions can however be generated using the previous methods (in particular via the string API). The sampling is provided via these methods:; TUnuran::Sample() returns a double for all one-dimensional distribution; TUnuran::SampleDiscr() returns an integer for one-dimensional discrete distribution; TUnuran::Sample(double *) sample a multi-dimensional distribution. A pointer to a vector with size at least equal to the distribution dimension must be passed. In addition is possible to set the random number generator in the constructor of the class, its seed via the TUnuran::SetSeed() method. ; Definition at line 79 of file TUnuran.h. Public Member Functions;  TUnuran (const TUnuran &)=delete;  ;  TUnuran (TRandom *r=nullptr, unsigned int log=0);  Constructor with a generator instance and given level of log output. ;  ;  TUnuran (TUnuran &&)=delet",MatchSource.WIKI,doc/master/classTUnuran.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuran.html
Modifiability,extend,extended,"dimensional distribution; TUnuran::SampleDiscr() returns an integer for one-dimensional discrete distribution; TUnuran::Sample(double *) sample a multi-dimensional distribution. A pointer to a vector with size at least equal to the distribution dimension must be passed. In addition is possible to set the random number generator in the constructor of the class, its seed via the TUnuran::SetSeed() method. ; Definition at line 79 of file TUnuran.h. Public Member Functions;  TUnuran (const TUnuran &)=delete;  ;  TUnuran (TRandom *r=nullptr, unsigned int log=0);  Constructor with a generator instance and given level of log output. ;  ;  TUnuran (TUnuran &&)=delete;  ;  ~TUnuran ();  Destructor. ;  ; int GetDimension () const;  Return the dimension of unuran generator method. ;  ; int GetDistType () const;  Return the type of the distribution. ;  ; std::string GetGenId () const;  Return an ID string about the unuran generator method. ;  ; std::string GetInfo (bool extended=false);  Return an information string about the used Unuran generator method. ;  ; TRandom * GetRandom ();  Return instance of the random engine used. ;  ; bool Init (const std::string &distr, const std::string &method);  Initialize with Unuran string API interface. ;  ; bool Init (const TUnuranContDist &distr, const std::string &method=""auto"");  Initialize method for continuous one-dimensional distribution. ;  ; bool Init (const TUnuranDiscrDist &distr, const std::string &method=""auto"");  Initialize method for continuous one-dimensional discrete distribution. ;  ; bool Init (const TUnuranEmpDist &distr, const std::string &method=""empk"");  Initialize method for continuous empirical distribution. ;  ; bool Init (const TUnuranMultiContDist &distr, const std::string &method=""vnrou"");  Initialize method for continuous multi-dimensional distribution. ;  ; bool InitBinomial (unsigned int ntot, double prob, const std::string &method=""dstd"");  Initialize method for the Binomial distribution. ;  ; bool InitPoiss",MatchSource.WIKI,doc/master/classTUnuran.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuran.html
Performance,perform,perform,"ization is needed whenever distribution parameters have been changed.; The default method used for multi-dimensional distributions is ""vnrou"" Note that some of the multi-dimensional continuous distribution methods like ""hitro"" are based on Markov-CHain sampler and they are much faster for sampling but require more time to converge. Furthermore, since they are Markov-Chain methods their generated sample values are correlated and cannot be used as i.i.d., one can instead use the obtained sample distribution. (see also the ROOT issue: #10222 ). ; Definition at line 92 of file TUnuran.cxx. ◆ InitBinomial(). bool TUnuran::InitBinomial ; (; unsigned int ; ntot, . double ; prob, . const std::string & ; method = ""dstd"" . ). Initialize method for the Binomial distribution. ; Used to generate poisson numbers for a constant parameters (n,p) of the Binomial distribution. Use after the method TUnuran::SampleDiscr to generate the numbers. The flag reinit perform a fast re-initialization when only the distribution parameters are changed in the subsequent calls. If the same TUnuran object is used to generate with other distributions it cannot be used. ; Definition at line 462 of file TUnuran.cxx. ◆ InitPoisson(). bool TUnuran::InitPoisson ; (; double ; mu, . const std::string & ; method = ""dstd"" . ). Initialize method for the Poisson distribution. ; Used to generate poisson numbers for a constant parameter mu of the Poisson distribution. Use after the method TUnuran::SampleDiscr to generate the numbers. The flag reinit perform a fast re-initialization when only the distribution parameters are changed in the subsequent calls. If the same TUnuran object is used to generate with other distributions it cannot be used. ; Definition at line 448 of file TUnuran.cxx. ◆ IsDistCont(). bool TUnuran::IsDistCont ; (; ); const. Return true for a univariate continuous distribution. ; Definition at line 390 of file TUnuran.cxx. ◆ IsDistDiscrete(). bool TUnuran::IsDistDiscrete ; (; ); const. Return",MatchSource.WIKI,doc/master/classTUnuran.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuran.html
Testability,log,log,"ensional distribution object defined by TUnuranDiscrDist; using an empirical distribution defined by TUnuranEmpDist; using pre-defined distributions. Presently only support for Poisson (TUnuran::InitPoisson) and Binomial (TUnuran::InitBinomial) are provided. Other distributions can however be generated using the previous methods (in particular via the string API). The sampling is provided via these methods:; TUnuran::Sample() returns a double for all one-dimensional distribution; TUnuran::SampleDiscr() returns an integer for one-dimensional discrete distribution; TUnuran::Sample(double *) sample a multi-dimensional distribution. A pointer to a vector with size at least equal to the distribution dimension must be passed. In addition is possible to set the random number generator in the constructor of the class, its seed via the TUnuran::SetSeed() method. ; Definition at line 79 of file TUnuran.h. Public Member Functions;  TUnuran (const TUnuran &)=delete;  ;  TUnuran (TRandom *r=nullptr, unsigned int log=0);  Constructor with a generator instance and given level of log output. ;  ;  TUnuran (TUnuran &&)=delete;  ;  ~TUnuran ();  Destructor. ;  ; int GetDimension () const;  Return the dimension of unuran generator method. ;  ; int GetDistType () const;  Return the type of the distribution. ;  ; std::string GetGenId () const;  Return an ID string about the unuran generator method. ;  ; std::string GetInfo (bool extended=false);  Return an information string about the used Unuran generator method. ;  ; TRandom * GetRandom ();  Return instance of the random engine used. ;  ; bool Init (const std::string &distr, const std::string &method);  Initialize with Unuran string API interface. ;  ; bool Init (const TUnuranContDist &distr, const std::string &method=""auto"");  Initialize method for continuous one-dimensional distribution. ;  ; bool Init (const TUnuranDiscrDist &distr, const std::string &method=""auto"");  Initialize method for continuous one-dimensional discrete distri",MatchSource.WIKI,doc/master/classTUnuran.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuran.html
Deployability,continuous,continuous,". ROOT: TUnuranContDist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TUnuranContDist Class ReferenceMath » Unuran. ; TUnuranContDist class describing one dimensional continuous distribution. ; It is used by TUnuran to generate random numbers according to this distribution via TUnuran::Sample(); The class can be constructed from a function (TF1) representing the probability density function of the distribution. Optionally the derivative of the pdf can also be passed.; It provides a method to set the domain of the distribution ( SetDomain ) which will correspond to the range of the generated random numbers. By default the domain is (-inf, + inf), independently of the range set in the TF1 class used to construct the distribution.; In addition, some UNURAN methods requires extra information (cdf function, distribution mode, area of pdf, etc...). This information can as well be set. Some methods require instead of the pdf the log of the pdf. This can also be controlled by setting a flag when constructing this class. ; Definition at line 48 of file TUnuranContDist.h. Public Member Functions;  TUnuranContDist (const ROOT::Math::IGenFunction &pdf, const ROOT::Math::IGenFunction *dpdf=nullptr, bool isLogPdf=false, bool copyFunc=false);  Constructor as before but from a generic function object interface for one-dim functions. ;  ;  TUnuranContDist (const ROOT::Math::IGenFunction *pdf, const ROOT::Math::IGenFunction *dpdf, const ROOT::Math::IGenFunction *cdf, bool isLogPdf=false, bool copyFunc=false);  Constructor as before from pointers to generic function object interface for one-dim functions which can be use for all algorithms including those requiring only the Cdf. ;  ;  TUnuranContDist (const TUnuranContDist &);  Copy constructor. ;  ;  TUnuranContDist (TF1 *pdf, TF1 *deriv, TF1 *cdf, bool isLo",MatchSource.WIKI,doc/master/classTUnuranContDist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuranContDist.html
Integrability,interface,interface,"TUnuran to generate random numbers according to this distribution via TUnuran::Sample(); The class can be constructed from a function (TF1) representing the probability density function of the distribution. Optionally the derivative of the pdf can also be passed.; It provides a method to set the domain of the distribution ( SetDomain ) which will correspond to the range of the generated random numbers. By default the domain is (-inf, + inf), independently of the range set in the TF1 class used to construct the distribution.; In addition, some UNURAN methods requires extra information (cdf function, distribution mode, area of pdf, etc...). This information can as well be set. Some methods require instead of the pdf the log of the pdf. This can also be controlled by setting a flag when constructing this class. ; Definition at line 48 of file TUnuranContDist.h. Public Member Functions;  TUnuranContDist (const ROOT::Math::IGenFunction &pdf, const ROOT::Math::IGenFunction *dpdf=nullptr, bool isLogPdf=false, bool copyFunc=false);  Constructor as before but from a generic function object interface for one-dim functions. ;  ;  TUnuranContDist (const ROOT::Math::IGenFunction *pdf, const ROOT::Math::IGenFunction *dpdf, const ROOT::Math::IGenFunction *cdf, bool isLogPdf=false, bool copyFunc=false);  Constructor as before from pointers to generic function object interface for one-dim functions which can be use for all algorithms including those requiring only the Cdf. ;  ;  TUnuranContDist (const TUnuranContDist &);  Copy constructor. ;  ;  TUnuranContDist (TF1 *pdf, TF1 *deriv, TF1 *cdf, bool isLogPdf=false);  Constructor as above but with the possibility to pass also the Cdf. ;  ;  TUnuranContDist (TF1 *pdf=nullptr, TF1 *deriv=nullptr, bool isLogPdf=false);  Constructor from a TF1 objects specifying the pdf and optionally from another function representing the derivative of the pdf. ;  ;  ~TUnuranContDist () override;  Destructor. ;  ; double Cdf (double x) const;  evaluate t",MatchSource.WIKI,doc/master/classTUnuranContDist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuranContDist.html
Modifiability,inherit,inherited," pre-computed mode ;  ; bool HasPdfArea () const;  check if distribution has a pre-computed area below the Pdf ;  ; TClass * IsA () const override;  ; bool IsLogPdf () const;  flag to control if given function represent the log of a pdf ;  ; double Mode () const;  return the mode (x location of maximum of the pdf) ;  ; TUnuranContDist & operator= (const TUnuranContDist &rhs);  Assignment operator. ;  ; double Pdf (double x) const;  evaluate the Probability Density function. ;  ; double PdfArea () const;  return area below the pdf ;  ; void SetCdf (const ROOT::Math::IGenFunction &cdf);  set cdf distribution using a generic function interface ;  ; void SetCdf (TF1 *cdf);  set cdf distribution. ;  ; void SetDomain (double xmin, double xmax);  Set the distribution domain. ;  ; void SetMode (double mode);  set the distribution mode (x position of its maximum) ;  ; void SetPdfArea (double area);  set the area below the pdf ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TUnuranBaseDist; virtual ~TUnuranBaseDist ();  Destructor (no operations) ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TUnuranBaseDist; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; double fArea;  area below pdf ;  ; const ROOT::Math::IGenFunction * fCdf;  pointer to the cdf (cumulative dist.) ;  ; const ROOT::Math::IGenFunction * fDPdf;  pointer to the derivative of the pdf ;  ; bool fHasArea;  flag to control if distribution has a pre-computed area below the pdf ;  ; bool fHasDomain;  flag to control if distribution has a def",MatchSource.WIKI,doc/master/classTUnuranContDist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuranContDist.html
Testability,log,log,"hing...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TUnuranContDist Class ReferenceMath » Unuran. ; TUnuranContDist class describing one dimensional continuous distribution. ; It is used by TUnuran to generate random numbers according to this distribution via TUnuran::Sample(); The class can be constructed from a function (TF1) representing the probability density function of the distribution. Optionally the derivative of the pdf can also be passed.; It provides a method to set the domain of the distribution ( SetDomain ) which will correspond to the range of the generated random numbers. By default the domain is (-inf, + inf), independently of the range set in the TF1 class used to construct the distribution.; In addition, some UNURAN methods requires extra information (cdf function, distribution mode, area of pdf, etc...). This information can as well be set. Some methods require instead of the pdf the log of the pdf. This can also be controlled by setting a flag when constructing this class. ; Definition at line 48 of file TUnuranContDist.h. Public Member Functions;  TUnuranContDist (const ROOT::Math::IGenFunction &pdf, const ROOT::Math::IGenFunction *dpdf=nullptr, bool isLogPdf=false, bool copyFunc=false);  Constructor as before but from a generic function object interface for one-dim functions. ;  ;  TUnuranContDist (const ROOT::Math::IGenFunction *pdf, const ROOT::Math::IGenFunction *dpdf, const ROOT::Math::IGenFunction *cdf, bool isLogPdf=false, bool copyFunc=false);  Constructor as before from pointers to generic function object interface for one-dim functions which can be use for all algorithms including those requiring only the Cdf. ;  ;  TUnuranContDist (const TUnuranContDist &);  Copy constructor. ;  ;  TUnuranContDist (TF1 *pdf, TF1 *deriv, TF1 *cdf, bool isLogPdf=false);  Constructor as above but with the possibility to pass also the Cdf. ;  ;  TUnuranContD",MatchSource.WIKI,doc/master/classTUnuranContDist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuranContDist.html
Integrability,interface,interface," (required by base class) ;  ; bool GetDomain (int &xmin, int &xmax) const;  check if distribution has domain and return in case its domain ;  ; bool HasCdf () const;  flag to control if distribution provides also a Cdf ;  ; bool HasMode () const;  flag to control if distribution provides the mode ;  ; bool HasProbSum () const;  flag to control if distribution provides the total area of the probability function ;  ; TClass * IsA () const override;  ; int Mode () const;  get the mode (x location of function maximum) ;  ; TUnuranDiscrDist & operator= (const TUnuranDiscrDist &rhs);  Assignment operator. ;  ; double Pmf (int x) const;  evaluate the distribution (probability mesh function) at the integer value x. ;  ; double ProbSum () const;  return area of the pdf ;  ; const std::vector< double > & ProbVec () const;  retrieve a reference to the vector of the probabilities : Prob(i) If the distribution is defined from a function (i.e. ;  ; void SetCdf (const ROOT::Math::IGenFunction &cdf);  set cdf distribution from a generic function interface. ;  ; void SetCdf (TF1 *cdf);  set cdf distribution from a TF1 pointer. ;  ; void SetDomain (int xmin, int xmax);  Set the distribution domain, by default the domain is [0,INT_MAX] If xmin >= xmax a domain is removed. ;  ; void SetMode (int mode);  set the mode of the distribution (location of maximum probability) ;  ; void SetProbSum (double sum);  set the value of the sum of the probabilities in the given domain ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TUnuranBaseDist; virtual ~TUnuranBaseDist ();  Destructor (no operations) ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from",MatchSource.WIKI,doc/master/classTUnuranDiscrDist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuranDiscrDist.html
Modifiability,inherit,inherited," ;  ; TUnuranDiscrDist & operator= (const TUnuranDiscrDist &rhs);  Assignment operator. ;  ; double Pmf (int x) const;  evaluate the distribution (probability mesh function) at the integer value x. ;  ; double ProbSum () const;  return area of the pdf ;  ; const std::vector< double > & ProbVec () const;  retrieve a reference to the vector of the probabilities : Prob(i) If the distribution is defined from a function (i.e. ;  ; void SetCdf (const ROOT::Math::IGenFunction &cdf);  set cdf distribution from a generic function interface. ;  ; void SetCdf (TF1 *cdf);  set cdf distribution from a TF1 pointer. ;  ; void SetDomain (int xmin, int xmax);  Set the distribution domain, by default the domain is [0,INT_MAX] If xmin >= xmax a domain is removed. ;  ; void SetMode (int mode);  set the mode of the distribution (location of maximum probability) ;  ; void SetProbSum (double sum);  set the value of the sum of the probabilities in the given domain ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TUnuranBaseDist; virtual ~TUnuranBaseDist ();  Destructor (no operations) ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TUnuranBaseDist; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; const ROOT::Math::IGenFunction * fCdf;  pointer to the cumulative distribution function ;  ; bool fHasDomain;  flag to control if distribution has a defined domain (otherwise is [0,INT_MAX]) ;  ; bool fHasMode;  flag to control if distribution has a pre-computed mode ;  ; bool fHasSum;  flag to control if distribution has a p",MatchSource.WIKI,doc/master/classTUnuranDiscrDist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuranDiscrDist.html
Modifiability,inherit,inherited," from a set of 1D data. ;  ;  TUnuranEmpDist (unsigned int n, double *x, double *y);  Constructor from a set of 2D data. ;  ;  TUnuranEmpDist (unsigned int n, double *x, double *y, double *z);  Constructor from a set of 3D data. ;  ;  ~TUnuranEmpDist () override;  Destructor (no operations) ;  ; TUnuranEmpDist * Clone () const override;  Clone (required by base class) ;  ; const std::vector< double > & Data () const;  Return reference to data vector (unbinned or binned data) ;  ; TClass * IsA () const override;  ; bool IsBinned () const;  Flag to control if data are binned. ;  ; double LowerBin () const;  Min value of binned data (return 0 for unbinned data) ;  ; unsigned int NDim () const;  Number of data dimensions. ;  ; TUnuranEmpDist & operator= (const TUnuranEmpDist &rhs);  Assignment operator. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; double UpperBin () const;  upper value of binned data (return 0 for unbinned data) ;  ;  Public Member Functions inherited from TUnuranBaseDist; virtual ~TUnuranBaseDist ();  Destructor (no operations) ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TUnuranBaseDist; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; bool fBinned;  flag for binned/unbinned data ;  ; std::vector< double > fData;  pointer to the data vector (used for generation from un-binned data) ;  ; unsigned int fDim;  data dimensionality ;  ; double fMax;  max values (used in the binned case) ;  ; double fMin;  min values (used in the binned case) ;  . #include <TUnuranEmpDist.h>. Inheritance diagram for TUnuranEmpDist:. Th",MatchSource.WIKI,doc/master/classTUnuranEmpDist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuranEmpDist.html
Deployability,continuous,continuous,". ROOT: TUnuranMultiContDist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TUnuranMultiContDist Class ReferenceMath » Unuran. ; TUnuranMultiContDist class describing multi dimensional continuous distributions. ; It is used by TUnuran to generate a set of random numbers according to this distribution via TUnuran::Sample(double *). The class can be constructed from a multi-dimensional function (TF1 pointer, which can be actually also a TF2 or a TF3). It provides a method to set the domain of the distribution ( SetDomain ) which will correspond to the range of the generated random numbers. By default the domain is [(-inf,-inf,...)(+inf,+inf,...)], independently of the range set in the TF1 class used to construct the distribution.; The derivatives of the pdf which are used by some UNURAN methods are estimated numerically in the Derivative() method. Some extra information (like distribution mode) can be set using SetMode. Some methods require instead of the pdf the log of the pdf. This can also be controlled by setting a flag when constructing this class. ; Definition at line 47 of file TUnuranMultiContDist.h. Public Member Functions;  TUnuranMultiContDist (const ROOT::Math::IMultiGenFunction &pdf, bool isLogPdf=false);  Constructor as before but from a generic function object interface for multi-dim functions. ;  ;  TUnuranMultiContDist (const TUnuranMultiContDist &);  Copy constructor. ;  ;  TUnuranMultiContDist (TF1 *func=nullptr, unsigned int dim=0, bool isLogPdf=false);  Constructor from a TF1 object representing the Probability density function. ;  ;  ~TUnuranMultiContDist () override;  Destructor. ;  ; TUnuranMultiContDist * Clone () const override;  Clone (required by base class) ;  ; double Derivative (const double *x, int icoord) const;  evaluate the partial derivative for the given co",MatchSource.WIKI,doc/master/classTUnuranMultiContDist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuranMultiContDist.html
Integrability,interface,interface,"y TUnuran to generate a set of random numbers according to this distribution via TUnuran::Sample(double *). The class can be constructed from a multi-dimensional function (TF1 pointer, which can be actually also a TF2 or a TF3). It provides a method to set the domain of the distribution ( SetDomain ) which will correspond to the range of the generated random numbers. By default the domain is [(-inf,-inf,...)(+inf,+inf,...)], independently of the range set in the TF1 class used to construct the distribution.; The derivatives of the pdf which are used by some UNURAN methods are estimated numerically in the Derivative() method. Some extra information (like distribution mode) can be set using SetMode. Some methods require instead of the pdf the log of the pdf. This can also be controlled by setting a flag when constructing this class. ; Definition at line 47 of file TUnuranMultiContDist.h. Public Member Functions;  TUnuranMultiContDist (const ROOT::Math::IMultiGenFunction &pdf, bool isLogPdf=false);  Constructor as before but from a generic function object interface for multi-dim functions. ;  ;  TUnuranMultiContDist (const TUnuranMultiContDist &);  Copy constructor. ;  ;  TUnuranMultiContDist (TF1 *func=nullptr, unsigned int dim=0, bool isLogPdf=false);  Constructor from a TF1 object representing the Probability density function. ;  ;  ~TUnuranMultiContDist () override;  Destructor. ;  ; TUnuranMultiContDist * Clone () const override;  Clone (required by base class) ;  ; double Derivative (const double *x, int icoord) const;  evaluate the partial derivative for the given coordinate. ;  ; const double * GetLowerDomain () const;  get the distribution lower domain values. ;  ; const double * GetMode () const;  get the mode (vector of coordinate positions of the maxima of the distribution) If a mode has not defined return a NULL pointer ;  ; const double * GetUpperDomain () const;  get the distribution upper domain values. ;  ; void Gradient (const double *x, double *grad) ",MatchSource.WIKI,doc/master/classTUnuranMultiContDist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuranMultiContDist.html
Modifiability,inherit,inherited,"NULL pointer ;  ; const double * GetUpperDomain () const;  get the distribution upper domain values. ;  ; void Gradient (const double *x, double *grad) const;  evaluate the gradient vector of the Pdf. ;  ; TClass * IsA () const override;  ; bool IsLogPdf () const;  flag to control if given function represent the log of a pdf ;  ; unsigned int NDim () const;  get number of dimension of the distribution ;  ; TUnuranMultiContDist & operator= (const TUnuranMultiContDist &rhs);  Assignment operator. ;  ; double Pdf (const double *x) const;  evaluate the probability density function, used by UnuRan ;  ; void SetDomain (const double *xmin, const double *xmax);  set the domain of the distribution giving an array of minimum and maximum values By default otherwise the domain is undefined, i.e. ;  ; void SetMode (const double *x);  set the mode of the distribution (coordinates of the distribution maximum values) ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TUnuranBaseDist; virtual ~TUnuranBaseDist ();  Destructor (no operations) ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TUnuranBaseDist; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; bool fIsLogPdf;  flag to control if function pointer represent log of pdf ;  ; std::vector< double > fMode;  vector representing the x coordinates of the maximum of the pdf ;  ; bool fOwnFunc;  flag to indicate if class manages the function pointers ;  ; const ROOT::Math::IMultiGenFunction * fPdf;  ; std::vector< double > fXmax;  vector with upper x values of the d",MatchSource.WIKI,doc/master/classTUnuranMultiContDist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuranMultiContDist.html
Testability,log,log,"embers |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TUnuranMultiContDist Class ReferenceMath » Unuran. ; TUnuranMultiContDist class describing multi dimensional continuous distributions. ; It is used by TUnuran to generate a set of random numbers according to this distribution via TUnuran::Sample(double *). The class can be constructed from a multi-dimensional function (TF1 pointer, which can be actually also a TF2 or a TF3). It provides a method to set the domain of the distribution ( SetDomain ) which will correspond to the range of the generated random numbers. By default the domain is [(-inf,-inf,...)(+inf,+inf,...)], independently of the range set in the TF1 class used to construct the distribution.; The derivatives of the pdf which are used by some UNURAN methods are estimated numerically in the Derivative() method. Some extra information (like distribution mode) can be set using SetMode. Some methods require instead of the pdf the log of the pdf. This can also be controlled by setting a flag when constructing this class. ; Definition at line 47 of file TUnuranMultiContDist.h. Public Member Functions;  TUnuranMultiContDist (const ROOT::Math::IMultiGenFunction &pdf, bool isLogPdf=false);  Constructor as before but from a generic function object interface for multi-dim functions. ;  ;  TUnuranMultiContDist (const TUnuranMultiContDist &);  Copy constructor. ;  ;  TUnuranMultiContDist (TF1 *func=nullptr, unsigned int dim=0, bool isLogPdf=false);  Constructor from a TF1 object representing the Probability density function. ;  ;  ~TUnuranMultiContDist () override;  Destructor. ;  ; TUnuranMultiContDist * Clone () const override;  Clone (required by base class) ;  ; double Derivative (const double *x, int icoord) const;  evaluate the partial derivative for the given coordinate. ;  ; const double * GetLowerDomain () const;  get the distribution lower domain values. ;  ; const double * GetMode () const;  ge",MatchSource.WIKI,doc/master/classTUnuranMultiContDist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUnuranMultiContDist.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTUploadDataSetDlg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUploadDataSetDlg.html
Integrability,message,messages," (TSessionViewer *gui, Int_t w, Int_t h);  Create a Upload DataSet dialog box. Used to create and upload a dataset. ;  ;  ~TUploadDataSetDlg () override;  Delete chain dialog. ;  ; void AddFiles (const char *fileName);  Add File name(s) from the file location URL to the list view. ;  ; void AddFiles (TList *fileList);  Add File name(s) from the file location URL to the list view. ;  ; void BrowseFiles ();  Opens the TGFileDialog to allow user to select local file(s) to be added in the list view of dataset files. ;  ; void ClearFiles ();  Clear content of the list view. ;  ; void CloseWindow () override;  Close upload dataset dialog. ;  ; TClass * IsA () const override;  ; void OnAppendFiles (Bool_t on);  Notification of Append Files check button. ;  ; void OnOverwriteDataset (Bool_t on);  Notification of Overwrite Dataset check button. ;  ; void OnOverwriteFiles (Bool_t on);  Notification of Overwrite Files check button. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for upload dataset dialog. ;  ; void RemoveFile ();  Remove the selected entry from the list view. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UploadDataSet ();  Upload the dataset to the server. ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI",MatchSource.WIKI,doc/master/classTUploadDataSetDlg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUploadDataSetDlg.html
Modifiability,inherit,inherited,"ct local file(s) to be added in the list view of dataset files. ;  ; void ClearFiles ();  Clear content of the list view. ;  ; void CloseWindow () override;  Close upload dataset dialog. ;  ; TClass * IsA () const override;  ; void OnAppendFiles (Bool_t on);  Notification of Append Files check button. ;  ; void OnOverwriteDataset (Bool_t on);  Notification of Overwrite Dataset check button. ;  ; void OnOverwriteFiles (Bool_t on);  Notification of Overwrite Files check button. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for upload dataset dialog. ;  ; void RemoveFile ();  Remove the selected entry from the list view. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UploadDataSet ();  Upload the dataset to the server. ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a ",MatchSource.WIKI,doc/master/classTUploadDataSetDlg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUploadDataSetDlg.html
Security,hash,hash,"indow * GetParent () const;  ; virtual Bool_t HandleExpose (Event_t *event);  ; virtual Bool_t HandleIdleEvent (TGIdleHandler *);  ; Bool_t HandleTimer (TTimer *) override;  Execute action in response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTUploadDataSetDlg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUploadDataSetDlg.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUri.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUri.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUri.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUri.html
Modifiability,variab,variables,"ve-part [ ""?"" query ] [ ""#"" fragment ] cf. ;  ; Bool_t IsSortable () const override;  ; Bool_t IsUri () const;  Returns kTRUE if instance qualifies as URI URI = scheme "":"" hier-part [ ""?"" query ] [ ""#"" fragment ] cf. ;  ; void Normalise ();  Syntax based normalisation according to RFC chapter 6.2.2. ;  ; TUri & operator= (const TUri &rhs);  TUri assignment operator. ;  ; void Print (Option_t *option="""") const override;  Display function,. ;  ; void Reset ();  Initialize this URI object. ;  ; Bool_t SetAuthority (const TString &authority);  Set authority part of URI: ;  ; Bool_t SetFragment (const TString &fragment);  Set fragment component of URI: ;  ; Bool_t SetHierPart (const TString &hier);  returns hier-part component of URI ;  ; Bool_t SetHost (const TString &host);  Set host component of URI: ;  ; Bool_t SetPath (const TString &path);  Set path component of URI: ;  ; Bool_t SetPort (const TString &port);  Set port component of URI: ;  ; Bool_t SetQuery (const TString &path);  Set query component of URI: ;  ; Bool_t SetRelativePart (const TString &);  Returns kTRUE is string qualifies as relative-part: ;  ; Bool_t SetScheme (const TString &scheme);  Set scheme component of URI: ;  ; Bool_t SetUri (const TString &uri);  Parse URI and set the member variables accordingly, returns kTRUE if URI validates, and kFALSE otherwise: ;  ; Bool_t SetUserInfo (const TString &userinfo);  Set userinfo component of URI: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to cu",MatchSource.WIKI,doc/master/classTUri.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUri.html
Security,validat,validating,". ROOT: TUri Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Friends |; List of all members ; TUri Class ReferenceCore ROOT classes » Base ROOT classes. ; This class represents a RFC 3986 compatible URI. ; See alsohttps://doi.org/10.17487/RFC3986 It provides member functions to set and return the different the different parts of an URI. The functionality is that of a validating parser. ; Definition at line 35 of file TUri.h. Public Member Functions;  TUri ();  ;  TUri (const char *uri);  Constructor that calls SetUri with a complete URI. ;  ;  TUri (const TString &uri);  Constructor that calls SetUri with a complete URI. ;  ;  TUri (const TUri &uri);  TUri copy ctor. ;  ; virtual ~TUri ();  ; const TString GetAuthority () const;  Returns the authority part of the instance: ;  ; const TString GetFragment () const;  ; const TString GetHierPart () const;  ; const TString GetHost () const;  ; const TString GetPath () const;  ; const TString GetPort () const;  ; const TString GetQuery () const;  ; const TString GetRelativePart () const;  relative-part = ""//"" authority path-abempty ;  ; const TString GetScheme () const;  ; const TString GetUri () const;  Returns the whole URI - an implementation of chapter 5.3 component recomposition. ;  ; const TString GetUserInfo () const;  ; Bool_t HasAuthority () const;  ; Bool_t HasFragment () const;  ; Bool_t HasHierPart () const;  ; Bool_t HasHost () const;  ; Bool_t HasPath () const;  ; Bool_t HasPort () const;  ; Bool_t HasQuery () const;  ; Bool_t HasRelativePart () const;  ; Bool_t HasScheme () const;  ; Bool_t HasUserInfo () const;  ; TClass * IsA () const override;  ; Bool_t IsAbsolute () const;  Returns kTRUE if instance qualifies as absolute-URI absolute-URI = scheme "":"" hier-part [ ""?"" query ] cf. ;  ; Bool_t IsReference () const;  Returns kTRUE if instance qualifies as ",MatchSource.WIKI,doc/master/classTUri.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUri.html
Usability,simpl,simply,"a valid pct-encoded string. ; Definition at line 1086 of file TUri.cxx. ◆ PctDecodeUnreserved(). TString const TUri::PctDecodeUnreserved ; (; const TString & ; source). static . Percent-decode the given string according to chapter 2.1 we assume a valid pct-encoded string. ; Definition at line 1012 of file TUri.cxx. ◆ PctEncode(). const TString TUri::PctEncode ; (; const TString & ; source). static . Percent-encode and return the given string according to RFC 3986 in principle, this function cannot fail or produce an error. ; Definition at line 815 of file TUri.cxx. ◆ PctNormalise(). TString const TUri::PctNormalise ; (; const TString & ; source). static . Normalise the percent-encoded parts of the string i.e. ; uppercase the hexadecimal digits %[:alpha:][:alpha:] -> %[:ALPHA:][:ALPHA:] ; Definition at line 1057 of file TUri.cxx. ◆ Print(). void TUri::Print ; (; Option_t * ; option = """"); const. overridevirtual . Display function,. . option ""d"" .. debug output; anything else .. simply print URI. . Reimplemented from TObject.; Definition at line 528 of file TUri.cxx. ◆ RemoveDotSegments(). const TString TUri::RemoveDotSegments ; (; const TString & ; inp). static . This functions implements the ""remove_dot_segments"" routine of chapter 5.2.4 ""for interpreting and removing the special '. ; ' and '..' complete path segments from a referenced path"". ; Definition at line 159 of file TUri.cxx. ◆ Reset(). void TUri::Reset ; (; ). Initialize this URI object. ; Set all TString members to empty string, set all Bool_t members to kFALSE. ; Definition at line 571 of file TUri.cxx. ◆ SetAuthority(). Bool_t TUri::SetAuthority ; (; const TString & ; authority). Set authority part of URI: ; authority = [ userinfo ""@"" ] host [ "":"" port ]; Split into components {userinfo@, host, :port}, remember that according to the RFC, it is necessary to distinguish between missing component (no delimiter) and empty component (delimiter present). ; Definition at line 338 of file TUri.cxx. ◆ SetFragmen",MatchSource.WIKI,doc/master/classTUri.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUri.html
Availability,error,error,"  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUrl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUrl.html
Integrability,protocol,protocol,"_t, a missing key returns -1. ;  ; const char * GetOptions () const;  ; const char * GetPasswd () const;  ; Int_t GetPort () const;  ; const char * GetProtocol () const;  ; const char * GetUrl (Bool_t withDeflt=kFALSE) const;  Return full URL. ;  ; const char * GetUser () const;  ; const char * GetValueFromOptions (const char *key) const;  Return a value for a given key from the URL options. ;  ; Bool_t HasOption (const char *key) const;  Returns true if the given key appears in the URL options list. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; Bool_t IsValid () const;  ; TUrl & operator= (const TUrl &rhs);  TUrl assignment operator. ;  ; void ParseOptions () const;  Parse URL options into a key/value map. ;  ; void Print (Option_t *option="""") const override;  Print URL on stdout. ;  ; void SetAnchor (const char *anchor);  ; void SetFile (const char *file);  ; void SetHost (const char *host);  ; void SetOptions (const char *opt);  ; void SetPasswd (const char *pw);  ; void SetPort (Int_t port);  ; void SetProtocol (const char *proto, Bool_t setDefaultPort=kFALSE);  Set protocol and, optionally, change the port accordingly. ;  ; void SetUrl (const char *url, Bool_t defaultIsFile=kFALSE);  Parse url character string and split in its different subcomponents. ;  ; void SetUser (const char *user);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden fo",MatchSource.WIKI,doc/master/classTUrl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUrl.html
Modifiability,inherit,inherited,"list. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; Bool_t IsValid () const;  ; TUrl & operator= (const TUrl &rhs);  TUrl assignment operator. ;  ; void ParseOptions () const;  Parse URL options into a key/value map. ;  ; void Print (Option_t *option="""") const override;  Print URL on stdout. ;  ; void SetAnchor (const char *anchor);  ; void SetFile (const char *file);  ; void SetHost (const char *host);  ; void SetOptions (const char *opt);  ; void SetPasswd (const char *pw);  ; void SetPort (Int_t port);  ; void SetProtocol (const char *proto, Bool_t setDefaultPort=kFALSE);  Set protocol and, optionally, change the port accordingly. ;  ; void SetUrl (const char *url, Bool_t defaultIsFile=kFALSE);  Parse url character string and split in its different subcomponents. ;  ; void SetUser (const char *user);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  ",MatchSource.WIKI,doc/master/classTUrl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUrl.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTUrl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUrl.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUsrHit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrHit.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUsrHit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrHit.html
Modifiability,inherit,inherited,". ROOT: TUsrHit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TUsrHit Class Reference. . Definition at line 4 of file clonesA_Event.h. Public Member Functions;  TUsrHit (Int_t ev=0);  ; virtual ~TUsrHit ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance ",MatchSource.WIKI,doc/master/classTUsrHit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrHit.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTUsrHit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrHit.html
Availability,error,error,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUsrHitBuffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrHitBuffer.html
Integrability,message,message,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUsrHitBuffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrHitBuffer.html
Modifiability,inherit,inherited,". ROOT: TUsrHitBuffer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TUsrHitBuffer Class Reference. . Definition at line 20 of file clonesA_Event.h. Public Member Functions;  TUsrHitBuffer (Int_t maxent=10);  ; virtual ~TUsrHitBuffer ();  ; TUsrHit * AddHit (Int_t ev);  ; void Clear (Option_t *opt="""");  ; Int_t GetBufSize ();  ; TClonesArray * GetCA ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *opt",MatchSource.WIKI,doc/master/classTUsrHitBuffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrHitBuffer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTUsrHitBuffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrHitBuffer.html
Availability,error,error,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUsrSevtData1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrSevtData1.html
Integrability,message,message,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUsrSevtData1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrSevtData1.html
Modifiability,inherit,inherited,". ROOT: TUsrSevtData1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TUsrSevtData1 Class Reference. . Definition at line 63 of file clonesA_Event.h. Public Member Functions;  TUsrSevtData1 ();  ; virtual ~TUsrSevtData1 ();  ; Int_t GetPileup ();  ; virtual TClass * IsA () const;  ; void SetEvent (Int_t ev);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMrbSubevent_Caen;  TMrbSubevent_Caen ();  ; virtual ~TMrbSubevent_Caen ();  ; void Clear (Option_t *="""");  ; TUsrHitBuffer * GetHitBuffer ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  D",MatchSource.WIKI,doc/master/classTUsrSevtData1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrSevtData1.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTUsrSevtData1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrSevtData1.html
Availability,error,error,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUsrSevtData2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrSevtData2.html
Integrability,message,message,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTUsrSevtData2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrSevtData2.html
Modifiability,inherit,inherited,". ROOT: TUsrSevtData2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TUsrSevtData2 Class Reference. . Definition at line 80 of file clonesA_Event.h. Public Member Functions;  TUsrSevtData2 ();  ; virtual ~TUsrSevtData2 ();  ; Int_t GetPileup ();  ; virtual TClass * IsA () const;  ; void SetEvent (Int_t ev);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMrbSubevent_Caen;  TMrbSubevent_Caen ();  ; virtual ~TMrbSubevent_Caen ();  ; void Clear (Option_t *="""");  ; TUsrHitBuffer * GetHitBuffer ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  D",MatchSource.WIKI,doc/master/classTUsrSevtData2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrSevtData2.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTUsrSevtData2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUsrSevtData2.html
Integrability,interface,interface,"UUID.h. ◆ FillBuffer(). void TUUID::FillBuffer ; (; char *& ; buffer). Stream UUID into output buffer. ; Definition at line 275 of file TUUID.cxx. ◆ Format(). void TUUID::Format ; (; UShort_t ; clockseq, . uuid_time_t ; ts . ). protected . Make a UUID from timestamp, clockseq and node id. ; Definition at line 324 of file TUUID.cxx. ◆ GetCurrentTime(). void TUUID::GetCurrentTime ; (; uuid_time_t * ; timestamp). protected . Get current time as 60 bit 100ns ticks since whenever. ; Compensate for the fact that real clock resolution is less than 100ns. ; Definition at line 341 of file TUUID.cxx. ◆ GetHostAddress(). TInetAddress TUUID::GetHostAddress ; (; ); const. Get address of host encoded in UUID. ; If host id is not an ethernet address, but random info, then the returned TInetAddress is not valid. ; Definition at line 657 of file TUUID.cxx. ◆ GetNodeIdentifier(). void TUUID::GetNodeIdentifier ; (; ). protected . Get node identifier. ; Try first to get network address, if no network interface try random info based on some machine parameters. ; Definition at line 426 of file TUUID.cxx. ◆ GetRandomInfo(). void TUUID::GetRandomInfo ; (; UChar_t ; seed[16]). protected . Get random info based on some machine parameters. ; Definition at line 511 of file TUUID.cxx. ◆ GetSystemTime(). void TUUID::GetSystemTime ; (; uuid_time_t * ; timestamp). protected . Get system time with 100ns precision. Time is since Oct 15, 1582. ; Definition at line 393 of file TUUID.cxx. ◆ GetTime(). TDatime TUUID::GetTime ; (; ); const. Get time from UUID. ; Definition at line 670 of file TUUID.cxx. ◆ GetUUID(). void TUUID::GetUUID ; (; UChar_t ; uuid[16]); const. Return uuid in specified buffer (16 byte = 128 bits). ; Definition at line 695 of file TUUID.cxx. ◆ GetUUIDNumber(). UInt_t TUUID::GetUUIDNumber ; (; ); const. inline . Definition at line 79 of file TUUID.h. ◆ Hash(). UShort_t TUUID::Hash ; (; ); const. Compute 16-bit hash value of the UUID. ; Definition at line 586 of file TUUID.cxx. ◆ IsA",MatchSource.WIKI,doc/master/classTUUID.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUUID.html
Performance,concurren,concurrent,". ROOT: TUUID Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TUUID Class ReferenceCore ROOT classes » Base ROOT classes. ; This class defines a UUID (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). ; A UUID is 128 bits long, and if generated according to this algorithm, is either guaranteed to be different from all other UUIDs/GUIDs generated until 3400 A.D. or extremely likely to be different. UUIDs were originally used in the Network Computing System (NCS) and later in the Open Software Foundation's (OSF) Distributed Computing Environment (DCE).; NoteIn the way this UUID is constructed, when used outside of their original concept (NCS), they are actually not Globally unique and indeed multiple distinct concurrent processes are actually likely to generate the same UUID. Technically this is because the UUID is constructed only from the node information and time information. To make a globally unique number, this needs to be combined with TProcessUUID.; Structure of universal unique IDs (UUIDs).; Depending on the network data representation, the multi- octet unsigned integer fields are subject to byte swapping when communicated between dissimilar endian machines. +-----------------------------------+; | low 32 bits of time | 0-3 .fTimeLow; +-------------------------------+----; | mid 16 bits of time | 4-5 .fTimeMid; +-------+-----------------------+; | vers. | hi 12 bits of time | 6-7 .fTimeHiAndVersion; +-------+-------+---------------+; |Res | clkSeqHi | 8 .fClockSeqHiAndReserved; +---------------+; | clkSeqLow | 9 .fClockSeqLow; +---------------+------------------+; | node ID | 10-15 .fNode; +----------------------------------+; hi#define hiDefinition THbookFile.cxx:128; The adjusted time stamp is split into three",MatchSource.WIKI,doc/master/classTUUID.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUUID.html
Safety,detect,detects," UUID version 1, this is represented by Coordinated Universal Time (UTC/GMT) as a count of 100-nanosecond intervals since 00:00:00.00, 15 October 1582 (the date of Gregorian reform to the Christian calendar).; The version number is multiplexed in the 4 most significant bits of the 'fTimeHiAndVersion' field. There are two defined versions: MSB <---; Version 4-Bit Code Description; ------------------------------------------------------------; | 1 0 0 0 1 DCE version, as specified herein.; | 2 0 0 1 0 DCE Security version, with; | embedded POSIX UIDs.; | 3 0 0 1 1 node id is a random value; ------------------------------------------------------------; a#define a(i)Definition RSha256.hxx:99; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142. Clock Sequence; The clock sequence value must be changed whenever:; The UUID generator detects that the local value of UTC has gone backward; this may be due to re-syncing of the system clock.; While a node is operational, the UUID service always saves the last UTC used to create a UUID. Each time a new UUID is created, the current UTC is compared to the saved value and if either the current value is less or the saved value was lost, then the clock sequence is incremented modulo 16,384, thus avoiding production of duplicated UUIDs.; The clock sequence must be initialized to a random number to minimize the correlation across system. This provides maximum protection against node identifiers that may move or switch from system to system rapidly. Clock Adjustment; UUIDs may be created at a rate greater than the system clock resolution. Therefore, the system must also maintain an adjustment value to be added to the lower-order bits of the time. Logically, each time the system clock ticks, the adjustment value is cleared. Every time a UUID is generated, the current adjustment value is ",MatchSource.WIKI,doc/master/classTUUID.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUUID.html
Security,hash,hash,"If a system overruns the clock adjustment by requesting too many UUIDs within a single system clock tick, the UUID generator will stall until the system clock catches up. ; Definition at line 42 of file TUUID.h. Classes; struct  uuid_time_t;  . Public Member Functions;  TUUID ();  Create a UUID. ;  ;  TUUID (const char *uuid_str);  Initialize a TUUID with uuid (which must be in TUUID::AsString() format). ;  ; virtual ~TUUID ();  delete this TUUID ;  ; const char * AsString () const;  Return UUID as string. Copy string immediately since it will be reused. ;  ; Int_t Compare (const TUUID &u) const;  Compare two UUIDs ""lexically"" and return. ;  ; void FillBuffer (char *&buffer);  Stream UUID into output buffer. ;  ; TInetAddress GetHostAddress () const;  Get address of host encoded in UUID. ;  ; TDatime GetTime () const;  Get time from UUID. ;  ; void GetUUID (UChar_t uuid[16]) const;  Return uuid in specified buffer (16 byte = 128 bits). ;  ; UInt_t GetUUIDNumber () const;  ; UShort_t Hash () const;  Compute 16-bit hash value of the UUID. ;  ; virtual TClass * IsA () const;  ; void Print () const;  Print UUID. ;  ; void ReadBuffer (char *&buffer);  Stream UUID from input buffer. ;  ; void SetUUID (const char *uuid_str);  Set this UUID to the value specified in uuid ((which must be in TUUID::AsString() format). ;  ; void SetUUIDNumber (UInt_t index);  ; Int_t Sizeof () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void StreamerV1 (TBuffer &b);  Stream UUID from input buffer. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; Int_t CmpTime (uuid_time_t *t1, uuid_time_t *t2);  Compare two time values. ;  ; void Format (UShort_t clockseq, uuid_time_t ts);  Make a UUID from timestamp, clockseq and node id. ;  ; void GetCurrentTime (uuid_time_",MatchSource.WIKI,doc/master/classTUUID.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUUID.html
Usability,clear,cleared,"xx:142. Clock Sequence; The clock sequence value must be changed whenever:; The UUID generator detects that the local value of UTC has gone backward; this may be due to re-syncing of the system clock.; While a node is operational, the UUID service always saves the last UTC used to create a UUID. Each time a new UUID is created, the current UTC is compared to the saved value and if either the current value is less or the saved value was lost, then the clock sequence is incremented modulo 16,384, thus avoiding production of duplicated UUIDs.; The clock sequence must be initialized to a random number to minimize the correlation across system. This provides maximum protection against node identifiers that may move or switch from system to system rapidly. Clock Adjustment; UUIDs may be created at a rate greater than the system clock resolution. Therefore, the system must also maintain an adjustment value to be added to the lower-order bits of the time. Logically, each time the system clock ticks, the adjustment value is cleared. Every time a UUID is generated, the current adjustment value is read and incremented, and then added to the UTC time field of the UUID. Clock Overrun; The 100-nanosecond granularity of time should prove sufficient even for bursts of UUID production in the next generation of high-performance multiprocessors. If a system overruns the clock adjustment by requesting too many UUIDs within a single system clock tick, the UUID generator will stall until the system clock catches up. ; Definition at line 42 of file TUUID.h. Classes; struct  uuid_time_t;  . Public Member Functions;  TUUID ();  Create a UUID. ;  ;  TUUID (const char *uuid_str);  Initialize a TUUID with uuid (which must be in TUUID::AsString() format). ;  ; virtual ~TUUID ();  delete this TUUID ;  ; const char * AsString () const;  Return UUID as string. Copy string immediately since it will be reused. ;  ; Int_t Compare (const TUUID &u) const;  Compare two UUIDs ""lexically"" and return. ;  ;",MatchSource.WIKI,doc/master/classTUUID.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTUUID.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVector2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVector2.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVector2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVector2.html
Modifiability,inherit,inherited,". ROOT: TVector2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TVector2 Class ReferenceMath » Legacy Physics Classes. ; AttentionTVector2 is a legacy class. It is slower and worse for serialization than the recommended superior alternative ROOT::Math::XYVector.; More details can be found in the documentation of the Physics Vectors package. . TVector2 is a general two vector class, which can be used for the description of different vectors in 2D. ; Definition at line 18 of file TVector2.h. Public Types; typedef Double_t Scalar;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVector2 ();  Constructor. ;  ;  TVector2 (const TVector2 &)=default;  ;  TVector2 (Double_t *s);  Constructor. ;  ;  TVector2 (Double_t x0, Double_t y0);  Constructor. ;  ;  ~TVector2 () override;  ; Double_t DeltaPhi (const TVector2 &v) const;  ; TClass * IsA () const override;  ; Double_t Mod () const;  Return modulo of this vector. ;  ; Double_t Mod2 () const;  ; TVector2 Norm (const TVector2 &v) const;  ; TVector2 & operator*= (Double_t s);  ; Double_t operator*= (TVector2 const &v);  ; TVector2 & operator+= (TVector2 const &v);  ; TVector2 & operator-= (TVector2 const &v);  ; TVe",MatchSource.WIKI,doc/master/classTVector2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVector2.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVector2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVector2.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVector3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVector3.html
Integrability,interface,interface," 5*v2;; if (v1==v2) {...}; if (v1!=v2) {...}. Related Vectors; v2 = v1.Unit(); // get unit vector parallel to v1; v2 = v1.Orthogonal(); // get vector orthogonal to v1. Scalar and vector products; s = v1.Dot(v2); // scalar product; s = v1 * v2; // scalar product; v = v1.Cross(v2); // vector product. Angle between two vectors; Double_t a = v1.Angle(v2);; a#define a(i)Definition RSha256.hxx:99. Rotations; Rotation around axes; v.RotateX(.5);; v.RotateY(TMath::Pi());; v.RotateZ(angle);; angleOption_t Option_t TPoint TPoint angleDefinition TGWin32VirtualXProxy.cxx:68; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; Rotation around a vector; v1.Rotate(TMath::Pi()/4, v2); // rotation around v2; Rotation by TRotation; TVector3 objects can be rotated by objects of the TRotation class using the Transform() member functions,; the operator *= or the operator * of the TRotation class:; TRotation m;; ...; v1.transform(m);; v1 = m*v1;; v1 *= m; // Attention v1 = m*v1; TRotation<div class=""legacybox""><h2>Legacy Code</h2> TRotation is a legacy interface: there will be no bug fix...Definition TRotation.h:20; Transformation from rotated frame; TVector3 direction = v.Unit(); v1.RotateUz(direction); // direction must be TVector3 of unit length; TVector3::UnitTVector3 Unit() constReturn unit vector parallel to this.Definition TVector3.cxx:252; TVector3::RotateUzvoid RotateUz(const TVector3 &)NewUzVector must be normalized !Definition TVector3.cxx:305; transforms v1 from the rotated frame (z' parallel to direction, x' in the theta plane and y' in the xy plane as well as perpendicular to the theta plane) to the (x,y,z) frame. ; Definition at line 22 of file TVector3.h. Public Types; typedef Double_t Scalar;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = ",MatchSource.WIKI,doc/master/classTVector3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVector3.html
Modifiability,variab,variables,". ROOT: TVector3 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Friends |; List of all members ; TVector3 Class ReferenceMath » Legacy Physics Classes. ; AttentionTVector3 is a legacy class. It is slower and worse for serialization than the recommended superior alternative ROOT::Math::XYZVector.; More details can be found in the documentation of the Physics Vectors package. . TVector3 is a general three vector class, which can be used for the description of different vectors in 3D. Declaration / Access to the components; TVector3 has been implemented as a vector of three Double_t variables, representing the cartesian coordinates. By default all components are initialized to zero:; TVector3 v1; // v1 = (0,0,0); TVector3 v3(1,2,3); // v3 = (1,2,3); TVector3 v4(v2); // v4 = v2; TVector3Definition TVector3.h:22; v2@ v2Definition rootcling_impl.cxx:3702; v4@ v4Definition rootcling_impl.cxx:3704; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701; It is also possible (but not recommended) to initialize a TVector3 with a Double_t or Float_t C array.; You can get the basic components either by name or by index using operator():; xx = v1.X(); or xx = v1(0);; yy = v1.Y(); yy = v1(1);; zz = v1.Z(); zz = v1(2);; The member functions SetX(), SetY(), SetZ() and SetXYZ() allow to set the components:; v1.SetX(1.); v1.SetY(2.); v1.SetZ(3.);; v1.SetXYZ(1.,2.,3.);. Non-cartesian coordinates; To get information on the TVector3 in spherical (rho,phi,theta) or cylindrical (z,r,theta) coordinates, the; the member functions Mag() (=magnitude=rho in spherical coordinates), Mag2(), Theta(), CosTheta(), Phi(), Perp() (the transverse component=r in cylindrical coordinates), Perp2() can be used:; Double_t m = v.Mag(); // get magnitude (=rho=Sqrt(x*x+y*y+z*z))); Double_t m2 = v.Mag2(); // get ma",MatchSource.WIKI,doc/master/classTVector3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVector3.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVector3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVector3.html
Testability,log,log,";  ; Double_t operator() (int) const;  ; TVector3 & operator*= (const TRotation &);  Multiplication operator. ;  ; TVector3 & operator*= (Double_t);  ; TVector3 & operator+= (const TVector3 &);  ; TVector3 operator- () const;  ; TVector3 & operator-= (const TVector3 &);  ; TVector3 & operator= (const TVector3 &);  ; Bool_t operator== (const TVector3 &) const;  ; Double_t & operator[] (int);  ; Double_t operator[] (int) const;  ; TVector3 Orthogonal () const;  ; Double_t Perp () const;  Return the transverse component (R in cylindrical coordinate system) ;  ; Double_t Perp (const TVector3 &) const;  Return the transverse component (R in cylindrical coordinate system) ;  ; Double_t Perp2 () const;  ; Double_t Perp2 (const TVector3 &) const;  ; Double_t Phi () const;  Return the azimuth angle. Returns phi from -pi to pi. ;  ; void Print (Option_t *option="""") const override;  Print vector parameters. ;  ; Double_t PseudoRapidity () const;  Double_t m = Mag(); return 0.5*log( (m+fZ)/(m-fZ) ); guard against Pt=0. ;  ; Double_t Pt () const;  ; Double_t Pt (const TVector3 &) const;  ; Double_t Px () const;  ; Double_t Py () const;  ; Double_t Pz () const;  ; void Rotate (Double_t, const TVector3 &);  Rotate vector. ;  ; void RotateUz (const TVector3 &);  NewUzVector must be normalized ! ;  ; void RotateX (Double_t);  Rotate vector around X. ;  ; void RotateY (Double_t);  Rotate vector around Y. ;  ; void RotateZ (Double_t);  Rotate vector around Z. ;  ; void SetMag (Double_t);  ; void SetMagThetaPhi (Double_t mag, Double_t theta, Double_t phi);  Setter with mag, theta, phi. ;  ; void SetPerp (Double_t);  ; void SetPhi (Double_t);  Set phi keeping mag and theta constant (BaBar). ;  ; void SetPtEtaPhi (Double_t pt, Double_t eta, Double_t phi);  Set Pt, Eta and Phi. ;  ; void SetPtThetaPhi (Double_t pt, Double_t theta, Double_t phi);  Set Pt, Theta and Phi. ;  ; void SetTheta (Double_t);  Set theta keeping mag and phi constant (BaBar). ;  ; void SetX (Double_t);  ; void SetXYZ ",MatchSource.WIKI,doc/master/classTVector3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVector3.html
Availability,avail,available,". ROOT: TVectorT< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TVectorT< Element > Class Template ReferenceMath » Matrix Linear Algebra. ; template<class Element>; class TVectorT< Element >TVectorT. ; Template class of Vectors in the linear algebra package.; See the Matrix Linear Algebra page for the documentation of the linear algebra package; Unless otherwise specified, vector indices always start with 0, spanning up to the specified limit-1.; For (n) vectors where n <= kSizeMax (5 currently) storage space is available on the stack, thus avoiding expensive allocation/ deallocation of heap space . However, this introduces of course kSizeMax overhead for each vector object . If this is an issue recompile with a new appropriate value (>=0) for kSizeMax; Another way to assign and store vector data is through Use see for instance stressLinear.cxx file .; Note that Constructors/assignments exists for all different matrix views; For usage examples see $ROOTSYS/test/stressLinear.cxx ; Definition at line 27 of file TVectorT.h. Public Member Functions;  TVectorT ();  ;  TVectorT (const TMatrixTColumn_const< Element > &mc);  Constructor : create vector from matrix column. ;  ;  TVectorT (const TMatrixTDiag_const< Element > &md);  Constructor : create vector from matrix diagonal. ;  ;  TVectorT (const TMatrixTRow_const< Element > &mr);  Constructor : create vector from matrix row. ;  ;  TVectorT (const TVectorT< Element > &another);  Copy constructor. ;  ; template<class Element2 > ;  TVectorT (const TVectorT< Element2 > &another);  ;  TVectorT (Int_t lwb, Int_t upb);  Constructor [lwb..upb]-vector. ;  ;  TVectorT (Int_t lwb, Int_t upb, const Element *elements);  Constructor [lwb..upb]-vector with data copied from array elements. ",MatchSource.WIKI,doc/master/classTVectorT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVectorT.html
Integrability,depend,depends,"< Element > &action);  Apply action to each element of the vector. ;  ; TVectorT< Element > & Apply (const TElementPosActionT< Element > &action);  Apply action to each element of the vector. ;  ; TClass * Class ();  ; void Clear (Option_t *="""") override;  ; void Draw (Option_t *option="""") override;  Draw this vector The histogram is named ""TVectorT"" by default and no title. ;  ; Int_t GetLwb () const;  ; Element * GetMatrixArray ();  ; const Element * GetMatrixArray () const;  ; Int_t GetNoElements () const;  ; Int_t GetNrows () const;  ; TVectorT< Element > GetSub (Int_t row_lwb, Int_t row_upb, Option_t *option=""S"") const;  ; TVectorT< Element > & GetSub (Int_t row_lwb, Int_t row_upb, TVectorT< Element > &target, Option_t *option=""S"") const;  Get subvector [row_lwb..row_upb]; The indexing range of the returned vector depends on the argument option: ;  ; Int_t GetUpb () const;  ; void Invalidate ();  ; TVectorT< Element > & Invert ();  v[i] = 1/v[i] ;  ; TClass * IsA () const override;  ; Bool_t IsOwner () const;  ; Bool_t IsValid () const;  ; void MakeValid ();  ; Bool_t MatchesNonZeroPattern (const TVectorT< Element > &select);  Check if vector elements as selected through array select are non-zero. ;  ; Element Max () const;  return maximum vector element value ;  ; Element Min () const;  return minimum vector element value ;  ; Int_t NonZeros () const;  Compute the number of elements != 0.0. ;  ; Element Norm1 () const;  Compute the 1-norm of the vector SUM{ |v[i]| }. ;  ; Element Norm2Sqr () const;  Compute the square of the 2-norm SUM{ v[i]^2 }. ;  ; Element NormInf () const;  Compute the infinity-norm of the vector MAX{ |v[i]| }. ;  ; Bool_t operator!= (Element val) const;  Are all vector elements not equal to val? ;  ; Element & operator() (Int_t index);  ; const Element & operator() (Int_t index) const;  ; TVectorT< Element > & operator*= (const TMatrixT< Element > &a);  ""Inplace"" multiplication target = A*target. ;  ; TVectorT< Element > & operator*= (con",MatchSource.WIKI,doc/master/classTVectorT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVectorT.html
Modifiability,inherit,inherited,"t > &select);  Check if vector elements as selected through array select are all positive. ;  ; TVectorT< Element > & Sqr ();  Square each element of the vector. ;  ; TVectorT< Element > & Sqrt ();  Take square root of all elements. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TVectorT. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Element Sum () const;  Compute sum of elements. ;  ; const TVectorT< Element > & Use (const TVectorT< Element > &v) const;  ; const TVectorT< Element > & Use (Int_t lwb, Int_t upb, const Element *data) const;  ; TVectorT< Element > & Use (Int_t lwb, Int_t upb, Element *data);  Use the array data to fill the vector lwb..upb]. ;  ; const TVectorT< Element > & Use (Int_t n, const Element *data) const;  ; TVectorT< Element > & Use (Int_t n, Element *data);  ; TVectorT< Element > & Use (TVectorT< Element > &v);  ; TVectorT< Element > & Zero ();  Set vector elements to zero. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object)",MatchSource.WIKI,doc/master/classTVectorT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVectorT.html
Safety,avoid,avoiding,". ROOT: TVectorT< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TVectorT< Element > Class Template ReferenceMath » Matrix Linear Algebra. ; template<class Element>; class TVectorT< Element >TVectorT. ; Template class of Vectors in the linear algebra package.; See the Matrix Linear Algebra page for the documentation of the linear algebra package; Unless otherwise specified, vector indices always start with 0, spanning up to the specified limit-1.; For (n) vectors where n <= kSizeMax (5 currently) storage space is available on the stack, thus avoiding expensive allocation/ deallocation of heap space . However, this introduces of course kSizeMax overhead for each vector object . If this is an issue recompile with a new appropriate value (>=0) for kSizeMax; Another way to assign and store vector data is through Use see for instance stressLinear.cxx file .; Note that Constructors/assignments exists for all different matrix views; For usage examples see $ROOTSYS/test/stressLinear.cxx ; Definition at line 27 of file TVectorT.h. Public Member Functions;  TVectorT ();  ;  TVectorT (const TMatrixTColumn_const< Element > &mc);  Constructor : create vector from matrix column. ;  ;  TVectorT (const TMatrixTDiag_const< Element > &md);  Constructor : create vector from matrix diagonal. ;  ;  TVectorT (const TMatrixTRow_const< Element > &mr);  Constructor : create vector from matrix row. ;  ;  TVectorT (const TVectorT< Element > &another);  Copy constructor. ;  ; template<class Element2 > ;  TVectorT (const TVectorT< Element2 > &another);  ;  TVectorT (Int_t lwb, Int_t upb);  Constructor [lwb..upb]-vector. ;  ;  TVectorT (Int_t lwb, Int_t upb, const Element *elements);  Constructor [lwb..upb]-vector with data copied from array elements. ",MatchSource.WIKI,doc/master/classTVectorT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVectorT.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVectorT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVectorT.html
Testability,test,test,"tions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TVectorT< Element > Class Template ReferenceMath » Matrix Linear Algebra. ; template<class Element>; class TVectorT< Element >TVectorT. ; Template class of Vectors in the linear algebra package.; See the Matrix Linear Algebra page for the documentation of the linear algebra package; Unless otherwise specified, vector indices always start with 0, spanning up to the specified limit-1.; For (n) vectors where n <= kSizeMax (5 currently) storage space is available on the stack, thus avoiding expensive allocation/ deallocation of heap space . However, this introduces of course kSizeMax overhead for each vector object . If this is an issue recompile with a new appropriate value (>=0) for kSizeMax; Another way to assign and store vector data is through Use see for instance stressLinear.cxx file .; Note that Constructors/assignments exists for all different matrix views; For usage examples see $ROOTSYS/test/stressLinear.cxx ; Definition at line 27 of file TVectorT.h. Public Member Functions;  TVectorT ();  ;  TVectorT (const TMatrixTColumn_const< Element > &mc);  Constructor : create vector from matrix column. ;  ;  TVectorT (const TMatrixTDiag_const< Element > &md);  Constructor : create vector from matrix diagonal. ;  ;  TVectorT (const TMatrixTRow_const< Element > &mr);  Constructor : create vector from matrix row. ;  ;  TVectorT (const TVectorT< Element > &another);  Copy constructor. ;  ; template<class Element2 > ;  TVectorT (const TVectorT< Element2 > &another);  ;  TVectorT (Int_t lwb, Int_t upb);  Constructor [lwb..upb]-vector. ;  ;  TVectorT (Int_t lwb, Int_t upb, const Element *elements);  Constructor [lwb..upb]-vector with data copied from array elements. ;  ;  TVectorT (Int_t lwb, Int_t upb, Double_t iv1,...);  Make a vector and assign initial values. ;  ;  TVectorT (Int_t n);  Constructor n-vector. ;  ;  TVectorT (Int_t n, co",MatchSource.WIKI,doc/master/classTVectorT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVectorT.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTView.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTView.html
Modifiability,inherit,inherited,"tual void SetWindow (Double_t u0, Double_t v0, Double_t du, Double_t dv)=0;  ; virtual void ShowAxis ()=0;  ; virtual void Side ()=0;  ; virtual void SideView (TVirtualPad *pad=nullptr)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void ToggleRulers (TVirtualPad *pad=nullptr)=0;  ; virtual void ToggleZoom (TVirtualPad *pad=nullptr)=0;  ; virtual void Top ()=0;  ; virtual void TopView (TVirtualPad *pad=nullptr)=0;  ; virtual void UnZoom ()=0;  ; virtual void UnzoomView (TVirtualPad *pad=nullptr, Double_t unZoomFactor=1.25)=0;  ; virtual void WCtoNDC (const Double_t *pw, Double_t *pn)=0;  ; virtual void WCtoNDC (const Float_t *pw, Float_t *pn)=0;  ; virtual void Zoom ()=0;  ; virtual void ZoomIn ()=0;  ; virtual void ZoomMove ()=0;  ; virtual void ZoomOut ()=0;  ; virtual void ZoomView (TVirtualPad *pad=nullptr, Double_t zoomFactor=1.25)=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method.",MatchSource.WIKI,doc/master/classTView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTView.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTView.html
Availability,avail,available,"ual void SetPoint(Int_t point, Double_t x, Double_t y, Double_t z)Set point n to x, y, z.Definition TPolyLine3D.cxx:595; TPolyLine3D::Drawvoid Draw(Option_t *option="""") overrideDraw this 3-D polyline with its current attributes.Definition TPolyLine3D.cxx:298; TPolyMarker3DA 3D polymarker.Definition TPolyMarker3D.h:33; TPolyMarker3D::SetPointvoid SetPoint(Int_t n, Double_t x, Double_t y, Double_t z)Set point n to x, y, z.Definition TPolyMarker3D.cxx:535; TPolyMarker3D::Drawvoid Draw(Option_t *option="""") overrideDraws 3-D polymarker with its current attributes.Definition TPolyMarker3D.cxx:242; TView3DThe 3D view class.Definition TView3D.h:29; TView3D::SetRangevoid SetRange(const Double_t *min, const Double_t *max) overrideSet Range function.Definition TView3D.cxx:1327; TView::CreateViewstatic TView * CreateView(Int_t system=1, const Double_t *rmin=nullptr, const Double_t *rmax=nullptr)Create a concrete default 3-d view via the plug-in manager.Definition TView.cxx:27. Several coordinate systems are available:. Cartesian; Polar; Cylindrical; Spherical; PseudoRapidity/Phi . Definition at line 29 of file TView3D.h. Public Types; enum  { kPerspective = BIT(6); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TView3D ();  Default constructor. ;  ;  TView3D (Int_t system, const Double_t *rmin, const Double_t *rmax);  TView3D constructor. ;  ;  ~TView3D () override;  ",MatchSource.WIKI,doc/master/classTView3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTView3D.html
Deployability,update,updated,"etLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void AdjustPad (TVirtualPad *pad=nullptr);  Force the current pad to be updated. ;  ;  Static Public Member Functions inherited from TView; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TView * CreateView (Int_t system=1, const Double_t *rmin=nullptr, const Double_t *rmax=nullptr);  Create a concrete default 3-d view via the plug-in manager. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inher",MatchSource.WIKI,doc/master/classTView3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTView3D.html
Energy Efficiency,adapt,adapted,". ROOT: TView3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TView3D Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; The 3D view class. ; This package was originally written by Evgueni Tcherniaev from IHEP/Protvino.; The original Fortran implementation was adapted to HIGZ/PAW by Olivier Couet and Evgueni Tcherniaev.; This View class is a subset of the original system. It has been converted to a C++ class by Rene Brun.; TView3D creates a 3-D view in the current pad. In this 3D view Lego and Surface plots can be drawn and also 3D polyline and markers. Most of the time a TView3D is created automatically when a 3D object needs to be painted in a pad (for instance a Lego or a Surface plot).; In some case a TView3D should be explicitly. For instance to paint a 3D simple scene composed of simple objects like polylines and polymarkers. The following macro gives an example:; {; auto cV3D = new TCanvas(""cV3D"",""PolyLine3D & PolyMarker3D Window"",200,10,500,500);; ; // Creating a view; TView3D *view = (TView3D*) TView::CreateView(1);; view->SetRange(5,5,5,25,25,25);; ; // Create a first PolyLine3D; TPolyLine3D *pl3d1 = new TPolyLine3D(6);; pl3d1->SetPoint(0, 10, 20, 10);; pl3d1->SetPoint(1, 15, 15, 15);; pl3d1->SetPoint(2, 20, 20, 20);; pl3d1->SetPoint(3, 20, 10, 20);; pl3d1->SetPoint(4, 10, 10, 20);; pl3d1->SetPoint(5, 10, 10, 10);; ; // Create a first PolyMarker3D; TPolyMarker3D *pm3d1 = new TPolyMarker3D(9);; pm3d1->SetPoint( 0, 10, 10, 10);; pm3d1->SetPoint( 1, 20, 20, 20);; pm3d1->SetPoint( 2, 10, 20, 20);; pm3d1->SetPoint( 3, 10, 10, 20);; pm3d1->SetPoint( 4, 20, 20, 10);; pm3d1->SetPoint( 5, 20, 10, 10);; pm3d1->SetPoint( 6, 20, 10, 20);; pm3d1->SetPoint( 7, 10, 20, 10);; pm3d1->SetPoint( 8, 15, 15, 15);; pm3d1->SetMarkerSize(2);; pm3d",MatchSource.WIKI,doc/master/classTView3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTView3D.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTView3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTView3D.html
Modifiability,adapt,adapted,". ROOT: TView3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TView3D Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; The 3D view class. ; This package was originally written by Evgueni Tcherniaev from IHEP/Protvino.; The original Fortran implementation was adapted to HIGZ/PAW by Olivier Couet and Evgueni Tcherniaev.; This View class is a subset of the original system. It has been converted to a C++ class by Rene Brun.; TView3D creates a 3-D view in the current pad. In this 3D view Lego and Surface plots can be drawn and also 3D polyline and markers. Most of the time a TView3D is created automatically when a 3D object needs to be painted in a pad (for instance a Lego or a Surface plot).; In some case a TView3D should be explicitly. For instance to paint a 3D simple scene composed of simple objects like polylines and polymarkers. The following macro gives an example:; {; auto cV3D = new TCanvas(""cV3D"",""PolyLine3D & PolyMarker3D Window"",200,10,500,500);; ; // Creating a view; TView3D *view = (TView3D*) TView::CreateView(1);; view->SetRange(5,5,5,25,25,25);; ; // Create a first PolyLine3D; TPolyLine3D *pl3d1 = new TPolyLine3D(6);; pl3d1->SetPoint(0, 10, 20, 10);; pl3d1->SetPoint(1, 15, 15, 15);; pl3d1->SetPoint(2, 20, 20, 20);; pl3d1->SetPoint(3, 20, 10, 20);; pl3d1->SetPoint(4, 10, 10, 20);; pl3d1->SetPoint(5, 10, 10, 10);; ; // Create a first PolyMarker3D; TPolyMarker3D *pm3d1 = new TPolyMarker3D(9);; pm3d1->SetPoint( 0, 10, 10, 10);; pm3d1->SetPoint( 1, 20, 20, 20);; pm3d1->SetPoint( 2, 10, 20, 20);; pm3d1->SetPoint( 3, 10, 10, 20);; pm3d1->SetPoint( 4, 20, 20, 10);; pm3d1->SetPoint( 5, 20, 10, 10);; pm3d1->SetPoint( 6, 20, 10, 20);; pm3d1->SetPoint( 7, 10, 20, 10);; pm3d1->SetPoint( 8, 15, 15, 15);; pm3d1->SetMarkerSize(2);; pm3d",MatchSource.WIKI,doc/master/classTView3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTView3D.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTView3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTView3D.html
Usability,simpl,simple,". ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TView3D Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; The 3D view class. ; This package was originally written by Evgueni Tcherniaev from IHEP/Protvino.; The original Fortran implementation was adapted to HIGZ/PAW by Olivier Couet and Evgueni Tcherniaev.; This View class is a subset of the original system. It has been converted to a C++ class by Rene Brun.; TView3D creates a 3-D view in the current pad. In this 3D view Lego and Surface plots can be drawn and also 3D polyline and markers. Most of the time a TView3D is created automatically when a 3D object needs to be painted in a pad (for instance a Lego or a Surface plot).; In some case a TView3D should be explicitly. For instance to paint a 3D simple scene composed of simple objects like polylines and polymarkers. The following macro gives an example:; {; auto cV3D = new TCanvas(""cV3D"",""PolyLine3D & PolyMarker3D Window"",200,10,500,500);; ; // Creating a view; TView3D *view = (TView3D*) TView::CreateView(1);; view->SetRange(5,5,5,25,25,25);; ; // Create a first PolyLine3D; TPolyLine3D *pl3d1 = new TPolyLine3D(6);; pl3d1->SetPoint(0, 10, 20, 10);; pl3d1->SetPoint(1, 15, 15, 15);; pl3d1->SetPoint(2, 20, 20, 20);; pl3d1->SetPoint(3, 20, 10, 20);; pl3d1->SetPoint(4, 10, 10, 20);; pl3d1->SetPoint(5, 10, 10, 10);; ; // Create a first PolyMarker3D; TPolyMarker3D *pm3d1 = new TPolyMarker3D(9);; pm3d1->SetPoint( 0, 10, 10, 10);; pm3d1->SetPoint( 1, 20, 20, 20);; pm3d1->SetPoint( 2, 10, 20, 20);; pm3d1->SetPoint( 3, 10, 10, 20);; pm3d1->SetPoint( 4, 20, 20, 10);; pm3d1->SetPoint( 5, 20, 10, 10);; pm3d1->SetPoint( 6, 20, 10, 20);; pm3d1->SetPoint( 7, 10, 20, 10);; pm3d1->SetPoint( 8, 15, 15, 15);; pm3d1->SetMarkerSize(2);; pm3d1->SetMarkerColor(4);; pm3d1->S",MatchSource.WIKI,doc/master/classTView3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTView3D.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTViewer3DPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewer3DPad.html
Integrability,interface,interface,". ROOT: TViewer3DPad Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TViewer3DPad Class ReferenceGraphics » 2D Graphics » Graphics pad. ; Provides 3D viewer interface (TVirtualViewer3D) support on a pad. ; Will be merged with TView / TView3D eventually. ; Definition at line 19 of file TViewer3DPad.h. Public Member Functions;  TViewer3DPad (TVirtualPad &pad);  ;  ~TViewer3DPad () override;  ; void AddCompositeOp (UInt_t operation) override;  ; Int_t AddObject (const TBuffer3D &buffer, Bool_t *addChildren=nullptr) override;  Add an 3D object described by the buffer to the viewer. ;  ; Int_t AddObject (UInt_t placedID, const TBuffer3D &buffer, Bool_t *addChildren=nullptr) override;  We don't support placed ID shapes - ID is discarded. ;  ; void BeginScene () override;  Open a scene on the viewer. ;  ; Bool_t BuildingScene () const override;  ; void CloseComposite () override;  ; void EndScene () override;  Close the scene on the viewer. ;  ; TClass * IsA () const override;  ; Bool_t OpenComposite (const TBuffer3D &buffer, Bool_t *addChildren=nullptr) override;  Composite shapes not supported on this viewer currently - ignore. ;  ; Bool_t PreferLocalFrame () const override;  Indicates if we prefer positions in local frame. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualViewer3D; virtual ~TVirtualViewer3D ();  ; virtual Bool_t CanLoopOnPrimitives () const;  ; virtual void DrawViewer ();  ; TClass * IsA () const override;  ; virtual void ObjectPaint (TObject *, Option_t *="""");  ; virtual void PadPaint (TVirtualPad *);  ; virtual void PrintObjects ();  ; virtual void ResetCameras ();  ; virtual void ResetCamerasAfterNextUpdate",MatchSource.WIKI,doc/master/classTViewer3DPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewer3DPad.html
Modifiability,inherit,inherited,"dID, const TBuffer3D &buffer, Bool_t *addChildren=nullptr) override;  We don't support placed ID shapes - ID is discarded. ;  ; void BeginScene () override;  Open a scene on the viewer. ;  ; Bool_t BuildingScene () const override;  ; void CloseComposite () override;  ; void EndScene () override;  Close the scene on the viewer. ;  ; TClass * IsA () const override;  ; Bool_t OpenComposite (const TBuffer3D &buffer, Bool_t *addChildren=nullptr) override;  Composite shapes not supported on this viewer currently - ignore. ;  ; Bool_t PreferLocalFrame () const override;  Indicates if we prefer positions in local frame. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualViewer3D; virtual ~TVirtualViewer3D ();  ; virtual Bool_t CanLoopOnPrimitives () const;  ; virtual void DrawViewer ();  ; TClass * IsA () const override;  ; virtual void ObjectPaint (TObject *, Option_t *="""");  ; virtual void PadPaint (TVirtualPad *);  ; virtual void PrintObjects ();  ; virtual void ResetCameras ();  ; virtual void ResetCamerasAfterNextUpdate ();  ; virtual TObject * SelectObject (Int_t, Int_t);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/Recu",MatchSource.WIKI,doc/master/classTViewer3DPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewer3DPad.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTViewer3DPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewer3DPad.html
Availability,error,error,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTViewPubDataMembers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewPubDataMembers.html
Integrability,interface,interface,". ROOT: TViewPubDataMembers Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TViewPubDataMembers Class Reference. ; View implementing the TList interface and giving access all the TDictionary describing public data members in a class and all its base classes without caching any of the TDictionary pointers. ; Adding to this collection directly is prohibited. Iteration can only be done via the TIterator interfaces. ; Definition at line 28 of file TViewPubDataMembers.h. Public Member Functions;  TViewPubDataMembers (TClass *cl=nullptr);  Usual constructor. ;  ; virtual ~TViewPubDataMembers ();  Default destructor. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; virtual const TList * GetListOfClasses () const;  ; Int_t GetSize () const override;  Return the total number of public data members(currently loaded in the list; of DataMembers) in this class and all its base classes. ;  ; void Load ();  Load all the DataMembers known to the interpreter for the scope 'fClass' and all its bases classes. ;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TClass * IsA () const override;  ; Bool_t IsAscending ();  ; TObject * Re",MatchSource.WIKI,doc/master/classTViewPubDataMembers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewPubDataMembers.html
Modifiability,inherit,inherited,"r Functions;  TViewPubDataMembers (TClass *cl=nullptr);  Usual constructor. ;  ; virtual ~TViewPubDataMembers ();  Default destructor. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; virtual const TList * GetListOfClasses () const;  ; Int_t GetSize () const override;  Return the total number of public data members(currently loaded in the list; of DataMembers) in this class and all its base classes. ;  ; void Load ();  Load all the DataMembers known to the interpreter for the scope 'fClass' and all its bases classes. ;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TClass * IsA () const override;  ; Bool_t IsAscending ();  ; TObject * Remove (const TObjLinkPtr_t &lnk);  ; void RemoveLast () override;  Remove the last object of the list. ;  ; virtual void Sort (Bool_t order=kSortAscending);  Sort linked list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSeqCollection; virtual ~TSeqCollection ();  ; void Add (TObject *obj) override;  ; virtual Int_t GetLast () const;  Returns index of last object in collection. ;  ; virtual Int_t IndexOf (const TObject *obj) const;  Return index of object in collection. ;  ; TClass * IsA () const override;  ; ",MatchSource.WIKI,doc/master/classTViewPubDataMembers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewPubDataMembers.html
Performance,load,loaded,"mbers Class Reference. ; View implementing the TList interface and giving access all the TDictionary describing public data members in a class and all its base classes without caching any of the TDictionary pointers. ; Adding to this collection directly is prohibited. Iteration can only be done via the TIterator interfaces. ; Definition at line 28 of file TViewPubDataMembers.h. Public Member Functions;  TViewPubDataMembers (TClass *cl=nullptr);  Usual constructor. ;  ; virtual ~TViewPubDataMembers ();  Default destructor. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; virtual const TList * GetListOfClasses () const;  ; Int_t GetSize () const override;  Return the total number of public data members(currently loaded in the list; of DataMembers) in this class and all its base classes. ;  ; void Load ();  Load all the DataMembers known to the interpreter for the scope 'fClass' and all its bases classes. ;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TClass * IsA () const override;  ; Bool_t IsAscending ();  ; TObject * Remove (const TObjLinkPtr_t &lnk);  ; void RemoveLast () override;  Remove the last object of the list. ;  ; virtual void Sort (Bool_t order=kSortAscending);  Sort linked list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void St",MatchSource.WIKI,doc/master/classTViewPubDataMembers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewPubDataMembers.html
Safety,safe,safe,"d Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the wildcard. ;  ; virtual void Print (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () co",MatchSource.WIKI,doc/master/classTViewPubDataMembers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewPubDataMembers.html
Security,access,access,". ROOT: TViewPubDataMembers Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TViewPubDataMembers Class Reference. ; View implementing the TList interface and giving access all the TDictionary describing public data members in a class and all its base classes without caching any of the TDictionary pointers. ; Adding to this collection directly is prohibited. Iteration can only be done via the TIterator interfaces. ; Definition at line 28 of file TViewPubDataMembers.h. Public Member Functions;  TViewPubDataMembers (TClass *cl=nullptr);  Usual constructor. ;  ; virtual ~TViewPubDataMembers ();  Default destructor. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; virtual const TList * GetListOfClasses () const;  ; Int_t GetSize () const override;  Return the total number of public data members(currently loaded in the list; of DataMembers) in this class and all its base classes. ;  ; void Load ();  Load all the DataMembers known to the interpreter for the scope 'fClass' and all its bases classes. ;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TClass * IsA () const override;  ; Bool_t IsAscending ();  ; TObject * Re",MatchSource.WIKI,doc/master/classTViewPubDataMembers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewPubDataMembers.html
Availability,error,error,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTViewPubFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewPubFunctions.html
Integrability,interface,interface,". ROOT: TViewPubFunctions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TViewPubFunctions Class Reference. ; View implementing the TList interface and giving access all the TFunction describing public methods in a class and all its base classes without caching any of the TFunction pointers. ; Adding to this collection directly is prohibited. Iteration can only be done via the TIterator interfaces. ; Definition at line 28 of file TViewPubFunctions.h. Public Member Functions;  TViewPubFunctions (TClass *cl=nullptr);  Usual constructor. ;  ; virtual ~TViewPubFunctions ();  Default destructor. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; virtual const TList * GetListOfClasses () const;  ; Int_t GetSize () const override;  Return the total number of public methods (currently loaded in the list of functions) in this class and all its base classes. ;  ; void Load ();  Load all the functions known to the interpreter for the scope 'fClass' and all its bases classes. ;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TClass * IsA () const override;  ; Bool_t IsAscending ();  ; TObject * Remove (const TObjLinkPtr_t &l",MatchSource.WIKI,doc/master/classTViewPubFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewPubFunctions.html
Modifiability,inherit,inherited," Public Member Functions;  TViewPubFunctions (TClass *cl=nullptr);  Usual constructor. ;  ; virtual ~TViewPubFunctions ();  Default destructor. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; virtual const TList * GetListOfClasses () const;  ; Int_t GetSize () const override;  Return the total number of public methods (currently loaded in the list of functions) in this class and all its base classes. ;  ; void Load ();  Load all the functions known to the interpreter for the scope 'fClass' and all its bases classes. ;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TClass * IsA () const override;  ; Bool_t IsAscending ();  ; TObject * Remove (const TObjLinkPtr_t &lnk);  ; void RemoveLast () override;  Remove the last object of the list. ;  ; virtual void Sort (Bool_t order=kSortAscending);  Sort linked list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSeqCollection; virtual ~TSeqCollection ();  ; void Add (TObject *obj) override;  ; virtual Int_t GetLast () const;  Returns index of last object in collection. ;  ; virtual Int_t IndexOf (const TObject *obj) const;  Return index of object in collection. ;  ; TClass * IsA () const override;  ; ",MatchSource.WIKI,doc/master/classTViewPubFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewPubFunctions.html
Performance,load,loaded,"bers ; TViewPubFunctions Class Reference. ; View implementing the TList interface and giving access all the TFunction describing public methods in a class and all its base classes without caching any of the TFunction pointers. ; Adding to this collection directly is prohibited. Iteration can only be done via the TIterator interfaces. ; Definition at line 28 of file TViewPubFunctions.h. Public Member Functions;  TViewPubFunctions (TClass *cl=nullptr);  Usual constructor. ;  ; virtual ~TViewPubFunctions ();  Default destructor. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; virtual const TList * GetListOfClasses () const;  ; Int_t GetSize () const override;  Return the total number of public methods (currently loaded in the list of functions) in this class and all its base classes. ;  ; void Load ();  Load all the functions known to the interpreter for the scope 'fClass' and all its bases classes. ;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TClass * IsA () const override;  ; Bool_t IsAscending ();  ; TObject * Remove (const TObjLinkPtr_t &lnk);  ; void RemoveLast () override;  Remove the last object of the list. ;  ; virtual void Sort (Bool_t order=kSortAscending);  Sort linked list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void Streamer",MatchSource.WIKI,doc/master/classTViewPubFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewPubFunctions.html
Safety,safe,safe,"d Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the wildcard. ;  ; virtual void Print (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () co",MatchSource.WIKI,doc/master/classTViewPubFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewPubFunctions.html
Security,access,access,". ROOT: TViewPubFunctions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TViewPubFunctions Class Reference. ; View implementing the TList interface and giving access all the TFunction describing public methods in a class and all its base classes without caching any of the TFunction pointers. ; Adding to this collection directly is prohibited. Iteration can only be done via the TIterator interfaces. ; Definition at line 28 of file TViewPubFunctions.h. Public Member Functions;  TViewPubFunctions (TClass *cl=nullptr);  Usual constructor. ;  ; virtual ~TViewPubFunctions ();  Default destructor. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; virtual const TList * GetListOfClasses () const;  ; Int_t GetSize () const override;  Return the total number of public methods (currently loaded in the list of functions) in this class and all its base classes. ;  ; void Load ();  Load all the functions known to the interpreter for the scope 'fClass' and all its bases classes. ;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TClass * IsA () const override;  ; Bool_t IsAscending ();  ; TObject * Remove (const TObjLinkPtr_t &l",MatchSource.WIKI,doc/master/classTViewPubFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewPubFunctions.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTViewTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewTimer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTViewTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewTimer.html
Modifiability,inherit,inherited,". ROOT: TViewTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TViewTimer Class Reference. . Definition at line 145 of file TGTextView.h. Public Member Functions;  TViewTimer (TGView *t, Long_t ms);  ; Bool_t Notify () override;  Notify when timer times out and reset the timer. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the",MatchSource.WIKI,doc/master/classTViewTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewTimer.html
Safety,timeout,timeout," timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (co",MatchSource.WIKI,doc/master/classTViewTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewTimer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTViewTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewTimer.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTViewUpdateTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewUpdateTimer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTViewUpdateTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewUpdateTimer.html
Modifiability,inherit,inherited,". ROOT: TViewUpdateTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TViewUpdateTimer Class Reference. . Definition at line 66 of file TGFSContainer.cxx. Public Member Functions;  TViewUpdateTimer (TGFileContainer *t, Long_t ms);  ; Bool_t Notify () override;  Reset the timer. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeou",MatchSource.WIKI,doc/master/classTViewUpdateTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewUpdateTimer.html
Safety,timeout,timeout," timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (co",MatchSource.WIKI,doc/master/classTViewUpdateTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewUpdateTimer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTViewUpdateTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTViewUpdateTimer.html
Security,access,access,". ROOT: TVirtualArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; TVirtualArray Class ReferenceInput/Output Library. ; Wrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary. ; Definition at line 27 of file TVirtualArray.h. Public Types; using ObjectPtr = TClass::ObjectPtr;  . Public Member Functions;  TVirtualArray (TClass *cl, UInt_t size);  ;  ~TVirtualArray ();  ; TClass * GetClass ();  ; char * GetObjectAt (UInt_t ind) const;  ; char * operator[] (UInt_t ind) const;  ; void SetSize (UInt_t size);  . Public Attributes; ObjectPtr fArray;  fSize elements ;  ; UInt_t fCapacity;  ; TClassRef fClass;  ; UInt_t fSize;  . #include <TVirtualArray.h>; Member Typedef Documentation. ◆ ObjectPtr. using TVirtualArray::ObjectPtr = TClass::ObjectPtr. Definition at line 29 of file TVirtualArray.h. Constructor & Destructor Documentation. ◆ TVirtualArray(). TVirtualArray::TVirtualArray ; (; TClass * ; cl, . UInt_t ; size . ). inline . Definition at line 36 of file TVirtualArray.h. ◆ ~TVirtualArray(). TVirtualArray::~TVirtualArray ; (; ). inline . Definition at line 37 of file TVirtualArray.h. Member Function Documentation. ◆ GetClass(). TClass * TVirtualArray::GetClass ; (; ). inline . Definition at line 39 of file TVirtualArray.h. ◆ GetObjectAt(). char * TVirtualArray::GetObjectAt ; (; UInt_t ; ind); const. inline . Definition at line 41 of file TVirtualArray.h. ◆ operator[](). char * TVirtualArray::operator[] ; (; UInt_t ; ind); const. inline . Definition at line 40 of file TVirtualArray.h. ◆ SetSize(). void TVirtualArray::SetSize ; (; UInt_t ; size). inline . Definition at line 43 of file TVirtualArray.h. Member Data Documentation. ◆ fArray. ObjectPtr TVirtualArray::fArray. fSize elements ; Definition at line 34 of file TVirtualArray.h. ◆ f",MatchSource.WIKI,doc/master/classTVirtualArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualArray.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTVirtualBranchBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualBranchBrowsable.html
Integrability,message,message,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTVirtualBranchBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualBranchBrowsable.html
Modifiability,extend,extend,". ROOT: TVirtualBranchBrowsable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TVirtualBranchBrowsable Class ReferenceTree Library. ; TVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support. ; Each registered derived class's generator method is called, which fills all created helper objects into a list which can then be browsed. For details of what these browser helper objects can do, see e.g. TMethodBrowsable, which allows methods to show up in the TBrowser.; Only registered helper objects are created. By default, only TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable are registered (see RegisterDefaultGenerators). You can prevent any of their objects to show up in the browser by unregistering the generator: TMethodBrowsable::Unregister(); TMethodBrowsable::Unregisterstatic void Unregister()Wrapper for the registration method.Definition TBranchBrowsable.cxx:595; will stop creating browsable method helper objects from that call on. Note that these helper objects are cached (in TBranch::fBrowsables); already created (and thus cached) browsables will still appear in the browser even after unregistering the corresponding generator.; You can implement your own browsable objects and their generator; see e.g. the simple TCollectionPropertyBrowsable. Note that you will have to register your generator just like any other, and that you should implement the following methods for your own class, mainly for consistency reasons: static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBra",MatchSource.WIKI,doc/master/classTVirtualBranchBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualBranchBrowsable.html
Performance,cache,cached,"able is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support. ; Each registered derived class's generator method is called, which fills all created helper objects into a list which can then be browsed. For details of what these browser helper objects can do, see e.g. TMethodBrowsable, which allows methods to show up in the TBrowser.; Only registered helper objects are created. By default, only TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable are registered (see RegisterDefaultGenerators). You can prevent any of their objects to show up in the browser by unregistering the generator: TMethodBrowsable::Unregister(); TMethodBrowsable::Unregisterstatic void Unregister()Wrapper for the registration method.Definition TBranchBrowsable.cxx:595; will stop creating browsable method helper objects from that call on. Note that these helper objects are cached (in TBranch::fBrowsables); already created (and thus cached) browsables will still appear in the browser even after unregistering the corresponding generator.; You can implement your own browsable objects and their generator; see e.g. the simple TCollectionPropertyBrowsable. Note that you will have to register your generator just like any other, and that you should implement the following methods for your own class, mainly for consistency reasons: static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; TVirtualBranchBrowsable::RegisterGeneratorstatic void RegisterGenerator(MethodCreateListOfBrowsables_t generator)Adds a generator to be called when browsing branches.Definition TBranchBrowsable.cxx:356; TVirtualBranchBrowsable::UnregisterGeneratorstatic void UnregisterGenerator(MethodCreateListOfBrowsables_t generator)Removes a generator from the list of generators to be called when browsing branches.Definition TBranchBrow",MatchSource.WIKI,doc/master/classTVirtualBranchBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualBranchBrowsable.html
Security,hash,hash,"amerNVirtual_b);  ; bool TypeIsPointer () const;  return whether the type of this browsable object is a pointer ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTVirtualBranchBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualBranchBrowsable.html
Usability,simpl,simple,"s all created helper objects into a list which can then be browsed. For details of what these browser helper objects can do, see e.g. TMethodBrowsable, which allows methods to show up in the TBrowser.; Only registered helper objects are created. By default, only TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable are registered (see RegisterDefaultGenerators). You can prevent any of their objects to show up in the browser by unregistering the generator: TMethodBrowsable::Unregister(); TMethodBrowsable::Unregisterstatic void Unregister()Wrapper for the registration method.Definition TBranchBrowsable.cxx:595; will stop creating browsable method helper objects from that call on. Note that these helper objects are cached (in TBranch::fBrowsables); already created (and thus cached) browsables will still appear in the browser even after unregistering the corresponding generator.; You can implement your own browsable objects and their generator; see e.g. the simple TCollectionPropertyBrowsable. Note that you will have to register your generator just like any other, and that you should implement the following methods for your own class, mainly for consistency reasons: static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; TVirtualBranchBrowsable::RegisterGeneratorstatic void RegisterGenerator(MethodCreateListOfBrowsables_t generator)Adds a generator to be called when browsing branches.Definition TBranchBrowsable.cxx:356; TVirtualBranchBrowsable::UnregisterGeneratorstatic void UnregisterGenerator(MethodCreateListOfBrowsables_t generator)Removes a generator from the list of generators to be called when browsing branches.Definition TBranchBrowsable.cxx:372; where GetBrowsables is a static member function of your class, that creates the browsable helper objects, and has the signature static Int_t GetBrowsables(TList& list, const TBranch*",MatchSource.WIKI,doc/master/classTVirtualBranchBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualBranchBrowsable.html
Deployability,release,release,". ROOT: TVirtualCollectionIterators Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TVirtualCollectionIterators Class ReferenceInput/Output Library. ; Small helper class to generically acquire and release iterators. ; Definition at line 25 of file TVirtualCollectionIterators.h. Public Types; typedef TVirtualCollectionProxy::CreateIterators_t CreateIterators_t;  ; typedef TVirtualCollectionProxy::DeleteTwoIterators_t DeleteTwoIterators_t;  . Public Member Functions;  TVirtualCollectionIterators (CreateIterators_t creator, DeleteTwoIterators_t destruct);  ;  TVirtualCollectionIterators (TVirtualCollectionProxy *proxy, Bool_t read_from_file=kTRUE);  ;  ~TVirtualCollectionIterators ();  ; void CreateIterators (void *collection, TVirtualCollectionProxy *proxy);  . Public Attributes; void * fBegin;  ; char fBeginBuffer [TVirtualCollectionProxy::fgIteratorArenaSize];  ; CreateIterators_t fCreateIterators;  ; DeleteTwoIterators_t fDeleteTwoIterators;  ; void * fEnd;  ; char fEndBuffer [TVirtualCollectionProxy::fgIteratorArenaSize];  . Private Member Functions;  TVirtualCollectionIterators ()=delete;  ;  TVirtualCollectionIterators (const TVirtualCollectionIterators &)=delete;  . #include <TVirtualCollectionIterators.h>; Member Typedef Documentation. ◆ CreateIterators_t. typedef TVirtualCollectionProxy::CreateIterators_t TVirtualCollectionIterators::CreateIterators_t. Definition at line 36 of file TVirtualCollectionIterators.h. ◆ DeleteTwoIterators_t. typedef TVirtualCollectionProxy::DeleteTwoIterators_t TVirtualCollectionIterators::DeleteTwoIterators_t. Definition at line 37 of file TVirtualCollectionIterators.h. Constructor & Destructor Documentation. ◆ TVirtualCollectionIterators() [1/4]. TVirtualCollectionIterators::TVirtualCollectionIterators ; (; ). privatedelete . ◆ TVirtualCollectionI",MatchSource.WIKI,doc/master/classTVirtualCollectionIterators.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionIterators.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TVirtualCollectionProxy Member List. This is the complete list of members for TVirtualCollectionProxy, including all inherited members. Allocate(UInt_t n, Bool_t forceDelete)=0TVirtualCollectionProxypure virtual; At(UInt_t idx)=0TVirtualCollectionProxypure virtual; Clear(const char *opt="""")=0TVirtualCollectionProxypure virtual; Commit(void *)=0TVirtualCollectionProxypure virtual; CopyIterator_t typedefTVirtualCollectionProxy; CreateIterators_t typedefTVirtualCollectionProxy; DeleteArray(void *p, Bool_t dtorOnly=kFALSE) constTVirtualCollectionProxyinlinevirtual; DeleteIterator_t typedefTVirtualCollectionProxy; DeleteTwoIterators_t typedefTVirtualCollectionProxy; Destructor(void *p, Bool_t dtorOnly=kFALSE) constTVirtualCollectionProxyinlinevirtual; EProperty enum nameTVirtualCollectionProxy; fClassTVirtualCollectionProxyprotected; fgIteratorArenaSizeTVirtualCollectionProxystatic; fPropertiesTVirtualCollectionProxyprotected; Generate() const =0TVirtualCollectionProxypure virtual; GetCollectionClass() constTVirtualCollectionProxyinlinevirtual; GetCollectionType() const =0TVirtualCollectionProxypure virtual; GetConversionReadMemberWiseActions(TClass *oldClass, Int_t version)=0TVirtualCollectionProxypure virtual; GetFunctionCopyIterator(Bool_t read=kTRUE)=0TVirtualCollectionProxypure virtual; GetFunctionCreateIterators(Bool_t read=kTRUE)=0TVirtualCollectionProxypure virtual; GetFunctionDeleteIterator(Bool_t read=kTRUE)=0TVirtualCollectionProxypure virtual; GetFunctionDeleteTwoIterators(Bool_t read=kTRUE)=0TVirtualCollectionProxypure virtual; GetFunctionNext(Bool_t read=kTRUE)=0TVirtualCollectionProxypure virtual; GetIncrement() const =0TVirtualCollectionProxypure virtual; GetProperties() constTVirtualCollectionProxyinlinevirtual; GetReadMemberWiseActions(Int_t version)=0TVirtualCollectionProxypure virtual; GetType() const =0TVirtualCollectionProxypure virtual; GetValueClas",MatchSource.WIKI,doc/master/classTVirtualCollectionProxy-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionProxy-members.html
Energy Efficiency,allocate,allocated,"ectArray (Int_t nElements) const;  Construct an array of nElements container objects and return the base address of the array. ;  ; virtual TClass::ObjectPtr NewObjectArray (Int_t nElements, void *arena) const;  Construct an array of nElements container objects at the address given by arena ;  ; char * operator[] (UInt_t idx) const;  Return the address of the value at index idx ;  ; virtual void PopProxy ()=0;  Reset the address of the container being proxied to the previous container. ;  ; virtual void PushProxy (void *objectstart)=0;  Set the address of the container being proxied and keep track of the previous one. ;  ; virtual Bool_t Reset ();  Reset the information gathered from StreamerInfos and value's TClass. ;  ; virtual UInt_t Size () const =0;  Return the current number of elements in the container. ;  ; virtual UInt_t Sizeof () const =0;  Return the sizeof() of the collection object. ;  . Static Public Attributes; static const Int_t fgIteratorArenaSize = 16;  The size of a small buffer that can be allocated on the stack to store iterator-specific information. ;  . Protected Attributes; TClassRef fClass;  ; UInt_t fProperties;  . Private Member Functions;  TVirtualCollectionProxy (const TVirtualCollectionProxy &)=delete;  ; TVirtualCollectionProxy & operator= (const TVirtualCollectionProxy &)=delete;  . Friends; class TClass;  . #include <TVirtualCollectionProxy.h>. Inheritance diagram for TVirtualCollectionProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ CopyIterator_t. typedef void *(* TVirtualCollectionProxy::CopyIterator_t) (void *dest, const void *source). Copy the iterator source into dest. ; dest should contain the location of a memory arena of size fgIteratorArenaSize. If iterator-specific information is of that size or less, the iterators will be constructed in place in the given locations. Otherwise, iterators will be allocated via new and their address return",MatchSource.WIKI,doc/master/classTVirtualCollectionProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionProxy.html
Integrability,interface,interface,". ROOT: TVirtualCollectionProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Attributes |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TVirtualCollectionProxy Class Referenceabstract. ; Defines a common interface to inspect/change the contents of an object that represents a collection. ; Specifically, an object of a class that derives from TVirtualCollectionProxy relays accesses to any object that matches the proxied collection type. The interface provides two families of functions: (i) for direct manipulation, e.g. Insert() or At(); and (ii) iterator-based, e.g. GetFunctionCreateIterators() or GetFunctionNext(). TVirtualCollectionProxy objects are stateful; in particular, many functions require to set the object to operate on via PushProxy() / PopProxy(). The TPushPop RAII class is provided for convenience. A collection proxy for a given class can be permanently set using TClass::CopyCollectionProxy(). The Generate() function should be overridden in derived classes to return a clean object of the most-derived class. ; Definition at line 52 of file TVirtualCollectionProxy.h. Classes; class  TPushPop;  RAII helper class that ensures that PushProxy() / PopProxy() are called when entering / leaving a C++ context. More...;  . Public Types; typedef void *(* CopyIterator_t) (void *dest, const void *source);  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* DeleteIterator_t) (void *iter);  If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherwise, just call the iterator's destructor. ;  ; typedef void(* DeleteT",MatchSource.WIKI,doc/master/classTVirtualCollectionProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionProxy.html
Security,access,accesses,". ROOT: TVirtualCollectionProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Attributes |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TVirtualCollectionProxy Class Referenceabstract. ; Defines a common interface to inspect/change the contents of an object that represents a collection. ; Specifically, an object of a class that derives from TVirtualCollectionProxy relays accesses to any object that matches the proxied collection type. The interface provides two families of functions: (i) for direct manipulation, e.g. Insert() or At(); and (ii) iterator-based, e.g. GetFunctionCreateIterators() or GetFunctionNext(). TVirtualCollectionProxy objects are stateful; in particular, many functions require to set the object to operate on via PushProxy() / PopProxy(). The TPushPop RAII class is provided for convenience. A collection proxy for a given class can be permanently set using TClass::CopyCollectionProxy(). The Generate() function should be overridden in derived classes to return a clean object of the most-derived class. ; Definition at line 52 of file TVirtualCollectionProxy.h. Classes; class  TPushPop;  RAII helper class that ensures that PushProxy() / PopProxy() are called when entering / leaving a C++ context. More...;  . Public Types; typedef void *(* CopyIterator_t) (void *dest, const void *source);  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* DeleteIterator_t) (void *iter);  If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherwise, just call the iterator's destructor. ;  ; typedef void(* DeleteT",MatchSource.WIKI,doc/master/classTVirtualCollectionProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionProxy.html
Availability,error,error,"Objectvirtual; CheckedHash()TObjectinline; Class()TVirtualFFTstatic; Class_Name()TVirtualFFTstatic; Class_Version()TVirtualFFTinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &object) constTObjectvirtual; DeclFileName()TVirtualFFTinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; FFT(Int_t ndim, Int_t *n, Option_t *option)TVirtualFFTstatic; fgDefaultTVirtualFFTprotectedstatic; fgDtorOnlyTObjectprivatestatic; fgFFTTVirtualFFTprotectedstatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fUniqueIDTObjectprivate; GetCurrentTransform()TVirtualFFTstatic; GetDefaultFFT()TVirtualFFTstatic; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetIconName() constTObjectvirtual; GetN() const =0TVirtualFFTpure virtual; GetName() constTObjectvirtual; GetNdim() const =0TVirtualFFTpure virtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetPointComplex(Int_t ipoint, Double_t &re, Double_t &",MatchSource.WIKI,doc/master/classTVirtualFFT-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFFT-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TVirtualFFT Member List. This is the complete list of members for TVirtualFFT, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TVirtualFFTstatic; Class_Name()TVirtualFFTstatic; Class_Version()TVirtualFFTinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &object) constTObjectvirtual; DeclFileName()TVirtualFFTinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; FFT(Int_t ndim, Int_t *n, Option_t *option)TVirtualFFTstatic; fgDefaultTVirtualFFTprotectedstatic; fgDtorOnlyTObjectprivatestatic; fgFFTTVirtualFFTprotectedstatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fUniqueIDTObjectprivate; GetCurrentTransform()TVirtualFFTstatic; GetDefaultFFT()TVirtualFFTstatic; GetDrawOption(",MatchSource.WIKI,doc/master/classTVirtualFFT-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFFT-members.html
Availability,redundant,redundant,". ROOT: TVirtualFFT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; List of all members ; TVirtualFFT Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; TVirtualFFT is an interface class for Fast Fourier Transforms. ; The default FFT library is FFTW. To use it, FFTW3 library should already be installed, and ROOT should be have fftw3 module enabled, with the directories of fftw3 include file and library specified (see installation instructions). Function SetDefaultFFT() allows to change the default library. Available transform types:; FFT:; ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT) in one or more dimensions, -1 in the exponent; ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT) in one or more dimensions, +1 in the exponent; ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT) in one or more dimensions,; ""C2R"" - inverse transforms to ""R2C"", taking complex input (storing the non-redundant half of a logically Hermitian array) to real output; ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format, i.e. real and imaginary parts for a transform of size n stored as r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; ""HC2R"" - computes the reverse of FFTW_R2HC, above; ""DHT"" - computes a discrete Hartley transform. Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static function. 4 different kinds of sine and cosine transforms are available. DCT-I (REDFT00 in FFTW3 notation)- kind=0; DCT-II (REDFT01 in FFTW3 notation)- kind=1; DCT-III(REDFT10 in FFTW3 notation)- kind=2; DCT-IV (REDFT11 in FFTW3 notation)- kind=3; DST-I (RODFT00 in FFTW3 notation)- kind=4; DST-II (RODFT01 in FFTW3 notation)- kind=5; DST-III(RODFT10 in FFTW3 notation)- kind=6; DST-IV (RODFT11 in FFTW3 notation)- ",MatchSource.WIKI,doc/master/classTVirtualFFT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFFT.html
Deployability,install,installed,". ROOT: TVirtualFFT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; List of all members ; TVirtualFFT Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; TVirtualFFT is an interface class for Fast Fourier Transforms. ; The default FFT library is FFTW. To use it, FFTW3 library should already be installed, and ROOT should be have fftw3 module enabled, with the directories of fftw3 include file and library specified (see installation instructions). Function SetDefaultFFT() allows to change the default library. Available transform types:; FFT:; ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT) in one or more dimensions, -1 in the exponent; ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT) in one or more dimensions, +1 in the exponent; ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT) in one or more dimensions,; ""C2R"" - inverse transforms to ""R2C"", taking complex input (storing the non-redundant half of a logically Hermitian array) to real output; ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format, i.e. real and imaginary parts for a transform of size n stored as r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; ""HC2R"" - computes the reverse of FFTW_R2HC, above; ""DHT"" - computes a discrete Hartley transform. Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static function. 4 different kinds of sine and cosine transforms are available. DCT-I (REDFT00 in FFTW3 notation)- kind=0; DCT-II (REDFT01 in FFTW3 notation)- kind=1; DCT-III(REDFT10 in FFTW3 notation)- kind=2; DCT-IV (REDFT11 in FFTW3 notation)- kind=3; DST-I (RODFT00 in FFTW3 notation)- kind=4; DST-II (RODFT01 in FFTW3 notation)- kind=5; DST-III(RODFT10 in FFTW3 notation)- kind=6; DST-IV (RODFT11 in FFTW3 notation)- ",MatchSource.WIKI,doc/master/classTVirtualFFT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFFT.html
Integrability,interface,interface,". ROOT: TVirtualFFT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; List of all members ; TVirtualFFT Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; TVirtualFFT is an interface class for Fast Fourier Transforms. ; The default FFT library is FFTW. To use it, FFTW3 library should already be installed, and ROOT should be have fftw3 module enabled, with the directories of fftw3 include file and library specified (see installation instructions). Function SetDefaultFFT() allows to change the default library. Available transform types:; FFT:; ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT) in one or more dimensions, -1 in the exponent; ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT) in one or more dimensions, +1 in the exponent; ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT) in one or more dimensions,; ""C2R"" - inverse transforms to ""R2C"", taking complex input (storing the non-redundant half of a logically Hermitian array) to real output; ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format, i.e. real and imaginary parts for a transform of size n stored as r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; ""HC2R"" - computes the reverse of FFTW_R2HC, above; ""DHT"" - computes a discrete Hartley transform. Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static function. 4 different kinds of sine and cosine transforms are available. DCT-I (REDFT00 in FFTW3 notation)- kind=0; DCT-II (REDFT01 in FFTW3 notation)- kind=1; DCT-III(REDFT10 in FFTW3 notation)- kind=2; DCT-IV (REDFT11 in FFTW3 notation)- kind=3; DST-I (RODFT00 in FFTW3 notation)- kind=4; DST-II (RODFT01 in FFTW3 notation)- kind=5; DST-III(RODFT10 in FFTW3 notation)- kind=6; DST-IV (RODFT11 in FFTW3 notation)- ",MatchSource.WIKI,doc/master/classTVirtualFFT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFFT.html
Modifiability,inherit,inherited,"*data, Bool_t fromInput=kFALSE) const =0;  ; virtual void GetPointsComplex (Double_t *re, Double_t *im, Bool_t fromInput=kFALSE) const =0;  ; virtual Double_t * GetPointsReal (Bool_t fromInput=kFALSE) const =0;  ; virtual Int_t GetSign () const =0;  ; virtual Option_t * GetTransformFlag () const =0;  ; virtual Option_t * GetType () const =0;  ; virtual void Init (Option_t *flag, Int_t sign, const Int_t *kind)=0;  ; TClass * IsA () const override;  ; virtual Bool_t IsInplace () const =0;  ; virtual void SetPoint (const Int_t *ipoint, Double_t re, Double_t im=0)=0;  ; virtual void SetPoint (Int_t ipoint, Double_t re, Double_t im=0)=0;  ; virtual void SetPointComplex (Int_t ipoint, TComplex &c)=0;  ; virtual void SetPoints (const Double_t *data)=0;  ; virtual void SetPointsComplex (const Double_t *re, const Double_t *im)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Transform ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const",MatchSource.WIKI,doc/master/classTVirtualFFT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFFT.html
Performance,perform,performance,"this class . ◆ Class_Version(). static constexpr Version_t TVirtualFFT::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 132 of file TVirtualFFT.h. ◆ DeclFileName(). static const char * TVirtualFFT::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 132 of file TVirtualFFT.h. ◆ FFT(). TVirtualFFT * TVirtualFFT::FFT ; (; Int_t ; ndim, . Int_t * ; n, . Option_t * ; option . ). static . Returns a pointer to the FFT of requested size and type. ; Parameters. [in]ndimnumber of transform dimensions ; [in]nsizes of each dimension (an array at least ndim long) ; [in]optionconsists of 3 parts - flag option and an option to create a new TVirtualFFT; transform type option: Available transform types are: C2CForward, C2CBackward, C2R, R2C, R2HC, HC2R, DHT see class description for details; flag option: choosing how much time should be spent in planning the transform: Possible options:; ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. option allowing to choose between the global fgFFT and a new TVirtualFFT object """" - default, changes and returns the global fgFFT variable ""K"" (from ""keep"")- without touching the global fgFFT, creates and returns a new TVirtualFFT*. User is then responsible for deleting it. Examples of valid options: ""R2C ES K"", ""C2CF M"", ""DHT P K"", etc. ; Definition at line 131 of file TVirtualFFT.cxx. ◆ GetCurrentTransform(). TVirtualFFT * TVirtualFFT::GetCurrentTransform ; (; ). static . static: ret",MatchSource.WIKI,doc/master/classTVirtualFFT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFFT.html
Safety,redund,redundant,". ROOT: TVirtualFFT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; List of all members ; TVirtualFFT Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; TVirtualFFT is an interface class for Fast Fourier Transforms. ; The default FFT library is FFTW. To use it, FFTW3 library should already be installed, and ROOT should be have fftw3 module enabled, with the directories of fftw3 include file and library specified (see installation instructions). Function SetDefaultFFT() allows to change the default library. Available transform types:; FFT:; ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT) in one or more dimensions, -1 in the exponent; ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT) in one or more dimensions, +1 in the exponent; ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT) in one or more dimensions,; ""C2R"" - inverse transforms to ""R2C"", taking complex input (storing the non-redundant half of a logically Hermitian array) to real output; ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format, i.e. real and imaginary parts for a transform of size n stored as r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; ""HC2R"" - computes the reverse of FFTW_R2HC, above; ""DHT"" - computes a discrete Hartley transform. Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static function. 4 different kinds of sine and cosine transforms are available. DCT-I (REDFT00 in FFTW3 notation)- kind=0; DCT-II (REDFT01 in FFTW3 notation)- kind=1; DCT-III(REDFT10 in FFTW3 notation)- kind=2; DCT-IV (REDFT11 in FFTW3 notation)- kind=3; DST-I (RODFT00 in FFTW3 notation)- kind=4; DST-II (RODFT01 in FFTW3 notation)- kind=5; DST-III(RODFT10 in FFTW3 notation)- kind=6; DST-IV (RODFT11 in FFTW3 notation)- ",MatchSource.WIKI,doc/master/classTVirtualFFT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFFT.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVirtualFFT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFFT.html
Testability,log,logically,". ROOT: TVirtualFFT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; List of all members ; TVirtualFFT Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; TVirtualFFT is an interface class for Fast Fourier Transforms. ; The default FFT library is FFTW. To use it, FFTW3 library should already be installed, and ROOT should be have fftw3 module enabled, with the directories of fftw3 include file and library specified (see installation instructions). Function SetDefaultFFT() allows to change the default library. Available transform types:; FFT:; ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT) in one or more dimensions, -1 in the exponent; ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT) in one or more dimensions, +1 in the exponent; ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT) in one or more dimensions,; ""C2R"" - inverse transforms to ""R2C"", taking complex input (storing the non-redundant half of a logically Hermitian array) to real output; ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format, i.e. real and imaginary parts for a transform of size n stored as r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; ""HC2R"" - computes the reverse of FFTW_R2HC, above; ""DHT"" - computes a discrete Hartley transform. Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static function. 4 different kinds of sine and cosine transforms are available. DCT-I (REDFT00 in FFTW3 notation)- kind=0; DCT-II (REDFT01 in FFTW3 notation)- kind=1; DCT-III(REDFT10 in FFTW3 notation)- kind=2; DCT-IV (REDFT11 in FFTW3 notation)- kind=3; DST-I (RODFT00 in FFTW3 notation)- kind=4; DST-II (RODFT01 in FFTW3 notation)- kind=5; DST-III(RODFT10 in FFTW3 notation)- kind=6; DST-IV (RODFT11 in FFTW3 notation)- ",MatchSource.WIKI,doc/master/classTVirtualFFT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFFT.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFitter.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFitter.html
Modifiability,inherit,inherited,". ROOT: TVirtualFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TVirtualFitter Class ReferenceabstractHistogram Library. ; Abstract Base Class for Fitting. ; Definition at line 29 of file TVirtualFitter.h. Public Types; typedef void(* FCNFunc_t) (Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVirtualFitter ();  Default constructor. ;  ;  ~TVirtualFitter () override;  Cleanup virtual fitter. ;  ; virtual Double_t Chisquare (Int_t npar, Double_t *params) const =0;  ; void Clear (Option_t *option="""") override=0;  Set name and title to empty strings (""""). ;  ; virtual Int_t ExecuteCommand (const char *command, Double_t *args, Int_t nargs)=0;  ; virtual void FixParameter (Int_t ipar)=0;  ; virtual void GetConfidenceIntervals (Int_t n, Int_t ndim, const Double_t *x, Double_t *ci, Double_t cl=0.95);  return confidence intervals in array x of dimension ndim implemented in TFitter and TLinearFitter ;  ; virtual void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95);  return confidence intervals in TObject obj implemented in TFitter and TLinearFitter ;  ; virtual Doub",MatchSource.WIKI,doc/master/classTVirtualFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFitter.html
Performance,cache,cache,"of dimension ndim implemented in TFitter and TLinearFitter ;  ; virtual void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95);  return confidence intervals in TObject obj implemented in TFitter and TLinearFitter ;  ; virtual Double_t * GetCovarianceMatrix () const =0;  ; virtual Double_t GetCovarianceMatrixElement (Int_t i, Int_t j) const =0;  ; virtual Int_t GetErrors (Int_t ipar, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &globcc) const =0;  ; virtual FCNFunc_t GetFCN ();  ; virtual Foption_t GetFitOption () const;  ; TMethodCall * GetMethodCall () const;  ; virtual Int_t GetNumberFreeParameters () const =0;  ; virtual Int_t GetNumberTotalParameters () const =0;  ; virtual TObject * GetObjectFit () const;  ; virtual Double_t GetParameter (Int_t ipar) const =0;  ; virtual Int_t GetParameter (Int_t ipar, char *name, Double_t &value, Double_t &verr, Double_t &vlow, Double_t &vhigh) const =0;  ; virtual Double_t GetParError (Int_t ipar) const =0;  ; virtual const char * GetParName (Int_t ipar) const =0;  ; virtual Int_t GetStats (Double_t &amin, Double_t &edm, Double_t &errdef, Int_t &nvpar, Int_t &nparx) const =0;  ; virtual Double_t GetSumLog (Int_t i)=0;  ; virtual TObject * GetUserFunc () const;  ; virtual Int_t GetXfirst () const;  ; virtual Int_t GetXlast () const;  ; virtual Int_t GetYfirst () const;  ; virtual Int_t GetYlast () const;  ; virtual Int_t GetZfirst () const;  ; virtual Int_t GetZlast () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsFixed (Int_t ipar) const =0;  ; virtual void PrintResults (Int_t level, Double_t amin) const =0;  ; virtual void ReleaseParameter (Int_t ipar)=0;  ; virtual Double_t * SetCache (Int_t npoints, Int_t psize);  Initialize the cache array npoints is the number of points to be stored (or already stored) in the cache psize is the number of elements per point. ;  ; virtual void SetFCN (void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t));  To set the address of the minimizat",MatchSource.WIKI,doc/master/classTVirtualFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFitter.html
Security,hash,hash,"etZfirst (Int_t first);  ; virtual void SetZlast (Int_t last);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTVirtualFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualFitter.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualGeoConverter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoConverter.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualGeoConverter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoConverter.html
Modifiability,inherit,inherited,". ROOT: TVirtualGeoConverter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TVirtualGeoConverter Class ReferenceThe Geometry Package » Geometry classes. ; Abstract class for geometry converters. ; Definition at line 18 of file TVirtualGeoConverter.h. Public Member Functions;  TVirtualGeoConverter (TGeoManager *geom);  Geometry converter default constructor. ;  ;  ~TVirtualGeoConverter () override;  Geometry converter default destructor. ;  ; virtual void ConvertGeometry ();  ; TClass * IsA () const override;  ; void SetGeometry (TGeoManager *geom);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Co",MatchSource.WIKI,doc/master/classTVirtualGeoConverter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoConverter.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVirtualGeoConverter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoConverter.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoPainter.html
Deployability,update,update,"rtual Int_t GetNsegments () const =0;  ; virtual TGeoVolume * GetTopVolume () const =0;  ; virtual void GetViewAngles (Double_t &, Double_t &, Double_t &);  ; virtual Double_t * GetViewBox ()=0;  ; virtual Int_t GetVisLevel () const =0;  ; virtual Int_t GetVisOption () const =0;  ; virtual const char * GetVolumeInfo (const TGeoVolume *volume, Int_t px, Int_t py) const =0;  ; virtual void GrabFocus (Int_t nfr=0, Double_t dlong=0, Double_t dlat=0, Double_t dpsi=0)=0;  ; TClass * IsA () const override;  ; virtual Bool_t IsExplodedView () const =0;  ; virtual Bool_t IsPaintingShape () const =0;  ; virtual Bool_t IsRaytracing () const =0;  ; virtual TH2F * LegoPlot (Int_t ntheta=60, Double_t themin=0., Double_t themax=180., Int_t nphi=90, Double_t phimin=0., Double_t phimax=360., Double_t rmin=0., Double_t rmax=9999999, Option_t *option="""")=0;  ; virtual void ModifiedPad (Bool_t update=kFALSE) const =0;  ; virtual void OpProgress (const char *opname, Long64_t current, Long64_t size, TStopwatch *watch=nullptr, Bool_t last=kFALSE, Bool_t refresh=kFALSE, const char *msg="""")=0;  ; void Paint (Option_t *option="""") override=0;  This method must be overridden if a class wants to paint itself. ;  ; virtual void PaintNode (TGeoNode *node, Option_t *option="""", TGeoMatrix *global=nullptr)=0;  ; virtual void PaintOverlap (void *ovlp, Option_t *option="""")=0;  ; virtual void PaintShape (TGeoShape *shape, Option_t *option="""")=0;  ; virtual void PaintVolume (TGeoVolume *vol, Option_t *option="""", TGeoMatrix *global=nullptr)=0;  ; virtual void PrintOverlaps () const =0;  ; virtual void RandomPoints (const TGeoVolume *vol, Int_t npoints, Option_t *option="""")=0;  ; virtual void RandomRays (Int_t nrays, Double_t startx, Double_t starty, Double_t startz, const char *target_vol, Bool_t check_norm)=0;  ; virtual void Raytrace (Option_t *option="""")=0;  ; virtual TGeoNode * SamplePoints (Int_t npoints, Double_t &dist, Double_t epsil, const char *g3path)=0;  ; virtual void SetBombFactors (Double_t ",MatchSource.WIKI,doc/master/classTVirtualGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoPainter.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoPainter.html
Modifiability,inherit,inherited,". ROOT: TVirtualGeoPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; List of all members ; TVirtualGeoPainter Class ReferenceabstractThe Geometry Package » Geometry classes. ; Abstract class for geometry painters. ; Definition at line 32 of file TVirtualGeoPainter.h. Public Types; enum  EGeoBombOption { kGeoNoBomb = 0; , kGeoBombXYZ = 1; , kGeoBombCyl = 2; , kGeoBombSph = 3; };  ; enum  EGeoVisLevel { kGeoVisLevel = 0; };  ; enum  EGeoVisOption { ;   kGeoVisDefault = 0; , kGeoVisLeaves = 1; , kGeoVisOnly = 2; , kGeoVisBranch = 3; , ;   kGeoVisChanged = 4. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVirtualGeoPainter (TGeoManager *manager);  Geometry painter default constructor. ;  ;  ~TVirtualGeoPainter () override;  Geometry painter default destructor. ;  ; virtual void AddSize3D (Int_t numpoints, Int_t numsegs, Int_t numpolys)=0;  ; virtual TVirtualGeoTrack * AddTrack (Int_t id, Int_t pdgcode, TObject *particle)=0;  ; virtual void AddTrackPoint (Double_t *point, Double_t *box, Bool_t reset=kFALSE)=0;  ; virtual void BombTranslation (const Double_t *tr, Double_t *bombtr)=0;  ; virtual void CheckBoundaryErrors (Int_t ntracks=1000000, Double_t radius=-1.)=0;  ; virtual ",MatchSource.WIKI,doc/master/classTVirtualGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoPainter.html
Safety,safe,safety,"oManager *manager);  Geometry painter default constructor. ;  ;  ~TVirtualGeoPainter () override;  Geometry painter default destructor. ;  ; virtual void AddSize3D (Int_t numpoints, Int_t numsegs, Int_t numpolys)=0;  ; virtual TVirtualGeoTrack * AddTrack (Int_t id, Int_t pdgcode, TObject *particle)=0;  ; virtual void AddTrackPoint (Double_t *point, Double_t *box, Bool_t reset=kFALSE)=0;  ; virtual void BombTranslation (const Double_t *tr, Double_t *bombtr)=0;  ; virtual void CheckBoundaryErrors (Int_t ntracks=1000000, Double_t radius=-1.)=0;  ; virtual void CheckBoundaryReference (Int_t icheck=-1)=0;  ; virtual void CheckGeometry (Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const =0;  ; virtual void CheckGeometryFull (Bool_t checkoverlaps=kTRUE, Bool_t checkcrossings=kTRUE, Int_t nrays=10000, const Double_t *vertex=nullptr)=0;  ; virtual void CheckOverlaps (const TGeoVolume *vol, Double_t ovlp=0.1, Option_t *option="""") const =0;  ; virtual void CheckPoint (Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.)=0;  ; virtual void CheckShape (TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option)=0;  ; virtual Int_t CountVisibleNodes ()=0;  ; virtual void DefaultAngles ()=0;  ; virtual void DefaultColors ()=0;  ; virtual Int_t DistanceToPrimitiveVol (TGeoVolume *vol, Int_t px, Int_t py)=0;  ; virtual void DrawBatemanSol (TGeoBatemanSol *sol, Option_t *option="""")=0;  ; virtual void DrawCurrentPoint (Int_t color)=0;  ; virtual void DrawOnly (Option_t *option="""")=0;  ; virtual void DrawOverlap (void *ovlp, Option_t *option="""")=0;  ; virtual void DrawPanel ()=0;  ; virtual void DrawPath (const char *path, Option_t *option="""")=0;  ; virtual void DrawPolygon (const TGeoPolygon *poly)=0;  ; virtual void DrawShape (TGeoShape *shape, Option_t *option="""")=0;  ; virtual void DrawVolume (TGeoVolume *vol, Option_t *option="""")=0;  ; virtual void EditGeometry (Option_t *option="""")=0;  ; virtual void EstimateCameraMove (Double",MatchSource.WIKI,doc/master/classTVirtualGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoPainter.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVirtualGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoPainter.html
Testability,test,testNo,,MatchSource.WIKI,doc/master/classTVirtualGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoPainter.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualGeoTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoTrack.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualGeoTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoTrack.html
Modifiability,inherit,inherited,"_t * GetPoint (Int_t i) const =0;  ; virtual Int_t GetPoint (Int_t i, Double_t &x, Double_t &y, Double_t &z, Double_t &t) const =0;  ; Bool_t HasPoints () const;  ; TClass * IsA () const override;  ; Bool_t IsInTimeRange () const;  True if track TOF range overlaps with time interval of TGeoManager. ;  ; void Paint (Option_t *option="""") override=0;  This method must be overridden if a class wants to paint itself. ;  ; virtual void PaintCollect (Double_t, Double_t *);  ; virtual void PaintCollectTrack (Double_t, Double_t *);  ; virtual void PaintTrack (Option_t *option="""")=0;  ; virtual void ResetTrack ()=0;  ; void SetId (Int_t id);  ; void SetName (const char *name);  Set a default name for this track. ;  ; void SetParent (TVirtualGeoTrack *parent);  ; virtual void SetParticle (TObject *particle);  ; virtual void SetPDG (Int_t pdgcode);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTVirtualGeoTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoTrack.html
Performance,optimiz,optimization,"alled when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TGeoAtt;  TGeoAtt ();  Default constructor. ;  ;  TGeoAtt (Option_t *vis_opt, Option_t *activity_opt="""", Option_t *optimization_opt="""");  Constructor. ;  ; virtual ~TGeoAtt ();  Destructor. ;  ; Bool_t IsActive () const;  ; Bool_t IsActiveDaughters () const;  ; Bool_t IsVisBranch () const;  ; Bool_t IsVisContainers () const;  ; Bool_t IsVisDaughters () const;  ; Bool_t IsVisible () const;  ; Bool_t IsVisLeaves () const;  ; Bool_t IsVisOnly () const;  ; Bool_t IsVisRaytrace () const;  ; Bool_t IsVisStreamed () const;  ; Bool_t IsVisTouched () const;  ; void ResetAttBit (UInt_t f);  ; void SetActiveDaughters (Bool_t flag=kTRUE);  ; void SetActivity (Bool_t flag=kTRUE);  ; void SetAttBit (UInt_t f);  ; void SetAttBit (UInt_t f, Bool_t set);  ; void SetOptimization (Option_t *option);  Set optimization flags. ;  ; void SetVisBranch ();  Set branch type visibility. ;  ; virtual void SetVisContainers (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; void SetVisDaughters (Bool_t vis=kTRUE);  Set visibility for the daughters. ;  ; virtual void SetVisibility (Bool_t vis=kTRUE);  Set visibility for this object. ;  ; virtual void SetVisLeaves (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; virtual void SetVisOnly (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; void SetVisRaytrace (Bool_t flag=kTRUE);  ; void SetVisStreamed (Bool_t vis=kTRUE);  Mark attributes as ""streamed to file"". ;  ; void SetVisTouched (Bool_t vis=kTRUE);  Mark visualization attributes as ""modified"". ",MatchSource.WIKI,doc/master/classTVirtualGeoTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoTrack.html
Security,hash,hash,"xecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVirtualGeoTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGeoTrack.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGraphPainter.html
Integrability,interface,interface,". ROOT: TVirtualGraphPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Private Attributes |; List of all members ; TVirtualGraphPainter Class ReferenceabstractHistogram Library » Painting classes » Histograms and graphs painting classes. ; Abstract interface to a histogram painter. ; Definition at line 28 of file TVirtualGraphPainter.h. Public Member Functions;  TVirtualGraphPainter ();  ;  ~TVirtualGraphPainter () override;  ; virtual Int_t DistancetoPrimitiveHelper (TGraph *theGraph, Int_t px, Int_t py)=0;  ; virtual void DrawPanelHelper (TGraph *theGraph)=0;  ; virtual void ExecuteEventHelper (TGraph *theGraph, Int_t event, Int_t px, Int_t py)=0;  ; virtual char * GetObjectInfoHelper (TGraph *theGraph, Int_t px, Int_t py) const =0;  ; TClass * IsA () const override;  ; virtual void PaintGraph (TGraph *theGraph, Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)=0;  ; virtual void PaintGrapHist (TGraph *theGraph, Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)=0;  ; virtual void PaintHelper (TGraph *theGraph, Option_t *option)=0;  ; virtual void PaintScatter (TScatter *theScatter, Option_t *option)=0;  ; virtual void PaintStats (TGraph *theGraph, TF1 *fit)=0;  ; virtual void SetHighlight (TGraph *theGraph)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; v",MatchSource.WIKI,doc/master/classTVirtualGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGraphPainter.html
Modifiability,inherit,inherited,"ride;  ; virtual Int_t DistancetoPrimitiveHelper (TGraph *theGraph, Int_t px, Int_t py)=0;  ; virtual void DrawPanelHelper (TGraph *theGraph)=0;  ; virtual void ExecuteEventHelper (TGraph *theGraph, Int_t event, Int_t px, Int_t py)=0;  ; virtual char * GetObjectInfoHelper (TGraph *theGraph, Int_t px, Int_t py) const =0;  ; TClass * IsA () const override;  ; virtual void PaintGraph (TGraph *theGraph, Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)=0;  ; virtual void PaintGrapHist (TGraph *theGraph, Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)=0;  ; virtual void PaintHelper (TGraph *theGraph, Option_t *option)=0;  ; virtual void PaintScatter (TScatter *theScatter, Option_t *option)=0;  ; virtual void PaintStats (TGraph *theGraph, TF1 *fit)=0;  ; virtual void SetHighlight (TGraph *theGraph)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTVirtualGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGraphPainter.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVirtualGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualGraphPainter.html
Availability,error,error,"lar Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title ",MatchSource.WIKI,doc/master/classTVirtualHistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualHistPainter.html
Integrability,interface,interface,". ROOT: TVirtualHistPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Private Attributes |; List of all members ; TVirtualHistPainter Class ReferenceabstractHistogram Library » Painting classes » Histograms and graphs painting classes. ; Abstract interface to a histogram painter. ; Definition at line 30 of file TVirtualHistPainter.h. Public Member Functions;  TVirtualHistPainter ();  ;  ~TVirtualHistPainter () override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override=0;  Computes distance from point (px,py) to the object. ;  ; virtual void DrawPanel ()=0;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override=0;  Execute action corresponding to an event at (px,py). ;  ; virtual TList * GetContourList (Double_t contour) const =0;  ; char * GetObjectInfo (Int_t px, Int_t py) const override=0;  Returns string containing info about the object at position (px,py). ;  ; virtual TList * GetStack () const =0;  ; TClass * IsA () const override;  ; virtual Bool_t IsInside (Double_t x, Double_t y)=0;  ; virtual Bool_t IsInside (Int_t x, Int_t y)=0;  ; virtual Int_t MakeCuts (char *cutsopt)=0;  ; void Paint (Option_t *option="""") override=0;  This method must be overridden if a class wants to paint itself. ;  ; virtual void PaintStat (Int_t dostat, TF1 *fit)=0;  ; virtual void ProcessMessage (const char *mess, const TObject *obj)=0;  ; virtual void SetHighlight ()=0;  ; virtual void SetHistogram (TH1 *h)=0;  ; virtual void SetShowProjection (const char *option, Int_t nbins)=0;  ; virtual void SetShowProjectionXY (const char *option, Int_t nbinsY, Int_t nbinsX)=0;  ; virtual void SetStack (TList *stack)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObjec",MatchSource.WIKI,doc/master/classTVirtualHistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualHistPainter.html
Modifiability,inherit,inherited,"x, Int_t py) const override=0;  Returns string containing info about the object at position (px,py). ;  ; virtual TList * GetStack () const =0;  ; TClass * IsA () const override;  ; virtual Bool_t IsInside (Double_t x, Double_t y)=0;  ; virtual Bool_t IsInside (Int_t x, Int_t y)=0;  ; virtual Int_t MakeCuts (char *cutsopt)=0;  ; void Paint (Option_t *option="""") override=0;  This method must be overridden if a class wants to paint itself. ;  ; virtual void PaintStat (Int_t dostat, TF1 *fit)=0;  ; virtual void ProcessMessage (const char *mess, const TObject *obj)=0;  ; virtual void SetHighlight ()=0;  ; virtual void SetHistogram (TH1 *h)=0;  ; virtual void SetShowProjection (const char *option, Int_t nbins)=0;  ; virtual void SetShowProjectionXY (const char *option, Int_t nbinsY, Int_t nbinsX)=0;  ; virtual void SetStack (TList *stack)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTVirtualHistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualHistPainter.html
Security,hash,hash," TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVirtualHistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualHistPainter.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualIndex.html
Integrability,interface,interface,". ROOT: TVirtualIndex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TVirtualIndex Class ReferenceabstractTree Library. ; Abstract interface for Tree Index. ; Definition at line 30 of file TVirtualIndex.h. Public Member Functions;  TVirtualIndex ();  pointer to Tree ;  ;  ~TVirtualIndex () override;  ; virtual void Append (const TVirtualIndex *, bool delaySort=false)=0;  ; virtual Long64_t GetEntryNumberFriend (const TTree *)=0;  ; virtual Long64_t GetEntryNumberWithBestIndex (Long64_t major, Long64_t minor) const =0;  ; virtual Long64_t GetEntryNumberWithIndex (Long64_t major, Long64_t minor) const =0;  ; virtual const char * GetMajorName () const =0;  ; virtual const char * GetMinorName () const =0;  ; virtual Long64_t GetN () const =0;  ; virtual TTree * GetTree () const;  ; TClass * IsA () const override;  ; virtual bool IsValidFor (const TTree *parent)=0;  ; virtual void SetTree (TTree *T)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateFormulaLeaves (const TTree *parent)=0;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffe",MatchSource.WIKI,doc/master/classTVirtualIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualIndex.html
Modifiability,inherit,inherited,"nterface for Tree Index. ; Definition at line 30 of file TVirtualIndex.h. Public Member Functions;  TVirtualIndex ();  pointer to Tree ;  ;  ~TVirtualIndex () override;  ; virtual void Append (const TVirtualIndex *, bool delaySort=false)=0;  ; virtual Long64_t GetEntryNumberFriend (const TTree *)=0;  ; virtual Long64_t GetEntryNumberWithBestIndex (Long64_t major, Long64_t minor) const =0;  ; virtual Long64_t GetEntryNumberWithIndex (Long64_t major, Long64_t minor) const =0;  ; virtual const char * GetMajorName () const =0;  ; virtual const char * GetMinorName () const =0;  ; virtual Long64_t GetN () const =0;  ; virtual TTree * GetTree () const;  ; TClass * IsA () const override;  ; virtual bool IsValidFor (const TTree *parent)=0;  ; virtual void SetTree (TTree *T)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateFormulaLeaves (const TTree *parent)=0;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  Li",MatchSource.WIKI,doc/master/classTVirtualIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualIndex.html
Security,hash,hash,"amerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateFormulaLeaves (const TTree *parent)=0;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTVirtualIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualIndex.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualMagField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMagField.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualMagField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMagField.html
Modifiability,inherit,inherited,"Fieldvirtual void Field(const Double_t *x, Double_t *B)=0; double; xDouble_t x[n]Definition legend1.C:17; A field object can be made global via:; TGlobalMagField::Instance()->SetField(field) [1]; A field which is made global is owned by the field manager. The used is not allowed to delete it directly anymore (otherwise a Fatal() is issued). Global field can be deleted by calling [1] with a different argument (which can be NULL). Otherwise the global field is deleted together with the field manager. ; Definition at line 16 of file TVirtualMagField.h. Public Member Functions;  TVirtualMagField ();  ;  TVirtualMagField (const char *name);  ;  ~TVirtualMagField () override;  Destructor. Unregisters the field. ;  ; virtual void Field (const Double_t *x, Double_t *B)=0;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; ",MatchSource.WIKI,doc/master/classTVirtualMagField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMagField.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTVirtualMagField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMagField.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMapFile.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMapFile.html
Modifiability,inherit,inherited,". ROOT: TVirtualMapFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualMapFile Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Abstract base class for TMapFile. ; This allows Core to handle TMapFile which is implemented in RIO ; Definition at line 27 of file TVirtualMapFile.h. Public Member Functions; virtual void Close (Option_t *option="""")=0;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; vi",MatchSource.WIKI,doc/master/classTVirtualMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMapFile.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVirtualMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMapFile.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualMCDecayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMCDecayer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualMCDecayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMCDecayer.html
Modifiability,inherit,inherited,"ualMCDecayer () override;  ; virtual void Decay (Int_t idpart, TLorentzVector *p)=0;  Decay a particle of type IDPART (PDG code) and momentum P. ;  ; virtual void ForceDecay ()=0;  Force a particle decay mode. ;  ; virtual Float_t GetLifetime (Int_t kf)=0;  Get the life-time of a particle of type KF (a PDG code). ;  ; virtual Float_t GetPartialBranchingRatio (Int_t ipart)=0;  Get the partial branching ratio for a particle of type IPART (a PDG code). ;  ; virtual Int_t ImportParticles (TClonesArray *particles)=0;  Get the decay products into the passed PARTICLES TClonesArray of TParticles. ;  ; virtual void Init ()=0;  Initialize the decayer. ;  ; TClass * IsA () const override;  ; virtual void ReadDecayTable ()=0;  Read in particle data from an ASCII file. ;  ; virtual void SetForceDecay (Int_t type)=0;  Force a particular decay type. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTVirtualMCDecayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMCDecayer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVirtualMCDecayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMCDecayer.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualMonitoringReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMonitoringReader.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualMonitoringReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMonitoringReader.html
Modifiability,inherit,inherited,"Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualMonitoringReader Class Reference. . Definition at line 89 of file TVirtualMonitoring.h. Public Member Functions;  TVirtualMonitoringReader (const char *="""");  ; virtual ~TVirtualMonitoringReader ();  ; virtual void DeleteMap (TMap *);  ; virtual void DumpResult ();  ; virtual void GetLastValues (const char *, const char *, const char *, const char *, Bool_t=kFALSE);  ; virtual TMap * GetMap ();  ; virtual void GetValues (const char *, const char *, const char *, const char *, Long_t, Long_t, Bool_t=kFALSE);  ; TClass * IsA () const override;  ; virtual void ProxyValues (const char *, const char *, const char *, const char *, Long_t, Long_t, Long_t);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; ",MatchSource.WIKI,doc/master/classTVirtualMonitoringReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMonitoringReader.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTVirtualMonitoringReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMonitoringReader.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMonitoringWriter.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMonitoringWriter.html
Modifiability,inherit,inherited,"ue);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; virtual Bool_t SendFileCloseEvent (TFile *);  ; virtual Bool_t SendFileOpenProgress (TFile *, TList *, const char *, Bool_t=kFALSE);  ; virtual Bool_t SendFileReadProgress (TFile *);  ; virtual Bool_t SendFileWriteProgress (TFile *);  ; virtual Bool_t SendInfoDescription (const char *);  ; virtual Bool_t SendInfoStatus (const char *);  ; virtual Bool_t SendInfoTime ();  ; virtual Bool_t SendInfoUser (const char *=nullptr);  ; virtual Bool_t SendParameters (TList *, const char *=nullptr);  ; virtual Bool_t SendProcessingProgress (Double_t, Double_t, Bool_t=kFALSE);  ; virtual Bool_t SendProcessingStatus (const char *, Bool_t=kFALSE);  ; virtual void SetLogLevel (const char *=""WARNING"");  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Verbose (Bool_t);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name",MatchSource.WIKI,doc/master/classTVirtualMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMonitoringWriter.html
Security,hash,hash,"ass TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Verbose (Bool_t);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTVirtualMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMonitoringWriter.html
Availability,avail,available,". ROOT: TVirtualMutex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualMutex Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; This class implements a mutex interface. ; The actual work is done via TMutex which is available as soon as the thread library is loaded.; and; TLockGuard; This class provides mutex resource management in a guaranteed and exception safe way. Use like this: {; TLockGuard guard(mutex);; ... // do something; }; TLockGuardDefinition TVirtualMutex.h:70; when guard goes out of scope the mutex is unlocked in the TLockGuard destructor. The exception mechanism takes care of calling the dtors of local objects so it is exception safe. ; Definition at line 32 of file TVirtualMutex.h. Public Member Functions;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; virtual Int_t CleanUp ()=0;  ; virtual TVirtualMutex * Factory (Bool_t=kFALSE)=0;  ; virtual TClass * IsA () const;  ; virtual Int_t Lock ()=0;  ; Int_t Release ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TryLock ()=0;  ; virtual Int_t UnLock ()=0;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TVirtualMutex.h>. Inheritance diagram for TVirtualMutex:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TVirtualMutex(). TVirtualMutex::TVirtualMutex ; (; Bool_t ; = kFALSE). inline . Definition at line 35 of file TVirtualMutex.h. ◆ ~TVirtualMutex(). virtual TVirtualMutex::~TVirtualMutex ; (; ). inlinevirtual . Definition at line 36 of file TVirtualMutex.h. Member Function Documentat",MatchSource.WIKI,doc/master/classTVirtualMutex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMutex.html
Integrability,interface,interface,". ROOT: TVirtualMutex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualMutex Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; This class implements a mutex interface. ; The actual work is done via TMutex which is available as soon as the thread library is loaded.; and; TLockGuard; This class provides mutex resource management in a guaranteed and exception safe way. Use like this: {; TLockGuard guard(mutex);; ... // do something; }; TLockGuardDefinition TVirtualMutex.h:70; when guard goes out of scope the mutex is unlocked in the TLockGuard destructor. The exception mechanism takes care of calling the dtors of local objects so it is exception safe. ; Definition at line 32 of file TVirtualMutex.h. Public Member Functions;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; virtual Int_t CleanUp ()=0;  ; virtual TVirtualMutex * Factory (Bool_t=kFALSE)=0;  ; virtual TClass * IsA () const;  ; virtual Int_t Lock ()=0;  ; Int_t Release ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TryLock ()=0;  ; virtual Int_t UnLock ()=0;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TVirtualMutex.h>. Inheritance diagram for TVirtualMutex:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TVirtualMutex(). TVirtualMutex::TVirtualMutex ; (; Bool_t ; = kFALSE). inline . Definition at line 35 of file TVirtualMutex.h. ◆ ~TVirtualMutex(). virtual TVirtualMutex::~TVirtualMutex ; (; ). inlinevirtual . Definition at line 36 of file TVirtualMutex.h. Member Function Documentat",MatchSource.WIKI,doc/master/classTVirtualMutex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMutex.html
Performance,load,loaded,". ROOT: TVirtualMutex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualMutex Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; This class implements a mutex interface. ; The actual work is done via TMutex which is available as soon as the thread library is loaded.; and; TLockGuard; This class provides mutex resource management in a guaranteed and exception safe way. Use like this: {; TLockGuard guard(mutex);; ... // do something; }; TLockGuardDefinition TVirtualMutex.h:70; when guard goes out of scope the mutex is unlocked in the TLockGuard destructor. The exception mechanism takes care of calling the dtors of local objects so it is exception safe. ; Definition at line 32 of file TVirtualMutex.h. Public Member Functions;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; virtual Int_t CleanUp ()=0;  ; virtual TVirtualMutex * Factory (Bool_t=kFALSE)=0;  ; virtual TClass * IsA () const;  ; virtual Int_t Lock ()=0;  ; Int_t Release ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TryLock ()=0;  ; virtual Int_t UnLock ()=0;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TVirtualMutex.h>. Inheritance diagram for TVirtualMutex:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TVirtualMutex(). TVirtualMutex::TVirtualMutex ; (; Bool_t ; = kFALSE). inline . Definition at line 35 of file TVirtualMutex.h. ◆ ~TVirtualMutex(). virtual TVirtualMutex::~TVirtualMutex ; (; ). inlinevirtual . Definition at line 36 of file TVirtualMutex.h. Member Function Documentat",MatchSource.WIKI,doc/master/classTVirtualMutex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMutex.html
Safety,safe,safe,". ROOT: TVirtualMutex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualMutex Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; This class implements a mutex interface. ; The actual work is done via TMutex which is available as soon as the thread library is loaded.; and; TLockGuard; This class provides mutex resource management in a guaranteed and exception safe way. Use like this: {; TLockGuard guard(mutex);; ... // do something; }; TLockGuardDefinition TVirtualMutex.h:70; when guard goes out of scope the mutex is unlocked in the TLockGuard destructor. The exception mechanism takes care of calling the dtors of local objects so it is exception safe. ; Definition at line 32 of file TVirtualMutex.h. Public Member Functions;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; virtual Int_t CleanUp ()=0;  ; virtual TVirtualMutex * Factory (Bool_t=kFALSE)=0;  ; virtual TClass * IsA () const;  ; virtual Int_t Lock ()=0;  ; Int_t Release ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TryLock ()=0;  ; virtual Int_t UnLock ()=0;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TVirtualMutex.h>. Inheritance diagram for TVirtualMutex:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TVirtualMutex(). TVirtualMutex::TVirtualMutex ; (; Bool_t ; = kFALSE). inline . Definition at line 35 of file TVirtualMutex.h. ◆ ~TVirtualMutex(). virtual TVirtualMutex::~TVirtualMutex ; (; ). inlinevirtual . Definition at line 36 of file TVirtualMutex.h. Member Function Documentat",MatchSource.WIKI,doc/master/classTVirtualMutex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualMutex.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TVirtualObject Member List. This is the complete list of members for TVirtualObject, including all inherited members. fClassTVirtualObject; fObjectTVirtualObject; GetClass() constTVirtualObjectinline; GetObject() constTVirtualObjectinline; operator=(const TVirtualObject &)=deleteTVirtualObjectprivate; TVirtualObject(const TVirtualObject &)=deleteTVirtualObjectprivate; TVirtualObject(TClass *cl)TVirtualObjectinline; ~TVirtualObject()TVirtualObjectinline. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTVirtualObject-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualObject-members.html
Security,access,access,. ROOT: TVirtualObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TVirtualObject Class ReferenceInput/Output Library. ; Wrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary. ; Definition at line 26 of file TVirtualObject.h. Public Member Functions;  TVirtualObject (TClass *cl);  ;  ~TVirtualObject ();  ; TClass * GetClass () const;  ; void * GetObject () const;  . Public Attributes; TClassRef fClass;  ; void * fObject;  . Private Member Functions;  TVirtualObject (const TVirtualObject &)=delete;  ; TVirtualObject & operator= (const TVirtualObject &)=delete;  . #include <TVirtualObject.h>; Constructor & Destructor Documentation. ◆ TVirtualObject() [1/2]. TVirtualObject::TVirtualObject ; (; const TVirtualObject & ; ). privatedelete . ◆ TVirtualObject() [2/2]. TVirtualObject::TVirtualObject ; (; TClass * ; cl). inline . Definition at line 36 of file TVirtualObject.h. ◆ ~TVirtualObject(). TVirtualObject::~TVirtualObject ; (; ). inline . Definition at line 37 of file TVirtualObject.h. Member Function Documentation. ◆ GetClass(). TClass * TVirtualObject::GetClass ; (; ); const. inline . Definition at line 40 of file TVirtualObject.h. ◆ GetObject(). void * TVirtualObject::GetObject ; (; ); const. inline . Definition at line 41 of file TVirtualObject.h. ◆ operator=(). TVirtualObject & TVirtualObject::operator= ; (; const TVirtualObject & ; ). privatedelete . Member Data Documentation. ◆ fClass. TClassRef TVirtualObject::fClass. Definition at line 33 of file TVirtualObject.h. ◆ fObject. void* TVirtualObject::fObject. Definition at line 34 of file TVirtualObject.h. Libraries for TVirtualObject:. [legend]; The documentation for this class was generated from the following file:; core/meta/inc/TVirtualObject.h. TVirtualObject. ,MatchSource.WIKI,doc/master/classTVirtualObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualObject.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualPacketizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualPacketizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer.html
Modifiability,inherit,inherited,"ect created for each query. ; It generates packets to be processed on PROOF worker servers. A packet is an event range (begin entry and number of entries) or object range (first object and number of objects) in a TTree (entries) or a directory (objects) in a file. Packets are generated taking into account the performance of the remote machine, the time it took to process a previous packet on the remote machine, the locality of the database files, etc.; TVirtualPacketizer includes common parts of PROOF packetizers. Look in subclasses for details. The default packetizer is TPacketizerAdaptive (TPacketizer for Proof-Lite). To use an alternative one, for instance - the TPacketizer, call: proof->SetParameter(""PROOF_Packetizer"", ""TPacketizer""); ; Definition at line 53 of file TVirtualPacketizer.h. Classes; class  TVirtualSlaveStat;  . Public Types; enum  EStatusBits { kIsInitializing = (1ULL << ( 16 )); , kIsDone = (1ULL << ( 17 )); , kIsTree = (1ULL << ( 18 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TVirtualPacketizer () override;  Destructor. ;  ; virtual Int_t AddProcessed (TSlave *, TProofProgressStatus *, Double_t, TList **);  ; virtual Int_t AddWorkers (TList *workers);  Adds new workers. ;  ; virtual Int_t AssignWork (TDSet *, Long64_t, Long64_t);  ; virtual Int_t GetActiveWorkers ();  ; Long64_t GetBytesRead () const;  ; TList * GetConfigParams ",MatchSource.WIKI,doc/master/classTVirtualPacketizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer.html
Performance,load,load,". ROOT: TVirtualPacketizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TVirtualPacketizer Class ReferencePROOF » PROOF kernel Libraries. ; The packetizer is a load balancing object created for each query. ; It generates packets to be processed on PROOF worker servers. A packet is an event range (begin entry and number of entries) or object range (first object and number of objects) in a TTree (entries) or a directory (objects) in a file. Packets are generated taking into account the performance of the remote machine, the time it took to process a previous packet on the remote machine, the locality of the database files, etc.; TVirtualPacketizer includes common parts of PROOF packetizers. Look in subclasses for details. The default packetizer is TPacketizerAdaptive (TPacketizer for Proof-Lite). To use an alternative one, for instance - the TPacketizer, call: proof->SetParameter(""PROOF_Packetizer"", ""TPacketizer""); ; Definition at line 53 of file TVirtualPacketizer.h. Classes; class  TVirtualSlaveStat;  . Public Types; enum  EStatusBits { kIsInitializing = (1ULL << ( 16 )); , kIsDone = (1ULL << ( 17 )); , kIsTree = (1ULL << ( 18 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ",MatchSource.WIKI,doc/master/classTVirtualPacketizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer.html
Safety,abort,abort,"ead () const;  ; TList * GetConfigParams (Bool_t steal=kFALSE);  ; Double_t GetCumProcTime () const;  ; virtual Float_t GetCurrentRate (Bool_t &all);  ; Long64_t GetEntriesProcessed () const;  ; virtual Int_t GetEstEntriesProcessed (Float_t, Long64_t &ent, Long64_t &bytes, Long64_t &calls);  ; TList * GetFailedPackets ();  ; Float_t GetInitTime () const;  ; virtual TDSetElement * GetNextPacket (TSlave *sl, TMessage *r);  Get next packet. ;  ; Float_t GetProcTime () const;  ; TNtuple * GetProgressPerf (Bool_t steal=kFALSE);  ; Long64_t GetReadCalls () const;  ; TMap * GetSlaveStats () const;  ; TProofProgressStatus * GetStatus ();  ; Long64_t GetTotalEntries () const;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; virtual void MarkBad (TSlave *, TProofProgressStatus *, TList **);  ; void SetFailedPackets (TList *list);  ; virtual void SetInitTime ();  Set the initialization time. ;  ; void SetProgressStatus (TProofProgressStatus *st);  ; void SetTotalEntries (Long64_t ent);  ; virtual void StopProcess (Bool_t abort, Bool_t stoptimer=kFALSE);  Stop process. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name",MatchSource.WIKI,doc/master/classTVirtualPacketizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer.html
Security,hash,hash," event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVirtualPacketizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html
Modifiability,inherit,inherited,". ROOT: TVirtualPacketizer::TVirtualSlaveStat Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TVirtualPacketizer::TVirtualSlaveStat Class Referenceabstract. . Definition at line 157 of file TVirtualPacketizer.h. Public Member Functions; virtual TProofProgressStatus * AddProcessed (TProofProgressStatus *st)=0;  ; Float_t GetAvgRate ();  ; Long64_t GetEntriesProcessed () const;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetOrdinal () const;  ; Double_t GetProcTime () const;  ; TProofProgressStatus * GetProgressStatus ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) ",MatchSource.WIKI,doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html
Security,hash,hash,"xecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html
Availability,error,error," the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPad.html
Integrability,message,message," the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPad.html
Modifiability,inherit,inherited,"aluex=1, Int_t valuey=1)=0;  ; virtual void SetTickx (Int_t value=1)=0;  ; virtual void SetTicky (Int_t value=1)=0;  ; virtual void SetTitle (const char *title="""")=0;  ; virtual void SetToolTipText (const char *text, Long_t delayms=1000)=0;  ; virtual void SetVertical (Bool_t vert=kTRUE)=0;  ; virtual void SetView (TView *view=nullptr)=0;  ; virtual void SetViewer3D (TVirtualViewer3D *);  ; virtual void ShowGuidelines (TObject *object, const Int_t event, const char mode='i', const bool cling=true)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TVirtualPad. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UnZoomed ();  ; virtual void Update ()=0;  ; virtual void UpdateAsync ()=0;  ; virtual Int_t UtoAbsPixel (Double_t u) const =0;  ; virtual Int_t UtoPixel (Double_t u) const =0;  ; virtual Int_t VtoAbsPixel (Double_t v) const =0;  ; virtual Int_t VtoPixel (Double_t v) const =0;  ; virtual TObject * WaitPrimitive (const char *pname="""", const char *emode="""")=0;  ; virtual Int_t XtoAbsPixel (Double_t x) const =0;  ; virtual Double_t XtoPad (Double_t x) const =0;  ; virtual Int_t XtoPixel (Double_t x) const =0;  ; virtual Int_t YtoAbsPixel (Double_t y) const =0;  ; virtual Double_t YtoPad (Double_t y) const =0;  ; virtual Int_t YtoPixel (Double_t y) const =0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the ",MatchSource.WIKI,doc/master/classTVirtualPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPad.html
Security,hash,hash,"y. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVirtualPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPad.html
Integrability,interface,interface,". ROOT: TVirtualPadPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualPadPainter Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; To make it possible to use GL for 2D graphic in a TPad/TCanvas. ; TVirtualPadPainter interface must be used instead of TVirtualX. Internally, non-GL implementation should delegate all calls to gVirtualX, GL implementation will delegate part of calls to gVirtualX, and has to implement some of the calls from the scratch. ; Definition at line 19 of file TVirtualPadPainter.h. Public Types; enum  EBoxMode { kHollow; , kFilled; };  ; enum  ETextMode { kClear; , kOpaque; };  . Public Member Functions; virtual ~TVirtualPadPainter ();  Virtual dtor. ;  ; virtual void ClearDrawable ()=0;  ; virtual void CopyDrawable (Int_t device, Int_t px, Int_t py)=0;  ; virtual Int_t CreateDrawable (UInt_t w, UInt_t h)=0;  ; virtual void DestroyDrawable (Int_t device)=0;  ; virtual void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, EBoxMode mode)=0;  ; virtual void DrawFillArea (Int_t n, const Double_t *x, const Double_t *y)=0;  ; virtual void DrawFillArea (Int_t n, const Float_t *x, const Float_t *y)=0;  ; virtual void DrawLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2)=0;  ; virtual void DrawLineNDC (Double_t u1, Double_t v1, Double_t u2, Double_t v2)=0;  ; virtual void DrawPixels (const unsigned char *pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending)=0;  ; virtual void DrawPolyLine (Int_t n, const Double_t *x, const Double_t *y)=0;  ; virtual void DrawPolyLine (Int_t n, const Float_t *x, const Float_t *y)=0;  ; virtual void DrawPolyLineNDC (Int_t n, const Double_t *u, const Double_t *v)=0;  ; virtual void DrawPolyMarker (Int_t n, const Double_t *x, const Double_t *y)=0;  ; virtual void DrawPolyMark",MatchSource.WIKI,doc/master/classTVirtualPadPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPadPainter.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualPerfStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPerfStats.html
Integrability,interface,interface,". ROOT: TVirtualPerfStats Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TVirtualPerfStats Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Provides the interface for the PROOF internal performance measurement and event tracing. ; Definition at line 32 of file TVirtualPerfStats.h. Public Types; enum  EEventType { ;   kUnDefined; , kPacket; , kStart; , kStop; , ;   kFile; , kFileOpen; , kFileRead; , kRate; , ;   kNumEventType. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual ~TVirtualPerfStats ();  ; virtual void FileEvent (const char *slave, const char *slavename, const char *nodename, const char *filename, Bool_t isStart)=0;  ; virtual void FileOpenEvent (TFile *file, const char *filename, Double_t start)=0;  ; virtual void FileReadEvent (TFile *file, Int_t len, Double_t start)=0;  ; virtual Long64_t GetBytesRead () const =0;  ; virtual Long64_t GetNumEvents () const =0;  ; TClass * IsA () const override;  ; virtual void PacketEvent (const char *slave, const char *slavename, const char *filename, Long64_t eventsprocessed, Double_t latency, Double_t proctime, Double_t cputime, Long64_t bytesRead)=0;  ; virtual void PrintBasketIn",MatchSource.WIKI,doc/master/classTVirtualPerfStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPerfStats.html
Modifiability,inherit,inherited,". ROOT: TVirtualPerfStats Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TVirtualPerfStats Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Provides the interface for the PROOF internal performance measurement and event tracing. ; Definition at line 32 of file TVirtualPerfStats.h. Public Types; enum  EEventType { ;   kUnDefined; , kPacket; , kStart; , kStop; , ;   kFile; , kFileOpen; , kFileRead; , kRate; , ;   kNumEventType. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual ~TVirtualPerfStats ();  ; virtual void FileEvent (const char *slave, const char *slavename, const char *nodename, const char *filename, Bool_t isStart)=0;  ; virtual void FileOpenEvent (TFile *file, const char *filename, Double_t start)=0;  ; virtual void FileReadEvent (TFile *file, Int_t len, Double_t start)=0;  ; virtual Long64_t GetBytesRead () const =0;  ; virtual Long64_t GetNumEvents () const =0;  ; TClass * IsA () const override;  ; virtual void PacketEvent (const char *slave, const char *slavename, const char *filename, Long64_t eventsprocessed, Double_t latency, Double_t proctime, Double_t cputime, Long64_t bytesRead)=0;  ; virtual void PrintBasketIn",MatchSource.WIKI,doc/master/classTVirtualPerfStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPerfStats.html
Performance,perform,performance,". ROOT: TVirtualPerfStats Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TVirtualPerfStats Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Provides the interface for the PROOF internal performance measurement and event tracing. ; Definition at line 32 of file TVirtualPerfStats.h. Public Types; enum  EEventType { ;   kUnDefined; , kPacket; , kStart; , kStop; , ;   kFile; , kFileOpen; , kFileRead; , kRate; , ;   kNumEventType. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual ~TVirtualPerfStats ();  ; virtual void FileEvent (const char *slave, const char *slavename, const char *nodename, const char *filename, Bool_t isStart)=0;  ; virtual void FileOpenEvent (TFile *file, const char *filename, Double_t start)=0;  ; virtual void FileReadEvent (TFile *file, Int_t len, Double_t start)=0;  ; virtual Long64_t GetBytesRead () const =0;  ; virtual Long64_t GetNumEvents () const =0;  ; TClass * IsA () const override;  ; virtual void PacketEvent (const char *slave, const char *slavename, const char *filename, Long64_t eventsprocessed, Double_t latency, Double_t proctime, Double_t cputime, Long64_t bytesRead)=0;  ; virtual void PrintBasketIn",MatchSource.WIKI,doc/master/classTVirtualPerfStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPerfStats.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVirtualPerfStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPerfStats.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualProofPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualProofPlayer.html
Integrability,interface,interface,". ROOT: TVirtualProofPlayer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualProofPlayer Class ReferenceabstractPROOF » PROOF kernel Libraries. ; Abstract interface for the PROOF player. ; See the concrete implementations under 'proofplayer' for details. ; Definition at line 43 of file TVirtualProofPlayer.h. Public Types; enum  EExitStatus { kFinished; , kStopped; , kAborted; };  ; enum  EStatusBits { kIsSubmerger = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVirtualProofPlayer ();  ;  ~TVirtualProofPlayer () override;  ; virtual void AddEventsProcessed (Long64_t ev)=0;  ; virtual void AddInput (TObject *inp)=0;  ; virtual void AddOutput (TList *out)=0;  ; virtual Int_t AddOutputObject (TObject *obj)=0;  ; virtual void AddQueryResult (TQueryResult *q)=0;  ; virtual void ClearInput ()=0;  ; virtual TDrawFeedback * CreateDrawFeedback (TProof *p)=0;  ; virtual void DeleteDrawFeedback (TDrawFeedback *f)=0;  ; virtual Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0)=0;  ; virtual void Feedback (TList *objs)=0;  ; virtual Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=",MatchSource.WIKI,doc/master/classTVirtualProofPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualProofPlayer.html
Modifiability,inherit,inherited,". ROOT: TVirtualProofPlayer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualProofPlayer Class ReferenceabstractPROOF » PROOF kernel Libraries. ; Abstract interface for the PROOF player. ; See the concrete implementations under 'proofplayer' for details. ; Definition at line 43 of file TVirtualProofPlayer.h. Public Types; enum  EExitStatus { kFinished; , kStopped; , kAborted; };  ; enum  EStatusBits { kIsSubmerger = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVirtualProofPlayer ();  ;  ~TVirtualProofPlayer () override;  ; virtual void AddEventsProcessed (Long64_t ev)=0;  ; virtual void AddInput (TObject *inp)=0;  ; virtual void AddOutput (TList *out)=0;  ; virtual Int_t AddOutputObject (TObject *obj)=0;  ; virtual void AddQueryResult (TQueryResult *q)=0;  ; virtual void ClearInput ()=0;  ; virtual TDrawFeedback * CreateDrawFeedback (TProof *p)=0;  ; virtual void DeleteDrawFeedback (TDrawFeedback *f)=0;  ; virtual Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0)=0;  ; virtual void Feedback (TList *objs)=0;  ; virtual Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=",MatchSource.WIKI,doc/master/classTVirtualProofPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualProofPlayer.html
Safety,abort,abort,"essage *mess)=0;  ; TClass * IsA () const override;  ; virtual Bool_t IsClient () const =0;  ; virtual Bool_t JoinProcess (TList *workers)=0;  ; virtual void MergeOutput (Bool_t=kFALSE)=0;  ; virtual Long64_t Process (TDSet *set, const char *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0)=0;  ; virtual Long64_t Process (TDSet *set, TSelector *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0)=0;  ; virtual void Progress (Long64_t total, Long64_t processed)=0;  ; virtual void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti)=0;  ; virtual void Progress (TProofProgressInfo *)=0;  ; virtual void Progress (TSlave *, Long64_t total, Long64_t processed)=0;  ; virtual void Progress (TSlave *, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti)=0;  ; virtual void Progress (TSlave *, TProofProgressInfo *)=0;  ; virtual Int_t ReinitSelector (TQueryResult *qr)=0;  ; virtual void RemoveQueryResult (const char *ref)=0;  ; virtual void RestorePreviousQuery ()=0;  ; virtual Int_t SavePartialResults (Bool_t queryend=kFALSE, Bool_t force=kFALSE)=0;  ; virtual void SetCurrentQuery (TQueryResult *q)=0;  ; virtual void SetDispatchTimer (Bool_t on=kTRUE)=0;  ; virtual void SetDrawFeedbackOption (TDrawFeedback *f, Option_t *opt)=0;  ; virtual void SetExitStatus (EExitStatus)=0;  ; virtual void SetInitTime ()=0;  ; virtual void SetMaxDrawQueries (Int_t max)=0;  ; virtual void SetMerging (Bool_t on=kTRUE)=0;  ; virtual void SetOutputFilePath (const char *fp)=0;  ; virtual void SetStopTimer (Bool_t on=kTRUE, Bool_t abort=kFALSE, Int_t timeout=0)=0;  ; virtual void StopProcess (Bool_t abort, Int_t timeout=-1)=0;  ; virtual void StoreFeedback (TObject *slave, TList *out)=0;  ; virtual void StoreOutput (TList *out)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject.",MatchSource.WIKI,doc/master/classTVirtualProofPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualProofPlayer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVirtualProofPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualProofPlayer.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualPS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPS.html
Integrability,interface,interface,". ROOT: TVirtualPS Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TVirtualPS Class ReferenceabstractCore ROOT classes » Base ROOT classes | Graphics » 2D Graphics » Graphics file output. ; TVirtualPS is an abstract interface to Postscript, PDF, SVG. ; TeX etc... drivers ; Definition at line 30 of file TVirtualPS.h. Public Member Functions;  TVirtualPS ();  VirtualPS default constructor. ;  ;  TVirtualPS (const char *filename, Int_t type=-111);  VirtualPS constructor. ;  ; virtual ~TVirtualPS ();  VirtualPS destructor. ;  ; virtual void CellArrayBegin (Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2)=0;  ; virtual void CellArrayEnd ()=0;  ; virtual void CellArrayFill (Int_t r, Int_t g, Int_t b)=0;  ; virtual void Close (Option_t *opt="""")=0;  ; virtual void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2)=0;  ; virtual void DrawFrame (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light)=0;  ; virtual void DrawPolyMarker (Int_t n, Double_t *x, Double_t *y)=0;  ; virtual void DrawPolyMarker (Int_t n, Float_t *x, Float_t *y)=0;  ; virtual void DrawPS (Int_t n, Double_t *xw, Double_t *yw)=0;  ; virtual void DrawPS (Int_t n, Float_t *xw, Float_t *yw)=0;  ; virtual void * GetStream () const;  ; virtual Int_t GetType () const;  ; TClass * IsA () const override;  ; virtual void NewPage ()=0;  ; virtual void Open (const char *filename, Int_t type=-111)=0;  ; virtual void PrintFast (Int_t nch, const char *string="""");  Fast version of Print. ;  ; virtual void PrintRaw (Int_t len, const char *str);  Print a raw. ;  ; virtual void PrintStr (const char *string="""");  Output the string str in the output buffer. ;  ; virtual void SetColor (Float_t r, Float_t g, Float_t b)=0;  ; virtual void SetStrea",MatchSource.WIKI,doc/master/classTVirtualPS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPS.html
Modifiability,inherit,inherited," (const char *filename, Int_t type=-111)=0;  ; virtual void PrintFast (Int_t nch, const char *string="""");  Fast version of Print. ;  ; virtual void PrintRaw (Int_t len, const char *str);  Print a raw. ;  ; virtual void PrintStr (const char *string="""");  Output the string str in the output buffer. ;  ; virtual void SetColor (Float_t r, Float_t g, Float_t b)=0;  ; virtual void SetStream (std::ofstream *os);  ; virtual void SetType (Int_t=-111);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Text (Double_t x, Double_t y, const char *string)=0;  ; virtual void Text (Double_t x, Double_t y, const wchar_t *string)=0;  ; virtual void WriteInteger (Int_t i, Bool_t space=kTRUE);  Write one Integer to the file. ;  ; virtual void WriteReal (Float_t r, Bool_t space=kTRUE);  Write a Real number to the file. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed",MatchSource.WIKI,doc/master/classTVirtualPS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPS.html
Security,hash,hash,"ger to the file. ;  ; virtual void WriteReal (Float_t r, Bool_t space=kTRUE);  Write a Real number to the file. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTVirtualPS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualPS.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualStreamerInfo.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTVirtualStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualStreamerInfo.html
Modifiability,inherit,inherited,"kTString = 65; , kTObject = 66; , ;   kTNamed = 67; , kAnyp = 68; , kAnyP = 69; , kAnyPnoVT = 70; , ;   kSTLp = 71; , kSkip = 100; , kSkipL = 120; , kSkipP = 140; , ;   kConv = 200; , kConvL = 220; , kConvP = 240; , kSTL = ROOT::kSTLany; , ;   kSTLstring = ROOT::kSTLstring; , kStreamer = 500; , kStreamLoop = 501; , kCache = 600; , ;   kArtificial = 1000; , kCacheNew = 1001; , kCacheDelete = 1002; , kNeedObjectForVirtualBaseClass = 99997; , ;   kMissing = 99999; , kNoType = -1; , kUnsupportedConversion = -2; , kUnset = -3. };  EReadWrite Enumerator. More...;  ; enum  EStatusBits { ;   kCannotOptimize = (1ULL << ( 12 )); , kIgnoreTObjectStreamer = (1ULL << ( 13 )); , kRecovered = (1ULL << ( 14 )); , kNeedCheck = (1ULL << ( 15 )); , ;   kIsCompiled = (1ULL << ( 16 )); , kBuildOldUsed = (1ULL << ( 17 )); , kBuildRunning = (1ULL << ( 18 )). };  ; enum class  EStatusBitsDupExceptions { kIgnoreTObjectStreamer = TVirtualStreamerInfo::kIgnoreTObjectStreamer; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVirtualStreamerInfo ();  Default constructor. ;  ;  TVirtualStreamerInfo (TClass *);  Default constructor. ;  ; virtual ~TVirtualStreamerInfo ();  Destructor. ;  ; virtual void Build (Bool_t isTransient=kFALSE)=0;  ; virtual void BuildCheck (TFile *file=nullptr, Bool_t load=kTRUE)=0;  ; virtual void BuildEmulated (TFile *file)=0;  ; virtual Bool_t BuildFor (const ",MatchSource.WIKI,doc/master/classTVirtualStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualStreamerInfo.html
Performance,load,load,"  kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVirtualStreamerInfo ();  Default constructor. ;  ;  TVirtualStreamerInfo (TClass *);  Default constructor. ;  ; virtual ~TVirtualStreamerInfo ();  Destructor. ;  ; virtual void Build (Bool_t isTransient=kFALSE)=0;  ; virtual void BuildCheck (TFile *file=nullptr, Bool_t load=kTRUE)=0;  ; virtual void BuildEmulated (TFile *file)=0;  ; virtual Bool_t BuildFor (const TClass *cl)=0;  ; virtual void BuildOld ()=0;  ; virtual void CallShowMembers (const void *obj, TMemberInspector &insp, Bool_t isTransient) const =0;  ; virtual void Clear (Option_t *="""") override=0;  Set name and title to empty strings (""""). ;  ; virtual Bool_t CompareContent (TClass *cl, TVirtualStreamerInfo *info, Bool_t warn, Bool_t complete, TFile *file)=0;  ; virtual void Compile ()=0;  ; virtual void DeleteArray (void *p, Bool_t dtorOnly=kFALSE)=0;  ; virtual void Destructor (void *p, Bool_t dtorOnly=kFALSE)=0;  ; virtual void ForceWriteInfo (TFile *file, Bool_t force=kFALSE)=0;  ; virtual TClassStreamer * GenEmulatedClassStreamer (const char *class_name, Bool_t silent)=0;  ; virtual TVirtualCollectionProxy * GenEmulatedProxy (const char *class_name, Bool_t silent)=0;  ; virtual Int_t GenerateHeaderFile (const char *dirname, const TList *subClasses=nullptr, const TList *extrainfos=nullptr)=0;  ; virtual TVirtualStreamerInfo * GenerateInfoForPair (const std::string &firstname, const std::string &",MatchSource.WIKI,doc/master/classTVirtualStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualStreamerInfo.html
Security,checksum,checksum,"(Int_t id) const =0;  ; virtual TStreamerElement * GetElement (Int_t id) const =0;  ; virtual Int_t GetElementOffset (Int_t id) const =0;  ; virtual TObjArray * GetElements () const =0;  ; virtual Int_t GetNumber () const =0;  ; virtual Int_t GetOffset (const char *) const =0;  ; virtual Int_t GetOffset (Int_t id) const =0;  ; virtual Version_t GetOldVersion () const =0;  ; virtual Int_t GetOnFileClassVersion () const =0;  ; virtual Int_t GetSize () const =0;  ; virtual TStreamerElement * GetStreamerElement (const char *datamember, Int_t &offset) const =0;  ; TClass * IsA () const override;  ; Bool_t IsBuilt () const;  ; Bool_t IsCompiled () const;  ; Bool_t IsOptimized () const;  ; Int_t IsRecovered () const;  ; virtual void ls (Option_t *="""") const override=0;  List TNamed name and title. ;  ; virtual void * New (void *obj=nullptr)=0;  ; virtual void * NewArray (Long_t nElements, void *ary=nullptr)=0;  ; virtual TVirtualStreamerInfo * NewInfo (TClass *cl)=0;  ; virtual void SetCheckSum (UInt_t checksum)=0;  ; virtual void SetClass (TClass *cl)=0;  ; virtual void SetClassVersion (Int_t vers)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TVirtualStreamerInfo. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TagFile (TFile *fFile)=0;  ; virtual void Update (const TClass *oldClass, TClass *newClass)=0;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ;",MatchSource.WIKI,doc/master/classTVirtualStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualStreamerInfo.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualTreePlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualTreePlayer.html
Integrability,interface,interface,". ROOT: TVirtualTreePlayer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Static Private Attributes |; List of all members ; TVirtualTreePlayer Class ReferenceabstractTree Library. ; Abstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc. ; for a TTree object. See the individual documentations in TTree. ; Definition at line 38 of file TVirtualTreePlayer.h. Public Member Functions;  TVirtualTreePlayer ();  ;  ~TVirtualTreePlayer () override;  Common destructor. ;  ; virtual TVirtualIndex * BuildIndex (const TTree *T, const char *majorname, const char *minorname)=0;  ; virtual TTree * CopyTree (const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)=0;  ; virtual Long64_t DrawScript (const char *wrapperPrefix, const char *macrofilename, const char *cutfilename, Option_t *option, Long64_t nentries, Long64_t firstentry)=0;  ; virtual Long64_t DrawSelect (const char *varexp, const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry)=0;  ; virtual Int_t Fit (const char *formula, const char *varexp, const char *selection, Option_t *option, Option_t *goption, Long64_t nentries, Long64_t firstentry)=0;  ; virtual Int_t GetDimension () const =0;  ; virtual Long64_t GetEntries (const char *)=0;  ; virtual TH1 * GetHistogram () const =0;  ; virtual Int_t GetNfill () const =0;  ; virtual TTreeFormula * GetSelect () const =0;  ; virtual Long64_t GetSelectedRows () const =0;  ; virtual TSelector * GetSelector () const =0;  ; virtual TSelector * GetSelectorFromFile () const =0;  ; virtual Double_t * GetV1 () const =0;  ; virtual Double_t * GetV2 () const =0;  ; virtual Double_t * GetV3 () const =0;  ; virtual Double_t * GetV4 () const =0;  ; virtual Double_t * GetVal (Int_t) const =0;  ; virtual TTreeFormu",MatchSource.WIKI,doc/master/classTVirtualTreePlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualTreePlayer.html
Modifiability,plugin,plugins,". ROOT: TVirtualTreePlayer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Static Private Attributes |; List of all members ; TVirtualTreePlayer Class ReferenceabstractTree Library. ; Abstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc. ; for a TTree object. See the individual documentations in TTree. ; Definition at line 38 of file TVirtualTreePlayer.h. Public Member Functions;  TVirtualTreePlayer ();  ;  ~TVirtualTreePlayer () override;  Common destructor. ;  ; virtual TVirtualIndex * BuildIndex (const TTree *T, const char *majorname, const char *minorname)=0;  ; virtual TTree * CopyTree (const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)=0;  ; virtual Long64_t DrawScript (const char *wrapperPrefix, const char *macrofilename, const char *cutfilename, Option_t *option, Long64_t nentries, Long64_t firstentry)=0;  ; virtual Long64_t DrawSelect (const char *varexp, const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry)=0;  ; virtual Int_t Fit (const char *formula, const char *varexp, const char *selection, Option_t *option, Option_t *goption, Long64_t nentries, Long64_t firstentry)=0;  ; virtual Int_t GetDimension () const =0;  ; virtual Long64_t GetEntries (const char *)=0;  ; virtual TH1 * GetHistogram () const =0;  ; virtual Int_t GetNfill () const =0;  ; virtual TTreeFormula * GetSelect () const =0;  ; virtual Long64_t GetSelectedRows () const =0;  ; virtual TSelector * GetSelector () const =0;  ; virtual TSelector * GetSelectorFromFile () const =0;  ; virtual Double_t * GetV1 () const =0;  ; virtual Double_t * GetV2 () const =0;  ; virtual Double_t * GetV3 () const =0;  ; virtual Double_t * GetV4 () const =0;  ; virtual Double_t * GetVal (Int_t) const =0;  ; virtual TTreeFormu",MatchSource.WIKI,doc/master/classTVirtualTreePlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualTreePlayer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVirtualTreePlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualTreePlayer.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTVirtualViewer3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html
Energy Efficiency,efficient,efficiently,"iewer3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualViewer3D Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Abstract 3D shapes viewer. ; The concrete implementations are:. TViewerX3D : X3d viewer; TGLViewer : OpenGL viewer. 3D Viewer Infrastructure Overview; The 3D Viewer infrastructure consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing client to test preferences, add objects, control the viewer via scripting (to be added) etc. -TBuffer3D class hierarchy: Used to describe 3D objects (""shapes""); filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow our simple x3d viewer, and considerably more sophisticated OpenGL one to both work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again ... repeat 3/4/5 as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always bound to a TPad object at present [This may be removed as a restriction in the future] . You should perform the publishing to the viewer described below in the Paint() method of the object you attach to the pad (via Draw()) TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; gPad#define gPadDefinition TVirtualPad.h:308; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; v@ vDefinition rootcling_impl.cxx:3699; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or Pad ""pad"" (default). The view",MatchSource.WIKI,doc/master/classTVirtualViewer3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html
Integrability,interface,interface,". ROOT: TVirtualViewer3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualViewer3D Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Abstract 3D shapes viewer. ; The concrete implementations are:. TViewerX3D : X3d viewer; TGLViewer : OpenGL viewer. 3D Viewer Infrastructure Overview; The 3D Viewer infrastructure consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing client to test preferences, add objects, control the viewer via scripting (to be added) etc. -TBuffer3D class hierarchy: Used to describe 3D objects (""shapes""); filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow our simple x3d viewer, and considerably more sophisticated OpenGL one to both work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again ... repeat 3/4/5 as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always bound to a TPad object at present [This may be removed as a restriction in the future] . You should perform the publishing to the viewer described below in the Paint() method of the object you attach to the pad (via Draw()) TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; gPad#define gPadDefinition TVirtualPad.h:308; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; v@ vDefinition rootcling_impl.cxx:3699; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or Pad ""pad"" (d",MatchSource.WIKI,doc/master/classTVirtualViewer3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html
Modifiability,plugin,plugin,"y libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again ... repeat 3/4/5 as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always bound to a TPad object at present [This may be removed as a restriction in the future] . You should perform the publishing to the viewer described below in the Paint() method of the object you attach to the pad (via Draw()) TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; gPad#define gPadDefinition TVirtualPad.h:308; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; v@ vDefinition rootcling_impl.cxx:3699; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or Pad ""pad"" (default). The viewer is created via the plugin manager, attached to pad, and the interface returned. Begin / End Scene; Objects must be added to viewer between BeginScene/EndScene calls e.g. v->BeginScene();; .....; v->AddObject(....);; v->AddObject(....);; .....; v->EndScene();; The BeginScene call will cause the viewer to suspend redraws etc, and after the EndScene the viewer will reset the camera to frame the new scene and redraw. [x3d viewer does not support changing of scenes - objects added after the first Open/CloseScene pair will be ignored.]. Filling TBuffer3D and Adding to Viewer; The viewers behind the TVirtualViewer3D interface differ greatly in their capabilities e.g. Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL) - others always require a raw tessellation description of points/lines/segments.; Some need the 3D object positions in the global frame, others can cope with local frames + a translation matrix - which can give considerable performance benefits. To cope with these situations the object b",MatchSource.WIKI,doc/master/classTVirtualViewer3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html
Performance,perform,perform,"o describe 3D objects (""shapes""); filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow our simple x3d viewer, and considerably more sophisticated OpenGL one to both work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again ... repeat 3/4/5 as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always bound to a TPad object at present [This may be removed as a restriction in the future] . You should perform the publishing to the viewer described below in the Paint() method of the object you attach to the pad (via Draw()) TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; gPad#define gPadDefinition TVirtualPad.h:308; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; v@ vDefinition rootcling_impl.cxx:3699; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or Pad ""pad"" (default). The viewer is created via the plugin manager, attached to pad, and the interface returned. Begin / End Scene; Objects must be added to viewer between BeginScene/EndScene calls e.g. v->BeginScene();; .....; v->AddObject(....);; v->AddObject(....);; .....; v->EndScene();; The BeginScene call will cause the viewer to suspend redraws etc, and after the EndScene the viewer will reset the camera to frame the new scene and redraw. [x3d viewer does not support changing of scenes - objects added after the first Open/CloseScene pair will be ignored.]. Filling TBuffer3D and Adding to Viewer; The viewers behind the TVirtualViewer3D interface differ greatly in their capabilities e.g. Some know ho",MatchSource.WIKI,doc/master/classTVirtualViewer3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html
Safety,detect,detect,"too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition, simply indicating it does not require you to provide further information about this object. You should not try to make any assumptions about what the viewer did with it.; This enables the viewer to be connected to a client which sends potentially millions of objects, and only accept those that are of interest at a certain time, caching the relatively small number of CPU/memory costly logical shapes, and retaining/discarding the physical placements as required. The viewer may decide to force the client to rebuild (republish) the scene (via a TPad repaint at present), and thus collect these objects if the internal viewer state changes. It does this presently by forcing a repaint on the attached TPad object - hence the reason for putting all publishing to the viewer in the attached pad objects Paint() method. We will likely remove this requirement in the future, indicating the rebuild request via a normal ROOT signal, which the client can detect. Physical IDs; TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const TBuffer3D & buffer, Bool_t * addChildren = 0); virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); TBuffer3DGeneric 3D primitive description class.Definition TBuffer3D.h:18; TVirtualViewer3D::AddObjectvirtual Int_t AddObject(const TBuffer3D &buffer, Bool_t *addChildren=nullptr)=0; bool; unsigned int; If you use the first (simple) case a viewer using logical/physical pairs will generate IDs for each physical object internally. In the second you can specify a unique identifier from the client, which allows the viewer to be more efficient. It can now cache both logical and physical objects, and only discard physical objects no longer of interest as part of scene rebuilds. Child Objects; In many geometries there is a rigid containment hierarchy, and so if the viewer is not ",MatchSource.WIKI,doc/master/classTVirtualViewer3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTVirtualViewer3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html
Testability,test,test,". ROOT: TVirtualViewer3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualViewer3D Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Abstract 3D shapes viewer. ; The concrete implementations are:. TViewerX3D : X3d viewer; TGLViewer : OpenGL viewer. 3D Viewer Infrastructure Overview; The 3D Viewer infrastructure consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing client to test preferences, add objects, control the viewer via scripting (to be added) etc. -TBuffer3D class hierarchy: Used to describe 3D objects (""shapes""); filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow our simple x3d viewer, and considerably more sophisticated OpenGL one to both work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again ... repeat 3/4/5 as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always bound to a TPad object at present [This may be removed as a restriction in the future] . You should perform the publishing to the viewer described below in the Paint() method of the object you attach to the pad (via Draw()) TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; gPad#define gPadDefinition TVirtualPad.h:308; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; v@ vDefinition rootcling_impl.cxx:3699; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or Pad ""pad"" (d",MatchSource.WIKI,doc/master/classTVirtualViewer3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html
Usability,simpl,simple,"iewer3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualViewer3D Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Abstract 3D shapes viewer. ; The concrete implementations are:. TViewerX3D : X3d viewer; TGLViewer : OpenGL viewer. 3D Viewer Infrastructure Overview; The 3D Viewer infrastructure consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing client to test preferences, add objects, control the viewer via scripting (to be added) etc. -TBuffer3D class hierarchy: Used to describe 3D objects (""shapes""); filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow our simple x3d viewer, and considerably more sophisticated OpenGL one to both work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again ... repeat 3/4/5 as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always bound to a TPad object at present [This may be removed as a restriction in the future] . You should perform the publishing to the viewer described below in the Paint() method of the object you attach to the pad (via Draw()) TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; gPad#define gPadDefinition TVirtualPad.h:308; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; v@ vDefinition rootcling_impl.cxx:3699; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or Pad ""pad"" (default). The view",MatchSource.WIKI,doc/master/classTVirtualViewer3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html
Availability,mask,mask,"; virtual ~TVirtualX ();  ; virtual Int_t AddPixmap (ULongptr_t pixid, UInt_t w, UInt_t h);  Registers a pixmap created by TGLManager as a ROOT pixmap. ;  ; virtual Int_t AddWindow (ULongptr_t qwid, UInt_t w, UInt_t h);  Registers a window created by Qt as a ROOT window. ;  ; virtual Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color);  Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ;  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void Bell (Int_t percent);  Sets the sound bell. Percent is loudness from -100% to 100%. ;  ; virtual void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t);  Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ;  ; virtual void ChangeGC (GContext_t gc, GCValues_t *gval);  Changes the components specified by the mask in gval for the specified GC. ;  ; virtual void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len);  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; virtual void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len);  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; virtual void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr);  Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ;  ; virtual Bool_t CheckEvent (Window_t id, EGEventType type, Event_t &ev);  Check if there is for window ""id"" an event of type ""type"". ;  ; virtual void ClearArea (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h);  Paints a rectangular area in the specified window ""id"" according t",MatchSource.WIKI,doc/master/classTVirtualX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualX.html
Deployability,update,updated,"FontStruct_t);  Map the XftFont with the Graphics Context using it. ;  ; virtual void MapRaised (Window_t id);  Maps the window ""id"" and all of its subwindows that have had map requests on the screen and put this window on the top of of the stack of all windows. ;  ; virtual void MapSubwindows (Window_t id);  Maps all subwindows for the specified window ""id"" in top-to-bottom stacking order. ;  ; virtual void MapWindow (Window_t id);  Maps the window ""id"" and all of its subwindows that have had map requests. ;  ; virtual void MoveResizeWindow (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h);  Changes the size and location of the specified window ""id"" without raising it. ;  ; virtual void MoveWindow (Int_t wid, Int_t x, Int_t y);  Moves the window ""wid"" to the specified x and y coordinates. ;  ; virtual void MoveWindow (Window_t id, Int_t x, Int_t y);  Moves the specified window to the specified x and y coordinates. ;  ; virtual Bool_t NeedRedraw (ULongptr_t tgwindow, Bool_t force);  Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ;  ; virtual void NextEvent (Event_t &event);  The ""event"" is set to default event. ;  ; virtual Int_t OpenDisplay (const char *dpyName);  Opens connection to display server (if such a thing exist on the current platform). ;  ; virtual Int_t OpenPixmap (UInt_t w, UInt_t h);  Creates a pixmap of the width ""w"" and height ""h"" you specified. ;  ; virtual Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color);  Looks up the string name of a color ""cname"" with respect to the screen associated with the specified colormap. ;  ; virtual Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg);  Returns kTRUE if the point [x, y] is contained in the region reg. ;  ; virtual Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding);  Returns a region for the polygon defined by the points array. ;  ; virtual void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_",MatchSource.WIKI,doc/master/classTVirtualX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualX.html
Energy Efficiency,allocate,allocated,"ocumentation. ◆ AddPixmap(). Int_t TVirtualX::AddPixmap ; (; ULongptr_t ; pixid, . UInt_t ; w, . UInt_t ; h . ). virtual . Registers a pixmap created by TGLManager as a ROOT pixmap. ; Parameters. [in]pixidpixmap identifier ; [in]w,hthe width and height, which define the pixmap size . Reimplemented in TGCocoa, TGX11, and TGWin32.; Definition at line 561 of file TVirtualX.cxx. ◆ AddWindow(). Int_t TVirtualX::AddWindow ; (; ULongptr_t ; qwid, . UInt_t ; w, . UInt_t ; h . ). virtual . Registers a window created by Qt as a ROOT window. ; Parameters. [in]qwidwindow identifier ; [in]w,hthe width and height, which define the window size . Reimplemented in TGCocoa, TGX11, TGWin32, and TGWin32VirtualXProxy.; Definition at line 550 of file TVirtualX.cxx. ◆ AllocColor(). Bool_t TVirtualX::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). virtual . Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE.; The pixel value is set to default. Let system think we could allocate color.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the values actually used in the cmap . Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 113 of file TVirtualX.cxx. ◆ BeginModalSessionFor(). void TVirtualX::BeginModalSessionFor ; (; Window_t ; window). virtual . Start a modal session for a dialog window. ; Definition at line 2488 of file TVirtualX.cxx. ◆ Bell(). void TVirtualX::Bell ; (; Int_t ; percent). virtual . Sets the sound bell. Percent is loudness from -100% to 100%. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1517 of file TVirtualX.cxx. ◆ ChangeActivePointerGrab(). void TVirtualX::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; , . Cursor_t ;  . ). virtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the spe",MatchSource.WIKI,doc/master/classTVirtualX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualX.html
Integrability,interface,interface,". ROOT: TVirtualX Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TVirtualX Class ReferenceGraphics » Graphics' Backends | Core ROOT classes » Base ROOT classes. ; Semi-Abstract base class defining a generic interface to the underlying, low level, native graphics backend (X11, Win32, MacOS, OpenGL...). ; An instance of TVirtualX itself defines a batch interface to the graphics system. ; Definition at line 46 of file TVirtualX.h. Public Types; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual Int_t AddPixmap (ULongptr_t pixid, UInt_t w, UInt_t h);  Registers a pixmap created by TGLManager as a ROOT pixmap. ;  ; virtual Int_t AddWindow (ULongptr_t qwid, UInt_t w, UInt_t h);  Registers a window created by Qt as a ROOT window. ;  ; virtual Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color);  Allocates a read-only colormap entry corresponding to the closest RGB value suppo",MatchSource.WIKI,doc/master/classTVirtualX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualX.html
Modifiability,inherit,inherited,". ROOT: TVirtualX Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TVirtualX Class ReferenceGraphics » Graphics' Backends | Core ROOT classes » Base ROOT classes. ; Semi-Abstract base class defining a generic interface to the underlying, low level, native graphics backend (X11, Win32, MacOS, OpenGL...). ; An instance of TVirtualX itself defines a batch interface to the graphics system. ; Definition at line 46 of file TVirtualX.h. Public Types; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual Int_t AddPixmap (ULongptr_t pixid, UInt_t w, UInt_t h);  Registers a pixmap created by TGLManager as a ROOT pixmap. ;  ; virtual Int_t AddWindow (ULongptr_t qwid, UInt_t w, UInt_t h);  Registers a window created by Qt as a ROOT window. ;  ; virtual Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color);  Allocates a read-only colormap entry corresponding to the closest RGB value suppo",MatchSource.WIKI,doc/master/classTVirtualX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualX.html
Performance,queue,queue," of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ;  ; virtual void DrawSegments (Drawable_t id, GContext_t gc, Segment_t *seg, Int_t nseg);  Draws multiple line segments. ;  ; virtual void DrawString (Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char *s, Int_t len);  Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable. ;  ; virtual void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const char *text, ETextMode mode);  Draws a text string using current font. ;  ; virtual void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t *text, ETextMode mode);  Draws a text string using current font. ;  ; virtual Bool_t EmptyRegion (Region_t reg);  Returns kTRUE if the region reg is empty. ;  ; virtual Bool_t EqualRegion (Region_t rega, Region_t regb);  Returns kTRUE if the two regions have the same offset, size, and shape. ;  ; virtual Int_t EventsPending ();  Returns the number of events that have been received from the X server but have not been removed from the event queue. ;  ; virtual UInt_t ExecCommand (TGWin32Command *code);  Executes the command ""code"" coming from the other threads (Win32) ;  ; virtual void FillPolygon (Window_t id, GContext_t gc, Point_t *points, Int_t npnt);  Fills the region closed by the specified path. ;  ; virtual void FillRectangle (Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h);  Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ;  ; virtual Window_t FindRWindow (Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd);  Recursively search in the children of Window for a Window which is at location x, y and is DND aware, with a maximum depth of maxd. ;  ; virtual void FlushOpenGLBuffer (Handle_t ctx);  Flushes OpenGL buffer. ;  ; virtual void FreeColor (Colormap_t cmap, ULong_t pixel);  Frees color cell with specified pixel value. ;  ; virtual void FreeFontNames (char **fontlist);  Frees t",MatchSource.WIKI,doc/master/classTVirtualX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualX.html
Security,access,accessing," Initializes the X system. ;  ; virtual Int_t InitWindow (ULongptr_t window);  Creates a new window and return window number. ;  ; virtual Atom_t InternAtom (const char *atom_name, Bool_t only_if_exist);  Returns the atom identifier associated with the specified ""atom_name"" string. ;  ; virtual void IntersectRegion (Region_t rega, Region_t regb, Region_t result);  Computes the intersection of two regions. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsCmdThread () const;  ; virtual Bool_t IsDNDAware (Window_t win, Atom_t *typelist);  Checks if the Window is DND aware, and knows any of the DND formats passed in argument. ;  ; virtual Int_t KeysymToKeycode (UInt_t keysym);  Converts the ""keysym"" to the appropriate keycode. ;  ; virtual char ** ListFonts (const char *fontname, Int_t max, Int_t &count);  Returns list of font names matching fontname regexp, like ""-*-times-*"". ;  ; virtual FontStruct_t LoadQueryFont (const char *font_name);  Provides the most common way for accessing a font: opens (loads) the specified font and returns a pointer to the appropriate FontStruct_t structure. ;  ; virtual void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym);  Converts the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ;  ; virtual void LowerWindow (Window_t id);  Lowers the specified window ""id"" to the bottom of the stack so that it does not obscure any sibling windows. ;  ; virtual Bool_t MakeOpenGLContextCurrent (Handle_t ctx, Window_t windowID);  Makes context ctx current OpenGL context. ;  ; virtual void MapGCFont (GContext_t, FontStruct_t);  Map the XftFont with the Graphics Context using it. ;  ; virtual void MapRaised (Window_t id);  Maps the window ""id"" and all of its subwindows that have had map requests on the screen and put this window on the top of of the stack of all windows. ;  ; virtual void MapSubwindows (Window_t id);  Maps all subw",MatchSource.WIKI,doc/master/classTVirtualX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualX.html
Testability,log,logically,"pecified colormap. ;  ; virtual Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg);  Returns kTRUE if the point [x, y] is contained in the region reg. ;  ; virtual Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding);  Returns a region for the polygon defined by the points array. ;  ; virtual void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h);  Combines an image with a rectangle of the specified drawable. ;  ; virtual void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel);  Overwrites the pixel in the image with the specified pixel value. ;  ; virtual void QueryColor (Colormap_t cmap, ColorStruct_t &color);  Returns the current RGB value for the pixel in the ""color"" structure. ;  ; virtual void QueryPointer (Int_t &ix, Int_t &iy);  Returns the pointer position. ;  ; virtual void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask);  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; virtual void RaiseWindow (Window_t id);  Raises the specified window to the top of the stack so that no sibling window obscures it. ;  ; virtual Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0);  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; virtual Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data);  Reads picture data from file ""filename"" and store it in ""ret_data"". ;  ; virtual void RemoveWindow (ULongptr_t qwid);  Removes the created by Qt window ""qwid"". ;  ; virtual void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y);  If the specified window is mapped, ReparentWindow automatically performs an UnmapWindow request on it, removes it from its current position in the hierarchy, and inserts it as the child of the specified parent. ;  ; virtual ",MatchSource.WIKI,doc/master/classTVirtualX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualX.html
Usability,simpl,simply,"ure) ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1339 of file TVirtualX.cxx. ◆ ChangeProperties(). void TVirtualX::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, . UChar_t * ; data, . Int_t ; len . ). virtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 2448 of file TVirtualX.cxx. ◆ ChangeProperty(). void TVirtualX::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). virtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that might ask about the window properties ; [in]datathe property data ; [in]lenthe length of the specified data format . Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1572 of file TVirtualX.cxx. ◆ ChangeWindowAttributes(). void TVirtualX::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). virtual . Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ; The mask data member of ""attr"" specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1554 of file TVirtualX.cxx. ◆ CheckEvent(). Bool_t TVirtualX::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). virtual . Check if there is for window",MatchSource.WIKI,doc/master/classTVirtualX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTVirtualX.html
Deployability,update,update,"ult in interactive ROOT session. To use web-based canvas in batch mode for image generation, one should explicitly specify --web option when starting ROOT: [shell] root -b --web tutorials/hsimple.root -e 'hpxpy->Draw(""colz""); c1->SaveAs(""image.png"");'; If for any reasons TWebCanvas does not provide required functionality, one always can disable it. Either by specifying root --web=off when starting ROOT or by setting Canvas.Name: TRootCanvas in rootrc file. ; Definition at line 35 of file TWebCanvas.h. Classes; struct  PadStatus;  ; struct  WebConn;  . Public Types; using ObjectSelectSignal_t = std::function< void(TPad *, TObject *)>;  Function type for signals, invoked when object is selected. ;  ; using PadClickedSignal_t = std::function< void(TPad *, int, int)>;  Function type for pad-click signals. ;  ; using PadSignal_t = std::function< void(TPad *)>;  Function type for pad-related signals - like activate pad signal. ;  ; using UpdatedSignal_t = std::function< void()>;  Function type for signals, invoked when canvas drawing or update is completed. ;  . Public Member Functions;  TWebCanvas (TCanvas *c, const char *name, Int_t x, Int_t y, UInt_t width, UInt_t height, Bool_t readonly=kTRUE);  Constructor. ;  ;  ~TWebCanvas () override;  Destructor. ;  ; void ActivateInEditor (TPad *pad, TObject *obj);  Activate object in editor in web browser. ;  ; void Close () override;  Close web canvas - not implemented. ;  ; void ForceUpdate () override;  Increment canvas version and force sending data to client - do not wait for reply. ;  ; Bool_t GetCanCreateObjects () const;  ; Bool_t GetLongerPolling () const;  ; Int_t GetPaletteDelivery () const;  ; Int_t GetPrimitivesMerge () const;  ; Int_t GetStyleDelivery () const;  ; const std::shared_ptr< ROOT::RWebWindow > & GetWebWindow () const;  ; UInt_t GetWindowGeometry (Int_t &x, Int_t &y, UInt_t &w, UInt_t &h) override;  Returns window geometry including borders and menus. ;  ; Bool_t HasEditor () const override;  Returns kTR",MatchSource.WIKI,doc/master/classTWebCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html
Integrability,message,message,");  Create JSON painting output for given canvas and store into the file See TBufferJSON::ExportToFile() method for more details about option If option string starts with symbol 'b', JSON for batch mode will be generated (default) If option string starts with symbol 'i', JSON for interactive mode will be generated. ;  ;  Static Public Member Functions inherited from TCanvasImp; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Types; using PadPaintingReady_t = std::function< void(TPadWebSnapshot *)>;  Function called when pad painting produced. ;  . Protected Member Functions; void AddColorsPalette (TPadWebSnapshot &master);  Add special canvas objects with list of colors and color palette. ;  ; void AddCtrlMsg (unsigned connid, const std::string &key, const std::string &value);  Add control message for specified connection Same control message can be overwritten many time before it really sends to the client If connid == 0, message will be add to all connections After ctrl message is add to the output, short timer is activated and message send afterwards. ;  ; void AddCustomFonts (TPadWebSnapshot &master);  Add special canvas objects with custom fonts. ;  ; void AddSendQueue (unsigned connid, const std::string &msg);  Add message to send queue for specified connection If connid == 0, message will be add to all connections. ;  ; void AssignStatusBits (UInt_t bits);  Assign clients bits. ;  ; UInt_t CalculateColorsHash ();  Calculate hash function for all colors and palette. ;  ; virtual Bool_t CanCreateObject (const std::string &);  ; Bool_t CheckCanvasModified (bool force_modified=false);  Check if any pad on the canvas was modified If yes, increment version of correspondent pad Returns true when canvas really modified. ;  ; Bool_t CheckDataToSend (unsigned connid=0);  Check if any data should be send to client If connid != 0, only selected connection w",MatchSource.WIKI,doc/master/classTWebCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html
Modifiability,inherit,inherited,"tedSignal_t func);  ; void SetWindowPosition (Int_t x, Int_t y) override;  Set window position of web canvas. ;  ; void SetWindowSize (UInt_t w, UInt_t h) override;  Set window size of web canvas. ;  ; void SetWindowTitle (const char *newTitle) override;  Set window title of web canvas. ;  ; void Show () override;  Show canvas in browser window. ;  ; void ShowEditor (Bool_t show=kTRUE) override;  ; void ShowMenuBar (Bool_t show=kTRUE) override;  ; void ShowStatusBar (Bool_t show=kTRUE) override;  ; void ShowToolBar (Bool_t show=kTRUE) override;  ; void ShowToolTips (Bool_t show=kTRUE) override;  ; void ShowWebWindow (const ROOT::RWebDisplayArgs &user_args="""");  Show canvas in specified place. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TCanvasImp;  TCanvasImp (TCanvas *c, const char *name, Int_t x, Int_t y, UInt_t width, UInt_t height);  ;  TCanvasImp (TCanvas *c, const char *name, UInt_t width, UInt_t height);  ;  TCanvasImp (TCanvas *c=nullptr);  ; virtual ~TCanvasImp ();  ; TCanvas * Canvas () const;  ; virtual void ReallyDelete ();  ; virtual void SetStatusText (const char *text=nullptr, Int_t partidx=0);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void AddCustomClass (const std::string &clname, bool with_derived=false);  Assign custom class. ;  ; static Font_t AddFont (const char *name, const char *ttffile, Int_t precision=2);  Add font to static list of fonts supported by the canvas Name specifies name of the font, second is font file with .ttf or .woff2 extension Only True Type Fonts (ttf) are supported by PDF Returns font index which can be used in auto font_indx = TWebCanvas::AddFont(""test"", ""test.ttf"", 2); gStyle->SetStatFont(font_indx);. ;  ; static void BatchImageMode (UInt_t n=100);  Configure batch image mode for web graphics. ;  ; static TClass * Class ();  ; static const char * Class_N",MatchSource.WIKI,doc/master/classTWebCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html
Performance,queue,queue,"vasImp; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Types; using PadPaintingReady_t = std::function< void(TPadWebSnapshot *)>;  Function called when pad painting produced. ;  . Protected Member Functions; void AddColorsPalette (TPadWebSnapshot &master);  Add special canvas objects with list of colors and color palette. ;  ; void AddCtrlMsg (unsigned connid, const std::string &key, const std::string &value);  Add control message for specified connection Same control message can be overwritten many time before it really sends to the client If connid == 0, message will be add to all connections After ctrl message is add to the output, short timer is activated and message send afterwards. ;  ; void AddCustomFonts (TPadWebSnapshot &master);  Add special canvas objects with custom fonts. ;  ; void AddSendQueue (unsigned connid, const std::string &msg);  Add message to send queue for specified connection If connid == 0, message will be add to all connections. ;  ; void AssignStatusBits (UInt_t bits);  Assign clients bits. ;  ; UInt_t CalculateColorsHash ();  Calculate hash function for all colors and palette. ;  ; virtual Bool_t CanCreateObject (const std::string &);  ; Bool_t CheckCanvasModified (bool force_modified=false);  Check if any pad on the canvas was modified If yes, increment version of correspondent pad Returns true when canvas really modified. ;  ; Bool_t CheckDataToSend (unsigned connid=0);  Check if any data should be send to client If connid != 0, only selected connection will be checked. ;  ; void CheckPadModified (TPad *pad);  Returns true if any pad in the canvas were modified Reset modified flags, increment canvas version (if inc_version is true) ;  ; void CreateObjectSnapshot (TPadWebSnapshot &master, TPad *pad, TObject *obj, const char *opt, TWebPS *masterps=nullptr);  Creates representation of the object for painting in web browser",MatchSource.WIKI,doc/master/classTWebCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html
Security,hash,hash,"ngReady_t = std::function< void(TPadWebSnapshot *)>;  Function called when pad painting produced. ;  . Protected Member Functions; void AddColorsPalette (TPadWebSnapshot &master);  Add special canvas objects with list of colors and color palette. ;  ; void AddCtrlMsg (unsigned connid, const std::string &key, const std::string &value);  Add control message for specified connection Same control message can be overwritten many time before it really sends to the client If connid == 0, message will be add to all connections After ctrl message is add to the output, short timer is activated and message send afterwards. ;  ; void AddCustomFonts (TPadWebSnapshot &master);  Add special canvas objects with custom fonts. ;  ; void AddSendQueue (unsigned connid, const std::string &msg);  Add message to send queue for specified connection If connid == 0, message will be add to all connections. ;  ; void AssignStatusBits (UInt_t bits);  Assign clients bits. ;  ; UInt_t CalculateColorsHash ();  Calculate hash function for all colors and palette. ;  ; virtual Bool_t CanCreateObject (const std::string &);  ; Bool_t CheckCanvasModified (bool force_modified=false);  Check if any pad on the canvas was modified If yes, increment version of correspondent pad Returns true when canvas really modified. ;  ; Bool_t CheckDataToSend (unsigned connid=0);  Check if any data should be send to client If connid != 0, only selected connection will be checked. ;  ; void CheckPadModified (TPad *pad);  Returns true if any pad in the canvas were modified Reset modified flags, increment canvas version (if inc_version is true) ;  ; void CreateObjectSnapshot (TPadWebSnapshot &master, TPad *pad, TObject *obj, const char *opt, TWebPS *masterps=nullptr);  Creates representation of the object for painting in web browser. ;  ; TVirtualPadPainter * CreatePadPainter () override;  Creates web-based pad painter. ;  ; void CreatePadSnapshot (TPadWebSnapshot &paddata, TPad *pad, Long64_t version, PadPaintingReady_t fun",MatchSource.WIKI,doc/master/classTWebCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html
Testability,test,test,"uffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TCanvasImp;  TCanvasImp (TCanvas *c, const char *name, Int_t x, Int_t y, UInt_t width, UInt_t height);  ;  TCanvasImp (TCanvas *c, const char *name, UInt_t width, UInt_t height);  ;  TCanvasImp (TCanvas *c=nullptr);  ; virtual ~TCanvasImp ();  ; TCanvas * Canvas () const;  ; virtual void ReallyDelete ();  ; virtual void SetStatusText (const char *text=nullptr, Int_t partidx=0);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void AddCustomClass (const std::string &clname, bool with_derived=false);  Assign custom class. ;  ; static Font_t AddFont (const char *name, const char *ttffile, Int_t precision=2);  Add font to static list of fonts supported by the canvas Name specifies name of the font, second is font file with .ttf or .woff2 extension Only True Type Fonts (ttf) are supported by PDF Returns font index which can be used in auto font_indx = TWebCanvas::AddFont(""test"", ""test.ttf"", 2); gStyle->SetStatFont(font_indx);. ;  ; static void BatchImageMode (UInt_t n=100);  Configure batch image mode for web graphics. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TString CreateCanvasJSON (TCanvas *c, Int_t json_compression=0, Bool_t batchmode=kFALSE);  Create JSON painting output for given canvas Produce JSON can be used for offline drawing with JSROOT. ;  ; static TString CreatePadJSON (TPad *pad, Int_t json_compression=0, Bool_t batchmode=kFALSE);  Create JSON painting output for given pad Produce JSON can be used for offline drawing with JSROOT. ;  ; static const char * DeclFileName ();  ; static const std::string & GetCustomScripts ();  Returns configured custom script. ;  ; static bool IsCustomClass (const TClass *cl);  Checks if class belongs to custom. ;  ; static TCanvasImp * NewCanvas (TCanvas *c, con",MatchSource.WIKI,doc/master/classTWebCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html
Usability,simpl,simple,"r block ;  ; Bool_t fCanCreateObjects {kTRUE};  ! indicates if canvas allowed to create extra objects for interactive painting ;  ; Long64_t fCanvVersion {1};  ! actual canvas version, changed with every new Modified() call ;  ; UInt_t fClientBits {0};  ! latest status bits from client like editor visible or not ;  ; UInt_t fColorsHash {0};  ! last hash of colors/palette ;  ; Long64_t fColorsVersion {0};  ! current colors/palette version, checked every time when new snapshot created ;  ; Bool_t fFixedSize {kFALSE};  ! is canvas size fixed ;  ; std::vector< std::unique_ptr< ROOT::RWebDisplayHandle > > fHelpHandles;  ! array of handles for help widgets ;  ; Int_t fJsonComp {0};  ! compression factor for messages send to the client ;  ; Bool_t fLongerPolling {kFALSE};  ! when true, make longer polling in blocking operations ;  ; ObjectSelectSignal_t fObjSelectSignal;  ! signal emitted when new object selected in the pad ;  ; PadClickedSignal_t fPadClickedSignal;  ! signal emitted when simple mouse click performed on the pad ;  ; PadClickedSignal_t fPadDblClickedSignal;  ! signal emitted when simple mouse click performed on the pad ;  ; std::map< TPad *, PadStatus > fPadsStatus;  ! map of pads in canvas and their status flags ;  ; Int_t fPaletteDelivery {1};  ! colors palette delivery 0:never, 1:once, 2:always, 3:per subpad ;  ; Int_t fPrimitivesMerge {100};  ! number of PS primitives, which will be merged together ;  ; Bool_t fProcessingData {kFALSE};  ! flag used to prevent blocking methods when process data is invoked ;  ; Bool_t fReadOnly {kFALSE};  !< configured display ;  ; Int_t fStyleDelivery {0};  ! gStyle delivery to clients: 0:never, 1:once, 2:always ;  ; UInt_t fStyleHash {0};  ! last hash of gStyle ;  ; Long64_t fStyleVersion {0};  ! current gStyle object version, checked every time when new snapshot created ;  ; Int_t fTF1UseSave {1};  ! use save buffer for TF1/TF2, 0:off, 1:prefer, 2:force ;  ; TWebCanvasTimer * fTimer {nullptr};  ! timer to submit control",MatchSource.WIKI,doc/master/classTWebCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTWebCanvasTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebCanvasTimer.html
Integrability,message,messages,". ROOT: TWebCanvasTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TWebCanvasTimer Class Reference. . Definition at line 67 of file TWebCanvas.cxx. Public Member Functions;  TWebCanvasTimer (TWebCanvas &canv);  ; Bool_t IsSlow () const;  ; void SetSlow (Bool_t slow=kTRUE);  ; void Timeout () override;  used to send control messages to clients ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTim",MatchSource.WIKI,doc/master/classTWebCanvasTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebCanvasTimer.html
Modifiability,inherit,inherited,". ROOT: TWebCanvasTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TWebCanvasTimer Class Reference. . Definition at line 67 of file TWebCanvas.cxx. Public Member Functions;  TWebCanvasTimer (TWebCanvas &canv);  ; Bool_t IsSlow () const;  ; void SetSlow (Bool_t slow=kTRUE);  ; void Timeout () override;  used to send control messages to clients ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTim",MatchSource.WIKI,doc/master/classTWebCanvasTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebCanvasTimer.html
Safety,timeout,timeout,"r * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObje",MatchSource.WIKI,doc/master/classTWebCanvasTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebCanvasTimer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTWebCanvasTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebCanvasTimer.html
Availability,recover,recover,"g64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, const char *classes=""*"", Option_t *option=""new"");  Generate source code necessary to access the objects stored in the file. ;  ; virtual void Map ();  ; virtual void Map (Option_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual void ResetErrno () const;  Method resetting the errno. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void Se",MatchSource.WIKI,doc/master/classTWebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebFile.html
Deployability,install,installed,"sg);  Read request from web server. ;  ; virtual Int_t GetFromWeb10 (char *buf, Int_t len, const TString &msg, Int_t nseg=0, Long64_t *seg_pos=nullptr, Int_t *seg_len=nullptr);  Read multiple byte range request from web server. ;  ; virtual Int_t GetHead ();  Get the HTTP header. ;  ; virtual Int_t GetHunk (TSocket *s, char *hunk, Int_t maxsize);  Read a hunk of data from the socket, up until a terminator. ;  ; virtual Int_t GetLine (TSocket *s, char *line, Int_t maxsize);  Read a line from the socket. ;  ; virtual const char * HttpTerminator (const char *start, const char *peeked, Int_t peeklen);  Determine whether [START, PEEKED + PEEKLEN) contains an HTTP new line [\r]\n. ;  ; void Init (Bool_t readHeadOnly) override;  Initialize a TWebFile object. ;  ; virtual void ProcessHttpHeader (const TString &headerLine);  Process the HTTP header in the argument. ;  ; virtual Bool_t ReadBuffer10 (char *buf, Int_t len);  Read specified byte range from remote file via HTTP 1.0 daemon (without mod-root installed). ;  ; virtual Bool_t ReadBuffers10 (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read specified byte ranges from remote file via HTTP 1.0 daemon (without mod-root installed). ;  ; virtual void SetMsgReadBuffer10 (const char *redirectLocation=nullptr, Bool_t tempRedirect=kFALSE);  Set GET command for use by ReadBuffer(s)10(), handle redirection if needed. ;  ;  Protected Member Functions inherited from TFile; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ",MatchSource.WIKI,doc/master/classTWebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebFile.html
Integrability,message,message," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer)",MatchSource.WIKI,doc/master/classTWebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebFile.html
Modifiability,inherit,inherited,"() const override;  Return maximum file size. ;  ; TClass * IsA () const override;  ; Bool_t IsOpen () const override;  A TWebFile that has been correctly constructed is always considered open. ;  ; Bool_t ReadBuffer (char *buf, Int_t len) override;  Read specified byte range from remote file via HTTP daemon. ;  ; Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len) override;  Read specified byte range from remote file via HTTP daemon. ;  ; Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf) override;  Read specified byte ranges from remote file via HTTP daemon. ;  ; Int_t ReOpen (Option_t *mode) override;  Reopen a file with a different access mode, like from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. ;  ; void Seek (Long64_t offset, ERelativeTo pos=kBeg) override;  Set position from where to start reading. ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; virtual TKey * CreateKey (TDirectory *mother, const TObject *obj, const char *name, Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; virtual TKey * CreateKey (TDirectory *mother, const void *obj, const TClass *cl, const char *name, Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Pain",MatchSource.WIKI,doc/master/classTWebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebFile.html
Performance,cache,cache,"Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; virtual void DrawMap (const char *keys=""*"", Option_t *option="""");  Draw map of objects in this file. ;  ; void FillBuffer (char *&buffer) override;  Encode file output buffer. ;  ; virtual void Flush ();  Synchronize a file's in-memory and on-disk states. ;  ; TArchiveFile * GetArchive () const;  ; Long64_t GetArchiveOffset () const;  ; Int_t GetBestBuffer () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () const;  Max number of bytes to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbyt",MatchSource.WIKI,doc/master/classTWebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebFile.html
Safety,recover,recover,"g64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, const char *classes=""*"", Option_t *option=""new"");  Generate source code necessary to access the objects stored in the file. ;  ; virtual void Map ();  ; virtual void Map (Option_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual void ResetErrno () const;  Method resetting the errno. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void Se",MatchSource.WIKI,doc/master/classTWebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebFile.html
Security,access,access,"on at line 33 of file TWebFile.h. Public Member Functions;  TWebFile (const char *url, Option_t *opt="""");  Create a Web file object. ;  ;  TWebFile (TUrl url, Option_t *opt="""");  Create a Web file object. ;  ; virtual ~TWebFile ();  Cleanup. ;  ; void Close (Option_t *option="""") override;  Close a Web file. ;  ; Long64_t GetSize () const override;  Return maximum file size. ;  ; TClass * IsA () const override;  ; Bool_t IsOpen () const override;  A TWebFile that has been correctly constructed is always considered open. ;  ; Bool_t ReadBuffer (char *buf, Int_t len) override;  Read specified byte range from remote file via HTTP daemon. ;  ; Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len) override;  Read specified byte range from remote file via HTTP daemon. ;  ; Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf) override;  Read specified byte ranges from remote file via HTTP daemon. ;  ; Int_t ReOpen (Option_t *mode) override;  Reopen a file with a different access mode, like from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. ;  ; void Seek (Long64_t offset, ERelativeTo pos=kBeg) override;  Set position from where to start reading. ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; virtual TKey * CreateKey (TDirectory *mother, const TObject *obj, const char *name, Int_t bufsize);  Creates key for object and converts data to buffer. ;",MatchSource.WIKI,doc/master/classTWebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebFile.html
Testability,log,logical,"es to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first, Long64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, con",MatchSource.WIKI,doc/master/classTWebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebFile.html
Modifiability,inherit,inherited,"olor_t GetLineColor () const override;  ; Style_t GetLineStyle () const override;  ; Width_t GetLineWidth () const override;  ; Short_t GetTextAlign () const override;  ; Float_t GetTextAngle () const override;  ; Color_t GetTextColor () const override;  ; Font_t GetTextFont () const override;  ; Float_t GetTextMagnitude () const override;  ; Float_t GetTextSize () const override;  ; TClass * IsA () const override;  ; Bool_t IsTransparent () const override;  ; void SaveImage (TVirtualPad *, const char *, Int_t) const override;  Produce image from WebPadPainter. ;  ; void SelectDrawable (Int_t) override;  ; void SetFillColor (Color_t fcolor) override;  ; void SetFillStyle (Style_t fstyle) override;  ; void SetLineColor (Color_t lcolor) override;  ; void SetLineStyle (Style_t lstyle) override;  ; void SetLineWidth (Width_t lwidth) override;  ; void SetOpacity (Int_t percent) override;  ; void SetPainting (TWebPainting *p);  ; void SetTextAlign (Short_t align) override;  ; void SetTextAngle (Float_t tangle) override;  ; void SetTextColor (Color_t tcolor) override;  ; void SetTextFont (Font_t tfont) override;  ; void SetTextSize (Float_t tsize) override;  ; void SetTextSizePixels (Int_t npixels) override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualPadPainter; virtual ~TVirtualPadPainter ();  Virtual dtor. ;  ; virtual void InitPainter ();  Empty definition. ;  ; virtual void InvalidateCS ();  Empty definition. ;  ; virtual void LockPainter ();  Empty definition. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t D",MatchSource.WIKI,doc/master/classTWebPadPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebPadPainter.html
Usability,simpl,simple,". ROOT: TWebPadPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TWebPadPainter Class ReferenceWeb Display » ROOT 6 Web Display. ; Implement TVirtualPadPainter which abstracts painting operations. ; TWebPadPainter tries to support old Paint methods of the ROOT classes. Main classes (like histograms or graphs) should be painted on JavaScript side ; Definition at line 26 of file TWebPadPainter.h. Public Member Functions;  TWebPadPainter ();  ; void ClearDrawable () override;  ; void CopyDrawable (Int_t, Int_t, Int_t) override;  ; Int_t CreateDrawable (UInt_t, UInt_t) override;  ; void DestroyDrawable (Int_t) override;  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, EBoxMode mode) override;  Paint a simple box. ;  ; void DrawFillArea (Int_t n, const Double_t *x, const Double_t *y) override;  Paint filled area. ;  ; void DrawFillArea (Int_t n, const Float_t *x, const Float_t *y) override;  Paint filled area. ;  ; void DrawLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Paint a simple line. ;  ; void DrawLineNDC (Double_t u1, Double_t v1, Double_t u2, Double_t v2) override;  Paint a simple line in normalized coordinates. ;  ; void DrawPixels (const unsigned char *pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending) override;  Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. ;  ; void DrawPolyLine (Int_t n, const Double_t *x, const Double_t *y) override;  Paint Polyline. ;  ; void DrawPolyLine (Int_t n, const Float_t *x, const Float_t *y) override;  Paint polyline. ;  ; void DrawPolyLineNDC (Int_t n, const Double_t *u, const Double_t *v) override;  Paint polyline in normalized coordinates. ;  ; void DrawPolyMarker (I",MatchSource.WIKI,doc/master/classTWebPadPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebPadPainter.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTWebPainting.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebPainting.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTWebPainting.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebPainting.html
Modifiability,inherit,inherited,"on. ;  ; void AddOper (const std::string &oper);  Add next custom operator to painting Operations are separated by semicolons Following operations are supported: t - text h - text coded into simple hex r - rectangle b - rectangular fill region l - polyline f - poly fill region m - poly marker z - line attributes y - fill attributes x - marker attributes o - text attributes After operation code optional arguments can be append like length of operation or coded text Each operation may use data from binary float buffer. ;  ; void AddTextAttr (const TAttText &attr);  Store text attributes If attributes were not changed - ignore operation. ;  ; void FixSize ();  ; TClass * IsA () const override;  ; Bool_t IsEmpty () const;  ; Float_t * Reserve (Int_t sz);  Reserve place in the float buffer Returns pointer on first element in reserved area. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTWebPainting.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebPainting.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTWebPainting.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebPainting.html
Usability,simpl,simple," List of all members ; TWebPainting Class ReferenceWeb Display » ROOT 6 Web Display. ; Object used to store paint operations and deliver them to JSROOT. ; Definition at line 25 of file TWebPainting.h. Public Member Functions;  TWebPainting ();  Constructor. ;  ;  ~TWebPainting () override=default;  ; void AddColor (Int_t indx, TColor *col);  Add custom color to operations. ;  ; void AddFillAttr (const TAttFill &attr);  Store fill attributes If attributes were not changed - ignore operation. ;  ; void AddLineAttr (const TAttLine &attr);  Store line attributes If attributes were not changed - ignore operation. ;  ; void AddMarkerAttr (const TAttMarker &attr);  Store marker attributes If attributes were not changed - ignore operation. ;  ; void AddOper (const std::string &oper);  Add next custom operator to painting Operations are separated by semicolons Following operations are supported: t - text h - text coded into simple hex r - rectangle b - rectangular fill region l - polyline f - poly fill region m - poly marker z - line attributes y - fill attributes x - marker attributes o - text attributes After operation code optional arguments can be append like length of operation or coded text Each operation may use data from binary float buffer. ;  ; void AddTextAttr (const TAttText &attr);  Store text attributes If attributes were not changed - ignore operation. ;  ; void FixSize ();  ; TClass * IsA () const override;  ; Bool_t IsEmpty () const;  ; Float_t * Reserve (Int_t sz);  Reserve place in the float buffer Returns pointer on first element in reserved area. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implem",MatchSource.WIKI,doc/master/classTWebPainting.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebPainting.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTWebPS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebPS.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTWebPS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebPS.html
Modifiability,inherit,inherited,"t_t) override;  ; void Close (Option_t *="""") override;  ; void CreatePainting ();  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  ; void DrawFrame (Double_t, Double_t, Double_t, Double_t, Int_t, Int_t, Int_t, Int_t) override;  ; void DrawPolyMarker (Int_t n, Double_t *x, Double_t *y) override;  ; void DrawPolyMarker (Int_t n, Float_t *x, Float_t *y) override;  ; void DrawPS (Int_t n, Double_t *xw, Double_t *yw) override;  ; void DrawPS (Int_t n, Float_t *xw, Float_t *yw) override;  ; TWebPainting * GetPainting ();  ; TClass * IsA () const override;  ; Bool_t IsEmptyPainting () const;  ; void NewPage () override;  ; void Open (const char *, Int_t=-111) override;  ; void SetColor (Float_t, Float_t, Float_t) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; TWebPainting * TakePainting ();  ; void Text (Double_t x, Double_t y, const char *str) override;  ; void Text (Double_t x, Double_t y, const wchar_t *str) override;  ;  Public Member Functions inherited from TVirtualPS;  TVirtualPS ();  VirtualPS default constructor. ;  ;  TVirtualPS (const char *filename, Int_t type=-111);  VirtualPS constructor. ;  ; virtual ~TVirtualPS ();  VirtualPS destructor. ;  ; virtual void * GetStream () const;  ; virtual Int_t GetType () const;  ; virtual void PrintFast (Int_t nch, const char *string="""");  Fast version of Print. ;  ; virtual void PrintRaw (Int_t len, const char *str);  Print a raw. ;  ; virtual void PrintStr (const char *string="""");  Output the string str in the output buffer. ;  ; virtual void SetStream (std::ofstream *os);  ; virtual void SetType (Int_t=-111);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WriteInteger (Int_t i, Bool_t space=kTRUE);  Write one Integer to the file. ;  ; virtual void WriteReal (Float_t r, Bool_t space=kTRUE);  Write a Real number to the file. ;  ;  Public Member Function",MatchSource.WIKI,doc/master/classTWebPS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebPS.html
Security,hash,hash,"ger to the file. ;  ; virtual void WriteReal (Float_t r, Bool_t space=kTRUE);  Write a Real number to the file. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTWebPS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebPS.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTWebSnapshot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebSnapshot.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTWebSnapshot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebSnapshot.html
Modifiability,inherit,inherited,". ROOT: TWebSnapshot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TWebSnapshot Class ReferenceWeb Display » ROOT 6 Web Display. ; Paint state of object to transfer to JavaScript side. ; Definition at line 20 of file TWebSnapshot.h. Public Types; enum  { ;   kNone = 0; , kObject = 1; , kSVG = 2; , kSubPad = 3; , ;   kColors = 4; , kStyle = 5; , kFont = 6. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TWebSnapshot () override;  destructor ;  ; Int_t GetKind () const;  ; const char * GetObjectID () const;  ; TObject * GetSnapshot () const;  ; TClass * IsA () const override;  ; void SetObjectID (const std::string &id);  ; void SetObjectIDAsPtr (void *ptr, const std::string &suffix="""");  Use pointer to assign object id - TString::Hash. ;  ; void SetOption (const std::string &opt);  ; void SetSnapshot (Int_t kind, TObject *snapshot, Bool_t owner=kFALSE);  SetUse pointer to assign object id - TString::Hash. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ; ",MatchSource.WIKI,doc/master/classTWebSnapshot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebSnapshot.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTWebSnapshot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebSnapshot.html
Availability,error,error,"ndler to list of system exception handlers. ;  ; virtual void AddTimer (TTimer *t);  Add timer to list of system timers. ;  ; virtual int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1);  Announce TCP/IP service. ;  ; virtual int AnnounceUdpService (int port, int backlog);  Announce UDP service. ;  ; virtual int AnnounceUnixService (const char *sockpath, int backlog);  Announce unix domain service. ;  ; virtual int AnnounceUnixService (int port, int backlog);  Announce unix domain service. ;  ; virtual const char * BaseName (const char *pathname);  Base name of a file name. Base name of /user/root is root. ;  ; void Beep (Int_t freq=-1, Int_t duration=-1, Bool_t setDefault=kFALSE);  Beep for duration milliseconds with a tone of frequency freq. ;  ; Bool_t cd (const char *path);  ; virtual Bool_t ChangeDirectory (const char *path);  Change directory. ;  ; virtual int Chmod (const char *file, UInt_t mode);  Set the file permission bits. Returns -1 in case or error, 0 otherwise. ;  ; virtual void CleanCompiledMacros ();  Remove the shared libs produced by the CompileMacro() function, together with their rootmaps, linkdefs, and pcms (and some more on Windows). ;  ; virtual void CloseConnection (int sock, Bool_t force=kFALSE);  Close socket connection. ;  ; virtual void Closelog ();  Close connection to system log daemon. ;  ; virtual int ClosePipe (FILE *pipe);  Close the pipe. ;  ; virtual int CompileMacro (const char *filename, Option_t *opt="""", const char *library_name="""", const char *build_dir="""", UInt_t dirmode=0);  This method compiles and loads a shared library containing the code from the file ""filename"". ;  ; virtual char * ConcatFileName (const char *dir, const char *name);  Concatenate a directory and a file name. User must delete returned string. ;  ; virtual int CopyFile (const char *from, const char *to, Bool_t overwrite=kFALSE);  Copy a file. ;  ; virtual const char * DirName (const char *pathname);  Return the directory nam",MatchSource.WIKI,doc/master/classTWebSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebSystem.html
Integrability,interface,interface,"s that allows directory access via httpd. ;  ; virtual ~TWebSystem ();  ; Bool_t AccessPathName (const char *path, EAccessMode mode) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void FreeDirectory (void *dirp) override;  Free directory via httpd. ;  ; const char * GetDirEntry (void *dirp) override;  Get directory entry via httpd. Returns 0 in case no more entries. ;  ; Int_t GetPathInfo (const char *path, FileStat_t &buf) override;  Get info about a file. ;  ; TClass * IsA () const override;  ; Int_t MakeDirectory (const char *name) override;  Make a directory via httpd. Not supported. ;  ; void * OpenDirectory (const char *name) override;  Open a directory via httpd. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Unlink (const char *path) override;  Unlink, i.e. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual void AddDynamicPath (const char *pathname);  Add a new directory to the dynamic path. ;  ; virtual void AddFileHandler (TFileHandler *fh);  Add a file handler to the list of system file handlers. ;  ; virtual void AddIncludePath (const char *includePath);  Add a directory to the already set include path. ;  ; virtual void AddLinkedLibs (const char *linkedLib);  Add linkedLib to already set linked libs. ;  ; virtual void AddSignalHandler (TSignalHandler *sh);  Add a signal handler to list of system signal handlers. ;  ; virtual void AddStdExceptionHandler (TStdExceptionHandler *eh);  Add an exception handler to list of system exception handlers. ;  ; virtual void AddTimer (TTimer *t);  Add timer to list of system time",MatchSource.WIKI,doc/master/classTWebSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebSystem.html
Modifiability,inherit,inherited,"s that allows directory access via httpd. ;  ; virtual ~TWebSystem ();  ; Bool_t AccessPathName (const char *path, EAccessMode mode) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void FreeDirectory (void *dirp) override;  Free directory via httpd. ;  ; const char * GetDirEntry (void *dirp) override;  Get directory entry via httpd. Returns 0 in case no more entries. ;  ; Int_t GetPathInfo (const char *path, FileStat_t &buf) override;  Get info about a file. ;  ; TClass * IsA () const override;  ; Int_t MakeDirectory (const char *name) override;  Make a directory via httpd. Not supported. ;  ; void * OpenDirectory (const char *name) override;  Open a directory via httpd. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Unlink (const char *path) override;  Unlink, i.e. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual void AddDynamicPath (const char *pathname);  Add a new directory to the dynamic path. ;  ; virtual void AddFileHandler (TFileHandler *fh);  Add a file handler to the list of system file handlers. ;  ; virtual void AddIncludePath (const char *includePath);  Add a directory to the already set include path. ;  ; virtual void AddLinkedLibs (const char *linkedLib);  Add linkedLib to already set linked libs. ;  ; virtual void AddSignalHandler (TSignalHandler *sh);  Add a signal handler to list of system signal handlers. ;  ; virtual void AddStdExceptionHandler (TStdExceptionHandler *eh);  Add an exception handler to list of system exception handlers. ;  ; virtual void AddTimer (TTimer *t);  Add timer to list of system time",MatchSource.WIKI,doc/master/classTWebSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebSystem.html
Performance,load,loads,"ar * BaseName (const char *pathname);  Base name of a file name. Base name of /user/root is root. ;  ; void Beep (Int_t freq=-1, Int_t duration=-1, Bool_t setDefault=kFALSE);  Beep for duration milliseconds with a tone of frequency freq. ;  ; Bool_t cd (const char *path);  ; virtual Bool_t ChangeDirectory (const char *path);  Change directory. ;  ; virtual int Chmod (const char *file, UInt_t mode);  Set the file permission bits. Returns -1 in case or error, 0 otherwise. ;  ; virtual void CleanCompiledMacros ();  Remove the shared libs produced by the CompileMacro() function, together with their rootmaps, linkdefs, and pcms (and some more on Windows). ;  ; virtual void CloseConnection (int sock, Bool_t force=kFALSE);  Close socket connection. ;  ; virtual void Closelog ();  Close connection to system log daemon. ;  ; virtual int ClosePipe (FILE *pipe);  Close the pipe. ;  ; virtual int CompileMacro (const char *filename, Option_t *opt="""", const char *library_name="""", const char *build_dir="""", UInt_t dirmode=0);  This method compiles and loads a shared library containing the code from the file ""filename"". ;  ; virtual char * ConcatFileName (const char *dir, const char *name);  Concatenate a directory and a file name. User must delete returned string. ;  ; virtual int CopyFile (const char *from, const char *to, Bool_t overwrite=kFALSE);  Copy a file. ;  ; virtual const char * DirName (const char *pathname);  Return the directory name in pathname. ;  ; virtual void DispatchOneEvent (Bool_t pendingOnly=kFALSE);  Dispatch a single event. ;  ; char * DynamicPathName (const char *lib, Bool_t quiet=kFALSE);  Find a dynamic library called lib using the system search paths. ;  ; virtual Func_t DynFindSymbol (const char *module, const char *entry);  Find specific entry point in specified library. ;  ; virtual Int_t Exec (const char *shellcmd);  Execute a command. ;  ; virtual void Exit (int code, Bool_t mode=kTRUE);  Exit the application. ;  ; virtual void ExitLoop ();  Exit fr",MatchSource.WIKI,doc/master/classTWebSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebSystem.html
Safety,timeout,timeout,"handler from the list of file handlers. ;  ; void RemoveOnExit (TObject *obj);  Objects that should be deleted on exit of the OS interface. ;  ; virtual TSignalHandler * RemoveSignalHandler (TSignalHandler *sh);  Remove a signal handler from list of signal handlers. ;  ; virtual TStdExceptionHandler * RemoveStdExceptionHandler (TStdExceptionHandler *eh);  Remove an exception handler from list of exception handlers. ;  ; virtual TTimer * RemoveTimer (TTimer *t);  Remove timer from list of system timers. ;  ; virtual int Rename (const char *from, const char *to);  Rename a file. ;  ; virtual void ResetSignal (ESignals sig, Bool_t reset=kTRUE);  If reset is true reset the signal handler for the specified signal to the default handler, else restore previous behaviour. ;  ; virtual void ResetSignals ();  Reset signals handlers to previous behaviour. ;  ; virtual void ResetTimer (TTimer *);  ; virtual void Run ();  System event loop. ;  ; virtual Int_t Select (TFileHandler *fh, Long_t timeout);  Select on active file descriptors (called by TMonitor). ;  ; virtual Int_t Select (TList *active, Long_t timeout);  Select on active file descriptors (called by TMonitor). ;  ; virtual int SendBuf (int sock, const void *buffer, int length);  Send a buffer headed by a length indicator. ;  ; virtual int SendRaw (int sock, const void *buffer, int length, int flag);  Send exactly length bytes from buffer. ;  ; virtual void SetAclicMode (EAclicMode mode);  AclicMode indicates whether the library should be built in debug mode or optimized. ;  ; virtual void SetBuildDir (const char *build_dir, Bool_t isflat=kFALSE);  Set the location where ACLiC will create libraries and use as a scratch area. ;  ; virtual void SetDisplay ();  Set DISPLAY environment variable based on utmp entry. Only for UNIX. ;  ; virtual void SetDynamicPath (const char *pathname);  Set the dynamic path to a new value. ;  ; virtual void Setenv (const char *name, const char *value);  Set environment variable. ;  ; void S",MatchSource.WIKI,doc/master/classTWebSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebSystem.html
Security,access,access,". ROOT: TWebSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TWebSystem Class Reference. . Definition at line 99 of file TWebFile.h. Public Member Functions;  TWebSystem ();  Create helper class that allows directory access via httpd. ;  ; virtual ~TWebSystem ();  ; Bool_t AccessPathName (const char *path, EAccessMode mode) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void FreeDirectory (void *dirp) override;  Free directory via httpd. ;  ; const char * GetDirEntry (void *dirp) override;  Get directory entry via httpd. Returns 0 in case no more entries. ;  ; Int_t GetPathInfo (const char *path, FileStat_t &buf) override;  Get info about a file. ;  ; TClass * IsA () const override;  ; Int_t MakeDirectory (const char *name) override;  Make a directory via httpd. Not supported. ;  ; void * OpenDirectory (const char *name) override;  Open a directory via httpd. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Unlink (const char *path) override;  Unlink, i.e. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual void AddDynamicPath (const char *pathname);  Add a new directory to the dynamic path. ;  ; virtual void AddFileHandler (TFileHandler *fh);  Add a file handler to the list of system file handlers. ;  ; virtual void AddIncludePath (const char *includePath);  Add a directory to the already set include path. ;  ; virtual vo",MatchSource.WIKI,doc/master/classTWebSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebSystem.html
Testability,log,log,"virtual int AnnounceUnixService (const char *sockpath, int backlog);  Announce unix domain service. ;  ; virtual int AnnounceUnixService (int port, int backlog);  Announce unix domain service. ;  ; virtual const char * BaseName (const char *pathname);  Base name of a file name. Base name of /user/root is root. ;  ; void Beep (Int_t freq=-1, Int_t duration=-1, Bool_t setDefault=kFALSE);  Beep for duration milliseconds with a tone of frequency freq. ;  ; Bool_t cd (const char *path);  ; virtual Bool_t ChangeDirectory (const char *path);  Change directory. ;  ; virtual int Chmod (const char *file, UInt_t mode);  Set the file permission bits. Returns -1 in case or error, 0 otherwise. ;  ; virtual void CleanCompiledMacros ();  Remove the shared libs produced by the CompileMacro() function, together with their rootmaps, linkdefs, and pcms (and some more on Windows). ;  ; virtual void CloseConnection (int sock, Bool_t force=kFALSE);  Close socket connection. ;  ; virtual void Closelog ();  Close connection to system log daemon. ;  ; virtual int ClosePipe (FILE *pipe);  Close the pipe. ;  ; virtual int CompileMacro (const char *filename, Option_t *opt="""", const char *library_name="""", const char *build_dir="""", UInt_t dirmode=0);  This method compiles and loads a shared library containing the code from the file ""filename"". ;  ; virtual char * ConcatFileName (const char *dir, const char *name);  Concatenate a directory and a file name. User must delete returned string. ;  ; virtual int CopyFile (const char *from, const char *to, Bool_t overwrite=kFALSE);  Copy a file. ;  ; virtual const char * DirName (const char *pathname);  Return the directory name in pathname. ;  ; virtual void DispatchOneEvent (Bool_t pendingOnly=kFALSE);  Dispatch a single event. ;  ; char * DynamicPathName (const char *lib, Bool_t quiet=kFALSE);  Find a dynamic library called lib using the system search paths. ;  ; virtual Func_t DynFindSymbol (const char *module, const char *entry);  Find specific entry",MatchSource.WIKI,doc/master/classTWebSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWebSystem.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTWin32Condition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32Condition.html
Deployability,release,released,"ct ; Reimplemented from TConditionImp.; Definition at line 70 of file TWin32Condition.h. ◆ Signal(). Int_t TWin32Condition::Signal ; (; ). overridevirtual . If one or more threads have called Wait(), Signal() wakes up at least one of them, possibly more. ; See POSIX threads documentation for details. ; Implements TConditionImp.; Definition at line 173 of file TWin32Condition.cxx. ◆ Streamer(). void TWin32Condition::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TConditionImp. ◆ StreamerNVirtual(). void TWin32Condition::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 70 of file TWin32Condition.h. ◆ TimedWait(). Int_t TWin32Condition::TimedWait ; (; ULong_t ; secs, . ULong_t ; nanoSecs = 0 . ). overridevirtual . TimedWait() is given an absolute time to wait until. ; To wait for a relative time from now, use TThread::GetTime(). See POSIX threads documentation for why absolute times are better than relative. Returns 0 if successfully signalled, 1 if time expired. ; Implements TConditionImp.; Definition at line 115 of file TWin32Condition.cxx. ◆ Wait(). Int_t TWin32Condition::Wait ; (; ). overridevirtual . Wait for the condition variable to be signalled. ; The mutex is implicitely released before waiting and locked again after waking up. If Wait() is called by multiple threads, a signal may wake up more than one thread. See POSIX threads documentation for details. ; Implements TConditionImp.; Definition at line 66 of file TWin32Condition.cxx. Member Data Documentation. ◆ fCond. pthread_cond_t TWin32Condition::fCond. private . Definition at line 58 of file TWin32Condition.h. ◆ fMutex. TWin32Mutex* TWin32Condition::fMutex. private . Definition at line 59 of file TWin32Condition.h. core/thread/inc/TWin32Condition.h; core/thread/src/TWin32Condition.cxx. TWin32Condition. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTWin32Condition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32Condition.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTWin32Condition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32Condition.html
Modifiability,variab,variable,". ROOT: TWin32Condition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TWin32Condition Class Reference. . Definition at line 55 of file TWin32Condition.h. Public Member Functions;  TWin32Condition (TMutexImp *m);  Create Condition variable. ;  ; virtual ~TWin32Condition ();  TCondition dtor. ;  ; Int_t Broadcast () override;  Broadcast is like signal but wakes all threads which have called Wait(). ;  ; TClass * IsA () const override;  ; Int_t Signal () override;  If one or more threads have called Wait(), Signal() wakes up at least one of them, possibly more. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TimedWait (ULong_t secs, ULong_t nanoSecs=0) override;  TimedWait() is given an absolute time to wait until. ;  ; Int_t Wait () override;  Wait for the condition variable to be signalled. ;  ;  Public Member Functions inherited from TConditionImp;  TConditionImp ();  ; virtual ~TConditionImp ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName",MatchSource.WIKI,doc/master/classTWin32Condition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32Condition.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTWin32Condition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32Condition.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTWin32Mutex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32Mutex.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTWin32Mutex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32Mutex.html
Modifiability,inherit,inherited,". ROOT: TWin32Mutex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; Friends |; List of all members ; TWin32Mutex Class Reference. . Definition at line 28 of file TWin32Mutex.h. Public Member Functions;  TWin32Mutex (Bool_t recursive=kFALSE);  Create a Win32 mutex lock. ;  ; virtual ~TWin32Mutex ();  TMutex dtor. ;  ; TClass * IsA () const override;  ; Int_t Lock () override;  Lock the mutex. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  Try locking the mutex. Returns 0 if mutex can be locked. ;  ; Int_t UnLock () override;  Unlock the mutex. ;  ;  Public Member Functions inherited from TMutexImp;  TMutexImp ();  ; virtual ~TMutexImp ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (c",MatchSource.WIKI,doc/master/classTWin32Mutex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32Mutex.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTWin32Mutex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32Mutex.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTWin32Thread.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32Thread.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTWin32Thread.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32Thread.html
Modifiability,inherit,inherited,"t exe) override;  ; Int_t CleanUpPush (void **main, void *free, void *arg) override;  ; Int_t Exit (void *ret) override;  Exit the thread. ;  ; TClass * IsA () const override;  ; Int_t Join (TThread *th, void **ret) override;  Wait for specified thread execution (if any) to complete (like pthread_join). ;  ; Int_t Kill (TThread *th) override;  This is a somewhat dangerous function; it's not suggested to Stop() threads a lot. ;  ; Int_t Run (TThread *th, const int affinity=-1) override;  Win32 threads – spawn new thread (like pthread_create). ;  ; Long_t SelfId () override;  Return the current thread's ID. ;  ; Int_t SetCancelAsynchronous () override;  ; Int_t SetCancelDeferred () override;  ; Int_t SetCancelOff () override;  ; Int_t SetCancelOn () override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TThreadImp;  TThreadImp ();  ; virtual ~TThreadImp ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an obje",MatchSource.WIKI,doc/master/classTWin32Thread.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32Thread.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTWin32Thread.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32Thread.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTWin32ThreadFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32ThreadFactory.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTWin32ThreadFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32ThreadFactory.html
Modifiability,variab,variable,". ROOT: TWin32ThreadFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TWin32ThreadFactory Class Reference. . Definition at line 31 of file TWin32ThreadFactory.h. Public Member Functions;  TWin32ThreadFactory (const char *name=""Win32"", const char *title=""Win32 Thread Factory"");  Create Win32 thread factory. Also sets global gThreadFactory to this. ;  ; virtual ~TWin32ThreadFactory ();  ; TConditionImp * CreateConditionImp (TMutexImp *m) override;  Return a Win32 condition variable. ;  ; TMutexImp * CreateMutexImp (Bool_t recursive) override;  Return a Win32 Mutex. ;  ; TThreadImp * CreateThreadImp () override;  Return a Win32 thread. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TThreadFactory;  TThreadFactory (const char *name=""Unknown"", const char *title=""Unknown Thread Factory"");  TThreadFactory ctor only called by derived classes. ;  ; virtual ~TThreadFactory ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const",MatchSource.WIKI,doc/master/classTWin32ThreadFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32ThreadFactory.html
Security,hash,hash,"erived classes. ;  ; virtual ~TThreadFactory ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTWin32ThreadFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWin32ThreadFactory.html
Availability,error,error,"  ; void ExitLoop () override;  Exit from event loop. ;  ; char * ExpandPathName (const char *path) override;  Expand a pathname getting rid of special shell characaters like ~. ;  ; Bool_t ExpandPathName (TString &patbuf) override;  Expand a pathname getting rid of special shell characaters like ~.$, etc. ;  ; const char * FindDynamicLibrary (TString &lib, Bool_t quiet=kFALSE) override;  Returns and updates sLib to the path of a dynamic library (searches for library in the dynamic library search path). ;  ; const char * FindFile (const char *search, TString &file, EAccessMode mode=kFileExists) override;  Find location of file in a search path. ;  ; void FreeDirectory (void *dirp) override;  Close a WinNT file system directory. ;  ; Int_t GetCpuInfo (CpuInfo_t *info, Int_t sampleTime=1000) const override;  Returns cpu load average and load info into the CpuInfo_t structure. ;  ; Double_t GetCPUTime ();  ; Int_t GetCryptoRandom (void *buf, Int_t len) override;  Return cryptographic random number Fill provided buffer with random values Returns number of bytes written to buffer or -1 in case of error. ;  ; const char * GetDirEntry (void *dirp) override;  Returns the next directory entry. ;  ; TString GetDirName (const char *pathname) override;  Return the directory name in pathname. ;  ; const char * GetDynamicPath () override;  Return the dynamic path (used to find shared libraries). ;  ; Int_t GetEffectiveGid () override;  Returns the effective group id. ;  ; Int_t GetEffectiveUid () override;  Returns the effective user id. ;  ; const char * Getenv (const char *name) override;  Get environment variable. ;  ; const char * GetError () override;  Return system error string. ;  ; Int_t GetFPEMask () override;  Return the bitmap of conditions that trigger a floating point exception. ;  ; int GetFsInfo (const char *path, Long_t *id, Long_t *bsize, Long_t *blocks, Long_t *bfree) override;  Get info about a file system: id, bsize, bfree, blocks. ;  ; Int_t GetGid (const char",MatchSource.WIKI,doc/master/classTWinNTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html
Deployability,update,updates,"const char *to, Bool_t overwrite=kFALSE) override;  Copy a file. ;  ; const char * DirName (const char *pathname) override;  Return the directory name in pathname. ;  ; void DispatchOneEvent (Bool_t pendingOnly=kFALSE) override;  Dispatch a single event in TApplication::Run() loop. ;  ; void DispatchSignals (ESignals sig);  Handle and dispatch signals. ;  ; const char DriveName (const char *pathname=""/"");  Return the drive letter in pathname. ;  ; int Exec (const char *shellcmd) override;  Execute a command. ;  ; void Exit (int code, Bool_t mode=kTRUE) override;  Exit the application. ;  ; void ExitLoop () override;  Exit from event loop. ;  ; char * ExpandPathName (const char *path) override;  Expand a pathname getting rid of special shell characaters like ~. ;  ; Bool_t ExpandPathName (TString &patbuf) override;  Expand a pathname getting rid of special shell characaters like ~.$, etc. ;  ; const char * FindDynamicLibrary (TString &lib, Bool_t quiet=kFALSE) override;  Returns and updates sLib to the path of a dynamic library (searches for library in the dynamic library search path). ;  ; const char * FindFile (const char *search, TString &file, EAccessMode mode=kFileExists) override;  Find location of file in a search path. ;  ; void FreeDirectory (void *dirp) override;  Close a WinNT file system directory. ;  ; Int_t GetCpuInfo (CpuInfo_t *info, Int_t sampleTime=1000) const override;  Returns cpu load average and load info into the CpuInfo_t structure. ;  ; Double_t GetCPUTime ();  ; Int_t GetCryptoRandom (void *buf, Int_t len) override;  Return cryptographic random number Fill provided buffer with random values Returns number of bytes written to buffer or -1 in case of error. ;  ; const char * GetDirEntry (void *dirp) override;  Returns the next directory entry. ;  ; TString GetDirName (const char *pathname) override;  Return the directory name in pathname. ;  ; const char * GetDynamicPath () override;  Return the dynamic path (used to find shared libraries). ;  ",MatchSource.WIKI,doc/master/classTWinNTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html
Integrability,protocol,protocol," *ti) override;  Add timer to list of system timers. ;  ; int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1) override;  Announce TCP/IP service. ;  ; int AnnounceUdpService (int port, int backlog) override;  Announce UDP service. ;  ; int AnnounceUnixService (const char *sockpath, int backlog) override;  Open a socket on path 'sockpath', bind to it and start listening for Unix domain connections to it. ;  ; int AnnounceUnixService (int port, int backlog) override;  Announce unix domain service. ;  ; const char * BaseName (const char *name) override;  Base name of a file name. ;  ; Bool_t ChangeDirectory (const char *path) override;  Change directory. ;  ; int Chmod (const char *file, UInt_t mode) override;  Set the file permission bits. ;  ; void CloseConnection (int sock, Bool_t force=kFALSE) override;  Close socket. ;  ; int ClosePipe (FILE *pipe) override;  Close the pipe. ;  ; int ConnectService (const char *servername, int port, int tcpwindowsize, const char *protocol=""tcp"");  Connect to service servicename on server servername. ;  ; int CopyFile (const char *from, const char *to, Bool_t overwrite=kFALSE) override;  Copy a file. ;  ; const char * DirName (const char *pathname) override;  Return the directory name in pathname. ;  ; void DispatchOneEvent (Bool_t pendingOnly=kFALSE) override;  Dispatch a single event in TApplication::Run() loop. ;  ; void DispatchSignals (ESignals sig);  Handle and dispatch signals. ;  ; const char DriveName (const char *pathname=""/"");  Return the drive letter in pathname. ;  ; int Exec (const char *shellcmd) override;  Execute a command. ;  ; void Exit (int code, Bool_t mode=kTRUE) override;  Exit the application. ;  ; void ExitLoop () override;  Exit from event loop. ;  ; char * ExpandPathName (const char *path) override;  Expand a pathname getting rid of special shell characaters like ~. ;  ; Bool_t ExpandPathName (TString &patbuf) override;  Expand a pathname getting rid of special shell characat",MatchSource.WIKI,doc/master/classTWinNTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html
Modifiability,inherit,inherited,". ROOT: TWinNTSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TWinNTSystem Class Reference. . Definition at line 58 of file TWinNTSystem.h. Public Types; typedef Bool_t(* ThreadMsgFunc_t) (MSG *);  ;  Public Types inherited from TSystem; enum  EAclicMode { kDefault; , kDebug; , kOpt; };  ; enum  EAclicProperties { kFlatBuildDir = (1ULL << ( 0 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TWinNTSystem ();  ctor ;  ; virtual ~TWinNTSystem ();  dtor ;  ; void Abort (int code=0) override;  Abort the application. ;  ; int AcceptConnection (int sock) override;  Accept a connection. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void AddDynamicPath (const char *dir) override;  Add a new directory to the dynamic path. ;  ; void AddFileHandler (TFileHandler *fh) override;  Add a file handler to the list of system file handlers. ;  ; void AddSignalHandler (TSignalHandler *sh) override;  Add a signal handler to list of system signal handlers. ;  ; void",MatchSource.WIKI,doc/master/classTWinNTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html
Performance,load,load,"/"");  Return the drive letter in pathname. ;  ; int Exec (const char *shellcmd) override;  Execute a command. ;  ; void Exit (int code, Bool_t mode=kTRUE) override;  Exit the application. ;  ; void ExitLoop () override;  Exit from event loop. ;  ; char * ExpandPathName (const char *path) override;  Expand a pathname getting rid of special shell characaters like ~. ;  ; Bool_t ExpandPathName (TString &patbuf) override;  Expand a pathname getting rid of special shell characaters like ~.$, etc. ;  ; const char * FindDynamicLibrary (TString &lib, Bool_t quiet=kFALSE) override;  Returns and updates sLib to the path of a dynamic library (searches for library in the dynamic library search path). ;  ; const char * FindFile (const char *search, TString &file, EAccessMode mode=kFileExists) override;  Find location of file in a search path. ;  ; void FreeDirectory (void *dirp) override;  Close a WinNT file system directory. ;  ; Int_t GetCpuInfo (CpuInfo_t *info, Int_t sampleTime=1000) const override;  Returns cpu load average and load info into the CpuInfo_t structure. ;  ; Double_t GetCPUTime ();  ; Int_t GetCryptoRandom (void *buf, Int_t len) override;  Return cryptographic random number Fill provided buffer with random values Returns number of bytes written to buffer or -1 in case of error. ;  ; const char * GetDirEntry (void *dirp) override;  Returns the next directory entry. ;  ; TString GetDirName (const char *pathname) override;  Return the directory name in pathname. ;  ; const char * GetDynamicPath () override;  Return the dynamic path (used to find shared libraries). ;  ; Int_t GetEffectiveGid () override;  Returns the effective group id. ;  ; Int_t GetEffectiveUid () override;  Returns the effective user id. ;  ; const char * Getenv (const char *name) override;  Get environment variable. ;  ; const char * GetError () override;  Return system error string. ;  ; Int_t GetFPEMask () override;  Return the bitmap of conditions that trigger a floating point exception. ;  ",MatchSource.WIKI,doc/master/classTWinNTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html
Safety,timeout,timeout,"length bytes into buffer. ;  ; Int_t RedirectOutput (const char *name, const char *mode=""a"", RedirectHandle_t *h=nullptr) override;  Redirect standard output (stdout, stderr) to the specified file. ;  ; TFileHandler * RemoveFileHandler (TFileHandler *fh) override;  Remove a file handler from the list of file handlers. ;  ; TSignalHandler * RemoveSignalHandler (TSignalHandler *sh) override;  Remove a signal handler from list of signal handlers. ;  ; TTimer * RemoveTimer (TTimer *ti) override;  Remove timer from list of system timers. ;  ; int Rename (const char *from, const char *to) override;  Rename a file. Returns 0 when successful, -1 in case of failure. ;  ; void ResetSignal (ESignals sig, Bool_t reset=kTRUE) override;  If reset is true reset the signal handler for the specified signal to the default handler, else restore previous behaviour. ;  ; void ResetSignals () override;  Reset signals handlers to previous behaviour. ;  ; Int_t Select (TFileHandler *fh, Long_t timeout) override;  Select on the file descriptor related to file handler h. ;  ; Int_t Select (TList *active, Long_t timeout) override;  Select on file descriptors. The timeout to is in millisec. ;  ; int SendBuf (int sock, const void *buffer, int length) override;  Send a buffer headed by a length indicator. ;  ; int SendRaw (int sock, const void *buffer, int length, int flag) override;  Send exactly length bytes from buffer. ;  ; void SetDynamicPath (const char *path) override;  Set the dynamic path to a new value. ;  ; void Setenv (const char *name, const char *value) override;  Set environment variable. ;  ; Int_t SetFPEMask (Int_t mask=kDefaultMask) override;  Set which conditions trigger a floating point exception. ;  ; void SetGUIThreadMsgHandler (ThreadMsgFunc_t func);  Set the (static part of) the event handler func for GUI messages. ;  ; int SetNonBlock (int fd);  Make descriptor fd non-blocking. ;  ; void SetProgname (const char *name) override;  Set the application name (from command line",MatchSource.WIKI,doc/master/classTWinNTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html
Security,access,access,"; enum  EAclicProperties { kFlatBuildDir = (1ULL << ( 0 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TWinNTSystem ();  ctor ;  ; virtual ~TWinNTSystem ();  dtor ;  ; void Abort (int code=0) override;  Abort the application. ;  ; int AcceptConnection (int sock) override;  Accept a connection. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void AddDynamicPath (const char *dir) override;  Add a new directory to the dynamic path. ;  ; void AddFileHandler (TFileHandler *fh) override;  Add a file handler to the list of system file handlers. ;  ; void AddSignalHandler (TSignalHandler *sh) override;  Add a signal handler to list of system signal handlers. ;  ; void AddTimer (TTimer *ti) override;  Add timer to list of system timers. ;  ; int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1) override;  Announce TCP/IP service. ;  ; int AnnounceUdpService (int port, int backlog) override;  Announce UDP service. ;  ; int AnnounceUnixService (const char *sockpath, int backlog) override;  Open a socket on path 'sockpath', bind to it and start listening for Unix domain connections to it. ;  ; int AnnounceUnixService (int port, int backlog) override;  Announce unix domain service. ;  ; const char * BaseName (const char *n",MatchSource.WIKI,doc/master/classTWinNTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html
Testability,log,log,"eans return the working durectory for the default drive. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void AddIncludePath (const char *includePath);  Add a directory to the already set include path. ;  ; virtual void AddLinkedLibs (const char *linkedLib);  Add linkedLib to already set linked libs. ;  ; virtual void AddStdExceptionHandler (TStdExceptionHandler *eh);  Add an exception handler to list of system exception handlers. ;  ; void Beep (Int_t freq=-1, Int_t duration=-1, Bool_t setDefault=kFALSE);  Beep for duration milliseconds with a tone of frequency freq. ;  ; Bool_t cd (const char *path);  ; virtual void CleanCompiledMacros ();  Remove the shared libs produced by the CompileMacro() function, together with their rootmaps, linkdefs, and pcms (and some more on Windows). ;  ; virtual void Closelog ();  Close connection to system log daemon. ;  ; virtual int CompileMacro (const char *filename, Option_t *opt="""", const char *library_name="""", const char *build_dir="""", UInt_t dirmode=0);  This method compiles and loads a shared library containing the code from the file ""filename"". ;  ; virtual char * ConcatFileName (const char *dir, const char *name);  Concatenate a directory and a file name. User must delete returned string. ;  ; char * DynamicPathName (const char *lib, Bool_t quiet=kFALSE);  Find a dynamic library called lib using the system search paths. ;  ; virtual Func_t DynFindSymbol (const char *module, const char *entry);  Find specific entry point in specified library. ;  ; virtual EAclicMode GetAclicMode () const;  AclicMode indicates whether the library should be built in debug mode or optimized. ;  ; virtual Int_t GetAclicProperties () const;  Return the ACLiC properties field. ;  ; void GetBeepDefaults (Int_t &freq, Int_t &duration) const;  ; virtual const char * GetBuildArch (",MatchSource.WIKI,doc/master/classTWinNTSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTX11GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTX11GLManager.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTX11GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTX11GLManager.html
Modifiability,inherit,inherited,"t px, Int_t py) override;  Analog of TObject::DistancetoPrimitive. ;  ; void PrintViewer (TVirtualViewer3D *vv) override;  Print viewer. ;  ; void ReadGLBuffer (Int_t devInd) override;  GL buffer is read info buffer, after that lines are reordered into XImage, XImage copied into pixmap. ;  ; Bool_t ResizeOffScreenDevice (Int_t devInd, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Resize off screen device. ;  ; Bool_t SelectManip (TVirtualGLManip *manip, const TGLCamera *camera, const TGLRect *rect, const TGLBoundingBox *sceneBox) override;  Select manipulator. ;  ; void SelectOffScreenDevice (Int_t devInd) override;  Selects off-screen device to make it accessible by gVirtualX. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLManager;  TGLManager ();  ;  TGLManager (const TGLManager &)=delete;  ; TGLManager & operator= (const TGLManager &)=delete;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bo",MatchSource.WIKI,doc/master/classTX11GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTX11GLManager.html
Security,access,accessible,"nd) override;  Make GL context current. ;  ; void MarkForDirectCopy (Int_t devInd, Bool_t) override;  Selection-rotation support for TPad/TCanvas. ;  ; void PaintSingleObject (TVirtualGLPainter *) override;  Paint a single object. ;  ; void PanObject (TVirtualGLPainter *o, Int_t x, Int_t y) override;  Pan objects. ;  ; Bool_t PlotSelected (TVirtualGLPainter *plot, Int_t px, Int_t py) override;  Analog of TObject::DistancetoPrimitive. ;  ; void PrintViewer (TVirtualViewer3D *vv) override;  Print viewer. ;  ; void ReadGLBuffer (Int_t devInd) override;  GL buffer is read info buffer, after that lines are reordered into XImage, XImage copied into pixmap. ;  ; Bool_t ResizeOffScreenDevice (Int_t devInd, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Resize off screen device. ;  ; Bool_t SelectManip (TVirtualGLManip *manip, const TGLCamera *camera, const TGLRect *rect, const TGLBoundingBox *sceneBox) override;  Select manipulator. ;  ; void SelectOffScreenDevice (Int_t devInd) override;  Selects off-screen device to make it accessible by gVirtualX. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLManager;  TGLManager ();  ;  TGLManager (const TGLManager &)=delete;  ; TGLManager & operator= (const TGLManager &)=delete;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects.",MatchSource.WIKI,doc/master/classTX11GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTX11GLManager.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTXMLAttr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLAttr.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTXMLAttr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLAttr.html
Modifiability,inherit,inherited,". ROOT: TXMLAttr Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TXMLAttr Class ReferenceInput/Output Library. ; TXMLAttribute is the attribute of an Element. ; It contains the name and the value of the attribute. ; Definition at line 18 of file TXMLAttr.h. Public Member Functions;  TXMLAttr (const char *key, const char *value);  ;  ~TXMLAttr () override;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetValue () const;  ; TClass * IsA () const override;  ; const char * Key () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void",MatchSource.WIKI,doc/master/classTXMLAttr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLAttr.html
Security,hash,hash,"xecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTXMLAttr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLAttr.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTXMLDocument.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLDocument.html
Energy Efficiency,allocate,allocated," ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TXMLDocument.h>. Inheritance diagram for TXMLDocument:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TXMLDocument() [1/2]. TXMLDocument::TXMLDocument ; (; const TXMLDocument & ; ). privatedelete . ◆ TXMLDocument() [2/2]. TXMLDocument::TXMLDocument ; (; _xmlDoc * ; doc). TXMLDocument constructor. ; Definition at line 30 of file TXMLDocument.cxx. ◆ ~TXMLDocument(). TXMLDocument::~TXMLDocument ; (; ). override . TXMLDocument destructor. ; Free the global variables that may have been allocated by the parser. ; Definition at line 44 of file TXMLDocument.cxx. Member Function Documentation. ◆ Class(). static TClass * TXMLDocument::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TXMLDocument::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TXMLDocument::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 40 of file TXMLDocument.h. ◆ DeclFileName(). static const char * TXMLDocument::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 40 of file TXMLDocument.h. ◆ Encoding(). const char * TXMLDocument::Encoding ; (; ); const. Returns external initial encoding, if any or 0 in case there is no document set. ; Definition at line 72 of file TXMLDocument.cxx. ◆ GetRootNode(). TXMLNode * TXMLDocument::GetRootNode ; (; ); const. Returns the root element node. ; ",MatchSource.WIKI,doc/master/classTXMLDocument.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLDocument.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTXMLDocument.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLDocument.html
Modifiability,inherit,inherited,"all members ; TXMLDocument Class ReferenceInput/Output Library. ; TXMLDocument contains a pointer to an xmlDoc structure, after the parser returns a tree built during the document analysis. ; Definition at line 21 of file TXMLDocument.h. Public Member Functions;  TXMLDocument (_xmlDoc *doc);  TXMLDocument constructor. ;  ;  ~TXMLDocument () override;  TXMLDocument destructor. ;  ; const char * Encoding () const;  Returns external initial encoding, if any or 0 in case there is no document set. ;  ; TXMLNode * GetRootNode () const;  Returns the root element node. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const char * URL () const;  Returns the URI for the document or 0 in case there is no document set. ;  ; const char * Version () const;  Returns the XML version string or 0 in case there is no document set. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTXMLDocument.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLDocument.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTXMLDocument.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLDocument.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTXMLEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLEngine.html
Deployability,release,release,,MatchSource.WIKI,doc/master/classTXMLEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLEngine.html
Energy Efficiency,allocate,allocated,,MatchSource.WIKI,doc/master/classTXMLEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLEngine.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTXMLEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLEngine.html
Modifiability,inherit,inherited,"ring if layout<=0, no any spaces or newlines will be placed between xmlnodes. ;  ; void SetNodeContent (XMLNodePointer_t xmlnode, const char *content, Int_t len=0);  set content of the xmlnode if old node content was exists, it will be replaced ;  ; void SetSkipComments (Bool_t on=kTRUE);  ; void ShiftToNext (XMLNodePointer_t &xmlnode, Bool_t realnode=kTRUE);  shifts specified node to next if realnode==kTRUE, any special nodes in between will be skipped ;  ; void SkipEmpty (XMLNodePointer_t &xmlnode);  Skip all current empty nodes and locate on first ""true"" node. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnlinkFreeNode (XMLNodePointer_t xmlnode);  combined operation. Unlink node and free used memory ;  ; void UnlinkNode (XMLNodePointer_t node);  unlink (detach) xmlnode from parent ;  ; Bool_t ValidateDocument (XMLDocPointer_t, Bool_t=kFALSE);  ; Bool_t ValidateVersion (XMLDocPointer_t doc, const char *version=nullptr);  check that first node is xml processing instruction with correct xml version number ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone",MatchSource.WIKI,doc/master/classTXMLEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLEngine.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTXMLEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLEngine.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTXMLEntity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLEntity.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTXMLEntity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLEntity.html
Modifiability,inherit,inherited,". ROOT: TXMLEntity Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TXMLEntity Class Reference. . Definition at line 162 of file TXMLEngine.cxx. Public Member Functions;  TXMLEntity ();  is system (file) ;  ;  TXMLEntity (const TString &name, const TString &value, Bool_t sys);  ; Bool_t IsSystem () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Re",MatchSource.WIKI,doc/master/classTXMLEntity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLEntity.html
Security,hash,hash,"tem (file) ;  ;  TXMLEntity (const TString &name, const TString &value, Bool_t sys);  ; Bool_t IsSystem () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTXMLEntity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLEntity.html
Availability,recover,recover,"  ; Long64_t GetSeekInfo () const final;  ; Long64_t GetSize () const final;  Returns the current file size. ;  ; TClass * IsA () const override;  ; Bool_t IsOpen () const final;  return kTRUE if file is opened and can be accessed ;  ; void MakeFree (Long64_t, Long64_t) final;  Mark unused bytes on the file. ;  ; void MakeProject (const char *, const char *=""*"", Option_t *=""new"") final;  Generate source code necessary to access the objects stored in the file. ;  ; void Map () final;  ; void Map (Option_t *) final;  List the contents of a file sequentially. ;  ; void Paint (Option_t *="""") final;  Paint all objects in the file. ;  ; void Print (Option_t *="""") const final;  Print all objects in the file. ;  ; Bool_t ReadBuffer (char *, Int_t) final;  Read a buffer from the file. ;  ; Bool_t ReadBuffer (char *, Long64_t, Int_t) final;  Read a buffer from the file at the offset 'pos' in the file. ;  ; void ReadFree () final;  Read the FREE linked list. ;  ; Int_t Recover () final;  Attempt to recover file if not correctly closed. ;  ; Int_t ReOpen (Option_t *mode) final;  Reopen a file with a different access mode, like from READ to See TFile::Open() for details. ;  ; void ResetErrno () const final;  Method resetting the errno. ;  ; void Seek (Long64_t, ERelativeTo=kBeg) final;  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; void SetEND (Long64_t) final;  ; void SetStoreStreamerInfos (Bool_t iConvert=kTRUE) final;  If true, all correspondent to file TStreamerInfo objects will be stored in file this allows to apply schema evolution later for this file may be useful, when file used outside ROOT and TStreamerInfo objects does not required Can be changed only for newly created file. ;  ; void SetUsedDtd (Bool_t use=kTRUE) final;  Specify usage of DTD for this file. ;  ; void SetUseNamespaces (Bool_t iUseNamespaces=kTRUE) final;  Specify usage of namespaces in xml file In current implementation every instrumented class in file gets its unique n",MatchSource.WIKI,doc/master/classTXMLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLFile.html
Deployability,update,update,"ementation. and one header per class that is not nested inside another class. The header file name is the fully qualified name of the class after all the special characters ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class are replaced by a vector of pair. set and multiset when the tempalte parameter is a class are replaced by a vector. This is required since we do not have the code needed to order and/or compare the object of the classes. This is a quick explanation of the options available: . Option Details . new (default) A new directory dirname is created. If dirname already exist, an error message is printed and the function returns. . recreate If dirname does not exist, it is created (like in ""new""). If dirname already exist, all existing files in dirname are deleted before creating the new files. . update New classes are added to the existing directory. Existing classes with the same name are replaced by the new definition. If the directory dirname doest not exist, same effect as ""new"". . genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; a shared lib dirname.so will be created. If the option ""++"" is specified, the generated shared lib is dynamically linked with the current executable module. If the option ""+"" and ""nocompile"" are specified, t",MatchSource.WIKI,doc/master/classTXMLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLFile.html
Integrability,message,message," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer)",MatchSource.WIKI,doc/master/classTXMLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLFile.html
Modifiability,inherit,inherited,"tation every instrumented class in file gets its unique namespace, which is equal to name of class and refer to root documentation page. ;  ; void SetXmlLayout (EXMLLayout layout) final;  Change layout of objects in xml file Can be changed only for newly created file. ;  ; Int_t Sizeof () const final;  Return the size in bytes of the file header. ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Write (const char *=nullptr, Int_t=0, Int_t=0) const final;  One can not save a const TDirectory object. ;  ; Int_t Write (const char *=nullptr, Int_t=0, Int_t=0) final;  Write memory objects to this file. ;  ; Bool_t WriteBuffer (const char *, Int_t) final;  Write a buffer to the file. ;  ; void WriteFree () final;  Write FREE linked list on the file. ;  ; void WriteHeader () final;  Write File Header. ;  ; void WriteStreamerInfo () final;  convert all TStreamerInfo, used in file, to xml format ;  ; TXMLEngine * XML ();  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; TArchiveFile * GetArchive () const;  ; Long64_t GetArchiveOffset () const;  ; Int_t GetBestBuffer () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () co",MatchSource.WIKI,doc/master/classTXMLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLFile.html
Performance,cache,cache,"pressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; TArchiveFile * GetArchive () const;  ; Long64_t GetArchiveOffset () const;  ; Int_t GetBestBuffer () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () const;  Max number of bytes to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos",MatchSource.WIKI,doc/master/classTXMLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLFile.html
Safety,recover,recover,"  ; Long64_t GetSeekInfo () const final;  ; Long64_t GetSize () const final;  Returns the current file size. ;  ; TClass * IsA () const override;  ; Bool_t IsOpen () const final;  return kTRUE if file is opened and can be accessed ;  ; void MakeFree (Long64_t, Long64_t) final;  Mark unused bytes on the file. ;  ; void MakeProject (const char *, const char *=""*"", Option_t *=""new"") final;  Generate source code necessary to access the objects stored in the file. ;  ; void Map () final;  ; void Map (Option_t *) final;  List the contents of a file sequentially. ;  ; void Paint (Option_t *="""") final;  Paint all objects in the file. ;  ; void Print (Option_t *="""") const final;  Print all objects in the file. ;  ; Bool_t ReadBuffer (char *, Int_t) final;  Read a buffer from the file. ;  ; Bool_t ReadBuffer (char *, Long64_t, Int_t) final;  Read a buffer from the file at the offset 'pos' in the file. ;  ; void ReadFree () final;  Read the FREE linked list. ;  ; Int_t Recover () final;  Attempt to recover file if not correctly closed. ;  ; Int_t ReOpen (Option_t *mode) final;  Reopen a file with a different access mode, like from READ to See TFile::Open() for details. ;  ; void ResetErrno () const final;  Method resetting the errno. ;  ; void Seek (Long64_t, ERelativeTo=kBeg) final;  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; void SetEND (Long64_t) final;  ; void SetStoreStreamerInfos (Bool_t iConvert=kTRUE) final;  If true, all correspondent to file TStreamerInfo objects will be stored in file this allows to apply schema evolution later for this file may be useful, when file used outside ROOT and TStreamerInfo objects does not required Can be changed only for newly created file. ;  ; void SetUsedDtd (Bool_t use=kTRUE) final;  Specify usage of DTD for this file. ;  ; void SetUseNamespaces (Bool_t iUseNamespaces=kTRUE) final;  Specify usage of namespaces in xml file In current implementation every instrumented class in file gets its unique n",MatchSource.WIKI,doc/master/classTXMLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLFile.html
Security,access,accessed,". ROOT: TXMLFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TXMLFile Class Referencefinal. . Definition at line 25 of file TXMLFile.h. Public Member Functions;  TXMLFile ();  ;  TXMLFile (const char *filename, Option_t *option=""read"", const char *title=""title"", Int_t compression=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Open or creates local XML file with name filename. ;  ;  ~TXMLFile () override;  destructor of TXMLFile object ;  ; Bool_t AddXmlComment (const char *comment);  Add comment line on the top of the xml document This line can only be seen in xml editor and cannot be accessed later with TXMLFile methods. ;  ; Bool_t AddXmlLine (const char *line);  Add just one line on the top of xml document For instance, line can contain special xml processing instructions Line should has correct xml syntax that later it can be decoded by xml parser To be parsed later by TXMLFile again, this line should contain either xml comments or xml processing instruction. ;  ; Bool_t AddXmlStyleSheet (const char *href, const char *type=""text/css"", const char *title=nullptr, int alternate=-1, const char *media=nullptr, const char *charset=nullptr);  Adds style sheet definition on the top of xml document Creates <?xml-stylesheet alternate=""yes"" title=""compact"" href=""small-base.css"" type=""text/css""?> Attributes href and type must be supplied, other attributes: title, alternate, media, charset are optional if alternate==0, attribute alternate=""no"" will be created, if alternate>0, attribute alternate=""yes"" if alternate<0, attribute will not be created This style sheet definition cannot be later access with TXMLFile methods. ;  ; void Close (Option_t *option="""") final;  Close a XML file For mor",MatchSource.WIKI,doc/master/classTXMLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLFile.html
Testability,log,logical,"er () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () const;  Max number of bytes to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Boo",MatchSource.WIKI,doc/master/classTXMLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLFile.html
Usability,clear,clear,"genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; a shared lib dirname.so will be created. If the option ""++"" is specified, the generated shared lib is dynamically linked with the current executable module. If the option ""+"" and ""nocompile"" are specified, the utility files are generated as in the option ""+"" but they are not executed. Example: file.MakeProject(""demo"",""*"",""recreate++"");; creates a new directory demo unless it already exist; clear the previous directory content; generate the xxx.h files for all classes xxx found in this file and not yet known to the CINT dictionary.; creates the build script MAKEP; creates a LinkDef.h file; runs rootcint generating demoProjectDict.cxx; compiles demoProjectDict.cxx into demoProjectDict.o; generates a shared lib demo.so; dynamically links the shared lib demo.so to the executable If only the option ""+"" had been specified, one can still link the shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented from TFile.; Definition at line 78 of file TXMLFile.h. ◆ Map() [1/2]. void TXMLFile::Map ; (; ). inlinefinalvirtual . Reimplemented from TFile.; Definition at line 80 of file T",MatchSource.WIKI,doc/master/classTXMLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLFile.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTXMLNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLNode.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTXMLNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLNode.html
Modifiability,inherit,inherited,". ROOT: TXMLNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TXMLNode Class ReferenceInput/Output Library. ; TXMLNode contains a pointer to xmlNode, which is a node under the DOM tree. ; A node can be an Element, an Attribute, a Text Node or a Comment Node. One can navigate the DOM tree by accessing the siblings and parent or child nodes. Also retriving the Attribute or the Text in an Element node. ; Definition at line 20 of file TXMLNode.h. Public Types; enum  EXMLElementType { kXMLElementNode = 1; , kXMLAttributeNode = 2; , kXMLTextNode = 3; , kXMLCommentNode = 8; };  This enum is based on libxml tree Enum xmlElementType. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TXMLNode (_xmlNode *node, TXMLNode *parent=nullptr, TXMLNode *previous=nullptr);  TXMLNode constructor. ;  ;  ~TXMLNode () override;  Destructor. ;  ; TList * GetAttributes ();  Returns a list of node's attribute if any, returns 0 if no attribute. ;  ; TXMLNode * GetChildren ();  Returns the node's child if any, returns 0 if no child. ;  ; const char * GetContent () const;  Returns the content if any, or 0. ;  ; const char * GetNamespaceHref () const;  Returns th",MatchSource.WIKI,doc/master/classTXMLNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLNode.html
Security,access,accessing,". ROOT: TXMLNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TXMLNode Class ReferenceInput/Output Library. ; TXMLNode contains a pointer to xmlNode, which is a node under the DOM tree. ; A node can be an Element, an Attribute, a Text Node or a Comment Node. One can navigate the DOM tree by accessing the siblings and parent or child nodes. Also retriving the Attribute or the Text in an Element node. ; Definition at line 20 of file TXMLNode.h. Public Types; enum  EXMLElementType { kXMLElementNode = 1; , kXMLAttributeNode = 2; , kXMLTextNode = 3; , kXMLCommentNode = 8; };  This enum is based on libxml tree Enum xmlElementType. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TXMLNode (_xmlNode *node, TXMLNode *parent=nullptr, TXMLNode *previous=nullptr);  TXMLNode constructor. ;  ;  ~TXMLNode () override;  Destructor. ;  ; TList * GetAttributes ();  Returns a list of node's attribute if any, returns 0 if no attribute. ;  ; TXMLNode * GetChildren ();  Returns the node's child if any, returns 0 if no child. ;  ; const char * GetContent () const;  Returns the content if any, or 0. ;  ; const char * GetNamespaceHref () const;  Returns th",MatchSource.WIKI,doc/master/classTXMLNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLNode.html
Availability,error,error,"parser, a DOM style tree interface and a SAX style event based interface. TXMLParser is parent class of TSAXParser and TDOMParser, which are a SAX interface and DOM interface of libxml. ; Definition at line 24 of file TXMLParser.h. Public Member Functions;  TXMLParser ();  Initializes parser variables. ;  ;  ~TXMLParser () override;  Cleanup. ;  ; Int_t GetParseCode () const;  ; const char * GetParseCodeMessage (Int_t parseCode) const;  Returns the parse code message. ;  ; Bool_t GetReplaceEntities () const;  ; Bool_t GetStopOnError () const;  ; Bool_t GetValidate () const;  ; const char * GetValidateError () const;  ; const char * GetValidateWarning () const;  ; TClass * IsA () const override;  ; virtual Int_t ParseBuffer (const char *contents, Int_t len)=0;  ; virtual Int_t ParseFile (const char *filename)=0;  ; void SetReplaceEntities (Bool_t val=kTRUE);  The parser will replace/expand entities. ;  ; void SetStopOnError (Bool_t stop=kTRUE);  Set parser stops in case of error: ;  ; void SetValidate (Bool_t val=kTRUE);  The parser will validate the xml file if val = true. ;  ; virtual void StopParser ();  Stops parsing. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtua",MatchSource.WIKI,doc/master/classTXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLParser.html
Deployability,release,release," *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; virtual void InitializeContext ();  Initialize parser parameters, such as, disactivate non-standards libxml1 features, on/off validation, clear error and warning messages. ;  ; virtual void OnValidateError (const TString &message);  This function is called when an error from the parser has occurred. ;  ; virtual void OnValidateWarning (const TString &message);  This function is called when a warning from the parser has occurred. ;  ; virtual void ReleaseUnderlying ();  To release any existing document. ;  ; virtual void SetParseCode (Int_t code);  Set the parse code: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; _xmlParserCtxt * fContext;  Parse the xml file. ;  ; Int_t fParseCode;  To keep track of the errorcodes. ;  ; Bool_t fReplaceEntities;  Replace entities. ;  ; Bool_t fStopError;  Stop when parse error occurs. ;  ; Bool_t fValidate;  To validate the parse context. ;  ; TString fValidateError;  Parse error. ;  ; TString fValidateWarning;  Parse warning. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlock",MatchSource.WIKI,doc/master/classTXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLParser.html
Integrability,interface,interfaces,". ROOT: TXMLParser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TXMLParser Class ReferenceabstractInput/Output Library. ; TXMLParser is an abstract class which interfaces with Libxml2. ; Libxml2 is the XML C parser and toolkit developed for the Gnome project. The libxml library provides two interfaces to the parser, a DOM style tree interface and a SAX style event based interface. TXMLParser is parent class of TSAXParser and TDOMParser, which are a SAX interface and DOM interface of libxml. ; Definition at line 24 of file TXMLParser.h. Public Member Functions;  TXMLParser ();  Initializes parser variables. ;  ;  ~TXMLParser () override;  Cleanup. ;  ; Int_t GetParseCode () const;  ; const char * GetParseCodeMessage (Int_t parseCode) const;  Returns the parse code message. ;  ; Bool_t GetReplaceEntities () const;  ; Bool_t GetStopOnError () const;  ; Bool_t GetValidate () const;  ; const char * GetValidateError () const;  ; const char * GetValidateWarning () const;  ; TClass * IsA () const override;  ; virtual Int_t ParseBuffer (const char *contents, Int_t len)=0;  ; virtual Int_t ParseFile (const char *filename)=0;  ; void SetReplaceEntities (Bool_t val=kTRUE);  The parser will replace/expand entities. ;  ; void SetStopOnError (Bool_t stop=kTRUE);  Set parser stops in case of error: ;  ; void SetValidate (Bool_t val=kTRUE);  The parser will validate the xml file if val = true. ;  ; virtual void StopParser ();  Stops parsing. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject",MatchSource.WIKI,doc/master/classTXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLParser.html
Modifiability,variab,variables,". ROOT: TXMLParser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TXMLParser Class ReferenceabstractInput/Output Library. ; TXMLParser is an abstract class which interfaces with Libxml2. ; Libxml2 is the XML C parser and toolkit developed for the Gnome project. The libxml library provides two interfaces to the parser, a DOM style tree interface and a SAX style event based interface. TXMLParser is parent class of TSAXParser and TDOMParser, which are a SAX interface and DOM interface of libxml. ; Definition at line 24 of file TXMLParser.h. Public Member Functions;  TXMLParser ();  Initializes parser variables. ;  ;  ~TXMLParser () override;  Cleanup. ;  ; Int_t GetParseCode () const;  ; const char * GetParseCodeMessage (Int_t parseCode) const;  Returns the parse code message. ;  ; Bool_t GetReplaceEntities () const;  ; Bool_t GetStopOnError () const;  ; Bool_t GetValidate () const;  ; const char * GetValidateError () const;  ; const char * GetValidateWarning () const;  ; TClass * IsA () const override;  ; virtual Int_t ParseBuffer (const char *contents, Int_t len)=0;  ; virtual Int_t ParseFile (const char *filename)=0;  ; void SetReplaceEntities (Bool_t val=kTRUE);  The parser will replace/expand entities. ;  ; void SetStopOnError (Bool_t stop=kTRUE);  Set parser stops in case of error: ;  ; void SetValidate (Bool_t val=kTRUE);  The parser will validate the xml file if val = true. ;  ; virtual void StopParser ();  Stops parsing. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject",MatchSource.WIKI,doc/master/classTXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLParser.html
Security,validat,validate,"parser, a DOM style tree interface and a SAX style event based interface. TXMLParser is parent class of TSAXParser and TDOMParser, which are a SAX interface and DOM interface of libxml. ; Definition at line 24 of file TXMLParser.h. Public Member Functions;  TXMLParser ();  Initializes parser variables. ;  ;  ~TXMLParser () override;  Cleanup. ;  ; Int_t GetParseCode () const;  ; const char * GetParseCodeMessage (Int_t parseCode) const;  Returns the parse code message. ;  ; Bool_t GetReplaceEntities () const;  ; Bool_t GetStopOnError () const;  ; Bool_t GetValidate () const;  ; const char * GetValidateError () const;  ; const char * GetValidateWarning () const;  ; TClass * IsA () const override;  ; virtual Int_t ParseBuffer (const char *contents, Int_t len)=0;  ; virtual Int_t ParseFile (const char *filename)=0;  ; void SetReplaceEntities (Bool_t val=kTRUE);  The parser will replace/expand entities. ;  ; void SetStopOnError (Bool_t stop=kTRUE);  Set parser stops in case of error: ;  ; void SetValidate (Bool_t val=kTRUE);  The parser will validate the xml file if val = true. ;  ; virtual void StopParser ();  Stops parsing. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtua",MatchSource.WIKI,doc/master/classTXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLParser.html
Usability,clear,clear,"ass ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; virtual void InitializeContext ();  Initialize parser parameters, such as, disactivate non-standards libxml1 features, on/off validation, clear error and warning messages. ;  ; virtual void OnValidateError (const TString &message);  This function is called when an error from the parser has occurred. ;  ; virtual void OnValidateWarning (const TString &message);  This function is called when a warning from the parser has occurred. ;  ; virtual void ReleaseUnderlying ();  To release any existing document. ;  ; virtual void SetParseCode (Int_t code);  Set the parse code: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; _xmlParserCtxt * fContext;  Parse the xml file. ;  ; Int_t fParseCode;  To keep track of the errorcodes. ;  ; Bool_t fRep",MatchSource.WIKI,doc/master/classTXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLParser.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLPlayer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLPlayer.html
Modifiability,inherit,inherited,". ROOT: TXMLPlayer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TXMLPlayer Class Reference. . Definition at line 25 of file TXMLPlayer.h. Public Member Functions;  TXMLPlayer ();  default constructor ;  ;  ~TXMLPlayer () override;  destructor of TXMLPlayer object ;  ; TClass * IsA () const override;  ; Bool_t ProduceCode (TList *cllist, const char *filename);  Produce streamers for provide class list TList should include list of classes, for which code should be generated. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete th",MatchSource.WIKI,doc/master/classTXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLPlayer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLPlayer.html
Usability,simpl,simple,"Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; const char * ElementGetter (TClass *cl, const char *membername, int specials=0);  produce code to access member of given class. ;  ; const char * ElementSetter (TClass *cl, const char *membername, char *endch);  Produce code to set value to given data member. ;  ; TString GetBasicTypeName (TStreamerElement *el);  return simple data types for given TStreamerElement object ;  ; TString GetBasicTypeReaderMethodName (Int_t type, const char *realname);  return functions name to read simple data type from xml file ;  ; TString GetMemberTypeName (TDataMember *member);  returns name of simple data type for given data member ;  ; TString GetStreamerName (TClass *cl);  returns streamer function name for given class ;  ; Bool_t ProduceSTLstreamer (std::ostream &fs, TClass *cl, TStreamerSTL *el, Bool_t isWriting);  Produce code of xml streamer for data member of stl type. ;  ; void ProduceStreamerSource (std::ostream &fs, TClass *cl, TList *cllist);  Produce source code of streamer function for specified class. ;  ; void ReadSTLarg (std::ostream &fs, TString &argname, int argtyp, Bool_t isargptr, TClass *argcl, TString &tname, TString &ifcond);  Produce code to read argument of stl container from xml file. ;  ; void WriteSTLarg (std::ostream &fs, const char *accname, int argtyp, Bool_t isargptr, TClass *argcl);  Produce code to write argument of stl container to xml file. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protect",MatchSource.WIKI,doc/master/classTXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXMLPlayer.html
Availability,error,error," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTXTRU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXTRU.html
Energy Efficiency,allocate,allocate,"s_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Types; enum  EXYChecked { ;   kUncheckedXY; , kMalformedXY; , kConvexCCW; , kConvexCW; , ;   kConcaveCCW; , kConcaveCW. };  ; enum  EZChecked { ;   kUncheckedZ; , kMalformedZ; , kConvexIncZ; , kConvexDecZ; , ;   kConcaveIncZ; , kConcaveDecZ. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; void CheckOrdering ();  Determine ordering over which to process points, segments, surfaces so that they render correctly. ;  ; void SetPoints (Double_t *points) const override;  Create TXTRU points in buffer order as expected by other methods (counterclockwise xy, increasing z) ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fNxy {0};  ; Int_t fNxyAlloc {0};  ; Int_t fNz {0};  ; Int_t fNzAlloc {0};  ; EXYChecked fPolygonShape {kUncheckedXY};  ; Float_t * fScale {nullptr};  ; Bool_t fSplitConcave {kFALSE};  ; Float_t * fX0 {nullptr};  ; Float_t * fXvtx {nullptr};  ; Float_t * fY0 {nullptr};  ; Float_t * fYvtx {nullptr};  ; Float_t * fZ {nullptr};  ; EZChecked fZOrdering {kUncheckedZ};  ;  Protected Attributes inherited from TShap",MatchSource.WIKI,doc/master/classTXTRU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXTRU.html
Integrability,message,message," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTXTRU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXTRU.html
Modifiability,inherit,inherited,"m) const;  Return z of a z section. ;  ; virtual Float_t * GetX0 () const;  ; virtual Float_t * GetXvtx () const;  ; virtual Float_t * GetY0 () const;  ; virtual Float_t * GetYvtx () const;  ; virtual Float_t * GetZ () const;  ; TClass * IsA () const override;  ; TXTRU & operator= (const TXTRU &rhs);  Deep assignment operator. ;  ; void Print (Option_t *option="""") const override;  Dump the info of this TXTRU shape Option: ;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void SplitConcavePolygon (Bool_t split=kTRUE);  (Dis)Enable the splitting of concave polygon outlines into multiple convex polygons. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TShape. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TruncateNxy (Int_t npts);  Truncate the vertex list. ;  ; virtual void TruncateNz (Int_t npts);  Truncate the z section list. ;  ;  Public Member Functions inherited from TShape;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *material);  Shape normal constructor. ;  ;  TShape (const TShape &);  copy constructor ;  ;  ~TShape () override;  Shape default destructor. ;  ; TMaterial * GetMaterial () const;  ; virtual Int_t GetNumber () const;  ; Int_t GetVisibility () const;  ; TShape & operator= (const TShape &);  assignment operator ;  ; void Paint (Option_t *option="""") override;  This method is used only when a shape is painted outside a TNode. ;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; virtual void SetVisibility (Int_t vis);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TName",MatchSource.WIKI,doc/master/classTXTRU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXTRU.html
Safety,avoid,avoid," is given – this number should be at least 2; Xvtx: array [nxy] of X coordinates of vertices; Yvtx: array [nxy] of Y coordinates of vertices; z: array [nz] of z plane positions; scale: array [nz] of scale factors; x0: array [nz] of x offsets; y0: array [nz] of y offsets. All XTRU shapes are correctly rendered in wire mode but can encounter difficulty when rendered as a solid with hidden surfaces. These exceptions occur if the outline shape is not a convex polygon. Both the X3D and OpenGL renderers expect polygons to be convex. The OpenGL spec specifies that points defining a polygon using the GL_POLYGON primitive may be rendered as the convex hull of that set.; Solid rendering under X3D can also give unexpected artifacts if the combination of x-y-z offsets and scales for the segments are chosen in such a manner that they represent a concave shape when sliced along a plane parallel to the z axis.; Choosing sets of point that represent a malformed polygon is not supported, but testing for such a condition is not implemented and thus it is left to the user to avoid this mistake. Definition at line 22 of file TXTRU.h. Public Member Functions;  TXTRU ();  TXTRU shape - default constructor. ;  ;  TXTRU (const char *name, const char *title, const char *material, Int_t nyx, Int_t nz);  TXTRU shape - normal constructor. ;  ;  TXTRU (const TXTRU &xtru);  TXTRU copy constructor. ;  ;  ~TXTRU () override;  TXTRU destructor deallocates arrays. ;  ; void Copy (TObject &xtru) const override;  TXTRU Copy method. ;  ; virtual void DefineSection (Int_t secNum, Float_t z, Float_t scale=1., Float_t x0=0., Float_t y0=0.);  Set z section iz information expand size of array if necessary. ;  ; virtual void DefineVertex (Int_t pointNum, Float_t x, Float_t y);  Set vertex point ipt to (x,y) expand size of array if necessary. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute the distance from point px,py to a TXTRU by calculating the closest approach to each corner. ;  ; ",MatchSource.WIKI,doc/master/classTXTRU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXTRU.html
Security,hash,hash,"y (Int_t vis);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object ",MatchSource.WIKI,doc/master/classTXTRU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXTRU.html
Testability,test,testing," is given – this number should be at least 2; Xvtx: array [nxy] of X coordinates of vertices; Yvtx: array [nxy] of Y coordinates of vertices; z: array [nz] of z plane positions; scale: array [nz] of scale factors; x0: array [nz] of x offsets; y0: array [nz] of y offsets. All XTRU shapes are correctly rendered in wire mode but can encounter difficulty when rendered as a solid with hidden surfaces. These exceptions occur if the outline shape is not a convex polygon. Both the X3D and OpenGL renderers expect polygons to be convex. The OpenGL spec specifies that points defining a polygon using the GL_POLYGON primitive may be rendered as the convex hull of that set.; Solid rendering under X3D can also give unexpected artifacts if the combination of x-y-z offsets and scales for the segments are chosen in such a manner that they represent a concave shape when sliced along a plane parallel to the z axis.; Choosing sets of point that represent a malformed polygon is not supported, but testing for such a condition is not implemented and thus it is left to the user to avoid this mistake. Definition at line 22 of file TXTRU.h. Public Member Functions;  TXTRU ();  TXTRU shape - default constructor. ;  ;  TXTRU (const char *name, const char *title, const char *material, Int_t nyx, Int_t nz);  TXTRU shape - normal constructor. ;  ;  TXTRU (const TXTRU &xtru);  TXTRU copy constructor. ;  ;  ~TXTRU () override;  TXTRU destructor deallocates arrays. ;  ; void Copy (TObject &xtru) const override;  TXTRU Copy method. ;  ; virtual void DefineSection (Int_t secNum, Float_t z, Float_t scale=1., Float_t x0=0., Float_t y0=0.);  Set z section iz information expand size of array if necessary. ;  ; virtual void DefineVertex (Int_t pointNum, Float_t x, Float_t y);  Set vertex point ipt to (x,y) expand size of array if necessary. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute the distance from point px,py to a TXTRU by calculating the closest approach to each corner. ;  ; ",MatchSource.WIKI,doc/master/classTXTRU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTXTRU.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTZIPFile.html
Energy Efficiency,efficient,efficient,"efix, series of archive members (sub-files), and a central directory. In theory the archive could span multiple disks (or files) with the central directory of the whole archive on the last disk, but this class does not support such multi-part archives. The prefix is only used in self-extracting executable archive files. The members are stored in the archive sequentially, each with a local header followed by the (optionally) compressed data; the local header describes the member, including its file name and compressed and real sizes. The central directory includes the member details again, plus allows an extra member comment to be added. The last member in the central directory is an end marker that can contain a comment for the whole archive. Both the local header and the central directory can also carry extra member-specific data; the data in the local and global parts can be different. The fact that the archive has a global directory makes it efficient and allows for only the reading of the desired data, one does not have to scan through the whole file to find the desired sub-file. The Zip64 extensions are supported so files larger than 2GB can be stored in archives larger than 4 GB. Once the archive has been opened, the client can query the members and read their contents by asking the archive for an offset where the sub-file starts. The members can be accessed in any order. ; Definition at line 20 of file TZIPFile.h. Public Member Functions;  TZIPFile ();  Default ctor. ;  ;  TZIPFile (const char *archive, const char *member, TFile *file);  Specify the archive name and member name. ;  ;  ~TZIPFile () override;  ; TClass * IsA () const override;  ; Int_t OpenArchive () override;  Open archive and read end-header and directory. ;  ; void Print (Option_t *option="""") const override;  Pretty print ZIP archive members. ;  ; Int_t SetCurrentMember () override;  Find the desired member in the member array and make it the current member. ;  ; void Streamer (TBuffer &) ov",MatchSource.WIKI,doc/master/classTZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTZIPFile.html
Integrability,interface,interface," TZIPFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TZIPFile Class ReferenceInput/Output Library. ; Describes a ZIP archive file containing multiple sub-files. ; Typically the sub-files are ROOT files. Notice that the ROOT files should not be compressed when being added to the ZIP file, since ROOT files are normally already compressed. Such a ZIP file should be created like: zip -n root multi file1.root file2.root which creates a ZIP file multi.zip. A ZIP archive consists of files compressed with the popular ZLIB compression algorithm. The archive format is used among others by PKZip and Info-ZIP. The compression algorithm is also used by GZIP and the PNG graphics standard. The format of the archives is explained briefly below. This class provides an interface to read such archives. A ZIP archive contains a prefix, series of archive members (sub-files), and a central directory. In theory the archive could span multiple disks (or files) with the central directory of the whole archive on the last disk, but this class does not support such multi-part archives. The prefix is only used in self-extracting executable archive files. The members are stored in the archive sequentially, each with a local header followed by the (optionally) compressed data; the local header describes the member, including its file name and compressed and real sizes. The central directory includes the member details again, plus allows an extra member comment to be added. The last member in the central directory is an end marker that can contain a comment for the whole archive. Both the local header and the central directory can also carry extra member-specific data; the data in the local and global parts can be different. The fact that the archive has a global dire",MatchSource.WIKI,doc/master/classTZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTZIPFile.html
Modifiability,inherit,inherited,"ed in archives larger than 4 GB. Once the archive has been opened, the client can query the members and read their contents by asking the archive for an offset where the sub-file starts. The members can be accessed in any order. ; Definition at line 20 of file TZIPFile.h. Public Member Functions;  TZIPFile ();  Default ctor. ;  ;  TZIPFile (const char *archive, const char *member, TFile *file);  Specify the archive name and member name. ;  ;  ~TZIPFile () override;  ; TClass * IsA () const override;  ; Int_t OpenArchive () override;  Open archive and read end-header and directory. ;  ; void Print (Option_t *option="""") const override;  Pretty print ZIP archive members. ;  ; Int_t SetCurrentMember () override;  Find the desired member in the member array and make it the current member. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArchiveFile;  TArchiveFile ();  ;  TArchiveFile (const char *archive, const char *member, TFile *file);  Specify the archive name and member name. ;  ;  ~TArchiveFile () override;  Dtor. ;  ; const char * GetArchiveName () const;  ; TArchiveMember * GetMember () const;  ; Long64_t GetMemberFilePosition () const;  Return position in archive of current member. ;  ; Int_t GetMemberIndex () const;  ; const char * GetMemberName () const;  ; TObjArray * GetMembers () const;  ; Int_t GetNumberOfMembers () const;  Returns number of members in archive. ;  ; virtual Int_t SetMember (const char *member);  Explicitely make the specified member the current member. ;  ; virtual Int_t SetMember (Int_t idx);  Explicitely make the member with the specified index the current member. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  T",MatchSource.WIKI,doc/master/classTZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTZIPFile.html
Security,access,accessed,"with a local header followed by the (optionally) compressed data; the local header describes the member, including its file name and compressed and real sizes. The central directory includes the member details again, plus allows an extra member comment to be added. The last member in the central directory is an end marker that can contain a comment for the whole archive. Both the local header and the central directory can also carry extra member-specific data; the data in the local and global parts can be different. The fact that the archive has a global directory makes it efficient and allows for only the reading of the desired data, one does not have to scan through the whole file to find the desired sub-file. The Zip64 extensions are supported so files larger than 2GB can be stored in archives larger than 4 GB. Once the archive has been opened, the client can query the members and read their contents by asking the archive for an offset where the sub-file starts. The members can be accessed in any order. ; Definition at line 20 of file TZIPFile.h. Public Member Functions;  TZIPFile ();  Default ctor. ;  ;  TZIPFile (const char *archive, const char *member, TFile *file);  Specify the archive name and member name. ;  ;  ~TZIPFile () override;  ; TClass * IsA () const override;  ; Int_t OpenArchive () override;  Open archive and read end-header and directory. ;  ; void Print (Option_t *option="""") const override;  Pretty print ZIP archive members. ;  ; Int_t SetCurrentMember () override;  Find the desired member in the member array and make it the current member. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArchiveFile;  TArchiveFile ();  ;  TArchiveFile (const char *archive, const char *member, TFile *file);  Specify the archive name and member name. ;  ;  ~TArchiveFile () override;  Dtor. ;  ; const char * GetArchiveName () c",MatchSource.WIKI,doc/master/classTZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTZIPFile.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTZIPMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTZIPMember.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTZIPMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTZIPMember.html
Modifiability,inherit,inherited,"h the popular ZLIB compression algorithm; this class records the information about a single archive member. ; Definition at line 156 of file TZIPFile.h. Public Member Functions;  TZIPMember ();  Default ctor. ;  ;  TZIPMember (const char *name);  Create ZIP member file. ;  ;  TZIPMember (const TZIPMember &member);  Copy ctor. ;  ;  ~TZIPMember () override;  Cleanup. ;  ; UInt_t GetAttrExt () const;  ; UInt_t GetAttrInt () const;  ; UInt_t GetCRC32 () const;  ; void * GetGlobal () const;  ; UInt_t GetGlobalLen () const;  ; UInt_t GetLevel () const;  ; void * GetLocal () const;  ; UInt_t GetLocalLen () const;  ; UInt_t GetMethod () const;  ; TClass * IsA () const override;  ; TZIPMember & operator= (const TZIPMember &rhs);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Pretty print basic ZIP member info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArchiveMember;  TArchiveMember ();  Default ctor. ;  ;  TArchiveMember (const char *name);  Create an archive member file. ;  ;  TArchiveMember (const TArchiveMember &member);  Copy ctor. ;  ;  ~TArchiveMember () override;  ; const char * GetComment () const;  ; Long64_t GetCompressedSize () const;  ; Long64_t GetDecompressedSize () const;  ; Long64_t GetFilePosition () const;  ; TDatime GetModTime () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Long64_t GetPosition () const;  ; Bool_t IsDirectory () const;  ; TArchiveMember & operator= (const TArchiveMember &rhs);  Assignment operator. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to impleme",MatchSource.WIKI,doc/master/classTZIPMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTZIPMember.html
Security,hash,hash,"xecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTZIPMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTZIPMember.html
Availability,error,error,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual bool isDirectGenSafe (const RooAbsA",MatchSource.WIKI,doc/master/classxRooProjectedPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html
Deployability,integrat,integration,"er, const char *name=nullptr);  Copy constructor. ;  ;  Public Member Functions inherited from RooProjectedPdf;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Mark all requested variables as internally integrated. ;  ; void initGenerator (Int_t) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the integration operation. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default co",MatchSource.WIKI,doc/master/classxRooProjectedPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html
Energy Efficiency,efficient,efficient,"normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverr",MatchSource.WIKI,doc/master/classxRooProjectedPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html
Integrability,integrat,integration,"er, const char *name=nullptr);  Copy constructor. ;  ;  Public Member Functions inherited from RooProjectedPdf;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Mark all requested variables as internally integrated. ;  ; void initGenerator (Int_t) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the integration operation. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default co",MatchSource.WIKI,doc/master/classxRooProjectedPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html
Modifiability,extend,extended,". ROOT: xRooProjectedPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; List of all members ; xRooProjectedPdf Class Reference. . Definition at line 7144 of file xRooNode.cxx. Public Member Functions; TObject * clone (const char *newname) const override;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events to be used in calculation of extended likelihood. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ;  Public Member Functions inherited from RooProjectedPdf;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ;",MatchSource.WIKI,doc/master/classxRooProjectedPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html
Performance,cache,cache," Return expected number of events to be used in calculation of extended likelihood. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ;  Public Member Functions inherited from RooProjectedPdf;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Mark all requested variables as internally integrated. ;  ; void initGenerator (Int_t) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arg",MatchSource.WIKI,doc/master/classxRooProjectedPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html
Safety,safe,safely,"rent value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (pr",MatchSource.WIKI,doc/master/classxRooProjectedPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html
Security,hash,hash,"ED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract",MatchSource.WIKI,doc/master/classxRooProjectedPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html
Testability,log,logic,"er, const char *name=nullptr);  Copy constructor. ;  ;  Public Member Functions inherited from RooProjectedPdf;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Mark all requested variables as internally integrated. ;  ; void initGenerator (Int_t) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the integration operation. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default co",MatchSource.WIKI,doc/master/classxRooProjectedPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html
Usability,intuit,intuitively,"eName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Mark all requested variables as internally integrated. ;  ; void initGenerator (Int_t) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the integration operation. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual Roo",MatchSource.WIKI,doc/master/classxRooProjectedPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html
Modifiability,inherit,inheritance,". ROOT: tutorials/tree/clonesA_Event.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. clonesA_Event.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example to write & read a Tree built with a complex class inheritance tree. ; It demonstrates usage of inheritance and TClonesArrays This is simplified / stripped extract of an event structure which was used within the Marabou project.; To run this example, do: root > .x clonesA_Event.C; ; #ifndef CLONESA_EVENT_SECOND_RUN; ; void clonesA_Event() {; std::string s1(__FILE__);; TString dir = gSystem->UnixPathName(s1.substr(0, s1.find_last_of(""\\/"")).c_str());; gROOT->ProcessLine(TString("".L "")+dir+""/clonesA_Event.cxx+"");; #define CLONESA_EVENT_SECOND_RUN yes; gROOT->ProcessLine(""#include \"""" __FILE__ ""\"""");; gROOT->ProcessLine(""clonesA_Event(true)"");; }; ; #else; ; void clonesA_Event_w(); {; // protect against old ROOT versions; if ( gROOT->GetVersionInt() < 30503 ) {; cout << ""Works only with ROOT version >= 3.05/03"" << endl;; return;; }; if ( gROOT->GetVersionDate() < 20030406 ) {; cout << ""Works only with ROOT CVS version after 5. 4. 2003"" << endl;; return;; }; ; //write a Tree; TFile *hfile = new TFile(""clonesA_Event.root"",""RECREATE"",""Test TClonesArray"");; TTree *tree = new TTree(""clonesA_Event"",""An example of a ROOT tree"");; TUsrSevtData1 *event1 = new TUsrSevtData1();; TUsrSevtData2 *event2 = new TUsrSevtData2();; tree->Branch(""top1"",""TUsrSevtData1"",&event1,8000,99);; tree->Branch(""top2"",""TUsrSevtData2"",&event2,8000,99);; for (Int_t ev = 0; ev < 10; ev++) {; cout << ""event "" << ev << endl;; event1->SetEvent(ev);; event2->SetEvent(ev);; tree->Fill();; if (ev <3) tree->Show(ev);; }; tree->Write();; tree->Print();; delete hfile;; }; ; void clonesA_Event_r(); {; //read the Tree; TFile * hfile = new TFile(""clonesA_Event.root"");; TTree *tree = (TTree*)hfile->Get(""clonesA_Event"");; ; TUsrSevtData1 * event1 = 0;; TUsrSevtData2 * event2 = 0;; tree->SetBranchAdd",MatchSource.WIKI,doc/master/clonesA__Event_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/clonesA__Event_8C.html
Performance,load,load,";; }; ; //write a Tree; TFile *hfile = new TFile(""clonesA_Event.root"",""RECREATE"",""Test TClonesArray"");; TTree *tree = new TTree(""clonesA_Event"",""An example of a ROOT tree"");; TUsrSevtData1 *event1 = new TUsrSevtData1();; TUsrSevtData2 *event2 = new TUsrSevtData2();; tree->Branch(""top1"",""TUsrSevtData1"",&event1,8000,99);; tree->Branch(""top2"",""TUsrSevtData2"",&event2,8000,99);; for (Int_t ev = 0; ev < 10; ev++) {; cout << ""event "" << ev << endl;; event1->SetEvent(ev);; event2->SetEvent(ev);; tree->Fill();; if (ev <3) tree->Show(ev);; }; tree->Write();; tree->Print();; delete hfile;; }; ; void clonesA_Event_r(); {; //read the Tree; TFile * hfile = new TFile(""clonesA_Event.root"");; TTree *tree = (TTree*)hfile->Get(""clonesA_Event"");; ; TUsrSevtData1 * event1 = 0;; TUsrSevtData2 * event2 = 0;; tree->SetBranchAddress(""top1"",&event1);; tree->SetBranchAddress(""top2"",&event2);; for (Int_t ev = 0; ev < 8; ev++) {; tree->Show(ev);; cout << ""Pileup event1: "" << event1->GetPileup() << endl;; cout << ""Pileup event2: "" << event2->GetPileup() << endl;; event1->Clear();; event2->Clear();; // gObjectTable->Print(); // detect possible memory leaks; }; delete hfile;; }; ; void clonesA_Event(bool /*secondrun*/) {; // Embedding this load inside the first run of the script is not yet; // supported in v6; // gROOT->ProcessLine("".L clonesA_Event.cxx+""); // compile shared lib; clonesA_Event_w(); // write the tree; clonesA_Event_r(); // read back the tree; }; ; #endif; s1#define s1(x)Definition RSha256.hxx:91; Int_tint Int_tDefinition RtypesCore.h:45; gROOT#define gROOTDefinition TROOT.h:406; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TDirectoryFile::GetTObject * Get(const char *namecycle) overrideReturn pointer to object identified by namecycle.Definition TDirectoryFile.cxx:937; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TMrbSubevent_Caen::Clearvoid Clear(Option_t *="""")Definition clonesA_Ev",MatchSource.WIKI,doc/master/clonesA__Event_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/clonesA__Event_8C.html
Safety,detect,detect,";; }; ; //write a Tree; TFile *hfile = new TFile(""clonesA_Event.root"",""RECREATE"",""Test TClonesArray"");; TTree *tree = new TTree(""clonesA_Event"",""An example of a ROOT tree"");; TUsrSevtData1 *event1 = new TUsrSevtData1();; TUsrSevtData2 *event2 = new TUsrSevtData2();; tree->Branch(""top1"",""TUsrSevtData1"",&event1,8000,99);; tree->Branch(""top2"",""TUsrSevtData2"",&event2,8000,99);; for (Int_t ev = 0; ev < 10; ev++) {; cout << ""event "" << ev << endl;; event1->SetEvent(ev);; event2->SetEvent(ev);; tree->Fill();; if (ev <3) tree->Show(ev);; }; tree->Write();; tree->Print();; delete hfile;; }; ; void clonesA_Event_r(); {; //read the Tree; TFile * hfile = new TFile(""clonesA_Event.root"");; TTree *tree = (TTree*)hfile->Get(""clonesA_Event"");; ; TUsrSevtData1 * event1 = 0;; TUsrSevtData2 * event2 = 0;; tree->SetBranchAddress(""top1"",&event1);; tree->SetBranchAddress(""top2"",&event2);; for (Int_t ev = 0; ev < 8; ev++) {; tree->Show(ev);; cout << ""Pileup event1: "" << event1->GetPileup() << endl;; cout << ""Pileup event2: "" << event2->GetPileup() << endl;; event1->Clear();; event2->Clear();; // gObjectTable->Print(); // detect possible memory leaks; }; delete hfile;; }; ; void clonesA_Event(bool /*secondrun*/) {; // Embedding this load inside the first run of the script is not yet; // supported in v6; // gROOT->ProcessLine("".L clonesA_Event.cxx+""); // compile shared lib; clonesA_Event_w(); // write the tree; clonesA_Event_r(); // read back the tree; }; ; #endif; s1#define s1(x)Definition RSha256.hxx:91; Int_tint Int_tDefinition RtypesCore.h:45; gROOT#define gROOTDefinition TROOT.h:406; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TDirectoryFile::GetTObject * Get(const char *namecycle) overrideReturn pointer to object identified by namecycle.Definition TDirectoryFile.cxx:937; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TMrbSubevent_Caen::Clearvoid Clear(Option_t *="""")Definition clonesA_Ev",MatchSource.WIKI,doc/master/clonesA__Event_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/clonesA__Event_8C.html
Usability,simpl,simplified,". ROOT: tutorials/tree/clonesA_Event.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. clonesA_Event.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example to write & read a Tree built with a complex class inheritance tree. ; It demonstrates usage of inheritance and TClonesArrays This is simplified / stripped extract of an event structure which was used within the Marabou project.; To run this example, do: root > .x clonesA_Event.C; ; #ifndef CLONESA_EVENT_SECOND_RUN; ; void clonesA_Event() {; std::string s1(__FILE__);; TString dir = gSystem->UnixPathName(s1.substr(0, s1.find_last_of(""\\/"")).c_str());; gROOT->ProcessLine(TString("".L "")+dir+""/clonesA_Event.cxx+"");; #define CLONESA_EVENT_SECOND_RUN yes; gROOT->ProcessLine(""#include \"""" __FILE__ ""\"""");; gROOT->ProcessLine(""clonesA_Event(true)"");; }; ; #else; ; void clonesA_Event_w(); {; // protect against old ROOT versions; if ( gROOT->GetVersionInt() < 30503 ) {; cout << ""Works only with ROOT version >= 3.05/03"" << endl;; return;; }; if ( gROOT->GetVersionDate() < 20030406 ) {; cout << ""Works only with ROOT CVS version after 5. 4. 2003"" << endl;; return;; }; ; //write a Tree; TFile *hfile = new TFile(""clonesA_Event.root"",""RECREATE"",""Test TClonesArray"");; TTree *tree = new TTree(""clonesA_Event"",""An example of a ROOT tree"");; TUsrSevtData1 *event1 = new TUsrSevtData1();; TUsrSevtData2 *event2 = new TUsrSevtData2();; tree->Branch(""top1"",""TUsrSevtData1"",&event1,8000,99);; tree->Branch(""top2"",""TUsrSevtData2"",&event2,8000,99);; for (Int_t ev = 0; ev < 10; ev++) {; cout << ""event "" << ev << endl;; event1->SetEvent(ev);; event2->SetEvent(ev);; tree->Fill();; if (ev <3) tree->Show(ev);; }; tree->Write();; tree->Print();; delete hfile;; }; ; void clonesA_Event_r(); {; //read the Tree; TFile * hfile = new TFile(""clonesA_Event.root"");; TTree *tree = (TTree*)hfile->Get(""clonesA_Event"");; ; TUsrSevtData1 * event1 = 0;; TUsrSevtData2 * event2 = 0;; tree->SetBranchAdd",MatchSource.WIKI,doc/master/clonesA__Event_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/clonesA__Event_8C.html
Availability,error,errors,"ass * Class(); RecHit::fPtfloat fPtDefinition collection_proxies.C:94; RecHit::fZfloat fZDefinition collection_proxies.C:93; RecHit::fYfloat fYDefinition collection_proxies.C:92; RecHit::fXfloat fXDefinition collection_proxies.C:91; RecHit::RecHitRecHit(float pt, float x, float y, float z)Definition collection_proxies.C:96; TCollection::SetNamevoid SetName(const char *name)Definition TCollection.h:206; TGeoTubeDefinition TGeoTube.h:17; TH1::AddDirectorystatic void AddDirectory(Bool_t add=kTRUE)Sets the flag controlling the automatic add of histograms in memory.Definition TH1.cxx:1294; TH1::FindBinvirtual Int_t FindBin(Double_t x, Double_t y=0, Double_t z=0)Return Global bin number corresponding to x,y,z.Definition TH1.cxx:3672; TH1::AddDirectoryStatusstatic Bool_t AddDirectoryStatus()Static function: cannot be inlined on Windows/NT.Definition TH1.cxx:754; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2F::Resetvoid Reset(Option_t *option="""") overrideReset this histogram: contents, errors, etc.Definition TH2.cxx:3972; TH2::GetBinContentDouble_t GetBinContent(Int_t binx, Int_t biny) const overrideDefinition TH2.h:93; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TIterDefinition TCollection.h:235; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TParticleProxyBuilderDefinition collection_proxies.C:380; TParticleProxyBuilder::BuildItemvoid BuildItem(const TParticle &p, int idx, REveElement *iItemHolder, const REveViewContext *context)",MatchSource.WIKI,doc/master/collection__proxies_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/collection__proxies_8C_source.html
Integrability,depend,dependant,"ntal::REveCaloDataSliceSelector::ProcessSelectionvirtual void ProcessSelection(REveCaloData::vCellId_t &sel_cells, UInt_t selectionId, bool multi)=0; ROOT::Experimental::REveCaloDataSliceSelector::GetSliceIndexint GetSliceIndex()Definition REveCaloData.hxx:336; ROOT::Experimental::REveCaloDataSliceSelector::GetCellsFromSecondaryIndicesvirtual void GetCellsFromSecondaryIndices(const std::set< int > &idcs, REveCaloData::vCellId_t &out)=0; ROOT::Experimental::REveCaloData::SetSelectorvoid SetSelector(REveCaloDataSelector *iSelector)Definition REveCaloData.hxx:223; ROOT::Experimental::REveCaloData::GetSelectorREveCaloDataSelector * GetSelector()Definition REveCaloData.hxx:224; ROOT::Experimental::REveCaloData::RefSliceInfoSliceInfo_t & RefSliceInfo(Int_t s)Definition REveCaloData.hxx:196; ROOT::Experimental::REveCaloData::vCellId_tstd::vector< CellId_t > vCellId_tDefinition REveCaloData.hxx:150; ROOT::Experimental::REveCaloData::FillImpliedSelectedSetvoid FillImpliedSelectedSet(Set_t &impSelSet, const std::set< int > &sec_idcs) overridePopulate set impSelSet with derived / dependant elements.Definition REveCaloData.cxx:159; ROOT::Experimental::REveDataCollectionDefinition REveDataCollection.hxx:116; ROOT::Experimental::REveDataCollection::ApplyFiltervoid ApplyFilter()Definition REveDataCollection.cxx:333; ROOT::Experimental::REveDataCollection::Ids_tstd::vector< int > Ids_tDefinition REveDataCollection.hxx:122; ROOT::Experimental::REveDataCollection::GetItemListREveDataItemList * GetItemList()Definition REveDataCollection.hxx:147; ROOT::Experimental::REveDataCollection::SetFilterExprvoid SetFilterExpr(const char *filter)Definition REveDataCollection.cxx:277; ROOT::Experimental::REveDataCollection::GetItemClassTClass * GetItemClass() constDefinition REveDataCollection.hxx:141; ROOT::Experimental::REveDataCollection::GetDataPtrvoid * GetDataPtr(Int_t i) constDefinition REveDataCollection.hxx:155; ROOT::Experimental::REveDataCollection::GetNItemsInt_t GetNItems() constDefin",MatchSource.WIKI,doc/master/collection__proxies_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/collection__proxies_8C_source.html
Performance,load,load,"ction->GetName() == std::string(l->GetName())); 632 {; 633 collection->ClearItems();; 634 ; 635 for (int i = 0; i <= l->GetLast(); ++i); 636 {; 637 std::string cname = collection->GetName();; 638 auto len = cname.size();; 639 char end = cname[len-1];; 640 if (end == 's') {; 641 cname = cname.substr(0, len-1);; 642 }; 643 TString pname(Form(""%s %2d"", cname.c_str(), i));; 644 collection->AddItem(l->At(i), pname.Data(), """");; 645 }; 646 }; 647 collection->ApplyFilter();; 648 }; 649 }; 650 ; 651 void LoadEvent(); 652 {; 653 m_inEventLoading = true;; 654 ; 655 for (auto &el: m_collections->RefChildren()); 656 {; 657 auto c = dynamic_cast<REveDataCollection *>(el);; 658 SetDataItemsFromEvent(c);; 659 }; 660 ; 661 for (auto proxy : m_builders); 662 {; 663 proxy->Build();; 664 }; 665 ; 666 fEvent->fCaloData->DataChanged();; 667 m_inEventLoading = false;; 668 }; 669 ; 670 void addCollection(REveDataCollection* collection, REveDataProxyBuilderBase* glBuilder, bool showInTable = false); 671 {; 672 m_collections->AddElement(collection);; 673 ; 674 // load data; 675 SetDataItemsFromEvent(collection);; 676 glBuilder->SetCollection(collection);; 677 glBuilder->SetHaveAWindow(true);; 678 for (auto scene : m_scenes); 679 {; 680 if (strncmp(scene->GetCName(), ""Tables"", 5) == 0) continue;; 681 ; 682 REveElement *product = glBuilder->CreateProduct(scene->GetTitle(), m_viewContext);; 683 ; 684 if (!strncmp(scene->GetCTitle(), ""Projected"", 8)); 685 {; 686 g_projMng->ImportElements(product, scene);; 687 }; 688 else; 689 {; 690 scene->AddElement(product);; 691 }; 692 }; 693 m_builders.push_back(glBuilder);; 694 glBuilder->Build();; 695 ; 696 // Tables; 697 auto tableBuilder = new REveTableProxyBuilder();; 698 tableBuilder->SetHaveAWindow(true);; 699 tableBuilder->SetCollection(collection);; 700 REveElement* tablep = tableBuilder->CreateProduct(""table-type"", m_viewContext);; 701 auto tableMng = m_viewContext->GetTableViewInfo();; 702 if (showInTable); 703 {; 704 tableMng->SetDisplayedCollect",MatchSource.WIKI,doc/master/collection__proxies_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/collection__proxies_8C_source.html
Testability,assert,assertSlice,"{; 452 fBoxSet = new FWBoxSet();; 453 buildBoxSet(fBoxSet);; 454 product->AddElement(fBoxSet);; 455 }; 456 ; 457 using REveDataProxyBuilderBase::FillImpliedSelected;; 458 void FillImpliedSelected(REveElement::Set_t& impSet, const std::set<int>& sec_idcs, Product* p) override; 459 {; 460 // printf(""RecHit fill implioed ----------------- !!!%zu\n"", Collection()->GetItemList()->RefSelectedSet().size());; 461 impSet.insert(fBoxSet);; 462 }; 463 ; 464 using REveDataProxyBuilderBase::ModelChanges;; 465 void ModelChanges(const REveDataCollection::Ids_t& ids, Product* product) override; 466 {; 467 for (auto &i : ids); 468 {; 469 auto digi = fBoxSet->GetDigit(i);; 470 auto item = Collection()->GetDataItem(i);; 471 fBoxSet->SetCurrentDigit(i);; 472 if (item->GetVisible()) {; 473 fBoxSet->DigitValue(1);; 474 fBoxSet->DigitColor(item->GetMainColor());; 475 } else {; 476 fBoxSet->DigitValue(0);; 477 }; 478 }; 479 fBoxSet->StampObjProps();; 480 }; 481}; // RecHitProxyBuilder; 482 ; 483class CaloTowerProxyBuilder: public REveDataProxyBuilderBase; 484{; 485private:; 486 REveCaloDataHist* fCaloData {nullptr};; 487 TH2F* fHist {nullptr};; 488 int fSliceIndex {-1};; 489 ; 490 void assertSlice() {; 491 if (!fHist) {; 492 Bool_t status = TH1::AddDirectoryStatus();; 493 ; 494 TH1::AddDirectory(kFALSE); //Keeps histogram from going into memory; 495 fHist = new TH2F(""caloHist"", ""caloHist"", fw3dlego::xbins_n - 1, fw3dlego::xbins, 72, -M_PI, M_PI);; 496 TH1::AddDirectory(status);; 497 fSliceIndex = fCaloData->AddHistogram(fHist);; 498 ; 499 fCaloData->RefSliceInfo(fSliceIndex); 500 .Setup(Collection()->GetCName(),; 501 0.,; 502 Collection()->GetMainColor(),; 503 Collection()->GetMainTransparency());; 504 ; 505 fCaloData->GetSelector()->AddSliceSelector(std::unique_ptr<REveCaloDataSliceSelector>; 506 (new REveCaloTowerSliceSelector(fSliceIndex, Collection(), fCaloData)));; 507 }; 508 }; 509 ; 510public:; 511 CaloTowerProxyBuilder(REveCaloDataHist* cd) : fCaloData(cd) {}; 512 ; 513 using REveD",MatchSource.WIKI,doc/master/collection__proxies_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/collection__proxies_8C_source.html
Usability,clear,clear,"eta, phi);; 234 auto particle = new TParticle(0, 0, 0, 0, 0, 0,; 235 px, py, pz, std::sqrt(px*px + py*py + pz*pz + 80*80),; 236 0, 0, 0, 0 );; 237 ; 238 int pdg = 11 * (r.Integer(2) > 0 ? 1 : -1);; 239 particle->SetPdgCode(pdg);; 240 ; 241 list->Add(particle);; 242 }; 243 fListData.push_back(list);; 244 }; 245 ; 246 void MakeRecHits(int N); 247 {; 248 TRandom &r = *gRandom;; 249 r.SetSeed(0);; 250 TList* list = new TList();; 251 list->SetName(""RecHits"");; 252 ; 253 for (int i = 1; i <= N; ++i); 254 {; 255 float pt = r.Uniform(0.5, 10);; 256 float x = r.Uniform(-200, 200);; 257 float y = r.Uniform(-200, 200);; 258 float z = r.Uniform(-500, 500);; 259 auto rechit = new RecHit(pt, x, y, z);; 260 list->Add(rechit);; 261 }; 262 fListData.push_back(list);; 263 }; 264 ; 265 void Clear(); 266 {; 267 for (auto &l : fListData); 268 delete l;; 269 fListData.clear();; 270 }; 271 ; 272 void Create(); 273 {; 274 Clear();; 275 MakeJets(4);; 276 MakeParticles(100);; 277 MakeRecHits(20);; 278 ; 279 // refill calo data from jet list; 280 TList* jlist = fListData[0];; 281 TList* elist = new TList();; 282 elist->SetName(""ECAL"");; 283 fListData.push_back(elist);; 284 TList* hlist = new TList();; 285 hlist->SetName(""HCAL"");; 286 fListData.push_back(hlist);; 287 for (int i = 0; i <= jlist->GetLast(); ++i) {; 288 const Jet* j = (Jet*)jlist->At(i);; 289 float offX = j->Eta();; 290 float offY = j->Phi() > TMath::Pi() ? j->Phi() - TMath::TwoPi() : j->Phi();; 291 for (int k=0; k<20; ++k) {; 292 double x, y, v;; 293 x = gRandom->Uniform(-j->GetEtaSize(), j->GetEtaSize());; 294 y = gRandom->Uniform(-j->GetPhiSize(),j->GetPhiSize());; 295 v = j->Pt();; 296 auto etower = new RCaloTower(offX + x, offY + y, v + gRandom->Uniform(2,3));; 297 elist->Add(etower);; 298 auto htower = new RCaloTower(offX + x, offY + y, v + gRandom->Uniform(1,2));; 299 hlist->Add(htower);; 300 }; 301 }; 302 fCaloData->DataChanged();; 303 eventId++;; 304 }; 305};; 306 ; 307 ; 308//=============================================",MatchSource.WIKI,doc/master/collection__proxies_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/collection__proxies_8C_source.html
Availability,error,error,"iparB);; fB->SetRange(rangeB().first, rangeB().second);; fB->SetLineColor(kBlue);; hB->GetListOfFunctions()->Add(fB);; hB->Draw();; ; c1->cd(2);; fSB->SetFitResult(result, iparSB);; fSB->SetRange(rangeSB().first, rangeSB().second);; fSB->SetLineColor(kRed);; hSB->GetListOfFunctions()->Add(fSB);; hSB->Draw();; }; BinData.h; Chi2FCN.h; Fitter.h; HFitInterface.h; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TCanvas.h; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; TH1.h; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:14; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; WrappedMultiTF1.h; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::DataRange::SetRangevoid SetRange(unsigned int icoord, double xmin, double xmax)set a range [xmin,xmax] for the new coordinate icoord If more range exists for other coordinates,...Definition DataRange.cxx:124; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::SetParamsSettingsvoid SetParamsSettings(unsigned int npar, const double *params, const double *vstep=nullptr)set the parameter settings from number of parameters and a vector of values and optionally step value...Definition FitConfig.cxx:135; ROOT::Fit::FitConfig::ParSettingsconst Paramet",MatchSource.WIKI,doc/master/combinedFit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8C.html
Deployability,configurat,configuration,"Settingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Fit::ParameterSettings::SetLimitsvoid SetLimits(double low, double up)set a double side limit, if low == up the parameter is fixed if low > up the limits are removed The c...Definition ParameterSettings.cxx:25; ROOT::Fit::ParameterSettings::Fixvoid Fix()fix the parameterDefinition ParameterSettings.h:116; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::MinimizerOptions::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition MinimizerOptions.h:210; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line col",MatchSource.WIKI,doc/master/combinedFit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8C.html
Integrability,interface,interface,"it using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Fit::ParameterSettings::SetLimitsvoid SetLimits(double low, double up)set a double side limit, if low == up the parameter is fixed if low > up the limits are removed The c...Definition ParameterSettings.cxx:25; ROOT::Fit::ParameterSettings::Fixvoid Fix()fix the parameterDefinition ParameterSettings.h:116; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::MinimizerOptions::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition MinimizerOptions.h:210; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::SetRangevirtual void SetRange(Double_t xmin, Double_t xmax)Initialize the upper and lower bounds to draw the function.Definition TF1.cxx:3528; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetFitResultvirtual void SetFitResult(const ROOT::Fit::FitResult &result, const Int_t *indpar=nullptr)Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (...Definition TF1.cxx:3355; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distrib",MatchSource.WIKI,doc/master/combinedFit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8C.html
Modifiability,config,configuration,"Settingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Fit::ParameterSettings::SetLimitsvoid SetLimits(double low, double up)set a double side limit, if low == up the parameter is fixed if low > up the limits are removed The c...Definition ParameterSettings.cxx:25; ROOT::Fit::ParameterSettings::Fixvoid Fix()fix the parameterDefinition ParameterSettings.h:116; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::MinimizerOptions::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition MinimizerOptions.h:210; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line col",MatchSource.WIKI,doc/master/combinedFit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8C.html
Performance,perform,perform,"CHi2 structure; ; struct GlobalChi2 {; GlobalChi2(ROOT::Math::IMultiGenFunction &f1, ROOT::Math::IMultiGenFunction &f2) : fChi2_1(&f1), fChi2_2(&f2) {}; ; // parameter vector is first background (in common 1 and 2); // and then is signal (only in 2); double operator()(const double *par) const; {; double p1[2];; for (int i = 0; i < 2; ++i); p1[i] = par[iparB[i]];; ; double p2[5];; for (int i = 0; i < 5; ++i); p2[i] = par[iparSB[i]];; ; return (*fChi2_1)(p1) + (*fChi2_2)(p2);; }; ; const ROOT::Math::IMultiGenFunction *fChi2_1;; const ROOT::Math::IMultiGenFunction *fChi2_2;; };; ; void combinedFit(); {; ; TH1D *hB = new TH1D(""hB"", ""histo B"", 100, 0, 100);; TH1D *hSB = new TH1D(""hSB"", ""histo S+B"", 100, 0, 100);; ; TF1 *fB = new TF1(""fB"", ""expo"", 0, 100);; fB->SetParameters(1, -0.05);; hB->FillRandom(""fB"");; ; TF1 *fS = new TF1(""fS"", ""gaus"", 0, 100);; fS->SetParameters(1, 30, 5);; ; hSB->FillRandom(""fB"", 2000);; hSB->FillRandom(""fS"", 1000);; ; // perform now global fit; ; TF1 *fSB = new TF1(""fSB"", ""expo + gaus(2)"", 0, 100);; ; ROOT::Math::WrappedMultiTF1 wfB(*fB, 1);; ROOT::Math::WrappedMultiTF1 wfSB(*fSB, 1);; ; ROOT::Fit::DataOptions opt;; ROOT::Fit::DataRange rangeB;; // set the data range; rangeB.SetRange(10, 90);; ROOT::Fit::BinData dataB(opt, rangeB);; ROOT::Fit::FillData(dataB, hB);; ; ROOT::Fit::DataRange rangeSB;; rangeSB.SetRange(10, 50);; ROOT::Fit::BinData dataSB(opt, rangeSB);; ROOT::Fit::FillData(dataSB, hSB);; ; ROOT::Fit::Chi2Function chi2_B(dataB, wfB);; ROOT::Fit::Chi2Function chi2_SB(dataSB, wfSB);; ; GlobalChi2 globalChi2(chi2_B, chi2_SB);; ; ROOT::Fit::Fitter fitter;; ; const int Npar = 6;; double par0[Npar] = {5, 5, -0.1, 100, 30, 10};; ; // create before the parameter settings in order to fix or set range on them; fitter.Config().SetParamsSettings(6, par0);; // fix 5-th parameter; fitter.Config().ParSettings(4).Fix();; // set limits on the third and 4-th parameter; fitter.Config().ParSettings(2).SetLimits(-10, -1.E-4);; fitter.Config().ParSettings(3",MatchSource.WIKI,doc/master/combinedFit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8C.html
Security,access,access,"describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::DataRange::SetRangevoid SetRange(unsigned int icoord, double xmin, double xmax)set a range [xmin,xmax] for the new coordinate icoord If more range exists for other coordinates,...Definition DataRange.cxx:124; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::SetParamsSettingsvoid SetParamsSettings(unsigned int npar, const double *params, const double *vstep=nullptr)set the parameter settings from number of parameters and a vector of values and optionally step value...Definition FitConfig.cxx:135; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Fit::ParameterSettings::SetLimitsvoid Se",MatchSource.WIKI,doc/master/combinedFit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8C.html
Usability,simpl,simple," of multi-dimensions...Definition WrappedMultiTF1.h:48; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::SetRangevirtual void SetRange(Double_t xmin, Double_t xmax)Initialize the upper and lower bounds to draw the function.Definition TF1.cxx:3528; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetFitResultvirtual void SetFitResult(const ROOT::Fit::FitResult &result, const Int_t *indpar=nullptr)Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (...Definition TF1.cxx:3355; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TH1.h:244; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; c1return c1Definition legend1.C:41; f1TF1 * f1Definition legend1.C:11; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; combinedFitDefinition combinedFit.py:1; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; AuthorLorenzo Moneta ; Definition in file combinedFit.C. tutorialsfitcombinedFit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/combinedFit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8C.html
Availability,error,error,"B().second);; 139 fB->SetLineColor(kBlue);; 140 hB->GetListOfFunctions()->Add(fB);; 141 hB->Draw();; 142 ; 143 c1->cd(2);; 144 fSB->SetFitResult(result, iparSB);; 145 fSB->SetRange(rangeSB().first, rangeSB().second);; 146 fSB->SetLineColor(kRed);; 147 hSB->GetListOfFunctions()->Add(fSB);; 148 hSB->Draw();; 149}; BinData.h; Chi2FCN.h; Fitter.h; HFitInterface.h; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TCanvas.h; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; TH1.h; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:14; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; WrappedMultiTF1.h; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::DataRange::SetRangevoid SetRange(unsigned int icoord, double xmin, double xmax)set a range [xmin,xmax] for the new coordinate icoord If more range exists for other coordinates,...Definition DataRange.cxx:124; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::SetParamsSettingsvoid SetParamsSettings(unsigned int npar, const double *params, const double *vstep=nullptr)set the parameter settings from number of parameters and a vector of values and optionally step value...Definition FitConfig.cxx:135; ROOT::Fit::FitConfig::ParSettingsconst Paramet",MatchSource.WIKI,doc/master/combinedFit_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8C_source.html
Deployability,configurat,configuration,"Settingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Fit::ParameterSettings::SetLimitsvoid SetLimits(double low, double up)set a double side limit, if low == up the parameter is fixed if low > up the limits are removed The c...Definition ParameterSettings.cxx:25; ROOT::Fit::ParameterSettings::Fixvoid Fix()fix the parameterDefinition ParameterSettings.h:116; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::MinimizerOptions::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition MinimizerOptions.h:210; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line col",MatchSource.WIKI,doc/master/combinedFit_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8C_source.html
Integrability,interface,interface,"it using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Fit::ParameterSettings::SetLimitsvoid SetLimits(double low, double up)set a double side limit, if low == up the parameter is fixed if low > up the limits are removed The c...Definition ParameterSettings.cxx:25; ROOT::Fit::ParameterSettings::Fixvoid Fix()fix the parameterDefinition ParameterSettings.h:116; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::MinimizerOptions::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition MinimizerOptions.h:210; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::SetRangevirtual void SetRange(Double_t xmin, Double_t xmax)Initialize the upper and lower bounds to draw the function.Definition TF1.cxx:3528; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetFitResultvirtual void SetFitResult(const ROOT::Fit::FitResult &result, const Int_t *indpar=nullptr)Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (...Definition TF1.cxx:3355; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distrib",MatchSource.WIKI,doc/master/combinedFit_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8C_source.html
Modifiability,config,configuration,"Settingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Fit::ParameterSettings::SetLimitsvoid SetLimits(double low, double up)set a double side limit, if low == up the parameter is fixed if low > up the limits are removed The c...Definition ParameterSettings.cxx:25; ROOT::Fit::ParameterSettings::Fixvoid Fix()fix the parameterDefinition ParameterSettings.h:116; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::MinimizerOptions::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition MinimizerOptions.h:210; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line col",MatchSource.WIKI,doc/master/combinedFit_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8C_source.html
Performance,perform,perform,"tion &f2) : fChi2_1(&f1), fChi2_2(&f2) {}; 47 ; 48 // parameter vector is first background (in common 1 and 2); 49 // and then is signal (only in 2); 50 double operator()(const double *par) const; 51 {; 52 double p1[2];; 53 for (int i = 0; i < 2; ++i); 54 p1[i] = par[iparB[i]];; 55 ; 56 double p2[5];; 57 for (int i = 0; i < 5; ++i); 58 p2[i] = par[iparSB[i]];; 59 ; 60 return (*fChi2_1)(p1) + (*fChi2_2)(p2);; 61 }; 62 ; 63 const ROOT::Math::IMultiGenFunction *fChi2_1;; 64 const ROOT::Math::IMultiGenFunction *fChi2_2;; 65};; 66 ; 67void combinedFit(); 68{; 69 ; 70 TH1D *hB = new TH1D(""hB"", ""histo B"", 100, 0, 100);; 71 TH1D *hSB = new TH1D(""hSB"", ""histo S+B"", 100, 0, 100);; 72 ; 73 TF1 *fB = new TF1(""fB"", ""expo"", 0, 100);; 74 fB->SetParameters(1, -0.05);; 75 hB->FillRandom(""fB"");; 76 ; 77 TF1 *fS = new TF1(""fS"", ""gaus"", 0, 100);; 78 fS->SetParameters(1, 30, 5);; 79 ; 80 hSB->FillRandom(""fB"", 2000);; 81 hSB->FillRandom(""fS"", 1000);; 82 ; 83 // perform now global fit; 84 ; 85 TF1 *fSB = new TF1(""fSB"", ""expo + gaus(2)"", 0, 100);; 86 ; 87 ROOT::Math::WrappedMultiTF1 wfB(*fB, 1);; 88 ROOT::Math::WrappedMultiTF1 wfSB(*fSB, 1);; 89 ; 90 ROOT::Fit::DataOptions opt;; 91 ROOT::Fit::DataRange rangeB;; 92 // set the data range; 93 rangeB.SetRange(10, 90);; 94 ROOT::Fit::BinData dataB(opt, rangeB);; 95 ROOT::Fit::FillData(dataB, hB);; 96 ; 97 ROOT::Fit::DataRange rangeSB;; 98 rangeSB.SetRange(10, 50);; 99 ROOT::Fit::BinData dataSB(opt, rangeSB);; 100 ROOT::Fit::FillData(dataSB, hSB);; 101 ; 102 ROOT::Fit::Chi2Function chi2_B(dataB, wfB);; 103 ROOT::Fit::Chi2Function chi2_SB(dataSB, wfSB);; 104 ; 105 GlobalChi2 globalChi2(chi2_B, chi2_SB);; 106 ; 107 ROOT::Fit::Fitter fitter;; 108 ; 109 const int Npar = 6;; 110 double par0[Npar] = {5, 5, -0.1, 100, 30, 10};; 111 ; 112 // create before the parameter settings in order to fix or set range on them; 113 fitter.Config().SetParamsSettings(6, par0);; 114 // fix 5-th parameter; 115 fitter.Config().ParSettings(4).Fix();; 116 // set limits on ",MatchSource.WIKI,doc/master/combinedFit_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8C_source.html
Security,access,access,"describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::DataRange::SetRangevoid SetRange(unsigned int icoord, double xmin, double xmax)set a range [xmin,xmax] for the new coordinate icoord If more range exists for other coordinates,...Definition DataRange.cxx:124; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::SetParamsSettingsvoid SetParamsSettings(unsigned int npar, const double *params, const double *vstep=nullptr)set the parameter settings from number of parameters and a vector of values and optionally step value...Definition FitConfig.cxx:135; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Fit::ParameterSettings::SetLimitsvoid Se",MatchSource.WIKI,doc/master/combinedFit_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8C_source.html
Usability,simpl,simple,"ction class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::SetRangevirtual void SetRange(Double_t xmin, Double_t xmax)Initialize the upper and lower bounds to draw the function.Definition TF1.cxx:3528; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetFitResultvirtual void SetFitResult(const ROOT::Fit::FitResult &result, const Int_t *indpar=nullptr)Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (...Definition TF1.cxx:3355; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TH1.h:244; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; c1return c1Definition legend1.C:41; f1TF1 * f1Definition legend1.C:11; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; combinedFitDefinition combinedFit.py:1; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28. tutorialsfitcombinedFit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/combinedFit_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8C_source.html
Availability,error,error,"er.Config().SetMinimizer(""Minuit2"", ""Migrad""); ; # we can't pass the Python object globalChi2 directly to FitFCN.; # It needs to be wrapped in a ROOT::Math::Functor.; globalChi2Functor = ROOT.Math.Functor(globalChi2, 6); ; # fit FCN function; # (specify optionally data size and flag to indicate that is a chi2 fit); fitter.FitFCN(globalChi2Functor, 0, dataB.Size() + dataSB.Size(), True); result = fitter.Result(); result.Print(ROOT.std.cout); ; c1 = ROOT.TCanvas(""Simfit"", ""Simultaneous fit of two histograms"", 10, 10, 700, 700); c1.Divide(1, 2); c1.cd(1); ROOT.gStyle.SetOptFit(1111); ; fB.SetFitResult(result, iparB); fB.SetRange(rangeB().first, rangeB().second); fB.SetLineColor(ROOT.kBlue); hB.GetListOfFunctions().Add(fB); hB.Draw(); ; c1.cd(2); fSB.SetFitResult(result, iparSB); fSB.SetRange(rangeSB().first, rangeSB().second); fSB.SetLineColor(ROOT.kRed); hSB.GetListOfFunctions().Add(fSB); hSB.Draw(); ; c1.SaveAs(""combinedFit.png""); ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Math::FunctorDocumentation for class Functor class.Definition Functor.h:47; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; object; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; TMatrixTAutoloadOps::AddTMatrixT< Element > & Add(TMatrixT< Element > &target, Element scalar, const TMatrixT< Element > &source)Modify addition: target += scalar * ",MatchSource.WIKI,doc/master/combinedFit_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8py.html
Integrability,wrap,wrapped," ROOT.Fit.BinData(opt, rangeB); ROOT.Fit.FillData(dataB, hB); ; rangeSB = ROOT.Fit.DataRange(); rangeSB.SetRange(10, 50); dataSB = ROOT.Fit.BinData(opt, rangeSB); ROOT.Fit.FillData(dataSB, hSB); ; chi2_B = ROOT.Fit.Chi2Function(dataB, wfB); chi2_SB = ROOT.Fit.Chi2Function(dataSB, wfSB); ; globalChi2 = GlobalChi2(chi2_B, chi2_SB); ; fitter = ROOT.Fit.Fitter(); ; Npar = 6; par0 = np.array([5, 5, -0.1, 100, 30, 10]); ; # create before the parameter settings in order to fix or set range on them; fitter.Config().SetParamsSettings(6, par0); # fix 5-th parameter; fitter.Config().ParSettings(4).Fix(); # set limits on the third and 4-th parameter; fitter.Config().ParSettings(2).SetLimits(-10, -1.0e-4); fitter.Config().ParSettings(3).SetLimits(0, 10000); fitter.Config().ParSettings(3).SetStepSize(5); ; fitter.Config().MinimizerOptions().SetPrintLevel(0); fitter.Config().SetMinimizer(""Minuit2"", ""Migrad""); ; # we can't pass the Python object globalChi2 directly to FitFCN.; # It needs to be wrapped in a ROOT::Math::Functor.; globalChi2Functor = ROOT.Math.Functor(globalChi2, 6); ; # fit FCN function; # (specify optionally data size and flag to indicate that is a chi2 fit); fitter.FitFCN(globalChi2Functor, 0, dataB.Size() + dataSB.Size(), True); result = fitter.Result(); result.Print(ROOT.std.cout); ; c1 = ROOT.TCanvas(""Simfit"", ""Simultaneous fit of two histograms"", 10, 10, 700, 700); c1.Divide(1, 2); c1.cd(1); ROOT.gStyle.SetOptFit(1111); ; fB.SetFitResult(result, iparB); fB.SetRange(rangeB().first, rangeB().second); fB.SetLineColor(ROOT.kBlue); hB.GetListOfFunctions().Add(fB); hB.Draw(); ; c1.cd(2); fSB.SetFitResult(result, iparSB); fSB.SetRange(rangeSB().first, rangeSB().second); fSB.SetLineColor(ROOT.kRed); hSB.GetListOfFunctions().Add(fSB); hSB.Draw(); ; c1.SaveAs(""combinedFit.png""); ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::Chi2FCNChi2FCN class for binned fits ",MatchSource.WIKI,doc/master/combinedFit_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8py.html
Performance,perform,perform,"nd exp common parameter; ; # signal + background function; iparSB = np.array(; [; 1, # exp amplitude in S+B histo; 2, # exp common parameter; 3, # Gaussian amplitude; 4, # Gaussian mean; 5, # Gaussian sigma; ],; dtype=np.int32,; ); ; # Create the GlobalCHi2 structure; ; class GlobalChi2(object):; def __init__(self, f1, f2):; self._f1 = f1; self._f2 = f2; ; def __call__(self, par):; # parameter vector is first background (in common 1 and 2) and then is; # signal (only in 2); ; # the zero-copy way to get a numpy array from a double *; par_arr = np.frombuffer(par, dtype=np.float64, count=6); ; p1 = par_arr[iparB]; p2 = par_arr[iparSB]; ; return self._f1(p1) + self._f2(p2); ; ; hB = ROOT.TH1D(""hB"", ""histo B"", 100, 0, 100); hSB = ROOT.TH1D(""hSB"", ""histo S+B"", 100, 0, 100); ; fB = ROOT.TF1(""fB"", ""expo"", 0, 100); fB.SetParameters(1, -0.05); hB.FillRandom(""fB""); ; fS = ROOT.TF1(""fS"", ""gaus"", 0, 100); fS.SetParameters(1, 30, 5); ; hSB.FillRandom(""fB"", 2000); hSB.FillRandom(""fS"", 1000); ; # perform now global fit; ; fSB = ROOT.TF1(""fSB"", ""expo + gaus(2)"", 0, 100); ; wfB = ROOT.Math.WrappedMultiTF1(fB, 1); wfSB = ROOT.Math.WrappedMultiTF1(fSB, 1); ; opt = ROOT.Fit.DataOptions(); rangeB = ROOT.Fit.DataRange(); # set the data range; rangeB.SetRange(10, 90); dataB = ROOT.Fit.BinData(opt, rangeB); ROOT.Fit.FillData(dataB, hB); ; rangeSB = ROOT.Fit.DataRange(); rangeSB.SetRange(10, 50); dataSB = ROOT.Fit.BinData(opt, rangeSB); ROOT.Fit.FillData(dataSB, hSB); ; chi2_B = ROOT.Fit.Chi2Function(dataB, wfB); chi2_SB = ROOT.Fit.Chi2Function(dataSB, wfSB); ; globalChi2 = GlobalChi2(chi2_B, chi2_SB); ; fitter = ROOT.Fit.Fitter(); ; Npar = 6; par0 = np.array([5, 5, -0.1, 100, 30, 10]); ; # create before the parameter settings in order to fix or set range on them; fitter.Config().SetParamsSettings(6, par0); # fix 5-th parameter; fitter.Config().ParSettings(4).Fix(); # set limits on the third and 4-th parameter; fitter.Config().ParSettings(2).SetLimits(-10, -1.0e-4); fitter.Config().ParSetting",MatchSource.WIKI,doc/master/combinedFit_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8py.html
Usability,simpl,simple,"e); result = fitter.Result(); result.Print(ROOT.std.cout); ; c1 = ROOT.TCanvas(""Simfit"", ""Simultaneous fit of two histograms"", 10, 10, 700, 700); c1.Divide(1, 2); c1.cd(1); ROOT.gStyle.SetOptFit(1111); ; fB.SetFitResult(result, iparB); fB.SetRange(rangeB().first, rangeB().second); fB.SetLineColor(ROOT.kBlue); hB.GetListOfFunctions().Add(fB); hB.Draw(); ; c1.cd(2); fSB.SetFitResult(result, iparSB); fSB.SetRange(rangeSB().first, rangeSB().second); fSB.SetLineColor(ROOT.kRed); hSB.GetListOfFunctions().Add(fSB); hSB.Draw(); ; c1.SaveAs(""combinedFit.png""); ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Math::FunctorDocumentation for class Functor class.Definition Functor.h:47; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; object; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; TMatrixTAutoloadOps::AddTMatrixT< Element > & Add(TMatrixT< Element > &target, Element scalar, const TMatrixT< Element > &source)Modify addition: target += scalar * source.Definition TMatrixT.cxx:2936; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; AuthorJonas Rembser, Lorenzo Moneta (C++ version) ; Definition in file combinedFit.py. tutorialsfitcombinedFit.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/combinedFit_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8py.html
Availability,error,error,"Chi2 directly to FitFCN.; 108# It needs to be wrapped in a ROOT::Math::Functor.; 109globalChi2Functor = ROOT.Math.Functor(globalChi2, 6); 110 ; 111# fit FCN function; 112# (specify optionally data size and flag to indicate that is a chi2 fit); 113fitter.FitFCN(globalChi2Functor, 0, dataB.Size() + dataSB.Size(), True); 114result = fitter.Result(); 115result.Print(ROOT.std.cout); 116 ; 117c1 = ROOT.TCanvas(""Simfit"", ""Simultaneous fit of two histograms"", 10, 10, 700, 700); 118c1.Divide(1, 2); 119c1.cd(1); 120ROOT.gStyle.SetOptFit(1111); 121 ; 122fB.SetFitResult(result, iparB); 123fB.SetRange(rangeB().first, rangeB().second); 124fB.SetLineColor(ROOT.kBlue); 125hB.GetListOfFunctions().Add(fB); 126hB.Draw(); 127 ; 128c1.cd(2); 129fSB.SetFitResult(result, iparSB); 130fSB.SetRange(rangeSB().first, rangeSB().second); 131fSB.SetLineColor(ROOT.kRed); 132hSB.GetListOfFunctions().Add(fSB); 133hSB.Draw(); 134 ; 135c1.SaveAs(""combinedFit.png""); ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Math::FunctorDocumentation for class Functor class.Definition Functor.h:47; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; object; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; TMatrixTAutoloadOps::AddTMatrixT< Element > & Add(TMatrixT< Element > &target, Element scalar, const TMatrixT< Element > &source)Modify addition: target += scalar * ",MatchSource.WIKI,doc/master/combinedFit_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8py_source.html
Integrability,wrap,wrapped,"B = ROOT.Fit.DataRange(); 81rangeSB.SetRange(10, 50); 82dataSB = ROOT.Fit.BinData(opt, rangeSB); 83ROOT.Fit.FillData(dataSB, hSB); 84 ; 85chi2_B = ROOT.Fit.Chi2Function(dataB, wfB); 86chi2_SB = ROOT.Fit.Chi2Function(dataSB, wfSB); 87 ; 88globalChi2 = GlobalChi2(chi2_B, chi2_SB); 89 ; 90fitter = ROOT.Fit.Fitter(); 91 ; 92Npar = 6; 93par0 = np.array([5, 5, -0.1, 100, 30, 10]); 94 ; 95# create before the parameter settings in order to fix or set range on them; 96fitter.Config().SetParamsSettings(6, par0); 97# fix 5-th parameter; 98fitter.Config().ParSettings(4).Fix(); 99# set limits on the third and 4-th parameter; 100fitter.Config().ParSettings(2).SetLimits(-10, -1.0e-4); 101fitter.Config().ParSettings(3).SetLimits(0, 10000); 102fitter.Config().ParSettings(3).SetStepSize(5); 103 ; 104fitter.Config().MinimizerOptions().SetPrintLevel(0); 105fitter.Config().SetMinimizer(""Minuit2"", ""Migrad""); 106 ; 107# we can't pass the Python object globalChi2 directly to FitFCN.; 108# It needs to be wrapped in a ROOT::Math::Functor.; 109globalChi2Functor = ROOT.Math.Functor(globalChi2, 6); 110 ; 111# fit FCN function; 112# (specify optionally data size and flag to indicate that is a chi2 fit); 113fitter.FitFCN(globalChi2Functor, 0, dataB.Size() + dataSB.Size(), True); 114result = fitter.Result(); 115result.Print(ROOT.std.cout); 116 ; 117c1 = ROOT.TCanvas(""Simfit"", ""Simultaneous fit of two histograms"", 10, 10, 700, 700); 118c1.Divide(1, 2); 119c1.cd(1); 120ROOT.gStyle.SetOptFit(1111); 121 ; 122fB.SetFitResult(result, iparB); 123fB.SetRange(rangeB().first, rangeB().second); 124fB.SetLineColor(ROOT.kBlue); 125hB.GetListOfFunctions().Add(fB); 126hB.Draw(); 127 ; 128c1.cd(2); 129fSB.SetFitResult(result, iparSB); 130fSB.SetRange(rangeSB().first, rangeSB().second); 131fSB.SetLineColor(ROOT.kRed); 132hSB.GetListOfFunctions().Add(fSB); 133hSB.Draw(); 134 ; 135c1.SaveAs(""combinedFit.png""); ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally ",MatchSource.WIKI,doc/master/combinedFit_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8py_source.html
Performance,perform,perform,"; 25 2, # exp common parameter; 26 3, # Gaussian amplitude; 27 4, # Gaussian mean; 28 5, # Gaussian sigma; 29 ],; 30 dtype=np.int32,; 31); 32 ; 33# Create the GlobalCHi2 structure; 34 ; 35class GlobalChi2(object):; 36 def __init__(self, f1, f2):; 37 self._f1 = f1; 38 self._f2 = f2; 39 ; 40 def __call__(self, par):; 41 # parameter vector is first background (in common 1 and 2) and then is; 42 # signal (only in 2); 43 ; 44 # the zero-copy way to get a numpy array from a double *; 45 par_arr = np.frombuffer(par, dtype=np.float64, count=6); 46 ; 47 p1 = par_arr[iparB]; 48 p2 = par_arr[iparSB]; 49 ; 50 return self._f1(p1) + self._f2(p2); 51 ; 52 ; 53hB = ROOT.TH1D(""hB"", ""histo B"", 100, 0, 100); 54hSB = ROOT.TH1D(""hSB"", ""histo S+B"", 100, 0, 100); 55 ; 56fB = ROOT.TF1(""fB"", ""expo"", 0, 100); 57fB.SetParameters(1, -0.05); 58hB.FillRandom(""fB""); 59 ; 60fS = ROOT.TF1(""fS"", ""gaus"", 0, 100); 61fS.SetParameters(1, 30, 5); 62 ; 63hSB.FillRandom(""fB"", 2000); 64hSB.FillRandom(""fS"", 1000); 65 ; 66# perform now global fit; 67 ; 68fSB = ROOT.TF1(""fSB"", ""expo + gaus(2)"", 0, 100); 69 ; 70wfB = ROOT.Math.WrappedMultiTF1(fB, 1); 71wfSB = ROOT.Math.WrappedMultiTF1(fSB, 1); 72 ; 73opt = ROOT.Fit.DataOptions(); 74rangeB = ROOT.Fit.DataRange(); 75# set the data range; 76rangeB.SetRange(10, 90); 77dataB = ROOT.Fit.BinData(opt, rangeB); 78ROOT.Fit.FillData(dataB, hB); 79 ; 80rangeSB = ROOT.Fit.DataRange(); 81rangeSB.SetRange(10, 50); 82dataSB = ROOT.Fit.BinData(opt, rangeSB); 83ROOT.Fit.FillData(dataSB, hSB); 84 ; 85chi2_B = ROOT.Fit.Chi2Function(dataB, wfB); 86chi2_SB = ROOT.Fit.Chi2Function(dataSB, wfSB); 87 ; 88globalChi2 = GlobalChi2(chi2_B, chi2_SB); 89 ; 90fitter = ROOT.Fit.Fitter(); 91 ; 92Npar = 6; 93par0 = np.array([5, 5, -0.1, 100, 30, 10]); 94 ; 95# create before the parameter settings in order to fix or set range on them; 96fitter.Config().SetParamsSettings(6, par0); 97# fix 5-th parameter; 98fitter.Config().ParSettings(4).Fix(); 99# set limits on the third and 4-th parameter; 100fitt",MatchSource.WIKI,doc/master/combinedFit_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8py_source.html
Usability,simpl,simple,"ataSB.Size(), True); 114result = fitter.Result(); 115result.Print(ROOT.std.cout); 116 ; 117c1 = ROOT.TCanvas(""Simfit"", ""Simultaneous fit of two histograms"", 10, 10, 700, 700); 118c1.Divide(1, 2); 119c1.cd(1); 120ROOT.gStyle.SetOptFit(1111); 121 ; 122fB.SetFitResult(result, iparB); 123fB.SetRange(rangeB().first, rangeB().second); 124fB.SetLineColor(ROOT.kBlue); 125hB.GetListOfFunctions().Add(fB); 126hB.Draw(); 127 ; 128c1.cd(2); 129fSB.SetFitResult(result, iparSB); 130fSB.SetRange(rangeSB().first, rangeSB().second); 131fSB.SetLineColor(ROOT.kRed); 132hSB.GetListOfFunctions().Add(fSB); 133hSB.Draw(); 134 ; 135c1.SaveAs(""combinedFit.png""); ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Math::FunctorDocumentation for class Functor class.Definition Functor.h:47; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; object; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; TMatrixTAutoloadOps::AddTMatrixT< Element > & Add(TMatrixT< Element > &target, Element scalar, const TMatrixT< Element > &source)Modify addition: target += scalar * source.Definition TMatrixT.cxx:2936; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28. tutorialsfitcombinedFit.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/combinedFit_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/combinedFit_8py_source.html
Integrability,depend,dependency,". ROOT: core/zip/inc/Compression.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions |; Variables ; Compression.h File Reference. #include ""RtypesCore.h""; #include ""ROOT/RConfig.hxx""; #include <string>. Include dependency graph for Compression.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  ROOT::RCompressionSetting::EAlgorithm;  ; struct  ROOT::RCompressionSetting::EDefaults;  ; struct  ROOT::RCompressionSetting::ELevel;  ; struct  ROOT::RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Functions; int ROOT::CompressionSettings (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int ROOT::CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel) R__DEPRECATED(6;  ; enum ROOT::R__DEPRECATED (6, 34, ""Use RCompressionSetting::EAlgorithm instead"") ECompressionAlgorithm;  . Variables; int Use the overload accepting RCompressionSetting::EAlgorithm ROOT::instead;  . corezipincCompression.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/Compression_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Compression_8h.html
Modifiability,variab,variable,". ROOT: core/zip/inc/Compression.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions |; Variables ; Compression.h File Reference. #include ""RtypesCore.h""; #include ""ROOT/RConfig.hxx""; #include <string>. Include dependency graph for Compression.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  ROOT::RCompressionSetting::EAlgorithm;  ; struct  ROOT::RCompressionSetting::EDefaults;  ; struct  ROOT::RCompressionSetting::ELevel;  ; struct  ROOT::RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Functions; int ROOT::CompressionSettings (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int ROOT::CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel) R__DEPRECATED(6;  ; enum ROOT::R__DEPRECATED (6, 34, ""Use RCompressionSetting::EAlgorithm instead"") ECompressionAlgorithm;  . Variables; int Use the overload accepting RCompressionSetting::EAlgorithm ROOT::instead;  . corezipincCompression.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/Compression_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Compression_8h.html
Availability,avail,available," to the documentation of this file. 1// @(#)root/zip:$Id$; 2// Author: David Dagenhart May 2011; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_Compression; 13#define ROOT_Compression; 14 ; 15#include ""RtypesCore.h""; 16#include ""ROOT/RConfig.hxx""; 17 ; 18#include <string>; 19 ; 20namespace ROOT {; 21 ; 22/// The global settings depend on a global variable named R__ZipMode which can be; 23/// modified by a global function named R__SetZipMode. Both are defined in Bits.h.; 24///; 25/// - The default is to use the global setting and the default of the global; 26/// setting is to use the ZLIB compression algorithm.; 27/// - The LZMA algorithm (from the XZ package) is also available. The LZMA; 28/// compression usually results in greater compression factors, but takes; 29/// more CPU time and memory when compressing. LZMA memory usage is particularly; 30/// high for compression levels 8 and 9.; 31/// - Finally, the LZ4 package results in worse compression ratios; 32/// than ZLIB but achieves much faster decompression rates.; 33///; 34/// The current algorithms support level 1 to 9. The higher the level the greater; 35/// the compression and more CPU time and memory resources used during compression.; 36/// Level 0 means no compression.; 37///; 38/// Recommendation for the compression algorithm's levels:; 39/// - ZLIB is recommended to be used with compression level 1 [101]; 40/// - LZMA is recommended to be used with compression level 7-8 (higher is better,; 41/// since in the case of LZMA we don't care about compression/decompression speed); 42/// [207 - 208]; 43/// - LZ4 is recommended to be used with compression level 4 [404]; ",MatchSource.WIKI,doc/master/Compression_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Compression_8h_source.html
Integrability,depend,depend,". ROOT: core/zip/inc/Compression.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Compression.h. Go to the documentation of this file. 1// @(#)root/zip:$Id$; 2// Author: David Dagenhart May 2011; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_Compression; 13#define ROOT_Compression; 14 ; 15#include ""RtypesCore.h""; 16#include ""ROOT/RConfig.hxx""; 17 ; 18#include <string>; 19 ; 20namespace ROOT {; 21 ; 22/// The global settings depend on a global variable named R__ZipMode which can be; 23/// modified by a global function named R__SetZipMode. Both are defined in Bits.h.; 24///; 25/// - The default is to use the global setting and the default of the global; 26/// setting is to use the ZLIB compression algorithm.; 27/// - The LZMA algorithm (from the XZ package) is also available. The LZMA; 28/// compression usually results in greater compression factors, but takes; 29/// more CPU time and memory when compressing. LZMA memory usage is particularly; 30/// high for compression levels 8 and 9.; 31/// - Finally, the LZ4 package results in worse compression ratios; 32/// than ZLIB but achieves much faster decompression rates.; 33///; 34/// The current algorithms support level 1 to 9. The higher the level the greater; 35/// the compression and more CPU time and memory resources used during compression.; 36/// Level 0 means no compression.; 37///; 38/// Recommendation for the compression algorithm's levels:; 39/// - ZLIB is recommended to be used with compression level 1 [101]; 40/// - LZMA is recommended to be used with compression level 7-8 (higher is better,; 41/// since in the case of LZ",MatchSource.WIKI,doc/master/Compression_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Compression_8h_source.html
Modifiability,variab,variable,". ROOT: core/zip/inc/Compression.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Compression.h. Go to the documentation of this file. 1// @(#)root/zip:$Id$; 2// Author: David Dagenhart May 2011; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_Compression; 13#define ROOT_Compression; 14 ; 15#include ""RtypesCore.h""; 16#include ""ROOT/RConfig.hxx""; 17 ; 18#include <string>; 19 ; 20namespace ROOT {; 21 ; 22/// The global settings depend on a global variable named R__ZipMode which can be; 23/// modified by a global function named R__SetZipMode. Both are defined in Bits.h.; 24///; 25/// - The default is to use the global setting and the default of the global; 26/// setting is to use the ZLIB compression algorithm.; 27/// - The LZMA algorithm (from the XZ package) is also available. The LZMA; 28/// compression usually results in greater compression factors, but takes; 29/// more CPU time and memory when compressing. LZMA memory usage is particularly; 30/// high for compression levels 8 and 9.; 31/// - Finally, the LZ4 package results in worse compression ratios; 32/// than ZLIB but achieves much faster decompression rates.; 33///; 34/// The current algorithms support level 1 to 9. The higher the level the greater; 35/// the compression and more CPU time and memory resources used during compression.; 36/// Level 0 means no compression.; 37///; 38/// Recommendation for the compression algorithm's levels:; 39/// - ZLIB is recommended to be used with compression level 1 [101]; 40/// - LZMA is recommended to be used with compression level 7-8 (higher is better,; 41/// since in the case of LZ",MatchSource.WIKI,doc/master/Compression_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Compression_8h_source.html
Availability,error,errors,"de ""TH1.h""; #include ""TVirtualFitter.h""; #include ""TRandom.h""; ; void ConfidenceIntervals(); {; TCanvas *myc = new TCanvas(""myc"",; ""Confidence intervals on the fitted function"",1000, 500);; myc->Divide(3,1);; ; //### 1. A graph; //Create and fill a graph; int ngr = 100;; TGraph *gr = new TGraph(ngr);; gr->SetName(""GraphNoError"");; double x, y;; int i;; for (i=0; i<ngr; i++){; x = gRandom->Uniform(-1, 1);; y = -1 + 2*x + gRandom->Gaus(0, 1);; gr->SetPoint(i, x, y);; }; //Create the fitting function; TF1 *fpol = new TF1(""fpol"", ""pol1"", -1, 1);; fpol->SetLineWidth(2);; gr->Fit(fpol, ""Q"");; ; /*Create a TGraphErrors to hold the confidence intervals*/; TGraphErrors *grint = new TGraphErrors(ngr);; grint->SetTitle(""Fitted line with .95 conf. band"");; for (i=0; i<ngr; i++); grint->SetPoint(i, gr->GetX()[i], 0);; /*Compute the confidence intervals at the x points of the created graph*/; (TVirtualFitter::GetFitter())->GetConfidenceIntervals(grint);; //Now the ""grint"" graph contains function values as its y-coordinates; //and confidence intervals as the errors on these coordinates; //Draw the graph, the function and the confidence intervals; myc->cd(1);; grint->SetLineColor(kRed);; grint->Draw(""ap"");; gr->SetMarkerStyle(5);; gr->SetMarkerSize(0.7);; gr->Draw(""psame"");; ; //### 2. A histogram; myc->cd(2);; //Create, fill and fit a histogram; int nh=5000;; TH1D *h = new TH1D(""h"",; ""Fitted Gaussian with .95 conf.band"", 100, -3, 3);; h->FillRandom(""gaus"", nh);; TF1 *f = new TF1(""fgaus"", ""gaus"", -3, 3);; f->SetLineWidth(2);; h->Fit(f, ""Q"");; h->Draw();; ; /*Create a histogram to hold the confidence intervals*/; TH1D *hint = new TH1D(""hint"",; ""Fitted Gaussian with .95 conf.band"", 100, -3, 3);; (TVirtualFitter::GetFitter())->GetConfidenceIntervals(hint);; //Now the ""hint"" histogram has the fitted function values as the; //bin contents and the confidence intervals as bin errors; hint->SetStats(false);; hint->SetFillColor(2);; hint->Draw(""e3 same"");; ; //### 3. A 2d graph; //Create an",MatchSource.WIKI,doc/master/ConfidenceIntervals_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/ConfidenceIntervals_8C.html
Availability,error,errors,"; 21{; 22 TCanvas *myc = new TCanvas(""myc"",; 23 ""Confidence intervals on the fitted function"",1000, 500);; 24 myc->Divide(3,1);; 25 ; 26//### 1. A graph; 27 //Create and fill a graph; 28 int ngr = 100;; 29 TGraph *gr = new TGraph(ngr);; 30 gr->SetName(""GraphNoError"");; 31 double x, y;; 32 int i;; 33 for (i=0; i<ngr; i++){; 34 x = gRandom->Uniform(-1, 1);; 35 y = -1 + 2*x + gRandom->Gaus(0, 1);; 36 gr->SetPoint(i, x, y);; 37 }; 38 //Create the fitting function; 39 TF1 *fpol = new TF1(""fpol"", ""pol1"", -1, 1);; 40 fpol->SetLineWidth(2);; 41 gr->Fit(fpol, ""Q"");; 42 ; 43 /*Create a TGraphErrors to hold the confidence intervals*/; 44 TGraphErrors *grint = new TGraphErrors(ngr);; 45 grint->SetTitle(""Fitted line with .95 conf. band"");; 46 for (i=0; i<ngr; i++); 47 grint->SetPoint(i, gr->GetX()[i], 0);; 48 /*Compute the confidence intervals at the x points of the created graph*/; 49 (TVirtualFitter::GetFitter())->GetConfidenceIntervals(grint);; 50 //Now the ""grint"" graph contains function values as its y-coordinates; 51 //and confidence intervals as the errors on these coordinates; 52 //Draw the graph, the function and the confidence intervals; 53 myc->cd(1);; 54 grint->SetLineColor(kRed);; 55 grint->Draw(""ap"");; 56 gr->SetMarkerStyle(5);; 57 gr->SetMarkerSize(0.7);; 58 gr->Draw(""psame"");; 59 ; 60//### 2. A histogram; 61 myc->cd(2);; 62 //Create, fill and fit a histogram; 63 int nh=5000;; 64 TH1D *h = new TH1D(""h"",; 65 ""Fitted Gaussian with .95 conf.band"", 100, -3, 3);; 66 h->FillRandom(""gaus"", nh);; 67 TF1 *f = new TF1(""fgaus"", ""gaus"", -3, 3);; 68 f->SetLineWidth(2);; 69 h->Fit(f, ""Q"");; 70 h->Draw();; 71 ; 72 /*Create a histogram to hold the confidence intervals*/; 73 TH1D *hint = new TH1D(""hint"",; 74 ""Fitted Gaussian with .95 conf.band"", 100, -3, 3);; 75 (TVirtualFitter::GetFitter())->GetConfidenceIntervals(hint);; 76 //Now the ""hint"" histogram has the fitted function values as the; 77 //bin contents and the confidence intervals as bin errors; 78 hint->SetStats(false);; 79",MatchSource.WIKI,doc/master/ConfidenceIntervals_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/ConfidenceIntervals_8C_source.html
Energy Efficiency,meter,meters,"ed in as: Z = -0.500000; Graph: 3 -- 93 Elements; Graph: 4 -- 93 Elements; Z-Level Passed in as: Z = -0.700000; Graph: 5 -- 65 Elements; Graph: 6 -- 65 Elements; Z-Level Passed in as: Z = 0.100000; Graph: 7 -- 147 Elements; Graph: 8 -- 147 Elements; Z-Level Passed in as: Z = 0.400000; Graph: 9 -- 107 Elements; Graph: 10 -- 107 Elements; Z-Level Passed in as: Z = 0.800000; Graph: 11 -- 49 Elements; Graph: 12 -- 49 Elements; ; ; Extracted 6 Contours and 12 Graphs ; (TCanvas *) 0x5649202575c0; ContourList.C; ; Double_t SawTooth(Double_t x, Double_t WaveLen);; ; TCanvas *ContourList(){; ; const Double_t PI = TMath::Pi();; ; TCanvas* c = new TCanvas(""c"",""Contour List"",0,0,600,600);; c->SetRightMargin(0.15);; c->SetTopMargin(0.15);; ; Int_t i, j;; ; Int_t nZsamples = 80;; Int_t nPhiSamples = 80;; ; Double_t HofZwavelength = 4.0; // 4 meters; Double_t dZ = HofZwavelength/(Double_t)(nZsamples - 1);; Double_t dPhi = 2*PI/(Double_t)(nPhiSamples - 1);; ; TArrayD z(nZsamples);; TArrayD HofZ(nZsamples);; TArrayD phi(nPhiSamples);; TArrayD FofPhi(nPhiSamples);; ; // Discretized Z and Phi Values; for ( i = 0; i < nZsamples; i++) {; z[i] = (i)*dZ - HofZwavelength/2.0;; HofZ[i] = SawTooth(z[i], HofZwavelength);; }; ; for(Int_t i=0; i < nPhiSamples; i++){; phi[i] = (i)*dPhi;; FofPhi[i] = sin(phi[i]);; }; ; // Create Histogram; TH2D *HistStreamFn = new TH2D(""HstreamFn"",; ""#splitline{Histogram with negative and positive contents. Six contours are defined.}{It is plotted with options CONT LIST to retrieve the contours points in TGraphs}"",; nZsamples, z[0], z[nZsamples-1], nPhiSamples, phi[0], phi[nPhiSamples-1]);; ; // Load Histogram Data; for (Int_t i = 0; i < nZsamples; i++) {; for(Int_t j = 0; j < nPhiSamples; j++){; HistStreamFn->SetBinContent(i,j, HofZ[i]*FofPhi[j]);; }; }; ; gStyle->SetOptStat(0);; gStyle->SetTitleW(0.99);; gStyle->SetTitleH(0.08);; ; Double_t contours[6];; contours[0] = -0.7;; contours[1] = -0.5;; contours[2] = -0.1;; contours[3] = 0.1;; contours[4] = 0.4;; conto",MatchSource.WIKI,doc/master/ContourList_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/ContourList_8C.html
Safety,avoid,avoid," Int_t TotalConts = conts->GetSize();; ; printf(""TotalConts = %d\n"", TotalConts);; ; for(i = 0; i < TotalConts; i++){; contLevel = (TList*)conts->At(i);; printf(""Contour %d has %d Graphs\n"", i, contLevel->GetSize());; nGraphs += contLevel->GetSize();; }; ; nGraphs = 0;; ; TCanvas* c1 = new TCanvas(""c1"",""Contour List"",610,0,600,600);; c1->SetTopMargin(0.15);; TH2F *hr = new TH2F(""hr"",; ""#splitline{Negative contours are returned first (highest to lowest). Positive contours are returned from}{lowest to highest. On this plot Negative contours are drawn in red and positive contours in blue.}"",; 2, -2, 2, 2, 0, 6.5);; ; hr->Draw();; Double_t xval0, yval0, zval0;; TLatex l;; l.SetTextSize(0.03);; char val[20];; ; for(i = 0; i < TotalConts; i++){; contLevel = (TList*)conts->At(i);; if (i<3) zval0 = contours[2-i];; else zval0 = contours[i];; printf(""Z-Level Passed in as: Z = %f\n"", zval0);; ; // Get first graph from list on curves on this level; curv = (TGraph*)contLevel->First();; for(j = 0; j < contLevel->GetSize(); j++){; curv->GetPoint(0, xval0, yval0);; if (zval0<0) curv->SetLineColor(kRed);; if (zval0>0) curv->SetLineColor(kBlue);; nGraphs ++;; printf(""\tGraph: %d -- %d Elements\n"", nGraphs,curv->GetN());; ; // Draw clones of the graphs to avoid deletions in case the 1st; // pad is redrawn.; gc = (TGraph*)curv->Clone();; gc->Draw(""C"");; ; sprintf(val,""%g"",zval0);; l.DrawLatex(xval0,yval0,val);; curv = (TGraph*)contLevel->After(curv); // Get Next graph; }; }; c1->Update();; printf(""\n\n\tExtracted %d Contours and %d Graphs \n"", TotalConts, nGraphs );; gStyle->SetTitleW(0.);; gStyle->SetTitleH(0.);; return c1;; }; ; ; Double_t SawTooth(Double_t x, Double_t WaveLen){; ; // This function is specific to a sawtooth function with period; // WaveLen, symmetric about x = 0, and with amplitude = 1. Each segment; // is 1/4 of the wavelength.; //; // |; // /\ |; // / \ |; // / \ |; // / \; // /--------\--------/------------; // |\ /; // | \ /; // | \ /; // | \/; //; ; Double_t y;; ",MatchSource.WIKI,doc/master/ContourList_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/ContourList_8C.html
Security,access,access,"ze void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TBranch::SetFilevirtual void SetFile(TFile *file=nullptr)Set file where this branch writes/reads its buffers.Definition TBranch.cxx:2863; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TStringBasic string class.Definition TString.h:139; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::SetBranchStatusvirtual void SetBranchStatus(const char *bname, bool status=true, UInt_t *found=nullptr)Set branch status to Process or DoNotProcess.Definition TTree.cxx:8534; TTree::GetBranchvirtual TBranch * GetBranch(const char *name)Return pointer to the branch with the given name in this tree or its friends.Definition TTree.cxx:5294; TTree::CloneTreevirtual TTree * CloneTree(Long64_t nentries=-1, Option_t *option="""")Create a clone of this tree and copy nentries.Definition TTree.cxx:3139; AuthorRene Brun ; Definition in file copytree2.C. tutorialstreecopytree2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/copytree2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/copytree2_8C.html
Testability,test,test,". ROOT: tutorials/tree/copytree2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. copytree2.C File ReferenceTutorials » Tree tutorials. Detailed Description; Copy a subset of a Tree to a new Tree, one branch in a separate file. ; One branch of the new Tree is written to a separate file The input file has been generated by the program in $ROOTSYS/test/Event with the command Event 1000 1 1 1; ; // Load the library at macro parsing time: we need this to use its content in the code; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; void copytree2(); {; ; TString dir = ""$ROOTSYS/test/Event.root"";; gSystem->ExpandPathName(dir);; const auto filename = gSystem->AccessPathName(dir) ? ""./Event.root"" : ""$ROOTSYS/test/Event.root"";; ; TFile oldfile(filename);; TTree *oldtree;; oldfile.GetObject(""T"", oldtree);; ; // Activate only four of them; for (auto activeBranchName : {""event"", ""fNtrack"", ""fNseg"", ""fH""}) {; oldtree->SetBranchStatus(activeBranchName, 1);; }; ; // Create a new file + a clone of old tree header. Do not copy events; TFile newfile(""small.root"", ""recreate"");; auto newtree = oldtree->CloneTree(0);; ; // Divert branch fH to a separate file and copy all events; newtree->GetBranch(""fH"")->SetFile(""small_fH.root"");; newtree->CopyEntries(oldtree);; ; newtree->Print();; newfile.Write();; }; R__LOAD_LIBRARY#define R__LOAD_LIBRARY(LIBRARY)Definition Rtypes.h:496; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const",MatchSource.WIKI,doc/master/copytree2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/copytree2_8C.html
Security,access,access,"t_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; nentriesint nentriesDefinition THbookFile.cxx:91; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; EventDefinition collection_proxies.C:172; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TStringBasic string class.Definition TString.h:139; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TTree::CloneTreevirtual TTree * CloneTree(Long64_t nentries=-1, Option_t *option="""")Create a clone of this tree and copy nentries.Definition TTree.cxx:3139; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; AuthorRene Brun ; Definition in file copytree3.C. tutorialstreecopytree3.C. ROOT master ",MatchSource.WIKI,doc/master/copytree3_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/copytree3_8C.html
Testability,test,test,". ROOT: tutorials/tree/copytree3.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. copytree3.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ; Only selected entries are copied to the new Tree. The input file has been generated by the program in $ROOTSYS/test/Event with Event 1000 1 99 1; ; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; void copytree3(); {; // Get old file, old tree and set top branch address; TString dir = ""$ROOTSYS/test/Event.root"";; gSystem->ExpandPathName(dir);; const auto filename = gSystem->AccessPathName(dir) ? ""./Event.root"" : ""$ROOTSYS/test/Event.root"";; ; TFile oldfile(filename);; TTree *oldtree;; oldfile.GetObject(""T"", oldtree);; ; const auto nentries = oldtree->GetEntries();; ; Event *event = nullptr;; oldtree->SetBranchAddress(""event"", &event);; ; // Create a new file + a clone of old tree in new file; TFile newfile(""small.root"", ""recreate"");; auto newtree = oldtree->CloneTree(0);; ; for (auto i : ROOT::TSeqI(nentries)) {; oldtree->GetEntry(i);; if (event->GetNtrack() > 605); newtree->Fill();; event->Clear();; }; ; newtree->Print();; newfile.Write();; }; R__LOAD_LIBRARY#define R__LOAD_LIBRARY(LIBRARY)Definition Rtypes.h:496; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; nentriesint nent",MatchSource.WIKI,doc/master/copytree3_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/copytree3_8C.html
Security,access,access,")Definition Rtypes.h:496; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TStringBasic string class.Definition TString.h:139; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::SetBranchStatusvirtual void SetBranchStatus(const char *bname, bool status=true, UInt_t *found=nullptr)Set branch status to Process or DoNotProcess.Definition TTree.cxx:8534; TTree::Printvoid Print(Option_t *option="""") const overridePrint a summary of the tree contents.Definition TTree.cxx:7219; TTree::CloneTreevirtual TTree * CloneTree(Long64_t nentries=-1, Option_t *option="""")Create a clone of this tree and copy nentries.Definition TTree.cxx:3139; AuthorRene Brun ; Definition in file copytree.C. tutorialstreecopytree.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/copytree_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/copytree_8C.html
Testability,test,test,". ROOT: tutorials/tree/copytree.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. copytree.C File ReferenceTutorials » Tree tutorials. Detailed Description; Copy a subset of a Tree to a new Tree ; The input file has been generated by the program in $ROOTSYS/test/Event with Event 1000 1 1 1.; ; // Load the library at macro parsing time: we need this to use its content in the code; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; void copytree(); {; ; TString dir = ""$ROOTSYS/test/Event.root"";; gSystem->ExpandPathName(dir);; const auto filename = gSystem->AccessPathName(dir) ? ""./Event.root"" : ""$ROOTSYS/test/Event.root"";; ; TFile oldfile(filename);; TTree *oldtree;; oldfile.GetObject(""T"", oldtree);; ; // Deactivate all branches; oldtree->SetBranchStatus(""*"", 0);; ; // Activate only four of them; for (auto activeBranchName : {""event"", ""fNtrack"", ""fNseg"", ""fH""}); oldtree->SetBranchStatus(activeBranchName, 1);; ; // Create a new file + a clone of old tree in new file; TFile newfile(""small.root"", ""recreate"");; auto newtree = oldtree->CloneTree();; ; newtree->Print();; newfile.Write();; }; R__LOAD_LIBRARY#define R__LOAD_LIBRARY(LIBRARY)Definition Rtypes.h:496; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TFileA ROOT file is an on-disk file, usually with extension ",MatchSource.WIKI,doc/master/copytree_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/copytree_8C.html
Modifiability,variab,variables,". ROOT: tutorials/tmva/createData.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. createData.C File ReferenceTutorials » TMVA tutorials. Detailed Description; Plot the variables. ; ; ; #include ""TROOT.h""; #include ""TMath.h""; #include ""TTree.h""; #include ""TArrayD.h""; #include ""TStyle.h""; #include ""TFile.h""; #include ""TRandom.h""; #include ""Riostream.h""; #include ""TCanvas.h""; #include ""TMatrixD.h""; #include ""TH2F.h""; #include ""TLegend.h""; #include ""TBranch.h""; #include <vector>; ; void plot( TString fname = ""data.root"", TString var0=""var0"", TString var1=""var1"" ); {; TFile* dataFile = TFile::Open( fname );; ; if (!dataFile) {; cout << ""ERROR: cannot open file: "" << fname << endl;; return;; }; ; TTree *treeS = (TTree*)dataFile->Get(""TreeS"");; TTree *treeB = (TTree*)dataFile->Get(""TreeB"");; ; TCanvas* c = new TCanvas( ""c"", """", 0, 0, 550, 550 );; ; TStyle *TMVAStyle = gROOT->GetStyle(""Plain""); // our style is based on Plain; TMVAStyle->SetOptStat(0);; TMVAStyle->SetPadTopMargin(0.02);; TMVAStyle->SetPadBottomMargin(0.16);; TMVAStyle->SetPadRightMargin(0.03);; TMVAStyle->SetPadLeftMargin(0.15);; TMVAStyle->SetPadGridX(0);; TMVAStyle->SetPadGridY(0);; ; TMVAStyle->SetOptTitle(0);; TMVAStyle->SetTitleW(.4);; TMVAStyle->SetTitleH(.10);; TMVAStyle->SetTitleX(.5);; TMVAStyle->SetTitleY(.9);; TMVAStyle->SetMarkerStyle(20);; TMVAStyle->SetMarkerSize(1.6);; TMVAStyle->cd();; ; ; Float_t xmin = TMath::Min( treeS->GetMinimum( var0 ), treeB->GetMinimum( var0 ) );; Float_t xmax = TMath::Max( treeS->GetMaximum( var0 ), treeB->GetMaximum( var0 ) );; Float_t ymin = TMath::Min( treeS->GetMinimum( var1 ), treeB->GetMinimum( var1 ) );; Float_t ymax = TMath::Max( treeS->GetMaximum( var1 ), treeB->GetMaximum( var1 ) );; ; Int_t nbin = 500;; TH2F* frameS = new TH2F( ""DataS"", ""DataS"", nbin, xmin, xmax, nbin, ymin, ymax );; TH2F* frameB = new TH2F( ""DataB"", ""DataB"", nbin, xmin, xmax, nbin, ymin, ymax );; ; // project trees; treeS->Draw( Form(""%s:%",MatchSource.WIKI,doc/master/createData_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/createData_8C.html
Safety,sanity check,sanity check,">GetYaxis()->SetTitle( var1 );; ; frameS->SetLabelSize( 0.04, ""X"" );; frameS->SetLabelSize( 0.04, ""Y"" );; frameS->SetTitleSize( 0.05, ""X"" );; frameS->SetTitleSize( 0.05, ""Y"" );; ; // and plot; frameS->Draw();; frameB->Draw( ""same"" );; ; // Draw legend; TLegend *legend = new TLegend( 1 - c->GetRightMargin() - 0.32, 1 - c->GetTopMargin() - 0.12,; 1 - c->GetRightMargin(), 1 - c->GetTopMargin() );; legend->SetFillStyle( 1 );; legend->AddEntry(frameS,""Signal"",""p"");; legend->AddEntry(frameB,""Background"",""p"");; legend->Draw(""same"");; legend->SetBorderSize(1);; legend->SetMargin( 0.3 );; ; }; ; TMatrixD* produceSqrtMat( const TMatrixD& covMat ); {; Double_t sum = 0;; Int_t size = covMat.GetNrows();;; TMatrixD* sqrtMat = new TMatrixD( size, size );; ; for (Int_t i=0; i< size; i++) {; ; sum = 0;; for (Int_t j=0;j< i; j++) sum += (*sqrtMat)(i,j) * (*sqrtMat)(i,j);; ; (*sqrtMat)(i,i) = TMath::Sqrt(TMath::Abs(covMat(i,i) - sum));; ; for (Int_t k=i+1 ;k<size; k++) {; ; sum = 0;; for (Int_t l=0; l<i; l++) sum += (*sqrtMat)(k,l) * (*sqrtMat)(i,l);; ; (*sqrtMat)(k,i) = (covMat(k,i) - sum) / (*sqrtMat)(i,i);; ; }; }; return sqrtMat;; }; ; void getGaussRnd( TArrayD& v, const TMatrixD& sqrtMat, TRandom& R ); {; // generate ""size"" correlated Gaussian random numbers; ; // sanity check; const Int_t size = sqrtMat.GetNrows();; if (size != v.GetSize()); cout << ""<getGaussRnd> too short input vector: "" << size << "" "" << v.GetSize() << endl;; ; Double_t* tmpVec = new Double_t[size];; ; for (Int_t i=0; i<size; i++) {; Double_t x, y, z;; y = R.Rndm();; z = R.Rndm();; x = 2*TMath::Pi()*z;; tmpVec[i] = TMath::Sin(x) * TMath::Sqrt(-2.0*TMath::Log(y));; }; ; for (Int_t i=0; i<size; i++) {; v[i] = 0;; for (Int_t j=0; j<=i; j++) v[i] += sqrtMat(i,j) * tmpVec[j];; }; ; delete[] tmpVec;; }; ; // create the data; void create_lin_Nvar_withFriend(Int_t N = 2000); {; const Int_t nvar = 4;; const Int_t nvar2 = 1;; Float_t xvar[nvar];; ; // output file; TFile* dataFile = TFile::Open( ""data.root"", ""RECREATE"" ",MatchSource.WIKI,doc/master/createData_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/createData_8C.html
Testability,log,logarithm,"rrent directory.Definition TTree.cxx:9753; ROOT::VecOps::cosRVec< PromoteType< T > > cos(const RVec< T > &v)Definition RVec.hxx:1852; ROOT::VecOps::acosRVec< PromoteType< T > > acos(const RVec< T > &v)Definition RVec.hxx:1855; ROOT::VecOps::sinRVec< PromoteType< T > > sin(const RVec< T > &v)Definition RVec.hxx:1851; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMVA_SOFIE_GNN_Parser.tmptmpDefinition TMVA_SOFIE_GNN_Parser.py:196; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169; TMath::GausDouble_t Gaus(Double_t x, Double_t mean=0, Double_t sigma=1, Bool_t norm=kFALSE)Calculates a gaussian function with mean and sigma.Definition TMath.cxx:471; TMath::NintInt_t Nint(T x)Round to nearest integer. Rounds half integers to the nearest even integer.Definition TMath.h:693; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::DegToRadconstexpr Double_t DegToRad()Conversion from degree to radian: .Definition TMath.h:79; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; v@ vDefinition rootcling_impl.cxx:3699; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; AuthorAndreas Hoecker ; Definition in file createData.C. tutorialstmvacreateData.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/createData_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/createData_8C.html
Usability,clear,clear," cout << ""background covariance matrix: "" << endl;; covMatB->Print();; ; // produce the square-root matrix; TMatrixD* sqrtMatS = produceSqrtMat( *covMatS );; TMatrixD* sqrtMatB = produceSqrtMat( *covMatB );; ; // loop over species; for (Int_t itype=0; itype<2; itype++) {; ; Float_t* x;; TMatrixD* m;; if (itype == 0) { x = xS; m = sqrtMatS; cout << ""- produce signal"" << endl; }; else { x = xB; m = sqrtMatB; cout << ""- produce background"" << endl; }; ; // event loop; TTree* tree = (itype==0) ? treeS : treeB;; for (Int_t i=0; i<N; i++) {; ; if (i%100 == 0) cout << ""... event: "" << i << "" ("" << N << "")"" << endl;; ; Int_t aSize = (Int_t)(gRandom->Rndm()*10); // size of array varies between events; for (Int_t ivar=0; ivar<nvar; ivar++) {; xvar[ivar]->clear();; xvar[ivar]->reserve(aSize);; }; for(Int_t iA = 0; iA<aSize; iA++) {; //for (Int_t ivar=0; ivar<nvar; ivar++) {; getGaussRnd( *v, *m, R );; for (Int_t ivar=0; ivar<nvar; ivar++) xvar[ivar]->push_back((*v)[ivar] + x[ivar]);; //}; }; tree->Fill();; }; }; ; // write trees; treeS->Write();; treeB->Write();; ; treeS->Show(0);; treeB->Show(1);; ; dataFile->Close();; cout << ""created data file: "" << dataFile->GetName() << endl;; ; //plot();; }; ; ; ; // create the data; void create_lin_Nvar_double(); {; Int_t N = 10000;; const Int_t nvar = 4;; Double_t xvar[nvar];; Double_t xvarD[nvar];; Float_t xvarF[nvar];; ; // output file; TFile* dataFile = TFile::Open( ""data.root"", ""RECREATE"" );; ; // create signal and background trees; TTree* treeS = new TTree( ""TreeS"", ""TreeS"", 1 );; TTree* treeB = new TTree( ""TreeB"", ""TreeB"", 1 );; for (Int_t ivar=0; ivar<nvar; ivar++) {; if (ivar<2) {; treeS->Branch( TString(Form( ""var%i"", ivar+1 )).Data(), &xvarD[ivar], TString(Form( ""var%i/D"", ivar+1 )).Data() );; treeB->Branch( TString(Form( ""var%i"", ivar+1 )).Data(), &xvarD[ivar], TString(Form( ""var%i/D"", ivar+1 )).Data() );; }; else {; treeS->Branch( TString(Form( ""var%i"", ivar+1 )).Data(), &xvarF[ivar], TString(Form( ""var%i/F"", ivar+1 )).Data(",MatchSource.WIKI,doc/master/createData_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/createData_8C.html
Modifiability,variab,variable,"6} // namespace TMVA; CudaMatrix.h; CUDACHECK#define CUDACHECK(ans)Definition CudaMatrix.h:34; Device.h; Bool_tbool Bool_tDefinition RtypesCore.h:63; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; indexOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t indexDefinition TGWin32VirtualXProxy.cxx:168; TMVA::DNN::TCudaDeviceBufferTCudaDeviceBuffer.Definition CudaBuffers.h:101; TMVA::DNN::TCudaMatrixTCudaMatrix Class.Definition CudaMatrix.h:103; TMVA::DNN::TCudaMatrix::fElementBufferTCudaDeviceBuffer< AFloat > fElementBufferDefinition CudaMatrix.h:119; TMVA::DNN::TCudaMatrix::TCudaMatrixTCudaMatrix()Definition CudaMatrix.cu:57; TMVA::DNN::TCudaMatrix::InitializeCudavoid InitializeCuda()Initializes all shared devices resource and makes sure that a sufficient number of curand states are ...Definition CudaMatrix.cu:103; TMVA::DNN::TCudaMatrix::fNRowssize_t fNRowsDefinition CudaMatrix.h:117; TMVA::DNN::TCudaMatrix::fNColssize_t fNColsDefinition CudaMatrix.h:118; TMVA::DNN::TCudaMatrix::InitializeCurandStatesvoid InitializeCurandStates()Definition CudaMatrix.cu:140; TMVA::DNN::TDevice::BlockDims2Dstatic dim3 BlockDims2D()Definition Device.h:55; TMVA::DNN::TDevice::GridDims2Dstatic dim3 GridDims2D(int nrows, int ncols)Definition Device.h:74; TMVA::DNN::TDevice::NThreadsstatic int NThreads(const AMatrix &A)Definition Device.h:101; TMatrixTTMatrixT.Definition TMatrixT.h:40; double; nconst Int_t nDefinition legend1.C:16; TMVA::DNN::CurandInitializationKernel__global__ void CurandInitializationKernel(unsigned long long seed, curandState_t *state)Definition CudaMatrix.cu:26; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; mTMarker mDefinition textangle.C:8. tmvatmvasrcDNNArchitecturesCudaCudaMatrix.cu. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/CudaMatrix_8cu_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/CudaMatrix_8cu_source.html
Energy Efficiency,allocate,allocated,"* with all streams and thus qualifies as performance killer. Only used for; 55 * testing.; 56 */; 57template<typename AFloat>; 58class TCudaDeviceReference; 59{; 60private:; 61 ; 62 AFloat * fDevicePointer;; 63 ; 64public:; 65 ; 66 TCudaDeviceReference(AFloat * devicePointer);; 67 ; 68 operator AFloat();; 69 ; 70 void operator=(const TCudaDeviceReference &other);; 71 void operator=(AFloat value);; 72 void operator+=(AFloat value);; 73 void operator-=(AFloat value);; 74};; 75 ; 76//____________________________________________________________________________; 77//; 78// Cuda Matrix; 79//____________________________________________________________________________; 80 ; 81/** TCudaMatrix Class; 82 *; 83 * The TCudaMatrix class represents matrices on a CUDA device. The elements; 84 * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; 85 * the allocation and freeing of the device memory. TCudaMatrices are lightweight; 86 * object, that means on assignment and copy creation only a shallow copy is; 87 * performed and no new element buffer allocated. To perform a deep copy use; 88 * the static Copy method of the TCuda architecture class.; 89 *; 90 * The TCudaDeviceBuffer has an associated cuda stream, on which the data is; 91 * transferred to the device. This stream can be accessed through the; 92 * GetComputeStream member function and used to synchronize computations.; 93 *; 94 * The TCudaMatrix class also holds static references to CUDA resources.; 95 * Those are the cublas handle, a buffer of curand states for the generation; 96 * of random numbers as well as a vector containing ones, which is used for; 97 * summing column matrices using matrix-vector multiplication. The class also; 98 * has a static buffer for returning results from the device.; 99 *; 100 */; 101template<typename AFloat>; 102class TCudaMatrix; 103{; 104public:; 105 ; 106private:; 107 ; 108 static size_t fInstances; ///< Current number of matrix instances.; 109 static cublasHandle_",MatchSource.WIKI,doc/master/CudaMatrix_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/CudaMatrix_8h_source.html
Integrability,synchroniz,synchronization," keep as is; 24#include ""RConfigure.h""; 25 ; 26#include ""cuda.h""; 27#include ""cuda_runtime.h""; 28#include ""cublas_v2.h""; 29#include ""curand_kernel.h""; 30 ; 31#include ""TMatrixT.h""; 32#include ""CudaBuffers.h""; 33 ; 34#define CUDACHECK(ans) {cudaError((ans), __FILE__, __LINE__); }; 35 ; 36namespace TMVA {; 37namespace DNN {; 38 ; 39/** Function to check cuda return code. Taken from; 40 * http://stackoverflow.com/questions/14038589/; 41 */; 42inline void cudaError(cudaError_t code, const char *file, int line, bool abort=true);; 43 ; 44//____________________________________________________________________________; 45//; 46// Cuda Device Reference; 47//____________________________________________________________________________; 48 ; 49/** TCudaDeviceReference; 50 *; 51 * Helper class emulating lvalue references for AFloat values that are; 52 * physically on the device. Allows for example to assign to matrix elements.; 53 * Note that device access through CudaDeviceReferences enforces synchronization; 54 * with all streams and thus qualifies as performance killer. Only used for; 55 * testing.; 56 */; 57template<typename AFloat>; 58class TCudaDeviceReference; 59{; 60private:; 61 ; 62 AFloat * fDevicePointer;; 63 ; 64public:; 65 ; 66 TCudaDeviceReference(AFloat * devicePointer);; 67 ; 68 operator AFloat();; 69 ; 70 void operator=(const TCudaDeviceReference &other);; 71 void operator=(AFloat value);; 72 void operator+=(AFloat value);; 73 void operator-=(AFloat value);; 74};; 75 ; 76//____________________________________________________________________________; 77//; 78// Cuda Matrix; 79//____________________________________________________________________________; 80 ; 81/** TCudaMatrix Class; 82 *; 83 * The TCudaMatrix class represents matrices on a CUDA device. The elements; 84 * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; 85 * the allocation and freeing of the device memory. TCudaMatrices are lightweight; 86 * object, that means on assignme",MatchSource.WIKI,doc/master/CudaMatrix_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/CudaMatrix_8h_source.html
Modifiability,variab,variable,"mpute stream, if it's not the default stream.Definition CudaMatrix.h:282; TMVA::DNN::TCudaMatrix::fNColssize_t fNColsDefinition CudaMatrix.h:118; TMVA::DNN::TCudaMatrix::GetOnesstatic AFloat * GetOnes()Definition CudaMatrix.h:125; TMVA::DNN::TCudaMatrix::~TCudaMatrix~TCudaMatrix()=default; TMVA::DNN::TCudaMatrix::fOnesstatic AFloat * fOnesVector used for summations of columns.Definition CudaMatrix.h:111; TMVA::DNN::TCudaMatrix::fCublasHandlestatic cublasHandle_t fCublasHandleDefinition CudaMatrix.h:109; TMVA::DNN::TCudaMatrix::fInstancesstatic size_t fInstancesCurrent number of matrix instances.Definition CudaMatrix.h:108; TMVA::DNN::TCudaMatrix::GetNrowssize_t GetNrows() constDefinition CudaMatrix.h:159; TMVA::DNN::TCudaMatrix::operator=TCudaMatrix & operator=(TCudaMatrix &&)=default; TMVA::DNN::TCudaMatrix::InitializeCurandStatesvoid InitializeCurandStates()Definition CudaMatrix.cu:140; TMVA::DNN::TCudaMatrix::GetDataPointerAFloat * GetDataPointer()Definition CudaMatrix.h:164; TMVA::DNN::TCudaMatrix::fNOnesstatic size_t fNOnesCurrent length of the one vector.Definition CudaMatrix.h:112; TMVA::DNN::TCudaMatrix::TCudaMatrixTCudaMatrix(TCudaMatrix &&)=default; TMVA::DNN::TCudaMatrix::GetCurandStatesPointerstatic curandState_t * GetCurandStatesPointer()Definition CudaMatrix.h:152; TMatrixTBase::Printvoid Print(Option_t *name="""") const overridePrint the matrix as a table of elements.Definition TMatrixTBase.cxx:636; TMatrixTTMatrixT.Definition TMatrixT.h:40; bool; lineTLine * lineDefinition entrylistblock_figure1.C:235; nconst Int_t nDefinition legend1.C:16; TMVA::DNN::cudaErrorvoid cudaError(cudaError_t code, const char *file, int line, bool abort=true)Function to check cuda return code.Definition CudaMatrix.h:198; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; mTMarker mDefinition textangle.C:8. tmvatmvaincTMVADNNArchitecturesCudaCudaMatrix.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/CudaMatrix_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/CudaMatrix_8h_source.html
Performance,perform,performance," keep as is; 24#include ""RConfigure.h""; 25 ; 26#include ""cuda.h""; 27#include ""cuda_runtime.h""; 28#include ""cublas_v2.h""; 29#include ""curand_kernel.h""; 30 ; 31#include ""TMatrixT.h""; 32#include ""CudaBuffers.h""; 33 ; 34#define CUDACHECK(ans) {cudaError((ans), __FILE__, __LINE__); }; 35 ; 36namespace TMVA {; 37namespace DNN {; 38 ; 39/** Function to check cuda return code. Taken from; 40 * http://stackoverflow.com/questions/14038589/; 41 */; 42inline void cudaError(cudaError_t code, const char *file, int line, bool abort=true);; 43 ; 44//____________________________________________________________________________; 45//; 46// Cuda Device Reference; 47//____________________________________________________________________________; 48 ; 49/** TCudaDeviceReference; 50 *; 51 * Helper class emulating lvalue references for AFloat values that are; 52 * physically on the device. Allows for example to assign to matrix elements.; 53 * Note that device access through CudaDeviceReferences enforces synchronization; 54 * with all streams and thus qualifies as performance killer. Only used for; 55 * testing.; 56 */; 57template<typename AFloat>; 58class TCudaDeviceReference; 59{; 60private:; 61 ; 62 AFloat * fDevicePointer;; 63 ; 64public:; 65 ; 66 TCudaDeviceReference(AFloat * devicePointer);; 67 ; 68 operator AFloat();; 69 ; 70 void operator=(const TCudaDeviceReference &other);; 71 void operator=(AFloat value);; 72 void operator+=(AFloat value);; 73 void operator-=(AFloat value);; 74};; 75 ; 76//____________________________________________________________________________; 77//; 78// Cuda Matrix; 79//____________________________________________________________________________; 80 ; 81/** TCudaMatrix Class; 82 *; 83 * The TCudaMatrix class represents matrices on a CUDA device. The elements; 84 * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; 85 * the allocation and freeing of the device memory. TCudaMatrices are lightweight; 86 * object, that means on assignme",MatchSource.WIKI,doc/master/CudaMatrix_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/CudaMatrix_8h_source.html
Safety,abort,abort,"to floating point //; 16// values on the device. //; 17///////////////////////////////////////////////////////////////////////; 18 ; 19#ifndef TMVA_DNN_ARCHITECTURES_CUDA_CUDAMATRIX; 20#define TMVA_DNN_ARCHITECTURES_CUDA_CUDAMATRIX; 21 ; 22// in case we compile C++ code with std-17 and cuda with lower standard; 23// use experimental string_view, otherwise keep as is; 24#include ""RConfigure.h""; 25 ; 26#include ""cuda.h""; 27#include ""cuda_runtime.h""; 28#include ""cublas_v2.h""; 29#include ""curand_kernel.h""; 30 ; 31#include ""TMatrixT.h""; 32#include ""CudaBuffers.h""; 33 ; 34#define CUDACHECK(ans) {cudaError((ans), __FILE__, __LINE__); }; 35 ; 36namespace TMVA {; 37namespace DNN {; 38 ; 39/** Function to check cuda return code. Taken from; 40 * http://stackoverflow.com/questions/14038589/; 41 */; 42inline void cudaError(cudaError_t code, const char *file, int line, bool abort=true);; 43 ; 44//____________________________________________________________________________; 45//; 46// Cuda Device Reference; 47//____________________________________________________________________________; 48 ; 49/** TCudaDeviceReference; 50 *; 51 * Helper class emulating lvalue references for AFloat values that are; 52 * physically on the device. Allows for example to assign to matrix elements.; 53 * Note that device access through CudaDeviceReferences enforces synchronization; 54 * with all streams and thus qualifies as performance killer. Only used for; 55 * testing.; 56 */; 57template<typename AFloat>; 58class TCudaDeviceReference; 59{; 60private:; 61 ; 62 AFloat * fDevicePointer;; 63 ; 64public:; 65 ; 66 TCudaDeviceReference(AFloat * devicePointer);; 67 ; 68 operator AFloat();; 69 ; 70 void operator=(const TCudaDeviceReference &other);; 71 void operator=(AFloat value);; 72 void operator+=(AFloat value);; 73 void operator-=(AFloat value);; 74};; 75 ; 76//____________________________________________________________________________; 77//; 78// Cuda Matrix; 79//_____________________________________",MatchSource.WIKI,doc/master/CudaMatrix_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/CudaMatrix_8h_source.html
Security,access,access," keep as is; 24#include ""RConfigure.h""; 25 ; 26#include ""cuda.h""; 27#include ""cuda_runtime.h""; 28#include ""cublas_v2.h""; 29#include ""curand_kernel.h""; 30 ; 31#include ""TMatrixT.h""; 32#include ""CudaBuffers.h""; 33 ; 34#define CUDACHECK(ans) {cudaError((ans), __FILE__, __LINE__); }; 35 ; 36namespace TMVA {; 37namespace DNN {; 38 ; 39/** Function to check cuda return code. Taken from; 40 * http://stackoverflow.com/questions/14038589/; 41 */; 42inline void cudaError(cudaError_t code, const char *file, int line, bool abort=true);; 43 ; 44//____________________________________________________________________________; 45//; 46// Cuda Device Reference; 47//____________________________________________________________________________; 48 ; 49/** TCudaDeviceReference; 50 *; 51 * Helper class emulating lvalue references for AFloat values that are; 52 * physically on the device. Allows for example to assign to matrix elements.; 53 * Note that device access through CudaDeviceReferences enforces synchronization; 54 * with all streams and thus qualifies as performance killer. Only used for; 55 * testing.; 56 */; 57template<typename AFloat>; 58class TCudaDeviceReference; 59{; 60private:; 61 ; 62 AFloat * fDevicePointer;; 63 ; 64public:; 65 ; 66 TCudaDeviceReference(AFloat * devicePointer);; 67 ; 68 operator AFloat();; 69 ; 70 void operator=(const TCudaDeviceReference &other);; 71 void operator=(AFloat value);; 72 void operator+=(AFloat value);; 73 void operator-=(AFloat value);; 74};; 75 ; 76//____________________________________________________________________________; 77//; 78// Cuda Matrix; 79//____________________________________________________________________________; 80 ; 81/** TCudaMatrix Class; 82 *; 83 * The TCudaMatrix class represents matrices on a CUDA device. The elements; 84 * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; 85 * the allocation and freeing of the device memory. TCudaMatrices are lightweight; 86 * object, that means on assignme",MatchSource.WIKI,doc/master/CudaMatrix_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/CudaMatrix_8h_source.html
Testability,test,testing,"e.h""; 28#include ""cublas_v2.h""; 29#include ""curand_kernel.h""; 30 ; 31#include ""TMatrixT.h""; 32#include ""CudaBuffers.h""; 33 ; 34#define CUDACHECK(ans) {cudaError((ans), __FILE__, __LINE__); }; 35 ; 36namespace TMVA {; 37namespace DNN {; 38 ; 39/** Function to check cuda return code. Taken from; 40 * http://stackoverflow.com/questions/14038589/; 41 */; 42inline void cudaError(cudaError_t code, const char *file, int line, bool abort=true);; 43 ; 44//____________________________________________________________________________; 45//; 46// Cuda Device Reference; 47//____________________________________________________________________________; 48 ; 49/** TCudaDeviceReference; 50 *; 51 * Helper class emulating lvalue references for AFloat values that are; 52 * physically on the device. Allows for example to assign to matrix elements.; 53 * Note that device access through CudaDeviceReferences enforces synchronization; 54 * with all streams and thus qualifies as performance killer. Only used for; 55 * testing.; 56 */; 57template<typename AFloat>; 58class TCudaDeviceReference; 59{; 60private:; 61 ; 62 AFloat * fDevicePointer;; 63 ; 64public:; 65 ; 66 TCudaDeviceReference(AFloat * devicePointer);; 67 ; 68 operator AFloat();; 69 ; 70 void operator=(const TCudaDeviceReference &other);; 71 void operator=(AFloat value);; 72 void operator+=(AFloat value);; 73 void operator-=(AFloat value);; 74};; 75 ; 76//____________________________________________________________________________; 77//; 78// Cuda Matrix; 79//____________________________________________________________________________; 80 ; 81/** TCudaMatrix Class; 82 *; 83 * The TCudaMatrix class represents matrices on a CUDA device. The elements; 84 * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; 85 * the allocation and freeing of the device memory. TCudaMatrices are lightweight; 86 * object, that means on assignment and copy creation only a shallow copy is; 87 * performed and no new element buffer all",MatchSource.WIKI,doc/master/CudaMatrix_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/CudaMatrix_8h_source.html
Availability,error,error,l) const; 410 {; 411 // for row wise; 412 //assert(GetLayout() == MemoryLayout::RowMajor);; 413 assert( fNDim == 4); // || ( k==0 && fNDim == 2 ) );; 414 ; 415 size_t offset = (GetLayout() == MemoryLayout::RowMajor) ?; 416 i * fStrides[0] + j * fStrides[1] + k * fStrides[2] + l:; 417 l * fStrides[3] + k * fStrides[2] + j * fStrides[1] + i;; 418 ; 419 AFloat * elementPointer = fElementBuffer.data() + offset;; 420 ; 421 return TCudaDeviceReference<AFloat>(elementPointer);; 422 }; 423 ; 424private:; 425 ; 426 /** Initializes all shared devices resource and makes sure that a sufficient; 427 * number of curand states are allocated on the device and initialized as; 428 * well as that the one-vector for the summation over columns has the right; 429 * size. */; 430 void InitializeCuda();; 431 void InitializeCurandStates();; 432 ; 433};; 434 ; 435 ; 436 ; 437 ; 438} // namespace DNN; 439} // namespace TMVA; 440 ; 441#endif; CudaBuffers.h; CudaMatrix.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition T,MatchSource.WIKI,doc/master/CudaTensor_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/CudaTensor_8h_source.html
Energy Efficiency,allocate,allocated,"ion k is all other dims collapsed !!!; 399 ; 400 size_t offset = (GetLayout() == MemoryLayout::RowMajor) ?; 401 i * fStrides[0] + j * fStrides[1] + k :; 402 i * fStrides[2] + k * fStrides[1] + j;; 403 ; 404 AFloat * elementPointer = fElementBuffer.data() + offset;; 405 ; 406 return TCudaDeviceReference<AFloat>(elementPointer);; 407 }; 408 ; 409 TCudaDeviceReference<AFloat> operator()(size_t i, size_t j, size_t k, size_t l) const; 410 {; 411 // for row wise; 412 //assert(GetLayout() == MemoryLayout::RowMajor);; 413 assert( fNDim == 4); // || ( k==0 && fNDim == 2 ) );; 414 ; 415 size_t offset = (GetLayout() == MemoryLayout::RowMajor) ?; 416 i * fStrides[0] + j * fStrides[1] + k * fStrides[2] + l:; 417 l * fStrides[3] + k * fStrides[2] + j * fStrides[1] + i;; 418 ; 419 AFloat * elementPointer = fElementBuffer.data() + offset;; 420 ; 421 return TCudaDeviceReference<AFloat>(elementPointer);; 422 }; 423 ; 424private:; 425 ; 426 /** Initializes all shared devices resource and makes sure that a sufficient; 427 * number of curand states are allocated on the device and initialized as; 428 * well as that the one-vector for the summation over columns has the right; 429 * size. */; 430 void InitializeCuda();; 431 void InitializeCurandStates();; 432 ; 433};; 434 ; 435 ; 436 ; 437 ; 438} // namespace DNN; 439} // namespace TMVA; 440 ; 441#endif; CudaBuffers.h; CudaMatrix.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString In",MatchSource.WIKI,doc/master/CudaTensor_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/CudaTensor_8h_source.html
Modifiability,extend,extends,"""; 29#include ""TMatrixT.h""; 30#include ""CudaBuffers.h""; 31 ; 32//#include ""TMVA/RTensor.hxx""; 33 ; 34#ifdef R__HAS_CUDNN; 35#include ""cudnn.h""; 36#define CUDNNCHECK(ans) {cudnnError((ans), __FILE__, __LINE__); }; 37#endif; 38 ; 39namespace TMVA {; 40 ; 41 ; 42 ; 43#ifndef TMVA_RTENSOR; 44 ; 45namespace Experimental {; 46/// Memory layout type (copy from RTensor.hxx); 47enum class MemoryLayout : uint8_t {; 48 RowMajor = 0x01,; 49 ColumnMajor = 0x02; 50};; 51}; 52#endif; 53 ; 54namespace DNN {; 55 ; 56using MemoryLayout = TMVA::Experimental::MemoryLayout;; 57 ; 58#ifdef R__HAS_CUDNN; 59/**; 60 * Function to handle the status output of cuDNN function calls. See also; 61 * CUDACHECK in CudaMatrix.h.; 62 */; 63inline void cudnnError(cudnnStatus_t status, const char *file, int line, bool abort=true); 64{; 65 if (status != CUDNN_STATUS_SUCCESS) {; 66 fprintf(stderr, ""CUDNN Error: %s %s %d\n"", cudnnGetErrorString(status), file, line);; 67 if (abort); 68 exit(status);; 69 }; 70}; 71#endif; 72//____________________________________________________________________________; 73//; 74// Cuda Tensor; 75//____________________________________________________________________________; 76 ; 77/** TCudaTensor Class; 78 *; 79 * The TCudaTensor class extends the TCudaMatrix class for dimensions > 2.; 80 *; 81 */; 82template<typename AFloat>; 83class TCudaTensor; 84{; 85public:; 86 ; 87 using Shape_t = std::vector<size_t>;; 88 using MemoryLayout = TMVA::Experimental:: MemoryLayout;; 89 using Scalar_t = AFloat;; 90 ; 91 ; 92private:; 93 ; 94#ifdef R__HAS_CUDNN; 95 struct TensorDescriptor {; 96 cudnnTensorDescriptor_t fCudnnDesc;; 97 };; 98 ; 99 static std::vector<cudnnHandle_t> fCudnnHandle; ///< Holds the cuddn library context (one for every CUDA stream); 100 ; 101 static cudnnDataType_t fDataType; ///< Cudnn datatype used for the tensor; 102#else; 103 struct TensorDescriptor {; 104 };; 105#endif; 106 ; 107 /** For each GPU device keep the CUDA streams in which tensors are used.; 108 * Inst",MatchSource.WIKI,doc/master/CudaTensor_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/CudaTensor_8h_source.html
Safety,abort,abort,"""; 29#include ""TMatrixT.h""; 30#include ""CudaBuffers.h""; 31 ; 32//#include ""TMVA/RTensor.hxx""; 33 ; 34#ifdef R__HAS_CUDNN; 35#include ""cudnn.h""; 36#define CUDNNCHECK(ans) {cudnnError((ans), __FILE__, __LINE__); }; 37#endif; 38 ; 39namespace TMVA {; 40 ; 41 ; 42 ; 43#ifndef TMVA_RTENSOR; 44 ; 45namespace Experimental {; 46/// Memory layout type (copy from RTensor.hxx); 47enum class MemoryLayout : uint8_t {; 48 RowMajor = 0x01,; 49 ColumnMajor = 0x02; 50};; 51}; 52#endif; 53 ; 54namespace DNN {; 55 ; 56using MemoryLayout = TMVA::Experimental::MemoryLayout;; 57 ; 58#ifdef R__HAS_CUDNN; 59/**; 60 * Function to handle the status output of cuDNN function calls. See also; 61 * CUDACHECK in CudaMatrix.h.; 62 */; 63inline void cudnnError(cudnnStatus_t status, const char *file, int line, bool abort=true); 64{; 65 if (status != CUDNN_STATUS_SUCCESS) {; 66 fprintf(stderr, ""CUDNN Error: %s %s %d\n"", cudnnGetErrorString(status), file, line);; 67 if (abort); 68 exit(status);; 69 }; 70}; 71#endif; 72//____________________________________________________________________________; 73//; 74// Cuda Tensor; 75//____________________________________________________________________________; 76 ; 77/** TCudaTensor Class; 78 *; 79 * The TCudaTensor class extends the TCudaMatrix class for dimensions > 2.; 80 *; 81 */; 82template<typename AFloat>; 83class TCudaTensor; 84{; 85public:; 86 ; 87 using Shape_t = std::vector<size_t>;; 88 using MemoryLayout = TMVA::Experimental:: MemoryLayout;; 89 using Scalar_t = AFloat;; 90 ; 91 ; 92private:; 93 ; 94#ifdef R__HAS_CUDNN; 95 struct TensorDescriptor {; 96 cudnnTensorDescriptor_t fCudnnDesc;; 97 };; 98 ; 99 static std::vector<cudnnHandle_t> fCudnnHandle; ///< Holds the cuddn library context (one for every CUDA stream); 100 ; 101 static cudnnDataType_t fDataType; ///< Cudnn datatype used for the tensor; 102#else; 103 struct TensorDescriptor {; 104 };; 105#endif; 106 ; 107 /** For each GPU device keep the CUDA streams in which tensors are used.; 108 * Inst",MatchSource.WIKI,doc/master/CudaTensor_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/CudaTensor_8h_source.html
Security,access,access,"ewShape, this->GetLayout(), fDevice, fStreamIndx);; 356 return tmp;; 357 }; 358 ; 359 void SetTensorDescriptor();; 360 ; 361 // return slice of tensor; 362 // return slices in the first dimension (if row wise) or last dimension if column wise; 363 // so single event slides; 364 TCudaTensor<AFloat> At(size_t i) const {; 365 Shape_t sliced_shape = (GetLayout() == MemoryLayout::RowMajor); 366 ? Shape_t(fShape.begin() + 1, fShape.end()) :; 367 Shape_t(fShape.begin(), fShape.end() - 1);; 368 ; 369 ; 370 size_t buffsize = (GetLayout() == MemoryLayout::RowMajor) ?; 371 fStrides.front() : fStrides.back();; 372 ; 373 size_t offset = i * buffsize;; 374 ; 375 return TCudaTensor<AFloat>((const_cast<TCudaDeviceBuffer<AFloat>&>(fElementBuffer)).GetSubBuffer(offset, buffsize), sliced_shape, GetLayout());; 376 }; 377 ; 378 ; 379 // element access ( for debugging); 380 TCudaDeviceReference<AFloat> operator()(size_t i, size_t j) const; 381 {; 382 // like this works also for multi-dim tensors; 383 // and consider the tensor as a multidim one; 384 size_t nrows = GetNrows();; 385 size_t ncols = GetNcols();; 386 ; 387 size_t offset = (GetLayout() == MemoryLayout::RowMajor) ?; 388 i * ncols + j : j * nrows + i;; 389 ; 390 AFloat * elementPointer = fElementBuffer.data() + offset;; 391 return TCudaDeviceReference<AFloat>(elementPointer);; 392 }; 393 // element access ( for debugging); 394 TCudaDeviceReference<AFloat> operator()(size_t i, size_t j, size_t k) const; 395 {; 396 // k is B, i is C, j is HW :; 397 assert( fNDim >= 3); // || ( k==0 && fNDim == 2 ) );; 398 //note for larger dimension k is all other dims collapsed !!!; 399 ; 400 size_t offset = (GetLayout() == MemoryLayout::RowMajor) ?; 401 i * fStrides[0] + j * fStrides[1] + k :; 402 i * fStrides[2] + k * fStrides[1] + j;; 403 ; 404 AFloat * elementPointer = fElementBuffer.data() + offset;; 405 ; 406 return TCudaDeviceReference<AFloat>(elementPointer);; 407 }; 408 ; 409 TCudaDeviceReference<AFloat> operator()(size_t i, size_t j, siz",MatchSource.WIKI,doc/master/CudaTensor_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/CudaTensor_8h_source.html
Testability,assert,assert,"mnMajor ) ? fStrides.back() : fShape.front();}; 300 size_t GetNcols() const { return (GetLayout() == MemoryLayout::ColumnMajor ) ? fShape.back() : fStrides.front(); }; 301 ; 302 ; 303 // Matrix conversion for tensors of shape 2; 304 TCudaMatrix<AFloat> GetMatrix() const {; 305 // remember TCudaMatrix is always column-major; 306 if ( GetLayout() == MemoryLayout::ColumnMajor &&; 307 (fNDim == 2 || (fNDim == 3 && GetFirstSize() == 1) ) ); 308 return TCudaMatrix<AFloat>(fElementBuffer, GetHSize(), GetWSize());; 309 ; 310 ; 311 //case of N,M,1,1,..; 312 bool caseNM11 = true;; 313 for (size_t i = 2; i < fNDim; ++i) caseNM11 &= fShape[i] == 1;; 314 if (caseNM11) {; 315 return (GetLayout() == MemoryLayout::ColumnMajor ) ?; 316 TCudaMatrix<AFloat>(fElementBuffer, fShape[0], fShape[1]) :; 317 TCudaMatrix<AFloat>(fElementBuffer, fShape[1], fShape[0]);; 318 }; 319 bool case11NM = true;; 320 for (size_t i = 0; i < fNDim-2; ++i) case11NM &= fShape[i] == 1;; 321 if (case11NM) {; 322 return (GetLayout() == MemoryLayout::ColumnMajor ) ?; 323 TCudaMatrix<AFloat>(fElementBuffer, fShape[fNDim-2], fShape[fNDim-1]) :; 324 TCudaMatrix<AFloat>(fElementBuffer, fShape[fNDim-1], fShape[fNDim-2]);; 325 }; 326 ; 327 assert(false);; 328 return TCudaMatrix<AFloat>();; 329 }; 330 ; 331 // for backward compatibility with old tensor; 332 TCudaMatrix<AFloat> operator[](size_t i) const {; 333 //assert(GetLayout() == MemoryLayout::ColumnMajor );; 334 return At(i).GetMatrix();; 335 }; 336 ; 337 ; 338 ; 339 static inline std::vector<std::size_t> ComputeStridesFromShape(const std::vector<std::size_t> &shape,; 340 bool rowmajorLayout);; 341 ; 342 void ReshapeInPlace(const Shape_t & newShape) {; 343 fShape = newShape;; 344 fStrides = ComputeStridesFromShape(fShape, fMemoryLayout == MemoryLayout::RowMajor);; 345 fNDim = fShape.size();; 346 // in principle reshape should not change tensor size; 347 size_t newSize = (fMemoryLayout == MemoryLayout::RowMajor) ? fStrides.front() * fShape.front() : fStrides.back()",MatchSource.WIKI,doc/master/CudaTensor_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/CudaTensor_8h_source.html
Testability,assert,assert,". ROOT: tutorials/hist/cumulative.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. cumulative.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Illustrate use of the TH1::GetCumulative method. . ; #include <cassert>; #include <cmath>; ; #include ""TH1.h""; #include ""TH1D.h""; #include ""TCanvas.h""; #include ""TRandom.h""; ; TCanvas *cumulative(); {; TH1* h = new TH1D(""h"", ""h"", 100, -5., 5.);; gRandom->SetSeed();; h->FillRandom(""gaus"", 1u << 16);; // get the cumulative of h; TH1* hc = h->GetCumulative();; // check that c has the ""right"" contents; Double_t* integral = h->GetIntegral();; for (Int_t i = 1; i <= hc->GetNbinsX(); ++i) {; assert(std::abs(integral[i] * h->GetEntries() - hc->GetBinContent(i)) < 1e-7);; }; // draw histogram together with its cumulative distribution; TCanvas* c = new TCanvas;; c->Divide(1,2);; c->cd(1);; h->Draw();; c->cd(2);; hc->Draw();; c->Update();; ; return c;; }; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; e#define e(i)Definition RSha256.hxx:103; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TH1D.h; TH1.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetCumulativeTH1 * GetCumulative(Bool_t forward=kTRUE, const char *suffix=""_cumulative"") constReturn a pointer to a histogram containing the cumulative content.Definition TH1.cxx:2616; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetIntegralvirtual Double_t * GetIntegral()Return a pointer to the array of bins integral.Definition TH1.cxx:2586; TH1::GetBinContent",MatchSource.WIKI,doc/master/cumulative_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/cumulative_8C.html
Deployability,integrat,integrated,". ROOT: tmva/tmva/src/DataLoader.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DataLoader.cxx. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Omar Zapata; 3// Mentors: Lorenzo Moneta, Sergei Gleyzer; 4//NOTE: Based on TMVA::Factory; 5 ; 6/**********************************************************************************; 7 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 8 * Package: TMVA *; 9 * Class : DataLoader *; 10 * *; 11 * *; 12 * Description: *; 13 * This is a class to load datasets into every booked method *; 14 * *; 15 * Authors (alphabetical): *; 16 * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; 17 * Omar Zapata <Omar.Zapata@cern.ch> - ITM/UdeA, Colombia *; 18 * Sergei Gleyzer<sergei.gleyzer@cern.ch> - CERN, Switzerland *; 19 * *; 20 * Copyright (c) 2005-2015: *; 21 * CERN, Switzerland *; 22 * ITM/UdeA, Colombia *; 23 * *; 24 * Redistribution and use in source and binary forms, with or without *; 25 * modification, are permitted according to the terms listed in LICENSE *; 26 * (see tmva/doc/LICENSE) *; 27 **********************************************************************************/; 28 ; 29 ; 30/*! \class TMVA::DataLoader; 31\ingroup TMVA; 32 ; 33*/; 34 ; 35#include ""TTree.h""; 36#include ""TH2.h""; 37#include ""TMatrixD.h""; 38 ; 39#include ""TMVA/DataLoader.h""; 40#include ""TMVA/Config.h""; 41#include ""TMVA/CvSplit.h""; 42#include ""TMVA/Tools.h""; 43#include ""TMVA/IMethod.h""; 44#include ""TMVA/MethodBase.h""; 45#include ""TMVA/DataInputHandler.h""; 46#include ""TMVA/DataSetManager.h""; 47#include ""TMVA/DataSetInfo.h""; 48#include ""TMVA/MethodBoost.h""; 49#include ""TMVA/MethodCategory.h""; 50 ; 51#include ""TMVA/VariableInfo.h""; 52#include ""TMVA/VariableIdentityTransform.h""; 53#include ""TMVA/VariableDecorrTransform.h""; 54#include ""TMVA/VariablePCATransform.h""; 55#include ""TMVA/VariableGaussTransform.h""; 56#include ""TMVA/VariableNormalizeTransfor",MatchSource.WIKI,doc/master/DataLoader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html
Integrability,integrat,integrated,". ROOT: tmva/tmva/src/DataLoader.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DataLoader.cxx. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Omar Zapata; 3// Mentors: Lorenzo Moneta, Sergei Gleyzer; 4//NOTE: Based on TMVA::Factory; 5 ; 6/**********************************************************************************; 7 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 8 * Package: TMVA *; 9 * Class : DataLoader *; 10 * *; 11 * *; 12 * Description: *; 13 * This is a class to load datasets into every booked method *; 14 * *; 15 * Authors (alphabetical): *; 16 * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; 17 * Omar Zapata <Omar.Zapata@cern.ch> - ITM/UdeA, Colombia *; 18 * Sergei Gleyzer<sergei.gleyzer@cern.ch> - CERN, Switzerland *; 19 * *; 20 * Copyright (c) 2005-2015: *; 21 * CERN, Switzerland *; 22 * ITM/UdeA, Colombia *; 23 * *; 24 * Redistribution and use in source and binary forms, with or without *; 25 * modification, are permitted according to the terms listed in LICENSE *; 26 * (see tmva/doc/LICENSE) *; 27 **********************************************************************************/; 28 ; 29 ; 30/*! \class TMVA::DataLoader; 31\ingroup TMVA; 32 ; 33*/; 34 ; 35#include ""TTree.h""; 36#include ""TH2.h""; 37#include ""TMatrixD.h""; 38 ; 39#include ""TMVA/DataLoader.h""; 40#include ""TMVA/Config.h""; 41#include ""TMVA/CvSplit.h""; 42#include ""TMVA/Tools.h""; 43#include ""TMVA/IMethod.h""; 44#include ""TMVA/MethodBase.h""; 45#include ""TMVA/DataInputHandler.h""; 46#include ""TMVA/DataSetManager.h""; 47#include ""TMVA/DataSetInfo.h""; 48#include ""TMVA/MethodBoost.h""; 49#include ""TMVA/MethodCategory.h""; 50 ; 51#include ""TMVA/VariableInfo.h""; 52#include ""TMVA/VariableIdentityTransform.h""; 53#include ""TMVA/VariableDecorrTransform.h""; 54#include ""TMVA/VariablePCATransform.h""; 55#include ""TMVA/VariableGaussTransform.h""; 56#include ""TMVA/VariableNormalizeTransfor",MatchSource.WIKI,doc/master/DataLoader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html
Modifiability,variab,variables," for (;trfIt != fDefaultTrfs.end(); ++trfIt) delete (*trfIt);; 102 ; 103 delete fDataInputHandler;; 104 ; 105 // destroy singletons; 106 // DataSetManager::DestroyInstance(); // DSMTEST replaced by following line; 107 delete fDataSetManager; // DSMTEST; 108 ; 109 // problem with call of REGISTER_METHOD macro ...; 110 // ClassifierDataLoader::DestroyInstance();; 111 // Types::DestroyInstance();; 112 //Tools::DestroyInstance();; 113 //Config::DestroyInstance();; 114}; 115 ; 116 ; 117////////////////////////////////////////////////////////////////////////////////; 118 ; 119TMVA::DataSetInfo& TMVA::DataLoader::AddDataSet( DataSetInfo &dsi ); 120{; 121 return fDataSetManager->AddDataSetInfo(dsi); // DSMTEST; 122}; 123 ; 124////////////////////////////////////////////////////////////////////////////////; 125 ; 126TMVA::DataSetInfo& TMVA::DataLoader::AddDataSet( const TString& dsiName ); 127{; 128 DataSetInfo* dsi = fDataSetManager->GetDataSetInfo(dsiName); // DSMTEST; 129 ; 130 if (dsi!=0) return *dsi;; 131 ; 132 return fDataSetManager->AddDataSetInfo(*(new DataSetInfo(dsiName))); // DSMTEST; 133}; 134 ; 135////////////////////////////////////////////////////////////////////////////////; 136 ; 137TMVA::DataSetInfo& TMVA::DataLoader::GetDataSetInfo(); 138{; 139 return DefaultDataSetInfo(); // DSMTEST; 140}; 141 ; 142////////////////////////////////////////////////////////////////////////////////; 143/// Transforms the variables and return a new DataLoader with the transformed; 144/// variables; 145 ; 146TMVA::DataLoader* TMVA::DataLoader::VarTransform(TString trafoDefinition); 147{; 148 TString trOptions = ""0"";; 149 TString trName = ""None"";; 150 if (trafoDefinition.Contains(""("")) {; 151 ; 152 // contains transformation parameters; 153 Ssiz_t parStart = trafoDefinition.Index( ""("" );; 154 Ssiz_t parLen = trafoDefinition.Index( "")"", parStart )-parStart+1;; 155 ; 156 trName = trafoDefinition(0,parStart);; 157 trOptions = trafoDefinition(parStart,parLen);; 158 trOptions.Remove(",MatchSource.WIKI,doc/master/DataLoader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html
Performance,load,load,". ROOT: tmva/tmva/src/DataLoader.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DataLoader.cxx. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Omar Zapata; 3// Mentors: Lorenzo Moneta, Sergei Gleyzer; 4//NOTE: Based on TMVA::Factory; 5 ; 6/**********************************************************************************; 7 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 8 * Package: TMVA *; 9 * Class : DataLoader *; 10 * *; 11 * *; 12 * Description: *; 13 * This is a class to load datasets into every booked method *; 14 * *; 15 * Authors (alphabetical): *; 16 * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; 17 * Omar Zapata <Omar.Zapata@cern.ch> - ITM/UdeA, Colombia *; 18 * Sergei Gleyzer<sergei.gleyzer@cern.ch> - CERN, Switzerland *; 19 * *; 20 * Copyright (c) 2005-2015: *; 21 * CERN, Switzerland *; 22 * ITM/UdeA, Colombia *; 23 * *; 24 * Redistribution and use in source and binary forms, with or without *; 25 * modification, are permitted according to the terms listed in LICENSE *; 26 * (see tmva/doc/LICENSE) *; 27 **********************************************************************************/; 28 ; 29 ; 30/*! \class TMVA::DataLoader; 31\ingroup TMVA; 32 ; 33*/; 34 ; 35#include ""TTree.h""; 36#include ""TH2.h""; 37#include ""TMatrixD.h""; 38 ; 39#include ""TMVA/DataLoader.h""; 40#include ""TMVA/Config.h""; 41#include ""TMVA/CvSplit.h""; 42#include ""TMVA/Tools.h""; 43#include ""TMVA/IMethod.h""; 44#include ""TMVA/MethodBase.h""; 45#include ""TMVA/DataInputHandler.h""; 46#include ""TMVA/DataSetManager.h""; 47#include ""TMVA/DataSetInfo.h""; 48#include ""TMVA/MethodBoost.h""; 49#include ""TMVA/MethodCategory.h""; 50 ; 51#include ""TMVA/VariableInfo.h""; 52#include ""TMVA/VariableIdentityTransform.h""; 53#include ""TMVA/VariableDecorrTransform.h""; 54#include ""TMVA/VariablePCATransform.h""; 55#include ""TMVA/VariableGaussTransform.h""; 56#include ""TMVA/VariableNormalizeTransfor",MatchSource.WIKI,doc/master/DataLoader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html
Security,validat,validation," 637 AddCut( cut );; 638 DefaultDataSetInfo().SetSplitOptions( opt );; 639}; 640 ; 641////////////////////////////////////////////////////////////////////////////////; 642/// prepare the training and test trees; 643 ; 644void TMVA::DataLoader::PrepareTrainingAndTestTree( TCut sigcut, TCut bkgcut, const TString& splitOpt ); 645{; 646 // if event-wise data assignment, add local trees to dataset first; 647 SetInputTreesFromEventAssignTrees();; 648 ; 649 //Log() << kINFO <<""Preparing trees for training and testing...""<< Endl;; 650 AddCut( sigcut, ""Signal"" );; 651 AddCut( bkgcut, ""Background"" );; 652 ; 653 DefaultDataSetInfo().SetSplitOptions( splitOpt );; 654}; 655 ; 656////////////////////////////////////////////////////////////////////////////////; 657/// Function required to split the training and testing datasets into a; 658/// number of folds. Required by the CrossValidation and HyperParameterOptimisation; 659/// classes. The option to split the training dataset into a training set and; 660/// a validation set is implemented but not currently used.; 661 ; 662void TMVA::DataLoader::MakeKFoldDataSet(CvSplit & s); 663{; 664 s.MakeKFoldDataSet( DefaultDataSetInfo() );; 665}; 666 ; 667////////////////////////////////////////////////////////////////////////////////; 668/// Function for assigning the correct folds to the testing or training set.; 669 ; 670void TMVA::DataLoader::PrepareFoldDataSet(CvSplit & s, UInt_t foldNumber, Types::ETreeType tt); 671{; 672 s.PrepareFoldDataSet( DefaultDataSetInfo(), foldNumber, tt );; 673}; 674 ; 675 ; 676////////////////////////////////////////////////////////////////////////////////; 677/// Recombines the dataset. The precise semantics depend on the actual split.; 678///; 679/// Similar to the inverse operation of `MakeKFoldDataSet` but _will_ differ.; 680/// See documentation for each particular split for more information.; 681///; 682 ; 683void TMVA::DataLoader::RecombineKFoldDataSet(CvSplit & s, Types::ETreeType tt); 684{; 685 s.Re",MatchSource.WIKI,doc/master/DataLoader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html
Testability,test,testing,,MatchSource.WIKI,doc/master/DataLoader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html
Usability,simpl,simply," >; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::AtofDouble_t Atof() constReturn floating-point value contained in string.Definition TString.cxx:2054; TString::IsFloatBool_t IsFloat() constReturns kTRUE if string contains a floating point or integer number.Definition TString.cxx:1858; TString::Dataconst char * Data() constDefinition TString.h:376; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::SetDirectoryvirtual void SetDirectory(TDirectory *dir)Change the tree's directory.Definition TTree.cxx:8966; TTree::BranchTBranch * Branch(const char *name, T *obj, Int_t bufsize=32000, Int_t splitlevel=99)Add a new branch, and infer the data type from the type of obj being passed.Definition TTree.h:353; TTree::ReadFilevirtual Long64_t ReadFile(const char *filename, const char *branchDescriptor="""", char delimiter=' ')Create or simply read branches from filename.Definition TTree.cxx:7564; bool; double; int; unsigned int; TMVA::DataLoaderCopyvoid DataLoaderCopy(TMVA::DataLoader *des, TMVA::DataLoader *src); TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; mTMarker mDefinition textangle.C:8; ttauto * ttDefinition textangle.C:16; Config.h. tmvatmvasrcDataLoader.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/DataLoader_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html
Integrability,depend,dependency,". ROOT: tmva/tmva/inc/TMVA/DataLoader.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions ; DataLoader.h File Reference. #include <vector>; #include ""TCut.h""; #include ""TMVA/Configurable.h""; #include ""TMVA/Types.h""; #include ""TMVA/DataSet.h"". Include dependency graph for DataLoader.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TMVA::DataLoader;  . Namespaces; namespace  TMVA;  create variable transformations ;  . Functions; void TMVA::DataLoaderCopy (TMVA::DataLoader *des, TMVA::DataLoader *src);  . tmvatmvaincTMVADataLoader.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/DataLoader_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8h.html
Modifiability,variab,variable,". ROOT: tmva/tmva/inc/TMVA/DataLoader.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions ; DataLoader.h File Reference. #include <vector>; #include ""TCut.h""; #include ""TMVA/Configurable.h""; #include ""TMVA/Types.h""; #include ""TMVA/DataSet.h"". Include dependency graph for DataLoader.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TMVA::DataLoader;  . Namespaces; namespace  TMVA;  create variable transformations ;  . Functions; void TMVA::DataLoaderCopy (TMVA::DataLoader *des, TMVA::DataLoader *src);  . tmvatmvaincTMVADataLoader.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/DataLoader_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8h.html
Deployability,integrat,integrated,". ROOT: tmva/tmva/inc/TMVA/DataLoader.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DataLoader.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag, Omar Zapata, Lorenzo Moneta, Sergei Gleyzer; 3//NOTE: Based on TMVA::Factory; 4 ; 5/**********************************************************************************; 6 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 7 * Package: TMVA *; 8 * Class : DataLoader *; 9 * *; 10 * *; 11 * Description: *; 12 * This is a class to load datasets into every booked method *; 13 * *; 14 * Authors (alphabetical): *; 15 * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; 16 * Omar Zapata <andresete.chaos@gmail.com> - ITM/UdeA, Colombia *; 17 * Sergei Gleyzer<sergei.gleyzer@cern.ch> - CERN, Switzerland *; 18 * *; 19 * Copyright (c) 2005-2011: *; 20 * CERN, Switzerland *; 21 * ITM/UdeA, Colombia *; 22 * *; 23 * Redistribution and use in source and binary forms, with or without *; 24 * modification, are permitted according to the terms listed in LICENSE *; 25 * (see tmva/doc/LICENSE) *; 26 **********************************************************************************/; 27 ; 28#ifndef ROOT_TMVA_DataLoader; 29#define ROOT_TMVA_DataLoader; 30 ; 31#include <vector>; 32#include ""TCut.h""; 33 ; 34#include ""TMVA/Configurable.h""; 35#include ""TMVA/Types.h""; 36#include ""TMVA/DataSet.h""; 37 ; 38class TFile;; 39class TTree;; 40class TH2;; 41 ; 42namespace TMVA {; 43 ; 44 class CvSplit;; 45 class DataInputHandler;; 46 class DataSetInfo;; 47 class DataSetManager;; 48 class VariableTransformBase;; 49 ; 50 class DataLoader : public Configurable {; 51 public:; 52 ; 53 DataLoader(TString thedlName=""default"");; 54 ; 55 // default destructor; 56 virtual ~DataLoader();; 57 ; 58 ; 59 // add events to training and testing trees; 60 void Ad",MatchSource.WIKI,doc/master/DataLoader_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8h_source.html
Integrability,integrat,integrated,". ROOT: tmva/tmva/inc/TMVA/DataLoader.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DataLoader.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag, Omar Zapata, Lorenzo Moneta, Sergei Gleyzer; 3//NOTE: Based on TMVA::Factory; 4 ; 5/**********************************************************************************; 6 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 7 * Package: TMVA *; 8 * Class : DataLoader *; 9 * *; 10 * *; 11 * Description: *; 12 * This is a class to load datasets into every booked method *; 13 * *; 14 * Authors (alphabetical): *; 15 * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; 16 * Omar Zapata <andresete.chaos@gmail.com> - ITM/UdeA, Colombia *; 17 * Sergei Gleyzer<sergei.gleyzer@cern.ch> - CERN, Switzerland *; 18 * *; 19 * Copyright (c) 2005-2011: *; 20 * CERN, Switzerland *; 21 * ITM/UdeA, Colombia *; 22 * *; 23 * Redistribution and use in source and binary forms, with or without *; 24 * modification, are permitted according to the terms listed in LICENSE *; 25 * (see tmva/doc/LICENSE) *; 26 **********************************************************************************/; 27 ; 28#ifndef ROOT_TMVA_DataLoader; 29#define ROOT_TMVA_DataLoader; 30 ; 31#include <vector>; 32#include ""TCut.h""; 33 ; 34#include ""TMVA/Configurable.h""; 35#include ""TMVA/Types.h""; 36#include ""TMVA/DataSet.h""; 37 ; 38class TFile;; 39class TTree;; 40class TH2;; 41 ; 42namespace TMVA {; 43 ; 44 class CvSplit;; 45 class DataInputHandler;; 46 class DataSetInfo;; 47 class DataSetManager;; 48 class VariableTransformBase;; 49 ; 50 class DataLoader : public Configurable {; 51 public:; 52 ; 53 DataLoader(TString thedlName=""default"");; 54 ; 55 // default destructor; 56 virtual ~DataLoader();; 57 ; 58 ; 59 // add events to training and testing trees; 60 void Ad",MatchSource.WIKI,doc/master/DataLoader_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8h_source.html
Modifiability,variab,variable,"ignalTree( TTree* signal, Double_t weight=1.0, Types::ETreeType treetype = Types::kMaxTreeType );; 86 void AddSignalTree( TString datFileS, Double_t weight=1.0, Types::ETreeType treetype = Types::kMaxTreeType );; 87 void AddSignalTree( TTree* signal, Double_t weight, const TString& treetype );; 88 ; 89 // ... depreciated, kept for backwards compatibility; 90 void SetSignalTree( TTree* signal, Double_t weight=1.0);; 91 ; 92 void AddBackgroundTree( TTree* background, Double_t weight=1.0, Types::ETreeType treetype = Types::kMaxTreeType );; 93 void AddBackgroundTree( TString datFileB, Double_t weight=1.0, Types::ETreeType treetype = Types::kMaxTreeType );; 94 void AddBackgroundTree( TTree* background, Double_t weight, const TString & treetype );; 95 ; 96 // ... depreciated, kept for backwards compatibility; 97 void SetBackgroundTree( TTree* background, Double_t weight=1.0 );; 98 ; 99 void SetSignalWeightExpression( const TString& variable );; 100 void SetBackgroundWeightExpression( const TString& variable );; 101 ; 102 // special case: regression; 103 void AddRegressionTree( TTree* tree, Double_t weight = 1.0,; 104 Types::ETreeType treetype = Types::kMaxTreeType ) {; 105 AddTree( tree, ""Regression"", weight, """", treetype );; 106 }; 107 ; 108 // general; 109 ; 110 // Data input related; 111 void SetTree( TTree* tree, const TString& className, Double_t weight ); ///< deprecated; 112 void AddTree( TTree* tree, const TString& className, Double_t weight=1.0,; 113 const TCut& cut = """",; 114 Types::ETreeType tt = Types::kMaxTreeType );; 115 void AddTree( TTree* tree, const TString& className, Double_t weight, const TCut& cut, const TString& treeType );; 116 ; 117 // set input variable; 118 void SetInputVariables ( std::vector<TString>* theVariables ); ///< deprecated; 119 ; 120 void AddVariable ( const TString& expression, const TString& title, const TString& unit,; 121 char type='F', Double_t min = 0, Double_t max = 0 );; 122 void AddVariable ( const TString& expression, char ",MatchSource.WIKI,doc/master/DataLoader_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8h_source.html
Performance,load,load,". ROOT: tmva/tmva/inc/TMVA/DataLoader.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DataLoader.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag, Omar Zapata, Lorenzo Moneta, Sergei Gleyzer; 3//NOTE: Based on TMVA::Factory; 4 ; 5/**********************************************************************************; 6 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 7 * Package: TMVA *; 8 * Class : DataLoader *; 9 * *; 10 * *; 11 * Description: *; 12 * This is a class to load datasets into every booked method *; 13 * *; 14 * Authors (alphabetical): *; 15 * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; 16 * Omar Zapata <andresete.chaos@gmail.com> - ITM/UdeA, Colombia *; 17 * Sergei Gleyzer<sergei.gleyzer@cern.ch> - CERN, Switzerland *; 18 * *; 19 * Copyright (c) 2005-2011: *; 20 * CERN, Switzerland *; 21 * ITM/UdeA, Colombia *; 22 * *; 23 * Redistribution and use in source and binary forms, with or without *; 24 * modification, are permitted according to the terms listed in LICENSE *; 25 * (see tmva/doc/LICENSE) *; 26 **********************************************************************************/; 27 ; 28#ifndef ROOT_TMVA_DataLoader; 29#define ROOT_TMVA_DataLoader; 30 ; 31#include <vector>; 32#include ""TCut.h""; 33 ; 34#include ""TMVA/Configurable.h""; 35#include ""TMVA/Types.h""; 36#include ""TMVA/DataSet.h""; 37 ; 38class TFile;; 39class TTree;; 40class TH2;; 41 ; 42namespace TMVA {; 43 ; 44 class CvSplit;; 45 class DataInputHandler;; 46 class DataSetInfo;; 47 class DataSetManager;; 48 class VariableTransformBase;; 49 ; 50 class DataLoader : public Configurable {; 51 public:; 52 ; 53 DataLoader(TString thedlName=""default"");; 54 ; 55 // default destructor; 56 virtual ~DataLoader();; 57 ; 58 ; 59 // add events to training and testing trees; 60 void Ad",MatchSource.WIKI,doc/master/DataLoader_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8h_source.html
Security,validat,validation,,MatchSource.WIKI,doc/master/DataLoader_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8h_source.html
Testability,test,testing,"RN, Switzerland *; 16 * Omar Zapata <andresete.chaos@gmail.com> - ITM/UdeA, Colombia *; 17 * Sergei Gleyzer<sergei.gleyzer@cern.ch> - CERN, Switzerland *; 18 * *; 19 * Copyright (c) 2005-2011: *; 20 * CERN, Switzerland *; 21 * ITM/UdeA, Colombia *; 22 * *; 23 * Redistribution and use in source and binary forms, with or without *; 24 * modification, are permitted according to the terms listed in LICENSE *; 25 * (see tmva/doc/LICENSE) *; 26 **********************************************************************************/; 27 ; 28#ifndef ROOT_TMVA_DataLoader; 29#define ROOT_TMVA_DataLoader; 30 ; 31#include <vector>; 32#include ""TCut.h""; 33 ; 34#include ""TMVA/Configurable.h""; 35#include ""TMVA/Types.h""; 36#include ""TMVA/DataSet.h""; 37 ; 38class TFile;; 39class TTree;; 40class TH2;; 41 ; 42namespace TMVA {; 43 ; 44 class CvSplit;; 45 class DataInputHandler;; 46 class DataSetInfo;; 47 class DataSetManager;; 48 class VariableTransformBase;; 49 ; 50 class DataLoader : public Configurable {; 51 public:; 52 ; 53 DataLoader(TString thedlName=""default"");; 54 ; 55 // default destructor; 56 virtual ~DataLoader();; 57 ; 58 ; 59 // add events to training and testing trees; 60 void AddSignalTrainingEvent ( const std::vector<Double_t>& event, Double_t weight = 1.0 );; 61 void AddBackgroundTrainingEvent( const std::vector<Double_t>& event, Double_t weight = 1.0 );; 62 void AddSignalTestEvent ( const std::vector<Double_t>& event, Double_t weight = 1.0 );; 63 void AddBackgroundTestEvent ( const std::vector<Double_t>& event, Double_t weight = 1.0 );; 64 void AddTrainingEvent( const TString& className, const std::vector<Double_t>& event, Double_t weight );; 65 void AddTestEvent ( const TString& className, const std::vector<Double_t>& event, Double_t weight );; 66 void AddEvent ( const TString& className, Types::ETreeType tt, const std::vector<Double_t>& event, Double_t weight );; 67 Bool_t UserAssignEvents(UInt_t clIndex);; 68 TTree* CreateEventAssignTrees( const TString& name );; 69 ; 70",MatchSource.WIKI,doc/master/DataLoader_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataLoader_8h_source.html
Availability,error,error,"OOT: math/mathcore/inc/Fit/DataOptions.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DataOptions.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: L. Moneta Wed Aug 30 11:04:59 2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class DataOptions; 12 ; 13#ifndef ROOT_Fit_DataOptions; 14#define ROOT_Fit_DataOptions; 15 ; 16 ; 17namespace ROOT {; 18 ; 19 namespace Fit {; 20 ; 21 ; 22//___________________________________________________________________________________; 23/**; 24 DataOptions : simple structure holding the options on how the data are filled; 25 ; 26 @ingroup FitData; 27*/; 28struct DataOptions {; 29 ; 30 ; 31 /**; 32 Default constructor: use the default options; 33 */; 34 DataOptions () :; 35 fIntegral(false),; 36 fBinVolume(false),; 37 fNormBinVolume(false),; 38 fUseEmpty(false),; 39 fUseRange(false),; 40 fErrors1(false),; 41 fExpErrors(false),; 42 fCoordErrors(true),; 43 fAsymErrors(true); 44 {}; 45 ; 46 ; 47 bool fIntegral; ///< use integral of bin content instead of bin center (default is false); 48 bool fBinVolume; ///< normalize data by the bin volume (it is used in the Poisson likelihood fits); 49 bool fNormBinVolume; ///< normalize data by a normalized the bin volume (bin volume divided by a reference value); 50 bool fUseEmpty; ///< use empty bins (default is false) with a fixed error of 1; 51 bool fUseRange; ///< use the function range when creating the fit data (default is false); 52 bool fErrors1; ///< use all errors equal to 1, i.e. fit without errors (default is false); 53 bool fExpErrors; ///< use expected errors from the function and not from the data; 54 bool fCoordErrors; ///< use errors on the x coordinates when available (default is true); 55 bool f",MatchSource.WIKI,doc/master/DataOptions_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataOptions_8h_source.html
Usability,simpl,simple,"OOT: math/mathcore/inc/Fit/DataOptions.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DataOptions.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: L. Moneta Wed Aug 30 11:04:59 2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class DataOptions; 12 ; 13#ifndef ROOT_Fit_DataOptions; 14#define ROOT_Fit_DataOptions; 15 ; 16 ; 17namespace ROOT {; 18 ; 19 namespace Fit {; 20 ; 21 ; 22//___________________________________________________________________________________; 23/**; 24 DataOptions : simple structure holding the options on how the data are filled; 25 ; 26 @ingroup FitData; 27*/; 28struct DataOptions {; 29 ; 30 ; 31 /**; 32 Default constructor: use the default options; 33 */; 34 DataOptions () :; 35 fIntegral(false),; 36 fBinVolume(false),; 37 fNormBinVolume(false),; 38 fUseEmpty(false),; 39 fUseRange(false),; 40 fErrors1(false),; 41 fExpErrors(false),; 42 fCoordErrors(true),; 43 fAsymErrors(true); 44 {}; 45 ; 46 ; 47 bool fIntegral; ///< use integral of bin content instead of bin center (default is false); 48 bool fBinVolume; ///< normalize data by the bin volume (it is used in the Poisson likelihood fits); 49 bool fNormBinVolume; ///< normalize data by a normalized the bin volume (bin volume divided by a reference value); 50 bool fUseEmpty; ///< use empty bins (default is false) with a fixed error of 1; 51 bool fUseRange; ///< use the function range when creating the fit data (default is false); 52 bool fErrors1; ///< use all errors equal to 1, i.e. fit without errors (default is false); 53 bool fExpErrors; ///< use expected errors from the function and not from the data; 54 bool fCoordErrors; ///< use errors on the x coordinates when available (default is true); 55 bool f",MatchSource.WIKI,doc/master/DataOptions_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataOptions_8h_source.html
Energy Efficiency,allocate,allocated,"; 60 }; 61 if (ymin < ymax) {; 62 RangeSet ry(1);; 63 ry[0] = std::make_pair(ymin, ymax);; 64 fRanges[1] = ry;; 65 }; 66 if (zmin < zmax) {; 67 RangeSet rz(1);; 68 rz[0] = std::make_pair(zmin, zmax);; 69 fRanges[2] = rz;; 70 }; 71}; 72 ; 73bool lessRange( const std::pair<double,double> & r1, const std::pair<double,double> & r2 ) {; 74 // compare ranges using max position so in case of included ranges smaller one comes first; 75 return r1.second < r2.second;; 76}; 77 ; 78std::pair<double, double> DataRange::operator() (unsigned int icoord,unsigned int irange) const {; 79 if ( Size(icoord) > irange ); 80 return fRanges[icoord].at(irange);; 81 else if (irange == 0) {; 82 // return [-inf +inf] for the other dimension; 83 double xmin = 0; double xmax = 0;; 84 GetInfRange(xmin,xmax);; 85 return std::make_pair(xmin,xmax);; 86 }; 87 else {; 88 // in case the irange-th does not exist for the given coordinate; 89 MATH_ERROR_MSG(""DataRange::operator()"",""invalid range number - return (0,0)"");; 90 return std::pair<double,double>(0,0);; 91 }; 92}; 93 ; 94void DataRange::AddRange(unsigned int icoord , double xmin, double xmax ) {; 95 // add a range [xmin,xmax] for the new coordinate icoord; 96 ; 97 if (xmin >= xmax) return; // no op in case of bad values; 98 ; 99 // case the coordinate is larger than the current allocated vector size; 100 if (icoord >= fRanges.size() ) {; 101 RangeSet rx(1);; 102 rx[0] = std::make_pair(xmin, xmax);; 103 fRanges.resize(icoord+1);; 104 fRanges[icoord] = rx;; 105 return;; 106 }; 107 RangeSet & rs = fRanges[icoord];; 108 // case the vector of the ranges is empty in the given coordinate; 109 if ( rs.empty()) {; 110 rs.push_back(std::make_pair(xmin,xmax) );; 111 return;; 112 }; 113 // case of an already existing range; 114 // need to establish a policy (use OR or AND ); 115 ; 116 CleanRangeSet(icoord,xmin,xmax);; 117 // add the new one; 118 rs.push_back(std::make_pair(xmin,xmax) );; 119 // sort range in increasing values of xmax; 120 std::sort( rs.begin(",MatchSource.WIKI,doc/master/DataRange_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataRange_8cxx_source.html
Usability,clear,clear,"ARN_MSG(""DataRange::SetRange"",""remove existing range and keep only the set one"");; 141 rs.resize(1);; 142 rs[0] = std::make_pair(xmin, xmax);; 143 return;; 144}; 145 ; 146bool DataRange::IsInside(double x, unsigned int icoord ) const {; 147 // check if a point is in range; 148 ; 149 if (Size(icoord) == 0) return true; // no range existing (is like -inf, +inf); 150 const RangeSet & ranges = fRanges[icoord];; 151 for (RangeSet::const_iterator itr = ranges.begin(); itr != ranges.end(); ++itr) {; 152 if ( x < (*itr).first ) return false;; 153 if ( x <= (*itr).second) return true;; 154 }; 155 return false; // point is larger than last xmax; 156}; 157 ; 158void DataRange::Clear(unsigned int icoord ) {; 159 // remove all ranges for coordinate icoord; 160 if (Size(icoord) == 0) return; // no op in this case; 161 fRanges[icoord].clear();; 162}; 163 ; 164 ; 165void DataRange::CleanRangeSet(unsigned int icoord, double xmin, double xmax) {; 166 // remove all the existing ranges between xmin and xmax; 167 // called when a new range is inserted; 168 ; 169 // loop on existing ranges; 170 RangeSet & ranges = fRanges[icoord];; 171 for (RangeSet::iterator itr = ranges.begin(); itr != ranges.end(); ++itr) {; 172 // delete included ranges; 173 if ( itr->first >= xmin && itr->second <= xmax) {; 174 itr = ranges.erase(itr);; 175 // itr goes to next element, so go back before adding; 176 --itr;; 177 }; 178 }; 179 ; 180}; 181 ; 182void DataRange::GetInfRange(double &xmin, double &xmax) {; 183 // get the full range [-inf, +inf] for xmin and xmax; 184 xmin = -std::numeric_limits<double>::infinity();; 185 xmax = std::numeric_limits<double>::infinity();; 186}; 187 ; 188 } // end namespace Fit; 189 ; 190} // end namespace ROOT; 191 ; DataRange.h; Error.h; MATH_ERROR_MSG#define MATH_ERROR_MSG(loc, str)Definition Error.h:83; MATH_WARN_MSG#define MATH_WARN_MSG(loc, str)Definition Error.h:80; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefini",MatchSource.WIKI,doc/master/DataRange_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataRange_8cxx_source.html
Usability,clear,clear,"max] for the first and [ymin,ymax] for the second coordinate; 167 */; 168 void AddRange(double xmin, double xmax, double ymin, double ymax ) { AddRange(0,xmin,xmax); AddRange(1,ymin,ymax); }; 169 /**; 170 add a range [xmin,xmax] for the first and [ymin,ymax] for the second coordinate and; 171 [zmin,zmax] for the third coordinate; 172 */; 173 void AddRange(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax ) {; 174 AddRange(0,xmin,xmax); AddRange(1,ymin,ymax); AddRange(2,zmin,zmax); }; 175 ; 176 /**; 177 set a range [xmin,xmax] for the new coordinate icoord; 178 If more range exists for other coordinates, delete the existing one and use it the new one; 179 Use Add range if want to keep the union of the existing ranges; 180 */; 181 void SetRange(unsigned int icoord , double xmin, double xmax );; 182 ; 183 /**; 184 set a range [xmin,xmax] for the first coordinate icoord; 185 */; 186 void SetRange(double xmin, double xmax ) { SetRange(0,xmin,xmax); }; 187 /**; 188 set a range [xmin,xmax] for the first and [ymin,ymax] for the second coordinate; 189 */; 190 void SetRange(double xmin, double xmax, double ymin, double ymax ) { SetRange(0,xmin,xmax); SetRange(1,ymin,ymax); }; 191 /**; 192 set a range [xmin,xmax] for the first and [ymin,ymax] for the second coordinate and; 193 [zmin,zmax] for the third coordinate; 194 */; 195 void SetRange(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax ) {; 196 SetRange(0,xmin,xmax); SetRange(1,ymin,ymax); SetRange(2,zmin,zmax); }; 197 ; 198 /**; 199 clear all ranges in one coordinate (is now -inf, +inf); 200 */; 201 void Clear (unsigned int icoord = 0 );; 202 ; 203 /**; 204 check if a point is inside the range for the given coordinate; 205 */; 206 bool IsInside(double x, unsigned int icoord = 0) const;; 207 ; 208 /**; 209 check if a multi-dimpoint is inside the range; 210 */; 211 bool IsInside(const double *x) const {; 212 bool ret = true;; 213 for (unsigned int idim = 0; idim < fRanges.",MatchSource.WIKI,doc/master/DataRange_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataRange_8h_source.html
Availability,error,errors,"ctor( TMVA::DataSetInfo& dsi,; 729 TMVA::DataInputHandler& dataInput,; 730 EventVectorOfClassesOfTreeType& eventsmap,; 731 EvtStatsPerClass& eventCounts); 732{; 733 const UInt_t nclasses = dsi.GetNClasses();; 734 ; 735 eventsmap[ Types::kTraining ] = EventVectorOfClasses(nclasses);; 736 eventsmap[ Types::kTesting ] = EventVectorOfClasses(nclasses);; 737 eventsmap[ Types::kMaxTreeType ] = EventVectorOfClasses(nclasses);; 738 ; 739 // create the type, weight and boostweight branches; 740 const UInt_t nvars = dsi.GetNVariables();; 741 const UInt_t ntgts = dsi.GetNTargets();; 742 const UInt_t nvis = dsi.GetNSpectators();; 743 ; 744 for (size_t i=0; i<nclasses; i++) {; 745 eventCounts[i].varAvLength = new Float_t[nvars];; 746 for (UInt_t ivar=0; ivar<nvars; ivar++); 747 eventCounts[i].varAvLength[ivar] = 0;; 748 }; 749 ; 750 //Bool_t haveArrayVariable = kFALSE;; 751 //Bool_t *varIsArray = new Bool_t[nvars];; 752 ; 753 // If there are NaNs in the tree:; 754 // => warn if used variables/cuts/weights contain nan (no problem if event is cut out); 755 // => fatal if cut value is nan or (event not cut out and nans somewhere); 756 // Count & collect all these warnings/errors and output them at the end.; 757 std::map<TString, int> nanInfWarnings;; 758 std::map<TString, int> nanInfErrors;; 759 ; 760 // if we work with chains we need to remember the current tree if; 761 // the chain jumps to a new tree we have to reset the formulas; 762 for (UInt_t cl=0; cl<nclasses; cl++) {; 763 ; 764 //Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create training and testing trees -- looping over class \"""" << dsi.GetClassInfo(cl)->GetName() << ""\"" ..."" << Endl;; 765 ; 766 EventStats& classEventCounts = eventCounts[cl];; 767 ; 768 // info output for weights; 769 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 770 << ""\tWeight expression for class \'"" << dsi.GetClassInfo(cl)->GetName() << ""\': \""""; 771 << dsi.GetClassInfo(cl)->GetWeight() << ""\"""" << Endl;; 772 ; 773 // used",MatchSource.WIKI,doc/master/DataSetFactory_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html
Deployability,integrat,integrated,". ROOT: tmva/tmva/src/DataSetFactory.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DataSetFactory.cxx. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Helge Voss; 3 ; 4/*****************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : DataSetFactory *; 8 * *; 9 * *; 10 * Description: *; 11 * Implementation (see header for description) *; 12 * *; 13 * Authors (alphabetical): *; 14 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 15 * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; 16 * Joerg Stelzer <Joerg.Stelzer@cern.ch> - MSU, USA *; 17 * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; 18 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 19 * *; 20 * Copyright (c) 2009: *; 21 * CERN, Switzerland *; 22 * MPI-K Heidelberg, Germany *; 23 * U. of Bonn, Germany *; 24 * Redistribution and use in source and binary forms, with or without *; 25 * modification, are permitted according to the terms listed in LICENSE *; 26 * (see tmva/doc/LICENSE) *; 27 *****************************************************************************/; 28 ; 29/*! \class TMVA::DataSetFactory; 30\ingroup TMVA; 31 ; 32Class that contains all the data information; 33 ; 34*/; 35 ; 36#include <assert.h>; 37 ; 38#include <map>; 39#include <vector>; 40#include <iomanip>; 41#include <iostream>; 42 ; 43#include <algorithm>; 44#include <functional>; 45#include <numeric>; 46#include <random>; 47 ; 48#include ""TMVA/DataSetFactory.h""; 49 ; 50#include ""TEventList.h""; 51#include ""TFile.h""; 52#include ""TRandom3.h""; 53#include ""TMatrixF.h""; 54#include ""TVectorF.h""; 55#include ""TMath.h""; 56#include ""TTree.h""; 57#include ""TBranch.h""; 58 ; 59#include ""TMVA/MsgLogger.h""; 60#inclu",MatchSource.WIKI,doc/master/DataSetFactory_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html
Energy Efficiency,allocate,allocate,"data()Return number of available instances in the formula.Definition TTreeFormula.cxx:4485; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::SetBranchStatusvirtual void SetBranchStatus(const char *bname, bool status=true, UInt_t *found=nullptr)Set branch status to Process or DoNotProcess.Definition TTree.cxx:8534; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::GetCurrentFileTFile * GetCurrentFile() constReturn pointer to the current file.Definition TTree.cxx:5479; TTree::GetDirectoryTDirectory * GetDirectory() constDefinition TTree.h:462; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TTree::GetTreevirtual TTree * GetTree() constDefinition TTree.h:557; TTree::LoadTreevirtual Long64_t LoadTree(Long64_t entry)Set current entry.Definition TTree.cxx:6473; TTree::ResetBranchAddressesvirtual void ResetBranchAddresses()Tell all of our branches to drop their current objects and allocate new ones.Definition TTree.cxx:8075; TVectorT< Double_t >; bool; double; int; unsigned int; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::LargestCommonDividerInt_t LargestCommonDivider(Int_t a, Int_t b)Definition DataSetFactory.cxx:80; TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; TMath::IsNaNBool_t IsNaN(Double_t x)Definition TMath.h:892; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::FiniteInt_t Finite(Double_t x)Check if it is finite with a mask in order to be consistent in presence of fast math.Definition TMath.h:770; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; v@ vDefinition rootcling_impl.cxx:3699; whatstatic const char * whatDefinition stlLoader.cc:5; vecDefinition civetweb.c:1855; Types.h. tmvatmvasrcDataSetFactory.cxx. ROOT master - Refe",MatchSource.WIKI,doc/master/DataSetFactory_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html
Integrability,integrat,integrated,". ROOT: tmva/tmva/src/DataSetFactory.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DataSetFactory.cxx. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Helge Voss; 3 ; 4/*****************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : DataSetFactory *; 8 * *; 9 * *; 10 * Description: *; 11 * Implementation (see header for description) *; 12 * *; 13 * Authors (alphabetical): *; 14 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 15 * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; 16 * Joerg Stelzer <Joerg.Stelzer@cern.ch> - MSU, USA *; 17 * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; 18 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 19 * *; 20 * Copyright (c) 2009: *; 21 * CERN, Switzerland *; 22 * MPI-K Heidelberg, Germany *; 23 * U. of Bonn, Germany *; 24 * Redistribution and use in source and binary forms, with or without *; 25 * modification, are permitted according to the terms listed in LICENSE *; 26 * (see tmva/doc/LICENSE) *; 27 *****************************************************************************/; 28 ; 29/*! \class TMVA::DataSetFactory; 30\ingroup TMVA; 31 ; 32Class that contains all the data information; 33 ; 34*/; 35 ; 36#include <assert.h>; 37 ; 38#include <map>; 39#include <vector>; 40#include <iomanip>; 41#include <iostream>; 42 ; 43#include <algorithm>; 44#include <functional>; 45#include <numeric>; 46#include <random>; 47 ; 48#include ""TMVA/DataSetFactory.h""; 49 ; 50#include ""TEventList.h""; 51#include ""TFile.h""; 52#include ""TRandom3.h""; 53#include ""TMatrixF.h""; 54#include ""TVectorF.h""; 55#include ""TMath.h""; 56#include ""TTree.h""; 57#include ""TBranch.h""; 58 ; 59#include ""TMVA/MsgLogger.h""; 60#inclu",MatchSource.WIKI,doc/master/DataSetFactory_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html
Modifiability,variab,variables,"Set * ds = BuildInitialDataSet( dsi, dataInput );; 128 ; 129 if (ds->GetNEvents() > 1 && fComputeCorrelations ) {; 130 CalcMinMax(ds,dsi);; 131 ; 132 // from the final dataset build the correlation matrix; 133 for (UInt_t cl = 0; cl< dsi.GetNClasses(); cl++) {; 134 const TString className = dsi.GetClassInfo(cl)->GetName();; 135 dsi.SetCorrelationMatrix( className, CalcCorrelationMatrix( ds, cl ) );; 136 if (fCorrelations) {; 137 dsi.PrintCorrelationMatrix(className);; 138 }; 139 }; 140 //Log() << kHEADER << Endl;; 141 Log() << kHEADER << Form(""[%s] : "",dsi.GetName()) << "" "" << Endl << Endl;; 142 }; 143 ; 144 return ds;; 145}; 146 ; 147////////////////////////////////////////////////////////////////////////////////; 148 ; 149TMVA::DataSet* TMVA::DataSetFactory::BuildDynamicDataSet( TMVA::DataSetInfo& dsi ); 150{; 151 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""Build DataSet consisting of one Event with dynamically changing variables"" << Endl;; 152 DataSet* ds = new DataSet(dsi);; 153 ; 154 // create a DataSet with one Event which uses dynamic variables; 155 // (pointers to variables); 156 if(dsi.GetNClasses()==0){; 157 dsi.AddClass( ""data"" );; 158 dsi.GetClassInfo( ""data"" )->SetNumber(0);; 159 }; 160 ; 161 std::vector<Float_t*>* evdyn = new std::vector<Float_t*>(0);; 162 ; 163 std::vector<VariableInfo>& varinfos = dsi.GetVariableInfos();; 164 ; 165 if (varinfos.empty()); 166 Log() << kFATAL << Form(""Dataset[%s] : "",dsi.GetName()) << ""Dynamic data set cannot be built, since no variable informations are present. Apparently no variables have been set. This should not happen, please contact the TMVA authors."" << Endl;; 167 ; 168 std::vector<VariableInfo>::iterator it = varinfos.begin(), itEnd=varinfos.end();; 169 for (;it!=itEnd;++it) {; 170 Float_t* external=(Float_t*)(*it).GetExternalLink();; 171 if (external==0); 172 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""The link to the external variable is NULL while I am trying to build a dynamic",MatchSource.WIKI,doc/master/DataSetFactory_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html
Performance,perform,perform,"i = 0; bi<ttf->GetNcodes(); bi++); 469 tr->SetBranchStatus( ttf->GetLeaf(bi)->GetBranch()->GetName(), 1 );; 470 }; 471 }; 472 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""tree initialized"" << Endl;; 473 return;; 474}; 475 ; 476////////////////////////////////////////////////////////////////////////////////; 477/// compute covariance matrix; 478 ; 479void TMVA::DataSetFactory::CalcMinMax( DataSet* ds, TMVA::DataSetInfo& dsi ); 480{; 481 const UInt_t nvar = ds->GetNVariables();; 482 const UInt_t ntgts = ds->GetNTargets();; 483 const UInt_t nvis = ds->GetNSpectators();; 484 ; 485 Float_t *min = new Float_t[nvar];; 486 Float_t *max = new Float_t[nvar];; 487 Float_t *tgmin = new Float_t[ntgts];; 488 Float_t *tgmax = new Float_t[ntgts];; 489 Float_t *vmin = new Float_t[nvis];; 490 Float_t *vmax = new Float_t[nvis];; 491 ; 492 for (UInt_t ivar=0; ivar<nvar ; ivar++) { min[ivar] = FLT_MAX; max[ivar] = -FLT_MAX; }; 493 for (UInt_t ivar=0; ivar<ntgts; ivar++) { tgmin[ivar] = FLT_MAX; tgmax[ivar] = -FLT_MAX; }; 494 for (UInt_t ivar=0; ivar<nvis; ivar++) { vmin[ivar] = FLT_MAX; vmax[ivar] = -FLT_MAX; }; 495 ; 496 // perform event loop; 497 ; 498 for (Int_t i=0; i<ds->GetNEvents(); i++) {; 499 const Event * ev = ds->GetEvent(i);; 500 for (UInt_t ivar=0; ivar<nvar; ivar++) {; 501 Double_t v = ev->GetValue(ivar);; 502 if (v<min[ivar]) min[ivar] = v;; 503 if (v>max[ivar]) max[ivar] = v;; 504 }; 505 for (UInt_t itgt=0; itgt<ntgts; itgt++) {; 506 Double_t v = ev->GetTarget(itgt);; 507 if (v<tgmin[itgt]) tgmin[itgt] = v;; 508 if (v>tgmax[itgt]) tgmax[itgt] = v;; 509 }; 510 for (UInt_t ivis=0; ivis<nvis; ivis++) {; 511 Double_t v = ev->GetSpectator(ivis);; 512 if (v<vmin[ivis]) vmin[ivis] = v;; 513 if (v>vmax[ivis]) vmax[ivis] = v;; 514 }; 515 }; 516 ; 517 for (UInt_t ivar=0; ivar<nvar; ivar++) {; 518 dsi.GetVariableInfo(ivar).SetMin(min[ivar]);; 519 dsi.GetVariableInfo(ivar).SetMax(max[ivar]);; 520 if( TMath::Abs(max[ivar]-min[ivar]) <= FLT_MIN ); 521 Log() << kWARNING <<",MatchSource.WIKI,doc/master/DataSetFactory_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html
Safety,abort,abort,"were encountered"" << Endl;; 845 Log() << Form(""Dataset[%s] : "",dsi.GetName())<< "" location of error: event "" << evtIdx; 846 << "" in tree "" << currentInfo.GetTree()->GetName(); 847 << "" of file "" << currentInfo.GetTree()->GetCurrentFile()->GetName() << Endl;; 848 Log() << Form(""Dataset[%s] : "",dsi.GetName())<< "" expression "" << inputFormula->GetTitle() << "" has ""; 849 << Form(""Dataset[%s] : "",dsi.GetName()) << ndata << "" entries, while"" << Endl;; 850 Log() << Form(""Dataset[%s] : "",dsi.GetName())<< "" expression "" << fInputTableFormulas[prevArrExpr].first->GetTitle() << "" has ""; 851 << Form(""Dataset[%s] : "",dsi.GetName())<< fInputTableFormulas[prevArrExpr].first->GetNdata() << "" entries"" << Endl;; 852 Log() << kFATAL << Form(""Dataset[%s] : "",dsi.GetName())<< ""Need to abort"" << Endl;; 853 }; 854 }; 855 ; 856 // now we read the information; 857 for (Int_t idata = 0; idata<sizeOfArrays; idata++) {; 858 Bool_t contains_NaN_or_inf = kFALSE;; 859 ; 860 auto checkNanInf = [&](std::map<TString, int> &msgMap, Float_t value, const char *what, const char *formulaTitle) {; 861 if (TMath::IsNaN(value)) {; 862 contains_NaN_or_inf = kTRUE;; 863 ++msgMap[TString::Format(""Dataset[%s] : %s expression resolves to indeterminate value (NaN): %s"", dsi.GetName(), what, formulaTitle)];; 864 } else if (!TMath::Finite(value)) {; 865 contains_NaN_or_inf = kTRUE;; 866 ++msgMap[TString::Format(""Dataset[%s] : %s expression resolves to infinite value (+inf or -inf): %s"", dsi.GetName(), what, formulaTitle)];; 867 }; 868 };; 869 ; 870 TTreeFormula* formula = 0;; 871 ; 872 // the cut expression; 873 Double_t cutVal = 1.;; 874 formula = fCutFormulas[cl];; 875 if (formula) {; 876 Int_t ndata = formula->GetNdata();; 877 cutVal = (ndata==1 ?; 878 formula->EvalInstance(0) :; 879 formula->EvalInstance(idata));; 880 checkNanInf(nanInfErrors, cutVal, ""Cut"", formula->GetTitle());; 881 }; 882 ; 883 // if event is cut out, add to warnings, else add to errors.; 884 auto &nanMessages = cutVal < 0.5 ? nanInfWarnings",MatchSource.WIKI,doc/master/DataSetFactory_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html
Security,validat,validation,"8 for (jvar=ivar+1; jvar<nvar; jvar++); 619 mat2(jvar, ivar) = mat2(ivar, jvar); // symmetric matrix; 620 ; 621 ; 622 // variance-covariance; 623 for (ivar=0; ivar<nvar; ivar++) {; 624 for (jvar=0; jvar<nvar; jvar++) {; 625 (*mat)(ivar, jvar) = mat2(ivar, jvar)/ic - vec(ivar)*vec(jvar)/(ic*ic);; 626 }; 627 }; 628 ; 629 return mat;; 630}; 631 ; 632// --------------------------------------- new versions; 633 ; 634////////////////////////////////////////////////////////////////////////////////; 635/// the dataset splitting; 636 ; 637void; 638TMVA::DataSetFactory::InitOptions( TMVA::DataSetInfo& dsi,; 639 EvtStatsPerClass& nEventRequests,; 640 TString& normMode,; 641 UInt_t& splitSeed,; 642 TString& splitMode,; 643 TString& mixMode); 644{; 645 Configurable splitSpecs( dsi.GetSplitOptions() );; 646 splitSpecs.SetConfigName(""DataSetFactory"");; 647 splitSpecs.SetConfigDescription( ""Configuration options given in the \""PrepareForTrainingAndTesting\"" call; these options define the creation of the data sets used for training and expert validation by TMVA"" );; 648 ; 649 splitMode = ""Random""; // the splitting mode; 650 splitSpecs.DeclareOptionRef( splitMode, ""SplitMode"",; 651 ""Method of picking training and testing events (default: random)"" );; 652 splitSpecs.AddPreDefVal(TString(""Random""));; 653 splitSpecs.AddPreDefVal(TString(""Alternate""));; 654 splitSpecs.AddPreDefVal(TString(""Block""));; 655 ; 656 mixMode = ""SameAsSplitMode""; // the splitting mode; 657 splitSpecs.DeclareOptionRef( mixMode, ""MixMode"",; 658 ""Method of mixing events of different classes into one dataset (default: SameAsSplitMode)"" );; 659 splitSpecs.AddPreDefVal(TString(""SameAsSplitMode""));; 660 splitSpecs.AddPreDefVal(TString(""Random""));; 661 splitSpecs.AddPreDefVal(TString(""Alternate""));; 662 splitSpecs.AddPreDefVal(TString(""Block""));; 663 ; 664 splitSeed = 100;; 665 splitSpecs.DeclareOptionRef( splitSeed, ""SplitSeed"",; 666 ""Seed for random event shuffling"" );; 667 ; 668 normMode = ""EqualNumEvents""; // the wei",MatchSource.WIKI,doc/master/DataSetFactory_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html
Testability,assert,assert,"; 4/*****************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : DataSetFactory *; 8 * *; 9 * *; 10 * Description: *; 11 * Implementation (see header for description) *; 12 * *; 13 * Authors (alphabetical): *; 14 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 15 * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; 16 * Joerg Stelzer <Joerg.Stelzer@cern.ch> - MSU, USA *; 17 * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; 18 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 19 * *; 20 * Copyright (c) 2009: *; 21 * CERN, Switzerland *; 22 * MPI-K Heidelberg, Germany *; 23 * U. of Bonn, Germany *; 24 * Redistribution and use in source and binary forms, with or without *; 25 * modification, are permitted according to the terms listed in LICENSE *; 26 * (see tmva/doc/LICENSE) *; 27 *****************************************************************************/; 28 ; 29/*! \class TMVA::DataSetFactory; 30\ingroup TMVA; 31 ; 32Class that contains all the data information; 33 ; 34*/; 35 ; 36#include <assert.h>; 37 ; 38#include <map>; 39#include <vector>; 40#include <iomanip>; 41#include <iostream>; 42 ; 43#include <algorithm>; 44#include <functional>; 45#include <numeric>; 46#include <random>; 47 ; 48#include ""TMVA/DataSetFactory.h""; 49 ; 50#include ""TEventList.h""; 51#include ""TFile.h""; 52#include ""TRandom3.h""; 53#include ""TMatrixF.h""; 54#include ""TVectorF.h""; 55#include ""TMath.h""; 56#include ""TTree.h""; 57#include ""TBranch.h""; 58 ; 59#include ""TMVA/MsgLogger.h""; 60#include ""TMVA/Configurable.h""; 61#include ""TMVA/VariableIdentityTransform.h""; 62#include ""TMVA/VariableDecorrTransform.h""; 63#include ""TMVA/VariablePCATransform.h""; 64#include ""TMVA/DataSet.h""; 65#include ""TMVA/DataSetInfo.h""; 66#include ""TMVA/DataInputHandler.h""; 67#include ""TMVA/Event.h""; 68 ; 69#include ""TMVA/Too",MatchSource.WIKI,doc/master/DataSetFactory_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html
Usability,clear,clear,"nstance when changing from; 289/// signal to background tree, or using TChains as input) The; 290/// TTreeFormulas, that hold the input expressions need to be; 291/// re-associated with the new tree, which is done here; 292 ; 293void TMVA::DataSetFactory::ChangeToNewTree( TreeInfo& tinfo, const DataSetInfo & dsi ); 294{; 295 TTree *tr = tinfo.GetTree()->GetTree();; 296 ; 297 //tr->SetBranchStatus(""*"",1); // nor needed when using TTReeFormula; 298 tr->ResetBranchAddresses();; 299 ; 300 Bool_t hasDollar = kTRUE; // Set to false if wants to enable only some branch in the tree; 301 ; 302 // 1) the input variable formulas; 303 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" create input formulas for tree "" << tr->GetName() << Endl;; 304 std::vector<TTreeFormula*>::const_iterator formIt, formItEnd;; 305 for (formIt = fInputFormulas.begin(), formItEnd=fInputFormulas.end(); formIt!=formItEnd; ++formIt) if (*formIt) delete *formIt;; 306 fInputFormulas.clear();; 307 TTreeFormula* ttf = 0;; 308 fInputTableFormulas.clear(); // this contains shallow pointer copies; 309 ; 310 bool firstArrayVar = kTRUE;; 311 int firstArrayVarIndex = -1;; 312 int arraySize = -1;; 313 for (UInt_t i = 0; i < dsi.GetNVariables(); i++) {; 314 ; 315 // create TTreeformula; 316 if (! dsi.IsVariableFromArray(i) ) {; 317 ttf = new TTreeFormula(Form(""Formula%s"", dsi.GetVariableInfo(i).GetInternalName().Data()),; 318 dsi.GetVariableInfo(i).GetExpression().Data(), tr);; 319 CheckTTreeFormula(ttf, dsi.GetVariableInfo(i).GetExpression(), hasDollar);; 320 fInputFormulas.emplace_back(ttf);; 321 fInputTableFormulas.emplace_back(std::make_pair(ttf, (Int_t) 0));; 322 } else {; 323 // it is a variable from an array; 324 if (firstArrayVar) {; 325 ; 326 // create a new TFormula; 327 ttf = new TTreeFormula(Form(""Formula%s"", dsi.GetVariableInfo(i).GetInternalName().Data()),; 328 dsi.GetVariableInfo(i).GetExpression().Data(), tr);; 329 CheckTTreeFormula(ttf, dsi.GetVariableInfo(i).GetExpression(), hasDollar);",MatchSource.WIKI,doc/master/DataSetFactory_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html
Deployability,integrat,integrated,". ROOT: tmva/tmva/inc/TMVA/DataSetFactory.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DataSetFactory.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Helge Voss; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : DataSetFactory *; 8 * *; 9 * *; 10 * Description: *; 11 * Contains all the data information *; 12 * *; 13 * Authors (alphabetical): *; 14 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 15 * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; 16 * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; 17 * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; 18 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 19 * *; 20 * Copyright (c) 2006: *; 21 * CERN, Switzerland *; 22 * MPI-K Heidelberg, Germany *; 23 * *; 24 * Redistribution and use in source and binary forms, with or without *; 25 * modification, are permitted according to the terms listed in LICENSE *; 26 * (see tmva/doc/LICENSE) *; 27 **********************************************************************************/; 28 ; 29#ifndef ROOT_TMVA_DataSetFactory; 30#define ROOT_TMVA_DataSetFactory; 31 ; 32//////////////////////////////////////////////////////////////////////////; 33// //; 34// DataSetFactory //; 35// //; 36// Class that contains all the data information //; 37// //; 38//////////////////////////////////////////////////////////////////////////; 39 ; 40#include <vector>; 41#include <map>; 42 ; 43#include ""TString.h""; 44#include ""TTree.h""; 45#include ""TCut.h""; 46#include ""TTreeFormula.h""; 47#include ""TMatrixDfwd.h""; 48#include ""TPrincipal.h""; 49#include ""TRandom3.h""; 50 ; 51#include ""TMVA/Types.h""; 52#include ""TMVA/VariableIn",MatchSource.WIKI,doc/master/DataSetFactory_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8h_source.html
Integrability,integrat,integrated,". ROOT: tmva/tmva/inc/TMVA/DataSetFactory.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DataSetFactory.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Helge Voss; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : DataSetFactory *; 8 * *; 9 * *; 10 * Description: *; 11 * Contains all the data information *; 12 * *; 13 * Authors (alphabetical): *; 14 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 15 * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; 16 * Peter Speckmayer <Peter.Speckmayer@cern.ch> - CERN, Switzerland *; 17 * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; 18 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 19 * *; 20 * Copyright (c) 2006: *; 21 * CERN, Switzerland *; 22 * MPI-K Heidelberg, Germany *; 23 * *; 24 * Redistribution and use in source and binary forms, with or without *; 25 * modification, are permitted according to the terms listed in LICENSE *; 26 * (see tmva/doc/LICENSE) *; 27 **********************************************************************************/; 28 ; 29#ifndef ROOT_TMVA_DataSetFactory; 30#define ROOT_TMVA_DataSetFactory; 31 ; 32//////////////////////////////////////////////////////////////////////////; 33// //; 34// DataSetFactory //; 35// //; 36// Class that contains all the data information //; 37// //; 38//////////////////////////////////////////////////////////////////////////; 39 ; 40#include <vector>; 41#include <map>; 42 ; 43#include ""TString.h""; 44#include ""TTree.h""; 45#include ""TCut.h""; 46#include ""TTreeFormula.h""; 47#include ""TMatrixDfwd.h""; 48#include ""TPrincipal.h""; 49#include ""TRandom3.h""; 50 ; 51#include ""TMVA/Types.h""; 52#include ""TMVA/VariableIn",MatchSource.WIKI,doc/master/DataSetFactory_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8h_source.html
Modifiability,variab,variables,"; 194 ; 195 // ------------------------; 196 ; 197 // auxiliary functions to compute correlations; 198 TMatrixD* CalcCorrelationMatrix( DataSet*, const UInt_t classNumber );; 199 TMatrixD* CalcCovarianceMatrix ( DataSet*, const UInt_t classNumber );; 200 void CalcMinMax ( DataSet*, DataSetInfo& dsi );; 201 ; 202 // resets branch addresses to current event; 203 void ResetBranchAndEventAddresses( TTree* );; 204 void ResetCurrentTree() { fCurrentTree = nullptr; }; 205 void ChangeToNewTree( TreeInfo&, const DataSetInfo & );; 206 Bool_t CheckTTreeFormula( TTreeFormula* ttf, const TString& expression, Bool_t& hasDollar );; 207 ; 208 // verbosity; 209 Bool_t Verbose() { return fVerbose; }; 210 ; 211 // data members; 212 ; 213 // verbosity; 214 Bool_t fVerbose; ///< Verbosity; 215 TString fVerboseLevel; ///< VerboseLevel; 216 ; 217 // Printing; 218 Bool_t fCorrelations = kFALSE; ///< Whether to print correlations or not; 219 Bool_t fComputeCorrelations = kFALSE; ///< Whether to force computation of correlations or not; 220 ; 221 Bool_t fScaleWithPreselEff; ///< how to deal with requested #events in connection with preselection cuts; 222 ; 223 // the event; 224 TTree* fCurrentTree; ///< the tree, events are currently read from; 225 UInt_t fCurrentEvtIdx; ///< the current event (to avoid reading of the same event); 226 ; 227 // the formulas for reading the original tree; 228 std::vector<TTreeFormula*> fInputFormulas; ///< input variables; 229 std::vector<std::pair<TTreeFormula*, Int_t>> fInputTableFormulas; ///<! input variables expression for arrays; 230 std::vector<TTreeFormula *> fTargetFormulas; ///< targets; 231 std::vector<TTreeFormula*> fCutFormulas; ///< cuts; 232 std::vector<TTreeFormula*> fWeightFormula; ///< weights; 233 std::vector<TTreeFormula*> fSpectatorFormulas; ///< spectators; 234 ; 235 MsgLogger* fLogger; ///<! message logger; 236 MsgLogger& Log() const { return *fLogger; }; 237 public:; 238 ClassDef(DataSetFactory, 2);; 239 };; 240}; 241 ; 242#endif; Event.",MatchSource.WIKI,doc/master/DataSetFactory_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8h_source.html
Safety,avoid,avoid,"; 194 ; 195 // ------------------------; 196 ; 197 // auxiliary functions to compute correlations; 198 TMatrixD* CalcCorrelationMatrix( DataSet*, const UInt_t classNumber );; 199 TMatrixD* CalcCovarianceMatrix ( DataSet*, const UInt_t classNumber );; 200 void CalcMinMax ( DataSet*, DataSetInfo& dsi );; 201 ; 202 // resets branch addresses to current event; 203 void ResetBranchAndEventAddresses( TTree* );; 204 void ResetCurrentTree() { fCurrentTree = nullptr; }; 205 void ChangeToNewTree( TreeInfo&, const DataSetInfo & );; 206 Bool_t CheckTTreeFormula( TTreeFormula* ttf, const TString& expression, Bool_t& hasDollar );; 207 ; 208 // verbosity; 209 Bool_t Verbose() { return fVerbose; }; 210 ; 211 // data members; 212 ; 213 // verbosity; 214 Bool_t fVerbose; ///< Verbosity; 215 TString fVerboseLevel; ///< VerboseLevel; 216 ; 217 // Printing; 218 Bool_t fCorrelations = kFALSE; ///< Whether to print correlations or not; 219 Bool_t fComputeCorrelations = kFALSE; ///< Whether to force computation of correlations or not; 220 ; 221 Bool_t fScaleWithPreselEff; ///< how to deal with requested #events in connection with preselection cuts; 222 ; 223 // the event; 224 TTree* fCurrentTree; ///< the tree, events are currently read from; 225 UInt_t fCurrentEvtIdx; ///< the current event (to avoid reading of the same event); 226 ; 227 // the formulas for reading the original tree; 228 std::vector<TTreeFormula*> fInputFormulas; ///< input variables; 229 std::vector<std::pair<TTreeFormula*, Int_t>> fInputTableFormulas; ///<! input variables expression for arrays; 230 std::vector<TTreeFormula *> fTargetFormulas; ///< targets; 231 std::vector<TTreeFormula*> fCutFormulas; ///< cuts; 232 std::vector<TTreeFormula*> fWeightFormula; ///< weights; 233 std::vector<TTreeFormula*> fSpectatorFormulas; ///< spectators; 234 ; 235 MsgLogger* fLogger; ///<! message logger; 236 MsgLogger& Log() const { return *fLogger; }; 237 public:; 238 ClassDef(DataSetFactory, 2);; 239 };; 240}; 241 ; 242#endif; Event.",MatchSource.WIKI,doc/master/DataSetFactory_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8h_source.html
Testability,log,logger,"; 194 ; 195 // ------------------------; 196 ; 197 // auxiliary functions to compute correlations; 198 TMatrixD* CalcCorrelationMatrix( DataSet*, const UInt_t classNumber );; 199 TMatrixD* CalcCovarianceMatrix ( DataSet*, const UInt_t classNumber );; 200 void CalcMinMax ( DataSet*, DataSetInfo& dsi );; 201 ; 202 // resets branch addresses to current event; 203 void ResetBranchAndEventAddresses( TTree* );; 204 void ResetCurrentTree() { fCurrentTree = nullptr; }; 205 void ChangeToNewTree( TreeInfo&, const DataSetInfo & );; 206 Bool_t CheckTTreeFormula( TTreeFormula* ttf, const TString& expression, Bool_t& hasDollar );; 207 ; 208 // verbosity; 209 Bool_t Verbose() { return fVerbose; }; 210 ; 211 // data members; 212 ; 213 // verbosity; 214 Bool_t fVerbose; ///< Verbosity; 215 TString fVerboseLevel; ///< VerboseLevel; 216 ; 217 // Printing; 218 Bool_t fCorrelations = kFALSE; ///< Whether to print correlations or not; 219 Bool_t fComputeCorrelations = kFALSE; ///< Whether to force computation of correlations or not; 220 ; 221 Bool_t fScaleWithPreselEff; ///< how to deal with requested #events in connection with preselection cuts; 222 ; 223 // the event; 224 TTree* fCurrentTree; ///< the tree, events are currently read from; 225 UInt_t fCurrentEvtIdx; ///< the current event (to avoid reading of the same event); 226 ; 227 // the formulas for reading the original tree; 228 std::vector<TTreeFormula*> fInputFormulas; ///< input variables; 229 std::vector<std::pair<TTreeFormula*, Int_t>> fInputTableFormulas; ///<! input variables expression for arrays; 230 std::vector<TTreeFormula *> fTargetFormulas; ///< targets; 231 std::vector<TTreeFormula*> fCutFormulas; ///< cuts; 232 std::vector<TTreeFormula*> fWeightFormula; ///< weights; 233 std::vector<TTreeFormula*> fSpectatorFormulas; ///< spectators; 234 ; 235 MsgLogger* fLogger; ///<! message logger; 236 MsgLogger& Log() const { return *fLogger; }; 237 public:; 238 ClassDef(DataSetFactory, 2);; 239 };; 240}; 241 ; 242#endif; Event.",MatchSource.WIKI,doc/master/DataSetFactory_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DataSetFactory_8h_source.html
Modifiability,config,configurable,"mple of a Graph with Error Bars"");; bar->AddButton(""tornado"", "".x graphics/tornado.C"", ""Examples of 3-D PolyMarkers"");; bar->AddButton(""geometry"", "".x geom/rootgeom.C"", ""Example of TGeoManager drawing"");; bar->AddButton(""file"", "".x io/file.C"", ""The ROOT File Format"");; bar->AddButton(""fildir"", "".x io/fildir.C"", ""The ROOT File, Directories and Keys"");; bar->AddButton(""tree"", "".x tree/tree.C"", ""The Tree Data Structure"");; bar->AddButton(""ntuple1"", "".x tree/ntuple1.C"", ""Ntuples and Selections"");; bar->AddButton(""benchmarks"", "".x legacy/benchmarks.C"", ""Runs several tests and produces an benchmark report"");; bar->AddButton(""rootmarks"", "".x legacy/rootmarks.C"", ""Prints an Estimated ROOTMARKS for Your Machine"");; bar->SetButtonWidth(90);; bar->Show();; gROOT->SaveContext();; }; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; gROOT#define gROOTDefinition TROOT.h:406; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TControlBar::Showvoid Show()Show control bar.Definition TControlBar.cxx:317; TControlBar::SetButtonWidthvoid SetButtonWidth(UInt_t width)Sets the width in pixels for control bar button.Definition TControlBar.cxx:277; TControlBar::AddButtonvoid AddButton(TControlBarButton *button)Add button.Definition TControlBar.cxx:141; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TSystem::GetDirNamevirtual TString GetDirName(const char *pathname)Return the directory name in pathname.Definition TSystem.cxx:1032; AuthorRene Brun ; Definition in file demos.C. tutorialsdemos.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxyg",MatchSource.WIKI,doc/master/demos_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/demos_8C.html
Security,access,access,"mple of a Graph with Error Bars"");; bar->AddButton(""tornado"", "".x graphics/tornado.C"", ""Examples of 3-D PolyMarkers"");; bar->AddButton(""geometry"", "".x geom/rootgeom.C"", ""Example of TGeoManager drawing"");; bar->AddButton(""file"", "".x io/file.C"", ""The ROOT File Format"");; bar->AddButton(""fildir"", "".x io/fildir.C"", ""The ROOT File, Directories and Keys"");; bar->AddButton(""tree"", "".x tree/tree.C"", ""The Tree Data Structure"");; bar->AddButton(""ntuple1"", "".x tree/ntuple1.C"", ""Ntuples and Selections"");; bar->AddButton(""benchmarks"", "".x legacy/benchmarks.C"", ""Runs several tests and produces an benchmark report"");; bar->AddButton(""rootmarks"", "".x legacy/rootmarks.C"", ""Prints an Estimated ROOTMARKS for Your Machine"");; bar->SetButtonWidth(90);; bar->Show();; gROOT->SaveContext();; }; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; gROOT#define gROOTDefinition TROOT.h:406; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TControlBar::Showvoid Show()Show control bar.Definition TControlBar.cxx:317; TControlBar::SetButtonWidthvoid SetButtonWidth(UInt_t width)Sets the width in pixels for control bar button.Definition TControlBar.cxx:277; TControlBar::AddButtonvoid AddButton(TControlBarButton *button)Add button.Definition TControlBar.cxx:141; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TSystem::GetDirNamevirtual TString GetDirName(const char *pathname)Return the directory name in pathname.Definition TSystem.cxx:1032; AuthorRene Brun ; Definition in file demos.C. tutorialsdemos.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxyg",MatchSource.WIKI,doc/master/demos_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/demos_8C.html
Testability,benchmark,benchmarks,"Options"");; bar->AddButton(""fillrandom"", "".x hist/fillrandom.C"", ""Histograms with Random Numbers from a Function"");; bar->AddButton(""fit1"", "".x fit/fit1.C"", ""A Simple Fitting Example"");; bar->AddButton(""multifit"", "".x fit/multifit.C"", ""Fitting in Subranges of Histograms"");; bar->AddButton(""h1ReadAndDraw"", "".x hist/h1ReadAndDraw.C"", ""Drawing Options for 1D Histograms"");; bar->AddButton(""graph"", "".x graphs/graph.C"", ""Example of a Simple Graph"");; bar->AddButton(""gerrors"", "".x graphs/gerrors.C"", ""Example of a Graph with Error Bars"");; bar->AddButton(""tornado"", "".x graphics/tornado.C"", ""Examples of 3-D PolyMarkers"");; bar->AddButton(""geometry"", "".x geom/rootgeom.C"", ""Example of TGeoManager drawing"");; bar->AddButton(""file"", "".x io/file.C"", ""The ROOT File Format"");; bar->AddButton(""fildir"", "".x io/fildir.C"", ""The ROOT File, Directories and Keys"");; bar->AddButton(""tree"", "".x tree/tree.C"", ""The Tree Data Structure"");; bar->AddButton(""ntuple1"", "".x tree/ntuple1.C"", ""Ntuples and Selections"");; bar->AddButton(""benchmarks"", "".x legacy/benchmarks.C"", ""Runs several tests and produces an benchmark report"");; bar->AddButton(""rootmarks"", "".x legacy/rootmarks.C"", ""Prints an Estimated ROOTMARKS for Your Machine"");; bar->SetButtonWidth(90);; bar->Show();; gROOT->SaveContext();; }; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; gROOT#define gROOTDefinition TROOT.h:406; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TControlBar::Showvoid Show()Show control bar.Definition TControlBar.cxx:317; TControlBar::SetButtonWidthvoid SetButtonWidth(UInt_t width)Sets the width in pixels for control bar button.Definition TControlBar.cxx:277; TControlBar::AddButtonvoid AddButton(TControlBarButton *button)Add button.Definition TControlBar.cxx:141; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() ",MatchSource.WIKI,doc/master/demos_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/demos_8C.html
Availability,alive,alive,"root/file.py') + '"" );', 'The ROOT File Format' ); bar.AddButton( 'fildir', r'TPython::Exec( ""' + to_run.format('../legacy/pyroot/fildir.py') + '"" );', 'The ROOT File, Directories and Keys' ); bar.AddButton( 'tree', r'TPython::Exec( ""' + to_run.format('../legacy/pyroot/tree.py') + '"" );', 'The Tree Data Structure' ); bar.AddButton( 'ntuple1', r'TPython::Exec( ""' + to_run.format('ntuple1.py') + '"" );', 'Ntuples and Selections' ); bar.AddButton( 'rootmarks', r'TPython::Exec( ""' + to_run.format('../legacy/pyroot/rootmarks.py') +'"" );', 'Prints an Estimated ROOTMARKS for Your Machine' ); bar.AddSeparator() # not implemented; bar.AddButton( 'make ntuple', r'TPython::Exec( ""' + to_run.format('mrt.py') + '"" );', 'Convert a text file to an ntuple' ); ; bar.Show(); ; ROOT.gROOT.SaveContext(); ; ; ## wait for input to keep the GUI (which lives on a ROOT event dispatcher) alive; if __name__ == '__main__':; rep = ''; while not rep in [ 'q', 'Q' ]:; rep = input( 'enter ""q"" to quit: ' ); if 1 < len(rep):; rep = rep[0]; inputOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void inputDefinition TGWin32VirtualXProxy.cxx:142; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t A",MatchSource.WIKI,doc/master/demo_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/demo_8py.html
Energy Efficiency,reduce,reduce,"emoved in ROOT 6.36. Please write your own plotting code inspired by the hf001 tutorial. ; Member RooStats::HistFactory::FormatFrameForLikelihood (RooPlot *frame, std::string xTitle=std::string(""#sigma / #sigma_{SM}""), std::string yTitle=std::string(""-log likelihood"")) R__DEPRECATED(6; Will be removed in ROOT 6.36. Please write your own plotting code inspired by the hf001 tutorial. ; Member RooStats::HistFactory::Measurement::SetExportOnly (bool ExportOnly) R__DEPRECATED(6; Will be removed in ROOT 6.36. ExportOnly() == true is the default since ROOT 6.34 and it can't be disabled anymore in 6.36. ; Member RooStats::MarkovChain::GetAsDataHist (const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const R__DEPRECATED(6; Will be removed in ROOT 6.36. Please implement this functionality by calling RooAbsData::reduce on the Markov Chain's RooDataSet* (obtained using MarkovChain::GetAsConstDataSet), and then obtaining its binned clone. ; Will be removed in ROOT 6.36. . Member RooStats::MarkovChain::GetAsDataSet (const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const R__DEPRECATED(6; Will be removed in ROOT 6.36. ; Will be removed in ROOT 6.36. Please implement this functionality by calling RooAbsData::reduce on the Markov Chain's RooDataSet* (obtained using MarkovChain::GetAsConstDataSet) . Member RooTemplateProxy< T >::lvptr (const LValue_t *) const; This function is unnecessary if the template parameter is RooAbsRealLValue (+ derived types) or RooAbsCategoryLValue (+derived types), as arg() will always return the correct type. ; Member RooTemplateProxy< T >::R__DEPRECATED (6, 36, ""Use RooTemplateProxy(const char*, const char*, RooAbsArg*, bool, bool) and transfer the ow",MatchSource.WIKI,doc/master/deprecated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/deprecated.html
Integrability,depend,dependentOverlaps,". ROOT: Deprecated List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Deprecated List. Member ClassDefT (name, id); ; Member ClassImp (name); ; Module proof ; We keep PROOF for those who still need it for legacy use cases. PROOF is not developed anymore and receiving only limited support. ROOT has since a few years moved to RDataFrame and related products as multi-core/multi-processing engines. ; Member RooAbsArg::R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset; Use observableOverlaps() ; Member RooAbsArg::R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const; Use recursiveCheckObservables() ; Member RooAbsArg::R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const; Use checkObservables() ; Member RooAbsArg::R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList; Use observableOverlaps() ; Member RooAbsCategory::defineType (const char *label); Use defineState(const std::string& label) ; Member RooAbsCategory::defineType (const char *label, int index); Use defineState(const std::string& label, value_type index) ; Member RooAbsCategory::defineTypeUnchecked (const char *label, value_type index); Use defineStateUnchecked(const std::string& label, value_type index) ; Member RooAbsCategory::lookupType (const RooCatType &type, bool printError=false) const; RooCatType is not used, any more. This function will create one and let it leak. Use lookupIndex() (preferred) or lookupName() instead. ; Member RooAbsCategory::lookupType (value_type index, bool printError=false) const; RooCatType is not used, any more. This function will create one and let it leak. Use lookupIndex() (preferred) or lookupName() instead. ; Member RooAbsCategory::lookupType (const char *label, bool printError=false) const; RooCatType is not used, ",MatchSource.WIKI,doc/master/deprecated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/deprecated.html
Safety,safe,safer,"ex() (preferred) or lookupName() instead. ; Member RooAbsCategory::typeIterator () const; Use begin() and end() instead. ; Class RooAbsCategoryLegacyIterator ; Legacy class to iterate through legacy RooAbsCategory states. Use RooAbsCategory::begin(), RooAbsCategory::end() or range-based for loops instead. Member RooAbsData::statOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}); Classing parameter formatting options, provided for backward compatibility ; Member RooCategoryProxy ; Use RooTemplateProxy<RooAbsCategory> or more appropriate template parameters. ; Member RooDataHist::binVolume () const; Use binVolume(std::size_t) const. ; Member RooDataHist::calcTreeIndex () const; Use calcTreeIndex(const RooArgSet&,bool) const. ; Member RooDataHist::set (double wgt, double wgtErr=-1); Use set(std::size_t,double,double) ; Member RooDataHist::weight () const override; Use the safer weight(std::size_t) const. ; Member RooDataHist::weightSquared () const override; Use the safer weightSquared(std::size_t) const. ; Member RooRealProxy ; Use RooTemplateProxy<RooAbsReal> or more appropriate template parameters. ; Member RooStats::HistFactory::FitModel (RooWorkspace *, std::string data_name=""obsData"") R__DEPRECATED(6; Will be removed in ROOT 6.36. Please write your own plotting code inspired by the hf001 tutorial. ; Member RooStats::HistFactory::FitModelAndPlot (const std::string &measurementName, const std::string &fileNamePrefix, RooWorkspace &, std::string, std::string, TFile &, std::ostream &) R__DEPRECATED(6; Will be removed in ROOT 6.36. Please write your own plotting code inspired by the hf001 tutorial. ; Member RooStats::HistFactory::FormatFrameForLikelihood (RooPlot *frame, std::string xTitle=std::string(""#sigma / #sigma_{SM}""), std::string yTitle=std::string(""-log likelihood"")) R__DEPRECATED(6; W",MatchSource.WIKI,doc/master/deprecated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/deprecated.html
Testability,log,log,"Member RooDataHist::set (double wgt, double wgtErr=-1); Use set(std::size_t,double,double) ; Member RooDataHist::weight () const override; Use the safer weight(std::size_t) const. ; Member RooDataHist::weightSquared () const override; Use the safer weightSquared(std::size_t) const. ; Member RooRealProxy ; Use RooTemplateProxy<RooAbsReal> or more appropriate template parameters. ; Member RooStats::HistFactory::FitModel (RooWorkspace *, std::string data_name=""obsData"") R__DEPRECATED(6; Will be removed in ROOT 6.36. Please write your own plotting code inspired by the hf001 tutorial. ; Member RooStats::HistFactory::FitModelAndPlot (const std::string &measurementName, const std::string &fileNamePrefix, RooWorkspace &, std::string, std::string, TFile &, std::ostream &) R__DEPRECATED(6; Will be removed in ROOT 6.36. Please write your own plotting code inspired by the hf001 tutorial. ; Member RooStats::HistFactory::FormatFrameForLikelihood (RooPlot *frame, std::string xTitle=std::string(""#sigma / #sigma_{SM}""), std::string yTitle=std::string(""-log likelihood"")) R__DEPRECATED(6; Will be removed in ROOT 6.36. Please write your own plotting code inspired by the hf001 tutorial. ; Member RooStats::HistFactory::Measurement::SetExportOnly (bool ExportOnly) R__DEPRECATED(6; Will be removed in ROOT 6.36. ExportOnly() == true is the default since ROOT 6.34 and it can't be disabled anymore in 6.36. ; Member RooStats::MarkovChain::GetAsDataHist (const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const R__DEPRECATED(6; Will be removed in ROOT 6.36. Please implement this functionality by calling RooAbsData::reduce on the Markov Chain's RooDataSet* (obtained using MarkovChain::GetAsConstDataSet), and then obtaining its binned clone. ; Will be removed in ROOT 6.36. . Member RooStats::MarkovChain::GetAsDataSet (const RooCmdArg &arg1, const ",MatchSource.WIKI,doc/master/deprecated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/deprecated.html
Integrability,interface,interface,". ROOT: tutorials/dataframe/df000_simple.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df000_simple.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Simple RDataFrame example in C++. ; This tutorial shows a minimal example of RDataFrame. It starts without input data, generates a new column x with random numbers, and finally draws a histogram for x.; ; void df000_simple(); {; // Create a data frame with 100 rows; ROOT::RDataFrame rdf(100);; ; // Define a new column `x` that contains random numbers; auto rdf_x = rdf.Define(""x"", [](){ return gRandom->Rndm(); });; ; // Create a histogram from `x`; auto h = rdf_x.Histo1D(""x"");; ; // At the end of this function, the histogram pointed to by `h` will be deleted.; // Draw a copy of the histogram object instead:; h->DrawClone();; }; h#define h(i)Definition RSha256.hxx:106; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; df000_simpleDefinition df000_simple.py:1; ; DateSeptember 2021 ; AuthorEnric Tejedor (CERN) ; Definition in file df000_simple.C. tutorialsdataframedf000_simple.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df000__simple_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df000__simple_8C.html
Integrability,interface,interface,". ROOT: tutorials/dataframe/df000_simple.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df000_simple.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Simple RDataFrame example in Python. ; This tutorial shows a minimal example of RDataFrame. It starts without input data, generates a new column x with random numbers, and finally draws a histogram for x.; ; import ROOT; ; # Create a data frame with 100 rows; rdf = ROOT.RDataFrame(100); ; # Define a new column `x` that contains random numbers; rdf_x = rdf.Define(""x"", ""gRandom->Rndm()""); ; # Create a histogram from `x` and draw it; h = rdf_x.Histo1D(""x""); h.Draw(); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; DateSeptember 2021 ; AuthorEnric Tejedor (CERN) ; Definition in file df000_simple.py. tutorialsdataframedf000_simple.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df000__simple_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df000__simple_8py.html
Deployability,pipeline,pipelines,"tr());; std::cout << ""The type of b1Vec is "" << b1VecCl->GetName() << std::endl;; ; // ### `Histo1D` action; // The `Histo1D` action allows to fill an histogram. It returns a TH1D filled; // with values of the column that passed the filters. For the most common; // types, the type of the values stored in the column is automatically; // guessed.; auto hist = d.Filter(cutb1).Histo1D();; std::cout << ""Filled h "" << hist->GetEntries() << "" times, mean: "" << hist->GetMean() << std::endl;; ; // ### `Foreach` action; // The most generic action of all: an operation is applied to all entries.; // In this case we fill a histogram. In some sense this is a violation of a; // purely functional paradigm - C++ allows to do that.; TH1F h(""h"", ""h"", 12, -1, 11);; d.Filter([](int b2) { return b2 % 2 == 0; }, {""b2""}).Foreach([&h](double b1) { h.Fill(b1); });; ; std::cout << ""Filled h with "" << h.GetEntries() << "" entries"" << std::endl;; ; // ## Express your chain of operations with clarity!; // We are discussing an example here but it is not hard to imagine much more; // complex pipelines of actions acting on data. Those might require code; // which is well organised, for example allowing to conditionally add filters; // or again to clearly separate filters and actions without the need of; // writing the entire pipeline on one line. This can be easily achieved.; // We'll show this by re-working the `Count` example:; auto cutb1_result = d.Filter(cutb1);; auto cutb1b2_result = d.Filter(cutb1b2, {""b2"", ""b1""});; auto cutb1_cutb1b2_result = cutb1_result.Filter(cutb1b2, {""b2"", ""b1""});; // Now we want to count:; auto evts_cutb1_result = cutb1_result.Count();; auto evts_cutb1b2_result = cutb1b2_result.Count();; auto evts_cutb1_cutb1b2_result = cutb1_cutb1b2_result.Count();; ; std::cout << ""Events passing cutb1: "" << *evts_cutb1_result << std::endl; << ""Events passing cutb1b2: "" << *evts_cutb1b2_result << std::endl; << ""Events passing both: "" << *evts_cutb1_cutb1b2_result << std::endl;; ; // ## ",MatchSource.WIKI,doc/master/df001__introduction_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df001__introduction_8C.html
Integrability,depend,depending,"ine(""b1"", [](ULong64_t entry) -> double { return entry; }, {""rdfentry_""}); .Define(""b2"", [](ULong64_t entry) -> int { return entry * entry; }, {""rdfentry_""}); .Snapshot(treeName, fileName);; }; ; int df001_introduction(); {; ; // We prepare an input tree to run on; auto fileName = ""df001_introduction.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame, a class that; // allows us to interact with the data contained in the tree.; // We select a default column, a *branch* to adopt ROOT jargon, which will; // be looked at if none is specified by the user when dealing with filters; // and actions.; ROOT::RDataFrame d(treeName, fileName, {""b1""});; ; // ## Operations on the dataframe; // We now review some *actions* which can be performed on the data frame.; // Actions can be divided into instant actions (e. g. Foreach()) and lazy; // actions (e. g. Count()), depending on whether they trigger the event; // loop immediately or only when one of the results is accessed for the; // first time. Actions that return ""something"" either return their result; // wrapped in a RResultPtr or in a RDataFrame.; // But first of all, let us define our cut-flow with two lambda; // functions. We can use free functions too.; auto cutb1 = [](double b1) { return b1 < 5.; };; auto cutb1b2 = [](int b2, double b1) { return b2 % 2 && b1 < 4.; };; ; // ### `Count` action; // The `Count` allows to retrieve the number of the entries that passed the; // filters. Here, we show how the automatic selection of the column kicks; // in in case the user specifies none.; auto entries1 = d.Filter(cutb1) // <- no column name specified here!; .Filter(cutb1b2, {""b2"", ""b1""}); .Count();; ; std::cout << *entries1 << "" entries passed all filters"" << std::endl;; ; // Filters can be expressed as strings. The content must be C++ code. The; // name of the variables must be the name of the branches. The code is; // just-in-time compiled.; auto entries",MatchSource.WIKI,doc/master/df001__introduction_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df001__introduction_8C.html
Modifiability,variab,variables,"ctions (e. g. Count()), depending on whether they trigger the event; // loop immediately or only when one of the results is accessed for the; // first time. Actions that return ""something"" either return their result; // wrapped in a RResultPtr or in a RDataFrame.; // But first of all, let us define our cut-flow with two lambda; // functions. We can use free functions too.; auto cutb1 = [](double b1) { return b1 < 5.; };; auto cutb1b2 = [](int b2, double b1) { return b2 % 2 && b1 < 4.; };; ; // ### `Count` action; // The `Count` allows to retrieve the number of the entries that passed the; // filters. Here, we show how the automatic selection of the column kicks; // in in case the user specifies none.; auto entries1 = d.Filter(cutb1) // <- no column name specified here!; .Filter(cutb1b2, {""b2"", ""b1""}); .Count();; ; std::cout << *entries1 << "" entries passed all filters"" << std::endl;; ; // Filters can be expressed as strings. The content must be C++ code. The; // name of the variables must be the name of the branches. The code is; // just-in-time compiled.; auto entries2 = d.Filter(""b1 < 5."").Count();; std::cout << *entries2 << "" entries passed the string filter"" << std::endl;; ; // ### `Min`, `Max` and `Mean` actions; // These actions allow to retrieve statistical information about the entries; // passing the cuts, if any.; auto b1b2_cut = d.Filter(cutb1b2, {""b2"", ""b1""});; auto minVal = b1b2_cut.Min();; auto maxVal = b1b2_cut.Max();; auto meanVal = b1b2_cut.Mean();; auto nonDefmeanVal = b1b2_cut.Mean(""b2""); // <- Column is not the default; std::cout << ""The mean is always included between the min and the max: "" << *minVal << "" <= "" << *meanVal; << "" <= "" << *maxVal << std::endl;; ; // ### `Take` action; // The `Take` action allows to retrieve all values of the variable stored in a; // particular column that passed filters we specified. The values are stored; // in a vector by default, but other collections can be chosen.; auto b1_cut = d.Filter(cutb1);; auto b1Vec =",MatchSource.WIKI,doc/master/df001__introduction_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df001__introduction_8C.html
Performance,perform,performed,"wing a functional-chain like approach.; ; // ## Preparation; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(10);; d.Define(""b1"", [](ULong64_t entry) -> double { return entry; }, {""rdfentry_""}); .Define(""b2"", [](ULong64_t entry) -> int { return entry * entry; }, {""rdfentry_""}); .Snapshot(treeName, fileName);; }; ; int df001_introduction(); {; ; // We prepare an input tree to run on; auto fileName = ""df001_introduction.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame, a class that; // allows us to interact with the data contained in the tree.; // We select a default column, a *branch* to adopt ROOT jargon, which will; // be looked at if none is specified by the user when dealing with filters; // and actions.; ROOT::RDataFrame d(treeName, fileName, {""b1""});; ; // ## Operations on the dataframe; // We now review some *actions* which can be performed on the data frame.; // Actions can be divided into instant actions (e. g. Foreach()) and lazy; // actions (e. g. Count()), depending on whether they trigger the event; // loop immediately or only when one of the results is accessed for the; // first time. Actions that return ""something"" either return their result; // wrapped in a RResultPtr or in a RDataFrame.; // But first of all, let us define our cut-flow with two lambda; // functions. We can use free functions too.; auto cutb1 = [](double b1) { return b1 < 5.; };; auto cutb1b2 = [](int b2, double b1) { return b2 % 2 && b1 < 4.; };; ; // ### `Count` action; // The `Count` allows to retrieve the number of the entries that passed the; // filters. Here, we show how the automatic selection of the column kicks; // in in case the user specifies none.; auto entries1 = d.Filter(cutb1) // <- no column name specified here!; .Filter(cutb1b2, {""b2"", ""b1""}); .Count();; ; std::cout << ",MatchSource.WIKI,doc/master/df001__introduction_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df001__introduction_8C.html
Security,access,accessed,"ine(""b1"", [](ULong64_t entry) -> double { return entry; }, {""rdfentry_""}); .Define(""b2"", [](ULong64_t entry) -> int { return entry * entry; }, {""rdfentry_""}); .Snapshot(treeName, fileName);; }; ; int df001_introduction(); {; ; // We prepare an input tree to run on; auto fileName = ""df001_introduction.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame, a class that; // allows us to interact with the data contained in the tree.; // We select a default column, a *branch* to adopt ROOT jargon, which will; // be looked at if none is specified by the user when dealing with filters; // and actions.; ROOT::RDataFrame d(treeName, fileName, {""b1""});; ; // ## Operations on the dataframe; // We now review some *actions* which can be performed on the data frame.; // Actions can be divided into instant actions (e. g. Foreach()) and lazy; // actions (e. g. Count()), depending on whether they trigger the event; // loop immediately or only when one of the results is accessed for the; // first time. Actions that return ""something"" either return their result; // wrapped in a RResultPtr or in a RDataFrame.; // But first of all, let us define our cut-flow with two lambda; // functions. We can use free functions too.; auto cutb1 = [](double b1) { return b1 < 5.; };; auto cutb1b2 = [](int b2, double b1) { return b2 % 2 && b1 < 4.; };; ; // ### `Count` action; // The `Count` allows to retrieve the number of the entries that passed the; // filters. Here, we show how the automatic selection of the column kicks; // in in case the user specifies none.; auto entries1 = d.Filter(cutb1) // <- no column name specified here!; .Filter(cutb1b2, {""b2"", ""b1""}); .Count();; ; std::cout << *entries1 << "" entries passed all filters"" << std::endl;; ; // Filters can be expressed as strings. The content must be C++ code. The; // name of the variables must be the name of the branches. The code is; // just-in-time compiled.; auto entries",MatchSource.WIKI,doc/master/df001__introduction_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df001__introduction_8C.html
Testability,test,test,". ROOT: tutorials/dataframe/df001_introduction.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df001_introduction.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Basic RDataFrame usage. ; This tutorial illustrates the basic features of the RDataFrame class, a utility which allows to interact with data stored in TTrees following a functional-chain like approach.; ; // ## Preparation; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(10);; d.Define(""b1"", [](ULong64_t entry) -> double { return entry; }, {""rdfentry_""}); .Define(""b2"", [](ULong64_t entry) -> int { return entry * entry; }, {""rdfentry_""}); .Snapshot(treeName, fileName);; }; ; int df001_introduction(); {; ; // We prepare an input tree to run on; auto fileName = ""df001_introduction.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame, a class that; // allows us to interact with the data contained in the tree.; // We select a default column, a *branch* to adopt ROOT jargon, which will; // be looked at if none is specified by the user when dealing with filters; // and actions.; ROOT::RDataFrame d(treeName, fileName, {""b1""});; ; // ## Operations on the dataframe; // We now review some *actions* which can be performed on the data frame.; // Actions can be divided into instant actions (e. g. Foreach()) and lazy; // actions (e. g. Count()), depending on whether they trigger the event; // loop immediately or only when one of the results is accessed for the; // first time. Actions that return ""something"" either return their result; // wrapped in a RResultPtr or in a RDataFrame.; // But first of all, let us define our cut-flow with two lambda; // functions. We can use free functions too.; auto cutb1 = [](double b1) { return b1 < 5.; };; auto cutb1b2 = ",MatchSource.WIKI,doc/master/df001__introduction_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df001__introduction_8C.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df001_introduction.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df001_introduction.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Basic RDataFrame usage. ; This tutorial illustrates the basic features of the RDataFrame class, a utility which allows to interact with data stored in TTrees following a functional-chain like approach.; ; // ## Preparation; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(10);; d.Define(""b1"", [](ULong64_t entry) -> double { return entry; }, {""rdfentry_""}); .Define(""b2"", [](ULong64_t entry) -> int { return entry * entry; }, {""rdfentry_""}); .Snapshot(treeName, fileName);; }; ; int df001_introduction(); {; ; // We prepare an input tree to run on; auto fileName = ""df001_introduction.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame, a class that; // allows us to interact with the data contained in the tree.; // We select a default column, a *branch* to adopt ROOT jargon, which will; // be looked at if none is specified by the user when dealing with filters; // and actions.; ROOT::RDataFrame d(treeName, fileName, {""b1""});; ; // ## Operations on the dataframe; // We now review some *actions* which can be performed on the data frame.; // Actions can be divided into instant actions (e. g. Foreach()) and lazy; // actions (e. g. Count()), depending on whether they trigger the event; // loop immediately or only when one of the results is accessed for the; // first time. Actions that return ""something"" either return their result; // wrapped in a RResultPtr or in a RDataFrame.; // But first of all, let us define our cut-flow with two lambda; // functions. We can use free functions too.; auto cutb1 = [](double b1) { return b1 < 5.; };; auto cutb1b2 = ",MatchSource.WIKI,doc/master/df001__introduction_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df001__introduction_8C.html
Deployability,pipeline,pipelines,"ter(""b1 < 5."").Count();; print('{} entries passed all filters'.format(entries2.GetValue())); ; # `Min`, `Max` and `Mean` actions; # These actions allow to retrieve statistical information about the entries; # passing the cuts, if any.; b1b2_cut = d.Filter(cutb1b2); minVal = b1b2_cut.Min('b1'); maxVal = b1b2_cut.Max('b1'); meanVal = b1b2_cut.Mean('b1'); nonDefmeanVal = b1b2_cut.Mean(""b2""); print('The mean is always included between the min and the max: {0} <= {1} <= {2}'.format(minVal.GetValue(), meanVal.GetValue(), maxVal.GetValue())); ; # `Histo1D` action; # The `Histo1D` action allows to fill an histogram. It returns a TH1F filled; # with values of the column that passed the filters. For the most common; # types, the type of the values stored in the column is automatically; # guessed.; hist = d.Filter(cutb1).Histo1D('b1'); print('Filled h {0} times, mean: {1}'.format(hist.GetEntries(), hist.GetMean())); ; # Express your chain of operations with clarity!; # We are discussing an example here but it is not hard to imagine much more; # complex pipelines of actions acting on data. Those might require code; # which is well organised, for example allowing to conditionally add filters; # or again to clearly separate filters and actions without the need of; # writing the entire pipeline on one line. This can be easily achieved.; # We'll show this re-working the `Count` example:; cutb1_result = d.Filter(cutb1);; cutb1b2_result = d.Filter(cutb1b2);; cutb1_cutb1b2_result = cutb1_result.Filter(cutb1b2); ; # Now we want to count:; evts_cutb1_result = cutb1_result.Count(); evts_cutb1b2_result = cutb1b2_result.Count(); evts_cutb1_cutb1b2_result = cutb1_cutb1b2_result.Count(); ; print('Events passing cutb1: {}'.format(evts_cutb1_result.GetValue())); print('Events passing cutb1b2: {}'.format(evts_cutb1b2_result.GetValue())); print('Events passing both: {}'.format(evts_cutb1_cutb1b2_result.GetValue())); ; # Calculating quantities starting from existing columns; # Often, operations n",MatchSource.WIKI,doc/master/df001__introduction_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df001__introduction_8py.html
Integrability,depend,depending,"lass, a utility which allows to interact with data stored in TTrees following a functional-chain like approach.; ; import ROOT; ; def fill_tree(treeName, fileName):; """"""A simple helper function to fill a test tree: this makes the example stand-alone.""""""; df = ROOT.RDataFrame(10); df.Define(""b1"", ""static_cast<double>(rdfentry_)"")\; .Define(""b2"", ""static_cast<int>(rdfentry_ * rdfentry_)"").Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df001_introduction_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operations on the dataframe; # We now review some *actions* which can be performed on the data frame.; # Actions can be divided into instant actions (e. g. Foreach()) and lazy; # actions (e. g. Count()), depending on whether they trigger the event ; # loop immediately or only when one of the results is accessed for the ; # first time. Actions that return ""something"" either return their result ; # wrapped in a RResultPtr or in a RDataFrame.; # But first of all, let us we define now our cut-flow with two strings.; # Filters can be expressed as strings. The content must be C++ code. The; # name of the variables must be the name of the branches. The code is; # just-in-time compiled.; cutb1 = 'b1 < 5.'; cutb1b2 = 'b2 % 2 && b1 < 4.'; ; # `Count` action; # The `Count` allows to retrieve the number of the entries that passed the; # filters. Here we show how the automatic selection of the column kicks; # in in case the user specifies none.; entries1 = d.Filter(cutb1) \; .Filter(cutb1b2) \; .Count();; ; print('{} entries passed all filters'.format(entries1.GetValue())); ; entries2 = d.Filter(""b1 < 5."").Count();; print('{} entries passed all filters'.format(entries2.GetValue())); ; # `Min`, `Max` and `Mean` actions; # These actions allow to retrieve stati",MatchSource.WIKI,doc/master/df001__introduction_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df001__introduction_8py.html
Modifiability,variab,variables,"c_cast<int>(rdfentry_ * rdfentry_)"").Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df001_introduction_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operations on the dataframe; # We now review some *actions* which can be performed on the data frame.; # Actions can be divided into instant actions (e. g. Foreach()) and lazy; # actions (e. g. Count()), depending on whether they trigger the event ; # loop immediately or only when one of the results is accessed for the ; # first time. Actions that return ""something"" either return their result ; # wrapped in a RResultPtr or in a RDataFrame.; # But first of all, let us we define now our cut-flow with two strings.; # Filters can be expressed as strings. The content must be C++ code. The; # name of the variables must be the name of the branches. The code is; # just-in-time compiled.; cutb1 = 'b1 < 5.'; cutb1b2 = 'b2 % 2 && b1 < 4.'; ; # `Count` action; # The `Count` allows to retrieve the number of the entries that passed the; # filters. Here we show how the automatic selection of the column kicks; # in in case the user specifies none.; entries1 = d.Filter(cutb1) \; .Filter(cutb1b2) \; .Count();; ; print('{} entries passed all filters'.format(entries1.GetValue())); ; entries2 = d.Filter(""b1 < 5."").Count();; print('{} entries passed all filters'.format(entries2.GetValue())); ; # `Min`, `Max` and `Mean` actions; # These actions allow to retrieve statistical information about the entries; # passing the cuts, if any.; b1b2_cut = d.Filter(cutb1b2); minVal = b1b2_cut.Min('b1'); maxVal = b1b2_cut.Max('b1'); meanVal = b1b2_cut.Mean('b1'); nonDefmeanVal = b1b2_cut.Mean(""b2""); print('The mean is always included between the min and the max: {0} <= {1} <= {2}'.format(minVal.GetValue(), meanVal.GetValue(), m",MatchSource.WIKI,doc/master/df001__introduction_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df001__introduction_8py.html
Performance,perform,performed,"rching...; No Matches. Namespaces ; df001_introduction.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Basic usage of RDataFrame from python. ; This tutorial illustrates the basic features of the RDataFrame class, a utility which allows to interact with data stored in TTrees following a functional-chain like approach.; ; import ROOT; ; def fill_tree(treeName, fileName):; """"""A simple helper function to fill a test tree: this makes the example stand-alone.""""""; df = ROOT.RDataFrame(10); df.Define(""b1"", ""static_cast<double>(rdfentry_)"")\; .Define(""b2"", ""static_cast<int>(rdfentry_ * rdfentry_)"").Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df001_introduction_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operations on the dataframe; # We now review some *actions* which can be performed on the data frame.; # Actions can be divided into instant actions (e. g. Foreach()) and lazy; # actions (e. g. Count()), depending on whether they trigger the event ; # loop immediately or only when one of the results is accessed for the ; # first time. Actions that return ""something"" either return their result ; # wrapped in a RResultPtr or in a RDataFrame.; # But first of all, let us we define now our cut-flow with two strings.; # Filters can be expressed as strings. The content must be C++ code. The; # name of the variables must be the name of the branches. The code is; # just-in-time compiled.; cutb1 = 'b1 < 5.'; cutb1b2 = 'b2 % 2 && b1 < 4.'; ; # `Count` action; # The `Count` allows to retrieve the number of the entries that passed the; # filters. Here we show how the automatic selection of the column kicks; # in in case the user specifies none.; entries1 = d.Filter(cutb1) \; .Filter(cutb1b2) \; .Count();; ; print('{} entries passe",MatchSource.WIKI,doc/master/df001__introduction_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df001__introduction_8py.html
Security,access,accessed,"lass, a utility which allows to interact with data stored in TTrees following a functional-chain like approach.; ; import ROOT; ; def fill_tree(treeName, fileName):; """"""A simple helper function to fill a test tree: this makes the example stand-alone.""""""; df = ROOT.RDataFrame(10); df.Define(""b1"", ""static_cast<double>(rdfentry_)"")\; .Define(""b2"", ""static_cast<int>(rdfentry_ * rdfentry_)"").Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df001_introduction_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operations on the dataframe; # We now review some *actions* which can be performed on the data frame.; # Actions can be divided into instant actions (e. g. Foreach()) and lazy; # actions (e. g. Count()), depending on whether they trigger the event ; # loop immediately or only when one of the results is accessed for the ; # first time. Actions that return ""something"" either return their result ; # wrapped in a RResultPtr or in a RDataFrame.; # But first of all, let us we define now our cut-flow with two strings.; # Filters can be expressed as strings. The content must be C++ code. The; # name of the variables must be the name of the branches. The code is; # just-in-time compiled.; cutb1 = 'b1 < 5.'; cutb1b2 = 'b2 % 2 && b1 < 4.'; ; # `Count` action; # The `Count` allows to retrieve the number of the entries that passed the; # filters. Here we show how the automatic selection of the column kicks; # in in case the user specifies none.; entries1 = d.Filter(cutb1) \; .Filter(cutb1b2) \; .Count();; ; print('{} entries passed all filters'.format(entries1.GetValue())); ; entries2 = d.Filter(""b1 < 5."").Count();; print('{} entries passed all filters'.format(entries2.GetValue())); ; # `Min`, `Max` and `Mean` actions; # These actions allow to retrieve stati",MatchSource.WIKI,doc/master/df001__introduction_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df001__introduction_8py.html
Testability,test,test,". ROOT: tutorials/dataframe/df001_introduction.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df001_introduction.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Basic usage of RDataFrame from python. ; This tutorial illustrates the basic features of the RDataFrame class, a utility which allows to interact with data stored in TTrees following a functional-chain like approach.; ; import ROOT; ; def fill_tree(treeName, fileName):; """"""A simple helper function to fill a test tree: this makes the example stand-alone.""""""; df = ROOT.RDataFrame(10); df.Define(""b1"", ""static_cast<double>(rdfentry_)"")\; .Define(""b2"", ""static_cast<int>(rdfentry_ * rdfentry_)"").Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df001_introduction_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operations on the dataframe; # We now review some *actions* which can be performed on the data frame.; # Actions can be divided into instant actions (e. g. Foreach()) and lazy; # actions (e. g. Count()), depending on whether they trigger the event ; # loop immediately or only when one of the results is accessed for the ; # first time. Actions that return ""something"" either return their result ; # wrapped in a RResultPtr or in a RDataFrame.; # But first of all, let us we define now our cut-flow with two strings.; # Filters can be expressed as strings. The content must be C++ code. The; # name of the variables must be the name of the branches. The code is; # just-in-time compiled.; cutb1 = 'b1 < 5.'; cutb1b2 = 'b2 % 2 && b1 < 4.'; ; # `Count` action; # The `Count` allows to retrieve the number of the entries that passed the; # filters. Here we show how the automatic selection of the column kicks; #",MatchSource.WIKI,doc/master/df001__introduction_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df001__introduction_8py.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df001_introduction.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df001_introduction.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Basic usage of RDataFrame from python. ; This tutorial illustrates the basic features of the RDataFrame class, a utility which allows to interact with data stored in TTrees following a functional-chain like approach.; ; import ROOT; ; def fill_tree(treeName, fileName):; """"""A simple helper function to fill a test tree: this makes the example stand-alone.""""""; df = ROOT.RDataFrame(10); df.Define(""b1"", ""static_cast<double>(rdfentry_)"")\; .Define(""b2"", ""static_cast<int>(rdfentry_ * rdfentry_)"").Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df001_introduction_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operations on the dataframe; # We now review some *actions* which can be performed on the data frame.; # Actions can be divided into instant actions (e. g. Foreach()) and lazy; # actions (e. g. Count()), depending on whether they trigger the event ; # loop immediately or only when one of the results is accessed for the ; # first time. Actions that return ""something"" either return their result ; # wrapped in a RResultPtr or in a RDataFrame.; # But first of all, let us we define now our cut-flow with two strings.; # Filters can be expressed as strings. The content must be C++ code. The; # name of the variables must be the name of the branches. The code is; # just-in-time compiled.; cutb1 = 'b1 < 5.'; cutb1b2 = 'b2 % 2 && b1 < 4.'; ; # `Count` action; # The `Count` allows to retrieve the number of the entries that passed the; # filters. Here we show how the automatic selection of the column kicks; #",MatchSource.WIKI,doc/master/df001__introduction_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df001__introduction_8py.html
Energy Efficiency,energy,energy,"frame tutorials. Detailed Description; Show how to work with non-flat data models, e.g. ; vectors of tracks.; This tutorial shows the possibility to use data models which are more complex than flat ntuples with RDataFrame.; ; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using FourVectorRVec = ROOT::VecOps::RVec<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);; ; auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };; ; ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; ; int df002_dataModel(); {; ; // We prepare an input tree to run on; auto fileName = ""df002_dataModel.root"";; auto treeName = ""myTree"";; fill_tree(fileName, treeName);; ; // We read the tree from the file and create a RDataFrame, a class that; // allows us to interact with the data contained in the tree.; ROOT::RDataFrame d(treeName, fileName, {""tracks""});; ; // ## Operating on branches which are collections of objects; // Here we deal with the simplest of the cuts: we decide to accept the event; // only if the number of tracks is greater than 8.; auto n_cut = [](const FourVectorRVec &tracks) { return tracks.size() > 8; };; auto nentries = d.Filter(n_cut, {""tracks""}).Count();; ; std::cout << *nentries ",MatchSource.WIKI,doc/master/df002__dataModel_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df002__dataModel_8C.html
Integrability,interface,interface,"N->DrawCopy();; ; auto c2 = new TCanvas();; trPts->DrawCopy();; ; auto c3 = new TCanvas();; trWPts->DrawCopy();; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; R#define R(a, b, c, d, e, f, g, h, i)Definition RSha256.hxx:110; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; nentriesint nentriesDefinition THbookFile.cxx:91; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; R; TCanvasThe Canvas class.Definition TCanvas.h:23; TRandom3Random number generator class based on M.Definition TRandom3.h:27; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::VecOps::Mapauto Map(Args &&... args)Create new collection applying a callable to the elements of the input collection.Definition RVec.hxx:2150; ROOT::VecOps::FilterRVec< T > Filter(const RVec< T > &v, F &&f)Create a new collection with the elements passing the filter expressed by the predicate.Definition RVec.hxx:2182; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; c3return c3Definition legend3.C:15; ROOT::Math::RhoEtaPhiVectorDisplacementVector3D< CylindricalEta3D< double >, DefaultCoordinateSystemTag > RhoEtaPhiVector3D Vector based on the eta based cylindrical ",MatchSource.WIKI,doc/master/df002__dataModel_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df002__dataModel_8C.html
Testability,test,test,". ROOT: tutorials/dataframe/df002_dataModel.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df002_dataModel.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Show how to work with non-flat data models, e.g. ; vectors of tracks.; This tutorial shows the possibility to use data models which are more complex than flat ntuples with RDataFrame.; ; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using FourVectorRVec = ROOT::VecOps::RVec<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);; ; auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };; ; ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; ; int df002_dataModel(); {; ; // We prepare an input tree to run on; auto fileName = ""df002_dataModel.root"";; auto treeName = ""myTree"";; fill_tree(fileName, treeName);; ; // We read the tree from the file and create a RDataFrame, a class that; // allows us to interact with the data contained in the tree.; ROOT::RDataFrame d(treeName, fileName, {""tracks""});; ; // ## Operating on branches which are collections of objects; // Here we deal with the simplest of the cuts: we decide to accept the event; // only if the num",MatchSource.WIKI,doc/master/df002__dataModel_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df002__dataModel_8C.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df002_dataModel.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df002_dataModel.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Show how to work with non-flat data models, e.g. ; vectors of tracks.; This tutorial shows the possibility to use data models which are more complex than flat ntuples with RDataFrame.; ; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using FourVectorRVec = ROOT::VecOps::RVec<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);; ; auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };; ; ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; ; int df002_dataModel(); {; ; // We prepare an input tree to run on; auto fileName = ""df002_dataModel.root"";; auto treeName = ""myTree"";; fill_tree(fileName, treeName);; ; // We read the tree from the file and create a RDataFrame, a class that; // allows us to interact with the data contained in the tree.; ROOT::RDataFrame d(treeName, fileName, {""tracks""});; ; // ## Operating on branches which are collections of objects; // Here we deal with the simplest of the cuts: we decide to accept the event; // only if the num",MatchSource.WIKI,doc/master/df002__dataModel_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df002__dataModel_8C.html
Energy Efficiency,energy,energy,"lat data models, e.g. ; vectors of tracks.; This tutorial shows the possibility to use data models which are more complex than flat ntuples with RDataFrame.; ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example stand-alone.; fill_tree_code = '''; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);; ; auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };; ; ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; '''; ; # We prepare an input tree to run on; fileName = ""df002_dataModel_py.root""; treeName = ""myTree""; ROOT.gInterpreter.Declare(fill_tree_code); ROOT.fill_tree(fileName, treeName); ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operating on branches which are collections of objects; # Here we deal with the simplest of the cuts: we decide to accept the event; # only if the number of tracks is greater than 8.; n_cut = 'tracks.size() > 8'; nentries = d.Filter(n_cut).Count();; ; print(""%s events passed all filters"" % nentries.GetValue()); ; # Another possibility consists i",MatchSource.WIKI,doc/master/df002__dataModel_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df002__dataModel_8py.html
Integrability,interface,interface,"lest of the cuts: we decide to accept the event; # only if the number of tracks is greater than 8.; n_cut = 'tracks.size() > 8'; nentries = d.Filter(n_cut).Count();; ; print(""%s events passed all filters"" % nentries.GetValue()); ; # Another possibility consists in creating a new column containing the; # quantity we are interested in.; # In this example, we will cut on the number of tracks and plot their; # transverse momentum.; ; getPt_code ='''; using namespace ROOT::VecOps;; ROOT::RVecD getPt(const RVec<FourVector> &tracks); {; auto pt = [](const FourVector &v) { return v.pt(); };; return Map(tracks, pt);; }; '''; ROOT.gInterpreter.Declare(getPt_code); ; getPtWeights_code ='''; using namespace ROOT::VecOps;; ROOT::RVecD getPtWeights(const RVec<FourVector> &tracks); {; auto ptWeight = [](const FourVector &v) { return 1. / v.Pt(); };; return Map(tracks, ptWeight);; };; '''; ROOT.gInterpreter.Declare(getPtWeights_code); ; augmented_d = d.Define('tracks_n', '(int)tracks.size()') \; .Filter('tracks_n > 2') \; .Define('tracks_pts', 'getPt( tracks )') \; .Define(""tracks_pts_weights"", 'getPtWeights( tracks )' ); ; # The histogram is initialised with a tuple containing the parameters of the; # histogram; trN = augmented_d.Histo1D(("""", """", 40, -.5, 39.5), ""tracks_n""); trPts = augmented_d.Histo1D(""tracks_pts""); trWPts = augmented_d.Histo1D(""tracks_pts"", ""tracks_pts_weights""); ; c1 = ROOT.TCanvas(); trN.Draw(); c1.SaveAs(""df002_trN.png""); ; c2 = ROOT.TCanvas(); trPts.Draw(); c2.SaveAs(""df002_trPts.png""); ; c3 = ROOT.TCanvas(); trWPts.Draw(); c2.SaveAs(""df002_trWPts.png""); ; print(""Saved figures to df002_*.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; . DateMay 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df002_dataModel.py. tutorialsdataframedf002_dataModel.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df002__dataModel_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df002__dataModel_8py.html
Testability,test,test,". ROOT: tutorials/dataframe/df002_dataModel.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df002_dataModel.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Show how to work with non-flat data models, e.g. ; vectors of tracks.; This tutorial shows the possibility to use data models which are more complex than flat ntuples with RDataFrame.; ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example stand-alone.; fill_tree_code = '''; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);; ; auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };; ; ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; '''; ; # We prepare an input tree to run on; fileName = ""df002_dataModel_py.root""; treeName = ""myTree""; ROOT.gInterpreter.Declare(fill_tree_code); ROOT.fill_tree(fileName, treeName); ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operating on branches which are collections of objects; # Here we deal with",MatchSource.WIKI,doc/master/df002__dataModel_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df002__dataModel_8py.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df002_dataModel.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df002_dataModel.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Show how to work with non-flat data models, e.g. ; vectors of tracks.; This tutorial shows the possibility to use data models which are more complex than flat ntuples with RDataFrame.; ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example stand-alone.; fill_tree_code = '''; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);; ; auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };; ; ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; '''; ; # We prepare an input tree to run on; fileName = ""df002_dataModel_py.root""; treeName = ""myTree""; ROOT.gInterpreter.Declare(fill_tree_code); ROOT.fill_tree(fileName, treeName); ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operating on branches which are collections of objects; # Here we deal with",MatchSource.WIKI,doc/master/df002__dataModel_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df002__dataModel_8py.html
Integrability,interface,interface," const char *fileName); {; ROOT::RDataFrame d(25000);; d.Define(""px"", []() { return gRandom->Gaus(); }); .Define(""py"", []() { return gRandom->Gaus(); }); .Define(""pz"", [](double px, double py) { return sqrt(px * px + py * py); }, {""px"", ""py""}); .Snapshot(treeName, fileName);; }; ; void df003_profiles(); {; // We prepare an input tree to run on; auto fileName = ""df003_profiles.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // Create the profiles; auto hprof1d = d.Profile1D({""hprof1d"", ""Profile of py versus px"", 64, -4, 4}, ""px"", ""py"");; auto hprof2d =; d.Profile2D({""hprof2d"", ""Profile of pz versus px and py"", 40, -4, 4, 40, -4, 4, 0, 20}, ""px"", ""py"", ""pz"");; ; // And Draw; auto c1 = new TCanvas(""c1"", ""Profile histogram example"", 200, 10, 700, 500);; hprof1d->DrawClone();; auto c2 = new TCanvas(""c2"", ""Profile2D histogram example"", 200, 10, 700, 500);; hprof2d->DrawClone(""BOX"");; }; d#define d(i)Definition RSha256.hxx:102; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; df003_profilesDefinition df003_profiles.py:1; DateFebruary 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df003_profiles.C. tutorialsdataframedf003_profiles.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df003__profiles_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df003__profiles_8C.html
Testability,test,test,". ROOT: tutorials/dataframe/df003_profiles.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df003_profiles.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use TProfiles with RDataFrame. ; This tutorial illustrates how to use TProfiles in combination with the RDataFrame. See the documentation of TProfile and TProfile2D to better understand the analogy of this code with the example one. ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(25000);; d.Define(""px"", []() { return gRandom->Gaus(); }); .Define(""py"", []() { return gRandom->Gaus(); }); .Define(""pz"", [](double px, double py) { return sqrt(px * px + py * py); }, {""px"", ""py""}); .Snapshot(treeName, fileName);; }; ; void df003_profiles(); {; // We prepare an input tree to run on; auto fileName = ""df003_profiles.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // Create the profiles; auto hprof1d = d.Profile1D({""hprof1d"", ""Profile of py versus px"", 64, -4, 4}, ""px"", ""py"");; auto hprof2d =; d.Profile2D({""hprof2d"", ""Profile of pz versus px and py"", 40, -4, 4, 40, -4, 4, 0, 20}, ""px"", ""py"", ""pz"");; ; // And Draw; auto c1 = new TCanvas(""c1"", ""Profile histogram example"", 200, 10, 700, 500);; hprof1d->DrawClone();; auto c2 = new TCanvas(""c2"", ""Profile2D histogram example"", 200, 10, 700, 500);; hprof2d->DrawClone(""BOX"");; }; d#define d(i)Definition RSha256.hxx:102; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the ",MatchSource.WIKI,doc/master/df003__profiles_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df003__profiles_8C.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df003_profiles.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df003_profiles.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use TProfiles with RDataFrame. ; This tutorial illustrates how to use TProfiles in combination with the RDataFrame. See the documentation of TProfile and TProfile2D to better understand the analogy of this code with the example one. ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(25000);; d.Define(""px"", []() { return gRandom->Gaus(); }); .Define(""py"", []() { return gRandom->Gaus(); }); .Define(""pz"", [](double px, double py) { return sqrt(px * px + py * py); }, {""px"", ""py""}); .Snapshot(treeName, fileName);; }; ; void df003_profiles(); {; // We prepare an input tree to run on; auto fileName = ""df003_profiles.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // Create the profiles; auto hprof1d = d.Profile1D({""hprof1d"", ""Profile of py versus px"", 64, -4, 4}, ""px"", ""py"");; auto hprof2d =; d.Profile2D({""hprof2d"", ""Profile of pz versus px and py"", 40, -4, 4, 40, -4, 4, 0, 20}, ""px"", ""py"", ""pz"");; ; // And Draw; auto c1 = new TCanvas(""c1"", ""Profile histogram example"", 200, 10, 700, 500);; hprof1d->DrawClone();; auto c2 = new TCanvas(""c2"", ""Profile2D histogram example"", 200, 10, 700, 500);; hprof2d->DrawClone(""BOX"");; }; d#define d(i)Definition RSha256.hxx:102; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the ",MatchSource.WIKI,doc/master/df003__profiles_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df003__profiles_8C.html
Integrability,interface,interface,". ROOT: tutorials/dataframe/df003_profiles.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df003_profiles.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use TProfiles with RDataFrame. ; This tutorial illustrates how to use TProfiles in combination with the RDataFrame. See the documentation of TProfile and TProfile2D to better understand the analogy of this code with the example one.; ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example; # stand-alone.; def fill_tree(treeName, fileName):; d = ROOT.RDataFrame(25000); d.Define(""px"", ""gRandom->Gaus()"")\; .Define(""py"", ""gRandom->Gaus()"")\; .Define(""pz"", ""sqrt(px * px + py * py)"")\; .Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df003_profiles_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; # We read the tree from the file and create a RDataFrame.; d = ROOT.RDataFrame(treeName, fileName); ; # Create the profiles; hprof1d = d.Profile1D((""hprof1d"", ""Profile of pz versus px"", 64, -4, 4), ""px"", ""py""); hprof2d = d.Profile2D((""hprof2d"", ""Profile of pz versus px and py"", 40, -4, 4, 40, -4, 4, 0, 20), ""px"", ""py"", ""pz""); ; # And Draw; c1 = ROOT.TCanvas(""c1"", ""Profile histogram example"", 200, 10, 700, 500); hprof1d.Draw(); c1.SaveAs(""df003_c1.png""); ; c2 = ROOT.TCanvas(""c2"", ""Profile2D histogram example"", 200, 10, 700, 500); hprof2d.Draw(); c2.SaveAs(""df003_c2.png""); ; print(""Saved figures to df003_*.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; . DateFebruary 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df003_profiles.py. tutorialsdataframedf003_profiles.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df003__profiles_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df003__profiles_8py.html
Testability,test,test,". ROOT: tutorials/dataframe/df003_profiles.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df003_profiles.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use TProfiles with RDataFrame. ; This tutorial illustrates how to use TProfiles in combination with the RDataFrame. See the documentation of TProfile and TProfile2D to better understand the analogy of this code with the example one.; ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example; # stand-alone.; def fill_tree(treeName, fileName):; d = ROOT.RDataFrame(25000); d.Define(""px"", ""gRandom->Gaus()"")\; .Define(""py"", ""gRandom->Gaus()"")\; .Define(""pz"", ""sqrt(px * px + py * py)"")\; .Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df003_profiles_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; # We read the tree from the file and create a RDataFrame.; d = ROOT.RDataFrame(treeName, fileName); ; # Create the profiles; hprof1d = d.Profile1D((""hprof1d"", ""Profile of pz versus px"", 64, -4, 4), ""px"", ""py""); hprof2d = d.Profile2D((""hprof2d"", ""Profile of pz versus px and py"", 40, -4, 4, 40, -4, 4, 0, 20), ""px"", ""py"", ""pz""); ; # And Draw; c1 = ROOT.TCanvas(""c1"", ""Profile histogram example"", 200, 10, 700, 500); hprof1d.Draw(); c1.SaveAs(""df003_c1.png""); ; c2 = ROOT.TCanvas(""c2"", ""Profile2D histogram example"", 200, 10, 700, 500); hprof2d.Draw(); c2.SaveAs(""df003_c2.png""); ; print(""Saved figures to df003_*.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; . DateFebruary 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df003_profiles.py. tutorialsdataframedf003_profiles.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df003__profiles_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df003__profiles_8py.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df003_profiles.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df003_profiles.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use TProfiles with RDataFrame. ; This tutorial illustrates how to use TProfiles in combination with the RDataFrame. See the documentation of TProfile and TProfile2D to better understand the analogy of this code with the example one.; ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example; # stand-alone.; def fill_tree(treeName, fileName):; d = ROOT.RDataFrame(25000); d.Define(""px"", ""gRandom->Gaus()"")\; .Define(""py"", ""gRandom->Gaus()"")\; .Define(""pz"", ""sqrt(px * px + py * py)"")\; .Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df003_profiles_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; # We read the tree from the file and create a RDataFrame.; d = ROOT.RDataFrame(treeName, fileName); ; # Create the profiles; hprof1d = d.Profile1D((""hprof1d"", ""Profile of pz versus px"", 64, -4, 4), ""px"", ""py""); hprof2d = d.Profile2D((""hprof2d"", ""Profile of pz versus px and py"", 40, -4, 4, 40, -4, 4, 0, 20), ""px"", ""py"", ""pz""); ; # And Draw; c1 = ROOT.TCanvas(""c1"", ""Profile histogram example"", 200, 10, 700, 500); hprof1d.Draw(); c1.SaveAs(""df003_c1.png""); ; c2 = ROOT.TCanvas(""c2"", ""Profile2D histogram example"", 200, 10, 700, 500); hprof2d.Draw(); c2.SaveAs(""df003_c2.png""); ; print(""Saved figures to df003_*.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; . DateFebruary 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df003_profiles.py. tutorialsdataframedf003_profiles.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df003__profiles_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df003__profiles_8py.html
Integrability,interface,interface,"is not only possible to print the information about cuts, but also to; // retrieve it to then use it programmatically.; std::cout << ""All stats:"" << std::endl;; auto allCutsReport = d.Report();; allCutsReport->Print();; ; // We can now loop on the cuts; std::cout << ""Name\tAll\tPass\tEfficiency"" << std::endl;; for (auto &&cutInfo : allCutsReport) {; std::cout << cutInfo.GetName() << ""\t"" << cutInfo.GetAll() << ""\t"" << cutInfo.GetPass() << ""\t""; << cutInfo.GetEff() << "" %"" << std::endl;; }; ; // Or get information about them individually; auto cutName = ""Cut1"";; auto cut = allCutsReport->At(""Cut1"");; std::cout << cutName << "" efficiency is "" << cut.GetEff() << "" %"" << std::endl;; }; d#define d(i)Definition RSha256.hxx:102; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:219; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; xDouble_t x[n]Definition legend1.C:17; ROOT::Math::RhoEtaPhiVectorDisplacementVector3D< CylindricalEta3D< double >, DefaultCoordinateSystemTag > RhoEtaPhiVector3D Vector based on the eta based cylindrical coordinates rho, eta, phi in double precision.Definition Vector3Dfwd.h:62; ROOT::Math::XYZTVectorLorentzVector< PxPyPzE4D< double > > XYZTVectorLorentzVector based on x,y,x,t (or px,py,pz,E) coordinates in double precision with metric (-,...Definition Vector4Dfwd.h:46; df004_cutFlowReportDefinition df004_cutFlowReport.py:1; ; Cut3 stats:; Cut2 : pass=25 all=50 -- eff=50.00 % cumulative eff=50.00 %; Cut3 : pass=23 all=25 -- eff=92.00 % cumulative eff=46.00 %; All stats:; Cut1 : pass=24 all=50 -- eff=48.00 % cumulative eff=48.00 %; Cut2 : pass=25 all=50 -- eff=50.00 % cumulative eff=50.00 %; Cut3 : pass=23 all=25 -- eff=92.00 % cumulative eff=46.00 %; Name All Pass Efficiency; Cut1 50 24 48 %; Cu",MatchSource.WIKI,doc/master/df004__cutFlowReport_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df004__cutFlowReport_8C.html
Testability,test,test,". ROOT: tutorials/dataframe/df004_cutFlowReport.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df004_cutFlowReport.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Display cut/Filter efficiencies with RDataFrame. ; This tutorial shows how to get information about the efficiency of the filters applied; ; using FourVector = ROOT::Math::XYZTVector;; using FourVectors = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(50);; int i(0);; d.Define(""b1"", [&i]() { return (double)i; }); .Define(""b2"",; [&i]() {; auto j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; void df004_cutFlowReport(); {; ; // We prepare an input tree to run on; auto fileName = ""df004_cutFlowReport.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame; ROOT::RDataFrame d(treeName, fileName, {""b1"", ""b2""});; ; // ## Define cuts and create the report; // Here we define two simple cuts; auto cut1 = [](double b1) { return b1 > 25.; };; auto cut2 = [](int b2) { return 0 == b2 % 2; };; ; // An optional string parameter name can be passed to the Filter method to create a named filter.; // Named filters work as usual, but also keep track of how many entries they accept and reject.; auto filtered1 = d.Filter(cut1, {""b1""}, ""Cut1"");; auto filtered2 = d.Filter(cut2, {""b2""}, ""Cut2"");; ; auto augmented1 = filtered2.Define(""b3"", [](double b1, int b2) { return b1 / b2; });; auto cut3 = [](double x) { return x < .5; };; auto filtered3 = augmented1.Filter(cut3, {""b3""}, ""Cut3"");; ; // Statistics are retrieved through a call to the Report method:; // when Report is called on the main RDataFrame object, it retrieves stats; // for all named filters declared up to ",MatchSource.WIKI,doc/master/df004__cutFlowReport_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df004__cutFlowReport_8C.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df004_cutFlowReport.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df004_cutFlowReport.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Display cut/Filter efficiencies with RDataFrame. ; This tutorial shows how to get information about the efficiency of the filters applied; ; using FourVector = ROOT::Math::XYZTVector;; using FourVectors = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(50);; int i(0);; d.Define(""b1"", [&i]() { return (double)i; }); .Define(""b2"",; [&i]() {; auto j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; void df004_cutFlowReport(); {; ; // We prepare an input tree to run on; auto fileName = ""df004_cutFlowReport.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame; ROOT::RDataFrame d(treeName, fileName, {""b1"", ""b2""});; ; // ## Define cuts and create the report; // Here we define two simple cuts; auto cut1 = [](double b1) { return b1 > 25.; };; auto cut2 = [](int b2) { return 0 == b2 % 2; };; ; // An optional string parameter name can be passed to the Filter method to create a named filter.; // Named filters work as usual, but also keep track of how many entries they accept and reject.; auto filtered1 = d.Filter(cut1, {""b1""}, ""Cut1"");; auto filtered2 = d.Filter(cut2, {""b2""}, ""Cut2"");; ; auto augmented1 = filtered2.Define(""b3"", [](double b1, int b2) { return b1 / b2; });; auto cut3 = [](double x) { return x < .5; };; auto filtered3 = augmented1.Filter(cut3, {""b3""}, ""Cut3"");; ; // Statistics are retrieved through a call to the Report method:; // when Report is called on the main RDataFrame object, it retrieves stats; // for all named filters declared up to ",MatchSource.WIKI,doc/master/df004__cutFlowReport_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df004__cutFlowReport_8C.html
Integrability,interface,interface," # We prepare an input tree to run on; fileName = 'df004_cutFlowReport_py.root'; treeName = 'myTree'; fill_tree(treeName, fileName); ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # ## Define cuts and create the report; # An optional string parameter name can be passed to the Filter method to create a named filter.; # Named filters work as usual, but also keep track of how many entries they accept and reject.; filtered1 = d.Filter('b1 > 25', 'Cut1'); filtered2 = d.Filter('0 == b2 % 2', 'Cut2'); ; augmented1 = filtered2.Define('b3', 'b1 / b2'); filtered3 = augmented1.Filter('b3 < .5','Cut3'); ; # Statistics are retrieved through a call to the Report method:; # when Report is called on the main RDataFrame object, it retrieves stats for; # all named filters declared up to that point. When called on a stored chain; # state (i.e. a chain/graph node), it retrieves stats for all named filters in; # the section of the chain between the main RDataFrame and that node (included).; # Stats are printed in the same order as named filters that have been added to the; # graph, and refer to the latest event-loop that has been running using the relevant; # RDataFrame.; print('Cut3 stats:'); filtered3.Report(); print('All stats:'); allCutsReport = d.Report(); allCutsReport.Print(); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; Cut1 : pass=24 all=50 -- eff=48.00 % cumulative eff=48.00 %; Cut2 : pass=25 all=50 -- eff=50.00 % cumulative eff=50.00 %; Cut3 : pass=23 all=25 -- eff=92.00 % cumulative eff=46.00 %; Cut3 stats:; All stats:; DateMay 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df004_cutFlowReport.py. tutorialsdataframedf004_cutFlowReport.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df004__cutFlowReport_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df004__cutFlowReport_8py.html
Integrability,interface,interface," helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(100);; auto i = 0.;; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df005_fillAnyObject(); {; ; // We prepare an input tree to run on; auto fileName = ""df005_fillAnyObject.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // ## Filling any object; // We now fill some objects which are instances of classes which expose a; // `Fill` method with some input arguments.; auto th1d = d.Fill<double>(TH1D(""th1d"", ""th1d"", 64, 0, 128), {""b1""});; auto th1i = d.Fill<float>(TH1I(""th1i"", ""th1i"", 64, 0, 128), {""b2""});; auto th2d = d.Fill<double, float>(TH2D(""th2d"", ""th2d"", 64, 0, 128, 64, 0, 1024), {""b1"", ""b2""});; ; auto c1 = new TCanvas();; th1d->DrawClone();; ; auto c2 = new TCanvas();; th1i->DrawClone();; ; auto c3 = new TCanvas();; th2d->DrawClone(""COLZ"");; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1I1-D histogram with an int per channel (see TH1 documentation)Definition TH1.h:540; TH2D2-D histogram with a double per channel (see TH1 documentation)Definition TH2.h:357; double; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; c3return c3Definition legend3.C:15; . DateMarch 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df005_fillAnyObject.C. tutorialsdataframedf005_fillAnyObject.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df005__fillAnyObject_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df005__fillAnyObject_8C.html
Security,expose,exposes,". ROOT: tutorials/dataframe/df005_fillAnyObject.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df005_fillAnyObject.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Using the generic Fill action. ; This tutorial shows how to fill any object the class of which exposes a Fill method.; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(100);; auto i = 0.;; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df005_fillAnyObject(); {; ; // We prepare an input tree to run on; auto fileName = ""df005_fillAnyObject.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // ## Filling any object; // We now fill some objects which are instances of classes which expose a; // `Fill` method with some input arguments.; auto th1d = d.Fill<double>(TH1D(""th1d"", ""th1d"", 64, 0, 128), {""b1""});; auto th1i = d.Fill<float>(TH1I(""th1i"", ""th1i"", 64, 0, 128), {""b2""});; auto th2d = d.Fill<double, float>(TH2D(""th2d"", ""th2d"", 64, 0, 128, 64, 0, 1024), {""b1"", ""b2""});; ; auto c1 = new TCanvas();; th1d->DrawClone();; ; auto c2 = new TCanvas();; th1i->DrawClone();; ; auto c3 = new TCanvas();; th2d->DrawClone(""COLZ"");; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1I1-D histogram with an int per channel (see TH1 documentation)Definition TH1.h:540; TH2D2-D histogram with a double per channel (see TH1 documentation)Defi",MatchSource.WIKI,doc/master/df005__fillAnyObject_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df005__fillAnyObject_8C.html
Testability,test,test,". ROOT: tutorials/dataframe/df005_fillAnyObject.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df005_fillAnyObject.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Using the generic Fill action. ; This tutorial shows how to fill any object the class of which exposes a Fill method.; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(100);; auto i = 0.;; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df005_fillAnyObject(); {; ; // We prepare an input tree to run on; auto fileName = ""df005_fillAnyObject.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // ## Filling any object; // We now fill some objects which are instances of classes which expose a; // `Fill` method with some input arguments.; auto th1d = d.Fill<double>(TH1D(""th1d"", ""th1d"", 64, 0, 128), {""b1""});; auto th1i = d.Fill<float>(TH1I(""th1i"", ""th1i"", 64, 0, 128), {""b2""});; auto th2d = d.Fill<double, float>(TH2D(""th2d"", ""th2d"", 64, 0, 128, 64, 0, 1024), {""b1"", ""b2""});; ; auto c1 = new TCanvas();; th1d->DrawClone();; ; auto c2 = new TCanvas();; th1i->DrawClone();; ; auto c3 = new TCanvas();; th2d->DrawClone(""COLZ"");; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1I1-D histogram with an int per channel (see TH1 documentation)Definition TH1.h:540; TH2D2-D histogram with a double per channel (see TH1 documentation)Defi",MatchSource.WIKI,doc/master/df005__fillAnyObject_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df005__fillAnyObject_8C.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df005_fillAnyObject.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df005_fillAnyObject.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Using the generic Fill action. ; This tutorial shows how to fill any object the class of which exposes a Fill method.; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(100);; auto i = 0.;; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df005_fillAnyObject(); {; ; // We prepare an input tree to run on; auto fileName = ""df005_fillAnyObject.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // ## Filling any object; // We now fill some objects which are instances of classes which expose a; // `Fill` method with some input arguments.; auto th1d = d.Fill<double>(TH1D(""th1d"", ""th1d"", 64, 0, 128), {""b1""});; auto th1i = d.Fill<float>(TH1I(""th1i"", ""th1i"", 64, 0, 128), {""b2""});; auto th2d = d.Fill<double, float>(TH2D(""th2d"", ""th2d"", 64, 0, 128, 64, 0, 1024), {""b1"", ""b2""});; ; auto c1 = new TCanvas();; th1d->DrawClone();; ; auto c2 = new TCanvas();; th1i->DrawClone();; ; auto c3 = new TCanvas();; th2d->DrawClone(""COLZ"");; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1I1-D histogram with an int per channel (see TH1 documentation)Definition TH1.h:540; TH2D2-D histogram with a double per channel (see TH1 documentation)Defi",MatchSource.WIKI,doc/master/df005__fillAnyObject_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df005__fillAnyObject_8C.html
Integrability,depend,depends,"tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // ## Usage of ranges; // Now we'll count some entries using ranges; auto c_all = d.Count();; ; // This is how you can express a range of the first 30 entries; auto d_0_30 = d.Range(30);; auto c_0_30 = d_0_30.Count();; ; // This is how you pick all entries from 15 onwards; auto d_15_end = d.Range(15, 0);; auto c_15_end = d_15_end.Count();; ; // We can use a stride too, in this case we pick an event every 3 entries; auto d_15_end_3 = d.Range(15, 0, 3);; auto c_15_end_3 = d_15_end_3.Count();; ; // The Range here acts first on the (whole) RDataFrame graph:; // Not only actions (like Count) but also filters and new columns can be added to it.; auto d_0_50 = d.Range(50);; auto c_0_50_odd_b1 = d_0_50.Filter(""1 == b1 % 2"").Count();; ; // An important thing to notice is that the counts of a filter are relative to the; // number of entries a filter ""sees"". Therefore, if a Range depends on a filter,; // the Range will act on the entries passing the filter only.; auto c_0_3_after_even_b1 = d.Filter(""0 == b1 % 2"").Range(0, 3).Count();; ; // Ok, time to wrap up: let's print all counts!; cout << ""Usage of ranges:\n""; << "" - All entries: "" << *c_all << endl; << "" - Entries from 0 to 30: "" << *c_0_30 << endl; << "" - Entries from 15 onwards: "" << *c_15_end << endl; << "" - Entries from 15 onwards in steps of 3: "" << *c_15_end_3 << endl; << "" - Entries from 0 to 50, odd only: "" << *c_0_50_odd_b1 << endl; << "" - First three entries of all even entries: "" << *c_0_3_after_even_b1 << endl;; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; df006_rangesDefinition df006_ranges.py:1; ; Usage of ranges:; - All entries: 100; - Entries from 0 to 30: 30; - Entries from 15 onwards: 85; - Entries from 15 onwards in steps of 3: 29; - Entries from 0 to 50, odd only:",MatchSource.WIKI,doc/master/df006__ranges_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df006__ranges_8C.html
Testability,test,test,". ROOT: tutorials/dataframe/df006_ranges.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df006_ranges.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use Range to limit the amount of data processed. ; This tutorial shows how to express the concept of ranges when working with the RDataFrame.; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(100);; int i(0);; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df006_ranges(); {; ; // We prepare an input tree to run on; auto fileName = ""df006_ranges.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // ## Usage of ranges; // Now we'll count some entries using ranges; auto c_all = d.Count();; ; // This is how you can express a range of the first 30 entries; auto d_0_30 = d.Range(30);; auto c_0_30 = d_0_30.Count();; ; // This is how you pick all entries from 15 onwards; auto d_15_end = d.Range(15, 0);; auto c_15_end = d_15_end.Count();; ; // We can use a stride too, in this case we pick an event every 3 entries; auto d_15_end_3 = d.Range(15, 0, 3);; auto c_15_end_3 = d_15_end_3.Count();; ; // The Range here acts first on the (whole) RDataFrame graph:; // Not only actions (like Count) but also filters and new columns can be added to it.; auto d_0_50 = d.Range(50);; auto c_0_50_odd_b1 = d_0_50.Filter(""1 == b1 % 2"").Count();; ; // An important thing to notice is that the counts of a filter are relative to the; // number of entries a filter ""sees"". Therefore, if a Range depends on a filter,; // the Range will act on the entries passing the filter only.; auto c_0_3_after_even_b1 = d.Filter(""0 == b1 % 2"").Range(0, 3).Count()",MatchSource.WIKI,doc/master/df006__ranges_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df006__ranges_8C.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df006_ranges.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df006_ranges.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use Range to limit the amount of data processed. ; This tutorial shows how to express the concept of ranges when working with the RDataFrame.; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(100);; int i(0);; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df006_ranges(); {; ; // We prepare an input tree to run on; auto fileName = ""df006_ranges.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // ## Usage of ranges; // Now we'll count some entries using ranges; auto c_all = d.Count();; ; // This is how you can express a range of the first 30 entries; auto d_0_30 = d.Range(30);; auto c_0_30 = d_0_30.Count();; ; // This is how you pick all entries from 15 onwards; auto d_15_end = d.Range(15, 0);; auto c_15_end = d_15_end.Count();; ; // We can use a stride too, in this case we pick an event every 3 entries; auto d_15_end_3 = d.Range(15, 0, 3);; auto c_15_end_3 = d_15_end_3.Count();; ; // The Range here acts first on the (whole) RDataFrame graph:; // Not only actions (like Count) but also filters and new columns can be added to it.; auto d_0_50 = d.Range(50);; auto c_0_50_odd_b1 = d_0_50.Filter(""1 == b1 % 2"").Count();; ; // An important thing to notice is that the counts of a filter are relative to the; // number of entries a filter ""sees"". Therefore, if a Range depends on a filter,; // the Range will act on the entries passing the filter only.; auto c_0_3_after_even_b1 = d.Filter(""0 == b1 % 2"").Range(0, 3).Count()",MatchSource.WIKI,doc/master/df006__ranges_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df006__ranges_8C.html
Integrability,depend,depends,"e = ""myTree""; ; fill_tree(treeName, fileName); ; # We read the tree from the file and create a RDataFrame.; d = ROOT.RDataFrame(treeName, fileName); ; # ## Usage of ranges; # Now we'll count some entries using ranges; c_all = d.Count(); ; # This is how you can express a range of the first 30 entries; d_0_30 = d.Range(30) ; c_0_30 = d_0_30.Count(); ; # This is how you pick all entries from 15 onwards; d_15_end = d.Range(15, 0); c_15_end = d_15_end.Count(); ; # We can use a stride too, in this case we pick an event every 3 entries; d_15_end_3 = d.Range(15, 0, 3); c_15_end_3 = d_15_end_3.Count(); ; # The Range here acts first on the (whole) RDataFrame graph:; # Not only actions (like Count) but also filters and new columns can be added to it.; d_0_50 = d.Range(50); c_0_50_odd_b1 = d_0_50.Filter(""1 == b1 % 2"").Count(); ; # An important thing to notice is that the counts of a filter are relative to the; # number of entries a filter ""sees"". Therefore, if a Range depends on a filter,; # the Range will act on the entries passing the filter only.; c_0_3_after_even_b1 = d.Filter(""0 == b1 % 2"").Range(0, 3).Count(); ; # Ok, time to wrap up: let's print all counts!; print(""Usage of ranges:""); print("" - All entries:"", c_all.GetValue()); print("" - Entries from 0 to 30:"", c_0_30.GetValue()); print("" - Entries from 15 onwards:"", c_15_end.GetValue()); print("" - Entries from 15 onwards in steps of 3:"", c_15_end_3.GetValue()); print("" - Entries from 0 to 50, odd only:"", c_0_50_odd_b1.GetValue()); print("" - First three entries of all even entries:"", c_0_3_after_even_b1.GetValue()); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; RangeTa Range(0, 0, 1, 1); Usage of ranges:; - All entries: 100; - Entries from 0 to 30: 30; - Entries from 15 onwards: 85; - Entries from 15 onwards in steps of 3: 29; - Entries from 0 to 50, odd only: 25; - First three entries of all even entries: 3; DateMarch 2017 ; ",MatchSource.WIKI,doc/master/df006__ranges_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df006__ranges_8py.html
Availability,avail,available,"riables.; // The user can explicitly specify the types of the columns as template; // arguments of the Snapshot method, otherwise they will be automatically; // inferred.; d2.Snapshot(treeName, outFileName, {""b1"", ""b1_square"", ""b2_vector""});; ; // Open the new file and list the columns of the tree; TFile f1(outFileName);; auto t = f1.Get<TTree>(treeName);; std::cout << ""These are the columns b1, b1_square and b2_vector:"" << std::endl;; for (auto branch : *t->GetListOfBranches()) {; std::cout << ""Branch: "" << branch->GetName() << std::endl;; }; f1.Close();; ; // We are not forced to write the full set of column names. We can also; // specify a regular expression for that. In case nothing is specified, all; // columns are persistified.; d2.Snapshot(treeName, outFileNameAllColumns);; ; // Open the new file and list the columns of the tree; TFile f2(outFileNameAllColumns);; t = f2.Get<TTree>(treeName);; std::cout << ""These are all the columns available to this dataframe:"" << std::endl;; for (auto branch : *t->GetListOfBranches()) {; std::cout << ""Branch: "" << branch->GetName() << std::endl;; }; f2.Close();; ; // We can also get a fresh RDataFrame out of the snapshot and restart the; // analysis chain from it. The default columns are the ones selected.; // Notice also how we can decide to be more explicit with the types of the; // columns.; auto snapshot_df = d2.Snapshot<int>(treeName, outFileName, {""b1_square""});; auto h = snapshot_df->Histo1D();; auto c = new TCanvas();; h->DrawClone();; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNamed::GetNameconst char * ",MatchSource.WIKI,doc/master/df007__snapshot_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df007__snapshot_8C.html
Integrability,interface,interface,") {; std::cout << ""Branch: "" << branch->GetName() << std::endl;; }; f1.Close();; ; // We are not forced to write the full set of column names. We can also; // specify a regular expression for that. In case nothing is specified, all; // columns are persistified.; d2.Snapshot(treeName, outFileNameAllColumns);; ; // Open the new file and list the columns of the tree; TFile f2(outFileNameAllColumns);; t = f2.Get<TTree>(treeName);; std::cout << ""These are all the columns available to this dataframe:"" << std::endl;; for (auto branch : *t->GetListOfBranches()) {; std::cout << ""Branch: "" << branch->GetName() << std::endl;; }; f2.Close();; ; // We can also get a fresh RDataFrame out of the snapshot and restart the; // analysis chain from it. The default columns are the ones selected.; // Notice also how we can decide to be more explicit with the types of the; // columns.; auto snapshot_df = d2.Snapshot<int>(treeName, outFileName, {""b1_square""});; auto h = snapshot_df->Histo1D();; auto c = new TCanvas();; h->DrawClone();; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; f1TF1 * f1Definition legend1.C:11; df007_snapshotDefinition df007_snapshot.py:1; v@ vDefinition rootcling_impl.cxx:3699; DateApril 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df007_snapshot.C. tutorialsdataframedf007_snapshot.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df007__snapshot_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df007__snapshot_8C.html
Modifiability,variab,variables,"{; ROOT::RDataFrame d(10000);; int i(0);; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df007_snapshot(); {; // We prepare an input tree to run on; auto fileName = ""df007_snapshot.root"";; auto outFileName = ""df007_snapshot_output.root"";; auto outFileNameAllColumns = ""df007_snapshot_output_allColumns.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame; ROOT::RDataFrame d(treeName, fileName);; ; // ## Select entries; // We now select some entries in the dataset; auto d_cut = d.Filter(""b1 % 2 == 0"");; // ## Enrich the dataset; // Build some temporary columns: we'll write them out; auto d2 = d_cut.Define(""b1_square"", ""b1 * b1""); .Define(""b2_vector"",; [](float b2) {; std::vector<float> v;; for (int i = 0; i < 3; i++); v.push_back(b2 * i);; return v;; },; {""b2""});; ; // ## Write it to disk in ROOT format; // We now write to disk a new dataset with one of the variables originally; // present in the tree and the new variables.; // The user can explicitly specify the types of the columns as template; // arguments of the Snapshot method, otherwise they will be automatically; // inferred.; d2.Snapshot(treeName, outFileName, {""b1"", ""b1_square"", ""b2_vector""});; ; // Open the new file and list the columns of the tree; TFile f1(outFileName);; auto t = f1.Get<TTree>(treeName);; std::cout << ""These are the columns b1, b1_square and b2_vector:"" << std::endl;; for (auto branch : *t->GetListOfBranches()) {; std::cout << ""Branch: "" << branch->GetName() << std::endl;; }; f1.Close();; ; // We are not forced to write the full set of column names. We can also; // specify a regular expression for that. In case nothing is specified, all; // columns are persistified.; d2.Snapshot(treeName, outFileNameAllColumns);; ; // Open the new file and list the columns of the tree; TFile f2(outFileNameAllColumns);; t = f2.Get<TTree>(tree",MatchSource.WIKI,doc/master/df007__snapshot_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df007__snapshot_8C.html
Testability,test,test,". ROOT: tutorials/dataframe/df007_snapshot.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df007_snapshot.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Write ROOT data with RDataFrame. ; This tutorial shows how to write out datasets in ROOT format using RDataFrame. ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(10000);; int i(0);; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df007_snapshot(); {; // We prepare an input tree to run on; auto fileName = ""df007_snapshot.root"";; auto outFileName = ""df007_snapshot_output.root"";; auto outFileNameAllColumns = ""df007_snapshot_output_allColumns.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame; ROOT::RDataFrame d(treeName, fileName);; ; // ## Select entries; // We now select some entries in the dataset; auto d_cut = d.Filter(""b1 % 2 == 0"");; // ## Enrich the dataset; // Build some temporary columns: we'll write them out; auto d2 = d_cut.Define(""b1_square"", ""b1 * b1""); .Define(""b2_vector"",; [](float b2) {; std::vector<float> v;; for (int i = 0; i < 3; i++); v.push_back(b2 * i);; return v;; },; {""b2""});; ; // ## Write it to disk in ROOT format; // We now write to disk a new dataset with one of the variables originally; // present in the tree and the new variables.; // The user can explicitly specify the types of the columns as template; // arguments of the Snapshot method, otherwise they will be automatically; // inferred.; d2.Snapshot(treeName, outFileName, {""b1"", ""b1_square"", ""b2_vector""});; ; // Open the new file and list the columns of the tree; TFile f1(outFileName);; auto t = f1.Get<TTree>(treeName);; std::cout << ""These are the columns b1, b1_square an",MatchSource.WIKI,doc/master/df007__snapshot_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df007__snapshot_8C.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df007_snapshot.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df007_snapshot.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Write ROOT data with RDataFrame. ; This tutorial shows how to write out datasets in ROOT format using RDataFrame. ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(10000);; int i(0);; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df007_snapshot(); {; // We prepare an input tree to run on; auto fileName = ""df007_snapshot.root"";; auto outFileName = ""df007_snapshot_output.root"";; auto outFileNameAllColumns = ""df007_snapshot_output_allColumns.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame; ROOT::RDataFrame d(treeName, fileName);; ; // ## Select entries; // We now select some entries in the dataset; auto d_cut = d.Filter(""b1 % 2 == 0"");; // ## Enrich the dataset; // Build some temporary columns: we'll write them out; auto d2 = d_cut.Define(""b1_square"", ""b1 * b1""); .Define(""b2_vector"",; [](float b2) {; std::vector<float> v;; for (int i = 0; i < 3; i++); v.push_back(b2 * i);; return v;; },; {""b2""});; ; // ## Write it to disk in ROOT format; // We now write to disk a new dataset with one of the variables originally; // present in the tree and the new variables.; // The user can explicitly specify the types of the columns as template; // arguments of the Snapshot method, otherwise they will be automatically; // inferred.; d2.Snapshot(treeName, outFileName, {""b1"", ""b1_square"", ""b2_vector""});; ; // Open the new file and list the columns of the tree; TFile f1(outFileName);; auto t = f1.Get<TTree>(treeName);; std::cout << ""These are the columns b1, b1_square an",MatchSource.WIKI,doc/master/df007__snapshot_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df007__snapshot_8C.html
Availability,avail,available,"v.push_back(b2*i);; return v;; }; '''; ROOT.gInterpreter.Declare(getVector_code); ; d2 = d_cut.Define(""b1_square"", ""b1 * b1"") \; .Define(""b2_vector"", ""getVector( b2 )""); ; # ## Write it to disk in ROOT format; # We now write to disk a new dataset with one of the variables originally; # present in the tree and the new variables.; # The user can explicitly specify the types of the columns as template; # arguments of the Snapshot method, otherwise they will be automatically; # inferred.; d2.Snapshot(treeName, outFileName, \; [""b1"", ""b1_square"", ""b2_vector""]); # Open the new file and list the columns of the tree; f1 = ROOT.TFile(outFileName); t = f1[treeName]; print(""These are the columns b1, b1_square and b2_vector:""); for branch in t.GetListOfBranches():; print(""Branch: %s"" %branch.GetName()); ; f1.Close(); ; # We are not forced to write the full set of column names. We can also; # specify a regular expression for that. In case nothing is specified, all; # columns are persistified.; d2.Snapshot(treeName, outFileNameAllColumns); ; # Open the new file and list the columns of the tree; f2 = ROOT.TFile(outFileNameAllColumns); t = f2[treeName]; print(""These are all the columns available to this dataframe:""); for branch in t.GetListOfBranches():; print(""Branch: %s"" %branch.GetName()); ; f2.Close(); ; # We can also get a fresh RDataFrame out of the snapshot and restart the; # analysis chain from it.; ; snapshot_df = d2.Snapshot(treeName, outFileName, [""b1_square""]);; h = snapshot_df.Histo1D(""b1_square""); ; c = ROOT.TCanvas(); h.Draw(); c.SaveAs(""df007_snapshot.png""); ; print(""Saved figure to df007_snapshot.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; DateApril 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df007_snapshot.py. tutorialsdataframedf007_snapshot.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df007__snapshot_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df007__snapshot_8py.html
Integrability,interface,interface,"v.push_back(b2*i);; return v;; }; '''; ROOT.gInterpreter.Declare(getVector_code); ; d2 = d_cut.Define(""b1_square"", ""b1 * b1"") \; .Define(""b2_vector"", ""getVector( b2 )""); ; # ## Write it to disk in ROOT format; # We now write to disk a new dataset with one of the variables originally; # present in the tree and the new variables.; # The user can explicitly specify the types of the columns as template; # arguments of the Snapshot method, otherwise they will be automatically; # inferred.; d2.Snapshot(treeName, outFileName, \; [""b1"", ""b1_square"", ""b2_vector""]); # Open the new file and list the columns of the tree; f1 = ROOT.TFile(outFileName); t = f1[treeName]; print(""These are the columns b1, b1_square and b2_vector:""); for branch in t.GetListOfBranches():; print(""Branch: %s"" %branch.GetName()); ; f1.Close(); ; # We are not forced to write the full set of column names. We can also; # specify a regular expression for that. In case nothing is specified, all; # columns are persistified.; d2.Snapshot(treeName, outFileNameAllColumns); ; # Open the new file and list the columns of the tree; f2 = ROOT.TFile(outFileNameAllColumns); t = f2[treeName]; print(""These are all the columns available to this dataframe:""); for branch in t.GetListOfBranches():; print(""Branch: %s"" %branch.GetName()); ; f2.Close(); ; # We can also get a fresh RDataFrame out of the snapshot and restart the; # analysis chain from it.; ; snapshot_df = d2.Snapshot(treeName, outFileName, [""b1_square""]);; h = snapshot_df.Histo1D(""b1_square""); ; c = ROOT.TCanvas(); h.Draw(); c.SaveAs(""df007_snapshot.png""); ; print(""Saved figure to df007_snapshot.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; DateApril 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df007_snapshot.py. tutorialsdataframedf007_snapshot.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df007__snapshot_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df007__snapshot_8py.html
Modifiability,variab,variables,"Frame(10000); df.Define(""b1"", ""(int) rdfentry_"")\; .Define(""b2"", ""(float) rdfentry_ * rdfentry_"").Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df007_snapshot_py.root""; outFileName = ""df007_snapshot_output_py.root""; outFileNameAllColumns = ""df007_snapshot_output_allColumns_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; # We read the tree from the file and create a RDataFrame; d = ROOT.RDataFrame(treeName, fileName); ; # ## Select entries; # We now select some entries in the dataset; d_cut = d.Filter(""b1 % 2 == 0""); # ## Enrich the dataset; # Build some temporary columns: we'll write them out; ; getVector_code ='''; std::vector<float> getVector (float b2); {; std::vector<float> v;; for (int i = 0; i < 3; i++) v.push_back(b2*i);; return v;; }; '''; ROOT.gInterpreter.Declare(getVector_code); ; d2 = d_cut.Define(""b1_square"", ""b1 * b1"") \; .Define(""b2_vector"", ""getVector( b2 )""); ; # ## Write it to disk in ROOT format; # We now write to disk a new dataset with one of the variables originally; # present in the tree and the new variables.; # The user can explicitly specify the types of the columns as template; # arguments of the Snapshot method, otherwise they will be automatically; # inferred.; d2.Snapshot(treeName, outFileName, \; [""b1"", ""b1_square"", ""b2_vector""]); # Open the new file and list the columns of the tree; f1 = ROOT.TFile(outFileName); t = f1[treeName]; print(""These are the columns b1, b1_square and b2_vector:""); for branch in t.GetListOfBranches():; print(""Branch: %s"" %branch.GetName()); ; f1.Close(); ; # We are not forced to write the full set of column names. We can also; # specify a regular expression for that. In case nothing is specified, all; # columns are persistified.; d2.Snapshot(treeName, outFileNameAllColumns); ; # Open the new file and list the columns of the tree; f2 = ROOT.TFile(outFileNameAllColumns); t = f2[treeName]; print(""These are all the columns available to this dataframe:""); for branc",MatchSource.WIKI,doc/master/df007__snapshot_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df007__snapshot_8py.html
Testability,test,test,". ROOT: tutorials/dataframe/df007_snapshot.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df007_snapshot.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Write ROOT data with RDataFrame. ; This tutorial shows how to write out datasets in ROOT format using RDataFrame. ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example stand-alone.; def fill_tree(treeName, fileName):; df = ROOT.RDataFrame(10000); df.Define(""b1"", ""(int) rdfentry_"")\; .Define(""b2"", ""(float) rdfentry_ * rdfentry_"").Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df007_snapshot_py.root""; outFileName = ""df007_snapshot_output_py.root""; outFileNameAllColumns = ""df007_snapshot_output_allColumns_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; # We read the tree from the file and create a RDataFrame; d = ROOT.RDataFrame(treeName, fileName); ; # ## Select entries; # We now select some entries in the dataset; d_cut = d.Filter(""b1 % 2 == 0""); # ## Enrich the dataset; # Build some temporary columns: we'll write them out; ; getVector_code ='''; std::vector<float> getVector (float b2); {; std::vector<float> v;; for (int i = 0; i < 3; i++) v.push_back(b2*i);; return v;; }; '''; ROOT.gInterpreter.Declare(getVector_code); ; d2 = d_cut.Define(""b1_square"", ""b1 * b1"") \; .Define(""b2_vector"", ""getVector( b2 )""); ; # ## Write it to disk in ROOT format; # We now write to disk a new dataset with one of the variables originally; # present in the tree and the new variables.; # The user can explicitly specify the types of the columns as template; # arguments of the Snapshot method, otherwise they will be automatically; # inferred.; d2.Snapshot(treeName, outFileName, \; [""b1"", ""b1_square"", ""b2_vector""]); # Open the new file and list the columns of the tree; f1 = ROOT.TFile(outFileName); t = f1[treeName]; print(""These are the columns b1, b1_square and b2_vecto",MatchSource.WIKI,doc/master/df007__snapshot_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df007__snapshot_8py.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df007_snapshot.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df007_snapshot.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Write ROOT data with RDataFrame. ; This tutorial shows how to write out datasets in ROOT format using RDataFrame. ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example stand-alone.; def fill_tree(treeName, fileName):; df = ROOT.RDataFrame(10000); df.Define(""b1"", ""(int) rdfentry_"")\; .Define(""b2"", ""(float) rdfentry_ * rdfentry_"").Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df007_snapshot_py.root""; outFileName = ""df007_snapshot_output_py.root""; outFileNameAllColumns = ""df007_snapshot_output_allColumns_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; # We read the tree from the file and create a RDataFrame; d = ROOT.RDataFrame(treeName, fileName); ; # ## Select entries; # We now select some entries in the dataset; d_cut = d.Filter(""b1 % 2 == 0""); # ## Enrich the dataset; # Build some temporary columns: we'll write them out; ; getVector_code ='''; std::vector<float> getVector (float b2); {; std::vector<float> v;; for (int i = 0; i < 3; i++) v.push_back(b2*i);; return v;; }; '''; ROOT.gInterpreter.Declare(getVector_code); ; d2 = d_cut.Define(""b1_square"", ""b1 * b1"") \; .Define(""b2_vector"", ""getVector( b2 )""); ; # ## Write it to disk in ROOT format; # We now write to disk a new dataset with one of the variables originally; # present in the tree and the new variables.; # The user can explicitly specify the types of the columns as template; # arguments of the Snapshot method, otherwise they will be automatically; # inferred.; d2.Snapshot(treeName, outFileName, \; [""b1"", ""b1_square"", ""b2_vector""]); # Open the new file and list the columns of the tree; f1 = ROOT.TFile(outFileName); t = f1[treeName]; print(""These are the columns b1, b1_square and b2_vecto",MatchSource.WIKI,doc/master/df007__snapshot_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df007__snapshot_8py.html
Integrability,interface,interface,". ROOT: tutorials/dataframe/df008_createDataSetFromScratch.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df008_createDataSetFromScratch.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Create data from scratch with RDataFrame. ; This tutorial shows how to create a dataset from scratch with RDataFrame; ; void df008_createDataSetFromScratch(); {; // We create an empty data frame of 100 entries; ROOT::RDataFrame df(100);; ; // We now fill it with random numbers; gRandom->SetSeed(1);; auto df_1 = df.Define(""rnd"", []() { return gRandom->Gaus(); });; ; // And we write out the dataset on disk; df_1.Snapshot(""randomNumbers"", ""df008_createDataSetFromScratch.root"");; }; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; df008_createDataSetFromScratchDefinition df008_createDataSetFromScratch.py:1; DateJune 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df008_createDataSetFromScratch.C. tutorialsdataframedf008_createDataSetFromScratch.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df008__createDataSetFromScratch_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df008__createDataSetFromScratch_8C.html
Integrability,interface,interface,". ROOT: tutorials/dataframe/df008_createDataSetFromScratch.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df008_createDataSetFromScratch.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Create data from scratch with RDataFrame. ; This tutorial shows how to create a dataset from scratch with RDataFrame; ; import ROOT; ; # We create an empty data frame of 100 entries; df = ROOT.RDataFrame(100); ; # We now fill it with random numbers; ROOT.gRandom.SetSeed(1); df_1 = df.Define(""rnd"", ""gRandom->Gaus()""); ; # And we write out the dataset on disk; df_1.Snapshot(""randomNumbers"", ""df008_createDataSetFromScratch_py.root""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; DateJune 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df008_createDataSetFromScratch.py. tutorialsdataframedf008_createDataSetFromScratch.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df008__createDataSetFromScratch_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df008__createDataSetFromScratch_8py.html
Integrability,interface,interfaces,". ROOT: tutorials/dataframe/df009_FromScratchVSTTree.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df009_FromScratchVSTTree.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Compare creation of a ROOT dataset with RDataFrame and TTree. ; This tutorial illustrates how much simpler it can be to use a RDataFrame to create a dataset with respect to the usage of the TTree interfaces.; ; // ##This is the classic way of creating a ROOT dataset; // The steps are:; // - Create a file; // - Create a tree associated to the file; // - Define the variables to write in the entries; // - Define the branches associated to those variables; // - Write the event loop to set the right value to the variables; // - Call TTree::Fill to save the value of the variables; // - Write the TTree; // - Close the file; void classicWay(); {; TFile f(""df009_FromScratchVSTTree_classic.root"", ""RECREATE"");; TTree t(""treeName"", ""treeName"");; double b1;; int b2;; t.Branch(""b1"", &b1);; t.Branch(""b2"", &b2);; for (int i = 0; i < 10; ++i) {; b1 = i;; b2 = i * i;; t.Fill();; }; t.Write();; f.Close();; }; ; // ##This is the RDF way of creating a ROOT dataset; // Few lines are needed to achieve the same result.; // Parallel creation of the TTree is not supported in the; // classic method.; // In this case the steps are:; // - Create an empty RDataFrame; // - If needed, define variables for the functions used to fill the branches; // - Create new columns expressing their content with lambdas, functors, functions or strings; // - Invoke the Snapshot action; //; // Parallelism is not the only advantage. Starting from an existing dataset,; // filtering it, enriching it with new columns, leaving aside some other columns, and; // writing a new dataset become very easy to do.; void RDFWay(); {; ROOT::RDataFrame df(10);; auto b = 0.;; df.Define(""b1"", [&b]() { return b++; }); .Define(""b2"", ""(int) b1 * b1"") // This can even be a string; .Snapshot(""t",MatchSource.WIKI,doc/master/df009__FromScratchVSTTree_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df009__FromScratchVSTTree_8C.html
Modifiability,variab,variables,". ROOT: tutorials/dataframe/df009_FromScratchVSTTree.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df009_FromScratchVSTTree.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Compare creation of a ROOT dataset with RDataFrame and TTree. ; This tutorial illustrates how much simpler it can be to use a RDataFrame to create a dataset with respect to the usage of the TTree interfaces.; ; // ##This is the classic way of creating a ROOT dataset; // The steps are:; // - Create a file; // - Create a tree associated to the file; // - Define the variables to write in the entries; // - Define the branches associated to those variables; // - Write the event loop to set the right value to the variables; // - Call TTree::Fill to save the value of the variables; // - Write the TTree; // - Close the file; void classicWay(); {; TFile f(""df009_FromScratchVSTTree_classic.root"", ""RECREATE"");; TTree t(""treeName"", ""treeName"");; double b1;; int b2;; t.Branch(""b1"", &b1);; t.Branch(""b2"", &b2);; for (int i = 0; i < 10; ++i) {; b1 = i;; b2 = i * i;; t.Fill();; }; t.Write();; f.Close();; }; ; // ##This is the RDF way of creating a ROOT dataset; // Few lines are needed to achieve the same result.; // Parallel creation of the TTree is not supported in the; // classic method.; // In this case the steps are:; // - Create an empty RDataFrame; // - If needed, define variables for the functions used to fill the branches; // - Create new columns expressing their content with lambdas, functors, functions or strings; // - Invoke the Snapshot action; //; // Parallelism is not the only advantage. Starting from an existing dataset,; // filtering it, enriching it with new columns, leaving aside some other columns, and; // writing a new dataset become very easy to do.; void RDFWay(); {; ROOT::RDataFrame df(10);; auto b = 0.;; df.Define(""b1"", [&b]() { return b++; }); .Define(""b2"", ""(int) b1 * b1"") // This can even be a string; .Snapshot(""t",MatchSource.WIKI,doc/master/df009__FromScratchVSTTree_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df009__FromScratchVSTTree_8C.html
Usability,simpl,simpler,". ROOT: tutorials/dataframe/df009_FromScratchVSTTree.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df009_FromScratchVSTTree.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Compare creation of a ROOT dataset with RDataFrame and TTree. ; This tutorial illustrates how much simpler it can be to use a RDataFrame to create a dataset with respect to the usage of the TTree interfaces.; ; // ##This is the classic way of creating a ROOT dataset; // The steps are:; // - Create a file; // - Create a tree associated to the file; // - Define the variables to write in the entries; // - Define the branches associated to those variables; // - Write the event loop to set the right value to the variables; // - Call TTree::Fill to save the value of the variables; // - Write the TTree; // - Close the file; void classicWay(); {; TFile f(""df009_FromScratchVSTTree_classic.root"", ""RECREATE"");; TTree t(""treeName"", ""treeName"");; double b1;; int b2;; t.Branch(""b1"", &b1);; t.Branch(""b2"", &b2);; for (int i = 0; i < 10; ++i) {; b1 = i;; b2 = i * i;; t.Fill();; }; t.Write();; f.Close();; }; ; // ##This is the RDF way of creating a ROOT dataset; // Few lines are needed to achieve the same result.; // Parallel creation of the TTree is not supported in the; // classic method.; // In this case the steps are:; // - Create an empty RDataFrame; // - If needed, define variables for the functions used to fill the branches; // - Create new columns expressing their content with lambdas, functors, functions or strings; // - Invoke the Snapshot action; //; // Parallelism is not the only advantage. Starting from an existing dataset,; // filtering it, enriching it with new columns, leaving aside some other columns, and; // writing a new dataset become very easy to do.; void RDFWay(); {; ROOT::RDataFrame df(10);; auto b = 0.;; df.Define(""b1"", [&b]() { return b++; }); .Define(""b2"", ""(int) b1 * b1"") // This can even be a string; .Snapshot(""t",MatchSource.WIKI,doc/master/df009__FromScratchVSTTree_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df009__FromScratchVSTTree_8C.html
Availability,avail,available,". ROOT: tutorials/dataframe/df010_trivialDataSource.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df010_trivialDataSource.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use the ""trivial data source"", an example data source implementation. ; This tutorial illustrates how use the RDataFrame in combination with a RDataSource. In this case we use a RTrivialDS, which is nothing more than a simple generator: it does not interface to any existing dataset. The RTrivialDS has a single column, col0, which has value n for entry n. The code for RTrivialDS is available at these links (header and source):; https://github.com/root-project/root/blob/master/tree/dataframe/src/RTrivialDS.cxx; https://github.com/root-project/root/blob/master/tree/dataframe/inc/ROOT/RTrivialDS.hxx. Note that RTrivialDS is only a demo data source implementation and superior alternatives typically exist for production use (e.g. constructing an empty RDataFrame as RDataFrame(nEntries)).; ; int df010_trivialDataSource(); {; auto nEvents = 128U;; auto d_s = ROOT::RDF::MakeTrivialDataFrame(nEvents);; ; /// Now we have a regular RDataFrame: the ingestion of data is delegated to; /// the RDataSource. At this point everything works as before.; auto h_s = d_s.Define(""x"", ""1./(1. + col0)"").Histo1D({""h_s"", ""h_s"", 128, 0, .6}, ""x"");; ; /// Now we redo the same with a RDF from scratch and we draw the two histograms; ROOT::RDataFrame d(nEvents);; ; /// This lambda redoes what the RTrivialDS provides; auto g = []() {; static ULong64_t i = 0;; return i++;; };; auto h = d.Define(""col0"", g).Define(""x"", ""1./(1. + col0)"").Histo1D({""h"", ""h"", 128, 0, .6}, ""x"");; ; auto c_s = new TCanvas();; c_s->SetLogy();; h_s->DrawClone();; ; auto c = new TCanvas();; c->SetLogy();; h->DrawClone();; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; h#define h(i)Definition RSha25",MatchSource.WIKI,doc/master/df010__trivialDataSource_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df010__trivialDataSource_8C.html
Integrability,interface,interface,". ROOT: tutorials/dataframe/df010_trivialDataSource.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df010_trivialDataSource.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use the ""trivial data source"", an example data source implementation. ; This tutorial illustrates how use the RDataFrame in combination with a RDataSource. In this case we use a RTrivialDS, which is nothing more than a simple generator: it does not interface to any existing dataset. The RTrivialDS has a single column, col0, which has value n for entry n. The code for RTrivialDS is available at these links (header and source):; https://github.com/root-project/root/blob/master/tree/dataframe/src/RTrivialDS.cxx; https://github.com/root-project/root/blob/master/tree/dataframe/inc/ROOT/RTrivialDS.hxx. Note that RTrivialDS is only a demo data source implementation and superior alternatives typically exist for production use (e.g. constructing an empty RDataFrame as RDataFrame(nEntries)).; ; int df010_trivialDataSource(); {; auto nEvents = 128U;; auto d_s = ROOT::RDF::MakeTrivialDataFrame(nEvents);; ; /// Now we have a regular RDataFrame: the ingestion of data is delegated to; /// the RDataSource. At this point everything works as before.; auto h_s = d_s.Define(""x"", ""1./(1. + col0)"").Histo1D({""h_s"", ""h_s"", 128, 0, .6}, ""x"");; ; /// Now we redo the same with a RDF from scratch and we draw the two histograms; ROOT::RDataFrame d(nEvents);; ; /// This lambda redoes what the RTrivialDS provides; auto g = []() {; static ULong64_t i = 0;; return i++;; };; auto h = d.Define(""col0"", g).Define(""x"", ""1./(1. + col0)"").Histo1D({""h"", ""h"", 128, 0, .6}, ""x"");; ; auto c_s = new TCanvas();; c_s->SetLogy();; h_s->DrawClone();; ; auto c = new TCanvas();; c->SetLogy();; h->DrawClone();; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; h#define h(i)Definition RSha25",MatchSource.WIKI,doc/master/df010__trivialDataSource_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df010__trivialDataSource_8C.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df010_trivialDataSource.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df010_trivialDataSource.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use the ""trivial data source"", an example data source implementation. ; This tutorial illustrates how use the RDataFrame in combination with a RDataSource. In this case we use a RTrivialDS, which is nothing more than a simple generator: it does not interface to any existing dataset. The RTrivialDS has a single column, col0, which has value n for entry n. The code for RTrivialDS is available at these links (header and source):; https://github.com/root-project/root/blob/master/tree/dataframe/src/RTrivialDS.cxx; https://github.com/root-project/root/blob/master/tree/dataframe/inc/ROOT/RTrivialDS.hxx. Note that RTrivialDS is only a demo data source implementation and superior alternatives typically exist for production use (e.g. constructing an empty RDataFrame as RDataFrame(nEntries)).; ; int df010_trivialDataSource(); {; auto nEvents = 128U;; auto d_s = ROOT::RDF::MakeTrivialDataFrame(nEvents);; ; /// Now we have a regular RDataFrame: the ingestion of data is delegated to; /// the RDataSource. At this point everything works as before.; auto h_s = d_s.Define(""x"", ""1./(1. + col0)"").Histo1D({""h_s"", ""h_s"", 128, 0, .6}, ""x"");; ; /// Now we redo the same with a RDF from scratch and we draw the two histograms; ROOT::RDataFrame d(nEvents);; ; /// This lambda redoes what the RTrivialDS provides; auto g = []() {; static ULong64_t i = 0;; return i++;; };; auto h = d.Define(""col0"", g).Define(""x"", ""1./(1. + col0)"").Histo1D({""h"", ""h"", 128, 0, .6}, ""x"");; ; auto c_s = new TCanvas();; c_s->SetLogy();; h_s->DrawClone();; ; auto c = new TCanvas();; c->SetLogy();; h->DrawClone();; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; h#define h(i)Definition RSha25",MatchSource.WIKI,doc/master/df010__trivialDataSource_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df010__trivialDataSource_8C.html
Integrability,interface,interface,". ROOT: tutorials/dataframe/df010_trivialDataSource.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df010_trivialDataSource.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use the ""trivial data source"", an example data source implementation. ; This tutorial illustrates how use the RDataFrame in combination with a RDataSource. In this case we use a RTrivialDS, which is nothing more than a simple generator: it does not interface to any existing dataset. The RTrivialDS has a single column, col0, which has value n for entry n.; Note that RTrivialDS is only a demo data source implementation and superior alternatives typically exist for production use (e.g. constructing an empty RDataFrame as RDataFrame(nEntries)).; ; import ROOT; ; # Create the data frame; MakeTrivialDataFrame = ROOT.RDF.MakeTrivialDataFrame; ; nEvents = 128; ; d_s = MakeTrivialDataFrame(nEvents); ; # Now we have a regular RDataFrame: the ingestion of data is delegated to; # the RDataSource. At this point everything works as before.; h_s = d_s.Define(""x"", ""1./(1. + col0)"").Histo1D((""h_s"", ""h_s"", 128, 0, .6), ""x""); ; c = ROOT.TCanvas(); c.SetLogy(); h_s.Draw(); c.SaveAs(""df010_trivialDataSource.png""); ; print(""Saved figure to df010_trivialDataSource.png""); DateSeptember 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df010_trivialDataSource.py. tutorialsdataframedf010_trivialDataSource.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df010__trivialDataSource_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df010__trivialDataSource_8py.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df010_trivialDataSource.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df010_trivialDataSource.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use the ""trivial data source"", an example data source implementation. ; This tutorial illustrates how use the RDataFrame in combination with a RDataSource. In this case we use a RTrivialDS, which is nothing more than a simple generator: it does not interface to any existing dataset. The RTrivialDS has a single column, col0, which has value n for entry n.; Note that RTrivialDS is only a demo data source implementation and superior alternatives typically exist for production use (e.g. constructing an empty RDataFrame as RDataFrame(nEntries)).; ; import ROOT; ; # Create the data frame; MakeTrivialDataFrame = ROOT.RDF.MakeTrivialDataFrame; ; nEvents = 128; ; d_s = MakeTrivialDataFrame(nEvents); ; # Now we have a regular RDataFrame: the ingestion of data is delegated to; # the RDataSource. At this point everything works as before.; h_s = d_s.Define(""x"", ""1./(1. + col0)"").Histo1D((""h_s"", ""h_s"", 128, 0, .6), ""x""); ; c = ROOT.TCanvas(); c.SetLogy(); h_s.Draw(); c.SaveAs(""df010_trivialDataSource.png""); ; print(""Saved figure to df010_trivialDataSource.png""); DateSeptember 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df010_trivialDataSource.py. tutorialsdataframedf010_trivialDataSource.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df010__trivialDataSource_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df010__trivialDataSource_8py.html
Availability,failure,failures,"enceTutorials » Dataframe tutorials. Detailed Description; Use just-in-time-compiled Filters and Defines for quick prototyping. ; This tutorial illustrates how to save some typing when using RDataFrame by invoking functions that perform jit-compiling at runtime.; ; void df012_DefinesAndFiltersAsStrings(); {; // We will inefficiently calculate an approximation of pi by generating; // some data, and doing very simple filtering and analysis on it.; ; // We start by creating an empty dataframe where we will insert 10 million; // random points in a square of side 2.0 (that is, with an inscribed circle; // of radius 1.0).; ; size_t npoints = 10000000;; ROOT::RDataFrame df(npoints);; ; // Define what we want inside the dataframe. We do not need to define p as an array,; // but we do it here to demonstrate how to use jitting with RDataFrame.; ; // NOTE: Although it's possible to use ""for (auto&& x : p)"" below, it will; // shadow the name of the data column ""x"", and may cause compilation failures; // if the local variable and the data column are of different types, or the; // local x variable is declared in the global scope of the lambda function.; ; auto pidf = df.Define(""x"", ""gRandom->Uniform(-1.0, 1.0)""); .Define(""y"", ""gRandom->Uniform(-1.0, 1.0)""); .Define(""p"", ""std::array<double, 2> v{x, y}; return v;""); .Define(""r"", ""double r2 = 0.0; for (auto&& x : p) r2 += x*x; return sqrt(r2);"");; ; // Now we have a dataframe with columns x, y, p (which is a point based on x; // and y), and the radius r = sqrt(x*x + y*y). In order to approximate pi, we; // need to know how many of our data points fall inside the unit circle compared; // with the total number of points. The ratio of the areas is; //; // A_circle / A_square = pi r*r / l * l, where r = 1.0, and l = 2.0; //; // Therefore, we can approximate pi with four times the number of points inside the; // unit circle over the total number of points in our dataframe:; ; auto incircle = *(pidf.Filter(""r <= 1.0"").Count());; ; double p",MatchSource.WIKI,doc/master/df012__DefinesAndFiltersAsStrings_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df012__DefinesAndFiltersAsStrings_8C.html
Integrability,interface,interface,"000000;; ROOT::RDataFrame df(npoints);; ; // Define what we want inside the dataframe. We do not need to define p as an array,; // but we do it here to demonstrate how to use jitting with RDataFrame.; ; // NOTE: Although it's possible to use ""for (auto&& x : p)"" below, it will; // shadow the name of the data column ""x"", and may cause compilation failures; // if the local variable and the data column are of different types, or the; // local x variable is declared in the global scope of the lambda function.; ; auto pidf = df.Define(""x"", ""gRandom->Uniform(-1.0, 1.0)""); .Define(""y"", ""gRandom->Uniform(-1.0, 1.0)""); .Define(""p"", ""std::array<double, 2> v{x, y}; return v;""); .Define(""r"", ""double r2 = 0.0; for (auto&& x : p) r2 += x*x; return sqrt(r2);"");; ; // Now we have a dataframe with columns x, y, p (which is a point based on x; // and y), and the radius r = sqrt(x*x + y*y). In order to approximate pi, we; // need to know how many of our data points fall inside the unit circle compared; // with the total number of points. The ratio of the areas is; //; // A_circle / A_square = pi r*r / l * l, where r = 1.0, and l = 2.0; //; // Therefore, we can approximate pi with four times the number of points inside the; // unit circle over the total number of points in our dataframe:; ; auto incircle = *(pidf.Filter(""r <= 1.0"").Count());; ; double pi_approx = 4.0 * incircle / npoints;; ; std::cout << ""pi is approximately equal to "" << pi_approx << std::endl;; }; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; df012_DefinesAndFiltersAsStringsDefinition df012_DefinesAndFiltersAsStrings.py:1; ; pi is approximately equal to 3.14146; DateOctober 2017 ; AuthorGuilherme Amadio (CERN) ; Definition in file df012_DefinesAndFiltersAsStrings.C. tutorialsdataframedf012_DefinesAndFiltersAsStrings.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df012__DefinesAndFiltersAsStrings_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df012__DefinesAndFiltersAsStrings_8C.html
Modifiability,variab,variable,"enceTutorials » Dataframe tutorials. Detailed Description; Use just-in-time-compiled Filters and Defines for quick prototyping. ; This tutorial illustrates how to save some typing when using RDataFrame by invoking functions that perform jit-compiling at runtime.; ; void df012_DefinesAndFiltersAsStrings(); {; // We will inefficiently calculate an approximation of pi by generating; // some data, and doing very simple filtering and analysis on it.; ; // We start by creating an empty dataframe where we will insert 10 million; // random points in a square of side 2.0 (that is, with an inscribed circle; // of radius 1.0).; ; size_t npoints = 10000000;; ROOT::RDataFrame df(npoints);; ; // Define what we want inside the dataframe. We do not need to define p as an array,; // but we do it here to demonstrate how to use jitting with RDataFrame.; ; // NOTE: Although it's possible to use ""for (auto&& x : p)"" below, it will; // shadow the name of the data column ""x"", and may cause compilation failures; // if the local variable and the data column are of different types, or the; // local x variable is declared in the global scope of the lambda function.; ; auto pidf = df.Define(""x"", ""gRandom->Uniform(-1.0, 1.0)""); .Define(""y"", ""gRandom->Uniform(-1.0, 1.0)""); .Define(""p"", ""std::array<double, 2> v{x, y}; return v;""); .Define(""r"", ""double r2 = 0.0; for (auto&& x : p) r2 += x*x; return sqrt(r2);"");; ; // Now we have a dataframe with columns x, y, p (which is a point based on x; // and y), and the radius r = sqrt(x*x + y*y). In order to approximate pi, we; // need to know how many of our data points fall inside the unit circle compared; // with the total number of points. The ratio of the areas is; //; // A_circle / A_square = pi r*r / l * l, where r = 1.0, and l = 2.0; //; // Therefore, we can approximate pi with four times the number of points inside the; // unit circle over the total number of points in our dataframe:; ; auto incircle = *(pidf.Filter(""r <= 1.0"").Count());; ; double p",MatchSource.WIKI,doc/master/df012__DefinesAndFiltersAsStrings_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df012__DefinesAndFiltersAsStrings_8C.html
Performance,perform,perform,". ROOT: tutorials/dataframe/df012_DefinesAndFiltersAsStrings.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df012_DefinesAndFiltersAsStrings.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use just-in-time-compiled Filters and Defines for quick prototyping. ; This tutorial illustrates how to save some typing when using RDataFrame by invoking functions that perform jit-compiling at runtime.; ; void df012_DefinesAndFiltersAsStrings(); {; // We will inefficiently calculate an approximation of pi by generating; // some data, and doing very simple filtering and analysis on it.; ; // We start by creating an empty dataframe where we will insert 10 million; // random points in a square of side 2.0 (that is, with an inscribed circle; // of radius 1.0).; ; size_t npoints = 10000000;; ROOT::RDataFrame df(npoints);; ; // Define what we want inside the dataframe. We do not need to define p as an array,; // but we do it here to demonstrate how to use jitting with RDataFrame.; ; // NOTE: Although it's possible to use ""for (auto&& x : p)"" below, it will; // shadow the name of the data column ""x"", and may cause compilation failures; // if the local variable and the data column are of different types, or the; // local x variable is declared in the global scope of the lambda function.; ; auto pidf = df.Define(""x"", ""gRandom->Uniform(-1.0, 1.0)""); .Define(""y"", ""gRandom->Uniform(-1.0, 1.0)""); .Define(""p"", ""std::array<double, 2> v{x, y}; return v;""); .Define(""r"", ""double r2 = 0.0; for (auto&& x : p) r2 += x*x; return sqrt(r2);"");; ; // Now we have a dataframe with columns x, y, p (which is a point based on x; // and y), and the radius r = sqrt(x*x + y*y). In order to approximate pi, we; // need to know how many of our data points fall inside the unit circle compared; // with the total number of points. The ratio of the areas is; //; // A_circle / A_square = pi r*r / l * l, where r = 1.0, and l = 2.0; //; // Therefor",MatchSource.WIKI,doc/master/df012__DefinesAndFiltersAsStrings_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df012__DefinesAndFiltersAsStrings_8C.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df012_DefinesAndFiltersAsStrings.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df012_DefinesAndFiltersAsStrings.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use just-in-time-compiled Filters and Defines for quick prototyping. ; This tutorial illustrates how to save some typing when using RDataFrame by invoking functions that perform jit-compiling at runtime.; ; void df012_DefinesAndFiltersAsStrings(); {; // We will inefficiently calculate an approximation of pi by generating; // some data, and doing very simple filtering and analysis on it.; ; // We start by creating an empty dataframe where we will insert 10 million; // random points in a square of side 2.0 (that is, with an inscribed circle; // of radius 1.0).; ; size_t npoints = 10000000;; ROOT::RDataFrame df(npoints);; ; // Define what we want inside the dataframe. We do not need to define p as an array,; // but we do it here to demonstrate how to use jitting with RDataFrame.; ; // NOTE: Although it's possible to use ""for (auto&& x : p)"" below, it will; // shadow the name of the data column ""x"", and may cause compilation failures; // if the local variable and the data column are of different types, or the; // local x variable is declared in the global scope of the lambda function.; ; auto pidf = df.Define(""x"", ""gRandom->Uniform(-1.0, 1.0)""); .Define(""y"", ""gRandom->Uniform(-1.0, 1.0)""); .Define(""p"", ""std::array<double, 2> v{x, y}; return v;""); .Define(""r"", ""double r2 = 0.0; for (auto&& x : p) r2 += x*x; return sqrt(r2);"");; ; // Now we have a dataframe with columns x, y, p (which is a point based on x; // and y), and the radius r = sqrt(x*x + y*y). In order to approximate pi, we; // need to know how many of our data points fall inside the unit circle compared; // with the total number of points. The ratio of the areas is; //; // A_circle / A_square = pi r*r / l * l, where r = 1.0, and l = 2.0; //; // Therefor",MatchSource.WIKI,doc/master/df012__DefinesAndFiltersAsStrings_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df012__DefinesAndFiltersAsStrings_8C.html
Integrability,interface,interface,"it-compiling features of RDataFrame to define data using C++ code in a Python script.; ; import ROOT; ; ## We will inefficiently calculate an approximation of pi by generating; ## some data and doing very simple filtering and analysis on it.; ; ## We start by creating an empty dataframe where we will insert 10 million; ## random points in a square of side 2.0 (that is, with an inscribed unit; ## circle).; ; npoints = 10000000; df = ROOT.RDataFrame(npoints); ; ## Define what data we want inside the dataframe. We do not need to define p; ## as an array, but we do it here to demonstrate how to use jitting with RDataFrame.; ; pidf = df.Define(""x"", ""gRandom->Uniform(-1.0, 1.0)"") \; .Define(""y"", ""gRandom->Uniform(-1.0, 1.0)"") \; .Define(""p"", ""std::array<double, 2> v{x, y}; return v;"") \; .Define(""r"", ""double r2 = 0.0; for (auto&& w : p) r2 += w*w; return sqrt(r2);""); ; ## Now we have a dataframe with columns x, y, p (which is a point based on x; ## and y), and the radius r = sqrt(x*x + y*y). In order to approximate pi, we; ## need to know how many of our data points fall inside the circle of radius; ## one compared with the total number of points. The ratio of the areas is; ##; ## A_circle / A_square = pi r*r / l * l, where r = 1.0, and l = 2.0; ##; ## Therefore, we can approximate pi with four times the number of points inside; ## the unit circle over the total number of points:; ; incircle = pidf.Filter(""r <= 1.0"").Count().GetValue(); ; pi_approx = 4.0 * incircle / npoints; ; print(""pi is approximately equal to %g"" % (pi_approx)); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; pi is approximately equal to 3.14146; DateOctober 2017 ; AuthorGuilherme Amadio (CERN) ; Definition in file df012_DefinesAndFiltersAsStrings.py. tutorialsdataframedf012_DefinesAndFiltersAsStrings.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df012__DefinesAndFiltersAsStrings_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df012__DefinesAndFiltersAsStrings_8py.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df012_DefinesAndFiltersAsStrings.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df012_DefinesAndFiltersAsStrings.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use just-in-time-compiled Filters and Defines for quick prototyping. ; This tutorial illustrates how to use jit-compiling features of RDataFrame to define data using C++ code in a Python script.; ; import ROOT; ; ## We will inefficiently calculate an approximation of pi by generating; ## some data and doing very simple filtering and analysis on it.; ; ## We start by creating an empty dataframe where we will insert 10 million; ## random points in a square of side 2.0 (that is, with an inscribed unit; ## circle).; ; npoints = 10000000; df = ROOT.RDataFrame(npoints); ; ## Define what data we want inside the dataframe. We do not need to define p; ## as an array, but we do it here to demonstrate how to use jitting with RDataFrame.; ; pidf = df.Define(""x"", ""gRandom->Uniform(-1.0, 1.0)"") \; .Define(""y"", ""gRandom->Uniform(-1.0, 1.0)"") \; .Define(""p"", ""std::array<double, 2> v{x, y}; return v;"") \; .Define(""r"", ""double r2 = 0.0; for (auto&& w : p) r2 += w*w; return sqrt(r2);""); ; ## Now we have a dataframe with columns x, y, p (which is a point based on x; ## and y), and the radius r = sqrt(x*x + y*y). In order to approximate pi, we; ## need to know how many of our data points fall inside the circle of radius; ## one compared with the total number of points. The ratio of the areas is; ##; ## A_circle / A_square = pi r*r / l * l, where r = 1.0, and l = 2.0; ##; ## Therefore, we can approximate pi with four times the number of points inside; ## the unit circle over the total number of points:; ; incircle = pidf.Filter(""r <= 1.0"").Count().GetValue(); ; pi_approx = 4.0 * incircle / npoints; ; print(""pi is approximately equal to %g"" % (pi_approx)); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-leve",MatchSource.WIKI,doc/master/df012__DefinesAndFiltersAsStrings_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df012__DefinesAndFiltersAsStrings_8py.html
Deployability,update,update,". ROOT: tutorials/dataframe/df013_InspectAnalysis.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df013_InspectAnalysis.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use callbacks to update a plot and a progress bar during the event loop. ; Showcase registration of callback functions that act on partial results while the event-loop is running using OnPartialResult and OnPartialResultSlot. This tutorial is not meant to run in batch mode.; ; using namespace ROOT; // RDataFrame lives in here; ; void df013_InspectAnalysis(); {; ROOT::EnableImplicitMT();; const auto poolSize = ROOT::GetThreadPoolSize();; const auto nSlots = 0 == poolSize ? 1 : poolSize;; ; // ## Setup a simple RDataFrame; // We start by creating a RDataFrame with a good number of empty events; const auto nEvents = nSlots * 10000ull;; RDataFrame d(nEvents);; ; // `heavyWork` is a lambda that fakes some interesting computation and just returns a normally distributed double; TRandom r;; auto heavyWork = [&r]() {; for (volatile int i = 0; i < 1000000; ++i); ;; return r.Gaus();; };; ; // Let's define a column ""x"" produced by invoking `heavyWork` for each event; // `df` stores a modified data-frame that contains ""x""; auto df = d.Define(""x"", heavyWork);; ; // Now we register a histogram-filling action with the RDataFrame.; // `h` can be used just like a pointer to TH1D but it is actually a TResultProxy<TH1D>, a smart object that triggers; // an event-loop to fill the pointee histogram if needed.; auto h = df.Histo1D<double>({""browserHisto"", """", 100, -2., 2.}, ""x"");; ; // ## Use the callback mechanism to draw the histogram on a TBrowser while it is being filled; // So far we have registered a column ""x"" to a data-frame with `nEvents` events and we registered the filling of a; // histogram with the values of column ""x"".; // In the following we will register three functions for execution during the event-loop:; // - one is to be executed on",MatchSource.WIKI,doc/master/df013__InspectAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html
Integrability,synchroniz,synchronization,"browserPad->Update();; // This call tells ROOT to process all pending GUI events; // It allows users to use the TBrowser as usual while the event-loop is running; gSystem->ProcessEvents();; });; ; // Finally, we would like to print a progress bar on the terminal to show how the event-loop is progressing.; // To take into account _all_ events we use `OnPartialResultSlot`: when Implicit Multi-Threading is enabled, in fact,; // `OnPartialResult` invokes the callback only in one of the worker threads, and always returns that worker threads'; // partial result. This is useful because it means we don't have to worry about concurrent execution and; // thread-safety of the callbacks if we are happy with just one threads' partial result.; // `OnPartialResultSlot`, on the other hand, invokes the callback in each one of the worker threads, every time a; // thread finishes processing a batch of `everyN` events. This is what we want for the progress bar, but we need to; // take care that two threads will not print to terminal at the same time: we need a std::mutex for synchronization.; std::string progressBar;; std::mutex barMutex; // Only one thread at a time can lock a mutex. Let's use this to avoid concurrent printing.; // Magic numbers that yield good progress bars for nSlots = 1,2,4,8; const auto everyN = nSlots == 8 ? 1000 : 100ull * nSlots;; const auto barWidth = nEvents / everyN;; h.OnPartialResultSlot(everyN, [&barWidth, &progressBar, &barMutex](unsigned int /*slot*/, TH1D & /*partialHist*/) {; std::lock_guard<std::mutex> l(barMutex); // lock_guard locks the mutex at construction, releases it at destruction; progressBar.push_back('#');; // re-print the line with the progress bar; std::cout << ""\r["" << std::left << std::setw(barWidth) << progressBar << ']' << std::flush;; });; ; // ## Running the analysis; // So far we told RDataFrame what we want to happen during the event-loop, but we have not actually run any of those; // actions: the TBrowser is still empty, the prog",MatchSource.WIKI,doc/master/df013__InspectAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html
Modifiability,variab,variable,"aFrame.; // `h` can be used just like a pointer to TH1D but it is actually a TResultProxy<TH1D>, a smart object that triggers; // an event-loop to fill the pointee histogram if needed.; auto h = df.Histo1D<double>({""browserHisto"", """", 100, -2., 2.}, ""x"");; ; // ## Use the callback mechanism to draw the histogram on a TBrowser while it is being filled; // So far we have registered a column ""x"" to a data-frame with `nEvents` events and we registered the filling of a; // histogram with the values of column ""x"".; // In the following we will register three functions for execution during the event-loop:; // - one is to be executed once just before the loop and adds a partially-filled histogram to a TBrowser; // - the next is executed every 50 events and draws the partial histogram on the TBrowser's TPad; // - another callback is responsible of updating a simple progress bar from multiple threads; ; // First off we create a TBrowser that contains a ""RDFResults"" directory; auto dfDirectory = new TMemFile(""RDFResults"", ""RECREATE"");; auto browser = new TBrowser(""b"", dfDirectory);; // The global pad should now be set to the TBrowser's canvas, let's store its value in a local variable; auto browserPad = gPad;; ; // A useful feature of `TResultProxy` is its `OnPartialResult` method: it allows us to register a callback that is; // executed once per specified number of events during the event-loop, on ""partial"" versions of the result objects; // contained in the `TResultProxy`. In this case, the partial result is going to be a histogram filled with an; // increasing number of events.; // Instead of requesting the callback to be executed every N entries, this time we use the special value `kOnce` to; // request that it is executed once right before starting the event-loop.; // The callback is a C++11 lambda that registers the partial result object in `dfDirectory`.; h.OnPartialResult(h.kOnce, [dfDirectory](TH1D &h_) { dfDirectory->Add(&h_); });; // Note that we called `OnPartialRes",MatchSource.WIKI,doc/master/df013__InspectAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html
Performance,concurren,concurrent," `TResultProxy` (they are executed one after the other in the; // same order as they were registered). We now request that the partial result is drawn and the TBrowser's TPad is; // updated every 50 events.; h.OnPartialResult(50, [&browserPad](TH1D &hist) {; if (!browserPad); return; // in case root -b was invoked; browserPad->cd();; hist.Draw();; browserPad->Update();; // This call tells ROOT to process all pending GUI events; // It allows users to use the TBrowser as usual while the event-loop is running; gSystem->ProcessEvents();; });; ; // Finally, we would like to print a progress bar on the terminal to show how the event-loop is progressing.; // To take into account _all_ events we use `OnPartialResultSlot`: when Implicit Multi-Threading is enabled, in fact,; // `OnPartialResult` invokes the callback only in one of the worker threads, and always returns that worker threads'; // partial result. This is useful because it means we don't have to worry about concurrent execution and; // thread-safety of the callbacks if we are happy with just one threads' partial result.; // `OnPartialResultSlot`, on the other hand, invokes the callback in each one of the worker threads, every time a; // thread finishes processing a batch of `everyN` events. This is what we want for the progress bar, but we need to; // take care that two threads will not print to terminal at the same time: we need a std::mutex for synchronization.; std::string progressBar;; std::mutex barMutex; // Only one thread at a time can lock a mutex. Let's use this to avoid concurrent printing.; // Magic numbers that yield good progress bars for nSlots = 1,2,4,8; const auto everyN = nSlots == 8 ? 1000 : 100ull * nSlots;; const auto barWidth = nEvents / everyN;; h.OnPartialResultSlot(everyN, [&barWidth, &progressBar, &barMutex](unsigned int /*slot*/, TH1D & /*partialHist*/) {; std::lock_guard<std::mutex> l(barMutex); // lock_guard locks the mutex at construction, releases it at destruction; progressBar.push_b",MatchSource.WIKI,doc/master/df013__InspectAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html
Safety,safe,safety," `TResultProxy` (they are executed one after the other in the; // same order as they were registered). We now request that the partial result is drawn and the TBrowser's TPad is; // updated every 50 events.; h.OnPartialResult(50, [&browserPad](TH1D &hist) {; if (!browserPad); return; // in case root -b was invoked; browserPad->cd();; hist.Draw();; browserPad->Update();; // This call tells ROOT to process all pending GUI events; // It allows users to use the TBrowser as usual while the event-loop is running; gSystem->ProcessEvents();; });; ; // Finally, we would like to print a progress bar on the terminal to show how the event-loop is progressing.; // To take into account _all_ events we use `OnPartialResultSlot`: when Implicit Multi-Threading is enabled, in fact,; // `OnPartialResult` invokes the callback only in one of the worker threads, and always returns that worker threads'; // partial result. This is useful because it means we don't have to worry about concurrent execution and; // thread-safety of the callbacks if we are happy with just one threads' partial result.; // `OnPartialResultSlot`, on the other hand, invokes the callback in each one of the worker threads, every time a; // thread finishes processing a batch of `everyN` events. This is what we want for the progress bar, but we need to; // take care that two threads will not print to terminal at the same time: we need a std::mutex for synchronization.; std::string progressBar;; std::mutex barMutex; // Only one thread at a time can lock a mutex. Let's use this to avoid concurrent printing.; // Magic numbers that yield good progress bars for nSlots = 1,2,4,8; const auto everyN = nSlots == 8 ? 1000 : 100ull * nSlots;; const auto barWidth = nEvents / everyN;; h.OnPartialResultSlot(everyN, [&barWidth, &progressBar, &barMutex](unsigned int /*slot*/, TH1D & /*partialHist*/) {; std::lock_guard<std::mutex> l(barMutex); // lock_guard locks the mutex at construction, releases it at destruction; progressBar.push_b",MatchSource.WIKI,doc/master/df013__InspectAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html
Security,access,accessing,"want for the progress bar, but we need to; // take care that two threads will not print to terminal at the same time: we need a std::mutex for synchronization.; std::string progressBar;; std::mutex barMutex; // Only one thread at a time can lock a mutex. Let's use this to avoid concurrent printing.; // Magic numbers that yield good progress bars for nSlots = 1,2,4,8; const auto everyN = nSlots == 8 ? 1000 : 100ull * nSlots;; const auto barWidth = nEvents / everyN;; h.OnPartialResultSlot(everyN, [&barWidth, &progressBar, &barMutex](unsigned int /*slot*/, TH1D & /*partialHist*/) {; std::lock_guard<std::mutex> l(barMutex); // lock_guard locks the mutex at construction, releases it at destruction; progressBar.push_back('#');; // re-print the line with the progress bar; std::cout << ""\r["" << std::left << std::setw(barWidth) << progressBar << ']' << std::flush;; });; ; // ## Running the analysis; // So far we told RDataFrame what we want to happen during the event-loop, but we have not actually run any of those; // actions: the TBrowser is still empty, the progress bar has not been printed even once, and we haven't produced; // a single data-point!; // As usual with RDataFrame, the event-loop is triggered by accessing the contents of a TResultProxy for the first; // time. Let's run!; std::cout << ""Analysis running..."" << std::endl;; h->Draw(); // the final, complete result will be drawn after the event-loop has completed.; std::cout << ""\nDone!"" << std::endl;; ; // Finally, some book-keeping: in the TMemFile that we are using as TBrowser directory, we substitute the partial; // result with a clone of the final result (the ""original"" final result will be deleted at the end of the macro).; dfDirectory->Clear();; auto clone = static_cast<TH1D *>(h->Clone());; clone->SetDirectory(nullptr);; dfDirectory->Add(clone);; if (!browserPad); return; // in case root -b was invoked; browserPad->cd();; clone->Draw();; browserPad->Update();; }; d#define d(i)Definition RSha256.hxx:102; h#d",MatchSource.WIKI,doc/master/df013__InspectAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html
Usability,progress bar,progress bar,". ROOT: tutorials/dataframe/df013_InspectAnalysis.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df013_InspectAnalysis.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use callbacks to update a plot and a progress bar during the event loop. ; Showcase registration of callback functions that act on partial results while the event-loop is running using OnPartialResult and OnPartialResultSlot. This tutorial is not meant to run in batch mode.; ; using namespace ROOT; // RDataFrame lives in here; ; void df013_InspectAnalysis(); {; ROOT::EnableImplicitMT();; const auto poolSize = ROOT::GetThreadPoolSize();; const auto nSlots = 0 == poolSize ? 1 : poolSize;; ; // ## Setup a simple RDataFrame; // We start by creating a RDataFrame with a good number of empty events; const auto nEvents = nSlots * 10000ull;; RDataFrame d(nEvents);; ; // `heavyWork` is a lambda that fakes some interesting computation and just returns a normally distributed double; TRandom r;; auto heavyWork = [&r]() {; for (volatile int i = 0; i < 1000000; ++i); ;; return r.Gaus();; };; ; // Let's define a column ""x"" produced by invoking `heavyWork` for each event; // `df` stores a modified data-frame that contains ""x""; auto df = d.Define(""x"", heavyWork);; ; // Now we register a histogram-filling action with the RDataFrame.; // `h` can be used just like a pointer to TH1D but it is actually a TResultProxy<TH1D>, a smart object that triggers; // an event-loop to fill the pointee histogram if needed.; auto h = df.Histo1D<double>({""browserHisto"", """", 100, -2., 2.}, ""x"");; ; // ## Use the callback mechanism to draw the histogram on a TBrowser while it is being filled; // So far we have registered a column ""x"" to a data-frame with `nEvents` events and we registered the filling of a; // histogram with the values of column ""x"".; // In the following we will register three functions for execution during the event-loop:; // - one is to be executed on",MatchSource.WIKI,doc/master/df013__InspectAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html
Security,access,access,"; auto fullSpectrum =; filteredEvents.Histo1D({""Spectrum"", ""Subset of CMS Run 2010B;#mu#mu mass [GeV];Events"", 1024, 2, 110}, ""m"");; ; // Next we will create the histogram for the J/psi particle, applying first; // the corresponding cut.; double jpsiLow = 2.95;; double jpsiHigh = 3.25;; auto jpsiCut = [jpsiLow, jpsiHigh](double m) { return m < jpsiHigh && m > jpsiLow; };; auto jpsi =; filteredEvents.Filter(jpsiCut, {""m""}); .Histo1D({""jpsi"", ""Subset of CMS Run 2010B: J/#psi window;#mu#mu mass [GeV];Events"", 128, jpsiLow, jpsiHigh},; ""m"");; ; // Finally we draw the two histograms side by side.; auto dualCanvas = new TCanvas(""DualCanvas"", ""DualCanvas"", 800, 512);; dualCanvas->Divide(2, 1);; auto leftPad = dualCanvas->cd(1);; leftPad->SetLogx();; leftPad->SetLogy();; fullSpectrum->DrawClone(""Hist"");; dualCanvas->cd(2);; jpsi->SetMarkerStyle(20);; jpsi->DrawClone(""HistP"");; ; return 0;; }; c#define c(i)Definition RSha256.hxx:101; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Cpvirtual Bool_t Cp(const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000)Allows to copy this file to the dst URL.Definition TFile.cxx:5003; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; ROOT::RDF::FromCSVRDataFrame FromCSV(std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={})Factory method to create a CSV RDataFrame.Definition RCsvDS.cxx:558; df014_CSVDataSourceDefinition df014_CSVDataSource.py:1; mTMarker mDefinition textangle.C:8; . DateOctober 2017 ; AuthorEnric Tejedor (CERN) ; Definition in file df014_CSVDataSource.C. tutorialsdataframedf014_CSVDataSource.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df014__CSVDataSource_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df014__CSVDataSource_8C.html
Security,access,access,"el than before.; 53 auto fullSpectrum =; 54 filteredEvents.Histo1D({""Spectrum"", ""Subset of CMS Run 2010B;#mu#mu mass [GeV];Events"", 1024, 2, 110}, ""m"");; 55 ; 56 // Next we will create the histogram for the J/psi particle, applying first; 57 // the corresponding cut.; 58 double jpsiLow = 2.95;; 59 double jpsiHigh = 3.25;; 60 auto jpsiCut = [jpsiLow, jpsiHigh](double m) { return m < jpsiHigh && m > jpsiLow; };; 61 auto jpsi =; 62 filteredEvents.Filter(jpsiCut, {""m""}); 63 .Histo1D({""jpsi"", ""Subset of CMS Run 2010B: J/#psi window;#mu#mu mass [GeV];Events"", 128, jpsiLow, jpsiHigh},; 64 ""m"");; 65 ; 66 // Finally we draw the two histograms side by side.; 67 auto dualCanvas = new TCanvas(""DualCanvas"", ""DualCanvas"", 800, 512);; 68 dualCanvas->Divide(2, 1);; 69 auto leftPad = dualCanvas->cd(1);; 70 leftPad->SetLogx();; 71 leftPad->SetLogy();; 72 fullSpectrum->DrawClone(""Hist"");; 73 dualCanvas->cd(2);; 74 jpsi->SetMarkerStyle(20);; 75 jpsi->DrawClone(""HistP"");; 76 ; 77 return 0;; 78}; c#define c(i)Definition RSha256.hxx:101; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Cpvirtual Bool_t Cp(const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000)Allows to copy this file to the dst URL.Definition TFile.cxx:5003; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; ROOT::RDF::FromCSVRDataFrame FromCSV(std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={})Factory method to create a CSV RDataFrame.Definition RCsvDS.cxx:558; df014_CSVDataSourceDefinition df014_CSVDataSource.py:1; mTMarker mDefinition textangle.C:8. tutorialsdataframedf014_CSVDataSource.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df014__CSVDataSource_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df014__CSVDataSource_8C_source.html
Security,access,access,"; ; // Let's first create a RDF that will read from the CSV file.; // See the tutorial (https://root.cern/doc/master/df014__CSVDataSource_8C.html) on CSV data sources for more details!; auto fileNameUrl = ""http://root.cern/files/tutorials/df014_CsvDataSource_MuRun2010B.csv"";; auto fileName = ""df015_CsvDataSource_MuRun2010B.csv"";; if(gSystem->AccessPathName(fileName)); TFile::Cp(fileNameUrl, fileName);; ; auto csv_rdf = FromCSV(fileName);; ; // Now we take out two columns: px and py of the first muon in the muon pair; std::string px1Name = ""px1"";; auto px1 = csv_rdf.Take<double>(px1Name);; std::string py1Name = ""py1"";; auto py1 = csv_rdf.Take<double>(py1Name);; ; // Now we create a new dataframe built on top of the columns above. Note that up to now, no event loop; // has been carried out!; auto df = MakeLazyDataFrame(std::make_pair(px1Name, px1), std::make_pair(py1Name, py1));; ; // We build a histogram of the transverse momentum of the muons.; auto ptFormula = [](double px, double py) { return sqrt(px * px + py * py); };; auto pt_h = df.Define(""pt"", ptFormula, {""px1"", ""py1""}); .Histo1D<double>({""pt"", ""Muon p_{T};p_{T} [GeV/c];"", 128, 0, 128}, ""pt"");; ; auto can = new TCanvas();; can->SetLogy();; pt_h->DrawCopy();; ; return 0;; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Cpvirtual Bool_t Cp(const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000)Allows to copy this file to the dst URL.Definition TFile.cxx:5003; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; ROOT::RDFDefinition RArrowDS.hxx:28; . DateFebruary 2018 ; AuthorDanilo Piparo (CERN) ; Definition in file df015_LazyDataSource.C. tutorialsdataframedf015_LazyDataSource.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df015__LazyDataSource_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df015__LazyDataSource_8C.html
Integrability,interface,interface,".5 && r < 1 && x*y < 0""); .Define(""yFig"", ""y[rInFig]""); .Define(""xFig"", ""x[rInFig]""); .Histo2D({""fig"", ""Two quarters of a ring"", 64, -1.1, 1.1, 64, -1.1, 1.1}, ""xFig"", ""yFig"");; ; auto cring = new TCanvas();; ring_h->DrawCopy(""Colz"");; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVec< double >; TCanvasThe Canvas class.Definition TCanvas.h:23; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; double; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; df016_vecOpsDefinition df016_vecOps.py:1; v@ vDefinition rootcling_impl.cxx:3699; . DateFebruary 2018 ; AuthorDanilo Piparo (CERN) ; Definition in file df016_vecOps.C. tutorialsdataframedf016_vecOps.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df016__vecOps_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df016__vecOps_8C.html
Performance,perform,performed,"ata analysis.; ; using namespace ROOT;; ; int df016_vecOps(); {; // We re-create a set of points in a square.; // This is a technical detail, just to create a dataset to play with!; auto unifGen = [](double) { return gRandom->Uniform(-1.0, 1.0); };; auto vGen = [&](int len) {; RVecD v(len);; std::transform(v.begin(), v.end(), v.begin(), unifGen);; return v;; };; RDataFrame d(1024);; auto d0 = d.Define(""len"", []() { return (int)gRandom->Uniform(0, 16); }); .Define(""x"", vGen, {""len""}); .Define(""y"", vGen, {""len""});; ; // Now we have in our hands d, a RDataFrame with two columns, x and y, which; // hold collections of coordinates. The sizes of these collections vary.; // Let's now define radii from the x and y coordinates. We'll do it treating ; // the collections stored in the columns without looping on the individual elements.; auto d1 = d0.Define(""r"", ""sqrt(x*x + y*y)"");; ; // Now we want to plot 2 quarters of a ring with radii .5 and 1.; // Note how the cuts are performed on RVecs, comparing them with integers and; // among themselves.; auto ring_h = d1.Define(""rInFig"", ""r > .5 && r < 1 && x*y < 0""); .Define(""yFig"", ""y[rInFig]""); .Define(""xFig"", ""x[rInFig]""); .Histo2D({""fig"", ""Two quarters of a ring"", 64, -1.1, 1.1, 64, -1.1, 1.1}, ""xFig"", ""yFig"");; ; auto cring = new TCanvas();; ring_h->DrawCopy(""Colz"");; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap",MatchSource.WIKI,doc/master/df016__vecOps_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df016__vecOps_8C.html
Integrability,interface,interface,"frame/df016_vecOps.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df016_vecOps.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Process collections in RDataFrame with the help of RVec. ; This tutorial shows the potential of the VecOps approach for treating collections stored in datasets, a situation very common in HEP data analysis. ; import ROOT; ; df = ROOT.RDataFrame(1024); coordDefineCode = '''ROOT::RVecD {0}(len);; std::transform({0}.begin(), {0}.end(), {0}.begin(), [](double){{return gRandom->Uniform(-1.0, 1.0);}});; return {0};'''; d = df.Define(""len"", ""gRandom->Uniform(0, 16)"")\; .Define(""x"", coordDefineCode.format(""x""))\; .Define(""y"", coordDefineCode.format(""y"")); ; # Now we have in our hands d, a RDataFrame with two columns, x and y, which; # hold collections of coordinates. The sizes of these collections vary.; # Let's now define radii radii from the x and y coordinates. We'll do it treating ; # the collections stored in the columns without looping on the individual elements.; d1 = d.Define(""r"", ""sqrt(x*x + y*y)""); ; # Now we want to plot 2 quarters of a ring with radii .5 and 1.; # Note how the cuts are performed on RVecs, comparing them with integers and; # among themselves.; ring_h = d1.Define(""rInFig"", ""r > .5 && r < 1 && x*y < 0"")\; .Define(""yFig"", ""y[rInFig]"")\; .Define(""xFig"", ""x[rInFig]"")\; .Histo2D((""fig"", ""Two quarters of a ring"", 64, -1.1, 1.1, 64, -1.1, 1.1), ""xFig"", ""yFig""); ; cring = ROOT.TCanvas(); ring_h.Draw(""Colz""); cring.SaveAs(""df016_ring.png""); ; print(""Saved figure to df016_ring.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; DateFebruary 2018 ; AuthorDanilo Piparo (CERN) ; Definition in file df016_vecOps.py. tutorialsdataframedf016_vecOps.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df016__vecOps_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df016__vecOps_8py.html
Performance,perform,performed,"frame/df016_vecOps.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df016_vecOps.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Process collections in RDataFrame with the help of RVec. ; This tutorial shows the potential of the VecOps approach for treating collections stored in datasets, a situation very common in HEP data analysis. ; import ROOT; ; df = ROOT.RDataFrame(1024); coordDefineCode = '''ROOT::RVecD {0}(len);; std::transform({0}.begin(), {0}.end(), {0}.begin(), [](double){{return gRandom->Uniform(-1.0, 1.0);}});; return {0};'''; d = df.Define(""len"", ""gRandom->Uniform(0, 16)"")\; .Define(""x"", coordDefineCode.format(""x""))\; .Define(""y"", coordDefineCode.format(""y"")); ; # Now we have in our hands d, a RDataFrame with two columns, x and y, which; # hold collections of coordinates. The sizes of these collections vary.; # Let's now define radii radii from the x and y coordinates. We'll do it treating ; # the collections stored in the columns without looping on the individual elements.; d1 = d.Define(""r"", ""sqrt(x*x + y*y)""); ; # Now we want to plot 2 quarters of a ring with radii .5 and 1.; # Note how the cuts are performed on RVecs, comparing them with integers and; # among themselves.; ring_h = d1.Define(""rInFig"", ""r > .5 && r < 1 && x*y < 0"")\; .Define(""yFig"", ""y[rInFig]"")\; .Define(""xFig"", ""x[rInFig]"")\; .Histo2D((""fig"", ""Two quarters of a ring"", 64, -1.1, 1.1, 64, -1.1, 1.1), ""xFig"", ""yFig""); ; cring = ROOT.TCanvas(); ring_h.Draw(""Colz""); cring.SaveAs(""df016_ring.png""); ; print(""Saved figure to df016_ring.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; DateFebruary 2018 ; AuthorDanilo Piparo (CERN) ; Definition in file df016_vecOps.py. tutorialsdataframedf016_vecOps.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df016__vecOps_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df016__vecOps_8py.html
Availability,down,down,". ROOT: tutorials/dataframe/df017_vecOpsHEP.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df017_vecOpsHEP.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use RVecs to plot the transverse momentum of selected particles. ; This tutorial shows how VecOps can be used to slim down the programming model typically adopted in HEP for analysis. In this case we have a dataset containing the kinematic properties of particles stored in individual arrays. We want to plot the transverse momentum of these particles if the energy is greater than 100 MeV.; ; auto filename = gROOT->GetTutorialDir() + ""/dataframe/df017_vecOpsHEP.root"";; auto treename = ""myDataset"";; ; using namespace ROOT;; ; ; void WithTTreeReader(); {; TFile f(filename);; TTreeReader tr(treename, &f);; TTreeReaderArray<double> px(tr, ""px"");; TTreeReaderArray<double> py(tr, ""py"");; TTreeReaderArray<double> E(tr, ""E"");; ; TH1F h(""pt"", ""pt"", 16, 0, 4);; ; while (tr.Next()) {; for (auto i=0U;i < px.GetSize(); ++i) {; if (E[i] > 100) h.Fill(sqrt(px[i]*px[i] + py[i]*py[i]));; }; }; h.DrawCopy();; }; ; void WithRDataFrame(); {; RDataFrame f(treename, filename.Data());; auto CalcPt = [](RVecD &px, RVecD &py, RVecD &E) {; RVecD v;; for (auto i=0U;i < px.size(); ++i) {; if (E[i] > 100) {; v.emplace_back(sqrt(px[i]*px[i] + py[i]*py[i]));; }; }; return v;; };; f.Define(""pt"", CalcPt, {""px"", ""py"", ""E""}); .Histo1D<RVecD>({""pt"", ""pt"", 16, 0, 4}, ""pt"")->DrawCopy();; }; ; void WithRDataFrameVecOps(); {; RDataFrame f(treename, filename.Data());; auto CalcPt = [](RVecD &px, RVecD &py, RVecD &E) {; auto pt = sqrt(px*px + py*py);; return pt[E>100];; };; f.Define(""good_pt"", CalcPt, {""px"", ""py"", ""E""}); .Histo1D<RVecD>({""pt"", ""pt"", 16, 0, 4}, ""good_pt"")->DrawCopy();; }; ; void WithRDataFrameVecOpsJit(); {; RDataFrame f(treename, filename.Data());; f.Define(""good_pt"", ""sqrt(px*px + py*py)[E>100]""); .Histo1D({""pt"", ""pt"", 16, 0, 4}, ""good_pt"")->DrawCopy();; }; ; void df",MatchSource.WIKI,doc/master/df017__vecOpsHEP_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df017__vecOpsHEP_8C.html
Energy Efficiency,energy,energy,". ROOT: tutorials/dataframe/df017_vecOpsHEP.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df017_vecOpsHEP.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use RVecs to plot the transverse momentum of selected particles. ; This tutorial shows how VecOps can be used to slim down the programming model typically adopted in HEP for analysis. In this case we have a dataset containing the kinematic properties of particles stored in individual arrays. We want to plot the transverse momentum of these particles if the energy is greater than 100 MeV.; ; auto filename = gROOT->GetTutorialDir() + ""/dataframe/df017_vecOpsHEP.root"";; auto treename = ""myDataset"";; ; using namespace ROOT;; ; ; void WithTTreeReader(); {; TFile f(filename);; TTreeReader tr(treename, &f);; TTreeReaderArray<double> px(tr, ""px"");; TTreeReaderArray<double> py(tr, ""py"");; TTreeReaderArray<double> E(tr, ""E"");; ; TH1F h(""pt"", ""pt"", 16, 0, 4);; ; while (tr.Next()) {; for (auto i=0U;i < px.GetSize(); ++i) {; if (E[i] > 100) h.Fill(sqrt(px[i]*px[i] + py[i]*py[i]));; }; }; h.DrawCopy();; }; ; void WithRDataFrame(); {; RDataFrame f(treename, filename.Data());; auto CalcPt = [](RVecD &px, RVecD &py, RVecD &E) {; RVecD v;; for (auto i=0U;i < px.size(); ++i) {; if (E[i] > 100) {; v.emplace_back(sqrt(px[i]*px[i] + py[i]*py[i]));; }; }; return v;; };; f.Define(""pt"", CalcPt, {""px"", ""py"", ""E""}); .Histo1D<RVecD>({""pt"", ""pt"", 16, 0, 4}, ""pt"")->DrawCopy();; }; ; void WithRDataFrameVecOps(); {; RDataFrame f(treename, filename.Data());; auto CalcPt = [](RVecD &px, RVecD &py, RVecD &E) {; auto pt = sqrt(px*px + py*py);; return pt[E>100];; };; f.Define(""good_pt"", CalcPt, {""px"", ""py"", ""E""}); .Histo1D<RVecD>({""pt"", ""pt"", 16, 0, 4}, ""good_pt"")->DrawCopy();; }; ; void WithRDataFrameVecOpsJit(); {; RDataFrame f(treename, filename.Data());; f.Define(""good_pt"", ""sqrt(px*px + py*py)[E>100]""); .Histo1D({""pt"", ""pt"", 16, 0, 4}, ""good_pt"")->DrawCopy();; }; ; void df",MatchSource.WIKI,doc/master/df017__vecOpsHEP_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df017__vecOpsHEP_8C.html
Integrability,interface,interface," h(i)Definition RSha256.hxx:106; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; gROOT#define gROOTDefinition TROOT.h:406; ROOT::Detail::VecOps::RVecImpl::emplace_backreference emplace_back(ArgTypes &&...Args)Definition RVec.hxx:920; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVec< double >; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderArrayAn interface for reading collections stored in ROOT columnar datasets.Definition TTreeReaderArray.h:75; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TMath::Econstex",MatchSource.WIKI,doc/master/df017__vecOpsHEP_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df017__vecOpsHEP_8C.html
Testability,log,log,"GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; gROOT#define gROOTDefinition TROOT.h:406; ROOT::Detail::VecOps::RVecImpl::emplace_backreference emplace_back(ArgTypes &&...Args)Definition RVec.hxx:920; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVec< double >; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderArrayAn interface for reading collections stored in ROOT columnar datasets.Definition TTreeReaderArray.h:75; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TMath::Econstexpr Double_t E()Base of natural log: .Definition TMath.h:93; df017_vecOpsHEPDefinition df017_vecOpsHEP.py:1; v@ vDefinition rootcling_impl.cxx:3699; . DateMarch 2018 ; AuthorsDanilo Piparo (CERN), Andre Vieira Silva ; Definition in file df017_vecOpsHEP.C. tutorialsdataframedf017_vecOpsHEP.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df017__vecOpsHEP_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df017__vecOpsHEP_8C.html
Usability,simpl,simple,"GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; gROOT#define gROOTDefinition TROOT.h:406; ROOT::Detail::VecOps::RVecImpl::emplace_backreference emplace_back(ArgTypes &&...Args)Definition RVec.hxx:920; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVec< double >; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderArrayAn interface for reading collections stored in ROOT columnar datasets.Definition TTreeReaderArray.h:75; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TMath::Econstexpr Double_t E()Base of natural log: .Definition TMath.h:93; df017_vecOpsHEPDefinition df017_vecOpsHEP.py:1; v@ vDefinition rootcling_impl.cxx:3699; . DateMarch 2018 ; AuthorsDanilo Piparo (CERN), Andre Vieira Silva ; Definition in file df017_vecOpsHEP.C. tutorialsdataframedf017_vecOpsHEP.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df017__vecOpsHEP_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df017__vecOpsHEP_8C.html
Availability,down,down,. ROOT: tutorials/dataframe/df017_vecOpsHEP.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df017_vecOpsHEP.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use RVecs to plot the transverse momentum of selected particles. ; This tutorial shows how VecOps can be used to slim down the programming model typically adopted in HEP for analysis. In this case we have a dataset containing the kinematic properties of particles stored in individual arrays. We want to plot the transverse momentum of these particles if the energy is greater than 100 MeV. ; Definition in file df017_vecOpsHEP.py. tutorialsdataframedf017_vecOpsHEP.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/df017__vecOpsHEP_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df017__vecOpsHEP_8py.html
Energy Efficiency,energy,energy,. ROOT: tutorials/dataframe/df017_vecOpsHEP.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df017_vecOpsHEP.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use RVecs to plot the transverse momentum of selected particles. ; This tutorial shows how VecOps can be used to slim down the programming model typically adopted in HEP for analysis. In this case we have a dataset containing the kinematic properties of particles stored in individual arrays. We want to plot the transverse momentum of these particles if the energy is greater than 100 MeV. ; Definition in file df017_vecOpsHEP.py. tutorialsdataframedf017_vecOpsHEP.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/df017__vecOpsHEP_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df017__vecOpsHEP_8py.html
Availability,robust,robust," max values; ; // We book the action: it will be treated during the event loop.; auto myTHnT = dd.Book<double, double, float, int>(std::move(helper), {""x0"", ""x1"", ""x2"", ""x3""});; ; myTHnT->Print();; }; d#define d(i)Definition RSha256.hxx:102; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; namechar name[80]Definition TGX11.cxx:110; xmaxfloat xmaxDefinition THbookFile.cxx:95; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; ROOT::Detail::RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; THnTTemplated implementation of the abstract base THn.Definition THn.h:219; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; double; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; ROOT::TSeqUTSeq< unsigned int > TSeqUDefinition TSeq.hxx:204; TMVA::TMVAGlob::Initializevoid Initialize(Bool_t useTMVAStyle=kTRUE)Definition tmvaglob.cxx:176; ; THnT<float> (*0x55999709c0e0): ""myThN"" ""A THn with 4 dimension",MatchSource.WIKI,doc/master/df018__customActions_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df018__customActions_8C.html
Integrability,interface,interface,". ROOT: tutorials/dataframe/df018_customActions.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df018_customActions.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Implement a custom action to fill THns. ; This tutorial shows how to implement a custom action. As an example, we build a helper for filling THns.; ; // This is a custom action which respects a well defined interface. It supports parallelism,; // in the sense that it behaves correctly if implicit multi threading is enabled.; // We template it on:; // - The type of the internal THnT(s); // - The dimension of the internal THnT(s); // Note the plural: in presence of a MT execution, internally more than a single THnT is created.; template <typename T, unsigned int NDIM>; class THnHelper : public ROOT::Detail::RDF::RActionImpl<THnHelper<T, NDIM>> {; public:; /// This is a handy, expressive shortcut.; using THn_t = THnT<T>;; /// This type is a requirement for every helper.; using Result_t = THn_t;; ; private:; std::vector<std::shared_ptr<THn_t>> fHistos; // one per data processing slot; ; public:; /// This constructor takes all the parameters necessary to build the THnTs. In addition, it requires the names of; /// the columns which will be used.; THnHelper(std::string_view name, std::string_view title, std::array<int, NDIM> nbins, std::array<double, NDIM> xmins,; std::array<double, NDIM> xmax); {; const auto nSlots = ROOT::IsImplicitMTEnabled() ? ROOT::GetThreadPoolSize() : 1;; for (auto i : ROOT::TSeqU(nSlots)) {; fHistos.emplace_back(std::make_shared<THn_t>(std::string(name).c_str(), std::string(title).c_str(),; NDIM, nbins.data(), xmins.data(), xmax.data()));; (void)i;; }; }; THnHelper(THnHelper &&) = default;; THnHelper(const THnHelper &) = delete;; std::shared_ptr<THn_t> GetResultPtr() const { return fHistos[0]; }; void Initialize() {}; void InitTask(TTreeReader *, unsigned int) {}; /// This is a method executed at every entry; templa",MatchSource.WIKI,doc/master/df018__customActions_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df018__customActions_8C.html
Performance,multi-thread,multi-threading,"a square matrix; namechar name[80]Definition TGX11.cxx:110; xmaxfloat xmaxDefinition THbookFile.cxx:95; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; ROOT::Detail::RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; THnTTemplated implementation of the abstract base THn.Definition THn.h:219; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; double; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; ROOT::TSeqUTSeq< unsigned int > TSeqUDefinition TSeq.hxx:204; TMVA::TMVAGlob::Initializevoid Initialize(Bool_t useTMVAStyle=kTRUE)Definition tmvaglob.cxx:176; ; THnT<float> (*0x55999709c0e0): ""myThN"" ""A THn with 4 dimensions""; 4 dimensions, 128 entries in 1440 filled bins; DateApril 2018 ; AuthorsEnrico Guiraud, Danilo Piparo (CERN) ; Definition in file df018_customActions.C. tutorialsdataframedf018_customActions.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df018__customActions_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df018__customActions_8C.html
Usability,simpl,simple," max values; ; // We book the action: it will be treated during the event loop.; auto myTHnT = dd.Book<double, double, float, int>(std::move(helper), {""x0"", ""x1"", ""x2"", ""x3""});; ; myTHnT->Print();; }; d#define d(i)Definition RSha256.hxx:102; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; namechar name[80]Definition TGX11.cxx:110; xmaxfloat xmaxDefinition THbookFile.cxx:95; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; ROOT::Detail::RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; THnTTemplated implementation of the abstract base THn.Definition THn.h:219; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; double; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; ROOT::TSeqUTSeq< unsigned int > TSeqUDefinition TSeq.hxx:204; TMVA::TMVAGlob::Initializevoid Initialize(Bool_t useTMVAStyle=kTRUE)Definition tmvaglob.cxx:176; ; THnT<float> (*0x55999709c0e0): ""myThN"" ""A THn with 4 dimension",MatchSource.WIKI,doc/master/df018__customActions_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df018__customActions_8C.html
Availability,checkpoint,checkpointing,". ROOT: tutorials/dataframe/df019_Cache.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df019_Cache.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Cache a processed RDataFrame in memory for further usage. ; This tutorial shows how the content of a data frame can be cached in memory in form of a dataframe. The content of the columns is stored in memory in contiguous slabs of memory and is ""ready to use"", i.e. no ROOT IO operation is performed.; Creating a cached data frame storing all of its content deserialised and uncompressed in memory is particularly useful when dealing with datasets of a moderate size (small enough to fit the RAM) over which several explorative loops need to be performed as fast as possible. In addition, caching can be useful when no file on disk needs to be created as a side effect of checkpointing part of the analysis.; All steps in the caching are lazy, i.e. the cached data frame is actually filled only when the event loop is triggered on it.; ; void df019_Cache(); {; // We create a data frame on top of the hsimple example.; auto hsimplePath = gROOT->GetTutorialDir();; hsimplePath += ""/hsimple.root"";; ROOT::RDataFrame df(""ntuple"", hsimplePath.Data());; ; // We apply a simple cut and define a new column.; auto df_cut = df.Filter([](float py) { return py > 0.f; }, {""py""}); .Define(""px_plus_py"", [](float px, float py) { return px + py; }, {""px"", ""py""});; ; // We cache the content of the dataset. Nothing has happened yet: the work to accomplish; // has been described. As for `Snapshot`, the types and columns can be written out explicitly; // or left for the jitting to handle (`df_cached` is intentionally unused - it shows how; // to create a *cached* dataframe specifying column types explicitly):; auto df_cached = df_cut.Cache<float, float>({""px_plus_py"", ""py""});; auto df_cached_implicit = df_cut.Cache();; auto h = df_cached_implicit.Histo1D<float>(""px_plus_py"");; ; // Now ",MatchSource.WIKI,doc/master/df019__Cache_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df019__Cache_8C.html
Integrability,interface,interface,"s particularly useful when dealing with datasets of a moderate size (small enough to fit the RAM) over which several explorative loops need to be performed as fast as possible. In addition, caching can be useful when no file on disk needs to be created as a side effect of checkpointing part of the analysis.; All steps in the caching are lazy, i.e. the cached data frame is actually filled only when the event loop is triggered on it.; ; void df019_Cache(); {; // We create a data frame on top of the hsimple example.; auto hsimplePath = gROOT->GetTutorialDir();; hsimplePath += ""/hsimple.root"";; ROOT::RDataFrame df(""ntuple"", hsimplePath.Data());; ; // We apply a simple cut and define a new column.; auto df_cut = df.Filter([](float py) { return py > 0.f; }, {""py""}); .Define(""px_plus_py"", [](float px, float py) { return px + py; }, {""px"", ""py""});; ; // We cache the content of the dataset. Nothing has happened yet: the work to accomplish; // has been described. As for `Snapshot`, the types and columns can be written out explicitly; // or left for the jitting to handle (`df_cached` is intentionally unused - it shows how; // to create a *cached* dataframe specifying column types explicitly):; auto df_cached = df_cut.Cache<float, float>({""px_plus_py"", ""py""});; auto df_cached_implicit = df_cut.Cache();; auto h = df_cached_implicit.Histo1D<float>(""px_plus_py"");; ; // Now the event loop on the cached dataset is triggered. This event triggers the loop; // on the `df` data frame lazily.; h->DrawCopy();; }; h#define h(i)Definition RSha256.hxx:106; gROOT#define gROOTDefinition TROOT.h:406; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; df019_CacheDefinition df019_Cache.py:1; . DateJune 2018 ; AuthorDanilo Piparo (CERN) ; Definition in file df019_Cache.C. tutorialsdataframedf019_Cache.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df019__Cache_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df019__Cache_8C.html
Performance,cache,cached,". ROOT: tutorials/dataframe/df019_Cache.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df019_Cache.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Cache a processed RDataFrame in memory for further usage. ; This tutorial shows how the content of a data frame can be cached in memory in form of a dataframe. The content of the columns is stored in memory in contiguous slabs of memory and is ""ready to use"", i.e. no ROOT IO operation is performed.; Creating a cached data frame storing all of its content deserialised and uncompressed in memory is particularly useful when dealing with datasets of a moderate size (small enough to fit the RAM) over which several explorative loops need to be performed as fast as possible. In addition, caching can be useful when no file on disk needs to be created as a side effect of checkpointing part of the analysis.; All steps in the caching are lazy, i.e. the cached data frame is actually filled only when the event loop is triggered on it.; ; void df019_Cache(); {; // We create a data frame on top of the hsimple example.; auto hsimplePath = gROOT->GetTutorialDir();; hsimplePath += ""/hsimple.root"";; ROOT::RDataFrame df(""ntuple"", hsimplePath.Data());; ; // We apply a simple cut and define a new column.; auto df_cut = df.Filter([](float py) { return py > 0.f; }, {""py""}); .Define(""px_plus_py"", [](float px, float py) { return px + py; }, {""px"", ""py""});; ; // We cache the content of the dataset. Nothing has happened yet: the work to accomplish; // has been described. As for `Snapshot`, the types and columns can be written out explicitly; // or left for the jitting to handle (`df_cached` is intentionally unused - it shows how; // to create a *cached* dataframe specifying column types explicitly):; auto df_cached = df_cut.Cache<float, float>({""px_plus_py"", ""py""});; auto df_cached_implicit = df_cut.Cache();; auto h = df_cached_implicit.Histo1D<float>(""px_plus_py"");; ; // Now ",MatchSource.WIKI,doc/master/df019__Cache_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df019__Cache_8C.html
Usability,simpl,simple,"orial shows how the content of a data frame can be cached in memory in form of a dataframe. The content of the columns is stored in memory in contiguous slabs of memory and is ""ready to use"", i.e. no ROOT IO operation is performed.; Creating a cached data frame storing all of its content deserialised and uncompressed in memory is particularly useful when dealing with datasets of a moderate size (small enough to fit the RAM) over which several explorative loops need to be performed as fast as possible. In addition, caching can be useful when no file on disk needs to be created as a side effect of checkpointing part of the analysis.; All steps in the caching are lazy, i.e. the cached data frame is actually filled only when the event loop is triggered on it.; ; void df019_Cache(); {; // We create a data frame on top of the hsimple example.; auto hsimplePath = gROOT->GetTutorialDir();; hsimplePath += ""/hsimple.root"";; ROOT::RDataFrame df(""ntuple"", hsimplePath.Data());; ; // We apply a simple cut and define a new column.; auto df_cut = df.Filter([](float py) { return py > 0.f; }, {""py""}); .Define(""px_plus_py"", [](float px, float py) { return px + py; }, {""px"", ""py""});; ; // We cache the content of the dataset. Nothing has happened yet: the work to accomplish; // has been described. As for `Snapshot`, the types and columns can be written out explicitly; // or left for the jitting to handle (`df_cached` is intentionally unused - it shows how; // to create a *cached* dataframe specifying column types explicitly):; auto df_cached = df_cut.Cache<float, float>({""px_plus_py"", ""py""});; auto df_cached_implicit = df_cut.Cache();; auto h = df_cached_implicit.Histo1D<float>(""px_plus_py"");; ; // Now the event loop on the cached dataset is triggered. This event triggers the loop; // on the `df` data frame lazily.; h->DrawCopy();; }; h#define h(i)Definition RSha256.hxx:106; gROOT#define gROOTDefinition TROOT.h:406; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface ",MatchSource.WIKI,doc/master/df019__Cache_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df019__Cache_8C.html
Availability,checkpoint,checkpointing,". ROOT: tutorials/dataframe/df019_Cache.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df019_Cache.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Cache a processed RDataFrame in memory for further usage. ; This tutorial shows how the content of a data frame can be cached in memory in form of a dataframe. The content of the columns is stored in memory in contiguous slabs of memory and is ""ready to use"", i.e. no ROOT IO operation is performed.; Creating a cached data frame storing all of its content deserialised and uncompressed in memory is particularly useful when dealing with datasets of a moderate size (small enough to fit the RAM) over which several explorative loops need to be performed as fast as possible. In addition, caching can be useful when no file on disk needs to be created as a side effect of checkpointing part of the analysis.; All steps in the caching are lazy, i.e. the cached data frame is actually filled only when the event loop is triggered on it.; ; import ROOT; import os; ; # We create a data frame on top of the hsimple example.; hsimplePath = os.path.join(str(ROOT.gROOT.GetTutorialDir().Data()), ""hsimple.root""); df = ROOT.RDataFrame(""ntuple"", hsimplePath); ; # We apply a simple cut and define a new column.; df_cut = df.Filter(""py > 0.f"")\; .Define(""px_plus_py"", ""px + py""); ; # We cache the content of the dataset. Nothing has happened yet: the work to accomplish; # has been described.; df_cached = df_cut.Cache(); ; h = df_cached.Histo1D(""px_plus_py""); ; # Now the event loop on the cached dataset is triggered by accessing the histogram.; # This event triggers the loop on the `df` data frame lazily.; c = ROOT.TCanvas(); h.Draw(); c.SaveAs(""df019_Cache.png""); ; print(""Saved figure to df019_Cache.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; . DateJune 2018 ; ",MatchSource.WIKI,doc/master/df019__Cache_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df019__Cache_8py.html
Integrability,interface,interface," tutorials. Detailed Description; Cache a processed RDataFrame in memory for further usage. ; This tutorial shows how the content of a data frame can be cached in memory in form of a dataframe. The content of the columns is stored in memory in contiguous slabs of memory and is ""ready to use"", i.e. no ROOT IO operation is performed.; Creating a cached data frame storing all of its content deserialised and uncompressed in memory is particularly useful when dealing with datasets of a moderate size (small enough to fit the RAM) over which several explorative loops need to be performed as fast as possible. In addition, caching can be useful when no file on disk needs to be created as a side effect of checkpointing part of the analysis.; All steps in the caching are lazy, i.e. the cached data frame is actually filled only when the event loop is triggered on it.; ; import ROOT; import os; ; # We create a data frame on top of the hsimple example.; hsimplePath = os.path.join(str(ROOT.gROOT.GetTutorialDir().Data()), ""hsimple.root""); df = ROOT.RDataFrame(""ntuple"", hsimplePath); ; # We apply a simple cut and define a new column.; df_cut = df.Filter(""py > 0.f"")\; .Define(""px_plus_py"", ""px + py""); ; # We cache the content of the dataset. Nothing has happened yet: the work to accomplish; # has been described.; df_cached = df_cut.Cache(); ; h = df_cached.Histo1D(""px_plus_py""); ; # Now the event loop on the cached dataset is triggered by accessing the histogram.; # This event triggers the loop on the `df` data frame lazily.; c = ROOT.TCanvas(); h.Draw(); c.SaveAs(""df019_Cache.png""); ; print(""Saved figure to df019_Cache.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; . DateJune 2018 ; AuthorDanilo Piparo (CERN) ; Definition in file df019_Cache.py. tutorialsdataframedf019_Cache.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df019__Cache_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df019__Cache_8py.html
Performance,cache,cached,". ROOT: tutorials/dataframe/df019_Cache.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df019_Cache.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Cache a processed RDataFrame in memory for further usage. ; This tutorial shows how the content of a data frame can be cached in memory in form of a dataframe. The content of the columns is stored in memory in contiguous slabs of memory and is ""ready to use"", i.e. no ROOT IO operation is performed.; Creating a cached data frame storing all of its content deserialised and uncompressed in memory is particularly useful when dealing with datasets of a moderate size (small enough to fit the RAM) over which several explorative loops need to be performed as fast as possible. In addition, caching can be useful when no file on disk needs to be created as a side effect of checkpointing part of the analysis.; All steps in the caching are lazy, i.e. the cached data frame is actually filled only when the event loop is triggered on it.; ; import ROOT; import os; ; # We create a data frame on top of the hsimple example.; hsimplePath = os.path.join(str(ROOT.gROOT.GetTutorialDir().Data()), ""hsimple.root""); df = ROOT.RDataFrame(""ntuple"", hsimplePath); ; # We apply a simple cut and define a new column.; df_cut = df.Filter(""py > 0.f"")\; .Define(""px_plus_py"", ""px + py""); ; # We cache the content of the dataset. Nothing has happened yet: the work to accomplish; # has been described.; df_cached = df_cut.Cache(); ; h = df_cached.Histo1D(""px_plus_py""); ; # Now the event loop on the cached dataset is triggered by accessing the histogram.; # This event triggers the loop on the `df` data frame lazily.; c = ROOT.TCanvas(); h.Draw(); c.SaveAs(""df019_Cache.png""); ; print(""Saved figure to df019_Cache.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; . DateJune 2018 ; ",MatchSource.WIKI,doc/master/df019__Cache_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df019__Cache_8py.html
Security,access,accessing," tutorials. Detailed Description; Cache a processed RDataFrame in memory for further usage. ; This tutorial shows how the content of a data frame can be cached in memory in form of a dataframe. The content of the columns is stored in memory in contiguous slabs of memory and is ""ready to use"", i.e. no ROOT IO operation is performed.; Creating a cached data frame storing all of its content deserialised and uncompressed in memory is particularly useful when dealing with datasets of a moderate size (small enough to fit the RAM) over which several explorative loops need to be performed as fast as possible. In addition, caching can be useful when no file on disk needs to be created as a side effect of checkpointing part of the analysis.; All steps in the caching are lazy, i.e. the cached data frame is actually filled only when the event loop is triggered on it.; ; import ROOT; import os; ; # We create a data frame on top of the hsimple example.; hsimplePath = os.path.join(str(ROOT.gROOT.GetTutorialDir().Data()), ""hsimple.root""); df = ROOT.RDataFrame(""ntuple"", hsimplePath); ; # We apply a simple cut and define a new column.; df_cut = df.Filter(""py > 0.f"")\; .Define(""px_plus_py"", ""px + py""); ; # We cache the content of the dataset. Nothing has happened yet: the work to accomplish; # has been described.; df_cached = df_cut.Cache(); ; h = df_cached.Histo1D(""px_plus_py""); ; # Now the event loop on the cached dataset is triggered by accessing the histogram.; # This event triggers the loop on the `df` data frame lazily.; c = ROOT.TCanvas(); h.Draw(); c.SaveAs(""df019_Cache.png""); ; print(""Saved figure to df019_Cache.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; . DateJune 2018 ; AuthorDanilo Piparo (CERN) ; Definition in file df019_Cache.py. tutorialsdataframedf019_Cache.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df019__Cache_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df019__Cache_8py.html
Usability,simpl,simple," tutorials. Detailed Description; Cache a processed RDataFrame in memory for further usage. ; This tutorial shows how the content of a data frame can be cached in memory in form of a dataframe. The content of the columns is stored in memory in contiguous slabs of memory and is ""ready to use"", i.e. no ROOT IO operation is performed.; Creating a cached data frame storing all of its content deserialised and uncompressed in memory is particularly useful when dealing with datasets of a moderate size (small enough to fit the RAM) over which several explorative loops need to be performed as fast as possible. In addition, caching can be useful when no file on disk needs to be created as a side effect of checkpointing part of the analysis.; All steps in the caching are lazy, i.e. the cached data frame is actually filled only when the event loop is triggered on it.; ; import ROOT; import os; ; # We create a data frame on top of the hsimple example.; hsimplePath = os.path.join(str(ROOT.gROOT.GetTutorialDir().Data()), ""hsimple.root""); df = ROOT.RDataFrame(""ntuple"", hsimplePath); ; # We apply a simple cut and define a new column.; df_cut = df.Filter(""py > 0.f"")\; .Define(""px_plus_py"", ""px + py""); ; # We cache the content of the dataset. Nothing has happened yet: the work to accomplish; # has been described.; df_cached = df_cut.Cache(); ; h = df_cached.Histo1D(""px_plus_py""); ; # Now the event loop on the cached dataset is triggered by accessing the histogram.; # This event triggers the loop on the `df` data frame lazily.; c = ROOT.TCanvas(); h.Draw(); c.SaveAs(""df019_Cache.png""); ; print(""Saved figure to df019_Cache.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; . DateJune 2018 ; AuthorDanilo Piparo (CERN) ; Definition in file df019_Cache.py. tutorialsdataframedf019_Cache.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df019__Cache_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df019__Cache_8py.html
Availability,down,down,"tOne` are callables that we can use in `Filters`:; auto c1 = df.Filter(isOne, {""one""}).Count();; auto c2 = df.Filter(isNotOne, {""two""}).Count();; // Both counts are equal to the total number of entries, as both Filters always pass.; R__ASSERT(*c1 == nEntries);; R__ASSERT(*c2 == nEntries);; ; // *** PassAsVec ***; // Consider the following function, which checks if a vector consists of two elements equal to 1 and 2:; auto checkOneTwo = [] (const std::vector<int> &v) { return v.size() == 2 && v[0] == 1 && v[1] == 2; };; // The following line, although it looks reasonable, would _not_ run correctly:; // df.Filter(checkOneTwo, {""one"", ""two""});; // The reason is that `Filter(..., {""one"", ""two""})` expects a callable that takes exactly two integers, while; // `checkOneTwo` actually takes a vector of integers (i.e. it does not have the right signature).; // PassAsVec helps passing down the single values ""one"", ""two"" to `checkOneTwo` as a collection: it takes a callable; // `f` that expects a collection as argument and returns a new callable that takes single arguments instead, passes; // them down to `f` and returns what `f` returns.; // PassAsVec requires that number of arguments and their type is specified as template argument.; // Here's an example usage (remember, PassAsVec(f) returns a new callable!):; auto c3 = df.Filter(ROOT::RDF::PassAsVec<2, int>(checkOneTwo), {""one"", ""two""}).Count();; R__ASSERT(*c3 == nEntries);; }; a#define a(i)Definition RSha256.hxx:99; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; c3return c3Definition legend3.C:15; ROOT::RDF::Notauto Not(F &&f) -> decltype(RDFInternal::NotHelper(Args(), std::forward< F >(f)))Given a callable with signature bool(T1, T2, ...) return a ",MatchSource.WIKI,doc/master/df020__helpers_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df020__helpers_8C.html
Integrability,interface,interface,"wing function, which checks if a vector consists of two elements equal to 1 and 2:; auto checkOneTwo = [] (const std::vector<int> &v) { return v.size() == 2 && v[0] == 1 && v[1] == 2; };; // The following line, although it looks reasonable, would _not_ run correctly:; // df.Filter(checkOneTwo, {""one"", ""two""});; // The reason is that `Filter(..., {""one"", ""two""})` expects a callable that takes exactly two integers, while; // `checkOneTwo` actually takes a vector of integers (i.e. it does not have the right signature).; // PassAsVec helps passing down the single values ""one"", ""two"" to `checkOneTwo` as a collection: it takes a callable; // `f` that expects a collection as argument and returns a new callable that takes single arguments instead, passes; // them down to `f` and returns what `f` returns.; // PassAsVec requires that number of arguments and their type is specified as template argument.; // Here's an example usage (remember, PassAsVec(f) returns a new callable!):; auto c3 = df.Filter(ROOT::RDF::PassAsVec<2, int>(checkOneTwo), {""one"", ""two""}).Count();; R__ASSERT(*c3 == nEntries);; }; a#define a(i)Definition RSha256.hxx:99; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; c3return c3Definition legend3.C:15; ROOT::RDF::Notauto Not(F &&f) -> decltype(RDFInternal::NotHelper(Args(), std::forward< F >(f)))Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns ...Definition RDFHelpers.hxx:83; v@ vDefinition rootcling_impl.cxx:3699; DateJuly 2018 ; AuthorEnrico Guiraud (CERN) ; Definition in file df020_helpers.C. tutorialsdataframedf020_helpers.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df020__helpers_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df020__helpers_8C.html
Performance,perform,performed,". ROOT: tutorials/dataframe/df020_helpers.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df020_helpers.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Show usage of RDataFrame's helper tools, contained in ROOT/RDFHelpers.hxx. ; ; void df020_helpers(); {; // First of all, we create a dataframe with 3 entries and define two simple columns; const auto nEntries = 3;; ROOT::RDataFrame _df(nEntries);; auto df = _df.Define(""one"", [] { return 1; }).Define(""two"", [] { return 2; });; ; // *** Not ***; // This helper takes a callable `f` (which must return a `bool`) and produces a new callable which takes the same; // arguments as `f` but returns its negated result. `Not` is useful to invert the check performed by a given Filter.; // Here we define a simple lambda that checks whether a value is equal to 1, and invert it with Not:; auto isOne = [] (int a) { return a == 1; };; auto isNotOne = ROOT::RDF::Not(isOne);; ; // Both `isOne` and `isNotOne` are callables that we can use in `Filters`:; auto c1 = df.Filter(isOne, {""one""}).Count();; auto c2 = df.Filter(isNotOne, {""two""}).Count();; // Both counts are equal to the total number of entries, as both Filters always pass.; R__ASSERT(*c1 == nEntries);; R__ASSERT(*c2 == nEntries);; ; // *** PassAsVec ***; // Consider the following function, which checks if a vector consists of two elements equal to 1 and 2:; auto checkOneTwo = [] (const std::vector<int> &v) { return v.size() == 2 && v[0] == 1 && v[1] == 2; };; // The following line, although it looks reasonable, would _not_ run correctly:; // df.Filter(checkOneTwo, {""one"", ""two""});; // The reason is that `Filter(..., {""one"", ""two""})` expects a callable that takes exactly two integers, while; // `checkOneTwo` actually takes a vector of integers (i.e. it does not have the right signature).; // PassAsVec helps passing down the single values ""one"", ""two"" to `checkOneTwo` as a collection: it takes a callable; // `f",MatchSource.WIKI,doc/master/df020__helpers_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df020__helpers_8C.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df020_helpers.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df020_helpers.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Show usage of RDataFrame's helper tools, contained in ROOT/RDFHelpers.hxx. ; ; void df020_helpers(); {; // First of all, we create a dataframe with 3 entries and define two simple columns; const auto nEntries = 3;; ROOT::RDataFrame _df(nEntries);; auto df = _df.Define(""one"", [] { return 1; }).Define(""two"", [] { return 2; });; ; // *** Not ***; // This helper takes a callable `f` (which must return a `bool`) and produces a new callable which takes the same; // arguments as `f` but returns its negated result. `Not` is useful to invert the check performed by a given Filter.; // Here we define a simple lambda that checks whether a value is equal to 1, and invert it with Not:; auto isOne = [] (int a) { return a == 1; };; auto isNotOne = ROOT::RDF::Not(isOne);; ; // Both `isOne` and `isNotOne` are callables that we can use in `Filters`:; auto c1 = df.Filter(isOne, {""one""}).Count();; auto c2 = df.Filter(isNotOne, {""two""}).Count();; // Both counts are equal to the total number of entries, as both Filters always pass.; R__ASSERT(*c1 == nEntries);; R__ASSERT(*c2 == nEntries);; ; // *** PassAsVec ***; // Consider the following function, which checks if a vector consists of two elements equal to 1 and 2:; auto checkOneTwo = [] (const std::vector<int> &v) { return v.size() == 2 && v[0] == 1 && v[1] == 2; };; // The following line, although it looks reasonable, would _not_ run correctly:; // df.Filter(checkOneTwo, {""one"", ""two""});; // The reason is that `Filter(..., {""one"", ""two""})` expects a callable that takes exactly two integers, while; // `checkOneTwo` actually takes a vector of integers (i.e. it does not have the right signature).; // PassAsVec helps passing down the single values ""one"", ""two"" to `checkOneTwo` as a collection: it takes a callable; // `f",MatchSource.WIKI,doc/master/df020__helpers_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df020__helpers_8C.html
Integrability,interface,interface,". ROOT: tutorials/dataframe/df021_createTGraph.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df021_createTGraph.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Fill a TGraph using RDataFrame. ; ; ; ; void df021_createTGraph(); {; ROOT::EnableImplicitMT(2);; ; ROOT::RDataFrame d(160);; ; // Create a trivial parabola; auto dd = d.Alias(""x"", ""rdfentry_"").Define(""y"", ""x*x"");; ; auto graph = dd.Graph(""x"", ""y"");; ; // This tutorial is ran with multithreading enabled. The order in which points are inserted is not known, so to have a meaningful representation points are sorted.; graph->Sort();; auto c = new TCanvas();; graph->DrawClone(""APL"");; }; d#define d(i)Definition RSha256.hxx:102; c#define c(i)Definition RSha256.hxx:101; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; df021_createTGraphDefinition df021_createTGraph.py:1; graphDefinition graph.py:1; . DateJuly 2018 ; AuthorsEnrico Guiraud, Danilo Piparo (CERN), Massimo Tumolo (Politecnico di Torino) ; Definition in file df021_createTGraph.C. tutorialsdataframedf021_createTGraph.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df021__createTGraph_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df021__createTGraph_8C.html
Performance,multi-thread,multi-threading,". ROOT: tutorials/dataframe/df021_createTGraph.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df021_createTGraph.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Fill a TGraph using RDataFrame. ; ; ; ; void df021_createTGraph(); {; ROOT::EnableImplicitMT(2);; ; ROOT::RDataFrame d(160);; ; // Create a trivial parabola; auto dd = d.Alias(""x"", ""rdfentry_"").Define(""y"", ""x*x"");; ; auto graph = dd.Graph(""x"", ""y"");; ; // This tutorial is ran with multithreading enabled. The order in which points are inserted is not known, so to have a meaningful representation points are sorted.; graph->Sort();; auto c = new TCanvas();; graph->DrawClone(""APL"");; }; d#define d(i)Definition RSha256.hxx:102; c#define c(i)Definition RSha256.hxx:101; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; df021_createTGraphDefinition df021_createTGraph.py:1; graphDefinition graph.py:1; . DateJuly 2018 ; AuthorsEnrico Guiraud, Danilo Piparo (CERN), Massimo Tumolo (Politecnico di Torino) ; Definition in file df021_createTGraph.C. tutorialsdataframedf021_createTGraph.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df021__createTGraph_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df021__createTGraph_8C.html
Integrability,interface,interface,". ROOT: tutorials/dataframe/df021_createTGraph.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df021_createTGraph.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Fill a TGraph using RDataFrame. ; ; import ROOT; ; ROOT.ROOT.EnableImplicitMT(2); d = ROOT.RDataFrame(160); ; # Create a trivial parabola; dd = d.Alias(""x"", ""rdfentry_"").Define(""y"", ""x*x""); ; graph = dd.Graph(""x"", ""y""); ; # This tutorial is ran with multithreading enabled. The order in which points are inserted is not known, so to have a meaningful representation points are sorted.; c = ROOT.TCanvas(); graph.Sort(); graph.Draw(""APL""); c.SaveAs(""df021_createTGraph.png""); ; print(""Saved figure to df021_createTGraph.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; . DateJuly 2018 ; AuthorsEnrico Guiraud, Danilo Piparo (CERN), Massimo Tumolo (Politecnico di Torino) ; Definition in file df021_createTGraph.py. tutorialsdataframedf021_createTGraph.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df021__createTGraph_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df021__createTGraph_8py.html
Availability,robust,robust,"0000000."");; ; auto ptr = std::make_shared<double>();; KahanSum<double> helper(ptr);; ; auto kahanResult = dd.Book<double>(std::move(helper), {""x""});; auto plainResult = dd.Sum<double>({""x""});; ; std::cout << std::setprecision(24) << ""Kahan: "" << *kahanResult << "" Classical: "" << *plainResult << std::endl;; // Outputs: Kahan: 1000000000.00000011920929 Classical: 1000000000; }; d#define d(i)Definition RSha256.hxx:102; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; ROOT::Detail::RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; TMVA::TMVAGlob::Initializevoid Initialize(Bool_t useTMVAStyle=kTRUE)Definition tmvaglob.cxx:176; v@ vDefinition rootcling_impl.cxx:3699; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; ; Kahan: 1000000000.00000",MatchSource.WIKI,doc/master/df022__useKahan_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df022__useKahan_8C.html
Integrability,interface,interface," implicit parallelism; ROOT::EnableImplicitMT(2);; ; ROOT::RDataFrame d(20);; auto dd = d.Define(""x"", ""(rdfentry_ %2 == 0) ? 0.00000001 : 100000000."");; ; auto ptr = std::make_shared<double>();; KahanSum<double> helper(ptr);; ; auto kahanResult = dd.Book<double>(std::move(helper), {""x""});; auto plainResult = dd.Sum<double>({""x""});; ; std::cout << std::setprecision(24) << ""Kahan: "" << *kahanResult << "" Classical: "" << *plainResult << std::endl;; // Outputs: Kahan: 1000000000.00000011920929 Classical: 1000000000; }; d#define d(i)Definition RSha256.hxx:102; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; ROOT::Detail::RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; TMVA::TMVAGlob::Initializevoid Initialize(Bool_t useTMVAStyle=kTRUE)Definition tmvagl",MatchSource.WIKI,doc/master/df022__useKahan_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df022__useKahan_8C.html
Performance,multi-thread,multi-threading,"1000000000.00000011920929 Classical: 1000000000; }; d#define d(i)Definition RSha256.hxx:102; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; ROOT::Detail::RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; TMVA::TMVAGlob::Initializevoid Initialize(Bool_t useTMVAStyle=kTRUE)Definition tmvaglob.cxx:176; v@ vDefinition rootcling_impl.cxx:3699; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; ; Kahan: 1000000000.00000011920929 Classical: 1000000000.00000011920929; DateJuly 2018 ; AuthorsEnrico Guiraud, Danilo Piparo (CERN), Massimo Tumolo (Politecnico di Torino) ; Definition in file df022_useKahan.C. tutorialsdataframedf022_useKahan.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df022__useKahan_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df022__useKahan_8C.html
Usability,simpl,simple,"0000000."");; ; auto ptr = std::make_shared<double>();; KahanSum<double> helper(ptr);; ; auto kahanResult = dd.Book<double>(std::move(helper), {""x""});; auto plainResult = dd.Sum<double>({""x""});; ; std::cout << std::setprecision(24) << ""Kahan: "" << *kahanResult << "" Classical: "" << *plainResult << std::endl;; // Outputs: Kahan: 1000000000.00000011920929 Classical: 1000000000; }; d#define d(i)Definition RSha256.hxx:102; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; ROOT::Detail::RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; TMVA::TMVAGlob::Initializevoid Initialize(Bool_t useTMVAStyle=kTRUE)Definition tmvaglob.cxx:176; v@ vDefinition rootcling_impl.cxx:3699; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; ; Kahan: 1000000000.00000",MatchSource.WIKI,doc/master/df022__useKahan_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df022__useKahan_8C.html
Integrability,interface,interface,"ction. It receives an accumulator (acc) and a column value (x). The variable acc is shared among the; // calls, so the function has to specify how the value has to be aggregated in the accumulator.; auto aggregator = [](double acc, double x) { return acc * x; };; ; // If multithread is enabled, the aggregator function will be called by more threads and will produce a vector of; // partial accumulators. The merger function performs the final aggregation of these partial results.; auto merger = [](std::vector<double> &accumulators) {; auto size = accumulators.size();; for (int i = 1; i < size; ++i) {; accumulators[0] *= accumulators[i];; }; };; ; // The accumulator is initialized at this value by every thread.; double initValue = 1.;; ; // Multiplies all elements of the column ""x""; auto result = d.Aggregate(aggregator, merger, columnName, initValue);; ; std::cout << *result << std::endl;; }; d#define d(i)Definition RSha256.hxx:102; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; xDouble_t x[n]Definition legend1.C:17; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ; 120; DateJuly 2018 ; AuthorsEnrico Guiraud, Danilo Piparo (CERN), Massimo Tumolo (Politecnico di Torino) ; Definition in file df023_aggregate.C. tutorialsdataframedf023_aggregate.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df023__aggregate_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df023__aggregate_8C.html
Modifiability,variab,variable,". ROOT: tutorials/dataframe/df023_aggregate.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df023_aggregate.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use the Aggregate action to specify arbitrary data aggregations. ; This tutorial shows how to use the Aggregate action to evaluate the product of all the elements of a column. This operation may be performed using a Reduce action, however aggregate is used for the sake of the tutorial; ; void df023_aggregate(); {; ; // Column to be aggregated; const std::string columnName = ""x"";; ; ROOT::EnableImplicitMT(2);; auto rdf = ROOT::RDataFrame(5);; auto d = rdf.Define(columnName, ""rdfentry_ + 1."");; ; // Aggregator function. It receives an accumulator (acc) and a column value (x). The variable acc is shared among the; // calls, so the function has to specify how the value has to be aggregated in the accumulator.; auto aggregator = [](double acc, double x) { return acc * x; };; ; // If multithread is enabled, the aggregator function will be called by more threads and will produce a vector of; // partial accumulators. The merger function performs the final aggregation of these partial results.; auto merger = [](std::vector<double> &accumulators) {; auto size = accumulators.size();; for (int i = 1; i < size; ++i) {; accumulators[0] *= accumulators[i];; }; };; ; // The accumulator is initialized at this value by every thread.; double initValue = 1.;; ; // Multiplies all elements of the column ""x""; auto result = d.Aggregate(aggregator, merger, columnName, initValue);; ; std::cout << *result << std::endl;; }; d#define d(i)Definition RSha256.hxx:102; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int",MatchSource.WIKI,doc/master/df023__aggregate_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df023__aggregate_8C.html
Performance,perform,performed,". ROOT: tutorials/dataframe/df023_aggregate.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df023_aggregate.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use the Aggregate action to specify arbitrary data aggregations. ; This tutorial shows how to use the Aggregate action to evaluate the product of all the elements of a column. This operation may be performed using a Reduce action, however aggregate is used for the sake of the tutorial; ; void df023_aggregate(); {; ; // Column to be aggregated; const std::string columnName = ""x"";; ; ROOT::EnableImplicitMT(2);; auto rdf = ROOT::RDataFrame(5);; auto d = rdf.Define(columnName, ""rdfentry_ + 1."");; ; // Aggregator function. It receives an accumulator (acc) and a column value (x). The variable acc is shared among the; // calls, so the function has to specify how the value has to be aggregated in the accumulator.; auto aggregator = [](double acc, double x) { return acc * x; };; ; // If multithread is enabled, the aggregator function will be called by more threads and will produce a vector of; // partial accumulators. The merger function performs the final aggregation of these partial results.; auto merger = [](std::vector<double> &accumulators) {; auto size = accumulators.size();; for (int i = 1; i < size; ++i) {; accumulators[0] *= accumulators[i];; }; };; ; // The accumulator is initialized at this value by every thread.; double initValue = 1.;; ; // Multiplies all elements of the column ""x""; auto result = d.Aggregate(aggregator, merger, columnName, initValue);; ; std::cout << *result << std::endl;; }; d#define d(i)Definition RSha256.hxx:102; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int",MatchSource.WIKI,doc/master/df023__aggregate_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df023__aggregate_8C.html
Integrability,interface,interface,"ector<int>({x++, x++, x++, x++});; }) // A column with four-elements collection; .Define(""w"", [&w]() { return w *= 1.8; }) // A column with doubles; .Define(""z"", [&z]() {; z *= 1.1;; return std::vector<std::vector<double>>({{z, ++z}, {z, ++z}, {z, ++z}});; }); // A column of matrices; ; // Preparing the RResultPtr<RDisplay> object with all columns and default number of entries; auto d1 = d.Display("""");; // Preparing the RResultPtr<RDisplay> object with two columns and default number of entries; auto d2 = d.Display({""x"", ""y""});; ; // Printing the short representations, the event loop will run; std::cout << ""The following is the representation of all columns with the default nr of entries"" << std::endl;; d1->Print();; std::cout << ""\n\nThe following is the representation of two columns with the default nr of entries"" << std::endl;; d2->Print();; }; d#define d(i)Definition RSha256.hxx:102; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; df024_DisplayDefinition df024_Display.py:1; ; The following is the representation of all columns with the default nr of entries; +-----+-----------+----+-------------+--------------------------+; | Row | w | x | y | z | ; +-----+-----------+----+-------------+--------------------------+; | 0 | 1.800000 | 1 | 100 | { 1.1000000, 2.1000000 } | ; | | | 2 | | { 2.1000000, 3.1000000 } | ; | | | 3 | | { 3.1000000, 4.1000000 } | ; | | | 4 | | | ; +-----+-----------+----+-------------+--------------------------+; | 1 | 3.240000 | 5 | 10000 | { 4.5100000, 5.5100000 } | ; | | | 6 | | { 5.5100000, 6.5100000 } | ; | | | 7 | | { 6.5100000, 7.5100000 } | ; | | | 8 | | | ; +-----+-----------+----+-------------+--------------------------+; | 2 | 5.832000 | 9 | 1000000 | { 8.2610000, 9.2610000 } | ; | | | 10 | | { 9.2610000, 10.261000 } ",MatchSource.WIKI,doc/master/df024__Display_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df024__Display_8C.html
Integrability,interface,interface,"ect and applies a string filter; ROOT::RDF::RNode AddFilter(ROOT::RDF::RNode node, string_view filterStr); {; return node.Filter(filterStr);; }; ; void df025_RNode(); {; ROOT::RDataFrame df(8);; ; // Using the generic AddFilter helper function defined above: RNode in, RNode out; auto f1 = AddFilter(df, ""rdfentry_ > 0"");; auto f2 = f1.Filter([](ULong64_t e) { return e > 1; }, {""rdfentry_""});; ; // Conditionally applying a filter is simple with ROOT::RDF::RNode; bool someCondition = true;; auto maybe_filtered = ROOT::RDF::RNode(f2);; if (someCondition); maybe_filtered = maybe_filtered.Filter(""rdfentry_ > 3"");; ; // Adding new columns with Define in a loop is simple thanks to ROOT::RDF::RNode; auto with_columns = ROOT::RDF::RNode(maybe_filtered);; for (auto i = 0; i < 3; ++i); with_columns = with_columns.Define(""x"" + std::to_string(i), ""42"");; ; // RNodes can be used exactly like any other RDF object; std::cout << ""Entries passing the selection: "" << with_columns.Count().GetValue() << std::endl;; }; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; ROOT::RDF::RInterfaceThe public interface to the RDataFrame federation of classes.Definition RInterface.hxx:113; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:219; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; f1TF1 * f1Definition legend1.C:11; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; ; Entries passing the selection: 4; DateJune 2020 ; AuthorsDanilo Piparo, Enrico Guiraud (CERN) ; Definition in file df025_RNode.C. tutorialsdataframedf025_RNode.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df025__RNode_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df025__RNode_8C.html
Performance,perform,performance,". ROOT: tutorials/dataframe/df025_RNode.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df025_RNode.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Manipulate RDF objects in functions, loops and conditional branches. ; Each RDataFrame object has its own type. It helps with performance, but sometimes it gets in the way of writing simple code that manages RDF objects. Luckily, every RDF object can be converted to the generic RNode type. This tutorial shows how to take advantage of RNode to easily manipulate RDataFrames.; ; /// A generic function that takes an RDF object and applies a string filter; ROOT::RDF::RNode AddFilter(ROOT::RDF::RNode node, string_view filterStr); {; return node.Filter(filterStr);; }; ; void df025_RNode(); {; ROOT::RDataFrame df(8);; ; // Using the generic AddFilter helper function defined above: RNode in, RNode out; auto f1 = AddFilter(df, ""rdfentry_ > 0"");; auto f2 = f1.Filter([](ULong64_t e) { return e > 1; }, {""rdfentry_""});; ; // Conditionally applying a filter is simple with ROOT::RDF::RNode; bool someCondition = true;; auto maybe_filtered = ROOT::RDF::RNode(f2);; if (someCondition); maybe_filtered = maybe_filtered.Filter(""rdfentry_ > 3"");; ; // Adding new columns with Define in a loop is simple thanks to ROOT::RDF::RNode; auto with_columns = ROOT::RDF::RNode(maybe_filtered);; for (auto i = 0; i < 3; ++i); with_columns = with_columns.Define(""x"" + std::to_string(i), ""42"");; ; // RNodes can be used exactly like any other RDF object; std::cout << ""Entries passing the selection: "" << with_columns.Count().GetValue() << std::endl;; }; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; ROOT::RDF::RInterfaceThe public interface to the RDataFrame federation of classes.Definition RInterface.hxx:113; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}",MatchSource.WIKI,doc/master/df025__RNode_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df025__RNode_8C.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df025_RNode.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df025_RNode.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Manipulate RDF objects in functions, loops and conditional branches. ; Each RDataFrame object has its own type. It helps with performance, but sometimes it gets in the way of writing simple code that manages RDF objects. Luckily, every RDF object can be converted to the generic RNode type. This tutorial shows how to take advantage of RNode to easily manipulate RDataFrames.; ; /// A generic function that takes an RDF object and applies a string filter; ROOT::RDF::RNode AddFilter(ROOT::RDF::RNode node, string_view filterStr); {; return node.Filter(filterStr);; }; ; void df025_RNode(); {; ROOT::RDataFrame df(8);; ; // Using the generic AddFilter helper function defined above: RNode in, RNode out; auto f1 = AddFilter(df, ""rdfentry_ > 0"");; auto f2 = f1.Filter([](ULong64_t e) { return e > 1; }, {""rdfentry_""});; ; // Conditionally applying a filter is simple with ROOT::RDF::RNode; bool someCondition = true;; auto maybe_filtered = ROOT::RDF::RNode(f2);; if (someCondition); maybe_filtered = maybe_filtered.Filter(""rdfentry_ > 3"");; ; // Adding new columns with Define in a loop is simple thanks to ROOT::RDF::RNode; auto with_columns = ROOT::RDF::RNode(maybe_filtered);; for (auto i = 0; i < 3; ++i); with_columns = with_columns.Define(""x"" + std::to_string(i), ""42"");; ; // RNodes can be used exactly like any other RDF object; std::cout << ""Entries passing the selection: "" << with_columns.Count().GetValue() << std::endl;; }; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; ROOT::RDF::RInterfaceThe public interface to the RDataFrame federation of classes.Definition RInterface.hxx:113; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}",MatchSource.WIKI,doc/master/df025__RNode_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df025__RNode_8C.html
Deployability,install,install,"ed by PyROOT; # in the Python world. However, be aware that objects other than fundamental types,; # such as complex C++ objects and not int or float, are costly to read-out.; ROOT.gInterpreter.Declare(""""""; // Inject the C++ class CustomObject in the C++ runtime.; class CustomObject {; public:; int x = 42;; };; // Create a function that returns such an object. This is called to fill the dataframe.; CustomObject fill_object() { return CustomObject(); }; """"""); ; df3 = df.Define(""custom_object"", ""fill_object()""); npy5 = df3.AsNumpy(); print(""Read-out of C++ objects:\n{}\n"".format(npy5[""custom_object""])); print(""Access to all methods and data members of the C++ object:\nObject: {}\nAccess data member: custom_object.x = {}\n"".format(; repr(npy5[""custom_object""][0]), npy5[""custom_object""][0].x)); ; # Note that you can pass the object returned by AsNumpy directly to pandas.DataFrame; # including any complex C++ object that may be read-out.; try:; import pandas; except:; print(""Please install the pandas package to run this section of the tutorial.""); exit(1); ; df = pandas.DataFrame(npy5); print(""Content of the ROOT.RDataFrame as pandas.DataFrame:\n{}\n"".format(df)); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProx",MatchSource.WIKI,doc/master/df026__AsNumpyArrays_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df026__AsNumpyArrays_8py.html
Energy Efficiency,reduce,reduce,". ROOT: tutorials/dataframe/df026_AsNumpyArrays.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df026_AsNumpyArrays.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Read data from RDataFrame into Numpy arrays. ; ; import ROOT; from sys import exit; ; # Let's create a simple dataframe with ten rows and two columns; df = ROOT.RDataFrame(10) \; .Define(""x"", ""(int)rdfentry_"") \; .Define(""y"", ""1.f/(1.f+rdfentry_)""); ; # Next, we want to access the data from Python as Numpy arrays. To do so, the; # content of the dataframe is converted using the AsNumpy method. The returned; # object is a dictionary with the column names as keys and 1D numpy arrays with; # the content as values.; npy = df.AsNumpy(); print(""Read-out of the full RDataFrame:\n{}\n"".format(npy)); ; # Since reading out data to memory is expensive, always try to read-out only what; # is needed for your analysis. You can use all RDataFrame features to reduce your; # dataset, e.g., the Filter transformation. Furthermore, you can can pass to the; # AsNumpy method a whitelist of column names with the option `columns` or a blacklist; # with column names with the option `exclude`.; df2 = df.Filter(""x>5""); npy2 = df2.AsNumpy(); print(""Read-out of the filtered RDataFrame:\n{}\n"".format(npy2)); ; npy3 = df2.AsNumpy(columns=[""x""]); print(""Read-out of the filtered RDataFrame with the columns option:\n{}\n"".format(npy3)); ; npy4 = df2.AsNumpy(exclude=[""x""]); print(""Read-out of the filtered RDataFrame with the exclude option:\n{}\n"".format(npy4)); ; # You can read-out all objects from ROOT files since these are wrapped by PyROOT; # in the Python world. However, be aware that objects other than fundamental types,; # such as complex C++ objects and not int or float, are costly to read-out.; ROOT.gInterpreter.Declare(""""""; // Inject the C++ class CustomObject in the C++ runtime.; class CustomObject {; public:; int x = 42;; };; // Create a fu",MatchSource.WIKI,doc/master/df026__AsNumpyArrays_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df026__AsNumpyArrays_8py.html
Integrability,wrap,wrapped,". The returned; # object is a dictionary with the column names as keys and 1D numpy arrays with; # the content as values.; npy = df.AsNumpy(); print(""Read-out of the full RDataFrame:\n{}\n"".format(npy)); ; # Since reading out data to memory is expensive, always try to read-out only what; # is needed for your analysis. You can use all RDataFrame features to reduce your; # dataset, e.g., the Filter transformation. Furthermore, you can can pass to the; # AsNumpy method a whitelist of column names with the option `columns` or a blacklist; # with column names with the option `exclude`.; df2 = df.Filter(""x>5""); npy2 = df2.AsNumpy(); print(""Read-out of the filtered RDataFrame:\n{}\n"".format(npy2)); ; npy3 = df2.AsNumpy(columns=[""x""]); print(""Read-out of the filtered RDataFrame with the columns option:\n{}\n"".format(npy3)); ; npy4 = df2.AsNumpy(exclude=[""x""]); print(""Read-out of the filtered RDataFrame with the exclude option:\n{}\n"".format(npy4)); ; # You can read-out all objects from ROOT files since these are wrapped by PyROOT; # in the Python world. However, be aware that objects other than fundamental types,; # such as complex C++ objects and not int or float, are costly to read-out.; ROOT.gInterpreter.Declare(""""""; // Inject the C++ class CustomObject in the C++ runtime.; class CustomObject {; public:; int x = 42;; };; // Create a function that returns such an object. This is called to fill the dataframe.; CustomObject fill_object() { return CustomObject(); }; """"""); ; df3 = df.Define(""custom_object"", ""fill_object()""); npy5 = df3.AsNumpy(); print(""Read-out of C++ objects:\n{}\n"".format(npy5[""custom_object""])); print(""Access to all methods and data members of the C++ object:\nObject: {}\nAccess data member: custom_object.x = {}\n"".format(; repr(npy5[""custom_object""][0]), npy5[""custom_object""][0].x)); ; # Note that you can pass the object returned by AsNumpy directly to pandas.DataFrame; # including any complex C++ object that may be read-out.; try:; import pandas; except:",MatchSource.WIKI,doc/master/df026__AsNumpyArrays_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df026__AsNumpyArrays_8py.html
Security,access,access,". ROOT: tutorials/dataframe/df026_AsNumpyArrays.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df026_AsNumpyArrays.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Read data from RDataFrame into Numpy arrays. ; ; import ROOT; from sys import exit; ; # Let's create a simple dataframe with ten rows and two columns; df = ROOT.RDataFrame(10) \; .Define(""x"", ""(int)rdfentry_"") \; .Define(""y"", ""1.f/(1.f+rdfentry_)""); ; # Next, we want to access the data from Python as Numpy arrays. To do so, the; # content of the dataframe is converted using the AsNumpy method. The returned; # object is a dictionary with the column names as keys and 1D numpy arrays with; # the content as values.; npy = df.AsNumpy(); print(""Read-out of the full RDataFrame:\n{}\n"".format(npy)); ; # Since reading out data to memory is expensive, always try to read-out only what; # is needed for your analysis. You can use all RDataFrame features to reduce your; # dataset, e.g., the Filter transformation. Furthermore, you can can pass to the; # AsNumpy method a whitelist of column names with the option `columns` or a blacklist; # with column names with the option `exclude`.; df2 = df.Filter(""x>5""); npy2 = df2.AsNumpy(); print(""Read-out of the filtered RDataFrame:\n{}\n"".format(npy2)); ; npy3 = df2.AsNumpy(columns=[""x""]); print(""Read-out of the filtered RDataFrame with the columns option:\n{}\n"".format(npy3)); ; npy4 = df2.AsNumpy(exclude=[""x""]); print(""Read-out of the filtered RDataFrame with the exclude option:\n{}\n"".format(npy4)); ; # You can read-out all objects from ROOT files since these are wrapped by PyROOT; # in the Python world. However, be aware that objects other than fundamental types,; # such as complex C++ objects and not int or float, are costly to read-out.; ROOT.gInterpreter.Declare(""""""; // Inject the C++ class CustomObject in the C++ runtime.; class CustomObject {; public:; int x = 42;; };; // Create a fun",MatchSource.WIKI,doc/master/df026__AsNumpyArrays_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df026__AsNumpyArrays_8py.html
Usability,simpl,simple,". ROOT: tutorials/dataframe/df026_AsNumpyArrays.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df026_AsNumpyArrays.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Read data from RDataFrame into Numpy arrays. ; ; import ROOT; from sys import exit; ; # Let's create a simple dataframe with ten rows and two columns; df = ROOT.RDataFrame(10) \; .Define(""x"", ""(int)rdfentry_"") \; .Define(""y"", ""1.f/(1.f+rdfentry_)""); ; # Next, we want to access the data from Python as Numpy arrays. To do so, the; # content of the dataframe is converted using the AsNumpy method. The returned; # object is a dictionary with the column names as keys and 1D numpy arrays with; # the content as values.; npy = df.AsNumpy(); print(""Read-out of the full RDataFrame:\n{}\n"".format(npy)); ; # Since reading out data to memory is expensive, always try to read-out only what; # is needed for your analysis. You can use all RDataFrame features to reduce your; # dataset, e.g., the Filter transformation. Furthermore, you can can pass to the; # AsNumpy method a whitelist of column names with the option `columns` or a blacklist; # with column names with the option `exclude`.; df2 = df.Filter(""x>5""); npy2 = df2.AsNumpy(); print(""Read-out of the filtered RDataFrame:\n{}\n"".format(npy2)); ; npy3 = df2.AsNumpy(columns=[""x""]); print(""Read-out of the filtered RDataFrame with the columns option:\n{}\n"".format(npy3)); ; npy4 = df2.AsNumpy(exclude=[""x""]); print(""Read-out of the filtered RDataFrame with the exclude option:\n{}\n"".format(npy4)); ; # You can read-out all objects from ROOT files since these are wrapped by PyROOT; # in the Python world. However, be aware that objects other than fundamental types,; # such as complex C++ objects and not int or float, are costly to read-out.; ROOT.gInterpreter.Declare(""""""; // Inject the C++ class CustomObject in the C++ runtime.; class CustomObject {; public:; int x = 42;; };; // Create a fun",MatchSource.WIKI,doc/master/df026__AsNumpyArrays_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df026__AsNumpyArrays_8py.html
Availability,down,downloads,". ROOT: tutorials/dataframe/df027_SQliteDependencyOverVersion.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df027_SQliteDependencyOverVersion.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Plot the ROOT downloads based on the version reading a remote sqlite3 file. ; This tutorial uses the Reduce method which allows to extract the minimum time stored in the SQlite3 database. The next step is to create a TH1F Histogram, which will be filled with the values stored in two different columns from the database. This procedure is simplified with a lambda expression that takes as parameters the values stored in the ""Time"" and ""Version"" columns.; ; ; void df027_SQliteDependencyOverVersion (); {; auto rdfb = ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT * FROM accesslog;"");; ; auto minTimeStr = *rdfb.Reduce([](std::string a, std::string b) {return std::min(a, b);}, ""Time"", std::string(""Z""));; ; std::cout << ""Minimum time is '"" << minTimeStr << ""'"" << std::endl;; ; double minTime = TDatime(minTimeStr.c_str()).Convert();; double maxTime = minTime + 3600.*24*365.25*4; // cover approx 4 years from minimal time; ; auto rdf = rdfb.Define(""datime"", [](const std::string &time){return TDatime(time.c_str()).Convert();}, {""Time""});; ; auto h614 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.14"");}, {""Version""}); .Histo1D({""h614"", ""Download time for version 6.14"", 64, minTime, maxTime}, {""datime""});; ; auto h616 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.16"");}, {""Version""}); .Histo1D({""h616"", ""Download time for version 6.16"", 64, minTime, maxTime}, {""datime""});; ; auto h618 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.18"");}, {""Version""}); .Histo1D({""h618"", ""Download time for version 6.18"", 64, minTime, maxTime}, {""datime""});; ; auto customize_histo = [](TH1D &histo) {; auto *xaxis = histo.GetXaxis();; xaxis->SetTimeDisplay(1);; ",MatchSource.WIKI,doc/master/df027__SQliteDependencyOverVersion_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C.html
Security,access,accesslog,". ROOT: tutorials/dataframe/df027_SQliteDependencyOverVersion.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df027_SQliteDependencyOverVersion.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Plot the ROOT downloads based on the version reading a remote sqlite3 file. ; This tutorial uses the Reduce method which allows to extract the minimum time stored in the SQlite3 database. The next step is to create a TH1F Histogram, which will be filled with the values stored in two different columns from the database. This procedure is simplified with a lambda expression that takes as parameters the values stored in the ""Time"" and ""Version"" columns.; ; ; void df027_SQliteDependencyOverVersion (); {; auto rdfb = ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT * FROM accesslog;"");; ; auto minTimeStr = *rdfb.Reduce([](std::string a, std::string b) {return std::min(a, b);}, ""Time"", std::string(""Z""));; ; std::cout << ""Minimum time is '"" << minTimeStr << ""'"" << std::endl;; ; double minTime = TDatime(minTimeStr.c_str()).Convert();; double maxTime = minTime + 3600.*24*365.25*4; // cover approx 4 years from minimal time; ; auto rdf = rdfb.Define(""datime"", [](const std::string &time){return TDatime(time.c_str()).Convert();}, {""Time""});; ; auto h614 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.14"");}, {""Version""}); .Histo1D({""h614"", ""Download time for version 6.14"", 64, minTime, maxTime}, {""datime""});; ; auto h616 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.16"");}, {""Version""}); .Histo1D({""h616"", ""Download time for version 6.16"", 64, minTime, maxTime}, {""datime""});; ; auto h618 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.18"");}, {""Version""}); .Histo1D({""h618"", ""Download time for version 6.18"", 64, minTime, maxTime}, {""datime""});; ; auto customize_histo = [](TH1D &histo) {; auto *xaxis = histo.GetXaxis();; xaxis->SetTimeDisplay(1);; ",MatchSource.WIKI,doc/master/df027__SQliteDependencyOverVersion_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C.html
Usability,simpl,simplified,". ROOT: tutorials/dataframe/df027_SQliteDependencyOverVersion.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df027_SQliteDependencyOverVersion.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Plot the ROOT downloads based on the version reading a remote sqlite3 file. ; This tutorial uses the Reduce method which allows to extract the minimum time stored in the SQlite3 database. The next step is to create a TH1F Histogram, which will be filled with the values stored in two different columns from the database. This procedure is simplified with a lambda expression that takes as parameters the values stored in the ""Time"" and ""Version"" columns.; ; ; void df027_SQliteDependencyOverVersion (); {; auto rdfb = ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT * FROM accesslog;"");; ; auto minTimeStr = *rdfb.Reduce([](std::string a, std::string b) {return std::min(a, b);}, ""Time"", std::string(""Z""));; ; std::cout << ""Minimum time is '"" << minTimeStr << ""'"" << std::endl;; ; double minTime = TDatime(minTimeStr.c_str()).Convert();; double maxTime = minTime + 3600.*24*365.25*4; // cover approx 4 years from minimal time; ; auto rdf = rdfb.Define(""datime"", [](const std::string &time){return TDatime(time.c_str()).Convert();}, {""Time""});; ; auto h614 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.14"");}, {""Version""}); .Histo1D({""h614"", ""Download time for version 6.14"", 64, minTime, maxTime}, {""datime""});; ; auto h616 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.16"");}, {""Version""}); .Histo1D({""h616"", ""Download time for version 6.16"", 64, minTime, maxTime}, {""datime""});; ; auto h618 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.18"");}, {""Version""}); .Histo1D({""h618"", ""Download time for version 6.18"", 64, minTime, maxTime}, {""datime""});; ; auto customize_histo = [](TH1D &histo) {; auto *xaxis = histo.GetXaxis();; xaxis->SetTimeDisplay(1);; ",MatchSource.WIKI,doc/master/df027__SQliteDependencyOverVersion_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C.html
Availability,down,downloads,". ROOT: tutorials/dataframe/df027_SQliteDependencyOverVersion.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df027_SQliteDependencyOverVersion.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_dataframe; 3/// \notebook -js; 4/// Plot the ROOT downloads based on the version reading a remote sqlite3 file.; 5///; 6/// This tutorial uses the Reduce method which allows to extract the minimum time; 7/// stored in the SQlite3 database.; 8/// The next step is to create a TH1F Histogram, which will be filled with the values stored in; 9/// two different columns from the database. This procedure is simplified with a lambda; 10/// expression that takes as parameters the values stored in the ""Time"" and ""Version"" columns.; 11///; 12/// \macro_code; 13/// \macro_image; 14///; 15/// \date August 2018; 16/// \authors Alexandra-Maria Dobrescu, Sergey Linev; 17 ; 18 ; 19void df027_SQliteDependencyOverVersion (); 20{; 21 auto rdfb = ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT * FROM accesslog;"");; 22 ; 23 auto minTimeStr = *rdfb.Reduce([](std::string a, std::string b) {return std::min(a, b);}, ""Time"", std::string(""Z""));; 24 ; 25 std::cout << ""Minimum time is '"" << minTimeStr << ""'"" << std::endl;; 26 ; 27 double minTime = TDatime(minTimeStr.c_str()).Convert();; 28 double maxTime = minTime + 3600.*24*365.25*4; // cover approx 4 years from minimal time; 29 ; 30 auto rdf = rdfb.Define(""datime"", [](const std::string &time){return TDatime(time.c_str()).Convert();}, {""Time""});; 31 ; 32 auto h614 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.14"");}, {""Version""}); 33 .Histo1D({""h614"", ""Download time for version 6.14"", 64, minTime, maxTime}, {""datime""});; 34 ; 35 auto h616 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.16"");}, {""Version""}); 36 .Histo1D({""h616"", ""Download time for version 6.16"", 64, minTime, maxTime}, {""datime""});; 37 ; 38 auto h618 = rdf.",MatchSource.WIKI,doc/master/df027__SQliteDependencyOverVersion_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C_source.html
Security,access,accesslog,"ce Guide ; .  . Loading...; Searching...; No Matches. df027_SQliteDependencyOverVersion.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_dataframe; 3/// \notebook -js; 4/// Plot the ROOT downloads based on the version reading a remote sqlite3 file.; 5///; 6/// This tutorial uses the Reduce method which allows to extract the minimum time; 7/// stored in the SQlite3 database.; 8/// The next step is to create a TH1F Histogram, which will be filled with the values stored in; 9/// two different columns from the database. This procedure is simplified with a lambda; 10/// expression that takes as parameters the values stored in the ""Time"" and ""Version"" columns.; 11///; 12/// \macro_code; 13/// \macro_image; 14///; 15/// \date August 2018; 16/// \authors Alexandra-Maria Dobrescu, Sergey Linev; 17 ; 18 ; 19void df027_SQliteDependencyOverVersion (); 20{; 21 auto rdfb = ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT * FROM accesslog;"");; 22 ; 23 auto minTimeStr = *rdfb.Reduce([](std::string a, std::string b) {return std::min(a, b);}, ""Time"", std::string(""Z""));; 24 ; 25 std::cout << ""Minimum time is '"" << minTimeStr << ""'"" << std::endl;; 26 ; 27 double minTime = TDatime(minTimeStr.c_str()).Convert();; 28 double maxTime = minTime + 3600.*24*365.25*4; // cover approx 4 years from minimal time; 29 ; 30 auto rdf = rdfb.Define(""datime"", [](const std::string &time){return TDatime(time.c_str()).Convert();}, {""Time""});; 31 ; 32 auto h614 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.14"");}, {""Version""}); 33 .Histo1D({""h614"", ""Download time for version 6.14"", 64, minTime, maxTime}, {""datime""});; 34 ; 35 auto h616 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.16"");}, {""Version""}); 36 .Histo1D({""h616"", ""Download time for version 6.16"", 64, minTime, maxTime}, {""datime""});; 37 ; 38 auto h618 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.18"");}, {""Version""}); 39 .Histo1D({""h618"", ""Downl",MatchSource.WIKI,doc/master/df027__SQliteDependencyOverVersion_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C_source.html
Usability,simpl,simplified,". ROOT: tutorials/dataframe/df027_SQliteDependencyOverVersion.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df027_SQliteDependencyOverVersion.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_dataframe; 3/// \notebook -js; 4/// Plot the ROOT downloads based on the version reading a remote sqlite3 file.; 5///; 6/// This tutorial uses the Reduce method which allows to extract the minimum time; 7/// stored in the SQlite3 database.; 8/// The next step is to create a TH1F Histogram, which will be filled with the values stored in; 9/// two different columns from the database. This procedure is simplified with a lambda; 10/// expression that takes as parameters the values stored in the ""Time"" and ""Version"" columns.; 11///; 12/// \macro_code; 13/// \macro_image; 14///; 15/// \date August 2018; 16/// \authors Alexandra-Maria Dobrescu, Sergey Linev; 17 ; 18 ; 19void df027_SQliteDependencyOverVersion (); 20{; 21 auto rdfb = ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT * FROM accesslog;"");; 22 ; 23 auto minTimeStr = *rdfb.Reduce([](std::string a, std::string b) {return std::min(a, b);}, ""Time"", std::string(""Z""));; 24 ; 25 std::cout << ""Minimum time is '"" << minTimeStr << ""'"" << std::endl;; 26 ; 27 double minTime = TDatime(minTimeStr.c_str()).Convert();; 28 double maxTime = minTime + 3600.*24*365.25*4; // cover approx 4 years from minimal time; 29 ; 30 auto rdf = rdfb.Define(""datime"", [](const std::string &time){return TDatime(time.c_str()).Convert();}, {""Time""});; 31 ; 32 auto h614 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.14"");}, {""Version""}); 33 .Histo1D({""h614"", ""Download time for version 6.14"", 64, minTime, maxTime}, {""datime""});; 34 ; 35 auto h616 = rdf.Filter([](const std::string &v){ return 0 == v.find(""6.16"");}, {""Version""}); 36 .Histo1D({""h616"", ""Download time for version 6.16"", 64, minTime, maxTime}, {""datime""});; 37 ; 38 auto h618 = rdf.",MatchSource.WIKI,doc/master/df027__SQliteDependencyOverVersion_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C_source.html
Availability,down,downloads,". ROOT: tutorials/dataframe/df028_SQliteIPLocation.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df028_SQliteIPLocation.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Plot the location of ROOT downloads reading a remote sqlite3 file. ; The world map is held by a TH2Poly histogram which, after filling, will show the world wide dispersion of ROOT's users. To histogram filling, is done thanks to a lambda expression having as input parameters the two columns of the database: ""IPLongitude' - for the longitude, and the; ""IPLatitude"" - for the latitude.; The data related to the latitude and the longitude has been provided from the; log files storing the users IP.; This product includes GeoLite2 data created by MaxMind, available from; <a href=""http://www.maxmind.com"">http://www.maxmind.com.; ; void df028_SQliteIPLocation() {; ; auto rdf = ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT * FROM accesslog;"");; ; auto f = TFile::Open(""http://root.cern/files/WM.root"");; auto worldMap = f->Get<TH2Poly>(""WMUSA"");; ; auto fillIPLocation = [&worldMap] ( const std::string &sLongitude, const std::string &sLatitude ) {; if (!( sLongitude == """" ) && !( sLatitude == """" )) {; auto latitude = std::stof(sLatitude);; auto longitude = std::stof(sLongitude);; worldMap->Fill(longitude, latitude);; }; };; ; rdf.Foreach( fillIPLocation, { ""IPLongitude"", ""IPLatitude"" } );; ; auto worldMapCanvas = new TCanvas();; worldMapCanvas->SetLogz();; worldMap->SetTitle(""ROOT Downloads per Location (GitHub excluded);Longitude;Latitude"");; worldMap->DrawClone(""colz"");; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH2Poly2D Hist",MatchSource.WIKI,doc/master/df028__SQliteIPLocation_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df028__SQliteIPLocation_8C.html
Security,access,accesslog,"ame/df028_SQliteIPLocation.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df028_SQliteIPLocation.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Plot the location of ROOT downloads reading a remote sqlite3 file. ; The world map is held by a TH2Poly histogram which, after filling, will show the world wide dispersion of ROOT's users. To histogram filling, is done thanks to a lambda expression having as input parameters the two columns of the database: ""IPLongitude' - for the longitude, and the; ""IPLatitude"" - for the latitude.; The data related to the latitude and the longitude has been provided from the; log files storing the users IP.; This product includes GeoLite2 data created by MaxMind, available from; <a href=""http://www.maxmind.com"">http://www.maxmind.com.; ; void df028_SQliteIPLocation() {; ; auto rdf = ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT * FROM accesslog;"");; ; auto f = TFile::Open(""http://root.cern/files/WM.root"");; auto worldMap = f->Get<TH2Poly>(""WMUSA"");; ; auto fillIPLocation = [&worldMap] ( const std::string &sLongitude, const std::string &sLatitude ) {; if (!( sLongitude == """" ) && !( sLatitude == """" )) {; auto latitude = std::stof(sLatitude);; auto longitude = std::stof(sLongitude);; worldMap->Fill(longitude, latitude);; }; };; ; rdf.Foreach( fillIPLocation, { ""IPLongitude"", ""IPLatitude"" } );; ; auto worldMapCanvas = new TCanvas();; worldMapCanvas->SetLogz();; worldMap->SetTitle(""ROOT Downloads per Location (GitHub excluded);Longitude;Latitude"");; worldMap->DrawClone(""colz"");; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH2Poly2D Histogram with Polygonal Bin",MatchSource.WIKI,doc/master/df028__SQliteIPLocation_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df028__SQliteIPLocation_8C.html
Testability,log,log,". ROOT: tutorials/dataframe/df028_SQliteIPLocation.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df028_SQliteIPLocation.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Plot the location of ROOT downloads reading a remote sqlite3 file. ; The world map is held by a TH2Poly histogram which, after filling, will show the world wide dispersion of ROOT's users. To histogram filling, is done thanks to a lambda expression having as input parameters the two columns of the database: ""IPLongitude' - for the longitude, and the; ""IPLatitude"" - for the latitude.; The data related to the latitude and the longitude has been provided from the; log files storing the users IP.; This product includes GeoLite2 data created by MaxMind, available from; <a href=""http://www.maxmind.com"">http://www.maxmind.com.; ; void df028_SQliteIPLocation() {; ; auto rdf = ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT * FROM accesslog;"");; ; auto f = TFile::Open(""http://root.cern/files/WM.root"");; auto worldMap = f->Get<TH2Poly>(""WMUSA"");; ; auto fillIPLocation = [&worldMap] ( const std::string &sLongitude, const std::string &sLatitude ) {; if (!( sLongitude == """" ) && !( sLatitude == """" )) {; auto latitude = std::stof(sLatitude);; auto longitude = std::stof(sLongitude);; worldMap->Fill(longitude, latitude);; }; };; ; rdf.Foreach( fillIPLocation, { ""IPLongitude"", ""IPLatitude"" } );; ; auto worldMapCanvas = new TCanvas();; worldMapCanvas->SetLogz();; worldMap->SetTitle(""ROOT Downloads per Location (GitHub excluded);Longitude;Latitude"");; worldMap->DrawClone(""colz"");; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH2Poly2D Hist",MatchSource.WIKI,doc/master/df028__SQliteIPLocation_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df028__SQliteIPLocation_8C.html
Availability,down,downloads,". ROOT: tutorials/dataframe/df029_SQlitePlatformDistribution.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df029_SQlitePlatformDistribution.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use RDataFrame to display data about ROOT downloads. ; In order to display the Platform Distribution of ROOT, we choose to create two TH1F histograms: one that includes all types of platforms, other filtering and classifying them. This procedure is using a lambda expression taking as parameter the values stored in the ""Platform"" column from the database. At the end, the histograms are filled with their specific demand regarding the platform's type.; ; void df029_SQlitePlatformDistribution() {; ; auto rdf = ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT * FROM accesslog;"");; ; TH1F hRootPlatform(""hrootPlatform"", ""Platform Distribution"", 7, 0, -1);; TH1F hShortRootPlatform(""hShortRootPlatform"", ""Short Platform Distribution"", 7, 0, -1);; ; auto fillRootPlatform = [&hRootPlatform, &hShortRootPlatform] ( const std::string &platform ) {; TString Platform = platform;; TString Platform_0(Platform(0,5));; TString Platform_1(Platform(0,6));; TString Platform_2(Platform(0,8));; ; if ( Platform.Contains(""win32"") ){; hShortRootPlatform.Fill(Platform_0,1);; } else if ( Platform.Contains(""Linux"") ){; hShortRootPlatform.Fill(Platform_0,1);; } else if ( Platform.Contains(""source"") ){; hShortRootPlatform.Fill(Platform_1,1);; } else if ( Platform.Contains(""macosx64"") ){; hShortRootPlatform.Fill(Platform_2,1);; } else if ( Platform.Contains(""IRIX64"") ){; hShortRootPlatform.Fill(Platform_1,1);; }; ; hRootPlatform.Fill(Platform,1);; };; ; rdf.Foreach( fillRootPlatform, { ""Platform"" } );; ; auto c1 = new TCanvas();; c1->SetLogy(1);; hRootPlatform.GetXaxis()->LabelsOption(""a"");; hRootPlatform.LabelsDeflate(""X"");; hRootPlatform.DrawClone();; ; auto c2 = new TCanvas();; hShortRootPlatform.GetXaxis(",MatchSource.WIKI,doc/master/df029__SQlitePlatformDistribution_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df029__SQlitePlatformDistribution_8C.html
Security,access,accesslog,"ference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df029_SQlitePlatformDistribution.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use RDataFrame to display data about ROOT downloads. ; In order to display the Platform Distribution of ROOT, we choose to create two TH1F histograms: one that includes all types of platforms, other filtering and classifying them. This procedure is using a lambda expression taking as parameter the values stored in the ""Platform"" column from the database. At the end, the histograms are filled with their specific demand regarding the platform's type.; ; void df029_SQlitePlatformDistribution() {; ; auto rdf = ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT * FROM accesslog;"");; ; TH1F hRootPlatform(""hrootPlatform"", ""Platform Distribution"", 7, 0, -1);; TH1F hShortRootPlatform(""hShortRootPlatform"", ""Short Platform Distribution"", 7, 0, -1);; ; auto fillRootPlatform = [&hRootPlatform, &hShortRootPlatform] ( const std::string &platform ) {; TString Platform = platform;; TString Platform_0(Platform(0,5));; TString Platform_1(Platform(0,6));; TString Platform_2(Platform(0,8));; ; if ( Platform.Contains(""win32"") ){; hShortRootPlatform.Fill(Platform_0,1);; } else if ( Platform.Contains(""Linux"") ){; hShortRootPlatform.Fill(Platform_0,1);; } else if ( Platform.Contains(""source"") ){; hShortRootPlatform.Fill(Platform_1,1);; } else if ( Platform.Contains(""macosx64"") ){; hShortRootPlatform.Fill(Platform_2,1);; } else if ( Platform.Contains(""IRIX64"") ){; hShortRootPlatform.Fill(Platform_1,1);; }; ; hRootPlatform.Fill(Platform,1);; };; ; rdf.Foreach( fillRootPlatform, { ""Platform"" } );; ; auto c1 = new TCanvas();; c1->SetLogy(1);; hRootPlatform.GetXaxis()->LabelsOption(""a"");; hRootPlatform.LabelsDeflate(""X"");; hRootPlatform.DrawClone();; ; auto c2 = new TCanvas();; hShortRootPlatform.GetXaxis()->LabelsOption(""a"");; hShortRootPlatform.LabelsDeflate(""X"");; hShort",MatchSource.WIKI,doc/master/df029__SQlitePlatformDistribution_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df029__SQlitePlatformDistribution_8C.html
Availability,down,downloads,". ROOT: tutorials/dataframe/df030_SQliteVersionsOfROOT.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df030_SQliteVersionsOfROOT.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Read an sqlite3 databases with RDataFrame and plot statistics on ROOT downloads. ; Plot the downloads of different ROOT versions reading a remote sqlite3 file with RSqliteDS. Then a TH1F histogram is created and filled using a lambda expression which receives the recorded values in the ""version"" column of the sqlite3 database. The histogram shows the usage of the ROOT development version.; ; void df030_SQliteVersionsOfROOT() {; ; auto rdf =; ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT Version FROM accesslog;"");; ; TH1F hVersionOfRoot(""hVersionOfRoot"", ""Development Versions of ROOT"", 8, 0, -1);; ; auto fillVersionHisto = [&hVersionOfRoot] (const std::string &version) {; TString copyVersion = version;; TString shortVersion(copyVersion(0,4));; hVersionOfRoot.Fill(shortVersion, 1);; };; ; rdf.Foreach( fillVersionHisto, { ""Version"" } );; ; auto VersionOfRootHistogram = new TCanvas();; ; gStyle->SetOptStat(0);; hVersionOfRoot.GetXaxis()->LabelsOption(""a"");; hVersionOfRoot.LabelsDeflate(""X"");; hVersionOfRoot.DrawClone("""");; }; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; ROOT::RDF::FromSqliteRDataFrame FromSqlite(std::string_view fileName, std::string_view query)Factory method to create a SQlite RDataFrame.Definition RSqliteDS.cxx:538; . DateAugust 2018 ; AuthorAlexandra-Maria Dobrescu ; Definition in file df030_SQli",MatchSource.WIKI,doc/master/df030__SQliteVersionsOfROOT_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df030__SQliteVersionsOfROOT_8C.html
Security,access,accesslog,". ROOT: tutorials/dataframe/df030_SQliteVersionsOfROOT.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df030_SQliteVersionsOfROOT.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Read an sqlite3 databases with RDataFrame and plot statistics on ROOT downloads. ; Plot the downloads of different ROOT versions reading a remote sqlite3 file with RSqliteDS. Then a TH1F histogram is created and filled using a lambda expression which receives the recorded values in the ""version"" column of the sqlite3 database. The histogram shows the usage of the ROOT development version.; ; void df030_SQliteVersionsOfROOT() {; ; auto rdf =; ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT Version FROM accesslog;"");; ; TH1F hVersionOfRoot(""hVersionOfRoot"", ""Development Versions of ROOT"", 8, 0, -1);; ; auto fillVersionHisto = [&hVersionOfRoot] (const std::string &version) {; TString copyVersion = version;; TString shortVersion(copyVersion(0,4));; hVersionOfRoot.Fill(shortVersion, 1);; };; ; rdf.Foreach( fillVersionHisto, { ""Version"" } );; ; auto VersionOfRootHistogram = new TCanvas();; ; gStyle->SetOptStat(0);; hVersionOfRoot.GetXaxis()->LabelsOption(""a"");; hVersionOfRoot.LabelsDeflate(""X"");; hVersionOfRoot.DrawClone("""");; }; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; ROOT::RDF::FromSqliteRDataFrame FromSqlite(std::string_view fileName, std::string_view query)Factory method to create a SQlite RDataFrame.Definition RSqliteDS.cxx:538; . DateAugust 2018 ; AuthorAlexandra-Maria Dobrescu ; Definition in file df030_SQli",MatchSource.WIKI,doc/master/df030__SQliteVersionsOfROOT_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df030__SQliteVersionsOfROOT_8C.html
Integrability,interface,interface,"No Matches. df031_Stats.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use the Stats action to extract the statistics of a column. ; Extract the statistics relative to RDataFrame columns and store them in TStatistic instances.; ; void df031_Stats() {; ; // Create a data frame and add two columns: one for the values and one for the weight.; ROOT::RDataFrame r(256);; auto rr = r.Define(""v"", [](ULong64_t e){return e;}, {""rdfentry_""}); .Define(""w"", [](ULong64_t e){return 1./(e+1);}, {""v""});; ; // Now extract the statistics, weighted, unweighted - with and without explicit types.; auto stats_eu = rr.Stats<ULong64_t>(""v"");; auto stats_ew = rr.Stats<ULong64_t, double>(""v"", ""w"");; auto stats_iu = rr.Stats(""v"");; auto stats_iw = rr.Stats(""v"", ""w"");; ; // Now print them: they are all identical of course!; stats_eu->Print();; stats_ew->Print();; stats_iu->Print();; stats_iw->Print();; }; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; df031_StatsDefinition df031_Stats.py:1; ; OBJ: TStatistic Mean = 127.5 +- 4.628 RMS = 74.045 Count = 256 Min = 0 Max = 255; OBJ: TStatistic Mean = 40.8 +- 12.86 RMS = 60.318 Count = 256 Min = 0 Max = 255; OBJ: TStatistic Mean = 127.5 +- 4.628 RMS = 74.045 Count = 256 Min = 0 Max = 255; OBJ: TStatistic Mean = 40.8 +- 12.86 RMS = 60.318 Count = 256 Min = 0 Max = 255; DateApril 2019 ; AuthorDanilo Piparo (CERN) ; Definition in file df031_Stats.C. tutorialsdataframedf031_Stats.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df031__Stats_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df031__Stats_8C.html
Integrability,interface,interface,". ROOT: tutorials/dataframe/df031_Stats.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df031_Stats.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use the Stats action to extract the statistics of a column. ; Extract the statistics relative to RDataFrame columns and store them in TStatistic instances.; ; import ROOT; ; # Create a data frame and add two columns: one for the values and one for the weight.; r = ROOT.RDataFrame(256);; rr = r.Define(""v"", ""rdfentry_"")\; .Define(""w"", ""return 1./(v+1)""); ; # Now extract the statistics, weighted, unweighted; stats_iu = rr.Stats(""v""); stats_iw = rr.Stats(""v"", ""w""); ; # Now print them: they are all identical of course!; stats_iu.Print(); stats_iw.Print(); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; OBJ: TStatistic Mean = 127.5 +- 4.628 RMS = 74.045 Count = 256 Min = 0 Max = 255; OBJ: TStatistic Mean = 40.8 +- 12.86 RMS = 60.318 Count = 256 Min = 0 Max = 255; DateApril 2019 ; AuthorDanilo Piparo (CERN) ; Definition in file df031_Stats.py. tutorialsdataframedf031_Stats.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df031__Stats_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df031__Stats_8py.html
Integrability,interface,interface,"nt(shortFormat=True); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; Printvoid Print(GNN_Data &d, std::string txt="""")Definition TMVA_SOFIE_GNN_Application.C:59; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; RangeTa Range(0, 0, 1, 1); Dataframe from TChain Events in file root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root; ; Property Value; -------- -----; Columns in total 6; Columns from defines 0; Event loops run 0; ; Column Type Origin; ------ ---- ------; Muon_charge ROOT::VecOps::RVec<Int_t> Dataset; Muon_eta ROOT::VecOps::RVec<Float_t> Dataset; Muon_mass ROOT::VecOps::RVec<Float_t> Dataset; Muon_phi ROOT::VecOps::RVec<Float_t> Dataset; Muon_pt ROOT::VecOps::RVec<Float_t> Dataset; nMuon UInt_t Dataset; ; Approximate mass of the Z boson: 91.44 GeV; ; Dataframe from TChain Events in file root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root; ; Property Value; -------- -----; Columns in total 7; Columns from defines 1; Event loops run 1; ; Column Type Origin; ------ ---- ----",MatchSource.WIKI,doc/master/df033__Describe_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df033__Describe_8py.html
Integrability,interface,interface,"h_1_2_def < 2"", ""Filter_1_2"").Count();; ; ROOT::RDF::RResultPtr<double> branch2_1 = branch2.Filter(""Branch_2_def < 2"", ""Filter_2""); .Define(""Branch_2_1_def"", ""1""); .Define(""Branch_2_2_def"", ""1""); .Filter(""1 == Branch_2_1_def % 2"", ""Filter_2_1""); .Max(""Branch_2_1_def"");; ; ROOT::RDF::RResultPtr<unsigned long long> branch2_2 = branch2.Count();; ; std::cout << ROOT::RDF::SaveGraph(branch1_1);; ROOT::RDF::SaveGraph(rd1, /*output_file=*/""rdf_savegraph_tutorial.dot"");; // SaveGraph produces content in the standard DOT file format; // (https://en.wikipedia.org/wiki/DOT_%28graph_description_language%29): it can be converted to e.g. an image file; // using standard tools such as the `dot` CLI program.; gSystem->Exec(""dot -Tpng rdf_savegraph_tutorial.dot -o rdf_savegraph_tutorial.png"");; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; ROOT::RDF::RResultPtrSmart pointer for the return type of actions.Definition RResultPtr.hxx:119; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TSystem::Execvirtual Int_t Exec(const char *shellcmd)Execute a command.Definition TSystem.cxx:653; ROOT::RDF::SaveGraphstd::string SaveGraph(NodeType node)Create a graphviz representation of the dataframe computation graph, return it as a string.Definition RDFHelpers.hxx:120; df034_SaveGraphDefinition df034_SaveGraph.py:1; ; digraph {; 8 [label=""Mean"", style=""filled"", fillcolor=""#e47c7e"", shape=""box""];; 6 [label=""Filter_1_1"", style=""filled"", fillcolor=""#0f9d58"", shape=""hexagon""];; 7 [label=""Define\nBranch_1_1_def"", style=""filled"", fillcolor=""#4285f4"", shape=""ellipse""];; 3 [label=""Filter_1"", style=""filled"", fillcolor=""#0f9d58"", shape=""hexagon""];; 4 [label=""Define\nBranch_1_def"", style=""filled"", fillcolor=""#4285f4"", shape=""ellipse""];; 5 [label=""Define\nRoot_def2"", style=""filled"", fillcolor=""#4285f4"", shape=""ellipse""];; 1 [label=""Main_Filter"", style=""filled"", fillcolor=""#0f9d58"", shape=""hexagon""];;",MatchSource.WIKI,doc/master/df034__SaveGraph_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df034__SaveGraph_8C.html
Integrability,interface,interface,"ed as second argument, the graph is saved to that file, otherwise it is returned as a string.; ; import ROOT; ; rd1 = ROOT.RDataFrame(2); ; rd2 = rd1.Define(""Root_def1"", ""1"") \; .Filter(""Root_def1 < 2"", ""Main_Filter"") \; .Define(""Root_def2"", ""1""); ; branch1 = rd2.Define(""Branch_1_def"", ""1""); branch2 = rd2.Define(""Branch_2_def"", ""1""); ; branch1_1 = branch1.Filter(""Branch_1_def < 2"", ""Filter_1"") \; .Define(""Branch_1_1_def"", ""1"") \; .Filter(""1 == Branch_1_1_def % 2"", ""Filter_1_1"") \; .Mean(""Branch_1_1_def"");; ; branch1_2 = branch1.Define(""Branch_1_2_def"", ""1"") \; .Filter(""Branch_1_2_def < 2"", ""Filter_1_2"") \; .Count(); ; branch2_1 = branch2.Filter(""Branch_2_def < 2"", ""Filter_2"") \; .Define(""Branch_2_1_def"", ""1"") \; .Define(""Branch_2_2_def"", ""1"") \; .Filter(""1 == Branch_2_1_def % 2"", ""Filter_2_1"") \; .Max(""Branch_2_1_def""); ; branch2_2 = branch2.Count(); ; print(ROOT.RDF.SaveGraph(branch1_1)); ROOT.RDF.SaveGraph(rd1, ""exampleGraph.dot""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::SaveGraphstd::string SaveGraph(NodeType node)Create a graphviz representation of the dataframe computation graph, return it as a string.Definition RDFHelpers.hxx:120; digraph {; 8 [label=""Mean"", style=""filled"", fillcolor=""#e47c7e"", shape=""box""];; 6 [label=""Filter_1_1"", style=""filled"", fillcolor=""#0f9d58"", shape=""hexagon""];; 7 [label=""Define\nBranch_1_1_def"", style=""filled"", fillcolor=""#4285f4"", shape=""ellipse""];; 3 [label=""Filter_1"", style=""filled"", fillcolor=""#0f9d58"", shape=""hexagon""];; 4 [label=""Define\nBranch_1_def"", style=""filled"", fillcolor=""#4285f4"", shape=""ellipse""];; 5 [label=""Define\nRoot_def2"", style=""filled"", fillcolor=""#4285f4"", shape=""ellipse""];; 1 [label=""Main_Filter"", style=""filled"", fillcolor=""#0f9d58"", shape=""hexagon""];; 2 [label=""Define\nRoot_def1"", style=""filled"", fillcolor=""#4285f4"", shape=""ellipse""];; 0 [label=""Empty source\nEntries: 2"", style=""filled"", fillcolor=",MatchSource.WIKI,doc/master/df034__SaveGraph_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df034__SaveGraph_8py.html
Integrability,interface,interface,"(""y"", defaultValue); .Display<int, int>({""x"", ""y""}, /*nRows*/ 15);; ; // Example 2: provide a default value for branch y, but skip events where; // branch x is missing; auto display2 =; df.DefaultValueFor(""y"", defaultValue).FilterAvailable(""x"").Display<int, int>({""x"", ""y""}, /*nRows*/ 15);; ; // Example 3: only keep events where branch y is missing and display values for branch x; auto display3 = df.FilterMissing(""y"").Display<int>({""x""}, /*nRows*/ 15);; ; std::cout << ""Example 1: provide a default value for all missing branches\n"";; display1->Print();; ; std::cout << ""Example 2: provide a default value for branch y, but skip events where branch x is missing\n"";; display2->Print();; ; std::cout << ""Example 3: only keep events where branch y is missing and display values for branch x\n"";; display3->Print();; }; RDataFrame.hxx; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; TChain.h; TFile.h; TTree.h; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TChain::Addvirtual Int_t Add(TChain *chain)Add all files referenced by the passed chain to this chain.Definition TChain.cxx:219; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; df036_missingBranchesDefinition df036_missingBranches.py:1; ; Example 1: provide a default value for all missing branches; +-----+-------------+-------------+; | Row | x | y | ; +-----+-------------+-------------+; | 0 | 1 | 2 | ; +-----+-------------+-------------+; | 1 | 2 | 4 | ; +-----+-------------+-------------+; | 2 | 3 | 6 | ; +-----+-------------+-------------+; | 3 | 4 | 8 | ; +-----+-------------+--",MatchSource.WIKI,doc/master/df036__missingBranches_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df036__missingBranches_8C.html
Integrability,interface,interface," a default value for those; auto display2 = df.DefaultValueFor(auxTree2ColIdx, defaultValue); .DefaultValueFor(auxTree2ColZ, defaultValue); .FilterAvailable(auxTree1ColY); .Display<int, int, int, int, int, int>(; {""idx"", auxTree1ColIdx, auxTree2ColIdx, ""x"", auxTree1ColY, auxTree2ColZ});; ; // Example 3: Keep entries from the main tree for which there is no; // corresponding match in entries of the first auxiliary tree; auto display3 = df.FilterMissing(auxTree1ColIdx).Display<int, int>({""idx"", ""x""});; ; std::cout << ""Example 1: provide default values for all columns\n"";; display1->Print();; std::cout << ""Example 2: skip the entry only when the first auxiliary tree does not match\n"";; display2->Print();; std::cout << ""Example 3: keep entries from the main tree for which there is no match in the auxiliary tree\n"";; display3->Print();; }; RDataFrame.hxx; f#define f(i)Definition RSha256.hxx:104; TChain.h; TFile.h; TTreeIndex.h; TTree.h; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMVA_SOFIE_GNN_Parser.datasetlist datasetDefinition TMVA_SOFIE_GNN_Parser.py:190; df037_TTreeEventMatchingDefinition df037_TTreeEventMatching.py:1; ; Example 1: provide default values for all columns; +-----+-----+---------------+---------------+---+-------------+-------------+; | Row | idx | auxdata_1.idx | auxdata_2.idx | x | auxdata_1.y | auxdata_2.z | ; +-----+-----+---------------+---------------+---+-------------+-------------+; | 0 | 1 | 1 | 1 | 1 | 4 | 6 | ; +-----+-----+---------------+---------------+---+-------------+--------",MatchSource.WIKI,doc/master/df037__TTreeEventMatching_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df037__TTreeEventMatching_8C.html
Integrability,interface,interface,"ot-eos/h1/dstarmb.root"");; chain.Add(""root://eospublic.cern.ch//eos/root-eos/h1/dstarp1a.root"");; chain.Add(""root://eospublic.cern.ch//eos/root-eos/h1/dstarp1b.root"");; chain.Add(""root://eospublic.cern.ch//eos/root-eos/h1/dstarp2.root"");; ; ROOT::EnableImplicitMT(4);; ; ROOT::RDataFrame dataFrame(chain);; auto selected = Select(dataFrame);; // Note: The title syntax is ""<Title>;<Label x axis>;<Label y axis>""; auto hdmdARP = selected.Histo1D({""hdmd"", ""Dm_d;m_{K#pi#pi} - m_{K#pi}[GeV/c^{2}]"", 40, 0.13, 0.17}, ""dm_d"");; auto selectedAddedBranch = selected.Define(""h2_y"", ""rpd0_t / 0.029979f * 1.8646f / ptd0_d"");; auto h2ARP = selectedAddedBranch.Histo2D({""h2"", ""ptD0 vs Dm_d"", 30, 0.135, 0.165, 30, -3, 6}, ""dm_d"", ""h2_y"");; ; FitAndPlotHdmd(*hdmdARP);; FitAndPlotH2(*h2ARP);; }; Double_tdouble Double_tDefinition RtypesCore.h:59; gDirectory#define gDirectoryDefinition TDirectory.h:384; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVec< int >; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TF11-Dim function classDefinition TF1.h:233; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::DrawClonevirtual TObject * DrawClone(Option_t *option="""") constDraw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1).Definition TObject.cxx:305; TO",MatchSource.WIKI,doc/master/df101__h1Analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df101__h1Analysis_8C.html
Performance,multi-thread,multi-threading,"r to create a simple line.Definition TLine.h:22; TObject::DrawClonevirtual TObject * DrawClone(Option_t *option="""") constDraw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1).Definition TObject.cxx:305; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::VecOps::powRVec< PromoteTypes< T0, T1 > > pow(const T0 &x, const RVec< T1 > &v)Definition RVec.hxx:1846; ROOT::VecOps::expRVec< PromoteType< T > > exp(const RVec< T > &v)Definition RVec.hxx:1837; ROOT::VecOps::FilterRVec< T > Filter(const RVec< T > &v, F &&f)Create a new collection with the elements passing the filter expressed by the predicate.Definition RVec.hxx:2182; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; dxbinconst Double_t dxbinDefinition h1analysisProxy.h:10; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; . DateDecember 2016 ; AuthorsAxel Naumann, Danilo Piparo (CERN) ; Definition in file df101_h1Analysis.C. tutorialsdataframedf101_h1Analysis.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df101__h1Analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df101__h1Analysis_8C.html
Testability,log,loglikelihood,"r(""njets >= 1"");; ; return ret;; };; ; const Double_t dxbin = (0.17 - 0.13) / 40; // Bin-width; ; Double_t fdm5(Double_t *xx, Double_t *par); {; Double_t x = xx[0];; if (x <= 0.13957); return 0;; Double_t xp3 = (x - par[3]) * (x - par[3]);; Double_t res =; dxbin * (par[0] * pow(x - 0.13957, par[1]) + par[2] / 2.5066 / par[4] * exp(-xp3 / 2 / par[4] / par[4]));; return res;; }; ; Double_t fdm2(Double_t *xx, Double_t *par); {; static const Double_t sigma = 0.0012;; Double_t x = xx[0];; if (x <= 0.13957); return 0;; Double_t xp3 = (x - 0.1454) * (x - 0.1454);; Double_t res = dxbin * (par[0] * pow(x - 0.13957, 0.25) + par[1] / 2.5066 / sigma * exp(-xp3 / 2 / sigma / sigma));; return res;; }; ; void FitAndPlotHdmd(TH1 &hdmd); {; // create the canvas for the h1analysis fit; gStyle->SetOptFit();; auto c1 = new TCanvas(""c1"", ""h1analysis analysis"", 10, 10, 800, 600);; ; hdmd.GetXaxis()->SetTitleOffset(1.4);; ; auto hdraw = (TH1 *) hdmd.DrawClone();; ; // fit histogram hdmd with function f5 using the loglikelihood option; auto f5 = new TF1(""f5"", fdm5, 0.139, 0.17, 5);; f5->SetParameters(1000000, .25, 2000, .1454, .001);; hdraw->Fit(""f5"", ""lr"");; }; ; void FitAndPlotH2(TH2 &h2); {; // create the canvas for tau d0; auto c2 = new TCanvas(""c2"", ""tauD0"", 100, 100, 800, 600);; ; c2->SetGrid();; c2->SetBottomMargin(0.15);; ; // Project slices of 2-d histogram h2 along X , then fit each slice; // with function f2 and make a histogram for each fit parameter; // Note that the generated histograms are added to the list of objects; // in the current directory.; auto f2 = new TF1(""f2"", fdm2, 0.139, 0.17, 2);; f2->SetParameters(10000, 10);; h2.FitSlicesX(f2, 0, -1, 1, ""qln"");; ; // See TH2::FitSlicesX documentation why h2_1 name is used; auto h2_1 = (TH1D *)gDirectory->Get(""h2_1"");; h2_1->SetDirectory(nullptr);; h2_1->GetXaxis()->SetTitle(""#tau [ps]"");; h2_1->SetMarkerStyle(21);; h2_1->Draw();; c2->Update();; ; auto line = new TLine(0, 0, 0, c2->GetUymax());; line->Draw();; }; ; void df101_",MatchSource.WIKI,doc/master/df101__h1Analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df101__h1Analysis_8C.html
Usability,simpl,simple,"; FitAndPlotH2(*h2ARP);; }; Double_tdouble Double_tDefinition RtypesCore.h:59; gDirectory#define gDirectoryDefinition TDirectory.h:384; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVec< int >; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TF11-Dim function classDefinition TF1.h:233; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::DrawClonevirtual TObject * DrawClone(Option_t *option="""") constDraw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1).Definition TObject.cxx:305; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::VecOps::powRVec< PromoteTypes< T0, T1 > > pow(const T0 &x, const RVec< T1 > &v)Definition RVec.hxx:1846; ROOT::VecOps::expRVec< PromoteType< T > > exp(const RVec< T > &v)Definition RVec.hxx:1837; ROOT::VecOps::FilterRVec< T > Filter(const RVec< T > &v, F &&f)Create a new collection with the elements passing the filter expressed by the predicate.Definition RVec.hxx:2182; fdm5Double_t fdm5(Double_t *xx, ",MatchSource.WIKI,doc/master/df101__h1Analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df101__h1Analysis_8C.html
Energy Efficiency,charge,charge,"vents from CMS OpenData containing muon candidates part of 2012 dataset (DOI: 10.7483/OPENDATA.CMS.YLIC.86ZZ and DOI: 10.7483/OPENDATA.CMS.M5AD.Y3V3). The macro matches muon pairs and produces an histogram of the dimuon mass spectrum showing resonances up to the Z mass. Note that the bump at 30 GeV is not a resonance but a trigger effect.; More details about the dataset can be found on the CERN Open Data portal. ; #include ""ROOT/RDataFrame.hxx""; #include ""ROOT/RDFHelpers.hxx""; #include ""ROOT/RVec.hxx""; #include ""TCanvas.h""; #include ""TH1D.h""; #include ""TLatex.h""; #include ""TStyle.h""; ; using namespace ROOT::VecOps;; ; void df102_NanoAODDimuonAnalysis(); {; // Enable multi-threading; ROOT::EnableImplicitMT();; ; // Create dataframe from NanoAOD files; ROOT::RDataFrame df(""Events"", ""root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/""; ""Run2012BC_DoubleMuParked_Muons.root"");; ; // Add ProgressBar; ROOT::RDF::Experimental::AddProgressBar(df);; ; // For simplicity, select only events with exactly two muons and require opposite charge; auto df_2mu = df.Filter(""nMuon == 2"", ""Events with exactly two muons"");; auto df_os = df_2mu.Filter(""Muon_charge[0] != Muon_charge[1]"", ""Muons with opposite charge"");; ; // Compute invariant mass of the dimuon system; auto df_mass = df_os.Define(""Dimuon_mass"", InvariantMass<float>, {""Muon_pt"", ""Muon_eta"", ""Muon_phi"", ""Muon_mass""});; ; // Make histogram of dimuon mass spectrum. Note how we can set title and axis labels in one go; auto h = df_mass.Histo1D({""Dimuon_mass"", ""Dimuon mass;m_{#mu#mu} (GeV);N_{Events}"", 30000, 0.25, 300}, ""Dimuon_mass"");; ; // Request cut-flow report; auto report = df.Report();; ; // Produce plot; gStyle->SetOptStat(0); gStyle->SetTextFont(42);; auto c = new TCanvas(""c"", """", 800, 700);; c->SetLogx(); c->SetLogy();; ; h->GetXaxis()->SetTitleSize(0.04);; h->GetYaxis()->SetTitleSize(0.04);; h->DrawClone();; ; TLatex label; label.SetNDC(true);; label.DrawLatex(0.175, 0.740, ""#eta"");; label.",MatchSource.WIKI,doc/master/df102__NanoAODDimuonAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8C.html
Integrability,interface,interface,"etTitleSize(0.04);; h->DrawClone();; ; TLatex label; label.SetNDC(true);; label.DrawLatex(0.175, 0.740, ""#eta"");; label.DrawLatex(0.205, 0.775, ""#rho,#omega"");; label.DrawLatex(0.270, 0.740, ""#phi"");; label.DrawLatex(0.400, 0.800, ""J/#psi"");; label.DrawLatex(0.415, 0.670, ""#psi'"");; label.DrawLatex(0.485, 0.700, ""Y(1,2,3S)"");; label.DrawLatex(0.755, 0.680, ""Z"");; label.SetTextSize(0.040); label.DrawLatex(0.100, 0.920, ""#bf{CMS Open Data}"");; label.SetTextSize(0.030); label.DrawLatex(0.630, 0.920, ""#sqrt{s} = 8 TeV, L_{int} = 11.6 fb^{-1}"");; ; c->SaveAs(""dimuon_spectrum.pdf"");; ; // Print cut-flow report; report->Print();; }; ; int main(); {; df102_NanoAODDimuonAnalysis();; }; mainint main()Definition Prototype.cxx:12; RDFHelpers.hxx; RDataFrame.hxx; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; RVec.hxx; TCanvas.h; TH1D.h; TLatex.h; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TObject::SaveAsvirtual void SaveAs(const char *filename="""", Option_t *option="""") constSave this object in the file specified by filename.Definition TObject.cxx:692; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TText::SetNDCvirtual void SetNDC(Bool_t isNDC=kTRUE)Set NDC mo",MatchSource.WIKI,doc/master/df102__NanoAODDimuonAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8C.html
Performance,multi-thread,multi-threading,"tches. df102_NanoAODDimuonAnalysis.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Show how NanoAOD files can be processed with RDataFrame. ; This tutorial illustrates how NanoAOD files can be processed with ROOT dataframes. The NanoAOD-like input files are filled with 66 mio. events from CMS OpenData containing muon candidates part of 2012 dataset (DOI: 10.7483/OPENDATA.CMS.YLIC.86ZZ and DOI: 10.7483/OPENDATA.CMS.M5AD.Y3V3). The macro matches muon pairs and produces an histogram of the dimuon mass spectrum showing resonances up to the Z mass. Note that the bump at 30 GeV is not a resonance but a trigger effect.; More details about the dataset can be found on the CERN Open Data portal. ; #include ""ROOT/RDataFrame.hxx""; #include ""ROOT/RDFHelpers.hxx""; #include ""ROOT/RVec.hxx""; #include ""TCanvas.h""; #include ""TH1D.h""; #include ""TLatex.h""; #include ""TStyle.h""; ; using namespace ROOT::VecOps;; ; void df102_NanoAODDimuonAnalysis(); {; // Enable multi-threading; ROOT::EnableImplicitMT();; ; // Create dataframe from NanoAOD files; ROOT::RDataFrame df(""Events"", ""root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/""; ""Run2012BC_DoubleMuParked_Muons.root"");; ; // Add ProgressBar; ROOT::RDF::Experimental::AddProgressBar(df);; ; // For simplicity, select only events with exactly two muons and require opposite charge; auto df_2mu = df.Filter(""nMuon == 2"", ""Events with exactly two muons"");; auto df_os = df_2mu.Filter(""Muon_charge[0] != Muon_charge[1]"", ""Muons with opposite charge"");; ; // Compute invariant mass of the dimuon system; auto df_mass = df_os.Define(""Dimuon_mass"", InvariantMass<float>, {""Muon_pt"", ""Muon_eta"", ""Muon_phi"", ""Muon_mass""});; ; // Make histogram of dimuon mass spectrum. Note how we can set title and axis labels in one go; auto h = df_mass.Histo1D({""Dimuon_mass"", ""Dimuon mass;m_{#mu#mu} (GeV);N_{Events}"", 30000, 0.25, 300}, ""Dimuon_mass"");; ; // Request cut-flow report; auto report = df.Report();; ; // Produc",MatchSource.WIKI,doc/master/df102__NanoAODDimuonAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8C.html
Usability,simpl,simplicity,"vents from CMS OpenData containing muon candidates part of 2012 dataset (DOI: 10.7483/OPENDATA.CMS.YLIC.86ZZ and DOI: 10.7483/OPENDATA.CMS.M5AD.Y3V3). The macro matches muon pairs and produces an histogram of the dimuon mass spectrum showing resonances up to the Z mass. Note that the bump at 30 GeV is not a resonance but a trigger effect.; More details about the dataset can be found on the CERN Open Data portal. ; #include ""ROOT/RDataFrame.hxx""; #include ""ROOT/RDFHelpers.hxx""; #include ""ROOT/RVec.hxx""; #include ""TCanvas.h""; #include ""TH1D.h""; #include ""TLatex.h""; #include ""TStyle.h""; ; using namespace ROOT::VecOps;; ; void df102_NanoAODDimuonAnalysis(); {; // Enable multi-threading; ROOT::EnableImplicitMT();; ; // Create dataframe from NanoAOD files; ROOT::RDataFrame df(""Events"", ""root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/""; ""Run2012BC_DoubleMuParked_Muons.root"");; ; // Add ProgressBar; ROOT::RDF::Experimental::AddProgressBar(df);; ; // For simplicity, select only events with exactly two muons and require opposite charge; auto df_2mu = df.Filter(""nMuon == 2"", ""Events with exactly two muons"");; auto df_os = df_2mu.Filter(""Muon_charge[0] != Muon_charge[1]"", ""Muons with opposite charge"");; ; // Compute invariant mass of the dimuon system; auto df_mass = df_os.Define(""Dimuon_mass"", InvariantMass<float>, {""Muon_pt"", ""Muon_eta"", ""Muon_phi"", ""Muon_mass""});; ; // Make histogram of dimuon mass spectrum. Note how we can set title and axis labels in one go; auto h = df_mass.Histo1D({""Dimuon_mass"", ""Dimuon mass;m_{#mu#mu} (GeV);N_{Events}"", 30000, 0.25, 300}, ""Dimuon_mass"");; ; // Request cut-flow report; auto report = df.Report();; ; // Produce plot; gStyle->SetOptStat(0); gStyle->SetTextFont(42);; auto c = new TCanvas(""c"", """", 800, 700);; c->SetLogx(); c->SetLogy();; ; h->GetXaxis()->SetTitleSize(0.04);; h->GetYaxis()->SetTitleSize(0.04);; h->DrawClone();; ; TLatex label; label.SetNDC(true);; label.DrawLatex(0.175, 0.740, ""#eta"");; label.",MatchSource.WIKI,doc/master/df102__NanoAODDimuonAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8C.html
Energy Efficiency,charge,charge,"sis.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Show how NanoAOD files can be processed with RDataFrame. ; This tutorial illustrates how NanoAOD files can be processed with ROOT dataframes. The NanoAOD-like input files are filled with 66 mio. events from CMS OpenData containing muon candidates part of 2012 dataset (DOI: 10.7483/OPENDATA.CMS.YLIC.86ZZ and DOI: 10.7483/OPENDATA.CMS.M5AD.Y3V3). The macro matches muon pairs and produces an histogram of the dimuon mass spectrum showing resonances up to the Z mass. Note that the bump at 30 GeV is not a resonance but a trigger effect.; More details about the dataset can be found on the CERN Open Data portal. ; import ROOT; ; # Enable multi-threading; ROOT.ROOT.EnableImplicitMT(); ; # Create dataframe from NanoAOD files; df = ROOT.RDataFrame(""Events"", ""root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root""); ; # For simplicity, select only events with exactly two muons and require opposite charge; df_2mu = df.Filter(""nMuon == 2"", ""Events with exactly two muons""); df_os = df_2mu.Filter(""Muon_charge[0] != Muon_charge[1]"", ""Muons with opposite charge""); ; # Compute invariant mass of the dimuon system; df_mass = df_os.Define(""Dimuon_mass"", ""InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)""); ; # Make histogram of dimuon mass spectrum. Note how we can set titles and axis labels in one go.; h = df_mass.Histo1D((""Dimuon_mass"", ""Dimuon mass;m_{#mu#mu} (GeV);N_{Events}"", 30000, 0.25, 300), ""Dimuon_mass""); ; # Request cut-flow report; report = df_mass.Report(); ; # Produce plot; ROOT.gStyle.SetOptStat(0); ROOT.gStyle.SetTextFont(42); c = ROOT.TCanvas(""c"", """", 800, 700); c.SetLogx(); c.SetLogy(); ; h.SetTitle(""""); h.GetXaxis().SetTitleSize(0.04); h.GetYaxis().SetTitleSize(0.04); h.Draw(); ; label = ROOT.TLatex(); label.SetNDC(True); label.DrawLatex(0.175, 0.740, ""#eta""); label.DrawLatex(0.205, 0.775, ""#rho,#omega""); label.DrawLatex(0.270, 0.7",MatchSource.WIKI,doc/master/df102__NanoAODDimuonAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8py.html
Integrability,interface,interface,"ire opposite charge; df_2mu = df.Filter(""nMuon == 2"", ""Events with exactly two muons""); df_os = df_2mu.Filter(""Muon_charge[0] != Muon_charge[1]"", ""Muons with opposite charge""); ; # Compute invariant mass of the dimuon system; df_mass = df_os.Define(""Dimuon_mass"", ""InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)""); ; # Make histogram of dimuon mass spectrum. Note how we can set titles and axis labels in one go.; h = df_mass.Histo1D((""Dimuon_mass"", ""Dimuon mass;m_{#mu#mu} (GeV);N_{Events}"", 30000, 0.25, 300), ""Dimuon_mass""); ; # Request cut-flow report; report = df_mass.Report(); ; # Produce plot; ROOT.gStyle.SetOptStat(0); ROOT.gStyle.SetTextFont(42); c = ROOT.TCanvas(""c"", """", 800, 700); c.SetLogx(); c.SetLogy(); ; h.SetTitle(""""); h.GetXaxis().SetTitleSize(0.04); h.GetYaxis().SetTitleSize(0.04); h.Draw(); ; label = ROOT.TLatex(); label.SetNDC(True); label.DrawLatex(0.175, 0.740, ""#eta""); label.DrawLatex(0.205, 0.775, ""#rho,#omega""); label.DrawLatex(0.270, 0.740, ""#phi""); label.DrawLatex(0.400, 0.800, ""J/#psi""); label.DrawLatex(0.415, 0.670, ""#psi'""); label.DrawLatex(0.485, 0.700, ""Y(1,2,3S)""); label.DrawLatex(0.755, 0.680, ""Z""); label.SetTextSize(0.040); label.DrawLatex(0.100, 0.920, ""#bf{CMS Open Data}""); label.SetTextSize(0.030); label.DrawLatex(0.630, 0.920, ""#sqrt{s} = 8 TeV, L_{int} = 11.6 fb^{-1}""); ; c.SaveAs(""dimuon_spectrum.pdf""); ; # Print cut-flow report; report.Print(); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %; Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %; DateApril 2019 ; AuthorStefan Wunsch (KIT, CERN) ; Definition in file df102_NanoAODDimuonAnalysis.py. tutorialsdataframedf102_NanoAODDimuonAnalysis.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df102__NanoAODDimuonAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8py.html
Performance,multi-thread,multi-threading,". ROOT: tutorials/dataframe/df102_NanoAODDimuonAnalysis.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df102_NanoAODDimuonAnalysis.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Show how NanoAOD files can be processed with RDataFrame. ; This tutorial illustrates how NanoAOD files can be processed with ROOT dataframes. The NanoAOD-like input files are filled with 66 mio. events from CMS OpenData containing muon candidates part of 2012 dataset (DOI: 10.7483/OPENDATA.CMS.YLIC.86ZZ and DOI: 10.7483/OPENDATA.CMS.M5AD.Y3V3). The macro matches muon pairs and produces an histogram of the dimuon mass spectrum showing resonances up to the Z mass. Note that the bump at 30 GeV is not a resonance but a trigger effect.; More details about the dataset can be found on the CERN Open Data portal. ; import ROOT; ; # Enable multi-threading; ROOT.ROOT.EnableImplicitMT(); ; # Create dataframe from NanoAOD files; df = ROOT.RDataFrame(""Events"", ""root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root""); ; # For simplicity, select only events with exactly two muons and require opposite charge; df_2mu = df.Filter(""nMuon == 2"", ""Events with exactly two muons""); df_os = df_2mu.Filter(""Muon_charge[0] != Muon_charge[1]"", ""Muons with opposite charge""); ; # Compute invariant mass of the dimuon system; df_mass = df_os.Define(""Dimuon_mass"", ""InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)""); ; # Make histogram of dimuon mass spectrum. Note how we can set titles and axis labels in one go.; h = df_mass.Histo1D((""Dimuon_mass"", ""Dimuon mass;m_{#mu#mu} (GeV);N_{Events}"", 30000, 0.25, 300), ""Dimuon_mass""); ; # Request cut-flow report; report = df_mass.Report(); ; # Produce plot; ROOT.gStyle.SetOptStat(0); ROOT.gStyle.SetTextFont(42); c = ROOT.TCanvas(""c"", """", 800, 700); c.SetLogx(); c.SetLogy(); ; h.SetTitle(""""); h.GetXaxis().SetTitleSize(0.04); h.GetY",MatchSource.WIKI,doc/master/df102__NanoAODDimuonAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8py.html
Usability,simpl,simplicity,"sis.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Show how NanoAOD files can be processed with RDataFrame. ; This tutorial illustrates how NanoAOD files can be processed with ROOT dataframes. The NanoAOD-like input files are filled with 66 mio. events from CMS OpenData containing muon candidates part of 2012 dataset (DOI: 10.7483/OPENDATA.CMS.YLIC.86ZZ and DOI: 10.7483/OPENDATA.CMS.M5AD.Y3V3). The macro matches muon pairs and produces an histogram of the dimuon mass spectrum showing resonances up to the Z mass. Note that the bump at 30 GeV is not a resonance but a trigger effect.; More details about the dataset can be found on the CERN Open Data portal. ; import ROOT; ; # Enable multi-threading; ROOT.ROOT.EnableImplicitMT(); ; # Create dataframe from NanoAOD files; df = ROOT.RDataFrame(""Events"", ""root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root""); ; # For simplicity, select only events with exactly two muons and require opposite charge; df_2mu = df.Filter(""nMuon == 2"", ""Events with exactly two muons""); df_os = df_2mu.Filter(""Muon_charge[0] != Muon_charge[1]"", ""Muons with opposite charge""); ; # Compute invariant mass of the dimuon system; df_mass = df_os.Define(""Dimuon_mass"", ""InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)""); ; # Make histogram of dimuon mass spectrum. Note how we can set titles and axis labels in one go.; h = df_mass.Histo1D((""Dimuon_mass"", ""Dimuon mass;m_{#mu#mu} (GeV);N_{Events}"", 30000, 0.25, 300), ""Dimuon_mass""); ; # Request cut-flow report; report = df_mass.Report(); ; # Produce plot; ROOT.gStyle.SetOptStat(0); ROOT.gStyle.SetTextFont(42); c = ROOT.TCanvas(""c"", """", 800, 700); c.SetLogx(); c.SetLogy(); ; h.SetTitle(""""); h.GetXaxis().SetTitleSize(0.04); h.GetYaxis().SetTitleSize(0.04); h.Draw(); ; label = ROOT.TLatex(); label.SetNDC(True); label.DrawLatex(0.175, 0.740, ""#eta""); label.DrawLatex(0.205, 0.775, ""#rho,#omega""); label.DrawLatex(0.270, 0.7",MatchSource.WIKI,doc/master/df102__NanoAODDimuonAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8py.html
Availability,avail,available,"co; .Define(""weight"", [&] { return luminosity * xsec_SMHiggsToZZTo4L / nevt_SMHiggsToZZTo4L; }); .Histo1D({""h_sig_2el2mu"", """", nbins, 70, 180}, ""H_mass"", ""weight"");; ; const auto xsec_ZZTo2el2mu = 0.18; // ZZ->2el2mu: Standard Model cross-section; const auto nevt_ZZTo2el2mu = 1497445.0; // ZZ->2el2mu: Number of simulated events; auto df_bkg_2el2mu_reco = reco_higgs_to_2el2mu(df_bkg_2el2mu);; auto df_h_bkg_2el2mu = df_bkg_2el2mu_reco; .Define(""weight"", [&] { return luminosity * xsec_ZZTo2el2mu * scale_ZZTo4l / nevt_ZZTo2el2mu; }); .Histo1D({""h_bkg_2el2mu"", """", nbins, 70, 180}, ""H_mass"", ""weight"");; ; auto df_data_2el2mu_reco = reco_higgs_to_2el2mu(df_data_doublemu);; auto df_h_data_2el2mu = df_data_2el2mu_reco.Define(""weight"", [] { return 1.0; }); .Histo1D({""h_data_2el2mu_doublemu"", """", nbins, 70, 180}, ""H_mass"", ""weight"");; ; // RunGraphs allows to run the event loops of the separate RDataFrame graphs; // concurrently. This results in an improved usage of the available resources; // if each separate RDataFrame can not utilize all available resources, e.g.,; // because not enough data is available.; ROOT::RDF::RunGraphs({df_h_sig_4mu, df_h_bkg_4mu, df_h_data_4mu,; df_h_sig_4el, df_h_bkg_4el, df_h_data_4el,; df_h_sig_2el2mu, df_h_bkg_2el2mu, df_h_data_2el2mu});; ; // Make plots; plot(df_h_sig_4mu, df_h_bkg_4mu, df_h_data_4mu, ""m_{4#mu} (GeV)"", ""higgs_4mu.pdf"");; plot(df_h_sig_4el, df_h_bkg_4el, df_h_data_4el, ""m_{4e} (GeV)"", ""higgs_4el.pdf"");; plot(df_h_sig_2el2mu, df_h_bkg_2el2mu, df_h_data_2el2mu, ""m_{2e2#mu} (GeV)"", ""higgs_2el2mu.pdf"");; ; // Combine channels for final plot; auto h_data_4l = df_h_data_4mu.GetPtr();; h_data_4l->Add(df_h_data_4el.GetPtr());; h_data_4l->Add(df_h_data_2el2mu.GetPtr());; auto h_sig_4l = df_h_sig_4mu.GetPtr();; h_sig_4l->Add(df_h_sig_4el.GetPtr());; h_sig_4l->Add(df_h_sig_2el2mu.GetPtr());; auto h_bkg_4l = df_h_bkg_4mu.GetPtr();; h_bkg_4l->Add(df_h_bkg_4el.GetPtr());; h_bkg_4l->Add(df_h_bkg_2el2mu.GetPtr());; plot(h_sig_4l, h_bkg_4l, h_da",MatchSource.WIKI,doc/master/df103__NanoAODHiggsAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8C.html
Deployability,integrat,integrated,"ulti-threading; ROOT::EnableImplicitMT();; ; // In fast mode, take samples from */cms_opendata_2012_nanoaod_skimmed/*, which has; // the preselections from the selection_* functions already applied.; std::string path = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/"";; if (run_fast) path = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod_skimmed/"";; ; // Create dataframes for signal, background and data samples; ; // Signal: Higgs -> 4 leptons; ROOT::RDataFrame df_sig_4l(""Events"", path + ""SMHiggsToZZTo4L.root"");; ; // Background: ZZ -> 4 leptons; // Note that additional background processes from the original paper with minor contribution were left out for this; // tutorial.; ROOT::RDataFrame df_bkg_4mu(""Events"", path + ""ZZTo4mu.root"");; ROOT::RDataFrame df_bkg_4el(""Events"", path + ""ZZTo4e.root"");; ROOT::RDataFrame df_bkg_2el2mu(""Events"", path + ""ZZTo2e2mu.root"");; ; // CMS data taken in 2012 (11.6 fb^-1 integrated luminosity); ROOT::RDataFrame df_data_doublemu(; ""Events"", {path + ""Run2012B_DoubleMuParked.root"", path + ""Run2012C_DoubleMuParked.root""});; ROOT::RDataFrame df_data_doubleel(; ""Events"", {path + ""Run2012B_DoubleElectron.root"", path + ""Run2012C_DoubleElectron.root""});; ; // Reconstruct Higgs to 4 muons; auto df_sig_4mu_reco = reco_higgs_to_4mu(df_sig_4l);; const auto luminosity = 11580.0; // Integrated luminosity of the data samples; const auto xsec_SMHiggsToZZTo4L = 0.0065; // H->4l: Standard Model cross-section; const auto nevt_SMHiggsToZZTo4L = 299973.0; // H->4l: Number of simulated events; const auto nbins = 36; // Number of bins for the invariant mass spectrum; auto df_h_sig_4mu = df_sig_4mu_reco; .Define(""weight"", [&] { return luminosity * xsec_SMHiggsToZZTo4L / nevt_SMHiggsToZZTo4L; }); .Histo1D({""h_sig_4mu"", """", nbins, 70, 180}, ""H_mass"", ""weight"");; ; const auto scale_ZZTo4l = 1.386; // ZZ->4mu: Scale factor for ZZ to four leptons; const auto xsec_ZZTo4mu = 0.077; // ZZ->4mu: Standard Model cross-section; const a",MatchSource.WIKI,doc/master/df103__NanoAODHiggsAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8C.html
