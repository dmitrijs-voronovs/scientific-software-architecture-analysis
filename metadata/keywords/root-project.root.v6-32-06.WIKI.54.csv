id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/classTEveViewer.html:37084,Modifiability,inherit,inherited,37084,"es inherited from TEveProjectable; ProjList_t fProjectedList;  . Static Protected Attributes; static Bool_t fgInitInternal = kFALSE;  ; static Bool_t fgRecreateGlOnDockOps = kFALSE;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . Private Member Functions;  TEveViewer (const TEveViewer &);  ; TEveViewer & operator= (const TEveViewer &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
https://root.cern/doc/master/classTEveViewer.html:37722,Modifiability,inherit,inherited,37722," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annih",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
https://root.cern/doc/master/classTEveViewer.html:37894,Modifiability,inherit,inherited,37894," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annih",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
https://root.cern/doc/master/classTEveViewer.html:38060,Modifiability,inherit,inherited,38060," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annih",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
https://root.cern/doc/master/classTEveViewer.html:38549,Modifiability,inherit,inherited,38549,"<< ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TEveViewer.h>. Inheritance diagram for TEveViewer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveViewer() [1/2]. TEveViewer::TEveViewer ; (; const TEveViewer & ; ). private",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
https://root.cern/doc/master/classTEveViewer.html:38648,Modifiability,inherit,inherited,38648,"<< ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TEveViewer.h>. Inheritance diagram for TEveViewer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveViewer() [1/2]. TEveViewer::TEveViewer ; (; const TEveViewer & ; ). private",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
https://root.cern/doc/master/classTEveViewer.html:38960,Modifiability,inherit,inherited,38960," fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TEveViewer.h>. Inheritance diagram for TEveViewer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveViewer() [1/2]. TEveViewer::TEveViewer ; (; const TEveViewer & ; ). private . ◆ TEveViewer() [2/2]. TEveViewer::TEveViewer ; (; const char * ; n = ""TEveViewer"", . const char * ; t = """" . ). Constructor. ; The base-class TEveWindowFrame is constructed without a frame so a default composite-frame is instantiated and stored in fGUIFrame. Cleanup is set to no-cleanup as viewers need to be zapped with some more care. ; Definition ",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
https://root.cern/doc/master/classTEveViewer.html:39193,Modifiability,inherit,inherited,39193,"dren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TEveViewer.h>. Inheritance diagram for TEveViewer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveViewer() [1/2]. TEveViewer::TEveViewer ; (; const TEveViewer & ; ). private . ◆ TEveViewer() [2/2]. TEveViewer::TEveViewer ; (; const char * ; n = ""TEveViewer"", . const char * ; t = """" . ). Constructor. ; The base-class TEveWindowFrame is constructed without a frame so a default composite-frame is instantiated and stored in fGUIFrame. Cleanup is set to no-cleanup as viewers need to be zapped with some more care. ; Definition at line 62 of file TEveViewer.cxx. ◆ ~TEveViewer(). TEveViewer::~TEveViewer ; (; ). override . Destructor. ; Definition at line 79 of file TEveViewer.cxx. Member Function Documentation. ◆ AddScene(). void TEveViewer::AddScene ; (; TEveScene * ;",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
https://root.cern/doc/master/classTEveViewer.html:21764,Security,hash,hash,21764,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
https://root.cern/doc/master/classTEveViewer.html:1832,Usability,undo,undocked,1832,"enu-hiding enabled by default. If you dislike this, add the following line to rootrc file (or set corresponding gEnv entry in application initialization): Eve.Viewer.HideMenus: off. Definition at line 30 of file TEveViewer.h. Public Member Functions;  TEveViewer (const char *n=""TEveViewer"", const char *t="""");  Constructor. ;  ;  ~TEveViewer () override;  Destructor. ;  ; virtual void AddScene (TEveScene *scene);  Add 'scene' to the list of scenes. ;  ; TObject * GetEditorObject (const TEveException &eh=""TEveViewer::GetEditorObject "") const override;  Object to be edited when this is selected, returns the TGLViewer. ;  ; TGLViewer * GetGLViewer () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return TEveViewer icon. ;  ; Bool_t HandleElementPaste (TEveElement *el) override;  Receive a pasted object. ;  ; TClass * IsA () const override;  ; void PostDock () override;  Virtual function called after a window is docked. ;  ; void PreUndock () override;  Virtual function called before a window is undocked. ;  ; void Redraw (Bool_t resetCameras=kFALSE);  Redraw viewer immediately. ;  ; void RemoveElementLocal (TEveElement *el) override;  Remove element 'el' from the list of children and also remove appropriate GLScene from GLViewer's list of scenes. ;  ; void RemoveElementsLocal () override;  Remove all children, forwarded to GLViewer. ;  ; void SetGLViewer (TGLViewer *viewer, TGFrame *frame);  Set TGLViewer that is represented by this object. ;  ; TGLEmbeddedViewer * SpawnGLEmbeddedViewer (TGedEditor *ged=nullptr, Int_t border=0);  Spawn new GLViewer and adopt it. ;  ; TGLSAViewer * SpawnGLViewer (TGedEditor *ged=nullptr, Bool_t stereo=kFALSE, Bool_t quad_buf=kTRUE);  Spawn new GLViewer and adopt it. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwitchStereo ();  Switch stereo mode. ;  ;  Public Member Functions inherited from TEveWindowFrame;  TEveWindowFrame (TGFrame *frame, ",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
https://root.cern/doc/master/classTEveViewer.html:14008,Usability,feedback,feedback,14008,"ompound * GetCompound ();  ; Int_t GetDenyDestroy () const;  Returns the number of times deny-destroy has been requested on the element. ;  ; Bool_t GetDestroyOnZeroRefCnt () const;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void IncImpliedSelected ();  Increase element's implied-selection count. Stamp appropriately. ;  ; void In",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
https://root.cern/doc/master/classTEveViewer.html:42721,Usability,undo,undocked,42721,"Receive a pasted object. ; TEveViewer only accepts objects of class TEveScene. Virtual from TEveElement. ; Reimplemented from TEveElement.; Definition at line 309 of file TEveViewer.cxx. ◆ InitInternal(). void TEveViewer::InitInternal ; (; ). staticprotected . Initialize static data-members according to running conditions. ; Definition at line 92 of file TEveViewer.cxx. ◆ IsA(). TClass * TEveViewer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 71 of file TEveViewer.h. ◆ operator=(). TEveViewer & TEveViewer::operator= ; (; const TEveViewer & ; ). private . ◆ PostDock(). void TEveViewer::PostDock ; (; ). overridevirtual . Virtual function called after a window is docked. ; On mac we have to force recreation of gl-context. ; Reimplemented from TEveWindow.; Definition at line 123 of file TEveViewer.cxx. ◆ PreUndock(). void TEveViewer::PreUndock ; (; ). overridevirtual . Virtual function called before a window is undocked. ; On mac we have to force recreation of gl-context. ; Reimplemented from TEveWindow.; Definition at line 105 of file TEveViewer.cxx. ◆ Redraw(). void TEveViewer::Redraw ; (; Bool_t ; resetCameras = kFALSE). Redraw viewer immediately. ; Definition at line 222 of file TEveViewer.cxx. ◆ RemoveElementLocal(). void TEveViewer::RemoveElementLocal ; (; TEveElement * ; el). overridevirtual . Remove element 'el' from the list of children and also remove appropriate GLScene from GLViewer's list of scenes. ; Virtual from TEveElement. ; Reimplemented from TEveElement.; Definition at line 279 of file TEveViewer.cxx. ◆ RemoveElementsLocal(). void TEveViewer::RemoveElementsLocal ; (; ). overridevirtual . Remove all children, forwarded to GLViewer. ; Virtual from TEveElement. ; Reimplemented from TEveElement.; Definition at line 288 of file TEveViewer.cxx. ◆ SetGLViewer(). void TEveViewer::SetGLViewer ; (; TGLViewer * ; viewer, . TGFrame * ; frame . ). Set TGLViewer that is ",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
https://root.cern/doc/master/classTEveViewerList.html:21991,Availability,error,error,21991,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:22080,Availability,error,error,22080,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:22235,Availability,error,error,22235,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:22532,Availability,error,error,22532,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:26616,Availability,error,error,26616,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:18368,Deployability,update,update,18368,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:18570,Deployability,update,update,18570," model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const overrid",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:37557,Deployability,update,updated,37557,"ect ; (; ). virtual . Disconnect from TGLViewer class-signals. ; Definition at line 413 of file TEveViewer.cxx. ◆ GetColorBrightness(). Float_t TEveViewerList::GetColorBrightness ; (; ); const. inline . Definition at line 126 of file TEveViewer.h. ◆ GetShowTooltip(). Bool_t TEveViewerList::GetShowTooltip ; (; ); const. inline . Definition at line 123 of file TEveViewer.h. ◆ HandleTooltip(). void TEveViewerList::HandleTooltip ; (; ). protected . Show / hide tooltip for various MouseOver events. ; Must be called from slots where sender is TGLEventHandler. ; Definition at line 508 of file TEveViewer.cxx. ◆ IsA(). TClass * TEveViewerList::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 132 of file TEveViewer.h. ◆ OnClicked(). void TEveViewerList::OnClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::Clicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 605 of file TEveViewer.cxx. ◆ OnMouseOver(). void TEveViewerList::OnMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::MouseOver() signal. ; The attempt is made to determine the TEveElement being represented by the physical shape and global highlight is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not highlighted.; Highlight is always in single-selection mode. ; Definition at line 539 of file TEveViewer.cxx. ◆ OnReClicked(). void TEveViewerList::OnReClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::ReClicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 622 of file TEveViewer.cxx. ◆ OnReMouseOver().",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:37957,Deployability,update,updated,37957," HandleTooltip(). void TEveViewerList::HandleTooltip ; (; ). protected . Show / hide tooltip for various MouseOver events. ; Must be called from slots where sender is TGLEventHandler. ; Definition at line 508 of file TEveViewer.cxx. ◆ IsA(). TClass * TEveViewerList::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 132 of file TEveViewer.h. ◆ OnClicked(). void TEveViewerList::OnClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::Clicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 605 of file TEveViewer.cxx. ◆ OnMouseOver(). void TEveViewerList::OnMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::MouseOver() signal. ; The attempt is made to determine the TEveElement being represented by the physical shape and global highlight is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not highlighted.; Highlight is always in single-selection mode. ; Definition at line 539 of file TEveViewer.cxx. ◆ OnReClicked(). void TEveViewerList::OnReClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::ReClicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 622 of file TEveViewer.cxx. ◆ OnReMouseOver(). void TEveViewerList::OnReMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::ReMouseOver(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 561 of file TEveViewer.cxx. ◆ OnUnClicked(). void TEveViewerList::OnUnC",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:38371,Deployability,update,updated,38371,"Clicked(). void TEveViewerList::OnClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::Clicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 605 of file TEveViewer.cxx. ◆ OnMouseOver(). void TEveViewerList::OnMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::MouseOver() signal. ; The attempt is made to determine the TEveElement being represented by the physical shape and global highlight is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not highlighted.; Highlight is always in single-selection mode. ; Definition at line 539 of file TEveViewer.cxx. ◆ OnReClicked(). void TEveViewerList::OnReClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::ReClicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 622 of file TEveViewer.cxx. ◆ OnReMouseOver(). void TEveViewerList::OnReMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::ReMouseOver(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 561 of file TEveViewer.cxx. ◆ OnUnClicked(). void TEveViewerList::OnUnClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::UnClicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 639 of file TEveViewer.cxx. ◆ OnUnMouseOver(). void TEveViewerList::OnUnMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGL",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:38722,Deployability,update,updated,38722,"x. ◆ OnMouseOver(). void TEveViewerList::OnMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::MouseOver() signal. ; The attempt is made to determine the TEveElement being represented by the physical shape and global highlight is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not highlighted.; Highlight is always in single-selection mode. ; Definition at line 539 of file TEveViewer.cxx. ◆ OnReClicked(). void TEveViewerList::OnReClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::ReClicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 622 of file TEveViewer.cxx. ◆ OnReMouseOver(). void TEveViewerList::OnReMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::ReMouseOver(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 561 of file TEveViewer.cxx. ◆ OnUnClicked(). void TEveViewerList::OnUnClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::UnClicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 639 of file TEveViewer.cxx. ◆ OnUnMouseOver(). void TEveViewerList::OnUnMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::UnMouseOver(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 583 of file TEveViewer.cxx. ◆ operator=(). TEveViewerList & TEveViewerList::operator= ; (; const TEveViewerList & ; ). private . ◆ RemoveElementL",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:39086,Deployability,update,updated,39086,"ght is always in single-selection mode. ; Definition at line 539 of file TEveViewer.cxx. ◆ OnReClicked(). void TEveViewerList::OnReClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::ReClicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 622 of file TEveViewer.cxx. ◆ OnReMouseOver(). void TEveViewerList::OnReMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::ReMouseOver(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 561 of file TEveViewer.cxx. ◆ OnUnClicked(). void TEveViewerList::OnUnClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::UnClicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 639 of file TEveViewer.cxx. ◆ OnUnMouseOver(). void TEveViewerList::OnUnMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::UnMouseOver(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 583 of file TEveViewer.cxx. ◆ operator=(). TEveViewerList & TEveViewerList::operator= ; (; const TEveViewerList & ; ). private . ◆ RemoveElementLocal(). void TEveViewerList::RemoveElementLocal ; (; TEveElement * ; el). overridevirtual . Decompoundofy el, call base-class version. ; Reimplemented from TEveElement.; Definition at line 367 of file TEveViewer.cxx. ◆ RemoveElementsLocal(). void TEveViewerList::RemoveElementsLocal ; (; ). overridevirtual . Decompoundofy children, call base-class version. ; Reim",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:39437,Deployability,update,updated,39437,"ckable() returns false, the element is not selected. ; Definition at line 622 of file TEveViewer.cxx. ◆ OnReMouseOver(). void TEveViewerList::OnReMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::ReMouseOver(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 561 of file TEveViewer.cxx. ◆ OnUnClicked(). void TEveViewerList::OnUnClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::UnClicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 639 of file TEveViewer.cxx. ◆ OnUnMouseOver(). void TEveViewerList::OnUnMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::UnMouseOver(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 583 of file TEveViewer.cxx. ◆ operator=(). TEveViewerList & TEveViewerList::operator= ; (; const TEveViewerList & ; ). private . ◆ RemoveElementLocal(). void TEveViewerList::RemoveElementLocal ; (; TEveElement * ; el). overridevirtual . Decompoundofy el, call base-class version. ; Reimplemented from TEveElement.; Definition at line 367 of file TEveViewer.cxx. ◆ RemoveElementsLocal(). void TEveViewerList::RemoveElementsLocal ; (; ). overridevirtual . Decompoundofy children, call base-class version. ; Reimplemented from TEveElement.; Definition at line 376 of file TEveViewer.cxx. ◆ RepaintAllViewers(). void TEveViewerList::RepaintAllViewers ; (; Bool_t ; resetCameras, . Bool_t ; dropLogicals . ). Repaint all viewers. ; Definition at line 457 of file TEveViewer.cxx. ◆ RepaintChangedViewers(). void TEveViewerList::RepaintChangedViewers ; (; Bool_t ; re",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:8718,Integrability,depend,dependant,8718," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:14395,Integrability,depend,dependent,14395,"onst;  Call Print() on source object. ;  ; virtual void ProjectAllChildren (Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of all children there. ;  ; virtual void ProjectChild (TEveElement *el, Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of child 'el' there. ;  ; virtual void PropagateMainColorToProjecteds (Color_t color, Color_t old_color);  Propagate color to projected elements. ;  ; virtual void PropagateMainTransparencyToProjecteds (Char_t t, Char_t old_t);  Propagate transparency to projected elements. ;  ; virtual void PropagateRnrStateToProjecteds ();  Propagate render state to the projected replicas of this element. ;  ; virtual void PropagateVizParamsToElements (TEveElement *el=nullptr);  Propagate visualization parameters from element el (defaulting to this) to all elements (children). ;  ; virtual void PropagateVizParamsToProjecteds ();  Propagate visualization parameters to dependent elements. ;  ; virtual TEveTrans * PtrMainTrans (Bool_t create=kTRUE);  Return pointer to main transformation. ;  ; void RecheckImpliedSelections ();  Call this if it is possible that implied-selection or highlight has changed for this element or for implied-selection this element is member of and you want to maintain consistent selection state. ;  ; const List_t & RefChildren () const;  ; virtual TEveTrans & RefMainTrans ();  Return reference to main transformation. ;  ; virtual void RemoveElement (TEveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual Bool_t RemoveFromListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Remove element from list-tree 'ltree' where its parent item is 'parent_lti'. ;  ; virtual Int_t RemoveFromListTrees (TEveElement *parent);  Remove element from all list-trees where 'parent' is the user-data of the parent list-tree-item. ;  ; vi",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:21997,Integrability,message,message,21997,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:22538,Integrability,message,message,22538,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:23528,Integrability,message,message,23528,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:26622,Integrability,message,message,26622,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:26995,Integrability,message,message,26995," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main c",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:2540,Modifiability,inherit,inherited,2540," *obj, UInt_t state);  Slot for global TGLViewer::UnMouseOver(). ;  ; void RemoveElementLocal (TEveElement *el) override;  Decompoundofy el, call base-class version. ;  ; void RemoveElementsLocal () override;  Decompoundofy children, call base-class version. ;  ; void RepaintAllViewers (Bool_t resetCameras, Bool_t dropLogicals);  Repaint all viewers. ;  ; void RepaintChangedViewers (Bool_t resetCameras, Bool_t dropLogicals);  Repaint viewers that are tagged as changed. ;  ; void SceneDestructing (TEveScene *scene);  Callback done from a TEveScene destructor allowing proper removal of the scene from affected viewers. ;  ; void SetColorBrightness (Float_t b);  Set color brightness. ;  ; void SetShowTooltip (Bool_t x);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwitchColorSet ();  Switch background color. ;  ; Bool_t UseLightColorSet () const;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TCla",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:2894,Modifiability,inherit,inherited,2894,";  ; void RepaintAllViewers (Bool_t resetCameras, Bool_t dropLogicals);  Repaint all viewers. ;  ; void RepaintChangedViewers (Bool_t resetCameras, Bool_t dropLogicals);  Repaint viewers that are tagged as changed. ;  ; void SceneDestructing (TEveScene *scene);  Callback done from a TEveScene destructor allowing proper removal of the scene from affected viewers. ;  ; void SetColorBrightness (Float_t b);  Set color brightness. ;  ; void SetShowTooltip (Bool_t x);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwitchColorSet ();  Switch background color. ;  ; Bool_t UseLightColorSet () const;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:4053,Modifiability,inherit,inherited,4053,"ldClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;  ; void SetElementTitle (const char *title) override;  Virtual function for setting of title of an element. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Optimized destruction without check of reference-count. ;  ; virtual void AnnihilateE",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:8499,Modifiability,variab,variable,8499,"oy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:8594,Modifiability,variab,variable,8594," this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-i",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:16130,Modifiability,variab,variable,16130,"mListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Remove element from list-tree 'ltree' where its parent item is 'parent_lti'. ;  ; virtual Int_t RemoveFromListTrees (TEveElement *parent);  Remove element from all list-trees where 'parent' is the user-data of the parent list-tree-item. ;  ; virtual void RemoveParent (TEveElement *re);  Remove re from the list of parents. ;  ; void ResetAllCSCBits ();  ; void ResetCSCBits (UChar_t f);  ; void SaveVizParams (std::ostream &out, const TString &tag, const TString &var);  Save visualization parameters for this element with given tag. ;  ; virtual void SelectElement (Bool_t state);  Set element's selection state. Stamp appropriately. ;  ; void SetCompound (TEveCompound *c);  ; void SetCSCBits (UChar_t f);  ; void SetDestroyOnZeroRefCnt (Bool_t d);  Sets the state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; void SetEditMainColor (Bool_t x);  ; void SetEditMainTransparency (Bool_t x);  ; void SetMainAlpha (Float_t alpha);  Set main-transparency via float alpha variable. ;  ; virtual void SetMainColor (Color_t color);  Set main color of the element. ;  ; void SetMainColorPixel (Pixel_t pixel);  Convert pixel to Color_t and call SetMainColor(). ;  ; void SetMainColorPtr (Color_t *color);  ; void SetMainColorRGB (Float_t r, Float_t g, Float_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; void SetMainColorRGB (UChar_t r, UChar_t g, UChar_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; virtual void SetMainTransparency (Char_t t);  Set main-transparency. ;  ; void SetPickable (Bool_t p);  ; void SetPickableRecursively (Bool_t p);  Set pickable state on the element and all its children. ;  ; virtual Bool_t SetRnrChildren (Bool_t rnr);  Set render state of this element's children, i.e. ;  ; virtual Bool_t SetRnrSelf (Bool_t rnr);  Set render state of this element, i.e. ;  ; virtual Bool_t SetRnrSelfChildren (Bool_t rnr_self, Bool_t rnr_child",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:18794,Modifiability,inherit,inherited,18794,"Visibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:20534,Modifiability,inherit,inherited,20534,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:21627,Modifiability,inherit,inheritance,21627,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:23626,Modifiability,inherit,inherits,23626,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:23743,Modifiability,inherit,inherits,23743,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:27302,Modifiability,inherit,inherited,27302,"etDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ;",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:28766,Modifiability,inherit,inherited,28766," t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * Decl",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:28985,Modifiability,inherit,inherited,28985," t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * Decl",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:29200,Modifiability,inherit,inherited,29200," t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * Decl",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:29410,Modifiability,inherit,inherited,29410," t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * Decl",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:29928,Modifiability,inherit,inherited,29928,"veElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void HandleTooltip ();  Show / hide tooltip for various MouseOver events. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fBrightness;  ; Bool_t fShowTooltip;  ; Bool_t fUseLightColorSet;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Boo",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:30250,Modifiability,inherit,inherited,30250,"nstexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void HandleTooltip ();  Show / hide tooltip for various MouseOver events. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fBrightness;  ; Bool_t fShowTooltip;  ; Bool_t fUseLightColorSet;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDes",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:30569,Modifiability,inherit,inherited,30569," destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void HandleTooltip ();  Show / hide tooltip for various MouseOver events. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fBrightness;  ; Bool_t fShowTooltip;  ; Bool_t fUseLightColorSet;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:30873,Modifiability,inherit,inherited,30873,"ame ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void HandleTooltip ();  Show / hide tooltip for various MouseOver events. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fBrightness;  ; Bool_t fShowTooltip;  ; Bool_t fUseLightColorSet;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:30971,Modifiability,inherit,inherited,30971,"ame ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void HandleTooltip ();  Show / hide tooltip for various MouseOver events. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fBrightness;  ; Bool_t fShowTooltip;  ; Bool_t fUseLightColorSet;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:31961,Modifiability,inherit,inherited,31961,"Color;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveViewerList (const TEveViewerList &);  ; TEveViewerList & operator= (const TEveViewerList &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:32043,Modifiability,inherit,inherited,32043,"Color;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveViewerList (const TEveViewerList &);  ; TEveViewerList & operator= (const TEveViewerList &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:32276,Modifiability,inherit,inherited,32276,"elf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveViewerList (const TEveViewerList &);  ; TEveViewerList & operator= (const TEveViewerList &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:32961,Modifiability,inherit,inherited,32961,"elf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveViewerList (const TEveViewerList &);  ; TEveViewerList & operator= (const TEveViewerList &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:33599,Modifiability,inherit,inherited,33599," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <TEveViewer.h>. Inheritance diagram for TEveViewerList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveViewerList() [1/2]. TEveViewerList::TEveViewerList ; (; const TEveViewerList & ; ). private . ◆ TEveVi",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:33771,Modifiability,inherit,inherited,33771," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <TEveViewer.h>. Inheritance diagram for TEveViewerList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveViewerList() [1/2]. TEveViewerList::TEveViewerList ; (; const TEveViewerList & ; ). private . ◆ TEveVi",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:33937,Modifiability,inherit,inherited,33937," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <TEveViewer.h>. Inheritance diagram for TEveViewerList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveViewerList() [1/2]. TEveViewerList::TEveViewerList ; (; const TEveViewerList & ; ). private . ◆ TEveVi",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:34426,Modifiability,inherit,inherited,34426," << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <TEveViewer.h>. Inheritance diagram for TEveViewerList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveViewerList() [1/2]. TEveViewerList::TEveViewerList ; (; const TEveViewerList & ; ). private . ◆ TEveViewerList() [2/2]. TEveViewerList::TEveViewerList ; (; const char * ; n = ""TEveViewerList"", . const char * ; t = """" . ). Definition at line 332 of file TEveViewer.cxx. ◆ ~TEveViewerList(). TEveViewerList::~TEveViewerList ; (; ). override . Destructor. ; Definition at line 348 of file TEveViewer.cxx. Member Function Documentation. ◆ AddElement(). void TEveViewerList::AddElement ; (; TEveElement * ; el). overridevirtual . Call base-class implementation. ; If compound is open and compound of the new element is not set, the el's com",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:34532,Modifiability,inherit,inherited,34532," << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <TEveViewer.h>. Inheritance diagram for TEveViewerList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveViewerList() [1/2]. TEveViewerList::TEveViewerList ; (; const TEveViewerList & ; ). private . ◆ TEveViewerList() [2/2]. TEveViewerList::TEveViewerList ; (; const char * ; n = ""TEveViewerList"", . const char * ; t = """" . ). Definition at line 332 of file TEveViewer.cxx. ◆ ~TEveViewerList(). TEveViewerList::~TEveViewerList ; (; ). override . Destructor. ; Definition at line 348 of file TEveViewer.cxx. Member Function Documentation. ◆ AddElement(). void TEveViewerList::AddElement ; (; TEveElement * ; el). overridevirtual . Call base-class implementation. ; If compound is open and compound of the new element is not set, the el's com",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:19662,Security,hash,hash,19662,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveViewerList.html:11688,Usability,feedback,feedback,11688,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
https://root.cern/doc/master/classTEveVSD.html:3155,Availability,error,error,3155,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:3244,Availability,error,error,3244,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:3399,Availability,error,error,3399,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:3696,Availability,error,error,3696,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:8260,Availability,error,error,8260," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DisableTObjectStreamersForVSDStruct ();  Disable TObject streamers for those VSD structs that inherit from TObject directly. ;  ;  Stati",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:3161,Integrability,message,message,3161,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:3702,Integrability,message,message,3702,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:4904,Integrability,message,message,4904,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:8266,Integrability,message,message,8266," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DisableTObjectStreamersForVSDStruct ();  Disable TObject streamers for those VSD structs that inherit from TObject directly. ;  ;  Stati",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:8639,Integrability,message,message,8639," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DisableTObjectStreamersForVSDStruct ();  Disable TObject streamers for those VSD structs that inherit from TObject directly. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *o",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:1394,Modifiability,inherit,inherited,1394,"s holding standard event data in experiment independent format. ; Definition at line 19 of file TEveVSD.h. Public Member Functions;  TEveVSD (const char *name=""TEveVSD"", const char *title="""");  Constructor. ;  ;  ~TEveVSD () override;  Destructor. ;  ; virtual void CreateBranches ();  Create internal VSD branches. ;  ; virtual void CreateTrees ();  Create internal trees. ;  ; virtual void DeleteTrees ();  Delete internal trees. ;  ; TClass * IsA () const override;  ; virtual void LoadTrees ();  Load internal trees from directory. ;  ; virtual void SetBranchAddresses ();  Set branche addresses of internal trees. ;  ; virtual void SetDirectory (TDirectory *dir);  Set directory in which the trees are (or will be) created. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WriteTrees ();  Does nothing here ... reimplemented in sub-classes. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:2791,Modifiability,inherit,inheritance,2791,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:5002,Modifiability,inherit,inherits,5002,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:5119,Modifiability,inherit,inherits,5119,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:9214,Modifiability,inherit,inherit,9214,"e unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DisableTObjectStreamersForVSDStruct ();  Disable TObject streamers for those VSD structs that inherit from TObject directly. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; TEveCluster fC;  ; TEveRecCascade fCC;  ; TEveMCRecCrossRef fGI;  ; TEveHit fH;  ; TEveMCTrack fK;  Sim-Rec cross references. ;  ; TEveRecKink fKK;  ; TEveCluster * fpC;  ; TEveRecCascade * fpCC;  ; TEveMCRecCrossRef * fpGI;  ; TEveHit * fpH;  ; TEveMCTrack * fpK;  ; TEveRecKink * fpKK;  ; TEve",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:9282,Modifiability,inherit,inherited,9282,"seCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DisableTObjectStreamersForVSDStruct ();  Disable TObject streamers for those VSD structs that inherit from TObject directly. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; TEveCluster fC;  ; TEveRecCascade fCC;  ; TEveMCRecCrossRef fGI;  ; TEveHit fH;  ; TEveMCTrack fK;  Sim-Rec cross references. ;  ; TEveRecKink fKK;  ; TEveCluster * fpC;  ; TEveRecCascade * fpCC;  ; TEveMCRecCrossRef * fpGI;  ; TEveHit * fpH;  ; TEveMCTrack * fpK;  ; TEveRecKink * fpKK;  ; TEveRecTrack * fpR;  ; TEveRecV0 * fpV0;  ; TEveRecTrack fR;  ; TTree * fTreeC;  Hits. ;  ; TTree * fTreeCC;  VO's. ;  ; TTree * fTreeGI;  Cascades. ;  ; TTree * fTreeH;  Kinematics. ;  ; TTree * fTreeK;  ; TTree * fTreeKK;  Reconstructed tracks. ;  ; TTree * fTreeR;  Clusters. ;  ; TTree * fTreeV0;  Kink",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:10660,Modifiability,inherit,inherited,10660,"tracking of objects in the TObjectTable. ;  . Public Attributes; TEveCluster fC;  ; TEveRecCascade fCC;  ; TEveMCRecCrossRef fGI;  ; TEveHit fH;  ; TEveMCTrack fK;  Sim-Rec cross references. ;  ; TEveRecKink fKK;  ; TEveCluster * fpC;  ; TEveRecCascade * fpCC;  ; TEveMCRecCrossRef * fpGI;  ; TEveHit * fpH;  ; TEveMCTrack * fpK;  ; TEveRecKink * fpKK;  ; TEveRecTrack * fpR;  ; TEveRecV0 * fpV0;  ; TEveRecTrack fR;  ; TTree * fTreeC;  Hits. ;  ; TTree * fTreeCC;  VO's. ;  ; TTree * fTreeGI;  Cascades. ;  ; TTree * fTreeH;  Kinematics. ;  ; TTree * fTreeK;  ; TTree * fTreeKK;  Reconstructed tracks. ;  ; TTree * fTreeR;  Clusters. ;  ; TTree * fTreeV0;  Kinks. ;  ; TEveRecV0 fV0;  . Protected Attributes; Int_t fBuffSize;  ; TDirectory * fDirectory;  ; TFile * fFile;  ; Int_t fVerbose;  . Private Member Functions;  TEveVSD (const TEveVSD &);  ; TEveVSD & operator= (const TEveVSD &);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TEveVSD.h>. Inheritance diagram for TEveVSD:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:11301,Modifiability,inherit,inherited,11301,"cted Attributes; Int_t fBuffSize;  ; TDirectory * fDirectory;  ; TFile * fFile;  ; Int_t fVerbose;  . Private Member Functions;  TEveVSD (const TEveVSD &);  ; TEveVSD & operator= (const TEveVSD &);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TEveVSD.h>. Inheritance diagram for TEveVSD:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveVSD() [1/2]. TEveVSD::TEveVSD ; (; const TEveVSD & ; ). private . ◆ TEveVSD() [2/2]. TEveVSD::TEveVSD ; (; const char * ; name = ""TEveVSD"", . const char * ; title = """" . ). Constructor. ; Definition at line 25 of file TEveVSD.cxx. ◆ ~TEveVSD(). TEveVSD::~TEveVSD ; (; ). override . Destructor. ; Definition at line 56 of file TEveVSD.cxx. Member Function Documentation. ◆ Class(). static TClass * TEveVSD::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveVSD::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveVSD::Class_Versio",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:11400,Modifiability,inherit,inherited,11400,"cted Attributes; Int_t fBuffSize;  ; TDirectory * fDirectory;  ; TFile * fFile;  ; Int_t fVerbose;  . Private Member Functions;  TEveVSD (const TEveVSD &);  ; TEveVSD & operator= (const TEveVSD &);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TEveVSD.h>. Inheritance diagram for TEveVSD:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveVSD() [1/2]. TEveVSD::TEveVSD ; (; const TEveVSD & ; ). private . ◆ TEveVSD() [2/2]. TEveVSD::TEveVSD ; (; const char * ; name = ""TEveVSD"", . const char * ; title = """" . ). Constructor. ; Definition at line 25 of file TEveVSD.cxx. ◆ ~TEveVSD(). TEveVSD::~TEveVSD ; (; ). override . Destructor. ; Definition at line 56 of file TEveVSD.cxx. Member Function Documentation. ◆ Class(). static TClass * TEveVSD::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveVSD::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveVSD::Class_Versio",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:13267,Modifiability,inherit,inherit,13267,_Name(). static const char * TEveVSD::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveVSD::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 67 of file TEveVSD.h. ◆ CreateBranches(). void TEveVSD::CreateBranches ; (; ). virtual . Create internal VSD branches. ; Definition at line 101 of file TEveVSD.cxx. ◆ CreateTrees(). void TEveVSD::CreateTrees ; (; ). virtual . Create internal trees. ; Definition at line 71 of file TEveVSD.cxx. ◆ DeclFileName(). static const char * TEveVSD::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 67 of file TEveVSD.h. ◆ DeleteTrees(). void TEveVSD::DeleteTrees ; (; ). virtual . Delete internal trees. ; Definition at line 87 of file TEveVSD.cxx. ◆ DisableTObjectStreamersForVSDStruct(). void TEveVSD::DisableTObjectStreamersForVSDStruct ; (; ). static . Disable TObject streamers for those VSD structs that inherit from TObject directly. ; Definition at line 203 of file TEveVSD.cxx. ◆ IsA(). TClass * TEveVSD::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 67 of file TEveVSD.h. ◆ LoadTrees(). void TEveVSD::LoadTrees ; (; ). virtual . Load internal trees from directory. ; Definition at line 148 of file TEveVSD.cxx. ◆ operator=(). TEveVSD & TEveVSD::operator= ; (; const TEveVSD & ; ). private . ◆ SetBranchAddresses(). void TEveVSD::SetBranchAddresses ; (; ). virtual . Set branche addresses of internal trees. ; Definition at line 121 of file TEveVSD.cxx. ◆ SetDirectory(). void TEveVSD::SetDirectory ; (; TDirectory * ; dir). virtual . Set directory in which the trees are (or will be) created. ; Definition at line 63 of file TEveVSD.cxx. ◆ Streamer(). void TEveVSD::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(,MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveVSD.html:4633,Security,hash,hash,4633," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
https://root.cern/doc/master/classTEveWindow.html:22177,Availability,error,error,22177,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:22266,Availability,error,error,22266,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:22421,Availability,error,error,22421,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:22718,Availability,error,error,22718,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:26802,Availability,error,error,26802,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:18554,Deployability,update,update,18554,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:18756,Deployability,update,update,18756," model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const overrid",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:8832,Integrability,depend,dependant,8832," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:14391,Integrability,depend,dependent,14391,"onst;  Call Print() on source object. ;  ; virtual void ProjectAllChildren (Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of all children there. ;  ; virtual void ProjectChild (TEveElement *el, Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of child 'el' there. ;  ; virtual void PropagateMainColorToProjecteds (Color_t color, Color_t old_color);  Propagate color to projected elements. ;  ; virtual void PropagateMainTransparencyToProjecteds (Char_t t, Char_t old_t);  Propagate transparency to projected elements. ;  ; virtual void PropagateRnrStateToProjecteds ();  Propagate render state to the projected replicas of this element. ;  ; virtual void PropagateVizParamsToElements (TEveElement *el=nullptr);  Propagate visualization parameters from element el (defaulting to this) to all elements (children). ;  ; virtual void PropagateVizParamsToProjecteds ();  Propagate visualization parameters to dependent elements. ;  ; virtual TEveTrans * PtrMainTrans (Bool_t create=kTRUE);  Return pointer to main transformation. ;  ; void RecheckImpliedSelections ();  Call this if it is possible that implied-selection or highlight has changed for this element or for implied-selection this element is member of and you want to maintain consistent selection state. ;  ; const List_t & RefChildren () const;  ; virtual TEveTrans & RefMainTrans ();  Return reference to main transformation. ;  ; virtual void RemoveElement (TEveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElementLocal (TEveElement *el);  Perform additional local removal of el. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual void RemoveElementsLocal ();  Perform additional local removal of all elements. ;  ; virtual Bool_t RemoveFromListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Remove element from list-tree 'ltree' where its parent",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:22183,Integrability,message,message,22183,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:22724,Integrability,message,message,22724,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:23714,Integrability,message,message,23714,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:26808,Integrability,message,message,26808,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:27181,Integrability,message,message,27181," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main c",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:2573,Modifiability,inherit,inherited,2573,"- intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void Set",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:2927,Modifiability,inherit,inherited,2927,"ked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:4086,Modifiability,inherit,inherited,4086,"ldClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;  ; void SetElementTitle (const char *title) override;  Virtual function for setting of title of an element. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Opti",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:8613,Modifiability,variab,variable,8613,"oy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:8708,Modifiability,variab,variable,8708," this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-i",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:16316,Modifiability,variab,variable,16316,"mListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Remove element from list-tree 'ltree' where its parent item is 'parent_lti'. ;  ; virtual Int_t RemoveFromListTrees (TEveElement *parent);  Remove element from all list-trees where 'parent' is the user-data of the parent list-tree-item. ;  ; virtual void RemoveParent (TEveElement *re);  Remove re from the list of parents. ;  ; void ResetAllCSCBits ();  ; void ResetCSCBits (UChar_t f);  ; void SaveVizParams (std::ostream &out, const TString &tag, const TString &var);  Save visualization parameters for this element with given tag. ;  ; virtual void SelectElement (Bool_t state);  Set element's selection state. Stamp appropriately. ;  ; void SetCompound (TEveCompound *c);  ; void SetCSCBits (UChar_t f);  ; void SetDestroyOnZeroRefCnt (Bool_t d);  Sets the state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; void SetEditMainColor (Bool_t x);  ; void SetEditMainTransparency (Bool_t x);  ; void SetMainAlpha (Float_t alpha);  Set main-transparency via float alpha variable. ;  ; virtual void SetMainColor (Color_t color);  Set main color of the element. ;  ; void SetMainColorPixel (Pixel_t pixel);  Convert pixel to Color_t and call SetMainColor(). ;  ; void SetMainColorPtr (Color_t *color);  ; void SetMainColorRGB (Float_t r, Float_t g, Float_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; void SetMainColorRGB (UChar_t r, UChar_t g, UChar_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; virtual void SetMainTransparency (Char_t t);  Set main-transparency. ;  ; void SetPickable (Bool_t p);  ; void SetPickableRecursively (Bool_t p);  Set pickable state on the element and all its children. ;  ; virtual Bool_t SetRnrChildren (Bool_t rnr);  Set render state of this element's children, i.e. ;  ; virtual Bool_t SetRnrSelf (Bool_t rnr);  Set render state of this element, i.e. ;  ; virtual Bool_t SetRnrSelfChildren (Bool_t rnr_self, Bool_t rnr_child",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:18980,Modifiability,inherit,inherited,18980,"Visibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:20720,Modifiability,inherit,inherited,20720,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:21813,Modifiability,inherit,inheritance,21813,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:23812,Modifiability,inherit,inherits,23812,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:23929,Modifiability,inherit,inherits,23929,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:27488,Modifiability,inherit,inherited,27488,"etDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ;",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:30365,Modifiability,inherit,inherited,30365,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void PreDeleteElement () override;  Called befo",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:30584,Modifiability,inherit,inherited,30584,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void PreDeleteElement () override;  Called befo",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:30799,Modifiability,inherit,inherited,30799,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void PreDeleteElement () override;  Called befo",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:31009,Modifiability,inherit,inherited,31009,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void PreDeleteElement () override;  Called befo",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:31527,Modifiability,inherit,inherited,31527,"veElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass; ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:32027,Modifiability,inherit,inherited,32027,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fIm",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:32260,Modifiability,inherit,inherited,32260," ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; B",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:32547,Modifiability,inherit,inherited,32547,"ileName ();  . Protected Member Functions; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Pro",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:32645,Modifiability,inherit,inherited,32645,"ileName ();  . Protected Member Functions; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Pro",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:33635,Modifiability,inherit,inherited,33635,"Color;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Static Protected Attributes; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . Private Member Functions;  TEveWindow (const TEveWindow &);  ; TEveWindow & operator= (const TEveWindow &);  . Friends; class TEveWindowManager;  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:33717,Modifiability,inherit,inherited,33717,"Color;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Static Protected Attributes; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . Private Member Functions;  TEveWindow (const TEveWindow &);  ; TEveWindow & operator= (const TEveWindow &);  . Friends; class TEveWindowManager;  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:34199,Modifiability,inherit,inherited,34199,"DB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Static Protected Attributes; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . Private Member Functions;  TEveWindow (const TEveWindow &);  ; TEveWindow & operator= (const TEveWindow &);  . Friends; class TEveWindowManager;  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:34884,Modifiability,inherit,inherited,34884,"DB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Static Protected Attributes; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . Private Member Functions;  TEveWindow (const TEveWindow &);  ; TEveWindow & operator= (const TEveWindow &);  . Friends; class TEveWindowManager;  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:35522,Modifiability,inherit,inherited,35522," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindow:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindow() [1/2]. TEveWindow::TEveWindow ; (; const TEveWindow & ; ). private . ◆ TEveWindow() [2/2]. TEveWi",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:35694,Modifiability,inherit,inherited,35694," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindow:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindow() [1/2]. TEveWindow::TEveWindow ; (; const TEveWindow & ; ). private . ◆ TEveWindow() [2/2]. TEveWi",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:35860,Modifiability,inherit,inherited,35860," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindow:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindow() [1/2]. TEveWindow::TEveWindow ; (; const TEveWindow & ; ). private . ◆ TEveWindow() [2/2]. TEveWi",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:36349,Modifiability,inherit,inherited,36349," << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindow:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindow() [1/2]. TEveWindow::TEveWindow ; (; const TEveWindow & ; ). private . ◆ TEveWindow() [2/2]. TEveWindow::TEveWindow ; (; const char * ; n = ""TEveWindow"", . const char * ; t = """" . ). Definition at line 653 of file TEveWindow.cxx. ◆ ~TEveWindow(). TEveWindow::~TEveWindow ; (; ). override . Destructor. ; Definition at line 668 of file TEveWindow.cxx. Member Function Documentation. ◆ CanMakeNewSlots(). virtual Bool_t TEveWindow::CanMakeNewSlots ; (; ); const. inlinevirtual . Reimplemented in TEveWindowPack, and TEveWindowTab.; Definition at line 241 of file TEveWindow.h. ◆ Class(). static TClass * TEveWindow::Class ; (; ). stat",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:36455,Modifiability,inherit,inherited,36455," << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindow:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindow() [1/2]. TEveWindow::TEveWindow ; (; const TEveWindow & ; ). private . ◆ TEveWindow() [2/2]. TEveWindow::TEveWindow ; (; const char * ; n = ""TEveWindow"", . const char * ; t = """" . ). Definition at line 653 of file TEveWindow.cxx. ◆ ~TEveWindow(). TEveWindow::~TEveWindow ; (; ). override . Destructor. ; Definition at line 668 of file TEveWindow.cxx. Member Function Documentation. ◆ CanMakeNewSlots(). virtual Bool_t TEveWindow::CanMakeNewSlots ; (; ); const. inlinevirtual . Reimplemented in TEveWindowPack, and TEveWindowTab.; Definition at line 241 of file TEveWindow.h. ◆ Class(). static TClass * TEveWindow::Class ; (; ). stat",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:19848,Security,hash,hash,19848,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:1877,Usability,undo,undocked,1877," virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; virtual TGFrame * GetGUIFrame ()=0;  ; Bool_t GetShowTitleBar () const;  ; TClass * IsA () const override;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () overri",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:11802,Usability,feedback,feedback,11802,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindow.html:42970,Usability,undo,undocked,42970," TEveWindow & ; ). private . ◆ PopulateEmptyFrame(). void TEveWindow::PopulateEmptyFrame ; (; TEveCompositeFrame * ; ef). Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ; No layout or window-mapping is done. ; Definition at line 727 of file TEveWindow.cxx. ◆ PostDock(). void TEveWindow::PostDock ; (; ). virtual . Virtual function called after a window is docked. ; Reimplemented in TEveViewer.; Definition at line 703 of file TEveWindow.cxx. ◆ PreDeleteElement(). void TEveWindow::PreDeleteElement ; (; ). overrideprotectedvirtual . Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ; Here the request is just passed to TEveManager. If you override it, make sure to call base-class version. ; Reimplemented from TEveElement.; Definition at line 681 of file TEveWindow.cxx. ◆ PreUndock(). void TEveWindow::PreUndock ; (; ). virtual . Virtual function called before a window is undocked. ; Reimplemented in TEveViewer.; Definition at line 690 of file TEveWindow.cxx. ◆ ReplaceWindow(). void TEveWindow::ReplaceWindow ; (; TEveWindow * ; w). Replace this window with the passed one. ; Eve parent-ship is properly handled. This will most likely lead to the destruction of this window. Layout is called on the frame. ; Definition at line 819 of file TEveWindow.cxx. ◆ SetCurrent(). void TEveWindow::SetCurrent ; (; Bool_t ; curr). protectedvirtual . Set current state of this eve-window. ; Protected method - called by window-manager. ; Reimplemented in TEveWindowSlot.; Definition at line 929 of file TEveWindow.cxx. ◆ SetCurrentBackgroundColor(). void TEveWindow::SetCurrentBackgroundColor ; (; Pixel_t ; p). static . Set background-color for marking the title-bar of current window. Static. ; Definition at line 1114 of file TEveWindow.cxx. ◆ SetMainFrameDefHeight(). void TEveWindow::SetMainFrameDefHeight ; (; UInt_t ; x). static . Set default height for new ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
https://root.cern/doc/master/classTEveWindowFrame.html:22472,Availability,error,error,22472,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:22561,Availability,error,error,22561,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:22716,Availability,error,error,22716,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:23013,Availability,error,error,23013,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:27097,Availability,error,error,27097,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:18849,Deployability,update,update,18849,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:19051,Deployability,update,update,19051," model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const overrid",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:9127,Integrability,depend,dependant,9127," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:14686,Integrability,depend,dependent,14686,"onst;  Call Print() on source object. ;  ; virtual void ProjectAllChildren (Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of all children there. ;  ; virtual void ProjectChild (TEveElement *el, Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of child 'el' there. ;  ; virtual void PropagateMainColorToProjecteds (Color_t color, Color_t old_color);  Propagate color to projected elements. ;  ; virtual void PropagateMainTransparencyToProjecteds (Char_t t, Char_t old_t);  Propagate transparency to projected elements. ;  ; virtual void PropagateRnrStateToProjecteds ();  Propagate render state to the projected replicas of this element. ;  ; virtual void PropagateVizParamsToElements (TEveElement *el=nullptr);  Propagate visualization parameters from element el (defaulting to this) to all elements (children). ;  ; virtual void PropagateVizParamsToProjecteds ();  Propagate visualization parameters to dependent elements. ;  ; virtual TEveTrans * PtrMainTrans (Bool_t create=kTRUE);  Return pointer to main transformation. ;  ; void RecheckImpliedSelections ();  Call this if it is possible that implied-selection or highlight has changed for this element or for implied-selection this element is member of and you want to maintain consistent selection state. ;  ; const List_t & RefChildren () const;  ; virtual TEveTrans & RefMainTrans ();  Return reference to main transformation. ;  ; virtual void RemoveElement (TEveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElementLocal (TEveElement *el);  Perform additional local removal of el. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual void RemoveElementsLocal ();  Perform additional local removal of all elements. ;  ; virtual Bool_t RemoveFromListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Remove element from list-tree 'ltree' where its parent",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:22478,Integrability,message,message,22478,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:23019,Integrability,message,message,23019,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:24009,Integrability,message,message,24009,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:27103,Integrability,message,message,27103,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:27476,Integrability,message,message,27476," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main c",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:999,Modifiability,inherit,inherited,999,". ROOT: TEveWindowFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowFrame Class ReferenceGraphics » 3D Graphics » Event Display. ; Encapsulates TGFrame into an eve-window. ; The frame is owned by the eve-window. ; Definition at line 335 of file TEveWindow.h. Public Member Functions;  TEveWindowFrame (TGFrame *frame, const char *n=""TEveWindowFrame"", const char *t="""");  Constructor. ;  ;  ~TEveWindowFrame () override;  Destructor. ;  ; TGCompositeFrame * GetGUICompositeFrame ();  Returns the registered top-frame of this eve-window dynamic-casted to composite-frame. ;  ; TGFrame * GetGUIFrame () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; virtual Bool_t CanMakeNewSlots () const;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial pop",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:2868,Modifiability,inherit,inherited,2868,"Frame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void Set",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:3222,Modifiability,inherit,inherited,3222,"unction called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:4381,Modifiability,inherit,inherited,4381,"ldClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;  ; void SetElementTitle (const char *title) override;  Virtual function for setting of title of an element. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Opti",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:8908,Modifiability,variab,variable,8908,"oy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:9003,Modifiability,variab,variable,9003," this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-i",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:16611,Modifiability,variab,variable,16611,"mListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Remove element from list-tree 'ltree' where its parent item is 'parent_lti'. ;  ; virtual Int_t RemoveFromListTrees (TEveElement *parent);  Remove element from all list-trees where 'parent' is the user-data of the parent list-tree-item. ;  ; virtual void RemoveParent (TEveElement *re);  Remove re from the list of parents. ;  ; void ResetAllCSCBits ();  ; void ResetCSCBits (UChar_t f);  ; void SaveVizParams (std::ostream &out, const TString &tag, const TString &var);  Save visualization parameters for this element with given tag. ;  ; virtual void SelectElement (Bool_t state);  Set element's selection state. Stamp appropriately. ;  ; void SetCompound (TEveCompound *c);  ; void SetCSCBits (UChar_t f);  ; void SetDestroyOnZeroRefCnt (Bool_t d);  Sets the state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; void SetEditMainColor (Bool_t x);  ; void SetEditMainTransparency (Bool_t x);  ; void SetMainAlpha (Float_t alpha);  Set main-transparency via float alpha variable. ;  ; virtual void SetMainColor (Color_t color);  Set main color of the element. ;  ; void SetMainColorPixel (Pixel_t pixel);  Convert pixel to Color_t and call SetMainColor(). ;  ; void SetMainColorPtr (Color_t *color);  ; void SetMainColorRGB (Float_t r, Float_t g, Float_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; void SetMainColorRGB (UChar_t r, UChar_t g, UChar_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; virtual void SetMainTransparency (Char_t t);  Set main-transparency. ;  ; void SetPickable (Bool_t p);  ; void SetPickableRecursively (Bool_t p);  Set pickable state on the element and all its children. ;  ; virtual Bool_t SetRnrChildren (Bool_t rnr);  Set render state of this element's children, i.e. ;  ; virtual Bool_t SetRnrSelf (Bool_t rnr);  Set render state of this element, i.e. ;  ; virtual Bool_t SetRnrSelfChildren (Bool_t rnr_self, Bool_t rnr_child",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:19275,Modifiability,inherit,inherited,19275,"Visibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:21015,Modifiability,inherit,inherited,21015,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:22108,Modifiability,inherit,inheritance,22108,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:24107,Modifiability,inherit,inherits,24107,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:24224,Modifiability,inherit,inherits,24224,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:27783,Modifiability,inherit,inherited,27783,"etDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ;",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:29247,Modifiability,inherit,inherited,29247,"t_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveWindow; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TEveWindowSlot * CreateDefaultWindowSlot ();  Create a default window slot. ;  ; static TEveWindowSlot * CreateWindowInTab (TGTab *tab, TEveWindow *eve_parent=nullptr);  Create a new tab in a given tab-widget and populate it with a default window-slot. ;  ; static TEveWindowSlot * CreateWindowMainFrame (TEveWindow *eve_parent=nullptr);  Create a new main-frame and populate it with a default window-slot. ;  ; static const char * DeclFileName ();  ; static Pixel_t GetCurrentBackgroundColor ();  Get background-color for marking the title-bar of current window. Static. ;  ; static UInt_t GetMainFrameDefHeight ();  Get default height for new main-frame windows. Static. ;  ; static UInt_t GetMainFrameDefWidth ();  Get default width for new main-frame windows. Static. ;  ; static Pixel_t GetMiniBarBackgroundColor ();  Get background-color for mini-",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:30874,Modifiability,inherit,inherited,30874,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGFrame * fGUIFrame;  ;  Protected Attributes inherit",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:31093,Modifiability,inherit,inherited,31093,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGFrame * fGUIFrame;  ;  Protected Attributes inherit",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:31308,Modifiability,inherit,inherited,31308,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGFrame * fGUIFrame;  ;  Protected Attributes inherit",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:31518,Modifiability,inherit,inherited,31518,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGFrame * fGUIFrame;  ;  Protected Attributes inherit",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:32036,Modifiability,inherit,inherited,32036,veElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGFrame * fGUIFrame;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t ,MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:32291,Modifiability,inherit,inherited,32291,ns inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGFrame * fGUIFrame;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TStri,MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:32400,Modifiability,inherit,inherited,32400,ns inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGFrame * fGUIFrame;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TStri,MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:32498,Modifiability,inherit,inherited,32498,ns inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGFrame * fGUIFrame;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TStri,MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:33488,Modifiability,inherit,inherited,33488,"Color;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowFrame (const TEveWindowFrame &);  ; TEveWindowFrame & operator= (const TEveWindowFrame &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x0100",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:33570,Modifiability,inherit,inherited,33570,"Color;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowFrame (const TEveWindowFrame &);  ; TEveWindowFrame & operator= (const TEveWindowFrame &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x0100",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:33807,Modifiability,inherit,inherited,33807,"  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowFrame (const TEveWindowFrame &);  ; TEveWindowFrame & operator= (const TEveWindowFrame &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:34492,Modifiability,inherit,inherited,34492,"  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowFrame (const TEveWindowFrame &);  ; TEveWindowFrame & operator= (const TEveWindowFrame &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:35130,Modifiability,inherit,inherited,35130," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annih",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:35302,Modifiability,inherit,inherited,35302," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annih",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:35468,Modifiability,inherit,inherited,35468," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annih",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:35957,Modifiability,inherit,inherited,35957,"<< ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:36056,Modifiability,inherit,inherited,36056,"<< ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:36368,Modifiability,inherit,inherited,36368," fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowFrame() [",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:36601,Modifiability,inherit,inherited,36601,"dren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowFrame() [1/2]. TEveWindowFrame::TEveWindowFrame ; (; const TEveWindowFrame & ; ). private . ◆ TEveWindowFrame() [2/2]. TEveWindowFrame::TEveWindowFrame ; (; TGFrame * ; frame, . const char * ; n = ""TEveWindowFrame"", . const char * ; t = """" . ). Construc",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:36819,Modifiability,inherit,inherited,36819,"hingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowFrame() [1/2]. TEveWindowFrame::TEveWindowFrame ; (; const TEveWindowFrame & ; ). private . ◆ TEveWindowFrame() [2/2]. TEveWindowFrame::TEveWindowFrame ; (; TGFrame * ; frame, . const char * ; n = ""TEveWindowFrame"", . const char * ; t = """" . ). Constructor. ; If the passed frame is 0, a default TGCompositeFrame frame is instantiated and set to local-cleanup. ; Definition at line 1305 of file TEveWindow.cxx. ◆ ~TEveWindowFrame(). TEv",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:36967,Modifiability,inherit,inherited,36967,"ted from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowFrame() [1/2]. TEveWindowFrame::TEveWindowFrame ; (; const TEveWindowFrame & ; ). private . ◆ TEveWindowFrame() [2/2]. TEveWindowFrame::TEveWindowFrame ; (; TGFrame * ; frame, . const char * ; n = ""TEveWindowFrame"", . const char * ; t = """" . ). Constructor. ; If the passed frame is 0, a default TGCompositeFrame frame is instantiated and set to local-cleanup. ; Definition at line 1305 of file TEveWindow.cxx. ◆ ~TEveWindowFrame(). TEveWindowFrame::~TEveWindowFrame ; (; ). override . Destructor. ; Definition at line 1319 of file TEveWindow.cxx. Member Function Documentation. ◆ Class(). static TClass * TEveWindowFrame::Class ; (; ). static . ReturnsT",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:20143,Security,hash,hash,20143,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:2211,Usability,undo,undocked,2211,"void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElemen",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowFrame.html:12097,Usability,feedback,feedback,12097,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
https://root.cern/doc/master/classTEveWindowManager.html:1226,Availability,down,down,1226,"ctions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowManager Class ReferenceGraphics » 3D Graphics » Event Display. ; Manager for EVE windows. ; Provides the concept of the current window and takes care for proper destruction of the windows.; It is also the EVE-parent of windows that are not attached into the hierarchy of EVE-windows.; Window-manager is created by the EVE-manager and can be retrieved via: gEve->GetWindowManager.; gEveR__EXTERN TEveManager * gEveDefinition TEveManager.h:243; TEveManager::GetWindowManagerTEveWindowManager * GetWindowManager() constDefinition TEveManager.h:142. Definition at line 21 of file TEveWindowManager.h. Public Member Functions;  TEveWindowManager (const char *n=""TEveWindowManager"", const char *t="""");  Constructor. ;  ;  ~TEveWindowManager () override;  Destructor. ;  ; void DeleteWindow (TEveWindow *w);  Called by a window before it gets deleted. ;  ; void DestroyWindows ();  Wait for all windows to shut-down. ;  ; TEveWindow * GetCurrentWindow () const;  ; TEveWindowSlot * GetCurrentWindowAsSlot () const;  Return current window dynamic-casted to TEveWindowSlot. ;  ; TEveWindow * GetDefaultContainer () const;  ; Bool_t HasDefaultContainer () const;  ; void HideAllEveDecorations ();  Hide all eve decorations (title-bar and mini-bar) on all frames. ;  ; TClass * IsA () const override;  ; Bool_t IsCurrentWindow (const TEveWindow *w) const;  ; void SelectWindow (TEveWindow *w);  Entry-point for communicating the fact that a window was acted upon in such a way that it should become the current window. ;  ; void SetDefaultContainer (TEveWindow *w);  ; void SetShowTitleBars (Bool_t state);  Set show title-bar state on all frames. ;  ; void ShowNormalEveDecorations ();  Show eve decorations (title-bar or mini-bar) as specified for the contained window on all frames. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:22327,Availability,error,error,22327,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:22416,Availability,error,error,22416,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:22571,Availability,error,error,22571,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:22868,Availability,error,error,22868,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:26952,Availability,error,error,26952,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:41381,Availability,down,down,41381,veWindowManager::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveWindowManager::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 62 of file TEveWindowManager.h. ◆ DeclFileName(). static const char * TEveWindowManager::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 62 of file TEveWindowManager.h. ◆ DeleteWindow(). void TEveWindowManager::DeleteWindow ; (; TEveWindow * ; w). Called by a window before it gets deleted. ; Definition at line 82 of file TEveWindowManager.cxx. ◆ DestroyWindowRecursively(). void TEveWindowManager::DestroyWindowRecursively ; (; TEveWindow * ; window). protected . Destroy window's children and then the window itself. ; Protected method used during shutdown. ; Definition at line 150 of file TEveWindowManager.cxx. ◆ DestroyWindows(). void TEveWindowManager::DestroyWindows ; (; ). Wait for all windows to shut-down. ; Definition at line 166 of file TEveWindowManager.cxx. ◆ GetCurrentWindow(). TEveWindow * TEveWindowManager::GetCurrentWindow ; (; ); const. inline . Definition at line 46 of file TEveWindowManager.h. ◆ GetCurrentWindowAsSlot(). TEveWindowSlot * TEveWindowManager::GetCurrentWindowAsSlot ; (; ); const. Return current window dynamic-casted to TEveWindowSlot. ; Definition at line 127 of file TEveWindowManager.cxx. ◆ GetDefaultContainer(). TEveWindow * TEveWindowManager::GetDefaultContainer ; (; ); const. inline . Definition at line 50 of file TEveWindowManager.h. ◆ HasDefaultContainer(). Bool_t TEveWindowManager::HasDefaultContainer ; (; ); const. inline . Definition at line 51 of file TEveWindowManager.h. ◆ HideAllEveDecorations(). void TEveWindowManager::HideAllEveDecorations ; (; ). Hide all eve decorations (title-bar and mini-bar) on all frames. ; Definition at line 182 of file TEveWindowManager.cxx. ◆ IsA(). TClass * TEveWindowManager::IsA ; (; ); const. inlineover,MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:18704,Deployability,update,update,18704,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:18906,Deployability,update,update,18906," model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const overrid",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:8864,Integrability,depend,dependant,8864," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:14541,Integrability,depend,dependent,14541,"onst;  Call Print() on source object. ;  ; virtual void ProjectAllChildren (Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of all children there. ;  ; virtual void ProjectChild (TEveElement *el, Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of child 'el' there. ;  ; virtual void PropagateMainColorToProjecteds (Color_t color, Color_t old_color);  Propagate color to projected elements. ;  ; virtual void PropagateMainTransparencyToProjecteds (Char_t t, Char_t old_t);  Propagate transparency to projected elements. ;  ; virtual void PropagateRnrStateToProjecteds ();  Propagate render state to the projected replicas of this element. ;  ; virtual void PropagateVizParamsToElements (TEveElement *el=nullptr);  Propagate visualization parameters from element el (defaulting to this) to all elements (children). ;  ; virtual void PropagateVizParamsToProjecteds ();  Propagate visualization parameters to dependent elements. ;  ; virtual TEveTrans * PtrMainTrans (Bool_t create=kTRUE);  Return pointer to main transformation. ;  ; void RecheckImpliedSelections ();  Call this if it is possible that implied-selection or highlight has changed for this element or for implied-selection this element is member of and you want to maintain consistent selection state. ;  ; const List_t & RefChildren () const;  ; virtual TEveTrans & RefMainTrans ();  Return reference to main transformation. ;  ; virtual void RemoveElement (TEveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElementLocal (TEveElement *el);  Perform additional local removal of el. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual void RemoveElementsLocal ();  Perform additional local removal of all elements. ;  ; virtual Bool_t RemoveFromListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Remove element from list-tree 'ltree' where its parent",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:22333,Integrability,message,message,22333,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:22874,Integrability,message,message,22874,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:23864,Integrability,message,message,23864,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:26958,Integrability,message,message,26958,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:27331,Integrability,message,message,27331," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main c",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:2605,Modifiability,inherit,inherited,2605,"d SelectWindow (TEveWindow *w);  Entry-point for communicating the fact that a window was acted upon in such a way that it should become the current window. ;  ; void SetDefaultContainer (TEveWindow *w);  ; void SetShowTitleBars (Bool_t state);  Set show title-bar state on all frames. ;  ; void ShowNormalEveDecorations ();  Show eve decorations (title-bar or mini-bar) as specified for the contained window on all frames. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WindowDeleted (TEveWindow *window);  Emit the ""WindowDeleted(TEveWindow*)"" signal. ;  ; void WindowDocked (TEveWindow *window);  Emit the ""WindowDocked(TEveWindow*)"" signal. ;  ; void WindowSelected (TEveWindow *window);  Emit the ""WindowSelected(TEveWindow*)"" signal. ;  ; void WindowUndocked (TEveWindow *window);  Emit the ""WindowUndocked(TEveWindow*)"" signal. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void Set",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:2959,Modifiability,inherit,inherited,2959,"e);  Set show title-bar state on all frames. ;  ; void ShowNormalEveDecorations ();  Show eve decorations (title-bar or mini-bar) as specified for the contained window on all frames. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WindowDeleted (TEveWindow *window);  Emit the ""WindowDeleted(TEveWindow*)"" signal. ;  ; void WindowDocked (TEveWindow *window);  Emit the ""WindowDocked(TEveWindow*)"" signal. ;  ; void WindowSelected (TEveWindow *window);  Emit the ""WindowSelected(TEveWindow*)"" signal. ;  ; void WindowUndocked (TEveWindow *window);  Emit the ""WindowUndocked(TEveWindow*)"" signal. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:4118,Modifiability,inherit,inherited,4118,"ldClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;  ; void SetElementTitle (const char *title) override;  Virtual function for setting of title of an element. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Opti",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:8645,Modifiability,variab,variable,8645,"oy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:8740,Modifiability,variab,variable,8740," this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-i",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:16466,Modifiability,variab,variable,16466,"mListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Remove element from list-tree 'ltree' where its parent item is 'parent_lti'. ;  ; virtual Int_t RemoveFromListTrees (TEveElement *parent);  Remove element from all list-trees where 'parent' is the user-data of the parent list-tree-item. ;  ; virtual void RemoveParent (TEveElement *re);  Remove re from the list of parents. ;  ; void ResetAllCSCBits ();  ; void ResetCSCBits (UChar_t f);  ; void SaveVizParams (std::ostream &out, const TString &tag, const TString &var);  Save visualization parameters for this element with given tag. ;  ; virtual void SelectElement (Bool_t state);  Set element's selection state. Stamp appropriately. ;  ; void SetCompound (TEveCompound *c);  ; void SetCSCBits (UChar_t f);  ; void SetDestroyOnZeroRefCnt (Bool_t d);  Sets the state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; void SetEditMainColor (Bool_t x);  ; void SetEditMainTransparency (Bool_t x);  ; void SetMainAlpha (Float_t alpha);  Set main-transparency via float alpha variable. ;  ; virtual void SetMainColor (Color_t color);  Set main color of the element. ;  ; void SetMainColorPixel (Pixel_t pixel);  Convert pixel to Color_t and call SetMainColor(). ;  ; void SetMainColorPtr (Color_t *color);  ; void SetMainColorRGB (Float_t r, Float_t g, Float_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; void SetMainColorRGB (UChar_t r, UChar_t g, UChar_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; virtual void SetMainTransparency (Char_t t);  Set main-transparency. ;  ; void SetPickable (Bool_t p);  ; void SetPickableRecursively (Bool_t p);  Set pickable state on the element and all its children. ;  ; virtual Bool_t SetRnrChildren (Bool_t rnr);  Set render state of this element's children, i.e. ;  ; virtual Bool_t SetRnrSelf (Bool_t rnr);  Set render state of this element, i.e. ;  ; virtual Bool_t SetRnrSelfChildren (Bool_t rnr_self, Bool_t rnr_child",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:19130,Modifiability,inherit,inherited,19130,"Visibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:20870,Modifiability,inherit,inherited,20870,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:21963,Modifiability,inherit,inheritance,21963,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:23962,Modifiability,inherit,inherits,23962,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:24079,Modifiability,inherit,inherits,24079,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:27638,Modifiability,inherit,inherited,27638,"etDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ;",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:28908,Modifiability,inherit,inherited,28908," &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without args. ;  ; template<typename T > ; void Emit (const char *s",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:31070,Modifiability,inherit,inherited,31070,"hPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * Decl",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:31289,Modifiability,inherit,inherited,31289,"hPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * Decl",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:31504,Modifiability,inherit,inherited,31504,"hPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * Decl",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:31714,Modifiability,inherit,inherited,31714,"hPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * Decl",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:32232,Modifiability,inherit,inherited,32232,"e ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""cla",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:32451,Modifiability,inherit,inherited,32451,"e ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""cla",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:33762,Modifiability,inherit,inherited,33762," (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void DestroyWindowRecursively (TEveWindow *window);  Destroy window's children and then the window itself. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; TEveWindow * fCurrentWindow;  ; TEveWindow * fDefaultContainer;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UCha",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:34081,Modifiability,inherit,inherited,34081,");  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void DestroyWindowRecursively (TEveWindow *window);  Destroy window's children and then the window itself. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; TEveWindow * fCurrentWindow;  ; TEveWindow * fDefaultContainer;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEv",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:34292,Modifiability,inherit,inherited,34292,"ver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void DestroyWindowRecursively (TEveWindow *window);  Destroy window's children and then the window itself. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; TEveWindow * fCurrentWindow;  ; TEveWindow * fDefaultContainer;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fR",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:34513,Modifiability,inherit,inherited,34513,"ow *window);  Destroy window's children and then the window itself. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; TEveWindow * fCurrentWindow;  ; TEveWindow * fDefaultContainer;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:34611,Modifiability,inherit,inherited,34611,"ow *window);  Destroy window's children and then the window itself. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; TEveWindow * fCurrentWindow;  ; TEveWindow * fDefaultContainer;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:35601,Modifiability,inherit,inherited,35601,"_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TEveWindowManager (const TEveWindowManager &);  ; TEveWindowManager & operator= (const TEveWindowManager &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typed",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:35683,Modifiability,inherit,inherited,35683,"_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TEveWindowManager (const TEveWindowManager &);  ; TEveWindowManager & operator= (const TEveWindowManager &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typed",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:35767,Modifiability,inherit,inherited,35767,"_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TEveWindowManager (const TEveWindowManager &);  ; TEveWindowManager & operator= (const TEveWindowManager &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typed",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:36134,Modifiability,inherit,inherited,36134," Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TEveWindowManager (const TEveWindowManager &);  ; TEveWindowManager & operator= (const TEveWindowManager &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:36819,Modifiability,inherit,inherited,36819," Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TEveWindowManager (const TEveWindowManager &);  ; TEveWindowManager & operator= (const TEveWindowManager &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:37457,Modifiability,inherit,inherited,37457," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:37629,Modifiability,inherit,inherited,37629," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:37795,Modifiability,inherit,inherited,37795," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:38284,Modifiability,inherit,inherited,38284," << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:38390,Modifiability,inherit,inherited,38390," << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:38544,Modifiability,inherit,inherited,38544,"ited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TEveWindowManager.h>. Inheritance diagram for TEveWindowManager:. This browser is not able to show SVG: try Fire",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:39400,Modifiability,inherit,inherited,39400,"ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TEveWindowManager.h>. Inheritance diagram for TEveWindowManager:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowManager() [1/2]. TEveWindowManager::TEveWindowManager ; (; const TEveWindowManager & ; ). private . ◆ TEveWindowManager() [2/2]. TEveWindowManager::TEveWindowManager ; (; const char * ; n = ""TEveWindowManager"", . const char * ; t = """" . ). Constructor. ; Definition at line 36 of file TEveWindowManager.cxx. ◆ ~TEveWindowManager(). TEveWindowManager::~TEveWindowManager ; (; ). override . Destructor. ; Definition at line 47 of file TEveWindowManager.cxx. Member Function Documentation. ◆ Class(). static TClass * TEveWindowManager::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveWindowManager::Class_Name ; (; ). static . ReturnsName of this class",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:19998,Security,hash,hash,19998,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowManager.html:11834,Usability,feedback,feedback,11834,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
https://root.cern/doc/master/classTEveWindowPack.html:22886,Availability,error,error,22886,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:22975,Availability,error,error,22975,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:23130,Availability,error,error,23130,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:23427,Availability,error,error,23427,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:27511,Availability,error,error,27511,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:19263,Deployability,update,update,19263,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:19465,Deployability,update,update,19465," model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const overrid",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:9541,Integrability,depend,dependant,9541," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:15100,Integrability,depend,dependent,15100,"onst;  Call Print() on source object. ;  ; virtual void ProjectAllChildren (Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of all children there. ;  ; virtual void ProjectChild (TEveElement *el, Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of child 'el' there. ;  ; virtual void PropagateMainColorToProjecteds (Color_t color, Color_t old_color);  Propagate color to projected elements. ;  ; virtual void PropagateMainTransparencyToProjecteds (Char_t t, Char_t old_t);  Propagate transparency to projected elements. ;  ; virtual void PropagateRnrStateToProjecteds ();  Propagate render state to the projected replicas of this element. ;  ; virtual void PropagateVizParamsToElements (TEveElement *el=nullptr);  Propagate visualization parameters from element el (defaulting to this) to all elements (children). ;  ; virtual void PropagateVizParamsToProjecteds ();  Propagate visualization parameters to dependent elements. ;  ; virtual TEveTrans * PtrMainTrans (Bool_t create=kTRUE);  Return pointer to main transformation. ;  ; void RecheckImpliedSelections ();  Call this if it is possible that implied-selection or highlight has changed for this element or for implied-selection this element is member of and you want to maintain consistent selection state. ;  ; const List_t & RefChildren () const;  ; virtual TEveTrans & RefMainTrans ();  Return reference to main transformation. ;  ; virtual void RemoveElement (TEveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElementLocal (TEveElement *el);  Perform additional local removal of el. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual void RemoveElementsLocal ();  Perform additional local removal of all elements. ;  ; virtual Bool_t RemoveFromListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Remove element from list-tree 'ltree' where its parent",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:22892,Integrability,message,message,22892,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:23433,Integrability,message,message,23433,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:24423,Integrability,message,message,24423,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:27517,Integrability,message,message,27517,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:27890,Integrability,message,message,27890," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main c",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:1497,Modifiability,inherit,inherited,1497,"nctions;  TEveWindowPack (TGPack *p, const char *n=""TEveWindowPack"", const char *t="""");  Constructor. ;  ;  ~TEveWindowPack () override;  Destructor. ;  ; Bool_t CanMakeNewSlots () const override;  ; void EqualizeFrames ();  Refit existing frames so that their lengths are equal. ;  ; void FlipOrientation ();  Flip orientation of the pack (vertical / horizontal). ;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the pack. ;  ; TGPack * GetPack () const;  ; TClass * IsA () const override;  ; TEveWindowSlot * NewSlot () override;  Create a new frame-slot at the last position of the pack. ;  ; virtual TEveWindowSlot * NewSlotWithWeight (Float_t w);  Create a new weighted frame-slot at the last position of the pack. ;  ; void SetHorizontal ();  ; void SetVertical (Bool_t x=kTRUE);  Set orientation of the pack (vertical / horizontal). ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:3282,Modifiability,inherit,inherited,3282,"Frame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void Set",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:3636,Modifiability,inherit,inherited,3636,"unction called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:4795,Modifiability,inherit,inherited,4795,"ldClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;  ; void SetElementTitle (const char *title) override;  Virtual function for setting of title of an element. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Opti",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:9322,Modifiability,variab,variable,9322,"oy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:9417,Modifiability,variab,variable,9417," this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-i",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:17025,Modifiability,variab,variable,17025,"mListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Remove element from list-tree 'ltree' where its parent item is 'parent_lti'. ;  ; virtual Int_t RemoveFromListTrees (TEveElement *parent);  Remove element from all list-trees where 'parent' is the user-data of the parent list-tree-item. ;  ; virtual void RemoveParent (TEveElement *re);  Remove re from the list of parents. ;  ; void ResetAllCSCBits ();  ; void ResetCSCBits (UChar_t f);  ; void SaveVizParams (std::ostream &out, const TString &tag, const TString &var);  Save visualization parameters for this element with given tag. ;  ; virtual void SelectElement (Bool_t state);  Set element's selection state. Stamp appropriately. ;  ; void SetCompound (TEveCompound *c);  ; void SetCSCBits (UChar_t f);  ; void SetDestroyOnZeroRefCnt (Bool_t d);  Sets the state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; void SetEditMainColor (Bool_t x);  ; void SetEditMainTransparency (Bool_t x);  ; void SetMainAlpha (Float_t alpha);  Set main-transparency via float alpha variable. ;  ; virtual void SetMainColor (Color_t color);  Set main color of the element. ;  ; void SetMainColorPixel (Pixel_t pixel);  Convert pixel to Color_t and call SetMainColor(). ;  ; void SetMainColorPtr (Color_t *color);  ; void SetMainColorRGB (Float_t r, Float_t g, Float_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; void SetMainColorRGB (UChar_t r, UChar_t g, UChar_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; virtual void SetMainTransparency (Char_t t);  Set main-transparency. ;  ; void SetPickable (Bool_t p);  ; void SetPickableRecursively (Bool_t p);  Set pickable state on the element and all its children. ;  ; virtual Bool_t SetRnrChildren (Bool_t rnr);  Set render state of this element's children, i.e. ;  ; virtual Bool_t SetRnrSelf (Bool_t rnr);  Set render state of this element, i.e. ;  ; virtual Bool_t SetRnrSelfChildren (Bool_t rnr_self, Bool_t rnr_child",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:19689,Modifiability,inherit,inherited,19689,"Visibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:21429,Modifiability,inherit,inherited,21429,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:22522,Modifiability,inherit,inheritance,22522,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:24521,Modifiability,inherit,inherits,24521,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:24638,Modifiability,inherit,inherits,24638,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:28197,Modifiability,inherit,inherited,28197,"etDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ;",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:29661,Modifiability,inherit,inherited,29661,"t_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveWindow; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TEveWindowSlot * CreateDefaultWindowSlot ();  Create a default window slot. ;  ; static TEveWindowSlot * CreateWindowInTab (TGTab *tab, TEveWindow *eve_parent=nullptr);  Create a new tab in a given tab-widget and populate it with a default window-slot. ;  ; static TEveWindowSlot * CreateWindowMainFrame (TEveWindow *eve_parent=nullptr);  Create a new main-frame and populate it with a default window-slot. ;  ; static const char * DeclFileName ();  ; static Pixel_t GetCurrentBackgroundColor ();  Get background-color for marking the title-bar of current window. Static. ;  ; static UInt_t GetMainFrameDefHeight ();  Get default height for new main-frame windows. Static. ;  ; static UInt_t GetMainFrameDefWidth ();  Get default width for new main-frame windows. Static. ;  ; static Pixel_t GetMiniBarBackgroundColor ();  Get background-color for mini-",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:31288,Modifiability,inherit,inherited,31288,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGPack * fPack;  ;  Protected Attributes inherited fr",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:31507,Modifiability,inherit,inherited,31507,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGPack * fPack;  ;  Protected Attributes inherited fr",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:31722,Modifiability,inherit,inherited,31722,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGPack * fPack;  ;  Protected Attributes inherited fr",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:31932,Modifiability,inherit,inherited,31932,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGPack * fPack;  ;  Protected Attributes inherited fr",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:32450,Modifiability,inherit,inherited,32450,veElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGPack * fPack;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fPare,MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:32700,Modifiability,inherit,inherited,32700,ions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGPack * fPack;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString,MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:32809,Modifiability,inherit,inherited,32809,ions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGPack * fPack;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString,MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:32907,Modifiability,inherit,inherited,32907,ions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGPack * fPack;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString,MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:33897,Modifiability,inherit,inherited,33897,"Color;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowPack (const TEveWindowPack &);  ; TEveWindowPack & operator= (const TEveWindowPack &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:33979,Modifiability,inherit,inherited,33979,"Color;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowPack (const TEveWindowPack &);  ; TEveWindowPack & operator= (const TEveWindowPack &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:34212,Modifiability,inherit,inherited,34212,"elf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowPack (const TEveWindowPack &);  ; TEveWindowPack & operator= (const TEveWindowPack &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:34897,Modifiability,inherit,inherited,34897,"elf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowPack (const TEveWindowPack &);  ; TEveWindowPack & operator= (const TEveWindowPack &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:35535,Modifiability,inherit,inherited,35535," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annih",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:35707,Modifiability,inherit,inherited,35707," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annih",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:35873,Modifiability,inherit,inherited,35873," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annih",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:36362,Modifiability,inherit,inherited,36362,"<< ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:36461,Modifiability,inherit,inherited,36461,"<< ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:36773,Modifiability,inherit,inherited,36773," fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowPack:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowPack() [1/",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:37006,Modifiability,inherit,inherited,37006,"dren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowPack:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowPack() [1/2]. TEveWindowPack::TEveWindowPack ; (; const TEveWindowPack & ; ). private . ◆ TEveWindowPack() [2/2]. TEveWindowPack::TEveWindowPack ; (; TGPack * ; p, . const char * ; n = ""TEveWindowPack"", . const char * ; t = """" . ). Constructor. ; If pass",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:37224,Modifiability,inherit,inherited,37224,"hingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowPack:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowPack() [1/2]. TEveWindowPack::TEveWindowPack ; (; const TEveWindowPack & ; ). private . ◆ TEveWindowPack() [2/2]. TEveWindowPack::TEveWindowPack ; (; TGPack * ; p, . const char * ; n = ""TEveWindowPack"", . const char * ; t = """" . ). Constructor. ; If passed pack is 0, a default one is instantiated. ; Definition at line 1352 of file TEveWindow.cxx. ◆ ~TEveWindowPack(). TEveWindowPack::~TEveWindowPack ; (; ). override . Destructor. ; De",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:37372,Modifiability,inherit,inherited,37372,"ted from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowPack:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowPack() [1/2]. TEveWindowPack::TEveWindowPack ; (; const TEveWindowPack & ; ). private . ◆ TEveWindowPack() [2/2]. TEveWindowPack::TEveWindowPack ; (; TGPack * ; p, . const char * ; n = ""TEveWindowPack"", . const char * ; t = """" . ). Constructor. ; If passed pack is 0, a default one is instantiated. ; Definition at line 1352 of file TEveWindow.cxx. ◆ ~TEveWindowPack(). TEveWindowPack::~TEveWindowPack ; (; ). override . Destructor. ; Definition at line 1361 of file TEveWindow.cxx. Member Function Documentation. ◆ CanMakeNewSlots(). Bool_t TEveWindowPack::CanMakeNewSlots ; (; ); const. inlineoverridevirtual . Reimplemented from TEveWindow.; Definition",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:20557,Security,hash,hash,20557,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:2625,Usability,undo,undocked,2625,"veWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElemen",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowPack.html:12511,Usability,feedback,feedback,12511,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
https://root.cern/doc/master/classTEveWindowSlot.html:22888,Availability,error,error,22888,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:22977,Availability,error,error,22977,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:23132,Availability,error,error,23132,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:23429,Availability,error,error,23429,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:27513,Availability,error,error,27513,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:19265,Deployability,update,update,19265,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:19467,Deployability,update,update,19467," model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const overrid",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:9543,Integrability,depend,dependant,9543," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:15102,Integrability,depend,dependent,15102,"onst;  Call Print() on source object. ;  ; virtual void ProjectAllChildren (Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of all children there. ;  ; virtual void ProjectChild (TEveElement *el, Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of child 'el' there. ;  ; virtual void PropagateMainColorToProjecteds (Color_t color, Color_t old_color);  Propagate color to projected elements. ;  ; virtual void PropagateMainTransparencyToProjecteds (Char_t t, Char_t old_t);  Propagate transparency to projected elements. ;  ; virtual void PropagateRnrStateToProjecteds ();  Propagate render state to the projected replicas of this element. ;  ; virtual void PropagateVizParamsToElements (TEveElement *el=nullptr);  Propagate visualization parameters from element el (defaulting to this) to all elements (children). ;  ; virtual void PropagateVizParamsToProjecteds ();  Propagate visualization parameters to dependent elements. ;  ; virtual TEveTrans * PtrMainTrans (Bool_t create=kTRUE);  Return pointer to main transformation. ;  ; void RecheckImpliedSelections ();  Call this if it is possible that implied-selection or highlight has changed for this element or for implied-selection this element is member of and you want to maintain consistent selection state. ;  ; const List_t & RefChildren () const;  ; virtual TEveTrans & RefMainTrans ();  Return reference to main transformation. ;  ; virtual void RemoveElement (TEveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElementLocal (TEveElement *el);  Perform additional local removal of el. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual void RemoveElementsLocal ();  Perform additional local removal of all elements. ;  ; virtual Bool_t RemoveFromListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Remove element from list-tree 'ltree' where its parent",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:22894,Integrability,message,message,22894,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:23435,Integrability,message,message,23435,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:24425,Integrability,message,message,24425,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:27519,Integrability,message,message,27519,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:27892,Integrability,message,message,27892," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main c",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:1415,Modifiability,inherit,inherited,1415," ; Definition at line 301 of file TEveWindow.h. Public Member Functions;  TEveWindowSlot (const char *n=""TEveWindowSlot"", const char *t="""");  Constructor. ;  ;  ~TEveWindowSlot () override;  Destructor. ;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the big button to make slot current. ;  ; TClass * IsA () const override;  ; TEveWindowFrame * MakeFrame (TGFrame *frame=nullptr);  An eve-window-frame is created and frame is passed into it. ;  ; TEveWindowPack * MakePack ();  A pack is created in place of this window-slot. ;  ; TEveWindowTab * MakeTab ();  A tab is created in place of this window-slot. ;  ; TGCompositeFrame * StartEmbedding ();  Start embedding a window that will replace the current slot. ;  ; TEveWindowFrame * StopEmbedding (const char *name=nullptr);  An embedded window is created in place of this window-slot. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; virtual Bool_t CanMakeNewSlots () const;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initia",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:3284,Modifiability,inherit,inherited,3284,"Frame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void Set",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:3638,Modifiability,inherit,inherited,3638,"unction called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:4797,Modifiability,inherit,inherited,4797,"ldClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;  ; void SetElementTitle (const char *title) override;  Virtual function for setting of title of an element. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Opti",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:9324,Modifiability,variab,variable,9324,"oy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:9419,Modifiability,variab,variable,9419," this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-i",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:17027,Modifiability,variab,variable,17027,"mListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Remove element from list-tree 'ltree' where its parent item is 'parent_lti'. ;  ; virtual Int_t RemoveFromListTrees (TEveElement *parent);  Remove element from all list-trees where 'parent' is the user-data of the parent list-tree-item. ;  ; virtual void RemoveParent (TEveElement *re);  Remove re from the list of parents. ;  ; void ResetAllCSCBits ();  ; void ResetCSCBits (UChar_t f);  ; void SaveVizParams (std::ostream &out, const TString &tag, const TString &var);  Save visualization parameters for this element with given tag. ;  ; virtual void SelectElement (Bool_t state);  Set element's selection state. Stamp appropriately. ;  ; void SetCompound (TEveCompound *c);  ; void SetCSCBits (UChar_t f);  ; void SetDestroyOnZeroRefCnt (Bool_t d);  Sets the state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; void SetEditMainColor (Bool_t x);  ; void SetEditMainTransparency (Bool_t x);  ; void SetMainAlpha (Float_t alpha);  Set main-transparency via float alpha variable. ;  ; virtual void SetMainColor (Color_t color);  Set main color of the element. ;  ; void SetMainColorPixel (Pixel_t pixel);  Convert pixel to Color_t and call SetMainColor(). ;  ; void SetMainColorPtr (Color_t *color);  ; void SetMainColorRGB (Float_t r, Float_t g, Float_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; void SetMainColorRGB (UChar_t r, UChar_t g, UChar_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; virtual void SetMainTransparency (Char_t t);  Set main-transparency. ;  ; void SetPickable (Bool_t p);  ; void SetPickableRecursively (Bool_t p);  Set pickable state on the element and all its children. ;  ; virtual Bool_t SetRnrChildren (Bool_t rnr);  Set render state of this element's children, i.e. ;  ; virtual Bool_t SetRnrSelf (Bool_t rnr);  Set render state of this element, i.e. ;  ; virtual Bool_t SetRnrSelfChildren (Bool_t rnr_self, Bool_t rnr_child",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:19691,Modifiability,inherit,inherited,19691,"Visibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:21431,Modifiability,inherit,inherited,21431,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:22524,Modifiability,inherit,inheritance,22524,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:24523,Modifiability,inherit,inherits,24523,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:24640,Modifiability,inherit,inherits,24640,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:28199,Modifiability,inherit,inherited,28199,"etDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ;",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:29663,Modifiability,inherit,inherited,29663,"t_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveWindow; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TEveWindowSlot * CreateDefaultWindowSlot ();  Create a default window slot. ;  ; static TEveWindowSlot * CreateWindowInTab (TGTab *tab, TEveWindow *eve_parent=nullptr);  Create a new tab in a given tab-widget and populate it with a default window-slot. ;  ; static TEveWindowSlot * CreateWindowMainFrame (TEveWindow *eve_parent=nullptr);  Create a new main-frame and populate it with a default window-slot. ;  ; static const char * DeclFileName ();  ; static Pixel_t GetCurrentBackgroundColor ();  Get background-color for marking the title-bar of current window. Static. ;  ; static UInt_t GetMainFrameDefHeight ();  Get default height for new main-frame windows. Static. ;  ; static UInt_t GetMainFrameDefWidth ();  Get default width for new main-frame windows. Static. ;  ; static Pixel_t GetMiniBarBackgroundColor ();  Get background-color for mini-",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:31290,Modifiability,inherit,inherited,31290,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void SetCurrent (Bool_t curr) override;  Set cu",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:31509,Modifiability,inherit,inherited,31509,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void SetCurrent (Bool_t curr) override;  Set cu",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:31724,Modifiability,inherit,inherited,31724,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void SetCurrent (Bool_t curr) override;  Set cu",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:31934,Modifiability,inherit,inherited,31934,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void SetCurrent (Bool_t curr) override;  Set cu",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:32452,Modifiability,inherit,inherited,32452,"veElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void SetCurrent (Bool_t curr) override;  Set current state of this window-slot. ;  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TGCompositeFrame * fEmbedBuffer;  ; TGTextButton * fEmptyButt;  ;  Protected At",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:32780,Modifiability,inherit,inherited,32780,"; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void SetCurrent (Bool_t curr) override;  Set current state of this window-slot. ;  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TGCompositeFrame * fEmbedBuffer;  ; TGTextButton * fEmptyButt;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency; ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:33009,Modifiability,inherit,inherited,33009,"Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void SetCurrent (Bool_t curr) override;  Set current state of this window-slot. ;  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TGCompositeFrame * fEmbedBuffer;  ; TGTextButton * fEmptyButt;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ;",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:33242,Modifiability,inherit,inherited,33242,"r only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void SetCurrent (Bool_t curr) override;  Set current state of this window-slot. ;  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TGCompositeFrame * fEmbedBuffer;  ; TGTextButton * fEmptyButt;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:33535,Modifiability,inherit,inherited,33535,"ow-slot. ;  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TGCompositeFrame * fEmbedBuffer;  ; TGTextButton * fEmptyButt;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherit",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:33644,Modifiability,inherit,inherited,33644,"ow-slot. ;  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TGCompositeFrame * fEmbedBuffer;  ; TGTextButton * fEmptyButt;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherit",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:33742,Modifiability,inherit,inherited,33742,"ow-slot. ;  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TGCompositeFrame * fEmbedBuffer;  ; TGTextButton * fEmptyButt;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherit",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:34732,Modifiability,inherit,inherited,34732,"Color;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowSlot (const TEveWindowSlot &);  ; TEveWindowSlot & operator= (const TEveWindowSlot &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:34814,Modifiability,inherit,inherited,34814,"Color;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowSlot (const TEveWindowSlot &);  ; TEveWindowSlot & operator= (const TEveWindowSlot &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:35047,Modifiability,inherit,inherited,35047,"elf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowSlot (const TEveWindowSlot &);  ; TEveWindowSlot & operator= (const TEveWindowSlot &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:35732,Modifiability,inherit,inherited,35732,"elf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowSlot (const TEveWindowSlot &);  ; TEveWindowSlot & operator= (const TEveWindowSlot &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:36370,Modifiability,inherit,inherited,36370," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWi",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:36542,Modifiability,inherit,inherited,36542," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWi",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:36708,Modifiability,inherit,inherited,36708," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWi",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:37197,Modifiability,inherit,inherited,37197," << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowSlot:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowSlot() [1/2]. TEveWindowSlot::TEveWindowSlot ; (; const TEveWindowSlot & ; ). private . ◆ TEveWindowSlot() [2/2]. TEveWindowSlot::TEveWindowSlot ; (; const char * ; n = ""TEveWindowSlot"", . const char * ; t = """" . ). Constructor. ; Definition at line 1137 of file TEveWindow.cxx. ◆ ~TEveWindowSlot(). TEveWindowSlot::~TEveWindowSlot ; (; ). override . Destructor. ; Definitio",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:37303,Modifiability,inherit,inherited,37303," << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowSlot:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowSlot() [1/2]. TEveWindowSlot::TEveWindowSlot ; (; const TEveWindowSlot & ; ). private . ◆ TEveWindowSlot() [2/2]. TEveWindowSlot::TEveWindowSlot ; (; const char * ; n = ""TEveWindowSlot"", . const char * ; t = """" . ). Constructor. ; Definition at line 1137 of file TEveWindow.cxx. ◆ ~TEveWindowSlot(). TEveWindowSlot::~TEveWindowSlot ; (; ). override . Destructor. ; Definitio",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:37451,Modifiability,inherit,inherited,37451,"rited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowSlot:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowSlot() [1/2]. TEveWindowSlot::TEveWindowSlot ; (; const TEveWindowSlot & ; ). private . ◆ TEveWindowSlot() [2/2]. TEveWindowSlot::TEveWindowSlot ; (; const char * ; n = ""TEveWindowSlot"", . const char * ; t = """" . ). Constructor. ; Definition at line 1137 of file TEveWindow.cxx. ◆ ~TEveWindowSlot(). TEveWindowSlot::~TEveWindowSlot ; (; ). override . Destructor. ; Definition at line 1152 of file TEveWindow.cxx. Member Function Documentation. ◆ Class(). static TClass * TEveWindowSlot::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveWindowSlot::Class_Name ; (; ). static . ReturnsName of this class .",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:20559,Security,hash,hash,20559,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:2627,Usability,undo,undocked,2627,"void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElemen",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowSlot.html:12513,Usability,feedback,feedback,12513,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
https://root.cern/doc/master/classTEveWindowTab.html:22435,Availability,error,error,22435,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:22524,Availability,error,error,22524,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:22679,Availability,error,error,22679,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:22976,Availability,error,error,22976,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:27060,Availability,error,error,27060,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:18812,Deployability,update,update,18812,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:19014,Deployability,update,update,19014," model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const overrid",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:9090,Integrability,depend,dependant,9090," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:14649,Integrability,depend,dependent,14649,"onst;  Call Print() on source object. ;  ; virtual void ProjectAllChildren (Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of all children there. ;  ; virtual void ProjectChild (TEveElement *el, Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of child 'el' there. ;  ; virtual void PropagateMainColorToProjecteds (Color_t color, Color_t old_color);  Propagate color to projected elements. ;  ; virtual void PropagateMainTransparencyToProjecteds (Char_t t, Char_t old_t);  Propagate transparency to projected elements. ;  ; virtual void PropagateRnrStateToProjecteds ();  Propagate render state to the projected replicas of this element. ;  ; virtual void PropagateVizParamsToElements (TEveElement *el=nullptr);  Propagate visualization parameters from element el (defaulting to this) to all elements (children). ;  ; virtual void PropagateVizParamsToProjecteds ();  Propagate visualization parameters to dependent elements. ;  ; virtual TEveTrans * PtrMainTrans (Bool_t create=kTRUE);  Return pointer to main transformation. ;  ; void RecheckImpliedSelections ();  Call this if it is possible that implied-selection or highlight has changed for this element or for implied-selection this element is member of and you want to maintain consistent selection state. ;  ; const List_t & RefChildren () const;  ; virtual TEveTrans & RefMainTrans ();  Return reference to main transformation. ;  ; virtual void RemoveElement (TEveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElementLocal (TEveElement *el);  Perform additional local removal of el. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual void RemoveElementsLocal ();  Perform additional local removal of all elements. ;  ; virtual Bool_t RemoveFromListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Remove element from list-tree 'ltree' where its parent",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:22441,Integrability,message,message,22441,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:22982,Integrability,message,message,22982,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:23972,Integrability,message,message,23972,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:27066,Integrability,message,message,27066,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:27439,Integrability,message,message,27439," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main c",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:1046,Modifiability,inherit,inherited,1046,"OOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowTab Class ReferenceGraphics » 3D Graphics » Event Display. ; Encapsulates TGTab into an eve-window. ; The tab is owned by the eve-window. ; Definition at line 395 of file TEveWindow.h. Public Member Functions;  TEveWindowTab (TGTab *tab, const char *n=""TEveWindowTab"", const char *t="""");  Constructor. ;  ;  ~TEveWindowTab () override;  Destructor. ;  ; Bool_t CanMakeNewSlots () const override;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the tab. ;  ; TGTab * GetTab () const;  ; TClass * IsA () const override;  ; TEveWindowSlot * NewSlot () override;  Create new frame-slot - a new tab. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:2831,Modifiability,inherit,inherited,2831,"Frame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void Set",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:3185,Modifiability,inherit,inherited,3185,"unction called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:4344,Modifiability,inherit,inherited,4344,"ldClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;  ; void SetElementTitle (const char *title) override;  Virtual function for setting of title of an element. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Opti",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:8871,Modifiability,variab,variable,8871,"oy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:8966,Modifiability,variab,variable,8966," this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-i",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:16574,Modifiability,variab,variable,16574,"mListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Remove element from list-tree 'ltree' where its parent item is 'parent_lti'. ;  ; virtual Int_t RemoveFromListTrees (TEveElement *parent);  Remove element from all list-trees where 'parent' is the user-data of the parent list-tree-item. ;  ; virtual void RemoveParent (TEveElement *re);  Remove re from the list of parents. ;  ; void ResetAllCSCBits ();  ; void ResetCSCBits (UChar_t f);  ; void SaveVizParams (std::ostream &out, const TString &tag, const TString &var);  Save visualization parameters for this element with given tag. ;  ; virtual void SelectElement (Bool_t state);  Set element's selection state. Stamp appropriately. ;  ; void SetCompound (TEveCompound *c);  ; void SetCSCBits (UChar_t f);  ; void SetDestroyOnZeroRefCnt (Bool_t d);  Sets the state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; void SetEditMainColor (Bool_t x);  ; void SetEditMainTransparency (Bool_t x);  ; void SetMainAlpha (Float_t alpha);  Set main-transparency via float alpha variable. ;  ; virtual void SetMainColor (Color_t color);  Set main color of the element. ;  ; void SetMainColorPixel (Pixel_t pixel);  Convert pixel to Color_t and call SetMainColor(). ;  ; void SetMainColorPtr (Color_t *color);  ; void SetMainColorRGB (Float_t r, Float_t g, Float_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; void SetMainColorRGB (UChar_t r, UChar_t g, UChar_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; virtual void SetMainTransparency (Char_t t);  Set main-transparency. ;  ; void SetPickable (Bool_t p);  ; void SetPickableRecursively (Bool_t p);  Set pickable state on the element and all its children. ;  ; virtual Bool_t SetRnrChildren (Bool_t rnr);  Set render state of this element's children, i.e. ;  ; virtual Bool_t SetRnrSelf (Bool_t rnr);  Set render state of this element, i.e. ;  ; virtual Bool_t SetRnrSelfChildren (Bool_t rnr_self, Bool_t rnr_child",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:19238,Modifiability,inherit,inherited,19238,"Visibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:20978,Modifiability,inherit,inherited,20978,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:22071,Modifiability,inherit,inheritance,22071,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:24070,Modifiability,inherit,inherits,24070,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:24187,Modifiability,inherit,inherits,24187,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:27746,Modifiability,inherit,inherited,27746,"etDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ;",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:29210,Modifiability,inherit,inherited,29210,"t_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveWindow; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TEveWindowSlot * CreateDefaultWindowSlot ();  Create a default window slot. ;  ; static TEveWindowSlot * CreateWindowInTab (TGTab *tab, TEveWindow *eve_parent=nullptr);  Create a new tab in a given tab-widget and populate it with a default window-slot. ;  ; static TEveWindowSlot * CreateWindowMainFrame (TEveWindow *eve_parent=nullptr);  Create a new main-frame and populate it with a default window-slot. ;  ; static const char * DeclFileName ();  ; static Pixel_t GetCurrentBackgroundColor ();  Get background-color for marking the title-bar of current window. Static. ;  ; static UInt_t GetMainFrameDefHeight ();  Get default height for new main-frame windows. Static. ;  ; static UInt_t GetMainFrameDefWidth ();  Get default width for new main-frame windows. Static. ;  ; static Pixel_t GetMiniBarBackgroundColor ();  Get background-color for mini-",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:30837,Modifiability,inherit,inherited,30837,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGTab * fTab;  ;  Protected Attributes inherited from",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:31056,Modifiability,inherit,inherited,31056,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGTab * fTab;  ;  Protected Attributes inherited from",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:31271,Modifiability,inherit,inherited,31271,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGTab * fTab;  ;  Protected Attributes inherited from",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:31481,Modifiability,inherit,inherited,31481,"oid SetCurrentBackgroundColor (Pixel_t p);  Set background-color for marking the title-bar of current window. Static. ;  ; static void SetMainFrameDefHeight (UInt_t x);  Set default height for new main-frame windows. Static. ;  ; static void SetMainFrameDefWidth (UInt_t x);  Set default width for new main-frame windows. Static. ;  ; static void SetMiniBarBackgroundColor (Pixel_t p);  Set background-color for mini-bar (collapsed title-bar). Static. ;  ; static void SwapWindows (TEveWindow *w1, TEveWindow *w2);  Swap windows w1 and w2. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGTab * fTab;  ;  Protected Attributes inherited from",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:31999,Modifiability,inherit,inherited,31999,veElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGTab * fTab;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParent,MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:32247,Modifiability,inherit,inherited,32247,tions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGTab * fTab;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString ,MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:32356,Modifiability,inherit,inherited,32356,tions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGTab * fTab;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString ,MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:32454,Modifiability,inherit,inherited,32454,tions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TGTab * fTab;  ;  Protected Attributes inherited from TEveWindow; TEveCompositeFrame * fEveFrame;  ; Bool_t fShowTitleBar;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString ,MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:33444,Modifiability,inherit,inherited,33444,"Color;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowTab (const TEveWindowTab &);  ; TEveWindowTab & operator= (const TEveWindowTab &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:33526,Modifiability,inherit,inherited,33526,"Color;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowTab (const TEveWindowTab &);  ; TEveWindowTab & operator= (const TEveWindowTab &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:33755,Modifiability,inherit,inherited,33755,"RnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowTab (const TEveWindowTab &);  ; TEveWindowTab & operator= (const TEveWindowTab &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:34440,Modifiability,inherit,inherited,34440,"RnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  . Private Member Functions;  TEveWindowTab (const TEveWindowTab &);  ; TEveWindowTab & operator= (const TEveWindowTab &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:35078,Modifiability,inherit,inherited,35078," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annih",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:35250,Modifiability,inherit,inherited,35250," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annih",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:35416,Modifiability,inherit,inherited,35416," inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annih",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:35905,Modifiability,inherit,inherited,35905,"<< ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:36004,Modifiability,inherit,inherited,36004,"<< ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:36316,Modifiability,inherit,inherited,36316," fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowTab:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowTab() [1/2]",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:36549,Modifiability,inherit,inherited,36549,"dren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowTab:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowTab() [1/2]. TEveWindowTab::TEveWindowTab ; (; const TEveWindowTab & ; ). private . ◆ TEveWindowTab() [2/2]. TEveWindowTab::TEveWindowTab ; (; TGTab * ; tab, . const char * ; n = ""TEveWindowTab"", . const char * ; t = """" . ). Constructor. ; If passed tab i",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:36767,Modifiability,inherit,inherited,36767,"hingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowTab:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowTab() [1/2]. TEveWindowTab::TEveWindowTab ; (; const TEveWindowTab & ; ). private . ◆ TEveWindowTab() [2/2]. TEveWindowTab::TEveWindowTab ; (; TGTab * ; tab, . const char * ; n = ""TEveWindowTab"", . const char * ; t = """" . ). Constructor. ; If passed tab is 0, a default one is instantiated. ; Definition at line 1437 of file TEveWindow.cxx. ◆ ~TEveWindowTab(). TEveWindowTab::~TEveWindowTab ; (; ). override . Destructor. ; Definition at ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:36915,Modifiability,inherit,inherited,36915,"ted from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowTab:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowTab() [1/2]. TEveWindowTab::TEveWindowTab ; (; const TEveWindowTab & ; ). private . ◆ TEveWindowTab() [2/2]. TEveWindowTab::TEveWindowTab ; (; TGTab * ; tab, . const char * ; n = ""TEveWindowTab"", . const char * ; t = """" . ). Constructor. ; If passed tab is 0, a default one is instantiated. ; Definition at line 1437 of file TEveWindow.cxx. ◆ ~TEveWindowTab(). TEveWindowTab::~TEveWindowTab ; (; ). override . Destructor. ; Definition at line 1446 of file TEveWindow.cxx. Member Function Documentation. ◆ CanMakeNewSlots(). Bool_t TEveWindowTab::CanMakeNewSlots ; (; ); const. inlineoverridevirtual . Reimplemented from TEveWindow.; Definition at line 410 ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:20106,Security,hash,hash,20106,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:2174,Usability,undo,undocked,2174,"veWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElemen",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTEveWindowTab.html:12060,Usability,feedback,feedback,12060,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
https://root.cern/doc/master/classTExec.html:8117,Availability,error,error,8117,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:8206,Availability,error,error,8206,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:8361,Availability,error,error,8361,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:8658,Availability,error,error,8658,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:12491,Availability,error,error,12491,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:890,Deployability,update,updated,890,". ROOT: TExec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TExec Class ReferenceCore ROOT classes » Base ROOT classes. ; TExec is a utility class that can be used to execute a C++ command when some event happens in a pad. ; The command in turn can invoke a C++ macro to paint graphics objects at positions depending on the histogram or graph contents. Case 1:; The TExec object is in the list of pad primitives (after exec.Draw()). When the pad is drawn, the TExec::Paint function is called. This function will execute the specified command. The following example uses the services of the class Aclock created in $ROOTSYS/test/Aclock.cxx. This examples uses a TTimer to redraw a pad at regular intervals (clock). When the clock is updated, a string with the current date&time is drawn. {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TTextBase class for several text objects.Definition TText.h:22; exDouble_t ex[n]Definition legend1.C:17. Case 2:; The TExec object may be added to the list of functions of a TH1 or TGraph object via hist->GetListOfFunctions()->Add(exec). When the histogram (or graph) is drawn, the ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:3939,Energy Efficiency,power,powerful,3939,"de (interpreted or compiled) executed by the TExec referenced command, one can call the pad service functions such as TPad::GetEvent, TPad::GetEventX, TPad::GetEventY to find which type of event and the X,Y position of the mouse. By default, the list of TExecs is executed. This can be disabled via the canvas menu ""Option"". See $ROOTSYS/tutorials/hist/exec2.C for an example. Root > TFile f(""hsimple.root"");; Root > hpxpy.Draw();; Root > c1.AddExec(""ex2"","".x exec2.C"");; f#define f(i)Definition RSha256.hxx:104; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; c1return c1Definition legend1.C:41; When moving the mouse in the canvas, a second canvas shows the projection along X of the bin corresponding to the Y position of the mouse. The resulting histogram is fitted with a gaussian. A ""dynamic"" line shows the current bin position in Y. This more elaborated example can be used as a starting point to develop more powerful interactive applications exploiting CINT as a development engine.; The 3 options above can be combined. ; Definition at line 26 of file TExec.h. Public Member Functions;  TExec ();  Exec default constructor. ;  ;  TExec (const char *name, const char *command);  Exec normal constructor. ;  ;  TExec (const TExec &text);  Copy constructor. ;  ; virtual ~TExec ();  Exec default destructor. ;  ; virtual void Exec (const char *command="""");  Execute the command referenced by this object. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Execute the command referenced by this object. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetAction (const char *action);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TN",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:465,Integrability,depend,depending,465,". ROOT: TExec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TExec Class ReferenceCore ROOT classes » Base ROOT classes. ; TExec is a utility class that can be used to execute a C++ command when some event happens in a pad. ; The command in turn can invoke a C++ macro to paint graphics objects at positions depending on the histogram or graph contents. Case 1:; The TExec object is in the list of pad primitives (after exec.Draw()). When the pad is drawn, the TExec::Paint function is called. This function will execute the specified command. The following example uses the services of the class Aclock created in $ROOTSYS/test/Aclock.cxx. This examples uses a TTimer to redraw a pad at regular intervals (clock). When the clock is updated, a string with the current date&time is drawn. {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TTextBase class for several text objects.Definition TText.h:22; exDouble_t ex[n]Definition legend1.C:17. Case 2:; The TExec object may be added to the list of functions of a TH1 or TGraph object via hist->GetListOfFunctions()->Add(exec). When the histogram (or graph) is drawn, the ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:8123,Integrability,message,message,8123,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:8664,Integrability,message,message,8664,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:9654,Integrability,message,message,9654,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:12497,Integrability,message,message,12497,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:12870,Integrability,message,message,12870,"move this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:4920,Modifiability,inherit,inherited,4920,"owerful interactive applications exploiting CINT as a development engine.; The 3 options above can be combined. ; Definition at line 26 of file TExec.h. Public Member Functions;  TExec ();  Exec default constructor. ;  ;  TExec (const char *name, const char *command);  Exec normal constructor. ;  ;  TExec (const TExec &text);  Copy constructor. ;  ; virtual ~TExec ();  Exec default destructor. ;  ; virtual void Exec (const char *command="""");  Execute the command referenced by this object. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Execute the command referenced by this object. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetAction (const char *action);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:6660,Modifiability,inherit,inherited,6660,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:7753,Modifiability,inherit,inheritance,7753,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:9752,Modifiability,inherit,inherits,9752,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:9869,Modifiability,inherit,inherits,9869,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:13371,Modifiability,inherit,inherited,13371,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:13581,Modifiability,inherit,inherited,13581,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:14111,Modifiability,inherit,inherited,14111,"Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TExec.h>. Inheritance diagram for TExec:. This b",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:14752,Modifiability,inherit,inherited,14752,"tatus of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TExec.h>. Inheritance diagram for TExec:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TExec() [1/3]. TExec::TExec ; (; ). Exec default constructor. ; Definition at line 105 of file TExec.cxx. ◆ TExec() [2/3]. TExec::TExec ; (; const char * ; name, . const char * ; command . ). Exec normal constructor. ; Definition at line 113 of file TExec.cxx. ◆ TExec() [3/3]. TExec::TExec ; (; const TExec & ; text). Copy constructor. ; Definition at line 127 of file TExec.cxx. ◆ ~TExec(). TExec::~TExec ; (; ). virtual . Exec default destructor. ; Definition at line 120 of file TExec.cxx. Member Function Documentation. ◆ Class(). static TClass * TExec::Cl",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:14851,Modifiability,inherit,inherited,14851,"tatus of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TExec.h>. Inheritance diagram for TExec:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TExec() [1/3]. TExec::TExec ; (; ). Exec default constructor. ; Definition at line 105 of file TExec.cxx. ◆ TExec() [2/3]. TExec::TExec ; (; const char * ; name, . const char * ; command . ). Exec normal constructor. ; Definition at line 113 of file TExec.cxx. ◆ TExec() [3/3]. TExec::TExec ; (; const TExec & ; text). Copy constructor. ; Definition at line 127 of file TExec.cxx. ◆ ~TExec(). TExec::~TExec ; (; ). virtual . Exec default destructor. ; Definition at line 120 of file TExec.cxx. Member Function Documentation. ◆ Class(). static TClass * TExec::Cl",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:15056,Modifiability,inherit,inherited,15056,". ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TExec.h>. Inheritance diagram for TExec:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TExec() [1/3]. TExec::TExec ; (; ). Exec default constructor. ; Definition at line 105 of file TExec.cxx. ◆ TExec() [2/3]. TExec::TExec ; (; const char * ; name, . const char * ; command . ). Exec normal constructor. ; Definition at line 113 of file TExec.cxx. ◆ TExec() [3/3]. TExec::TExec ; (; const TExec & ; text). Copy constructor. ; Definition at line 127 of file TExec.cxx. ◆ ~TExec(). TExec::~TExec ; (; ). virtual . Exec default destructor. ; Definition at line 120 of file TExec.cxx. Member Function Documentation. ◆ Class(). static TClass * TExec::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TExec::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:5788,Security,hash,hash,5788," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:781,Testability,test,test,781,". ROOT: TExec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TExec Class ReferenceCore ROOT classes » Base ROOT classes. ; TExec is a utility class that can be used to execute a C++ command when some event happens in a pad. ; The command in turn can invoke a C++ macro to paint graphics objects at positions depending on the histogram or graph contents. Case 1:; The TExec object is in the list of pad primitives (after exec.Draw()). When the pad is drawn, the TExec::Paint function is called. This function will execute the specified command. The following example uses the services of the class Aclock created in $ROOTSYS/test/Aclock.cxx. This examples uses a TTimer to redraw a pad at regular intervals (clock). When the clock is updated, a string with the current date&time is drawn. {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TTextBase class for several text objects.Definition TText.h:22; exDouble_t ex[n]Definition legend1.C:17. Case 2:; The TExec object may be added to the list of functions of a TH1 or TGraph object via hist->GetListOfFunctions()->Add(exec). When the histogram (or graph) is drawn, the ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExec.html:972,Testability,test,test,972,". ROOT: TExec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TExec Class ReferenceCore ROOT classes » Base ROOT classes. ; TExec is a utility class that can be used to execute a C++ command when some event happens in a pad. ; The command in turn can invoke a C++ macro to paint graphics objects at positions depending on the histogram or graph contents. Case 1:; The TExec object is in the list of pad primitives (after exec.Draw()). When the pad is drawn, the TExec::Paint function is called. This function will execute the specified command. The following example uses the services of the class Aclock created in $ROOTSYS/test/Aclock.cxx. This examples uses a TTimer to redraw a pad at regular intervals (clock). When the clock is updated, a string with the current date&time is drawn. {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TTextBase class for several text objects.Definition TText.h:22; exDouble_t ex[n]Definition legend1.C:17. Case 2:; The TExec object may be added to the list of functions of a TH1 or TGraph object via hist->GetListOfFunctions()->Add(exec). When the histogram (or graph) is drawn, the ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
https://root.cern/doc/master/classTExMap.html:3836,Availability,error,error,3836,"const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:3925,Availability,error,error,3925,"tual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:4080,Availability,error,error,4080," Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:4377,Availability,error,error,4377,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:8941,Availability,error,error,8941," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:3842,Integrability,message,message,3842,"const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:4383,Integrability,message,message,4383,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:5585,Integrability,message,message,5585,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:8947,Integrability,message,message,8947," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:9320,Integrability,message,message,9320," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Priva",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:2144,Modifiability,inherit,inherited,2144,"elete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:3472,Modifiability,inherit,inheritance,3472," AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:5683,Modifiability,inherit,inherits,5683,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:5800,Modifiability,inherit,inherits,5800,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:9821,Modifiability,inherit,inherited,9821,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; Int_t FindElement (ULong64_t hash, Long64_t key);  Find an entry with specified hash and key in the TExMap. ;  ; void FixCollisions (Int_t index);  Rehash the map in case an entry has been removed. ;  ; Bool_t HighWaterMark ();  . Private Attributes; Int_t fSize;  ; Assoc_t * fTable;  ; Int_t fTally;  . Friends; class TExMapIter;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kIncon",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:10712,Modifiability,inherit,inherited,10712,"ileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; Int_t FindElement (ULong64_t hash, Long64_t key);  Find an entry with specified hash and key in the TExMap. ;  ; void FixCollisions (Int_t index);  Rehash the map in case an entry has been removed. ;  ; Bool_t HighWaterMark ();  . Private Attributes; Int_t fSize;  ; Assoc_t * fTable;  ; Int_t fTally;  . Friends; class TExMapIter;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TExMap.h>. Inheritance diagram for TExMap:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; ",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:11353,Modifiability,inherit,inherited,11353,"nt_t index);  Rehash the map in case an entry has been removed. ;  ; Bool_t HighWaterMark ();  . Private Attributes; Int_t fSize;  ; Assoc_t * fTable;  ; Int_t fTally;  . Friends; class TExMapIter;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TExMap.h>. Inheritance diagram for TExMap:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TExMap() [1/2]. TExMap::TExMap ; (; Int_t ; mapSize = 100). Create a TExMap. ; Definition at line 32 of file TExMap.cxx. ◆ TExMap() [2/2]. TExMap::TExMap ; (; const TExMap & ; map). Copy constructor. ; Definition at line 53 of file TExMap.cxx. ◆ ~TExMap(). TExMap::~TExMap ; (; ). Delete TExMap. ; Definition at line 80 of file TExMap.cxx. Member Function Documentation. ◆ Add() [1/2]. void TExMap::Add ; (; Long64_t ; key, . Long64_t ; value . ). inline . Definition at line 66 of file TExMap.h. ◆ Add() [2/2]. void TExMap::Add ; (; ULong64_t ; hash, . Long64_t ; key, . Long64_t ; value . ). Add an (key,value) pair to the table. The key s",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:11452,Modifiability,inherit,inherited,11452,"nt_t index);  Rehash the map in case an entry has been removed. ;  ; Bool_t HighWaterMark ();  . Private Attributes; Int_t fSize;  ; Assoc_t * fTable;  ; Int_t fTally;  . Friends; class TExMapIter;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TExMap.h>. Inheritance diagram for TExMap:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TExMap() [1/2]. TExMap::TExMap ; (; Int_t ; mapSize = 100). Create a TExMap. ; Definition at line 32 of file TExMap.cxx. ◆ TExMap() [2/2]. TExMap::TExMap ; (; const TExMap & ; map). Copy constructor. ; Definition at line 53 of file TExMap.cxx. ◆ ~TExMap(). TExMap::~TExMap ; (; ). Delete TExMap. ; Definition at line 80 of file TExMap.cxx. Member Function Documentation. ◆ Add() [1/2]. void TExMap::Add ; (; Long64_t ; key, . Long64_t ; value . ). inline . Definition at line 66 of file TExMap.h. ◆ Add() [2/2]. void TExMap::Add ; (; ULong64_t ; hash, . Long64_t ; key, . Long64_t ; value . ). Add an (key,value) pair to the table. The key s",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:372,Security,hash,hash,372,". ROOT: TExMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TExMap Class Reference. ; This class stores a (key,value) pair using an external hash. ; The (key,value) are Long64_t's and therefore can contain object pointers or any longs. The map uses an open addressing hashing method (linear probing). ; Definition at line 33 of file TExMap.h. Classes; struct  Assoc_t;  . Public Member Functions;  TExMap (const TExMap &map);  Copy constructor. ;  ;  TExMap (Int_t mapSize=100);  Create a TExMap. ;  ;  ~TExMap ();  Delete TExMap. ;  ; void Add (Long64_t key, Long64_t value);  ; void Add (ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. The key should be unique. ;  ; void AddAt (UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. ;  ; Int_t Capacity () const;  ; void Delete (Option_t *opt="""") override;  Delete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objec",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:499,Security,hash,hashing,499,". ROOT: TExMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TExMap Class Reference. ; This class stores a (key,value) pair using an external hash. ; The (key,value) are Long64_t's and therefore can contain object pointers or any longs. The map uses an open addressing hashing method (linear probing). ; Definition at line 33 of file TExMap.h. Classes; struct  Assoc_t;  . Public Member Functions;  TExMap (const TExMap &map);  Copy constructor. ;  ;  TExMap (Int_t mapSize=100);  Create a TExMap. ;  ;  ~TExMap ();  Delete TExMap. ;  ; void Add (Long64_t key, Long64_t value);  ; void Add (ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. The key should be unique. ;  ; void AddAt (UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. ;  ; Int_t Capacity () const;  ; void Delete (Option_t *opt="""") override;  Delete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objec",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:831,Security,hash,hash,831,". ROOT: TExMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TExMap Class Reference. ; This class stores a (key,value) pair using an external hash. ; The (key,value) are Long64_t's and therefore can contain object pointers or any longs. The map uses an open addressing hashing method (linear probing). ; Definition at line 33 of file TExMap.h. Classes; struct  Assoc_t;  . Public Member Functions;  TExMap (const TExMap &map);  Copy constructor. ;  ;  TExMap (Int_t mapSize=100);  Create a TExMap. ;  ;  ~TExMap ();  Delete TExMap. ;  ; void Add (Long64_t key, Long64_t value);  ; void Add (ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. The key should be unique. ;  ; void AddAt (UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. ;  ; Int_t Capacity () const;  ; void Delete (Option_t *opt="""") override;  Delete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objec",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:973,Security,hash,hash,973,". ROOT: TExMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TExMap Class Reference. ; This class stores a (key,value) pair using an external hash. ; The (key,value) are Long64_t's and therefore can contain object pointers or any longs. The map uses an open addressing hashing method (linear probing). ; Definition at line 33 of file TExMap.h. Classes; struct  Assoc_t;  . Public Member Functions;  TExMap (const TExMap &map);  Copy constructor. ;  ;  TExMap (Int_t mapSize=100);  Create a TExMap. ;  ;  ~TExMap ();  Delete TExMap. ;  ; void Add (Long64_t key, Long64_t value);  ; void Add (ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. The key should be unique. ;  ; void AddAt (UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. ;  ; Int_t Capacity () const;  ; void Delete (Option_t *opt="""") override;  Delete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objec",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:1317,Security,hash,hash,1317,"rence. ; This class stores a (key,value) pair using an external hash. ; The (key,value) are Long64_t's and therefore can contain object pointers or any longs. The map uses an open addressing hashing method (linear probing). ; Definition at line 33 of file TExMap.h. Classes; struct  Assoc_t;  . Public Member Functions;  TExMap (const TExMap &map);  Copy constructor. ;  ;  TExMap (Int_t mapSize=100);  Create a TExMap. ;  ;  ~TExMap ();  Delete TExMap. ;  ; void Add (Long64_t key, Long64_t value);  ; void Add (ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. The key should be unique. ;  ; void AddAt (UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. ;  ; Int_t Capacity () const;  ; void Delete (Option_t *opt="""") override;  Delete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor.",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:1387,Security,hash,hash,1387,"rence. ; This class stores a (key,value) pair using an external hash. ; The (key,value) are Long64_t's and therefore can contain object pointers or any longs. The map uses an open addressing hashing method (linear probing). ; Definition at line 33 of file TExMap.h. Classes; struct  Assoc_t;  . Public Member Functions;  TExMap (const TExMap &map);  Copy constructor. ;  ;  TExMap (Int_t mapSize=100);  Create a TExMap. ;  ;  ~TExMap ();  Delete TExMap. ;  ; void Add (Long64_t key, Long64_t value);  ; void Add (ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. The key should be unique. ;  ; void AddAt (UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. ;  ; Int_t Capacity () const;  ; void Delete (Option_t *opt="""") override;  Delete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor.",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:1433,Security,hash,hash,1433,"gs. The map uses an open addressing hashing method (linear probing). ; Definition at line 33 of file TExMap.h. Classes; struct  Assoc_t;  . Public Member Functions;  TExMap (const TExMap &map);  Copy constructor. ;  ;  TExMap (Int_t mapSize=100);  Create a TExMap. ;  ;  ~TExMap ();  Delete TExMap. ;  ; void Add (Long64_t key, Long64_t value);  ; void Add (ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. The key should be unique. ;  ; void AddAt (UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. ;  ; Int_t Capacity () const;  ; void Delete (Option_t *opt="""") override;  Delete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ;",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:1517,Security,hash,hash,1517,"gs. The map uses an open addressing hashing method (linear probing). ; Definition at line 33 of file TExMap.h. Classes; struct  Assoc_t;  . Public Member Functions;  TExMap (const TExMap &map);  Copy constructor. ;  ;  TExMap (Int_t mapSize=100);  Create a TExMap. ;  ;  ~TExMap ();  Delete TExMap. ;  ; void Add (Long64_t key, Long64_t value);  ; void Add (ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. The key should be unique. ;  ; void AddAt (UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. ;  ; Int_t Capacity () const;  ; void Delete (Option_t *opt="""") override;  Delete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ;",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:1643,Security,hash,hash,1643,"onst TExMap &map);  Copy constructor. ;  ;  TExMap (Int_t mapSize=100);  Create a TExMap. ;  ;  ~TExMap ();  Delete TExMap. ;  ; void Add (Long64_t key, Long64_t value);  ; void Add (ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. The key should be unique. ;  ; void AddAt (UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. ;  ; Int_t Capacity () const;  ; void Delete (Option_t *opt="""") override;  Delete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another de",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:1737,Security,hash,hash,1737,"onst TExMap &map);  Copy constructor. ;  ;  TExMap (Int_t mapSize=100);  Create a TExMap. ;  ;  ~TExMap ();  Delete TExMap. ;  ; void Add (Long64_t key, Long64_t value);  ; void Add (ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. The key should be unique. ;  ; void AddAt (UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. ;  ; Int_t Capacity () const;  ; void Delete (Option_t *opt="""") override;  Delete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another de",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:1872,Security,hash,hash,1872,"key,value) pair to the table. The key should be unique. ;  ; void AddAt (UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. ;  ; Int_t Capacity () const;  ; void Delete (Option_t *opt="""") override;  Delete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns ",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:5314,Security,hash,hash,5314," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:10362,Security,hash,hash,10362,"ullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; Int_t FindElement (ULong64_t hash, Long64_t key);  Find an entry with specified hash and key in the TExMap. ;  ; void FixCollisions (Int_t index);  Rehash the map in case an entry has been removed. ;  ; Bool_t HighWaterMark ();  . Private Attributes; Int_t fSize;  ; Assoc_t * fTable;  ; Int_t fTally;  . Friends; class TExMapIter;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObje",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:10413,Security,hash,hash,10413,"ullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; Int_t FindElement (ULong64_t hash, Long64_t key);  Find an entry with specified hash and key in the TExMap. ;  ; void FixCollisions (Int_t index);  Rehash the map in case an entry has been removed. ;  ; Bool_t HighWaterMark ();  . Private Attributes; Int_t fSize;  ; Assoc_t * fTable;  ; Int_t fTally;  . Friends; class TExMapIter;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObje",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:12373,Security,hash,hash,12373,"ted from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TExMap.h>. Inheritance diagram for TExMap:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TExMap() [1/2]. TExMap::TExMap ; (; Int_t ; mapSize = 100). Create a TExMap. ; Definition at line 32 of file TExMap.cxx. ◆ TExMap() [2/2]. TExMap::TExMap ; (; const TExMap & ; map). Copy constructor. ; Definition at line 53 of file TExMap.cxx. ◆ ~TExMap(). TExMap::~TExMap ; (; ). Delete TExMap. ; Definition at line 80 of file TExMap.cxx. Member Function Documentation. ◆ Add() [1/2]. void TExMap::Add ; (; Long64_t ; key, . Long64_t ; value . ). inline . Definition at line 66 of file TExMap.h. ◆ Add() [2/2]. void TExMap::Add ; (; ULong64_t ; hash, . Long64_t ; key, . Long64_t ; value . ). Add an (key,value) pair to the table. The key should be unique. ; Definition at line 88 of file TExMap.cxx. ◆ AddAt(). void TExMap::AddAt ; (; UInt_t ; slot, . ULong64_t ; hash, . Long64_t ; key, . Long64_t ; value . ). Add an (key,value) pair to the table. ; The key should be unique. If the 'slot' is open, use it to store the value, otherwise revert to Add(hash,key,value) This is usually used in conjunction with GetValue with 3 parameters: if ((idx = (ULong64_t)fMap->GetValue(hash, key, slot)) != 0) {; ...; } else {; fMap->AddAt(slot,hash,key,value);; }; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142. Definition at line 117 of file TExMap.cxx. ◆ Capacity(). Int_t TExMap::Capacity ; (; ); const. inline .",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:12593,Security,hash,hash,12593,"ler (protected). ;  ; void MakeZombie ();  . #include <TExMap.h>. Inheritance diagram for TExMap:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TExMap() [1/2]. TExMap::TExMap ; (; Int_t ; mapSize = 100). Create a TExMap. ; Definition at line 32 of file TExMap.cxx. ◆ TExMap() [2/2]. TExMap::TExMap ; (; const TExMap & ; map). Copy constructor. ; Definition at line 53 of file TExMap.cxx. ◆ ~TExMap(). TExMap::~TExMap ; (; ). Delete TExMap. ; Definition at line 80 of file TExMap.cxx. Member Function Documentation. ◆ Add() [1/2]. void TExMap::Add ; (; Long64_t ; key, . Long64_t ; value . ). inline . Definition at line 66 of file TExMap.h. ◆ Add() [2/2]. void TExMap::Add ; (; ULong64_t ; hash, . Long64_t ; key, . Long64_t ; value . ). Add an (key,value) pair to the table. The key should be unique. ; Definition at line 88 of file TExMap.cxx. ◆ AddAt(). void TExMap::AddAt ; (; UInt_t ; slot, . ULong64_t ; hash, . Long64_t ; key, . Long64_t ; value . ). Add an (key,value) pair to the table. ; The key should be unique. If the 'slot' is open, use it to store the value, otherwise revert to Add(hash,key,value) This is usually used in conjunction with GetValue with 3 parameters: if ((idx = (ULong64_t)fMap->GetValue(hash, key, slot)) != 0) {; ...; } else {; fMap->AddAt(slot,hash,key,value);; }; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142. Definition at line 117 of file TExMap.cxx. ◆ Capacity(). Int_t TExMap::Capacity ; (; ); const. inline . Definition at line 69 of file TExMap.h. ◆ Class(). static TClass * TExMap::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TExMap::Class_Name ; (; ). static . ReturnsName of this cl",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:12781,Security,hash,hash,12781,"ation. ◆ TExMap() [1/2]. TExMap::TExMap ; (; Int_t ; mapSize = 100). Create a TExMap. ; Definition at line 32 of file TExMap.cxx. ◆ TExMap() [2/2]. TExMap::TExMap ; (; const TExMap & ; map). Copy constructor. ; Definition at line 53 of file TExMap.cxx. ◆ ~TExMap(). TExMap::~TExMap ; (; ). Delete TExMap. ; Definition at line 80 of file TExMap.cxx. Member Function Documentation. ◆ Add() [1/2]. void TExMap::Add ; (; Long64_t ; key, . Long64_t ; value . ). inline . Definition at line 66 of file TExMap.h. ◆ Add() [2/2]. void TExMap::Add ; (; ULong64_t ; hash, . Long64_t ; key, . Long64_t ; value . ). Add an (key,value) pair to the table. The key should be unique. ; Definition at line 88 of file TExMap.cxx. ◆ AddAt(). void TExMap::AddAt ; (; UInt_t ; slot, . ULong64_t ; hash, . Long64_t ; key, . Long64_t ; value . ). Add an (key,value) pair to the table. ; The key should be unique. If the 'slot' is open, use it to store the value, otherwise revert to Add(hash,key,value) This is usually used in conjunction with GetValue with 3 parameters: if ((idx = (ULong64_t)fMap->GetValue(hash, key, slot)) != 0) {; ...; } else {; fMap->AddAt(slot,hash,key,value);; }; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142. Definition at line 117 of file TExMap.cxx. ◆ Capacity(). Int_t TExMap::Capacity ; (; ); const. inline . Definition at line 69 of file TExMap.h. ◆ Class(). static TClass * TExMap::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TExMap::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TExMap::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 81 of file TExMap.h. ◆ DeclFileName(). static const char * TExMap::DeclFi",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:12903,Security,hash,hash,12903,"ation. ◆ TExMap() [1/2]. TExMap::TExMap ; (; Int_t ; mapSize = 100). Create a TExMap. ; Definition at line 32 of file TExMap.cxx. ◆ TExMap() [2/2]. TExMap::TExMap ; (; const TExMap & ; map). Copy constructor. ; Definition at line 53 of file TExMap.cxx. ◆ ~TExMap(). TExMap::~TExMap ; (; ). Delete TExMap. ; Definition at line 80 of file TExMap.cxx. Member Function Documentation. ◆ Add() [1/2]. void TExMap::Add ; (; Long64_t ; key, . Long64_t ; value . ). inline . Definition at line 66 of file TExMap.h. ◆ Add() [2/2]. void TExMap::Add ; (; ULong64_t ; hash, . Long64_t ; key, . Long64_t ; value . ). Add an (key,value) pair to the table. The key should be unique. ; Definition at line 88 of file TExMap.cxx. ◆ AddAt(). void TExMap::AddAt ; (; UInt_t ; slot, . ULong64_t ; hash, . Long64_t ; key, . Long64_t ; value . ). Add an (key,value) pair to the table. ; The key should be unique. If the 'slot' is open, use it to store the value, otherwise revert to Add(hash,key,value) This is usually used in conjunction with GetValue with 3 parameters: if ((idx = (ULong64_t)fMap->GetValue(hash, key, slot)) != 0) {; ...; } else {; fMap->AddAt(slot,hash,key,value);; }; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142. Definition at line 117 of file TExMap.cxx. ◆ Capacity(). Int_t TExMap::Capacity ; (; ); const. inline . Definition at line 69 of file TExMap.h. ◆ Class(). static TClass * TExMap::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TExMap::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TExMap::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 81 of file TExMap.h. ◆ DeclFileName(). static const char * TExMap::DeclFi",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:12962,Security,hash,hash,12962,"onst TExMap & ; map). Copy constructor. ; Definition at line 53 of file TExMap.cxx. ◆ ~TExMap(). TExMap::~TExMap ; (; ). Delete TExMap. ; Definition at line 80 of file TExMap.cxx. Member Function Documentation. ◆ Add() [1/2]. void TExMap::Add ; (; Long64_t ; key, . Long64_t ; value . ). inline . Definition at line 66 of file TExMap.h. ◆ Add() [2/2]. void TExMap::Add ; (; ULong64_t ; hash, . Long64_t ; key, . Long64_t ; value . ). Add an (key,value) pair to the table. The key should be unique. ; Definition at line 88 of file TExMap.cxx. ◆ AddAt(). void TExMap::AddAt ; (; UInt_t ; slot, . ULong64_t ; hash, . Long64_t ; key, . Long64_t ; value . ). Add an (key,value) pair to the table. ; The key should be unique. If the 'slot' is open, use it to store the value, otherwise revert to Add(hash,key,value) This is usually used in conjunction with GetValue with 3 parameters: if ((idx = (ULong64_t)fMap->GetValue(hash, key, slot)) != 0) {; ...; } else {; fMap->AddAt(slot,hash,key,value);; }; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142. Definition at line 117 of file TExMap.cxx. ◆ Capacity(). Int_t TExMap::Capacity ; (; ); const. inline . Definition at line 69 of file TExMap.h. ◆ Class(). static TClass * TExMap::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TExMap::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TExMap::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 81 of file TExMap.h. ◆ DeclFileName(). static const char * TExMap::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file TExMap.h. ◆ Delete(). void TExMap::Delete ; (; Opt",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:14321,Security,hash,hash,14321,"apacity(). Int_t TExMap::Capacity ; (; ); const. inline . Definition at line 69 of file TExMap.h. ◆ Class(). static TClass * TExMap::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TExMap::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TExMap::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 81 of file TExMap.h. ◆ DeclFileName(). static const char * TExMap::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file TExMap.h. ◆ Delete(). void TExMap::Delete ; (; Option_t * ; opt = """"). overridevirtual . Delete all entries stored in the TExMap. ; Reimplemented from TObject.; Definition at line 164 of file TExMap.cxx. ◆ Expand(). void TExMap::Expand ; (; Int_t ; newsize). Expand the TExMap. ; Definition at line 279 of file TExMap.cxx. ◆ FindElement(). Int_t TExMap::FindElement ; (; ULong64_t ; hash, . Long64_t ; key . ). private . Find an entry with specified hash and key in the TExMap. ; Returns the slot of the key or the next empty slot. ; Definition at line 237 of file TExMap.cxx. ◆ FixCollisions(). void TExMap::FixCollisions ; (; Int_t ; index). private . Rehash the map in case an entry has been removed. ; Definition at line 257 of file TExMap.cxx. ◆ GetSize(). Int_t TExMap::GetSize ; (; ); const. inline . Definition at line 71 of file TExMap.h. ◆ GetValue() [1/3]. Long64_t TExMap::GetValue ; (; Long64_t ; key). inline . Definition at line 73 of file TExMap.h. ◆ GetValue() [2/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key . ). Return the value belonging to specified key and hash value. ; If key not found return 0. ; Definition at line 174 of file TExMap.cxx. ◆ GetValue() [3/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key, . UInt_t & ; slot . ). Return the value belonging to specified key and hash value. ; If ",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:14388,Security,hash,hash,14388,"ile TExMap.h. ◆ Class(). static TClass * TExMap::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TExMap::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TExMap::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 81 of file TExMap.h. ◆ DeclFileName(). static const char * TExMap::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file TExMap.h. ◆ Delete(). void TExMap::Delete ; (; Option_t * ; opt = """"). overridevirtual . Delete all entries stored in the TExMap. ; Reimplemented from TObject.; Definition at line 164 of file TExMap.cxx. ◆ Expand(). void TExMap::Expand ; (; Int_t ; newsize). Expand the TExMap. ; Definition at line 279 of file TExMap.cxx. ◆ FindElement(). Int_t TExMap::FindElement ; (; ULong64_t ; hash, . Long64_t ; key . ). private . Find an entry with specified hash and key in the TExMap. ; Returns the slot of the key or the next empty slot. ; Definition at line 237 of file TExMap.cxx. ◆ FixCollisions(). void TExMap::FixCollisions ; (; Int_t ; index). private . Rehash the map in case an entry has been removed. ; Definition at line 257 of file TExMap.cxx. ◆ GetSize(). Int_t TExMap::GetSize ; (; ); const. inline . Definition at line 71 of file TExMap.h. ◆ GetValue() [1/3]. Long64_t TExMap::GetValue ; (; Long64_t ; key). inline . Definition at line 73 of file TExMap.h. ◆ GetValue() [2/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key . ). Return the value belonging to specified key and hash value. ; If key not found return 0. ; Definition at line 174 of file TExMap.cxx. ◆ GetValue() [3/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key, . UInt_t & ; slot . ). Return the value belonging to specified key and hash value. ; If key not found return 0. In 'slot', return the index of the slot used or the first em",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:14966,Security,hash,hash,14966," ◆ Delete(). void TExMap::Delete ; (; Option_t * ; opt = """"). overridevirtual . Delete all entries stored in the TExMap. ; Reimplemented from TObject.; Definition at line 164 of file TExMap.cxx. ◆ Expand(). void TExMap::Expand ; (; Int_t ; newsize). Expand the TExMap. ; Definition at line 279 of file TExMap.cxx. ◆ FindElement(). Int_t TExMap::FindElement ; (; ULong64_t ; hash, . Long64_t ; key . ). private . Find an entry with specified hash and key in the TExMap. ; Returns the slot of the key or the next empty slot. ; Definition at line 237 of file TExMap.cxx. ◆ FixCollisions(). void TExMap::FixCollisions ; (; Int_t ; index). private . Rehash the map in case an entry has been removed. ; Definition at line 257 of file TExMap.cxx. ◆ GetSize(). Int_t TExMap::GetSize ; (; ); const. inline . Definition at line 71 of file TExMap.h. ◆ GetValue() [1/3]. Long64_t TExMap::GetValue ; (; Long64_t ; key). inline . Definition at line 73 of file TExMap.h. ◆ GetValue() [2/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key . ). Return the value belonging to specified key and hash value. ; If key not found return 0. ; Definition at line 174 of file TExMap.cxx. ◆ GetValue() [3/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key, . UInt_t & ; slot . ). Return the value belonging to specified key and hash value. ; If key not found return 0. In 'slot', return the index of the slot used or the first empty slot. (to be used with AddAt). ; Definition at line 197 of file TExMap.cxx. ◆ HighWaterMark(). Bool_t TExMap::HighWaterMark ; (; ). inlineprivate . Definition at line 54 of file TExMap.h. ◆ IsA(). TClass * TExMap::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 81 of file TExMap.h. ◆ operator()() [1/2]. Long64_t & TExMap::operator() ; (; Long64_t ; key). inline . Definition at line 79 of file TExMap.h. ◆ operator()() [2/2]. Long64_t & TExMap::operator() ; (; ULong64_t",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:15042,Security,hash,hash,15042,"l . Delete all entries stored in the TExMap. ; Reimplemented from TObject.; Definition at line 164 of file TExMap.cxx. ◆ Expand(). void TExMap::Expand ; (; Int_t ; newsize). Expand the TExMap. ; Definition at line 279 of file TExMap.cxx. ◆ FindElement(). Int_t TExMap::FindElement ; (; ULong64_t ; hash, . Long64_t ; key . ). private . Find an entry with specified hash and key in the TExMap. ; Returns the slot of the key or the next empty slot. ; Definition at line 237 of file TExMap.cxx. ◆ FixCollisions(). void TExMap::FixCollisions ; (; Int_t ; index). private . Rehash the map in case an entry has been removed. ; Definition at line 257 of file TExMap.cxx. ◆ GetSize(). Int_t TExMap::GetSize ; (; ); const. inline . Definition at line 71 of file TExMap.h. ◆ GetValue() [1/3]. Long64_t TExMap::GetValue ; (; Long64_t ; key). inline . Definition at line 73 of file TExMap.h. ◆ GetValue() [2/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key . ). Return the value belonging to specified key and hash value. ; If key not found return 0. ; Definition at line 174 of file TExMap.cxx. ◆ GetValue() [3/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key, . UInt_t & ; slot . ). Return the value belonging to specified key and hash value. ; If key not found return 0. In 'slot', return the index of the slot used or the first empty slot. (to be used with AddAt). ; Definition at line 197 of file TExMap.cxx. ◆ HighWaterMark(). Bool_t TExMap::HighWaterMark ; (; ). inlineprivate . Definition at line 54 of file TExMap.h. ◆ IsA(). TClass * TExMap::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 81 of file TExMap.h. ◆ operator()() [1/2]. Long64_t & TExMap::operator() ; (; Long64_t ; key). inline . Definition at line 79 of file TExMap.h. ◆ operator()() [2/2]. Long64_t & TExMap::operator() ; (; ULong64_t ; hash, . Long64_t ; key . ). Return a reference to the value belonging to",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:15191,Security,hash,hash,15191,"d ; (; Int_t ; newsize). Expand the TExMap. ; Definition at line 279 of file TExMap.cxx. ◆ FindElement(). Int_t TExMap::FindElement ; (; ULong64_t ; hash, . Long64_t ; key . ). private . Find an entry with specified hash and key in the TExMap. ; Returns the slot of the key or the next empty slot. ; Definition at line 237 of file TExMap.cxx. ◆ FixCollisions(). void TExMap::FixCollisions ; (; Int_t ; index). private . Rehash the map in case an entry has been removed. ; Definition at line 257 of file TExMap.cxx. ◆ GetSize(). Int_t TExMap::GetSize ; (; ); const. inline . Definition at line 71 of file TExMap.h. ◆ GetValue() [1/3]. Long64_t TExMap::GetValue ; (; Long64_t ; key). inline . Definition at line 73 of file TExMap.h. ◆ GetValue() [2/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key . ). Return the value belonging to specified key and hash value. ; If key not found return 0. ; Definition at line 174 of file TExMap.cxx. ◆ GetValue() [3/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key, . UInt_t & ; slot . ). Return the value belonging to specified key and hash value. ; If key not found return 0. In 'slot', return the index of the slot used or the first empty slot. (to be used with AddAt). ; Definition at line 197 of file TExMap.cxx. ◆ HighWaterMark(). Bool_t TExMap::HighWaterMark ; (; ). inlineprivate . Definition at line 54 of file TExMap.h. ◆ IsA(). TClass * TExMap::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 81 of file TExMap.h. ◆ operator()() [1/2]. Long64_t & TExMap::operator() ; (; Long64_t ; key). inline . Definition at line 79 of file TExMap.h. ◆ operator()() [2/2]. Long64_t & TExMap::operator() ; (; ULong64_t ; hash, . Long64_t ; key . ). Return a reference to the value belonging to the key with the specified hash value. ; If the key does not exist it will be added. NOTE: the reference will be invalidated an Expand() triggered by",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:15286,Security,hash,hash,15286,"Element(). Int_t TExMap::FindElement ; (; ULong64_t ; hash, . Long64_t ; key . ). private . Find an entry with specified hash and key in the TExMap. ; Returns the slot of the key or the next empty slot. ; Definition at line 237 of file TExMap.cxx. ◆ FixCollisions(). void TExMap::FixCollisions ; (; Int_t ; index). private . Rehash the map in case an entry has been removed. ; Definition at line 257 of file TExMap.cxx. ◆ GetSize(). Int_t TExMap::GetSize ; (; ); const. inline . Definition at line 71 of file TExMap.h. ◆ GetValue() [1/3]. Long64_t TExMap::GetValue ; (; Long64_t ; key). inline . Definition at line 73 of file TExMap.h. ◆ GetValue() [2/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key . ). Return the value belonging to specified key and hash value. ; If key not found return 0. ; Definition at line 174 of file TExMap.cxx. ◆ GetValue() [3/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key, . UInt_t & ; slot . ). Return the value belonging to specified key and hash value. ; If key not found return 0. In 'slot', return the index of the slot used or the first empty slot. (to be used with AddAt). ; Definition at line 197 of file TExMap.cxx. ◆ HighWaterMark(). Bool_t TExMap::HighWaterMark ; (; ). inlineprivate . Definition at line 54 of file TExMap.h. ◆ IsA(). TClass * TExMap::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 81 of file TExMap.h. ◆ operator()() [1/2]. Long64_t & TExMap::operator() ; (; Long64_t ; key). inline . Definition at line 79 of file TExMap.h. ◆ operator()() [2/2]. Long64_t & TExMap::operator() ; (; ULong64_t ; hash, . Long64_t ; key . ). Return a reference to the value belonging to the key with the specified hash value. ; If the key does not exist it will be added. NOTE: the reference will be invalidated an Expand() triggered by an Add() or another operator() call. ; Definition at line 139 of file TExMap.cxx. ◆ operator=",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:15951,Security,hash,hash,15951,"t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key . ). Return the value belonging to specified key and hash value. ; If key not found return 0. ; Definition at line 174 of file TExMap.cxx. ◆ GetValue() [3/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key, . UInt_t & ; slot . ). Return the value belonging to specified key and hash value. ; If key not found return 0. In 'slot', return the index of the slot used or the first empty slot. (to be used with AddAt). ; Definition at line 197 of file TExMap.cxx. ◆ HighWaterMark(). Bool_t TExMap::HighWaterMark ; (; ). inlineprivate . Definition at line 54 of file TExMap.h. ◆ IsA(). TClass * TExMap::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 81 of file TExMap.h. ◆ operator()() [1/2]. Long64_t & TExMap::operator() ; (; Long64_t ; key). inline . Definition at line 79 of file TExMap.h. ◆ operator()() [2/2]. Long64_t & TExMap::operator() ; (; ULong64_t ; hash, . Long64_t ; key . ). Return a reference to the value belonging to the key with the specified hash value. ; If the key does not exist it will be added. NOTE: the reference will be invalidated an Expand() triggered by an Add() or another operator() call. ; Definition at line 139 of file TExMap.cxx. ◆ operator=(). TExMap & TExMap::operator= ; (; const TExMap & ; map). Assignment operator. ; Definition at line 64 of file TExMap.cxx. ◆ Remove() [1/2]. void TExMap::Remove ; (; Long64_t ; key). inline . Definition at line 76 of file TExMap.h. ◆ Remove() [2/2]. void TExMap::Remove ; (; ULong64_t ; hash, . Long64_t ; key . ). Remove entry with specified key from the TExMap. ; Definition at line 217 of file TExMap.cxx. ◆ Streamer(). void TExMap::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TObject.; Definition at line 306 of file TExMap.cxx. ◆ StreamerNVirtual(). void TExMap::Stream",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:16051,Security,hash,hash,16051," to specified key and hash value. ; If key not found return 0. ; Definition at line 174 of file TExMap.cxx. ◆ GetValue() [3/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key, . UInt_t & ; slot . ). Return the value belonging to specified key and hash value. ; If key not found return 0. In 'slot', return the index of the slot used or the first empty slot. (to be used with AddAt). ; Definition at line 197 of file TExMap.cxx. ◆ HighWaterMark(). Bool_t TExMap::HighWaterMark ; (; ). inlineprivate . Definition at line 54 of file TExMap.h. ◆ IsA(). TClass * TExMap::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 81 of file TExMap.h. ◆ operator()() [1/2]. Long64_t & TExMap::operator() ; (; Long64_t ; key). inline . Definition at line 79 of file TExMap.h. ◆ operator()() [2/2]. Long64_t & TExMap::operator() ; (; ULong64_t ; hash, . Long64_t ; key . ). Return a reference to the value belonging to the key with the specified hash value. ; If the key does not exist it will be added. NOTE: the reference will be invalidated an Expand() triggered by an Add() or another operator() call. ; Definition at line 139 of file TExMap.cxx. ◆ operator=(). TExMap & TExMap::operator= ; (; const TExMap & ; map). Assignment operator. ; Definition at line 64 of file TExMap.cxx. ◆ Remove() [1/2]. void TExMap::Remove ; (; Long64_t ; key). inline . Definition at line 76 of file TExMap.h. ◆ Remove() [2/2]. void TExMap::Remove ; (; ULong64_t ; hash, . Long64_t ; key . ). Remove entry with specified key from the TExMap. ; Definition at line 217 of file TExMap.cxx. ◆ Streamer(). void TExMap::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TObject.; Definition at line 306 of file TExMap.cxx. ◆ StreamerNVirtual(). void TExMap::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 ",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTExMap.html:16555,Security,hash,hash,16555,"Definition at line 54 of file TExMap.h. ◆ IsA(). TClass * TExMap::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 81 of file TExMap.h. ◆ operator()() [1/2]. Long64_t & TExMap::operator() ; (; Long64_t ; key). inline . Definition at line 79 of file TExMap.h. ◆ operator()() [2/2]. Long64_t & TExMap::operator() ; (; ULong64_t ; hash, . Long64_t ; key . ). Return a reference to the value belonging to the key with the specified hash value. ; If the key does not exist it will be added. NOTE: the reference will be invalidated an Expand() triggered by an Add() or another operator() call. ; Definition at line 139 of file TExMap.cxx. ◆ operator=(). TExMap & TExMap::operator= ; (; const TExMap & ; map). Assignment operator. ; Definition at line 64 of file TExMap.cxx. ◆ Remove() [1/2]. void TExMap::Remove ; (; Long64_t ; key). inline . Definition at line 76 of file TExMap.h. ◆ Remove() [2/2]. void TExMap::Remove ; (; ULong64_t ; hash, . Long64_t ; key . ). Remove entry with specified key from the TExMap. ; Definition at line 217 of file TExMap.cxx. ◆ Streamer(). void TExMap::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TObject.; Definition at line 306 of file TExMap.cxx. ◆ StreamerNVirtual(). void TExMap::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 of file TExMap.h. Friends And Related Symbol Documentation. ◆ TExMapIter. friend class TExMapIter. friend . Definition at line 35 of file TExMap.h. Member Data Documentation. ◆ fSize. Int_t TExMap::fSize. private . Definition at line 51 of file TExMap.h. ◆ fTable. Assoc_t* TExMap::fTable. private . Definition at line 50 of file TExMap.h. ◆ fTally. Int_t TExMap::fTally. private . Definition at line 52 of file TExMap.h. Libraries for TExMap:. [legend]; The documentation for this class was generated from the following",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
https://root.cern/doc/master/classTF1-members.html:3228,Availability,error,error,3228,"TF1protectedvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoInitialize(EAddToList addToGlobList)TF1protected; Draw(Option_t *option="""") overrideTF1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""") constTF1virtual; DrawDerivative(Option_t *option=""al"")TF1virtual; DrawF1(Double_t xmin, Double_t xmax, Option_t *option="""")TF1virtual; DrawIntegral(Option_t *option=""al"")TF1virtual; Dump() constTObjectvirtual; EAddToList enum nameTF1; EDeprecatedStatusBits enum nameTObject; EFType enum nameTF1protected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTF1; Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) constTF1virtual; EvalPar(const Double_t *x, const Double_t *params=nullptr)TF1virtual; EvalPar(const T *x, const Double_t *params=nullptr)TF1; EvalParTempl(const T *data, const Double_t *params=nullptr)TF1inlineprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTF1virtual; fAlphaTF1protected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBetaTF1protected; fBitsTObjectprivate; fChisquareTF1protected; fCompositionTF1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFormulaTF1protected; fFunctorTF1protected; fgAbsValueTF1protectedstatic; fgAddToGlobListTF1protectedstatic; fGammaTF1protected; fgCurrentTF1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgRejectPointTF1protectedstatic; fHistogramTF1protected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fIntegralTF1protected; FixParameter(Int_t ipar, Double_t value)TF1virtual; fLineColorTAttLi",MatchSource.WIKI,doc/master/classTF1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1-members.html
https://root.cern/doc/master/classTF1-members.html:3309,Availability,error,error,3309,"TF1protectedvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoInitialize(EAddToList addToGlobList)TF1protected; Draw(Option_t *option="""") overrideTF1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""") constTF1virtual; DrawDerivative(Option_t *option=""al"")TF1virtual; DrawF1(Double_t xmin, Double_t xmax, Option_t *option="""")TF1virtual; DrawIntegral(Option_t *option=""al"")TF1virtual; Dump() constTObjectvirtual; EAddToList enum nameTF1; EDeprecatedStatusBits enum nameTObject; EFType enum nameTF1protected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTF1; Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) constTF1virtual; EvalPar(const Double_t *x, const Double_t *params=nullptr)TF1virtual; EvalPar(const T *x, const Double_t *params=nullptr)TF1; EvalParTempl(const T *data, const Double_t *params=nullptr)TF1inlineprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTF1virtual; fAlphaTF1protected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBetaTF1protected; fBitsTObjectprivate; fChisquareTF1protected; fCompositionTF1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFormulaTF1protected; fFunctorTF1protected; fgAbsValueTF1protectedstatic; fgAddToGlobListTF1protectedstatic; fGammaTF1protected; fgCurrentTF1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgRejectPointTF1protectedstatic; fHistogramTF1protected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fIntegralTF1protected; FixParameter(Int_t ipar, Double_t value)TF1virtual; fLineColorTAttLi",MatchSource.WIKI,doc/master/classTF1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1-members.html
https://root.cern/doc/master/classTF1-members.html:16020,Availability,error,error,16020,"maximum=-1111)TF1virtual; SetMinimum(Double_t minimum=-1111)TF1virtual; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetNDF(Int_t ndf)TF1virtual; SetNdim(Int_t ndim)TF1inline; SetNormalized(Bool_t flag)TF1inlinevirtual; SetNpx(Int_t npx=100)TF1virtual; SetNumberFitPoints(Int_t npfits)TF1inlinevirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetParameter(Int_t param, Double_t value)TF1inlinevirtual; SetParameter(const TString &name, Double_t value)TF1inlinevirtual; SetParameters(const Double_t *params)TF1inlinevirtual; SetParameters(double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN())TF1inlinevirtual; SetParent(TObject *p=nullptr)TF1inlinevirtual; SetParError(Int_t ipar, Double_t error)TF1virtual; SetParErrors(const Double_t *errors)TF1virtual; SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax)TF1virtual; SetParName(Int_t ipar, const char *name)TF1virtual; SetParNames(const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""")TF1virtual; SetRange(Double_t xmin, Double_t xmax)TF1virtual; SetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax)TF1inlinevirtual; SetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax)TF1inlinevirtual; SetSavedPoint(Int_t point, Double_t value)TF1virtual; SetTitle(const char *title="""") overrideTF1virtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetVectorized(Bool_t vectorized)TF1inlinevirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTF1virtual; StreamerNVirtual(TBuffer &ClassDef",MatchSource.WIKI,doc/master/classTF1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1-members.html
https://root.cern/doc/master/classTF1-members.html:16067,Availability,error,errors,16067,"inimum=-1111)TF1virtual; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetNDF(Int_t ndf)TF1virtual; SetNdim(Int_t ndim)TF1inline; SetNormalized(Bool_t flag)TF1inlinevirtual; SetNpx(Int_t npx=100)TF1virtual; SetNumberFitPoints(Int_t npfits)TF1inlinevirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetParameter(Int_t param, Double_t value)TF1inlinevirtual; SetParameter(const TString &name, Double_t value)TF1inlinevirtual; SetParameters(const Double_t *params)TF1inlinevirtual; SetParameters(double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN())TF1inlinevirtual; SetParent(TObject *p=nullptr)TF1inlinevirtual; SetParError(Int_t ipar, Double_t error)TF1virtual; SetParErrors(const Double_t *errors)TF1virtual; SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax)TF1virtual; SetParName(Int_t ipar, const char *name)TF1virtual; SetParNames(const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""")TF1virtual; SetRange(Double_t xmin, Double_t xmax)TF1virtual; SetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax)TF1inlinevirtual; SetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax)TF1inlinevirtual; SetSavedPoint(Int_t point, Double_t value)TF1virtual; SetTitle(const char *title="""") overrideTF1virtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetVectorized(Bool_t vectorized)TF1inlinevirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTF1virtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TF1inline; SysError(const ch",MatchSource.WIKI,doc/master/classTF1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1-members.html
https://root.cern/doc/master/classTF1-members.html:179,Modifiability,inherit,inherited,179,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TF1 Member List. This is the complete list of members for TF1, including all inherited members. AbstractMethod(const char *method) constTObject; AbsValue(Bool_t reject=kTRUE)TF1static; AddParameter(const TString &name, Double_t value)TF1inlinevirtual; AddToGlobalList(Bool_t on=kTRUE)TF1virtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b) overrideTF1virtual; CalcGaussLegendreSamplingPoints(Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11)TF1static; CentralMoment(Double_t n, Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001)TF1virtual; CheckedHash()TObjectinline; Class()TF1static; Class_Name()TF1static; Class_Version()TF1inlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname=nullptr) const overrideTF1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeCdfTable(Option_t *opt)TF1protected; Copy(TObject &f1) const overrideTF1virtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CreateHistogram()TF1inlinevirtual; DeclFileName()TF1inlinestatic; DefaultAddToGlobalList(Bool_t on=kTRUE)TF1static; DefineNSUMTerm(TObjArray *newFuncs, TObjArray *coeffNames, TString &fullFormula, TString &formula, int termStart, int termEnd, Double_t xmin, Double_t xmax)TF1private; Delete(Option_t *option="""")TObjectvirtual; Derivative(Double_t x, Double_t *params=nullptr, Double_t epsilon=0.001) constTF1virtual; Derivative2(Double_t x, Double_t *params=nullptr, Double_t epsilon=0.001) constTF1virtual; Derivative3(Double_t x, Double_t *params=nullptr, Double_t epsilon=0.001) constTF1virtual; DerivativeError()TF1static; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp",MatchSource.WIKI,doc/master/classTF1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1-members.html
https://root.cern/doc/master/classTF1-members.html:5706,Testability,log,logx,5706," fXmaxTF1protected; fXminTF1protected; GetChisquare() constTF1inline; GetCurrent()TF1static; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetExpFormula(Option_t *option="""") constTF1inlinevirtual; GetFillColor() constTAttFillinlinevirtual; GetFillStyle() constTAttFillinlinevirtual; GetFormula()TF1inlinevirtual; GetFormula() constTF1inlinevirtual; GetHistogram() constTF1virtual; GetIconName() constTObjectvirtual; GetLinearPart(Int_t i) constTF1inlinevirtual; GetLineColor() constTAttLineinlinevirtual; GetLineStyle() constTAttLineinlinevirtual; GetLineWidth() constTAttLineinlinevirtual; GetMarkerColor() constTAttMarkerinlinevirtual; GetMarkerLineWidth(Style_t style)TAttMarkerstatic; GetMarkerSize() constTAttMarkerinlinevirtual; GetMarkerStyle() constTAttMarkerinlinevirtual; GetMarkerStyleBase(Style_t style)TAttMarkerstatic; GetMaximum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMaximumStored() constTF1inlinevirtual; GetMaximumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMethodCall() constTF1inline; GetMinimum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinimumStored() constTF1inlinevirtual; GetMinimumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinMaxNDim(Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) constTF1protectedvirtual; GetName() const overrideTNamedinlinevirtual; GetNDF() constTF1virtual; GetNdim() constTF1inlinevirtual; GetNpar() constTF1inlinevirtual; GetNpx() constTF1inlinevirtual; GetNumber() constTF1inlinevirtual; GetNumberFitPoints() constTF1inlinevirtual; GetNumberFreeParameters() constTF1virtual; GetObjectInfo(Int_t px, Int_t py) const overrideTF1virtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetP",MatchSource.WIKI,doc/master/classTF1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1-members.html
https://root.cern/doc/master/classTF1-members.html:5874,Testability,log,logx,5874,"xpFormula(Option_t *option="""") constTF1inlinevirtual; GetFillColor() constTAttFillinlinevirtual; GetFillStyle() constTAttFillinlinevirtual; GetFormula()TF1inlinevirtual; GetFormula() constTF1inlinevirtual; GetHistogram() constTF1virtual; GetIconName() constTObjectvirtual; GetLinearPart(Int_t i) constTF1inlinevirtual; GetLineColor() constTAttLineinlinevirtual; GetLineStyle() constTAttLineinlinevirtual; GetLineWidth() constTAttLineinlinevirtual; GetMarkerColor() constTAttMarkerinlinevirtual; GetMarkerLineWidth(Style_t style)TAttMarkerstatic; GetMarkerSize() constTAttMarkerinlinevirtual; GetMarkerStyle() constTAttMarkerinlinevirtual; GetMarkerStyleBase(Style_t style)TAttMarkerstatic; GetMaximum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMaximumStored() constTF1inlinevirtual; GetMaximumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMethodCall() constTF1inline; GetMinimum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinimumStored() constTF1inlinevirtual; GetMinimumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinMaxNDim(Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) constTF1protectedvirtual; GetName() const overrideTNamedinlinevirtual; GetNDF() constTF1virtual; GetNdim() constTF1inlinevirtual; GetNpar() constTF1inlinevirtual; GetNpx() constTF1inlinevirtual; GetNumber() constTF1inlinevirtual; GetNumberFitPoints() constTF1inlinevirtual; GetNumberFreeParameters() constTF1virtual; GetObjectInfo(Int_t px, Int_t py) const overrideTF1virtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetParameter(Int_t ipar) constTF1inlinevirtual; GetParameter(const TString &name) constTF1inlinevirtual; GetParameters() constTF1inlinevirtual; GetParameters(Double_t ",MatchSource.WIKI,doc/master/classTF1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1-members.html
https://root.cern/doc/master/classTF1-members.html:6031,Testability,log,logx,6031,"rtual; GetFormula() constTF1inlinevirtual; GetHistogram() constTF1virtual; GetIconName() constTObjectvirtual; GetLinearPart(Int_t i) constTF1inlinevirtual; GetLineColor() constTAttLineinlinevirtual; GetLineStyle() constTAttLineinlinevirtual; GetLineWidth() constTAttLineinlinevirtual; GetMarkerColor() constTAttMarkerinlinevirtual; GetMarkerLineWidth(Style_t style)TAttMarkerstatic; GetMarkerSize() constTAttMarkerinlinevirtual; GetMarkerStyle() constTAttMarkerinlinevirtual; GetMarkerStyleBase(Style_t style)TAttMarkerstatic; GetMaximum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMaximumStored() constTF1inlinevirtual; GetMaximumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMethodCall() constTF1inline; GetMinimum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinimumStored() constTF1inlinevirtual; GetMinimumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinMaxNDim(Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) constTF1protectedvirtual; GetName() const overrideTNamedinlinevirtual; GetNDF() constTF1virtual; GetNdim() constTF1inlinevirtual; GetNpar() constTF1inlinevirtual; GetNpx() constTF1inlinevirtual; GetNumber() constTF1inlinevirtual; GetNumberFitPoints() constTF1inlinevirtual; GetNumberFreeParameters() constTF1virtual; GetObjectInfo(Int_t px, Int_t py) const overrideTF1virtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetParameter(Int_t ipar) constTF1inlinevirtual; GetParameter(const TString &name) constTF1inlinevirtual; GetParameters() constTF1inlinevirtual; GetParameters(Double_t *params)TF1inlinevirtual; GetParent() constTF1inline; GetParError(Int_t ipar) constTF1virtual; GetParErrors() constTF1inlinevirtual; GetParLimits(Int_t ipar, Doub",MatchSource.WIKI,doc/master/classTF1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1-members.html
https://root.cern/doc/master/classTF1-members.html:6199,Testability,log,logx,6199,"ouble_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinMaxNDim(Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) constTF1protectedvirtual; GetName() const overrideTNamedinlinevirtual; GetNDF() constTF1virtual; GetNdim() constTF1inlinevirtual; GetNpar() constTF1inlinevirtual; GetNpx() constTF1inlinevirtual; GetNumber() constTF1inlinevirtual; GetNumberFitPoints() constTF1inlinevirtual; GetNumberFreeParameters() constTF1virtual; GetObjectInfo(Int_t px, Int_t py) const overrideTF1virtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetParameter(Int_t ipar) constTF1inlinevirtual; GetParameter(const TString &name) constTF1inlinevirtual; GetParameters() constTF1inlinevirtual; GetParameters(Double_t *params)TF1inlinevirtual; GetParent() constTF1inline; GetParError(Int_t ipar) constTF1virtual; GetParErrors() constTF1inlinevirtual; GetParLimits(Int_t ipar, Double_t &parmin, Double_t &parmax) constTF1virtual; GetParName(Int_t ipar) constTF1inlinevirtual; GetParNumber(const char *name) constTF1inlinevirtual; GetProb() constTF1virtual; GetQuantiles(Int_t n, Double_t *xp, const Double_t *p)TF1virtual; GetRandom(TRandom *rng=nullptr, Option_t *opt=nullptr)TF1virtual; GetRandom(Double_t xmin, Double_t xmax, TRandom *rng=nullptr, Option_t *opt=nullptr)TF1virtual; GetRange(Double_t *xmin, Double_t *xmax) constTF1protectedvirtual; GetRange(Double_t &xmin, Double_t &xmax) constTF1virtual; GetRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) constTF1virtual; GetRange(Double_t &xmin, Double_t &ymin, Double_t &zmin, Double_t &xmax, Double_t &ymax, Double_t &zmax) constTF1virtual; GetSave(const Double_t *x)TF1virtual; GetTitle() const overrideTNamedinlinevirtual; GetUniqueID() constTObjectvirtual; GetVariable(const TString &name)TF1inlinevirtual; GetX(Double_t y, Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1",MatchSource.WIKI,doc/master/classTF1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1-members.html
https://root.cern/doc/master/classTF1-members.html:8095,Testability,log,logx,8095,"ber(const char *name) constTF1inlinevirtual; GetProb() constTF1virtual; GetQuantiles(Int_t n, Double_t *xp, const Double_t *p)TF1virtual; GetRandom(TRandom *rng=nullptr, Option_t *opt=nullptr)TF1virtual; GetRandom(Double_t xmin, Double_t xmax, TRandom *rng=nullptr, Option_t *opt=nullptr)TF1virtual; GetRange(Double_t *xmin, Double_t *xmax) constTF1protectedvirtual; GetRange(Double_t &xmin, Double_t &xmax) constTF1virtual; GetRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) constTF1virtual; GetRange(Double_t &xmin, Double_t &ymin, Double_t &zmin, Double_t &xmax, Double_t &ymax, Double_t &zmax) constTF1virtual; GetSave(const Double_t *x)TF1virtual; GetTitle() const overrideTNamedinlinevirtual; GetUniqueID() constTObjectvirtual; GetVariable(const TString &name)TF1inlinevirtual; GetX(Double_t y, Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetXaxis() constTF1; GetXmax() constTF1inlinevirtual; GetXmin() constTF1inlinevirtual; GetYaxis() constTF1; GetZaxis() constTF1; GradientPar(Int_t ipar, const Double_t *x, Double_t eps=0.01)TF1virtual; GradientPar(Int_t ipar, const T *x, Double_t eps=0.01)TF1inline; GradientPar(const Double_t *x, Double_t *grad, Double_t eps=0.01)TF1virtual; GradientPar(const T *x, T *grad, Double_t eps=0.01)TF1inline; GradientParTempl(Int_t ipar, const T *x, Double_t eps=0.01)TF1inline; GradientParTempl(const T *x, T *grad, Double_t eps=0.01)TF1inline; HandleTimer(TTimer *timer)TObjectvirtual; Hash() const overrideTNamedinlinevirtual; HasInconsistentHash() constTObjectinline; HasSave() constTF1inline; Info(const char *method, const char *msgfmt,...) constTObjectvirtual; InheritsFrom(const char *classname) constTObjectvirtual; InheritsFrom(const TClass *cl) constTObjectvirtual; InitArgs(const Double_t *x, const Double_t *params)TF1virtual; InitStandardFunctions()TF1static; Inspect() constTObjectvirtual; Integral(Double_t a, Double_t b, Double_t epsrel=1.e-12)TF1vi",MatchSource.WIKI,doc/master/classTF1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1-members.html
https://root.cern/doc/master/classTF1.html:8091,Availability,avail,available,8091,"ointx, xvec, yvec);; auto f = new TF1(""f"",[&](double*x, double *p){ return p[0]*g->Eval(x[0]); }, xmin, xmax, 1);; g#define g(i)Definition RSha256.hxx:105; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41. 6 - A member function with parameters of a general C++ class; A TF1 can be created in this case from any member function of a class which has the signature of (double * , double *) and returning a double.; Example:; class MyFunction {; public:; ...; double Evaluate() (double *x, double *p) {; // function implementation; }; };; {; ....; MyFunction *fptr = new MyFunction(....); // create the user function class; auto f = new TF1(""f"",fptr,&MyFunction::Evaluate,0,1,npar,""MyFunction"",""Evaluate""); // create TF1 class.; ; .....; }; See also the tutorial math/exampleFunctor.C for a running example. PyROOT; The TF1 class has several additions for its use from Python, which are also available in its subclasses TF2 and TF3.; First, TF1 instance can be initialized with user-defined Python functions. Given a generic Python callable, the following can performed:; def func(x: numpy.ndarray, pars: numpy.ndarray) -> float:; return pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:10600,Availability,avail,available,10600,"bal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions GL - function will be always stored in the global list of functions , independently of the global setting of TF1::DefaultAddToGlobalList. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, EAddToList addToGlobList=EAddToList::kDefault, bool vectorize=false);  TF1 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, const char *, const char *, EAddToList addToGlobList=EAddToList::kDefault);  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  ;  TF1 (const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  F",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:23810,Availability,toler,tolerance,23810,"uble_t epsilon=1.E-2);  Return Error on Integral of a parametric function with dimension larger than one between a[] and b[] due to the parameters uncertainties. ;  ; virtual Double_t IntegralFast (Int_t num, Double_t *x, Double_t *w, Double_t a, Double_t b, Double_t *params=nullptr, Double_t epsilon=1e-12);  Gauss-Legendre integral, see CalcGaussLegendreSamplingPoints. ;  ; virtual Double_t IntegralMultiple (Int_t n, const Double_t *a, const Double_t *b, Double_t epsrel, Double_t &relerr);  See more general prototype below. ;  ; virtual Double_t IntegralMultiple (Int_t n, const Double_t *a, const Double_t *b, Int_t maxpts, Double_t epsrel, Double_t epsabs, Double_t &relerr, Int_t &nfnevl, Int_t &ifail);  This function computes, to an attempted specified accuracy, the value of the integral. ;  ; virtual Double_t IntegralMultiple (Int_t n, const Double_t *a, const Double_t *b, Int_t, Int_t maxpts, Double_t epsrel, Double_t &relerr, Int_t &nfnevl, Int_t &ifail);  ; virtual Double_t IntegralOneDim (Double_t a, Double_t b, Double_t epsrel, Double_t epsabs, Double_t &err);  Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsEvalNormalized () const;  ; virtual Bool_t IsInside (const Double_t *x) const;  return kTRUE if the point is inside the function range ;  ; virtual Bool_t IsLinear () const;  ; virtual Bool_t IsValid () const;  Return kTRUE if the function is valid. ;  ; bool IsVectorized ();  ; virtual Double_t Mean (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ; virtual Double_t Moment (Double_t n, Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  Return nth moment of function between a and b. ;  ; template<class T > ; T operator() (const T *x, const Double_t *params=nullptr);  ; virtual Double_t operator() (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;  ; TF1",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:25471,Availability,error,errors,25471,"01);  Return nth moment of function between a and b. ;  ; template<class T > ; T operator() (const T *x, const Double_t *params=nullptr);  ; virtual Double_t operator() (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;  ; TF1 & operator= (const TF1 &rhs);  Operator =. ;  ; void Paint (Option_t *option="""") override;  Paint this function with its current attributes. ;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; virtual void ReleaseParameter (Int_t ipar);  Release parameter number ipar during a fit operation. ;  ; virtual void Save (Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax);  Save values of function in array fSave. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetChisquare (Double_t chi2);  ; virtual void SetFitResult (const ROOT::Fit::FitResult &result, const Int_t *indpar=nullptr);  Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (with size fNpar) of the parameter indices in the FitResult can be passed This is useful in the case of a combined fit with different functions, and the FitResult contains the global result By default it is assume that indpar = {0,1,2,....,fNpar-1}. ;  ; template<typename Func > ; void SetFunction (Func f);  ; template<class PtrObj , typename MemFn > ; void SetFunction (PtrObj &p, MemFn memFn);  ; virtual void SetMaximum (Double_t maximum=-1111);  Set the maximum value along Y for this function In case the function is already drawn, set also the maximum in the helper histogram. ;  ; virtual void SetMinimum (Double_t minimum=-1111);  Set the minimum value along Y for this function In case the function is already drawn, set also the minimum in the helper histogram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf shoul",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:27321,Availability,error,error,27321,"gram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of free parameters. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetRange (Double_t xmin, Double_t xmax);  Initialize the upper and lower bounds to draw the function. ;  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax);  ; virtual voi",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:27334,Availability,error,error,27334,"gram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of free parameters. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetRange (Double_t xmin, Double_t xmax);  Initialize the upper and lower bounds to draw the function. ;  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax);  ; virtual voi",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:27415,Availability,error,errors,27415,"ers. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetRange (Double_t xmin, Double_t xmax);  Initialize the upper and lower bounds to draw the function. ;  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax);  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax);  ; virtual void SetSavedPoint (Int_t point, Double_t valu",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:27429,Availability,error,errors,27429,"ers. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetRange (Double_t xmin, Double_t xmax);  Initialize the upper and lower bounds to draw the function. ;  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax);  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax);  ; virtual void SetSavedPoint (Int_t point, Double_t valu",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:27500,Availability,error,errors,27500,"ers. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetRange (Double_t xmin, Double_t xmax);  Initialize the upper and lower bounds to draw the function. ;  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax);  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax);  ; virtual void SetSavedPoint (Int_t point, Double_t valu",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:32032,Availability,error,error,32032,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:32121,Availability,error,error,32121,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return t",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:32276,Availability,error,error,32276,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:32453,Availability,error,error,32453,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:36154,Availability,error,error,36154,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:41827,Availability,error,error,41827,"size=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; stat",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:47399,Availability,error,errors,47399,mma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::unique_ptr< TMethodCall > fMethodCall;  ! Pointer to MethodCall in case of interpreted function ;  ; Double_t fMinimum {-1111};  Minimum value for plotting. ;  ; Int_t fNDF {};  Number of degrees of freedom in the fit. ;  ; Int_t fNdim {};  Function dimension. ;  ; Bool_t fNormalized {false};  Normalization option (false by default) ;  ; Double_t fNormIntegral {};  Integral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Mar,MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:51345,Availability,avail,available,51345,"xx. ◆ TF1() [3/15]. TF1::TF1 ; (; const char * ; name, . const char * ; formula, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . EAddToList ; addToGlobList = EAddToList::kDefault, . bool ; vectorize = false . ). TF1 constructor using a formula definition. ; See TFormula constructor for explanation of the formula syntax.; See tutorials: fillrandom, first, fit1, formula1, multifit for real examples.; Creates a function of type A or B between xmin and xmax; if formula has the form ""fffffff;xxxx;yyyy"", it is assumed that the formula string is ""fffffff"" and ""xxxx"" and ""yyyy"" are the titles for the X and Y axis respectively. ; Definition at line 509 of file TF1.cxx. ◆ TF1() [4/15]. TF1::TF1 ; (; const char * ; name, . const char * ; formula, . Double_t ; xmin, . Double_t ; xmax, . Option_t * ; opt . ). Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions GL - function will be always stored in the global list of functions , independently of the global setting of TF1::DefaultAddToGlobalList. ; Definition at line 688 of file TF1.cxx. ◆ TF1() [5/15]. TF1::TF1 ; (; const char * ; name, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; npar, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). F1 constructor using name of an interpreted function. ; Creates a function of type C between xmin and xmax. name is the name of an interpreted C++ function. The function is defined with npar parameters fcn must be a function of type:; Double_t fcn(Double_t *x, Double_t *params); This constructor is called for functions of type C by the C++ interpreter.; WarningA function created with this constructor cannot be Cloned. ; Definition at line 714 of file TF1.cxx. ◆ TF1() [6/15]. TF1::TF1 ; (; const char * ; name, . Double_t(*)(Double_t *, Double_t *) ; fcn, . Double_t ; xmin = 0,",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:62896,Availability,error,error,62896,"001 . ); const. virtual . Returns the first derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - f(x-h)}{2h}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1113 of file TF1.cxx. ◆ Derivative2(). Double_t TF1::Derivative2 ; (; Double_t ; x, . Double_t * ; params = nullptr, . Double_t ; eps = 0.001 . ); const. virtual . Returns the second derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:62935,Availability,error,error,62935,"001 . ); const. virtual . Returns the first derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - f(x-h)}{2h}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1113 of file TF1.cxx. ◆ Derivative2(). Double_t TF1::Derivative2 ; (; Double_t ; x, . Double_t * ; params = nullptr, . Double_t ; eps = 0.001 . ); const. virtual . Returns the second derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:62952,Availability,error,error,62952,"001 . ); const. virtual . Returns the first derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - f(x-h)}{2h}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1113 of file TF1.cxx. ◆ Derivative2(). Double_t TF1::Derivative2 ; (; Double_t ; x, . Double_t * ; params = nullptr, . Double_t ; eps = 0.001 . ); const. virtual . Returns the second derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:62974,Availability,error,error,62974,"001 . ); const. virtual . Returns the first derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - f(x-h)}{2h}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1113 of file TF1.cxx. ◆ Derivative2(). Double_t TF1::Derivative2 ; (; Double_t ; x, . Double_t * ; params = nullptr, . Double_t ; eps = 0.001 . ); const. virtual . Returns the second derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:63010,Availability,error,error,63010,"001 . ); const. virtual . Returns the first derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - f(x-h)}{2h}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1113 of file TF1.cxx. ◆ Derivative2(). Double_t TF1::Derivative2 ; (; Double_t ; x, . Double_t * ; params = nullptr, . Double_t ; eps = 0.001 . ); const. virtual . Returns the second derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:63210,Availability,error,error,63210," estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - f(x-h)}{2h}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1113 of file TF1.cxx. ◆ Derivative2(). Double_t TF1::Derivative2 ; (; Double_t ; x, . Double_t * ; params = nullptr, . Double_t ; eps = 0.001 . ); const. virtual . Returns the second derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) sh",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:64357,Availability,error,error,64357,"st. virtual . Returns the second derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1178 of file TF1.cxx. ◆ Derivative3(). Double_t TF1::Derivative3 ; (; Double_t ; x, . Double_t * ; params = nullptr, . Double_t ; eps = 0.001 . ); const. virtual . Returns the third derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function param",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:64396,Availability,error,error,64396,"st. virtual . Returns the second derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1178 of file TF1.cxx. ◆ Derivative3(). Double_t TF1::Derivative3 ; (; Double_t ; x, . Double_t * ; params = nullptr, . Double_t ; eps = 0.001 . ); const. virtual . Returns the third derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function param",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:64413,Availability,error,error,64413,"st. virtual . Returns the second derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1178 of file TF1.cxx. ◆ Derivative3(). Double_t TF1::Derivative3 ; (; Double_t ; x, . Double_t * ; params = nullptr, . Double_t ; eps = 0.001 . ); const. virtual . Returns the third derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function param",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:64435,Availability,error,error,64435,"st. virtual . Returns the second derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1178 of file TF1.cxx. ◆ Derivative3(). Double_t TF1::Derivative3 ; (; Double_t ; x, . Double_t * ; params = nullptr, . Double_t ; eps = 0.001 . ); const. virtual . Returns the third derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function param",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:64471,Availability,error,error,64471,"st. virtual . Returns the second derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1178 of file TF1.cxx. ◆ Derivative3(). Double_t TF1::Derivative3 ; (; Double_t ; x, . Double_t * ; params = nullptr, . Double_t ; eps = 0.001 . ); const. virtual . Returns the third derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function param",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:64671,Availability,error,error,64671,") first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1178 of file TF1.cxx. ◆ Derivative3(). Double_t TF1::Derivative3 ; (; Double_t ; x, . Double_t * ; params = nullptr, . Double_t ; eps = 0.001 . ); const. virtual . Returns the third derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default va",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:65832,Availability,error,error,65832,"Returns the third derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1243 of file TF1.cxx. ◆ DerivativeError(). Double_t TF1::DerivativeError ; (; ). static . Static function returning the error of the last call to the of Derivative's functions. ; Definition at line 1277 of file TF1.cxx. ◆ DistancetoPrimitive(). Int_t TF1::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a function. ; Compute the closest distance of approach from point px,py to this function. The distance is computed in pixels units.; Note that px is called with a negative value when the TF1 is in TGraph or TH1 list of functions. In this case there is no point looking at the histogram axis. ; Reimplemented from TObject.; ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:65871,Availability,error,error,65871,"Returns the third derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1243 of file TF1.cxx. ◆ DerivativeError(). Double_t TF1::DerivativeError ; (; ). static . Static function returning the error of the last call to the of Derivative's functions. ; Definition at line 1277 of file TF1.cxx. ◆ DistancetoPrimitive(). Int_t TF1::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a function. ; Compute the closest distance of approach from point px,py to this function. The distance is computed in pixels units.; Note that px is called with a negative value when the TF1 is in TGraph or TH1 list of functions. In this case there is no point looking at the histogram axis. ; Reimplemented from TObject.; ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:65888,Availability,error,error,65888,"Returns the third derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1243 of file TF1.cxx. ◆ DerivativeError(). Double_t TF1::DerivativeError ; (; ). static . Static function returning the error of the last call to the of Derivative's functions. ; Definition at line 1277 of file TF1.cxx. ◆ DistancetoPrimitive(). Int_t TF1::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a function. ; Compute the closest distance of approach from point px,py to this function. The distance is computed in pixels units.; Note that px is called with a negative value when the TF1 is in TGraph or TH1 list of functions. In this case there is no point looking at the histogram axis. ; Reimplemented from TObject.; ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:65910,Availability,error,error,65910,"Returns the third derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1243 of file TF1.cxx. ◆ DerivativeError(). Double_t TF1::DerivativeError ; (; ). static . Static function returning the error of the last call to the of Derivative's functions. ; Definition at line 1277 of file TF1.cxx. ◆ DistancetoPrimitive(). Int_t TF1::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a function. ; Compute the closest distance of approach from point px,py to this function. The distance is computed in pixels units.; Note that px is called with a negative value when the TF1 is in TGraph or TH1 list of functions. In this case there is no point looking at the histogram axis. ; Reimplemented from TObject.; ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:65946,Availability,error,error,65946,"Returns the third derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1243 of file TF1.cxx. ◆ DerivativeError(). Double_t TF1::DerivativeError ; (; ). static . Static function returning the error of the last call to the of Derivative's functions. ; Definition at line 1277 of file TF1.cxx. ◆ DistancetoPrimitive(). Int_t TF1::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a function. ; Compute the closest distance of approach from point px,py to this function. The distance is computed in pixels units.; Note that px is called with a negative value when the TF1 is in TGraph or TH1 list of functions. In this case there is no point looking at the histogram axis. ; Reimplemented from TObject.; ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:66146,Availability,error,error,66146,"tives with steps h and h/2 are computed by central difference formulas. . \[; D(h) = \frac{f(x+2h) - 2f(x+h) + 2f(x-h) - f(x-2h)}{2h^{3}}; \]. the final estimate ; \[; D = \frac{4D(h/2) - D(h)}{3}; \]. ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1243 of file TF1.cxx. ◆ DerivativeError(). Double_t TF1::DerivativeError ; (; ). static . Static function returning the error of the last call to the of Derivative's functions. ; Definition at line 1277 of file TF1.cxx. ◆ DistancetoPrimitive(). Int_t TF1::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a function. ; Compute the closest distance of approach from point px,py to this function. The distance is computed in pixels units.; Note that px is called with a negative value when the TF1 is in TGraph or TH1 list of functions. In this case there is no point looking at the histogram axis. ; Reimplemented from TObject.; Reimplemented in TF2, and TF3.; Definition at line 1293 of file TF1.cxx. ◆ DoCreateHistogram(). TH1 * TF1::DoCreateHistogram ; (; Double_t ; xmin, . Double_t ; xmax, . Bool_t ; recreate = kFA",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:66361,Availability,error,error,66361,".M.Antia, 2nd edition""; if the argument params is null, the current function parameters are used, otherwise the parameters in params are used.; the argument eps may be specified to control the step size (precision). the step size is taken as eps*(xmax-xmin). the default value (0.001) should be good enough for the vast majority of functions. Give a smaller value if your function has many changes of the second derivative in the function range.; Getting the error via TF1::DerivativeError: (total error = roundoff error + interpolation error) the estimate of the roundoff error is taken as follows: ; \[; err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; \]. where k is the double precision, ai are coefficients used in central difference formulas interpolation error is decreased by making the step size h smaller.; AuthorAnna Kreshuk ; Definition at line 1243 of file TF1.cxx. ◆ DerivativeError(). Double_t TF1::DerivativeError ; (; ). static . Static function returning the error of the last call to the of Derivative's functions. ; Definition at line 1277 of file TF1.cxx. ◆ DistancetoPrimitive(). Int_t TF1::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a function. ; Compute the closest distance of approach from point px,py to this function. The distance is computed in pixels units.; Note that px is called with a negative value when the TF1 is in TGraph or TH1 list of functions. In this case there is no point looking at the histogram axis. ; Reimplemented from TObject.; Reimplemented in TF2, and TF3.; Definition at line 1293 of file TF1.cxx. ◆ DoCreateHistogram(). TH1 * TF1::DoCreateHistogram ; (; Double_t ; xmin, . Double_t ; xmax, . Bool_t ; recreate = kFALSE . ). protectedvirtual . Create histogram with bin content equal to function value computed at the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ; Definition at line",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:90439,Availability,error,errors,90439,"t TF1::GetXmax ; (; ); const. inlinevirtual . Definition at line 584 of file TF1.h. ◆ GetXmin(). virtual Double_t TF1::GetXmin ; (; ); const. inlinevirtual . Definition at line 580 of file TF1.h. ◆ GetYaxis(). TAxis * TF1::GetYaxis ; (; ); const. Get y axis of the function. ; Definition at line 2411 of file TF1.cxx. ◆ GetZaxis(). TAxis * TF1::GetZaxis ; (; ); const. Get z axis of the function. (In case this object is a TF2 or TF3) ; Definition at line 2422 of file TF1.cxx. ◆ GradientPar() [1/4]. void TF1::GradientPar ; (; const Double_t * ; x, . Double_t * ; grad, . Double_t ; eps = 0.01 . ). virtual . Compute the gradient wrt parameters If the TF1 object is based on a formula expression (TFormula) and TFormula::GenerateGradientPar() has been successfully called automatic differentiation using CLAD is used instead of the default numerical differentiation. ; Parameters. xpoint, were the gradient is computed ; gradused to return the computed gradient, assumed to be of at least fNpar size ; epsif the errors of parameters have been computed, the step used in numerical differentiation is eps*parameter_error. if the errors have not been computed, step=eps is used default value of eps = 0.01 Method is the same as in Derivative() function; If a parameter is fixed, the gradient on this parameter = 0 ; Definition at line 2468 of file TF1.cxx. ◆ GradientPar() [2/4]. template<class T > . void TF1::GradientPar ; (; const T * ; x, . T * ; grad, . Double_t ; eps = 0.01 . ). inline . Definition at line 970 of file TF1.h. ◆ GradientPar() [3/4]. Double_t TF1::GradientPar ; (; Int_t ; ipar, . const Double_t * ; x, . Double_t ; eps = 0.01 . ). virtual . Compute the gradient (derivative) wrt a parameter ipar. ; Parameters. iparindex of parameter for which the derivative is computed ; xpoint, where the derivative is computed ; eps- if the errors of parameters have been computed, the step used in numerical differentiation is eps*parameter_error. if the errors have not been computed, step=e",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:90554,Availability,error,errors,90554,"finition at line 580 of file TF1.h. ◆ GetYaxis(). TAxis * TF1::GetYaxis ; (; ); const. Get y axis of the function. ; Definition at line 2411 of file TF1.cxx. ◆ GetZaxis(). TAxis * TF1::GetZaxis ; (; ); const. Get z axis of the function. (In case this object is a TF2 or TF3) ; Definition at line 2422 of file TF1.cxx. ◆ GradientPar() [1/4]. void TF1::GradientPar ; (; const Double_t * ; x, . Double_t * ; grad, . Double_t ; eps = 0.01 . ). virtual . Compute the gradient wrt parameters If the TF1 object is based on a formula expression (TFormula) and TFormula::GenerateGradientPar() has been successfully called automatic differentiation using CLAD is used instead of the default numerical differentiation. ; Parameters. xpoint, were the gradient is computed ; gradused to return the computed gradient, assumed to be of at least fNpar size ; epsif the errors of parameters have been computed, the step used in numerical differentiation is eps*parameter_error. if the errors have not been computed, step=eps is used default value of eps = 0.01 Method is the same as in Derivative() function; If a parameter is fixed, the gradient on this parameter = 0 ; Definition at line 2468 of file TF1.cxx. ◆ GradientPar() [2/4]. template<class T > . void TF1::GradientPar ; (; const T * ; x, . T * ; grad, . Double_t ; eps = 0.01 . ). inline . Definition at line 970 of file TF1.h. ◆ GradientPar() [3/4]. Double_t TF1::GradientPar ; (; Int_t ; ipar, . const Double_t * ; x, . Double_t ; eps = 0.01 . ). virtual . Compute the gradient (derivative) wrt a parameter ipar. ; Parameters. iparindex of parameter for which the derivative is computed ; xpoint, where the derivative is computed ; eps- if the errors of parameters have been computed, the step used in numerical differentiation is eps*parameter_error. if the errors have not been computed, step=eps is used default value of eps = 0.01 Method is the same as in Derivative() function; If a parameter is fixed, the gradient on this parameter = 0 ; Definition ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:91275,Availability,error,errors,91275,"merical differentiation. ; Parameters. xpoint, were the gradient is computed ; gradused to return the computed gradient, assumed to be of at least fNpar size ; epsif the errors of parameters have been computed, the step used in numerical differentiation is eps*parameter_error. if the errors have not been computed, step=eps is used default value of eps = 0.01 Method is the same as in Derivative() function; If a parameter is fixed, the gradient on this parameter = 0 ; Definition at line 2468 of file TF1.cxx. ◆ GradientPar() [2/4]. template<class T > . void TF1::GradientPar ; (; const T * ; x, . T * ; grad, . Double_t ; eps = 0.01 . ). inline . Definition at line 970 of file TF1.h. ◆ GradientPar() [3/4]. Double_t TF1::GradientPar ; (; Int_t ; ipar, . const Double_t * ; x, . Double_t ; eps = 0.01 . ). virtual . Compute the gradient (derivative) wrt a parameter ipar. ; Parameters. iparindex of parameter for which the derivative is computed ; xpoint, where the derivative is computed ; eps- if the errors of parameters have been computed, the step used in numerical differentiation is eps*parameter_error. if the errors have not been computed, step=eps is used default value of eps = 0.01 Method is the same as in Derivative() function; If a parameter is fixed, the gradient on this parameter = 0 ; Definition at line 2445 of file TF1.cxx. ◆ GradientPar() [4/4]. template<class T > . T TF1::GradientPar ; (; Int_t ; ipar, . const T * ; x, . Double_t ; eps = 0.01 . ). inline . Definition at line 903 of file TF1.h. ◆ GradientParTempl() [1/2]. template<class T > . void TF1::GradientParTempl ; (; const T * ; x, . T * ; grad, . Double_t ; eps = 0.01 . ). inline . Definition at line 979 of file TF1.h. ◆ GradientParTempl() [2/2]. template<class T > . T TF1::GradientParTempl ; (; Int_t ; ipar, . const T * ; x, . Double_t ; eps = 0.01 . ). inline . Definition at line 912 of file TF1.h. ◆ HasSave(). Bool_t TF1::HasSave ; (; ); const. inline . Return true if function has data in fSave buffer. ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:91390,Availability,error,errors,91390,"size ; epsif the errors of parameters have been computed, the step used in numerical differentiation is eps*parameter_error. if the errors have not been computed, step=eps is used default value of eps = 0.01 Method is the same as in Derivative() function; If a parameter is fixed, the gradient on this parameter = 0 ; Definition at line 2468 of file TF1.cxx. ◆ GradientPar() [2/4]. template<class T > . void TF1::GradientPar ; (; const T * ; x, . T * ; grad, . Double_t ; eps = 0.01 . ). inline . Definition at line 970 of file TF1.h. ◆ GradientPar() [3/4]. Double_t TF1::GradientPar ; (; Int_t ; ipar, . const Double_t * ; x, . Double_t ; eps = 0.01 . ). virtual . Compute the gradient (derivative) wrt a parameter ipar. ; Parameters. iparindex of parameter for which the derivative is computed ; xpoint, where the derivative is computed ; eps- if the errors of parameters have been computed, the step used in numerical differentiation is eps*parameter_error. if the errors have not been computed, step=eps is used default value of eps = 0.01 Method is the same as in Derivative() function; If a parameter is fixed, the gradient on this parameter = 0 ; Definition at line 2445 of file TF1.cxx. ◆ GradientPar() [4/4]. template<class T > . T TF1::GradientPar ; (; Int_t ; ipar, . const T * ; x, . Double_t ; eps = 0.01 . ). inline . Definition at line 903 of file TF1.h. ◆ GradientParTempl() [1/2]. template<class T > . void TF1::GradientParTempl ; (; const T * ; x, . T * ; grad, . Double_t ; eps = 0.01 . ). inline . Definition at line 979 of file TF1.h. ◆ GradientParTempl() [2/2]. template<class T > . T TF1::GradientParTempl ; (; Int_t ; ipar, . const T * ; x, . Double_t ; eps = 0.01 . ). inline . Definition at line 912 of file TF1.h. ◆ HasSave(). Bool_t TF1::HasSave ; (; ); const. inline . Return true if function has data in fSave buffer. ; Definition at line 466 of file TF1.h. ◆ InitArgs(). void TF1::InitArgs ; (; const Double_t * ; x, . const Double_t * ; params . ). virtual . Initialize",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:94518,Availability,error,error,94518,"the TFitResult class. Note that to get the TFitResult, te fit should be done using the fit option S. Example: TFitResultPtr r = histo->Fit(func, ""S"");; func->IntegralError(x1,x2,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:94903,Availability,error,error,94903,"es_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2708 of file TF1.cxx. ◆ IntegralError() [2/2]. Double_t TF1::IntegralError ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . const Double_t * ; params = nullptr, . const Double_t * ;",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:95098,Availability,error,error,95098,"on TGWin32VirtualXProxy.cxx:70; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2708 of file TF1.cxx. ◆ IntegralError() [2/2]. Double_t TF1::IntegralError ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . const Double_t * ; params = nullptr, . const Double_t * ; covmat = nullptr, . Double_t ; epsilon = 1.E-2 . ). virtual . Return Error on Integral of a parametric function with dimension larger than one between a[] and b[] due to the parameters uncertaint",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:97024,Availability,error,error,97024,"rn Error on Integral of a parametric function with dimension larger than one between a[] and b[] due to the parameters uncertainties. ; For a TF1 with dimension larger than 1 (for example a TF2 or TF3) TF1::IntegralMultiple is used for the integral calculation; In addition to the integral limits, this method takes as input a pointer to the fitted parameter values and a pointer the covariance matrix from the fit. These pointers should be retrieved from the previously performed fit using the TFitResult class. Note that to get the TFitResult, te fit should be done using the fit option S. Example: TFitResultPtr r = histo2d->Fit(func2, ""S"");; func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:97409,Availability,error,error,97409,"be retrieved from the previously performed fit using the TFitResult class. Note that to get the TFitResult, te fit should be done using the fit option S. Example: TFitResultPtr r = histo2d->Fit(func2, ""S"");; func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2758 of file TF1.cxx. ◆ IntegralFast(). Double_t TF1::IntegralFast ; (; Int_t ; num, . Double_t * ; x, . Double_t * ; w, . Double_t ; a, . Double_t ; b, . Double_t * ; params = nullptr, . Double_t ;",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:97604,Availability,error,error,97604,"c2, ""S"");; func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2758 of file TF1.cxx. ◆ IntegralFast(). Double_t TF1::IntegralFast ; (; Int_t ; num, . Double_t * ; x, . Double_t * ; w, . Double_t ; a, . Double_t ; b, . Double_t * ; params = nullptr, . Double_t ; epsilon = 1e-12 . ). virtual . Gauss-Legendre integral, see CalcGaussLegendreSamplingPoints. ; Definition at line 2778 of file TF1.cxx. ◆ IntegralMultiple() [1/3]. Double_t TF1::IntegralMultiple ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:101410,Availability,error,error,101410,"ithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use th",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:101534,Availability,toler,tolerance,101534,"cumentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Val",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:109288,Availability,error,errors,109288,"uble_t ; zmin, . Double_t ; zmax . ). virtual . Save values of function in array fSave. ; Reimplemented in TF2, and TF3.; Definition at line 3161 of file TF1.cxx. ◆ SavePrimitive(). void TF1::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Reimplemented in TF12, TF2, and TF3.; Definition at line 3218 of file TF1.cxx. ◆ SetChisquare(). virtual void TF1::SetChisquare ; (; Double_t ; chi2). inlinevirtual . Definition at line 640 of file TF1.h. ◆ SetCurrent(). void TF1::SetCurrent ; (; TF1 * ; f1). static . Static function setting the current function. ; the current function may be accessed in static C-like functions when fitting or painting a function. ; Definition at line 3343 of file TF1.cxx. ◆ SetFitResult(). void TF1::SetFitResult ; (; const ROOT::Fit::FitResult & ; result, . const Int_t * ; indpar = nullptr . ). virtual . Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (with size fNpar) of the parameter indices in the FitResult can be passed This is useful in the case of a combined fit with different functions, and the FitResult contains the global result By default it is assume that indpar = {0,1,2,....,fNpar-1}. ; Definition at line 3355 of file TF1.cxx. ◆ SetFunction() [1/2]. template<typename Func > . void TF1::SetFunction ; (; Func ; f). Definition at line 888 of file TF1.h. ◆ SetFunction() [2/2]. template<class PtrObj , typename MemFn > . void TF1::SetFunction ; (; PtrObj & ; p, . MemFn ; memFn . ). Definition at line 895 of file TF1.h. ◆ SetMaximum(). void TF1::SetMaximum ; (; Double_t ; maximum = -1111). virtual . Set the maximum value along Y for this function In case the function is already drawn, set also the maximum in the helper histogram. ; Definition at line 3394 of file TF1.cxx. ◆ SetMinimum(). void TF1::SetMinimum ; (; Double_t ; minimum = -1111). virtual . Set the m",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:112778,Availability,error,error,112778,". ). inlinevirtual . Definition at line 667 of file TF1.h. ◆ SetParameters() [1/2]. virtual void TF1::SetParameters ; (; const Double_t * ; params). inlinevirtual . Definition at line 677 of file TF1.h. ◆ SetParameters() [2/2]. virtual void TF1::SetParameters ; (; double ; p0, . double ; p1 = TMath::QuietNaN(), . double ; p2 = TMath::QuietNaN(), . double ; p3 = TMath::QuietNaN(), . double ; p4 = TMath::QuietNaN(), . double ; p5 = TMath::QuietNaN(), . double ; p6 = TMath::QuietNaN(), . double ; p7 = TMath::QuietNaN(), . double ; p8 = TMath::QuietNaN(), . double ; p9 = TMath::QuietNaN(), . double ; p10 = TMath::QuietNaN() . ). inlinevirtual . Set parameter values. ; NaN values will be skipped, meaning that the corresponding parameters will not be changed. ; Definition at line 684 of file TF1.h. ◆ SetParent(). virtual void TF1::SetParent ; (; TObject * ; p = nullptr). inlinevirtual . Definition at line 706 of file TF1.h. ◆ SetParError(). void TF1::SetParError ; (; Int_t ; ipar, . Double_t ; error . ). virtual . Set error for parameter number ipar. ; Definition at line 3479 of file TF1.cxx. ◆ SetParErrors(). void TF1::SetParErrors ; (; const Double_t * ; errors). virtual . Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ; Definition at line 3490 of file TF1.cxx. ◆ SetParLimits(). void TF1::SetParLimits ; (; Int_t ; ipar, . Double_t ; parmin, . Double_t ; parmax . ). virtual . Set lower and upper limits for parameter ipar. ; The specified limits will be used in a fit operation. Note that when this function is a pre-defined function (e.g. gaus) one needs to use the fit option ""B"" to have the limits used in the fit. See TH1::Fit(TF1*, Option_t *, Option_t *, Double_t, Double_t) for the fitting documentation and the fitting options; To fix a parameter, use TF1::FixParameter ; Definition at line 3507 of file TF1.cxx. ◆ SetParName(). void TF1::SetParName ; (; Int_t ; ipar, . const char * ; name . ). virtual . S",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:112803,Availability,error,error,112803,"67 of file TF1.h. ◆ SetParameters() [1/2]. virtual void TF1::SetParameters ; (; const Double_t * ; params). inlinevirtual . Definition at line 677 of file TF1.h. ◆ SetParameters() [2/2]. virtual void TF1::SetParameters ; (; double ; p0, . double ; p1 = TMath::QuietNaN(), . double ; p2 = TMath::QuietNaN(), . double ; p3 = TMath::QuietNaN(), . double ; p4 = TMath::QuietNaN(), . double ; p5 = TMath::QuietNaN(), . double ; p6 = TMath::QuietNaN(), . double ; p7 = TMath::QuietNaN(), . double ; p8 = TMath::QuietNaN(), . double ; p9 = TMath::QuietNaN(), . double ; p10 = TMath::QuietNaN() . ). inlinevirtual . Set parameter values. ; NaN values will be skipped, meaning that the corresponding parameters will not be changed. ; Definition at line 684 of file TF1.h. ◆ SetParent(). virtual void TF1::SetParent ; (; TObject * ; p = nullptr). inlinevirtual . Definition at line 706 of file TF1.h. ◆ SetParError(). void TF1::SetParError ; (; Int_t ; ipar, . Double_t ; error . ). virtual . Set error for parameter number ipar. ; Definition at line 3479 of file TF1.cxx. ◆ SetParErrors(). void TF1::SetParErrors ; (; const Double_t * ; errors). virtual . Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ; Definition at line 3490 of file TF1.cxx. ◆ SetParLimits(). void TF1::SetParLimits ; (; Int_t ; ipar, . Double_t ; parmin, . Double_t ; parmax . ). virtual . Set lower and upper limits for parameter ipar. ; The specified limits will be used in a fit operation. Note that when this function is a pre-defined function (e.g. gaus) one needs to use the fit option ""B"" to have the limits used in the fit. See TH1::Fit(TF1*, Option_t *, Option_t *, Double_t, Double_t) for the fitting documentation and the fitting options; To fix a parameter, use TF1::FixParameter ; Definition at line 3507 of file TF1.cxx. ◆ SetParName(). void TF1::SetParName ; (; Int_t ; ipar, . const char * ; name . ). virtual . Set name of parameter number ipar. ; Defin",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:112944,Availability,error,errors,112944,"inlinevirtual . Definition at line 677 of file TF1.h. ◆ SetParameters() [2/2]. virtual void TF1::SetParameters ; (; double ; p0, . double ; p1 = TMath::QuietNaN(), . double ; p2 = TMath::QuietNaN(), . double ; p3 = TMath::QuietNaN(), . double ; p4 = TMath::QuietNaN(), . double ; p5 = TMath::QuietNaN(), . double ; p6 = TMath::QuietNaN(), . double ; p7 = TMath::QuietNaN(), . double ; p8 = TMath::QuietNaN(), . double ; p9 = TMath::QuietNaN(), . double ; p10 = TMath::QuietNaN() . ). inlinevirtual . Set parameter values. ; NaN values will be skipped, meaning that the corresponding parameters will not be changed. ; Definition at line 684 of file TF1.h. ◆ SetParent(). virtual void TF1::SetParent ; (; TObject * ; p = nullptr). inlinevirtual . Definition at line 706 of file TF1.h. ◆ SetParError(). void TF1::SetParError ; (; Int_t ; ipar, . Double_t ; error . ). virtual . Set error for parameter number ipar. ; Definition at line 3479 of file TF1.cxx. ◆ SetParErrors(). void TF1::SetParErrors ; (; const Double_t * ; errors). virtual . Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ; Definition at line 3490 of file TF1.cxx. ◆ SetParLimits(). void TF1::SetParLimits ; (; Int_t ; ipar, . Double_t ; parmin, . Double_t ; parmax . ). virtual . Set lower and upper limits for parameter ipar. ; The specified limits will be used in a fit operation. Note that when this function is a pre-defined function (e.g. gaus) one needs to use the fit option ""B"" to have the limits used in the fit. See TH1::Fit(TF1*, Option_t *, Option_t *, Double_t, Double_t) for the fitting documentation and the fitting options; To fix a parameter, use TF1::FixParameter ; Definition at line 3507 of file TF1.cxx. ◆ SetParName(). void TF1::SetParName ; (; Int_t ; ipar, . const char * ; name . ). virtual . Set name of parameter number ipar. ; Definition at line 3450 of file TF1.cxx. ◆ SetParNames(). void TF1::SetParNames ; (; const char * ; name0 = """", ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:112967,Availability,error,errors,112967,"::SetParameters ; (; double ; p0, . double ; p1 = TMath::QuietNaN(), . double ; p2 = TMath::QuietNaN(), . double ; p3 = TMath::QuietNaN(), . double ; p4 = TMath::QuietNaN(), . double ; p5 = TMath::QuietNaN(), . double ; p6 = TMath::QuietNaN(), . double ; p7 = TMath::QuietNaN(), . double ; p8 = TMath::QuietNaN(), . double ; p9 = TMath::QuietNaN(), . double ; p10 = TMath::QuietNaN() . ). inlinevirtual . Set parameter values. ; NaN values will be skipped, meaning that the corresponding parameters will not be changed. ; Definition at line 684 of file TF1.h. ◆ SetParent(). virtual void TF1::SetParent ; (; TObject * ; p = nullptr). inlinevirtual . Definition at line 706 of file TF1.h. ◆ SetParError(). void TF1::SetParError ; (; Int_t ; ipar, . Double_t ; error . ). virtual . Set error for parameter number ipar. ; Definition at line 3479 of file TF1.cxx. ◆ SetParErrors(). void TF1::SetParErrors ; (; const Double_t * ; errors). virtual . Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ; Definition at line 3490 of file TF1.cxx. ◆ SetParLimits(). void TF1::SetParLimits ; (; Int_t ; ipar, . Double_t ; parmin, . Double_t ; parmax . ). virtual . Set lower and upper limits for parameter ipar. ; The specified limits will be used in a fit operation. Note that when this function is a pre-defined function (e.g. gaus) one needs to use the fit option ""B"" to have the limits used in the fit. See TH1::Fit(TF1*, Option_t *, Option_t *, Double_t, Double_t) for the fitting documentation and the fitting options; To fix a parameter, use TF1::FixParameter ; Definition at line 3507 of file TF1.cxx. ◆ SetParName(). void TF1::SetParName ; (; Int_t ; ipar, . const char * ; name . ). virtual . Set name of parameter number ipar. ; Definition at line 3450 of file TF1.cxx. ◆ SetParNames(). void TF1::SetParNames ; (; const char * ; name0 = """", . const char * ; name1 = """", . const char * ; name2 = """", . const char * ; name3 = """", . const c",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:113038,Availability,error,errors,113038,"::SetParameters ; (; double ; p0, . double ; p1 = TMath::QuietNaN(), . double ; p2 = TMath::QuietNaN(), . double ; p3 = TMath::QuietNaN(), . double ; p4 = TMath::QuietNaN(), . double ; p5 = TMath::QuietNaN(), . double ; p6 = TMath::QuietNaN(), . double ; p7 = TMath::QuietNaN(), . double ; p8 = TMath::QuietNaN(), . double ; p9 = TMath::QuietNaN(), . double ; p10 = TMath::QuietNaN() . ). inlinevirtual . Set parameter values. ; NaN values will be skipped, meaning that the corresponding parameters will not be changed. ; Definition at line 684 of file TF1.h. ◆ SetParent(). virtual void TF1::SetParent ; (; TObject * ; p = nullptr). inlinevirtual . Definition at line 706 of file TF1.h. ◆ SetParError(). void TF1::SetParError ; (; Int_t ; ipar, . Double_t ; error . ). virtual . Set error for parameter number ipar. ; Definition at line 3479 of file TF1.cxx. ◆ SetParErrors(). void TF1::SetParErrors ; (; const Double_t * ; errors). virtual . Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ; Definition at line 3490 of file TF1.cxx. ◆ SetParLimits(). void TF1::SetParLimits ; (; Int_t ; ipar, . Double_t ; parmin, . Double_t ; parmax . ). virtual . Set lower and upper limits for parameter ipar. ; The specified limits will be used in a fit operation. Note that when this function is a pre-defined function (e.g. gaus) one needs to use the fit option ""B"" to have the limits used in the fit. See TH1::Fit(TF1*, Option_t *, Option_t *, Double_t, Double_t) for the fitting documentation and the fitting options; To fix a parameter, use TF1::FixParameter ; Definition at line 3507 of file TF1.cxx. ◆ SetParName(). void TF1::SetParName ; (; Int_t ; ipar, . const char * ; name . ). virtual . Set name of parameter number ipar. ; Definition at line 3450 of file TF1.cxx. ◆ SetParNames(). void TF1::SetParNames ; (; const char * ; name0 = """", . const char * ; name1 = """", . const char * ; name2 = """", . const char * ; name3 = """", . const c",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:120390,Availability,error,errors,120390,zation option (false by default) ; Definition at line 285 of file TF1.h. ◆ fNormIntegral. Double_t TF1::fNormIntegral {}. protected . Integral of the function before being normalized. ; Definition at line 286 of file TF1.h. ◆ fNpar. Int_t TF1::fNpar {}. protected . Number of parameters. ; Definition at line 265 of file TF1.h. ◆ fNpfits. Int_t TF1::fNpfits {}. protected . Number of points used in the fit. ; Definition at line 269 of file TF1.h. ◆ fNpx. Int_t TF1::fNpx {100}. protected . Number of points used for the graphical representation. ; Definition at line 267 of file TF1.h. ◆ fParams. std::unique_ptr<TF1Parameters> TF1::fParams. protected . Pointer to Function parameters object (exists only for not-formula functions) ; Definition at line 289 of file TF1.h. ◆ fParent. TObject* TF1::fParent {nullptr}. protected . ! Parent object hooking this function (if one) ; Definition at line 282 of file TF1.h. ◆ fParErrors. std::vector<Double_t> TF1::fParErrors. protected . Array of errors of the fNpar parameters. ; Definition at line 274 of file TF1.h. ◆ fParMax. std::vector<Double_t> TF1::fParMax. protected . Array of upper limits of the fNpar parameters. ; Definition at line 276 of file TF1.h. ◆ fParMin. std::vector<Double_t> TF1::fParMin. protected . Array of lower limits of the fNpar parameters. ; Definition at line 275 of file TF1.h. ◆ fSave. std::vector<Double_t> TF1::fSave. protected . Array of fNsave function values. ; Definition at line 277 of file TF1.h. ◆ fType. EFType TF1::fType {EFType::kTemplScalar}. protected . Definition at line 268 of file TF1.h. ◆ fXmax. Double_t TF1::fXmax {-1111}. protected . Upper bounds for the range. ; Definition at line 264 of file TF1.h. ◆ fXmin. Double_t TF1::fXmin {-1111}. protected . Lower bounds for the range. ; Definition at line 263 of file TF1.h. Libraries for TF1:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TF1.h; hist/hist/src/TF1.cxx. TF1. ROOT master - Reference Guide,MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:84006,Deployability,integrat,integrated,84006,"aximum size of array xp and size of array p ; [out]xparray filled with n quantiles evaluated at p. Memory has to be preallocated by caller. ; [in]parray of cumulative probabilities where quantiles should be evaluated. It is assumed to contain at least n values. . Returnsn, the number of quantiles computed (same as input argument n); Getting quantiles from two histograms and storing results in a TGraph, a so-called QQ-plot TGraph *gr = new TGraph(nprob);; f1->GetQuantiles(nprob,gr->GetX(),p);; f2->GetQuantiles(nprob,gr->GetY(),p);; gr->Draw(""alp"");; AuthorEddy Offermann ; WarningFunction leads to undefined behavior if xp or p are null or their size does not match with n ; Definition at line 1994 of file TF1.cxx. ◆ GetRandom() [1/2]. Double_t TF1::GetRandom ; (; Double_t ; xmin, . Double_t ; xmax, . TRandom * ; rng = nullptr, . Option_t * ; option = nullptr . ). virtual . Return a random number following this function shape in [xmin,xmax]. ; The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The parabolic approximation is very good as soon as the number of bins is greater than 50.; Parameters. xminminimum value for generated random numbers ; xmaxmaximum value for generated random numbers ; rng(optional) random number generator pointer ; option(optional) : LOG or LIN to force the usage of a log or linear scale for computing the cumulative integral table. IMPORTANT NOTE; The integral of the function is computed at fNpx points. If the function has sharp peaks, you should increase the number of points (SetNpx) such that the peak is correctly tabulate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:85733,Deployability,integrat,integrated,85733,"usage of a log or linear scale for computing the cumulative integral table. IMPORTANT NOTE; The integral of the function is computed at fNpx points. If the function has sharp peaks, you should increase the number of points (SetNpx) such that the peak is correctly tabulated at several points. ; Reimplemented in TF2.; Definition at line 2245 of file TF1.cxx. ◆ GetRandom() [2/2]. Double_t TF1::GetRandom ; (; TRandom * ; rng = nullptr, . Option_t * ; option = nullptr . ). virtual . Return a random number following this function shape. ; Parameters. rngRandom number generator. By default (or when passing a nullptr) the global gRandom is used ; optionOption string which controls the binning used to compute the integral. Default mode is automatic depending of xmax, xmin and Npx (function points). Possible values are:; ""LOG"" to force usage of log scale for tabulating the integral; ""LIN"" to force usage of linear scale when tabulating the integral. The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The user can provide as optional parameter a Random number generator. By default gRandom is used; If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x A log scale for the intergral is also always used if a user specifies the ""LOG"" option Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale whatever the fXmax/fXmin ratio is; Note that the parabolic approximation is very good as soon as the number of bins is greater than 50. ; Reimplemented in TF2.; Definition at line 2192 of file TF1.cxx. ◆ GetRange()",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:99459,Deployability,integrat,integration,99459,"Legendre integral, see CalcGaussLegendreSamplingPoints. ; Definition at line 2778 of file TF1.cxx. ◆ IntegralMultiple() [1/3]. Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Double_t ; epsrel, . Double_t & ; relerr . ). virtual . See more general prototype below. ; This interface kept for back compatibility It is recommended to use the other interface where one can specify also epsabs and the maximum number of points ; Definition at line 2798 of file TF1.cxx. ◆ IntegralMultiple() [2/3]. Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; maxpts, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). virtual . This function computes, to an attempted specified accuracy, the value of the integral. ; Parameters. [in]nNumber of dimensions [2,15] ; [in]a,bOne-dimensional arrays of length >= N . On entry A[i], and B[i], contain the lower and upper limits of integration, respectively. ; [in]maxptsMaximum number of function evaluations to be allowed. maxpts >= 2^n +2*n*(n+1) +1 if maxpts<minpts, maxpts is set to 10*minpts ; [in]epsrelSpecified relative accuracy. ; [in]epsabsSpecified absolute accuracy. The integration algorithm will attempt to reach either the relative or the absolute accuracy. In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::A",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:99711,Deployability,integrat,integration,99711," ; This interface kept for back compatibility It is recommended to use the other interface where one can specify also epsabs and the maximum number of points ; Definition at line 2798 of file TF1.cxx. ◆ IntegralMultiple() [2/3]. Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; maxpts, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). virtual . This function computes, to an attempted specified accuracy, the value of the integral. ; Parameters. [in]nNumber of dimensions [2,15] ; [in]a,bOne-dimensional arrays of length >= N . On entry A[i], and B[i], contain the lower and upper limits of integration, respectively. ; [in]maxptsMaximum number of function evaluations to be allowed. maxpts >= 2^n +2*n*(n+1) +1 if maxpts<minpts, maxpts is set to 10*minpts ; [in]epsrelSpecified relative accuracy. ; [in]epsabsSpecified absolute accuracy. The integration algorithm will attempt to reach either the relative or the absolute accuracy. In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:100626,Deployability,integrat,integrators,100626,"vely. ; [in]maxptsMaximum number of function evaluations to be allowed. maxpts >= 2^n +2*n*(n+1) +1 if maxpts<minpts, maxpts is set to 10*minpts ; [in]epsrelSpecified relative accuracy. ; [in]epsabsSpecified absolute accuracy. The integration algorithm will attempt to reach either the relative or the absolute accuracy. In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:100654,Deployability,integrat,integrators,100654," In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:100673,Deployability,integrat,integrators,100673," In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:100791,Deployability,integrat,integration,100791," In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:101559,Deployability,integrat,integrator,101559," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:101696,Deployability,integrat,integrator,101696," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:101912,Deployability,integrat,integration,101912," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:101945,Deployability,integrat,integration,101945," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102058,Deployability,integrat,integrator,102058," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102413,Deployability,integrat,integrators,102413,"sing the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate on a large domain; double r1 = g->Integral(0,5);; double r2 = g->Integral(0,1000);; ; //try with user directives computing more points; Int_t np = 1000;; double *x=new double[np];; double *w=new double[np];; g->CalcGaussLegendreSamplingPoints(np,x,w,1e-15);; double r3 = g->IntegralFast(np,x,w,0,5);; double r4 = g->IntegralFast(np,x,w,0,1000);; double r5 = g->IntegralFast(np,x,w,0,10000);; double r6 = g->IntegralFast(np,x,w,0,100000);; printf(""g->Integral(0,5) = %g\n"",r1);; printf(""g->Integral(0,1000) = %",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102464,Deployability,install,installed,102464,"sing the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate on a large domain; double r1 = g->Integral(0,5);; double r2 = g->Integral(0,1000);; ; //try with user directives computing more points; Int_t np = 1000;; double *x=new double[np];; double *w=new double[np];; g->CalcGaussLegendreSamplingPoints(np,x,w,1e-15);; double r3 = g->IntegralFast(np,x,w,0,5);; double r4 = g->IntegralFast(np,x,w,0,1000);; double r5 = g->IntegralFast(np,x,w,0,10000);; double r6 = g->IntegralFast(np,x,w,0,100000);; printf(""g->Integral(0,5) = %g\n"",r1);; printf(""g->Integral(0,1000) = %",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102905,Deployability,integrat,integration,102905,"or ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate on a large domain; double r1 = g->Integral(0,5);; double r2 = g->Integral(0,1000);; ; //try with user directives computing more points; Int_t np = 1000;; double *x=new double[np];; double *w=new double[np];; g->CalcGaussLegendreSamplingPoints(np,x,w,1e-15);; double r3 = g->IntegralFast(np,x,w,0,5);; double r4 = g->IntegralFast(np,x,w,0,1000);; double r5 = g->IntegralFast(np,x,w,0,10000);; double r6 = g->IntegralFast(np,x,w,0,100000);; printf(""g->Integral(0,5) = %g\n"",r1);; printf(""g->Integral(0,1000) = %g\n"",r2);; printf(""g->IntegralFast(n,x,w,0,5) = %g\n"",r3);; printf(""g->IntegralFast(n,x,w,0,1000) = %g\n"",r4);; printf(""g->IntegralFast(n,x,w,0,10000) = %g\n"",r5);; printf(""g->IntegralFast(n,x,w,0,100000)= %g\n"",r6);; delete [] x;; delete [] w;; }; e#define e(i)Definition RSha256.hxx:103; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cu",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102957,Deployability,integrat,integrate,102957,"or ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate on a large domain; double r1 = g->Integral(0,5);; double r2 = g->Integral(0,1000);; ; //try with user directives computing more points; Int_t np = 1000;; double *x=new double[np];; double *w=new double[np];; g->CalcGaussLegendreSamplingPoints(np,x,w,1e-15);; double r3 = g->IntegralFast(np,x,w,0,5);; double r4 = g->IntegralFast(np,x,w,0,1000);; double r5 = g->IntegralFast(np,x,w,0,10000);; double r6 = g->IntegralFast(np,x,w,0,100000);; printf(""g->Integral(0,5) = %g\n"",r1);; printf(""g->Integral(0,1000) = %g\n"",r2);; printf(""g->IntegralFast(n,x,w,0,5) = %g\n"",r3);; printf(""g->IntegralFast(n,x,w,0,1000) = %g\n"",r4);; printf(""g->IntegralFast(n,x,w,0,10000) = %g\n"",r5);; printf(""g->IntegralFast(n,x,w,0,100000)= %g\n"",r6);; delete [] x;; delete [] w;; }; e#define e(i)Definition RSha256.hxx:103; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cu",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:2803,Energy Efficiency,power,power,2803,"ression using standard C++ functions/operators; Example a:; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; This creates a function of variable x with 2 parameters. The parameters must be initialized via:; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; Parameters may be given a name:; fa->SetParName(0,""Constant"");; Example b:; auto fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);; gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2) and (0) means start numbering parameters at 0. expo(3) is a substitute for exp([3]+[4]*x).; Case 2: inline expression using TMath functions with parameters; {; auto fb2 = new TF1(""fa3"",""TMath::Landau(x,[0],[1],0)"",-5,10);; fb2->SetParameters(0.2,1.3);; fb2->Draw();; }. 3 - A lambda expression with variables and parameters; Since6.00/00: TF1 supports using lambda expressions in the formula. This allows, by using a full C++ syntax the full power of lambda functions and still maintain the capability of storing the function in a file which cannot be done with function pointer or lambda written not as expression, but as code (see items below).; Example on how using lambda to define a sum of two functions. Note that is necessary to provide the number of parameters; TF1 f1(""f1"",""sin(x)"",0,10);; TF1 f2(""f2"",""cos(x)"",0,10);; TF1 fsum(""f1"",""[&](double *x, double *p){ return p[0]*f1(x) + p[1]*f2(x); }"",0,10,2);; TF11-Dim function classDefinition TF1.h:233; f1TF1 * f1Definition legend1.C:11. 4 - A general C function with parameters; Consider the macro myfunc.C below:; // Macro myfunc.C; Double_t myfunction(Double_t *x, Double_t *par); {; Float_t xx =x[0];; Double_t f = TMath::Abs(par[0]*sin(par[1]*xx)/xx);; return f;; }; void myfunc(); {; auto f1 = new TF1(""myfunc"",myfunction,0,10,2);; f1->SetParameters(2,1);; f1->SetParNames(""constant"",""coefficient"");; f1->Draw();; }; void myfit(); {; auto h1 = new TH1F(""h1"",""test"",100,0,10);; h1->FillRandom(""myfunc"",20000);; TF1 *f1 = (TF1 *)gROOT->GetFunction(""myfunc"");",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:9060,Energy Efficiency,charge,charges,9060," TF1 class has several additions for its use from Python, which are also available in its subclasses TF2 and TF3.; First, TF1 instance can be initialized with user-defined Python functions. Given a generic Python callable, the following can performed:; def func(x: numpy.ndarray, pars: numpy.ndarray) -> float:; return pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; x = np.array([; [1.0, 10, 2.0],; [1.5, 10, 2.5],; [2.0, 10, 3.0],; [2.5, 10, 3.5],; [3.0, 10, 4.0]; ]); ; params = np.array([; [1.0], # Distance between charges r; [8.99e9], # Coulomb constant k (in N·m²/C²); [0.1] # Additional factor for modulation; ]); ; # Slice to avoid the dummy column of 10's; res = rtf1_coulomb.EvalPar(x[:, ::2], params). Definition at line 233 of file TF1.h. Classes; struct  TF1FunctorPointer;  ; struct  TF1FunctorPointerImpl;  . Public Types; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; en",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:9222,Energy Efficiency,charge,charges,9222,"eneric Python callable, the following can performed:; def func(x: numpy.ndarray, pars: numpy.ndarray) -> float:; return pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; x = np.array([; [1.0, 10, 2.0],; [1.5, 10, 2.5],; [2.0, 10, 3.0],; [2.5, 10, 3.5],; [3.0, 10, 4.0]; ]); ; params = np.array([; [1.0], # Distance between charges r; [8.99e9], # Coulomb constant k (in N·m²/C²); [0.1] # Additional factor for modulation; ]); ; # Slice to avoid the dummy column of 10's; res = rtf1_coulomb.EvalPar(x[:, ::2], params). Definition at line 233 of file TF1.h. Classes; struct  TF1FunctorPointer;  ; struct  TF1FunctorPointerImpl;  . Public Types; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:100375,Energy Efficiency,adapt,adaptive,100375,"vely. ; [in]maxptsMaximum number of function evaluations to be allowed. maxpts >= 2^n +2*n*(n+1) +1 if maxpts<minpts, maxpts is set to 10*minpts ; [in]epsrelSpecified relative accuracy. ; [in]epsabsSpecified absolute accuracy. The integration algorithm will attempt to reach either the relative or the absolute accuracy. In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:101724,Energy Efficiency,adapt,adaptive,101724," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102220,Energy Efficiency,adapt,adaptive,102220," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102292,Energy Efficiency,adapt,adaptive,102292," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102373,Energy Efficiency,adapt,adaptive,102373," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:32038,Integrability,message,message,32038,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:32459,Integrability,message,message,32459,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:33317,Integrability,message,message,33317," this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:36160,Integrability,message,message,36160,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:36533,Integrability,message,message,36533,"move this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:41235,Integrability,interface,interface,41235,"  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag i",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:46223,Integrability,wrap,wrap,46223,"e_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; virtual void GetRange (Double_t *xmin, Double_t *xmax) const;  Return range of a generic N-D function. ;  ; void IntegrateForNormalization ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsComposition > fComposition;  Pointer to composition (NSUM or CONV) ;  ; std::unique_ptr< TFormula > fFormula;  Pointer to TFormula in case when user define formula. ;  ; std::unique_ptr< TF1FunctorPointer > fFunctor;  ! Functor object to wrap any C++ callable object ;  ; std::vector< Double_t > fGamma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::unique_ptr< TMethodCall > fMethodCall;  ! Pointer to MethodCall in case of interpreted function ;  ; Double_t fMinimum {-1111};  Minimum value for plotting. ;  ; Int_t fNDF {};  Number of degrees of freedom in the fit. ;  ; Int_t fNdim {};  Function dimension. ;  ; Bool_t fNormalized {false};  Normalization option (false by default) ;  ; Double_t fNormIntegral {};  Integral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:53047,Integrability,interface,interface,53047,"arameters fcn must be a function of type:; Double_t fcn(Double_t *x, Double_t *params); This constructor is called for functions of type C by the C++ interpreter.; WarningA function created with this constructor cannot be Cloned. ; Definition at line 714 of file TF1.cxx. ◆ TF1() [6/15]. TF1::TF1 ; (; const char * ; name, . Double_t(*)(Double_t *, Double_t *) ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). Constructor using a pointer to a real function. ; Parameters. [in]nameobject name ; [in]fcnpointer to function ; [in]xmin,xmaxx axis limits ; [in]nparis the number of free parameters used by the function ; [in]ndimnumber of dimensions ; [in]addToGlobListboolean marking if it should be added to global list. This constructor creates a function of type C when invoked with the normal C++ compiler.; see test program test/stress.cxx (function stress1) for an example. note the interface with an intermediate pointer.; WarningA function created with this constructor cannot be Cloned. ; Definition at line 753 of file TF1.cxx. ◆ TF1() [7/15]. TF1::TF1 ; (; const char * ; name, . Double_t(*)(const Double_t *, const Double_t *) ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). Constructor using a pointer to (const) real function. ; Parameters. [in]nameobject name ; [in]fcnpointer to function ; [in]xmin,xmaxx axis limits ; [in]nparis the number of free parameters used by the function ; [in]ndimnumber of dimensions ; [in]addToGlobListboolean marking if it should be added to global list. This constructor creates a function of type C when invoked with the normal C++ compiler.; see test program test/stress.cxx (function stress1) for an example. note the interface with an intermediate pointer.; WarningA function created with this constructor cannot be Cloned. ; Definition at line 775 of",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:53928,Integrability,interface,interface,53928,"h the normal C++ compiler.; see test program test/stress.cxx (function stress1) for an example. note the interface with an intermediate pointer.; WarningA function created with this constructor cannot be Cloned. ; Definition at line 753 of file TF1.cxx. ◆ TF1() [7/15]. TF1::TF1 ; (; const char * ; name, . Double_t(*)(const Double_t *, const Double_t *) ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). Constructor using a pointer to (const) real function. ; Parameters. [in]nameobject name ; [in]fcnpointer to function ; [in]xmin,xmaxx axis limits ; [in]nparis the number of free parameters used by the function ; [in]ndimnumber of dimensions ; [in]addToGlobListboolean marking if it should be added to global list. This constructor creates a function of type C when invoked with the normal C++ compiler.; see test program test/stress.cxx (function stress1) for an example. note the interface with an intermediate pointer.; WarningA function created with this constructor cannot be Cloned. ; Definition at line 775 of file TF1.cxx. ◆ TF1() [8/15]. template<class T > . TF1::TF1 ; (; const char * ; name, . std::function< T(const T *data, const Double_t *param)> & ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). inline . Definition at line 357 of file TF1.h. ◆ TF1() [9/15]. template<class T > . TF1::TF1 ; (; const char * ; name, . T(*)(const T *, const Double_t *) ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). inline . Constructor using a pointer to function. ; Parameters. [in]nameobject name ; [in]fcnpointer to function ; [in]xmin,xmaxx axis limits ; [in]nparis the number of free parameters used by the function ; [in]ndimnumber of dimensions ; [in]addToGlobListboolean marking if it s",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:58396,Integrability,interface,interface,58396,"he original function value to compute the integral However, TF1::Moment, CentralMoment require to compute the integral using the absolute value of the function. ; Definition at line 984 of file TF1.cxx. ◆ AddParameter(). virtual void TF1::AddParameter ; (; const TString & ; name, . Double_t ; value . ). inlinevirtual . Definition at line 435 of file TF1.h. ◆ AddToGlobalList(). Bool_t TF1::AddToGlobalList ; (; Bool_t ; on = kTRUE). virtual . Add to global list of functions (gROOT->GetListOfFunctions() ) return previous status (true if the function was already in the list false if not) ; Definition at line 847 of file TF1.cxx. ◆ Browse(). void TF1::Browse ; (; TBrowser * ; b). overridevirtual . Browse. ; Reimplemented from TObject.; Definition at line 993 of file TF1.cxx. ◆ CalcGaussLegendreSamplingPoints(). void TF1::CalcGaussLegendreSamplingPoints ; (; Int_t ; num, . Double_t * ; x, . Double_t * ; w, . Double_t ; eps = 3.0e-11 . ). static . Type safe interface (static method) The number of sampling points are taken from the TGraph. ; Type: unsafe but fast interface filling the arrays x and w (static method); Given the number of sampling points this routine fills the arrays x and w of length num, containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula.; Gauss-Legendre: ; \[; W(x)=1 -1<x<1 \\; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; \]. num is the number of sampling points (>0) x and w are arrays of size num eps is the relative precision; If num<=0 or eps<=0 no action is done.; Reference: Numerical Recipes in C, Second Edition ; Definition at line 3826 of file TF1.cxx. ◆ CentralMoment(). Double_t TF1::CentralMoment ; (; Double_t ; n, . Double_t ; a, . Double_t ; b, . const Double_t * ; params = nullptr, . Double_t ; epsilon = 0.000001 . ). virtual . Return nth central moment of function between a and b (i.e the n-th moment around the mean value) ; See TF1::Integral() for parameter definitions; AuthorGene Van Buren gene@.nosp@m.bnl..nosp@m.gov ; ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:58503,Integrability,interface,interface,58503," at line 984 of file TF1.cxx. ◆ AddParameter(). virtual void TF1::AddParameter ; (; const TString & ; name, . Double_t ; value . ). inlinevirtual . Definition at line 435 of file TF1.h. ◆ AddToGlobalList(). Bool_t TF1::AddToGlobalList ; (; Bool_t ; on = kTRUE). virtual . Add to global list of functions (gROOT->GetListOfFunctions() ) return previous status (true if the function was already in the list false if not) ; Definition at line 847 of file TF1.cxx. ◆ Browse(). void TF1::Browse ; (; TBrowser * ; b). overridevirtual . Browse. ; Reimplemented from TObject.; Definition at line 993 of file TF1.cxx. ◆ CalcGaussLegendreSamplingPoints(). void TF1::CalcGaussLegendreSamplingPoints ; (; Int_t ; num, . Double_t * ; x, . Double_t * ; w, . Double_t ; eps = 3.0e-11 . ). static . Type safe interface (static method) The number of sampling points are taken from the TGraph. ; Type: unsafe but fast interface filling the arrays x and w (static method); Given the number of sampling points this routine fills the arrays x and w of length num, containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula.; Gauss-Legendre: ; \[; W(x)=1 -1<x<1 \\; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; \]. num is the number of sampling points (>0) x and w are arrays of size num eps is the relative precision; If num<=0 or eps<=0 no action is done.; Reference: Numerical Recipes in C, Second Edition ; Definition at line 3826 of file TF1.cxx. ◆ CentralMoment(). Double_t TF1::CentralMoment ; (; Double_t ; n, . Double_t ; a, . Double_t ; b, . const Double_t * ; params = nullptr, . Double_t ; epsilon = 0.000001 . ). virtual . Return nth central moment of function between a and b (i.e the n-th moment around the mean value) ; See TF1::Integral() for parameter definitions; AuthorGene Van Buren gene@.nosp@m.bnl..nosp@m.gov ; Definition at line 3739 of file TF1.cxx. ◆ Class(). static TClass * TF1::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TF",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:58598,Integrability,rout,routine,58598," at line 984 of file TF1.cxx. ◆ AddParameter(). virtual void TF1::AddParameter ; (; const TString & ; name, . Double_t ; value . ). inlinevirtual . Definition at line 435 of file TF1.h. ◆ AddToGlobalList(). Bool_t TF1::AddToGlobalList ; (; Bool_t ; on = kTRUE). virtual . Add to global list of functions (gROOT->GetListOfFunctions() ) return previous status (true if the function was already in the list false if not) ; Definition at line 847 of file TF1.cxx. ◆ Browse(). void TF1::Browse ; (; TBrowser * ; b). overridevirtual . Browse. ; Reimplemented from TObject.; Definition at line 993 of file TF1.cxx. ◆ CalcGaussLegendreSamplingPoints(). void TF1::CalcGaussLegendreSamplingPoints ; (; Int_t ; num, . Double_t * ; x, . Double_t * ; w, . Double_t ; eps = 3.0e-11 . ). static . Type safe interface (static method) The number of sampling points are taken from the TGraph. ; Type: unsafe but fast interface filling the arrays x and w (static method); Given the number of sampling points this routine fills the arrays x and w of length num, containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula.; Gauss-Legendre: ; \[; W(x)=1 -1<x<1 \\; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; \]. num is the number of sampling points (>0) x and w are arrays of size num eps is the relative precision; If num<=0 or eps<=0 no action is done.; Reference: Numerical Recipes in C, Second Edition ; Definition at line 3826 of file TF1.cxx. ◆ CentralMoment(). Double_t TF1::CentralMoment ; (; Double_t ; n, . Double_t ; a, . Double_t ; b, . const Double_t * ; params = nullptr, . Double_t ; epsilon = 0.000001 . ). virtual . Return nth central moment of function between a and b (i.e the n-th moment around the mean value) ; See TF1::Integral() for parameter definitions; AuthorGene Van Buren gene@.nosp@m.bnl..nosp@m.gov ; Definition at line 3739 of file TF1.cxx. ◆ Class(). static TClass * TF1::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TF",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:79330,Integrability,interface,interface,79330,". This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetX ; Definition at line 1823 of file TF1.cxx. ◆ GetMinMaxNDim(). Double_t TF1::GetMinMaxNDim ; (; Double_t * ; x, . Bool_t ; findmax, . Double_t ; epsilon = 0, . Int_t ; maxiter = 0 . ); const. protectedvirtual . Find the minimum of a function of whatever dimension. ; While GetMinimum works only for 1D function , GetMinimumNDim works for all dimensions since it uses the minimizer interface vector x at beginning will contained the initial point, on exit will contain the result ; Definition at line 1723 of file TF1.cxx. ◆ GetNDF(). Int_t TF1::GetNDF ; (; ); const. virtual . Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ; The number of degrees of freedom corresponds to the number of points used in the fit minus the number of free parameters. ; Definition at line 1889 of file TF1.cxx. ◆ GetNdim(). virtual Int_t TF1::GetNdim ; (; ); const. inlinevirtual . Definition at line 513 of file TF1.h. ◆ GetNpar(). virtual Int_t TF1::GetNpar ; (; ); const. inlinevirtual . Definition at line 509 of file TF1.h. ◆ GetNpx(). virtual Int_t TF1::GetNpx ; (; ); const. inlinevirtual . Definition at line 518 of file TF1.h. ◆ GetNumber(). virtual Int_t TF1::GetNumber ; (; ); const. inlinevirtual . Definition at line 526 of file TF1.h. ◆ GetNumberFitPoints(). virtual Int_t TF1::GetNumberFitPoints ; (; ); const. inlinevirtual . Def",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:84006,Integrability,integrat,integrated,84006,"aximum size of array xp and size of array p ; [out]xparray filled with n quantiles evaluated at p. Memory has to be preallocated by caller. ; [in]parray of cumulative probabilities where quantiles should be evaluated. It is assumed to contain at least n values. . Returnsn, the number of quantiles computed (same as input argument n); Getting quantiles from two histograms and storing results in a TGraph, a so-called QQ-plot TGraph *gr = new TGraph(nprob);; f1->GetQuantiles(nprob,gr->GetX(),p);; f2->GetQuantiles(nprob,gr->GetY(),p);; gr->Draw(""alp"");; AuthorEddy Offermann ; WarningFunction leads to undefined behavior if xp or p are null or their size does not match with n ; Definition at line 1994 of file TF1.cxx. ◆ GetRandom() [1/2]. Double_t TF1::GetRandom ; (; Double_t ; xmin, . Double_t ; xmax, . TRandom * ; rng = nullptr, . Option_t * ; option = nullptr . ). virtual . Return a random number following this function shape in [xmin,xmax]. ; The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The parabolic approximation is very good as soon as the number of bins is greater than 50.; Parameters. xminminimum value for generated random numbers ; xmaxmaximum value for generated random numbers ; rng(optional) random number generator pointer ; option(optional) : LOG or LIN to force the usage of a log or linear scale for computing the cumulative integral table. IMPORTANT NOTE; The integral of the function is computed at fNpx points. If the function has sharp peaks, you should increase the number of points (SetNpx) such that the peak is correctly tabulate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:85472,Integrability,depend,depending,85472,"e number of bins is greater than 50.; Parameters. xminminimum value for generated random numbers ; xmaxmaximum value for generated random numbers ; rng(optional) random number generator pointer ; option(optional) : LOG or LIN to force the usage of a log or linear scale for computing the cumulative integral table. IMPORTANT NOTE; The integral of the function is computed at fNpx points. If the function has sharp peaks, you should increase the number of points (SetNpx) such that the peak is correctly tabulated at several points. ; Reimplemented in TF2.; Definition at line 2245 of file TF1.cxx. ◆ GetRandom() [2/2]. Double_t TF1::GetRandom ; (; TRandom * ; rng = nullptr, . Option_t * ; option = nullptr . ). virtual . Return a random number following this function shape. ; Parameters. rngRandom number generator. By default (or when passing a nullptr) the global gRandom is used ; optionOption string which controls the binning used to compute the integral. Default mode is automatic depending of xmax, xmin and Npx (function points). Possible values are:; ""LOG"" to force usage of log scale for tabulating the integral; ""LIN"" to force usage of linear scale when tabulating the integral. The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The user can provide as optional parameter a Random number generator. By default gRandom is used; If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x A log scale for the intergral is also always used if a user specifies the ""LOG"" option Instead if a user requestes a ""LIN"" option the integral binning is ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:85733,Integrability,integrat,integrated,85733,"usage of a log or linear scale for computing the cumulative integral table. IMPORTANT NOTE; The integral of the function is computed at fNpx points. If the function has sharp peaks, you should increase the number of points (SetNpx) such that the peak is correctly tabulated at several points. ; Reimplemented in TF2.; Definition at line 2245 of file TF1.cxx. ◆ GetRandom() [2/2]. Double_t TF1::GetRandom ; (; TRandom * ; rng = nullptr, . Option_t * ; option = nullptr . ). virtual . Return a random number following this function shape. ; Parameters. rngRandom number generator. By default (or when passing a nullptr) the global gRandom is used ; optionOption string which controls the binning used to compute the integral. Default mode is automatic depending of xmax, xmin and Npx (function points). Possible values are:; ""LOG"" to force usage of log scale for tabulating the integral; ""LIN"" to force usage of linear scale when tabulating the integral. The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The user can provide as optional parameter a Random number generator. By default gRandom is used; If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x A log scale for the intergral is also always used if a user specifies the ""LOG"" option Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale whatever the fXmax/fXmin ratio is; Note that the parabolic approximation is very good as soon as the number of bins is greater than 50. ; Reimplemented in TF2.; Definition at line 2192 of file TF1.cxx. ◆ GetRange()",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:94909,Integrability,message,message,94909,"es_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2708 of file TF1.cxx. ◆ IntegralError() [2/2]. Double_t TF1::IntegralError ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . const Double_t * ; params = nullptr, . const Double_t * ;",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:95075,Integrability,rout,routine,95075,"on TGWin32VirtualXProxy.cxx:70; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2708 of file TF1.cxx. ◆ IntegralError() [2/2]. Double_t TF1::IntegralError ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . const Double_t * ; params = nullptr, . const Double_t * ; covmat = nullptr, . Double_t ; epsilon = 1.E-2 . ). virtual . Return Error on Integral of a parametric function with dimension larger than one between a[] and b[] due to the parameters uncertaint",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:97415,Integrability,message,message,97415,"be retrieved from the previously performed fit using the TFitResult class. Note that to get the TFitResult, te fit should be done using the fit option S. Example: TFitResultPtr r = histo2d->Fit(func2, ""S"");; func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2758 of file TF1.cxx. ◆ IntegralFast(). Double_t TF1::IntegralFast ; (; Int_t ; num, . Double_t * ; x, . Double_t * ; w, . Double_t ; a, . Double_t ; b, . Double_t * ; params = nullptr, . Double_t ;",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:97581,Integrability,rout,routine,97581,"c2, ""S"");; func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2758 of file TF1.cxx. ◆ IntegralFast(). Double_t TF1::IntegralFast ; (; Int_t ; num, . Double_t * ; x, . Double_t * ; w, . Double_t ; a, . Double_t ; b, . Double_t * ; params = nullptr, . Double_t ; epsilon = 1e-12 . ). virtual . Gauss-Legendre integral, see CalcGaussLegendreSamplingPoints. ; Definition at line 2778 of file TF1.cxx. ◆ IntegralMultiple() [1/3]. Double_t TF1::IntegralMultiple ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:98761,Integrability,interface,interface,98761,"o the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2758 of file TF1.cxx. ◆ IntegralFast(). Double_t TF1::IntegralFast ; (; Int_t ; num, . Double_t * ; x, . Double_t * ; w, . Double_t ; a, . Double_t ; b, . Double_t * ; params = nullptr, . Double_t ; epsilon = 1e-12 . ). virtual . Gauss-Legendre integral, see CalcGaussLegendreSamplingPoints. ; Definition at line 2778 of file TF1.cxx. ◆ IntegralMultiple() [1/3]. Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Double_t ; epsrel, . Double_t & ; relerr . ). virtual . See more general prototype below. ; This interface kept for back compatibility It is recommended to use the other interface where one can specify also epsabs and the maximum number of points ; Definition at line 2798 of file TF1.cxx. ◆ IntegralMultiple() [2/3]. Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; maxpts, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). virtual . This function computes, to an attempted specified accuracy, the value of the integral. ; Parameters. [in]nNumber of dimensions [2,15] ; [in]a,bOne-dimensional arrays of length >= N . On entry A[i], and B[i], contain the lower and upper limits of integration, respectively. ; [in]maxptsMaximum number of function evaluations to be allowed. maxpts >= 2^n +2*n*(n+1) +1 if maxpts<minpts, maxpts is set to 10*minpts ; [in]epsrelSpecified relative accuracy. ; [in]epsabsSpecified absolute accuracy. The integration algorithm will attempt to reach either the relative or the absolute accuracy. In case the maximum function called is reached the",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:98834,Integrability,interface,interface,98834,"o the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2758 of file TF1.cxx. ◆ IntegralFast(). Double_t TF1::IntegralFast ; (; Int_t ; num, . Double_t * ; x, . Double_t * ; w, . Double_t ; a, . Double_t ; b, . Double_t * ; params = nullptr, . Double_t ; epsilon = 1e-12 . ). virtual . Gauss-Legendre integral, see CalcGaussLegendreSamplingPoints. ; Definition at line 2778 of file TF1.cxx. ◆ IntegralMultiple() [1/3]. Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Double_t ; epsrel, . Double_t & ; relerr . ). virtual . See more general prototype below. ; This interface kept for back compatibility It is recommended to use the other interface where one can specify also epsabs and the maximum number of points ; Definition at line 2798 of file TF1.cxx. ◆ IntegralMultiple() [2/3]. Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; maxpts, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). virtual . This function computes, to an attempted specified accuracy, the value of the integral. ; Parameters. [in]nNumber of dimensions [2,15] ; [in]a,bOne-dimensional arrays of length >= N . On entry A[i], and B[i], contain the lower and upper limits of integration, respectively. ; [in]maxptsMaximum number of function evaluations to be allowed. maxpts >= 2^n +2*n*(n+1) +1 if maxpts<minpts, maxpts is set to 10*minpts ; [in]epsrelSpecified relative accuracy. ; [in]epsabsSpecified absolute accuracy. The integration algorithm will attempt to reach either the relative or the absolute accuracy. In case the maximum function called is reached the",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:99459,Integrability,integrat,integration,99459,"Legendre integral, see CalcGaussLegendreSamplingPoints. ; Definition at line 2778 of file TF1.cxx. ◆ IntegralMultiple() [1/3]. Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Double_t ; epsrel, . Double_t & ; relerr . ). virtual . See more general prototype below. ; This interface kept for back compatibility It is recommended to use the other interface where one can specify also epsabs and the maximum number of points ; Definition at line 2798 of file TF1.cxx. ◆ IntegralMultiple() [2/3]. Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; maxpts, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). virtual . This function computes, to an attempted specified accuracy, the value of the integral. ; Parameters. [in]nNumber of dimensions [2,15] ; [in]a,bOne-dimensional arrays of length >= N . On entry A[i], and B[i], contain the lower and upper limits of integration, respectively. ; [in]maxptsMaximum number of function evaluations to be allowed. maxpts >= 2^n +2*n*(n+1) +1 if maxpts<minpts, maxpts is set to 10*minpts ; [in]epsrelSpecified relative accuracy. ; [in]epsabsSpecified absolute accuracy. The integration algorithm will attempt to reach either the relative or the absolute accuracy. In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::A",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:99711,Integrability,integrat,integration,99711," ; This interface kept for back compatibility It is recommended to use the other interface where one can specify also epsabs and the maximum number of points ; Definition at line 2798 of file TF1.cxx. ◆ IntegralMultiple() [2/3]. Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; maxpts, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). virtual . This function computes, to an attempted specified accuracy, the value of the integral. ; Parameters. [in]nNumber of dimensions [2,15] ; [in]a,bOne-dimensional arrays of length >= N . On entry A[i], and B[i], contain the lower and upper limits of integration, respectively. ; [in]maxptsMaximum number of function evaluations to be allowed. maxpts >= 2^n +2*n*(n+1) +1 if maxpts<minpts, maxpts is set to 10*minpts ; [in]epsrelSpecified relative accuracy. ; [in]epsabsSpecified absolute accuracy. The integration algorithm will attempt to reach either the relative or the absolute accuracy. In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:100626,Integrability,integrat,integrators,100626,"vely. ; [in]maxptsMaximum number of function evaluations to be allowed. maxpts >= 2^n +2*n*(n+1) +1 if maxpts<minpts, maxpts is set to 10*minpts ; [in]epsrelSpecified relative accuracy. ; [in]epsabsSpecified absolute accuracy. The integration algorithm will attempt to reach either the relative or the absolute accuracy. In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:100654,Integrability,integrat,integrators,100654," In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:100673,Integrability,integrat,integrators,100673," In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:100791,Integrability,integrat,integration,100791," In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:101559,Integrability,integrat,integrator,101559," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:101696,Integrability,integrat,integrator,101696," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:101912,Integrability,integrat,integration,101912," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:101945,Integrability,integrat,integration,101945," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102058,Integrability,integrat,integrator,102058," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102413,Integrability,integrat,integrators,102413,"sing the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate on a large domain; double r1 = g->Integral(0,5);; double r2 = g->Integral(0,1000);; ; //try with user directives computing more points; Int_t np = 1000;; double *x=new double[np];; double *w=new double[np];; g->CalcGaussLegendreSamplingPoints(np,x,w,1e-15);; double r3 = g->IntegralFast(np,x,w,0,5);; double r4 = g->IntegralFast(np,x,w,0,1000);; double r5 = g->IntegralFast(np,x,w,0,10000);; double r6 = g->IntegralFast(np,x,w,0,100000);; printf(""g->Integral(0,5) = %g\n"",r1);; printf(""g->Integral(0,1000) = %",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102905,Integrability,integrat,integration,102905,"or ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate on a large domain; double r1 = g->Integral(0,5);; double r2 = g->Integral(0,1000);; ; //try with user directives computing more points; Int_t np = 1000;; double *x=new double[np];; double *w=new double[np];; g->CalcGaussLegendreSamplingPoints(np,x,w,1e-15);; double r3 = g->IntegralFast(np,x,w,0,5);; double r4 = g->IntegralFast(np,x,w,0,1000);; double r5 = g->IntegralFast(np,x,w,0,10000);; double r6 = g->IntegralFast(np,x,w,0,100000);; printf(""g->Integral(0,5) = %g\n"",r1);; printf(""g->Integral(0,1000) = %g\n"",r2);; printf(""g->IntegralFast(n,x,w,0,5) = %g\n"",r3);; printf(""g->IntegralFast(n,x,w,0,1000) = %g\n"",r4);; printf(""g->IntegralFast(n,x,w,0,10000) = %g\n"",r5);; printf(""g->IntegralFast(n,x,w,0,100000)= %g\n"",r6);; delete [] x;; delete [] w;; }; e#define e(i)Definition RSha256.hxx:103; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cu",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102957,Integrability,integrat,integrate,102957,"or ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate on a large domain; double r1 = g->Integral(0,5);; double r2 = g->Integral(0,1000);; ; //try with user directives computing more points; Int_t np = 1000;; double *x=new double[np];; double *w=new double[np];; g->CalcGaussLegendreSamplingPoints(np,x,w,1e-15);; double r3 = g->IntegralFast(np,x,w,0,5);; double r4 = g->IntegralFast(np,x,w,0,1000);; double r5 = g->IntegralFast(np,x,w,0,10000);; double r6 = g->IntegralFast(np,x,w,0,100000);; printf(""g->Integral(0,5) = %g\n"",r1);; printf(""g->Integral(0,1000) = %g\n"",r2);; printf(""g->IntegralFast(n,x,w,0,5) = %g\n"",r3);; printf(""g->IntegralFast(n,x,w,0,1000) = %g\n"",r4);; printf(""g->IntegralFast(n,x,w,0,10000) = %g\n"",r5);; printf(""g->IntegralFast(n,x,w,0,100000)= %g\n"",r6);; delete [] x;; delete [] w;; }; e#define e(i)Definition RSha256.hxx:103; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cu",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:117783,Integrability,wrap,wrap,117783,Func > . friend struct ROOT::Internal::TF1Builder. friend . Definition at line 236 of file TF1.h. Member Data Documentation. ◆ fAlpha. std::vector<Double_t> TF1::fAlpha. protected . ! Array alpha. for each bin in x the deconvolution r of fIntegral ; Definition at line 279 of file TF1.h. ◆ fBeta. std::vector<Double_t> TF1::fBeta. protected . ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ; Definition at line 280 of file TF1.h. ◆ fChisquare. Double_t TF1::fChisquare {}. protected . Function fit chisquare. ; Definition at line 271 of file TF1.h. ◆ fComposition. std::unique_ptr<TF1AbsComposition> TF1::fComposition. protected . Pointer to composition (NSUM or CONV) ; Definition at line 290 of file TF1.h. ◆ fFormula. std::unique_ptr<TFormula> TF1::fFormula. protected . Pointer to TFormula in case when user define formula. ; Definition at line 288 of file TF1.h. ◆ fFunctor. std::unique_ptr<TF1FunctorPointer> TF1::fFunctor. protected . ! Functor object to wrap any C++ callable object ; Definition at line 287 of file TF1.h. ◆ fgAbsValue. std::atomic< Bool_t > TF1::fgAbsValue. staticprotected . Definition at line 324 of file TF1.h. ◆ fgAddToGlobList. std::atomic< Bool_t > TF1::fgAddToGlobList. staticprotected . Definition at line 326 of file TF1.h. ◆ fGamma. std::vector<Double_t> TF1::fGamma. protected . ! Array gamma. ; Definition at line 281 of file TF1.h. ◆ fgCurrent. TF1 * TF1::fgCurrent = nullptr. staticprotected . Definition at line 327 of file TF1.h. ◆ fgRejectPoint. Bool_t TF1::fgRejectPoint = kFALSE. staticprotected . Definition at line 325 of file TF1.h. ◆ fHistogram. TH1* TF1::fHistogram {nullptr}. protected . ! Pointer to histogram used for visualisation ; Definition at line 283 of file TF1.h. ◆ fIntegral. std::vector<Double_t> TF1::fIntegral. protected . ! Integral of function binned on fNpx bins ; Definition at line 278 of file TF1.h. ◆ fMaximum. Double_t TF1::fMaximum {-1111}. protected . Maximum value for plotting. ; Definition at line 273 of fi,MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:850,Modifiability,variab,variable,850,". ROOT: TF1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TF1 Class ReferenceHistogram Library » Function classes. ; 1-Dim function class . TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit. The function may be a simple function based on a TFormula expression or a precompiled user function. The function may have associated parameters. TF1 graphics function is via the TH1 and TGraph drawing functions.; The following types of functions can be created:. Expression using variable x and no parameters; Expression using variable x with parameters; Lambda Expression with variable x and parameters; A general C function with parameters; A general C++ function object (functor) with parameters; A member function with parameters of a general C++ class. 1 - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators; {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; TF1::TF1TF1()TF1 default constructor.Definition TF1.cxx:489. Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters; {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }. Case 3: inline expression using a user defined CLING function by name; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; double; xDouble_t x[n]Definition legend1.C:17. 2 - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators; Example a:; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; This create",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:897,Modifiability,variab,variable,897,". ROOT: TF1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TF1 Class ReferenceHistogram Library » Function classes. ; 1-Dim function class . TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit. The function may be a simple function based on a TFormula expression or a precompiled user function. The function may have associated parameters. TF1 graphics function is via the TH1 and TGraph drawing functions.; The following types of functions can be created:. Expression using variable x and no parameters; Expression using variable x with parameters; Lambda Expression with variable x and parameters; A general C function with parameters; A general C++ function object (functor) with parameters; A member function with parameters of a general C++ class. 1 - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators; {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; TF1::TF1TF1()TF1 default constructor.Definition TF1.cxx:489. Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters; {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }. Case 3: inline expression using a user defined CLING function by name; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; double; xDouble_t x[n]Definition legend1.C:17. 2 - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators; Example a:; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; This create",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:948,Modifiability,variab,variable,948,". ROOT: TF1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TF1 Class ReferenceHistogram Library » Function classes. ; 1-Dim function class . TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit. The function may be a simple function based on a TFormula expression or a precompiled user function. The function may have associated parameters. TF1 graphics function is via the TH1 and TGraph drawing functions.; The following types of functions can be created:. Expression using variable x and no parameters; Expression using variable x with parameters; Lambda Expression with variable x and parameters; A general C function with parameters; A general C++ function object (functor) with parameters; A member function with parameters of a general C++ class. 1 - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators; {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; TF1::TF1TF1()TF1 default constructor.Definition TF1.cxx:489. Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters; {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }. Case 3: inline expression using a user defined CLING function by name; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; double; xDouble_t x[n]Definition legend1.C:17. 2 - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators; Example a:; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; This create",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:1149,Modifiability,variab,variable,1149," |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TF1 Class ReferenceHistogram Library » Function classes. ; 1-Dim function class . TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit. The function may be a simple function based on a TFormula expression or a precompiled user function. The function may have associated parameters. TF1 graphics function is via the TH1 and TGraph drawing functions.; The following types of functions can be created:. Expression using variable x and no parameters; Expression using variable x with parameters; Lambda Expression with variable x and parameters; A general C function with parameters; A general C++ function object (functor) with parameters; A member function with parameters of a general C++ class. 1 - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators; {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; TF1::TF1TF1()TF1 default constructor.Definition TF1.cxx:489. Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters; {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }. Case 3: inline expression using a user defined CLING function by name; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; double; xDouble_t x[n]Definition legend1.C:17. 2 - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators; Example a:; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; This creates a function of variable x with 2 parameters. The parameters must be initialized via:; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; Parameters may be given a name:; fa->SetParName(0,""Constant""",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:1834,Modifiability,variab,variable,1834,"da Expression with variable x and parameters; A general C function with parameters; A general C++ function object (functor) with parameters; A member function with parameters of a general C++ class. 1 - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators; {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; TF1::TF1TF1()TF1 default constructor.Definition TF1.cxx:489. Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters; {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }. Case 3: inline expression using a user defined CLING function by name; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; double; xDouble_t x[n]Definition legend1.C:17. 2 - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators; Example a:; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; This creates a function of variable x with 2 parameters. The parameters must be initialized via:; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; Parameters may be given a name:; fa->SetParName(0,""Constant"");; Example b:; auto fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);; gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2) and (0) means start numbering parameters at 0. expo(3) is a substitute for exp([3]+[4]*x).; Case 2: inline expression using TMath functions with parameters; {; auto fb2 = new TF1(""fa3"",""TMath::Landau(x,[0],[1],0)"",-5,10);; fb2->SetParameters(0.2,1.3);; fb2->Draw();; }. 3 - A lambda expression with variables and parameters; Since6.00/00: TF1 supports using lambda expressions in the formula. This allows, by using a full C++ syntax the full power of lambda functions and still maintain the capability of storing the function in a file which cannot be done with functi",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:2017,Modifiability,variab,variable,2017,"da Expression with variable x and parameters; A general C function with parameters; A general C++ function object (functor) with parameters; A member function with parameters of a general C++ class. 1 - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators; {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; TF1::TF1TF1()TF1 default constructor.Definition TF1.cxx:489. Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters; {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }. Case 3: inline expression using a user defined CLING function by name; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; double; xDouble_t x[n]Definition legend1.C:17. 2 - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators; Example a:; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; This creates a function of variable x with 2 parameters. The parameters must be initialized via:; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; Parameters may be given a name:; fa->SetParName(0,""Constant"");; Example b:; auto fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);; gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2) and (0) means start numbering parameters at 0. expo(3) is a substitute for exp([3]+[4]*x).; Case 2: inline expression using TMath functions with parameters; {; auto fb2 = new TF1(""fa3"",""TMath::Landau(x,[0],[1],0)"",-5,10);; fb2->SetParameters(0.2,1.3);; fb2->Draw();; }. 3 - A lambda expression with variables and parameters; Since6.00/00: TF1 supports using lambda expressions in the formula. This allows, by using a full C++ syntax the full power of lambda functions and still maintain the capability of storing the function in a file which cannot be done with functi",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:2660,Modifiability,variab,variables,2660,"= new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; double; xDouble_t x[n]Definition legend1.C:17. 2 - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators; Example a:; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; This creates a function of variable x with 2 parameters. The parameters must be initialized via:; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; Parameters may be given a name:; fa->SetParName(0,""Constant"");; Example b:; auto fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);; gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2) and (0) means start numbering parameters at 0. expo(3) is a substitute for exp([3]+[4]*x).; Case 2: inline expression using TMath functions with parameters; {; auto fb2 = new TF1(""fa3"",""TMath::Landau(x,[0],[1],0)"",-5,10);; fb2->SetParameters(0.2,1.3);; fb2->Draw();; }. 3 - A lambda expression with variables and parameters; Since6.00/00: TF1 supports using lambda expressions in the formula. This allows, by using a full C++ syntax the full power of lambda functions and still maintain the capability of storing the function in a file which cannot be done with function pointer or lambda written not as expression, but as code (see items below).; Example on how using lambda to define a sum of two functions. Note that is necessary to provide the number of parameters; TF1 f1(""f1"",""sin(x)"",0,10);; TF1 f2(""f2"",""cos(x)"",0,10);; TF1 fsum(""f1"",""[&](double *x, double *p){ return p[0]*f1(x) + p[1]*f2(x); }"",0,10,2);; TF11-Dim function classDefinition TF1.h:233; f1TF1 * f1Definition legend1.C:11. 4 - A general C function with parameters; Consider the macro myfunc.C below:; // Macro myfunc.C; Double_t myfunction(Double_t *x, Double_t *par); {; Float_t xx =x[0];; Double_t f = TMath::Abs(par[0]*sin(par[1]*xx)/xx);; return f;; }; void myfunc(); {; auto f1 = new TF1(""myfunc"",myfunction,0,10,2);; f1->Se",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:8641,Modifiability,variab,variables,8641,"Function {; public:; ...; double Evaluate() (double *x, double *p) {; // function implementation; }; };; {; ....; MyFunction *fptr = new MyFunction(....); // create the user function class; auto f = new TF1(""f"",fptr,&MyFunction::Evaluate,0,1,npar,""MyFunction"",""Evaluate""); // create TF1 class.; ; .....; }; See also the tutorial math/exampleFunctor.C for a running example. PyROOT; The TF1 class has several additions for its use from Python, which are also available in its subclasses TF2 and TF3.; First, TF1 instance can be initialized with user-defined Python functions. Given a generic Python callable, the following can performed:; def func(x: numpy.ndarray, pars: numpy.ndarray) -> float:; return pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; x = np.array([; [1.0, 10, 2.0],; [1.5, 10, 2.5],; [2.0, 10, 3.0],; [2.5, 10, 3.5],; [3.0, 10, 4.0]; ]); ; params = np.array([; [1.0], # Distance between charges r; [8.99e9], # Coulomb constant k (in N·m²/C²); [0.1] # Additional factor for modulation; ]); ; # Slice to avoid the dummy column of 10's; res = rtf1_coulomb.EvalPar(x[:, ::2], params). Definition at line 233 of file TF1.h. Classes; struct  TF1FunctorPointer;  ; struct  TF1FunctorPointerImpl;  . Public Types; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:9730,Modifiability,inherit,inherited,9730,"ction and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; x = np.array([; [1.0, 10, 2.0],; [1.5, 10, 2.5],; [2.0, 10, 3.0],; [2.5, 10, 3.5],; [3.0, 10, 4.0]; ]); ; params = np.array([; [1.0], # Distance between charges r; [8.99e9], # Coulomb constant k (in N·m²/C²); [0.1] # Additional factor for modulation; ]); ; # Slice to avoid the dummy column of 10's; res = rtf1_coulomb.EvalPar(x[:, ::2], params). Definition at line 233 of file TF1.h. Classes; struct  TF1FunctorPointer;  ; struct  TF1FunctorPointerImpl;  . Public Types; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:29216,Modifiability,inherit,inherited,29216,"ble_t ymax);  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax);  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it is assumed that the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the titles for the X and Y axis respectively. ;  ; virtual void SetVectorized (Bool_t vectorized);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update ();  Called by functions such as SetRange, SetNpx, SetParameters to force the deletion of the associated histogram or Integral. ;  ; virtual Double_t Variance (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title.",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:30875,Modifiability,inherit,inherited,30875,"fer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:31668,Modifiability,inherit,inheritance,31668,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ;",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:33415,Modifiability,inherit,inherits,33415,"l (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:33532,Modifiability,inherit,inherits,33532," (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:36840,Modifiability,inherit,inherited,36840,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:38345,Modifiability,inherit,inherited,38345,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:39600,Modifiability,inherit,inherited,39600,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:42466,Modifiability,inherit,inherited,42466,"ic method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:42676,Modifiability,inherit,inherited,42676,"ic method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:43194,Modifiability,inherit,inherited,43194,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Types; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:43406,Modifiability,inherit,inherited,43406,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Types; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:43618,Modifiability,inherit,inherited,43618,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Types; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:44283,Modifiability,inherit,inherited,44283,"sion_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Types; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute the cumulative function at fNpx points between fXmin and fXmax. ;  ; virtual TH1 * DoCreateHistogram (Double_t xmin, Double_t xmax, Bool_t recreate=kFALSE);  Create histogram with bin content equal to function value computed at the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ;  ; void DoInitialize (EAddToList addToGlobList);  Common initialization of the TF1. ;  ; virtual Double_t GetMinMaxNDim (Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatev",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:45499,Modifiability,inherit,inherited,45499,"1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute the cumulative function at fNpx points between fXmin and fXmax. ;  ; virtual TH1 * DoCreateHistogram (Double_t xmin, Double_t xmax, Bool_t recreate=kFALSE);  Create histogram with bin content equal to function value computed at the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ;  ; void DoInitialize (EAddToList addToGlobList);  Common initialization of the TF1. ;  ; virtual Double_t GetMinMaxNDim (Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; virtual void GetRange (Double_t *xmin, Double_t *xmax) const;  Return range of a generic N-D function. ;  ; void IntegrateForNormalization ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsComposition > fComposition;  Pointer to composition (NSUM or CONV) ;  ; std::unique_ptr< TFormula > fFormula;  Pointer to TFormula in case when user define formula. ;  ; std::unique_ptr< TF1FunctorPointer > fFunctor;  ! Functor object to wrap any C++ callable object ;  ; std::vector< Double_t > fGamma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:47856,Modifiability,inherit,inherited,47856,"egral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Static Protected Attributes; static std::atomic< Bool_t > fgAbsValue;  ; static std::atomic< Bool_t > fgAddToGlobList;  ; static TF1 * fgCurrent = nullptr;  ; static Bool_t fgRejectPoint = kFALSE;  . Private Member Functions; void DefineNSUMTerm (TObjArray *newFuncs, TObjArray *coeffNames, TString &fullFormula, TString &formula, int termStart, int termEnd, Double_t xmin, Double_t xmax);  Helper functions for NSUM parsing. ;  ; template<class T > ; T EvalParTempl (const T *data, const Double_t *params=nullptr);  Eval for vect",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:47938,Modifiability,inherit,inherited,47938,"egral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Static Protected Attributes; static std::atomic< Bool_t > fgAbsValue;  ; static std::atomic< Bool_t > fgAddToGlobList;  ; static TF1 * fgCurrent = nullptr;  ; static Bool_t fgRejectPoint = kFALSE;  . Private Member Functions; void DefineNSUMTerm (TObjArray *newFuncs, TObjArray *coeffNames, TString &fullFormula, TString &formula, int termStart, int termEnd, Double_t xmin, Double_t xmax);  Helper functions for NSUM parsing. ;  ; template<class T > ; T EvalParTempl (const T *data, const Double_t *params=nullptr);  Eval for vect",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:48099,Modifiability,inherit,inherited,48099,"aphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Static Protected Attributes; static std::atomic< Bool_t > fgAbsValue;  ; static std::atomic< Bool_t > fgAddToGlobList;  ; static TF1 * fgCurrent = nullptr;  ; static Bool_t fgRejectPoint = kFALSE;  . Private Member Functions; void DefineNSUMTerm (TObjArray *newFuncs, TObjArray *coeffNames, TString &fullFormula, TString &formula, int termStart, int termEnd, Double_t xmin, Double_t xmax);  Helper functions for NSUM parsing. ;  ; template<class T > ; T EvalParTempl (const T *data, const Double_t *params=nullptr);  Eval for vectorized functions. ;  ; int TermCoeffLength (TString &term);  . Friends; template<class Func > ; struct ROOT::Internal::TF1Builder;  . #include <TF1.h>. Inheritance diagram for TF1:. This browser is not ab",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:48232,Modifiability,inherit,inherited,48232,"rmula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Static Protected Attributes; static std::atomic< Bool_t > fgAbsValue;  ; static std::atomic< Bool_t > fgAddToGlobList;  ; static TF1 * fgCurrent = nullptr;  ; static Bool_t fgRejectPoint = kFALSE;  . Private Member Functions; void DefineNSUMTerm (TObjArray *newFuncs, TObjArray *coeffNames, TString &fullFormula, TString &formula, int termStart, int termEnd, Double_t xmin, Double_t xmax);  Helper functions for NSUM parsing. ;  ; template<class T > ; T EvalParTempl (const T *data, const Double_t *params=nullptr);  Eval for vectorized functions. ;  ; int TermCoeffLength (TString &term);  . Friends; template<class Func > ; struct ROOT::Internal::TF1Builder;  . #include <TF1.h>. Inheritance diagram for TF1:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAddToList. enum class T",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:70610,Modifiability,variab,variables,70610," ; (; Double_t ; xmin, . Double_t ; xmax, . Option_t * ; option = """" . ). virtual . Draw function between xmin and xmax. ; Definition at line 1420 of file TF1.cxx. ◆ DrawIntegral(). TObject * TF1::DrawIntegral ; (; Option_t * ; option = ""al""). virtual . Draw integral of this function. ; An intermediate TGraph object is built and drawn with option. The function returns a pointer to the TGraph object. Do: TGraph *g = (TGraph*)myfunc.DrawIntegral(option);; The resulting graph will be drawn into the current pad. If this function is used via the context menu, it recommended to create a new canvas/pad before invoking this function. ; Reimplemented in TF2, and TF3.; Definition at line 1407 of file TF1.cxx. ◆ Eval(). Double_t TF1::Eval ; (; Double_t ; x, . Double_t ; y = 0, . Double_t ; z = 0, . Double_t ; t = 0 . ); const. virtual . Evaluate this function. ; Computes the value of this function (general case for a 3-d function) at point x,y,z. For a 1-d function give y=0 and z=0 The current value of variables x,y,z is passed through x, y and z. The parameters used will be the ones in the array params if params is given otherwise parameters will be taken from the stored data members fParams ; Reimplemented in TF12.; Definition at line 1439 of file TF1.cxx. ◆ EvalPar() [1/2]. Double_t TF1::EvalPar ; (; const Double_t * ; x, . const Double_t * ; params = nullptr . ). virtual . Evaluate function with given coordinates and parameters. ; Compute the value of this function at point defined by array x and current values of parameters in array params. If argument params is omitted or equal 0, the internal values of parameters (array fParams) will be used instead. For a 1-D function only x[0] must be given. In case of a multi-dimensional function, the arrays x must be filled with the corresponding number of dimensions.; WARNING. In case of an interpreted function (fType=2), it is the user's responsibility to initialize the parameters via InitArgs before calling this function. InitArgs",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:82846,Modifiability,variab,variable,82846,"◆ GetParLimits(). void TF1::GetParLimits ; (; Int_t ; ipar, . Double_t & ; parmin, . Double_t & ; parmax . ); const. virtual . Return limits for parameter ipar. ; Definition at line 1940 of file TF1.cxx. ◆ GetParName(). virtual const char * TF1::GetParName ; (; Int_t ; ipar); const. inlinevirtual . Definition at line 557 of file TF1.h. ◆ GetParNumber(). virtual Int_t TF1::GetParNumber ; (; const char * ; name); const. inlinevirtual . Definition at line 561 of file TF1.h. ◆ GetProb(). Double_t TF1::GetProb ; (; ); const. virtual . Return the fit probability. ; Definition at line 1955 of file TF1.cxx. ◆ GetQuantiles(). Int_t TF1::GetQuantiles ; (; Int_t ; n, . Double_t * ; xp, . const Double_t * ; p . ). virtual . Compute Quantiles for density distribution of this function. ; Quantile x_p of a probability distribution Function F is defined as ; \[; F(x_{p}) = \int_{xmin}^{x_{p}} f dx = p with 0 <= p <= 1.; \]. For instance the median \( x_{\frac{1}{2}} \) of a distribution is defined as that value of the random variable for which the distribution function equals 0.5: ; \[; F(x_{\frac{1}{2}}) = \prod(x < x_{\frac{1}{2}}) = \frac{1}{2}; \]. Parameters. [in]nmaximum size of array xp and size of array p ; [out]xparray filled with n quantiles evaluated at p. Memory has to be preallocated by caller. ; [in]parray of cumulative probabilities where quantiles should be evaluated. It is assumed to contain at least n values. . Returnsn, the number of quantiles computed (same as input argument n); Getting quantiles from two histograms and storing results in a TGraph, a so-called QQ-plot TGraph *gr = new TGraph(nprob);; f1->GetQuantiles(nprob,gr->GetX(),p);; f2->GetQuantiles(nprob,gr->GetY(),p);; gr->Draw(""alp"");; AuthorEddy Offermann ; WarningFunction leads to undefined behavior if xp or p are null or their size does not match with n ; Definition at line 1994 of file TF1.cxx. ◆ GetRandom() [1/2]. Double_t TF1::GetRandom ; (; Double_t ; xmin, . Double_t ; xmax, . TRandom * ; rng = ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:100375,Modifiability,adapt,adaptive,100375,"vely. ; [in]maxptsMaximum number of function evaluations to be allowed. maxpts >= 2^n +2*n*(n+1) +1 if maxpts<minpts, maxpts is set to 10*minpts ; [in]epsrelSpecified relative accuracy. ; [in]epsabsSpecified absolute accuracy. The integration algorithm will attempt to reach either the relative or the absolute accuracy. In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:101724,Modifiability,adapt,adaptive,101724," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102220,Modifiability,adapt,adaptive,102220," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102292,Modifiability,adapt,adaptive,102292," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:102373,Modifiability,adapt,adaptive,102373," ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined.; Note 2:; Instead of TF1::Integral, you may want to use the combination of TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast. See an example with the following script:; void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:8259,Performance,perform,performed,8259," THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41. 6 - A member function with parameters of a general C++ class; A TF1 can be created in this case from any member function of a class which has the signature of (double * , double *) and returning a double.; Example:; class MyFunction {; public:; ...; double Evaluate() (double *x, double *p) {; // function implementation; }; };; {; ....; MyFunction *fptr = new MyFunction(....); // create the user function class; auto f = new TF1(""f"",fptr,&MyFunction::Evaluate,0,1,npar,""MyFunction"",""Evaluate""); // create TF1 class.; ; .....; }; See also the tutorial math/exampleFunctor.C for a running example. PyROOT; The TF1 class has several additions for its use from Python, which are also available in its subclasses TF2 and TF3.; First, TF1 instance can be initialized with user-defined Python functions. Given a generic Python callable, the following can performed:; def func(x: numpy.ndarray, pars: numpy.ndarray) -> float:; return pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; x = np.array([; [1.0, 10, 2.0],; [1.5, 10, 2.5],; [2.0, 10, 3.0],; [2.5, 10, 3.5],; [3.0, 10, 4.0]; ]); ; params = np.array([; [1.0], # Distance between charges r; [8.99e9], # Cou",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:8455,Performance,perform,performing,8455,"ed in this case from any member function of a class which has the signature of (double * , double *) and returning a double.; Example:; class MyFunction {; public:; ...; double Evaluate() (double *x, double *p) {; // function implementation; }; };; {; ....; MyFunction *fptr = new MyFunction(....); // create the user function class; auto f = new TF1(""f"",fptr,&MyFunction::Evaluate,0,1,npar,""MyFunction"",""Evaluate""); // create TF1 class.; ; .....; }; See also the tutorial math/exampleFunctor.C for a running example. PyROOT; The TF1 class has several additions for its use from Python, which are also available in its subclasses TF2 and TF3.; First, TF1 instance can be initialized with user-defined Python functions. Given a generic Python callable, the following can performed:; def func(x: numpy.ndarray, pars: numpy.ndarray) -> float:; return pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; x = np.array([; [1.0, 10, 2.0],; [1.5, 10, 2.5],; [2.0, 10, 3.0],; [2.5, 10, 3.5],; [3.0, 10, 4.0]; ]); ; params = np.array([; [1.0], # Distance between charges r; [8.99e9], # Coulomb constant k (in N·m²/C²); [0.1] # Additional factor for modulation; ]); ; # Slice to avoid the dummy column of 10's; res = rtf1_coulomb.EvalPar(x[:, ::2], params). Definition at line 233 of file TF1.h. Classes; struct  TF1FunctorPointer; ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:60535,Performance,cache,cached,60535,"nst char * TF1::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TF1::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 755 of file TF1.h. ◆ Clone(). TObject * TF1::Clone ; (; const char * ; newname = nullptr); const. overridevirtual . Make a complete copy of the underlying object. ; If 'newname' is set, the copy's name will be set to that name. ; Reimplemented from TObject.; Definition at line 1064 of file TF1.cxx. ◆ ComputeCdfTable(). Bool_t TF1::ComputeCdfTable ; (; Option_t * ; option). protected . Compute the cumulative function at fNpx points between fXmin and fXmax. ; Option can be used to force a log scale (option = ""log""), linear (option = ""lin"") or automatic if empty. ; Definition at line 2081 of file TF1.cxx. ◆ Copy(). void TF1::Copy ; (; TObject & ; obj); const. overridevirtual . Copy this F1 to a new F1. ; Note that the cached integral with its related arrays are not copied (they are also set as transient data members) ; Reimplemented from TObject.; Reimplemented in TF12, TF2, and TF3.; Definition at line 1005 of file TF1.cxx. ◆ CreateHistogram(). virtual TH1 * TF1::CreateHistogram ; (; ). inlinevirtual . Reimplemented in TF2, and TF3.; Definition at line 477 of file TF1.h. ◆ DeclFileName(). static const char * TF1::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 755 of file TF1.h. ◆ DefaultAddToGlobalList(). Bool_t TF1::DefaultAddToGlobalList ; (; Bool_t ; on = kTRUE). static . Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ; By default the functions are added automatically It returns the previous status (true if the functions are added automatically) ; Definition at line 838 of file TF1.cxx. ◆ DefineNSUMTerm(). void TF1:",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:93437,Performance,perform,performed,93437,"eters addresses. ; Definition at line 2482 of file TF1.cxx. ◆ InitStandardFunctions(). void TF1::InitStandardFunctions ; (; ). static . Create the basic function objects. ; Definition at line 2497 of file TF1.cxx. ◆ Integral(). Double_t TF1::Integral ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel = 1.e-12 . ). virtual . IntegralOneDim or analytical integral. ; Reimplemented in TF2, and TF3.; Definition at line 2531 of file TF1.cxx. ◆ IntegralError() [1/2]. Double_t TF1::IntegralError ; (; Double_t ; a, . Double_t ; b, . const Double_t * ; params = nullptr, . const Double_t * ; covmat = nullptr, . Double_t ; epsilon = 1.E-2 . ). virtual . Return Error on Integral of a parametric function between a and b due to the parameter uncertainties and their covariance matrix from the fit. ; In addition to the integral limits, this method takes as input a pointer to the fitted parameter values and a pointer the covariance matrix from the fit. These pointers should be retrieved from the previously performed fit using the TFitResult class. Note that to get the TFitResult, te fit should be done using the fit option S. Example: TFitResultPtr r = histo->Fit(func, ""S"");; func->IntegralError(x1,x2,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:94772,Performance,multi-thread,multi-threading,94772,"illStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2708 of file TF1.cxx. ◆ IntegralError() [2/2]. Double_t TF1::Inte",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:96434,Performance,perform,performed,96434,"r*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2708 of file TF1.cxx. ◆ IntegralError() [2/2]. Double_t TF1::IntegralError ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . const Double_t * ; params = nullptr, . const Double_t * ; covmat = nullptr, . Double_t ; epsilon = 1.E-2 . ). virtual . Return Error on Integral of a parametric function with dimension larger than one between a[] and b[] due to the parameters uncertainties. ; For a TF1 with dimension larger than 1 (for example a TF2 or TF3) TF1::IntegralMultiple is used for the integral calculation; In addition to the integral limits, this method takes as input a pointer to the fitted parameter values and a pointer the covariance matrix from the fit. These pointers should be retrieved from the previously performed fit using the TFitResult class. Note that to get the TFitResult, te fit should be done using the fit option S. Example: TFitResultPtr r = histo2d->Fit(func2, ""S"");; func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is p",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:97278,Performance,multi-thread,multi-threading,97278,"hod takes as input a pointer to the fitted parameter values and a pointer the covariance matrix from the fit. These pointers should be retrieved from the previously performed fit using the TFitResult class. Note that to get the TFitResult, te fit should be done using the fit option S. Example: TFitResultPtr r = histo2d->Fit(func2, ""S"");; func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2758 of file TF1.cxx. ◆ IntegralFast(). Double_t TF1::IntegralFas",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:100053,Performance,perform,performed,100053,"t Double_t * ; a, . const Double_t * ; b, . Int_t ; maxpts, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). virtual . This function computes, to an attempted specified accuracy, the value of the integral. ; Parameters. [in]nNumber of dimensions [2,15] ; [in]a,bOne-dimensional arrays of length >= N . On entry A[i], and B[i], contain the lower and upper limits of integration, respectively. ; [in]maxptsMaximum number of function evaluations to be allowed. maxpts >= 2^n +2*n*(n+1) +1 if maxpts<minpts, maxpts is set to 10*minpts ; [in]epsrelSpecified relative accuracy. ; [in]epsabsSpecified absolute accuracy. The integration algorithm will attempt to reach either the relative or the absolute accuracy. In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:100153,Performance,perform,performed,100153," ; epsabs, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). virtual . This function computes, to an attempted specified accuracy, the value of the integral. ; Parameters. [in]nNumber of dimensions [2,15] ; [in]a,bOne-dimensional arrays of length >= N . On entry A[i], and B[i], contain the lower and upper limits of integration, respectively. ; [in]maxptsMaximum number of function evaluations to be allowed. maxpts >= 2^n +2*n*(n+1) +1 if maxpts<minpts, maxpts is set to 10*minpts ; [in]epsrelSpecified relative accuracy. ; [in]epsabsSpecified absolute accuracy. The integration algorithm will attempt to reach either the relative or the absolute accuracy. In case the maximum function called is reached the algorithm will stop earlier without having reached the desired accuracy; [out]relerrContains, on exit, an estimation of the relative accuracy of the result. ; [out]nfnevlnumber of function evaluations performed. ; [out]ifail0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; 3 n<2 or n>15 . Method:; The default method used is the Genz-Mallik adaptive multidimensional algorithm using the class ROOT::Math::AdaptiveIntegratorMultiDim (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts,",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:9337,Safety,avoid,avoid,9337,"rn pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; x = np.array([; [1.0, 10, 2.0],; [1.5, 10, 2.5],; [2.0, 10, 3.0],; [2.5, 10, 3.5],; [3.0, 10, 4.0]; ]); ; params = np.array([; [1.0], # Distance between charges r; [8.99e9], # Coulomb constant k (in N·m²/C²); [0.1] # Additional factor for modulation; ]); ; # Slice to avoid the dummy column of 10's; res = rtf1_coulomb.EvalPar(x[:, ::2], params). Definition at line 233 of file TF1.h. Classes; struct  TF1FunctorPointer;  ; struct  TF1FunctorPointerImpl;  . Public Types; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:41230,Safety,safe,safe,41230,"  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag i",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:41556,Safety,avoid,avoid,41556,"erAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:58391,Safety,safe,safe,58391,"he original function value to compute the integral However, TF1::Moment, CentralMoment require to compute the integral using the absolute value of the function. ; Definition at line 984 of file TF1.cxx. ◆ AddParameter(). virtual void TF1::AddParameter ; (; const TString & ; name, . Double_t ; value . ). inlinevirtual . Definition at line 435 of file TF1.h. ◆ AddToGlobalList(). Bool_t TF1::AddToGlobalList ; (; Bool_t ; on = kTRUE). virtual . Add to global list of functions (gROOT->GetListOfFunctions() ) return previous status (true if the function was already in the list false if not) ; Definition at line 847 of file TF1.cxx. ◆ Browse(). void TF1::Browse ; (; TBrowser * ; b). overridevirtual . Browse. ; Reimplemented from TObject.; Definition at line 993 of file TF1.cxx. ◆ CalcGaussLegendreSamplingPoints(). void TF1::CalcGaussLegendreSamplingPoints ; (; Int_t ; num, . Double_t * ; x, . Double_t * ; w, . Double_t ; eps = 3.0e-11 . ). static . Type safe interface (static method) The number of sampling points are taken from the TGraph. ; Type: unsafe but fast interface filling the arrays x and w (static method); Given the number of sampling points this routine fills the arrays x and w of length num, containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula.; Gauss-Legendre: ; \[; W(x)=1 -1<x<1 \\; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; \]. num is the number of sampling points (>0) x and w are arrays of size num eps is the relative precision; If num<=0 or eps<=0 no action is done.; Reference: Numerical Recipes in C, Second Edition ; Definition at line 3826 of file TF1.cxx. ◆ CentralMoment(). Double_t TF1::CentralMoment ; (; Double_t ; n, . Double_t ; a, . Double_t ; b, . const Double_t * ; params = nullptr, . Double_t ; epsilon = 0.000001 . ). virtual . Return nth central moment of function between a and b (i.e the n-th moment around the mean value) ; See TF1::Integral() for parameter definitions; AuthorGene Van Buren gene@.nosp@m.bnl..nosp@m.gov ; ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:58487,Safety,unsafe,unsafe,58487," at line 984 of file TF1.cxx. ◆ AddParameter(). virtual void TF1::AddParameter ; (; const TString & ; name, . Double_t ; value . ). inlinevirtual . Definition at line 435 of file TF1.h. ◆ AddToGlobalList(). Bool_t TF1::AddToGlobalList ; (; Bool_t ; on = kTRUE). virtual . Add to global list of functions (gROOT->GetListOfFunctions() ) return previous status (true if the function was already in the list false if not) ; Definition at line 847 of file TF1.cxx. ◆ Browse(). void TF1::Browse ; (; TBrowser * ; b). overridevirtual . Browse. ; Reimplemented from TObject.; Definition at line 993 of file TF1.cxx. ◆ CalcGaussLegendreSamplingPoints(). void TF1::CalcGaussLegendreSamplingPoints ; (; Int_t ; num, . Double_t * ; x, . Double_t * ; w, . Double_t ; eps = 3.0e-11 . ). static . Type safe interface (static method) The number of sampling points are taken from the TGraph. ; Type: unsafe but fast interface filling the arrays x and w (static method); Given the number of sampling points this routine fills the arrays x and w of length num, containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula.; Gauss-Legendre: ; \[; W(x)=1 -1<x<1 \\; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; \]. num is the number of sampling points (>0) x and w are arrays of size num eps is the relative precision; If num<=0 or eps<=0 no action is done.; Reference: Numerical Recipes in C, Second Edition ; Definition at line 3826 of file TF1.cxx. ◆ CentralMoment(). Double_t TF1::CentralMoment ; (; Double_t ; n, . Double_t ; a, . Double_t ; b, . const Double_t * ; params = nullptr, . Double_t ; epsilon = 0.000001 . ). virtual . Return nth central moment of function between a and b (i.e the n-th moment around the mean value) ; See TF1::Integral() for parameter definitions; AuthorGene Van Buren gene@.nosp@m.bnl..nosp@m.gov ; Definition at line 3739 of file TF1.cxx. ◆ Class(). static TClass * TF1::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TF",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:61192,Safety,avoid,avoid,61192,"an be used to force a log scale (option = ""log""), linear (option = ""lin"") or automatic if empty. ; Definition at line 2081 of file TF1.cxx. ◆ Copy(). void TF1::Copy ; (; TObject & ; obj); const. overridevirtual . Copy this F1 to a new F1. ; Note that the cached integral with its related arrays are not copied (they are also set as transient data members) ; Reimplemented from TObject.; Reimplemented in TF12, TF2, and TF3.; Definition at line 1005 of file TF1.cxx. ◆ CreateHistogram(). virtual TH1 * TF1::CreateHistogram ; (; ). inlinevirtual . Reimplemented in TF2, and TF3.; Definition at line 477 of file TF1.h. ◆ DeclFileName(). static const char * TF1::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 755 of file TF1.h. ◆ DefaultAddToGlobalList(). Bool_t TF1::DefaultAddToGlobalList ; (; Bool_t ; on = kTRUE). static . Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ; By default the functions are added automatically It returns the previous status (true if the functions are added automatically) ; Definition at line 838 of file TF1.cxx. ◆ DefineNSUMTerm(). void TF1::DefineNSUMTerm ; (; TObjArray * ; newFuncs, . TObjArray * ; coeffNames, . TString & ; fullFormula, . TString & ; formula, . int ; termStart, . int ; termEnd, . Double_t ; xmin, . Double_t ; xmax . ). private . Helper functions for NSUM parsing. ; Definition at line 883 of file TF1.cxx. ◆ Derivative(). Double_t TF1::Derivative ; (; Double_t ; x, . Double_t * ; params = nullptr, . Double_t ; eps = 0.001 . ); const. virtual . Returns the first derivative of the function at point x, computed by Richardson's extrapolation method (use 2 derivative estimates to compute a third, more accurate estimation) first, derivatives with steps h and h/2 are computed by central difference formulas",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:30084,Security,hash,hash,30084," ; virtual Double_t Variance (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const cha",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:108991,Security,access,accessed,108991,"ration. ; After releasing it, the parameter can vary freely in the fit. The parameter limits are reset to 0,0. ; Definition at line 3151 of file TF1.cxx. ◆ Save(). void TF1::Save ; (; Double_t ; xmin, . Double_t ; xmax, . Double_t ; ymin, . Double_t ; ymax, . Double_t ; zmin, . Double_t ; zmax . ). virtual . Save values of function in array fSave. ; Reimplemented in TF2, and TF3.; Definition at line 3161 of file TF1.cxx. ◆ SavePrimitive(). void TF1::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Reimplemented in TF12, TF2, and TF3.; Definition at line 3218 of file TF1.cxx. ◆ SetChisquare(). virtual void TF1::SetChisquare ; (; Double_t ; chi2). inlinevirtual . Definition at line 640 of file TF1.h. ◆ SetCurrent(). void TF1::SetCurrent ; (; TF1 * ; f1). static . Static function setting the current function. ; the current function may be accessed in static C-like functions when fitting or painting a function. ; Definition at line 3343 of file TF1.cxx. ◆ SetFitResult(). void TF1::SetFitResult ; (; const ROOT::Fit::FitResult & ; result, . const Int_t * ; indpar = nullptr . ). virtual . Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (with size fNpar) of the parameter indices in the FitResult can be passed This is useful in the case of a combined fit with different functions, and the FitResult contains the global result By default it is assume that indpar = {0,1,2,....,fNpar-1}. ; Definition at line 3355 of file TF1.cxx. ◆ SetFunction() [1/2]. template<typename Func > . void TF1::SetFunction ; (; Func ; f). Definition at line 888 of file TF1.h. ◆ SetFunction() [2/2]. template<class PtrObj , typename MemFn > . void TF1::SetFunction ; (; PtrObj & ; p, . MemFn ; memFn . ). Definition at line 895 of file TF1.h. ◆ SetMaximum(). void TF1::SetMaximum ; (; Double_t ; maximum = -1111). virtual . Set ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:3783,Testability,test,test,3783,"ports using lambda expressions in the formula. This allows, by using a full C++ syntax the full power of lambda functions and still maintain the capability of storing the function in a file which cannot be done with function pointer or lambda written not as expression, but as code (see items below).; Example on how using lambda to define a sum of two functions. Note that is necessary to provide the number of parameters; TF1 f1(""f1"",""sin(x)"",0,10);; TF1 f2(""f2"",""cos(x)"",0,10);; TF1 fsum(""f1"",""[&](double *x, double *p){ return p[0]*f1(x) + p[1]*f2(x); }"",0,10,2);; TF11-Dim function classDefinition TF1.h:233; f1TF1 * f1Definition legend1.C:11. 4 - A general C function with parameters; Consider the macro myfunc.C below:; // Macro myfunc.C; Double_t myfunction(Double_t *x, Double_t *par); {; Float_t xx =x[0];; Double_t f = TMath::Abs(par[0]*sin(par[1]*xx)/xx);; return f;; }; void myfunc(); {; auto f1 = new TF1(""myfunc"",myfunction,0,10,2);; f1->SetParameters(2,1);; f1->SetParNames(""constant"",""coefficient"");; f1->Draw();; }; void myfit(); {; auto h1 = new TH1F(""h1"",""test"",100,0,10);; h1->FillRandom(""myfunc"",20000);; TF1 *f1 = (TF1 *)gROOT->GetFunction(""myfunc"");; f1->SetParameters(800,1);; h1->Fit(""myfunc"");; }; f#define f(i)Definition RSha256.hxx:104; Float_tfloat Float_tDefinition RtypesCore.h:57; gROOT#define gROOTDefinition TROOT.h:406; TF1::SetParNamesvirtual void SetParNames(const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""")Set up to 10 parameter names.Definition TF1.cxx:3463; TF1::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF1.cxx:1333; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fill",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:17436,Testability,log,logx,17436,"ing Note that when using pre-defined functions (e.g gaus), one needs to use the fit option 'B' to have the fix of the paramter effective. ;  ; Double_t GetChisquare () const;  Return the Chisquare after fitting. See ROOT::Fit::FitResult::Chi2() ;  ; virtual TString GetExpFormula (Option_t *option="""") const;  ; virtual TFormula * GetFormula ();  ; virtual const TFormula * GetFormula () const;  ; virtual TH1 * GetHistogram () const;  Return a pointer to the histogram used to visualise the function Note that this histogram is managed by the function and in same case it is automatically deleted when some TF1 functions are called such as TF1::SetParameters, TF1::SetNpx, TF1::SetRange It is then reccomended either to clone the return object or calling again teh GetHistogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:17666,Testability,log,logx,17666," ;  ; virtual TString GetExpFormula (Option_t *option="""") const;  ; virtual TFormula * GetFormula ();  ; virtual const TFormula * GetFormula () const;  ; virtual TH1 * GetHistogram () const;  Return a pointer to the histogram used to visualise the function Note that this histogram is managed by the function and in same case it is automatically deleted when some TF1 functions are called such as TF1::SetParameters, TF1::SetNpx, TF1::SetRange It is then reccomended either to clone the return object or calling again teh GetHistogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ; virtual Int_t GetNdim () const;  ; virtual Int_t GetNpar () const;  ; virtual Int_t GetNpx () const;  ; virtual Int_t GetNumber () const;  ; virtual Int_t GetNumberFitPoints () const;  ; virtual Int_t GetNumberFreeParameters () const;  Return ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:17918,Testability,log,logx,17918,"tion Note that this histogram is managed by the function and in same case it is automatically deleted when some TF1 functions are called such as TF1::SetParameters, TF1::SetNpx, TF1::SetRange It is then reccomended either to clone the return object or calling again teh GetHistogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ; virtual Int_t GetNdim () const;  ; virtual Int_t GetNpar () const;  ; virtual Int_t GetNpx () const;  ; virtual Int_t GetNumber () const;  ; virtual Int_t GetNumberFitPoints () const;  ; virtual Int_t GetNumberFreeParameters () const;  Return the number of free parameters. ;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; virtual Double_t GetParameter (const TString &name) const;  ; virtual Double_t GetParameter (Int_t ipar) const;  ; vir",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:18177,Testability,log,logx,18177,"istogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ; virtual Int_t GetNdim () const;  ; virtual Int_t GetNpar () const;  ; virtual Int_t GetNpx () const;  ; virtual Int_t GetNumber () const;  ; virtual Int_t GetNumberFitPoints () const;  ; virtual Int_t GetNumberFreeParameters () const;  Return the number of free parameters. ;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; virtual Double_t GetParameter (const TString &name) const;  ; virtual Double_t GetParameter (Int_t ipar) const;  ; virtual Double_t * GetParameters () const;  ; virtual void GetParameters (Double_t *params);  ; TObject * GetParent () const;  ; virtual Double_t GetParError (Int_t ipar) const;  Return value of parameter number ipar. ;  ; virtual const Double_t * GetParErrors () const;  ; vi",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:20644,Testability,log,logx,20644,"GetRandom (Double_t xmin, Double_t xmax, TRandom *rng=nullptr, Option_t *opt=nullptr);  Return a random number following this function shape in [xmin,xmax]. ;  ; virtual Double_t GetRandom (TRandom *rng=nullptr, Option_t *opt=nullptr);  Return a random number following this function shape. ;  ; virtual void GetRange (Double_t &xmin, Double_t &xmax) const;  Return range of a 1-D function. ;  ; virtual void GetRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const;  Return range of a 2-D function. ;  ; virtual void GetRange (Double_t &xmin, Double_t &ymin, Double_t &zmin, Double_t &xmax, Double_t &ymax, Double_t &zmax) const;  Return range of function. ;  ; virtual Double_t GetSave (const Double_t *x);  Get value corresponding to X in array of fSave values. ;  ; virtual Double_t GetVariable (const TString &name);  ; virtual Double_t GetX (Double_t y, Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the function value fy for (xmin<x<xmax). ;  ; TAxis * GetXaxis () const;  Get x axis of the function. ;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; TAxis * GetYaxis () const;  Get y axis of the function. ;  ; TAxis * GetZaxis () const;  Get z axis of the function. (In case this object is a TF2 or TF3) ;  ; virtual void GradientPar (const Double_t *x, Double_t *grad, Double_t eps=0.01);  Compute the gradient wrt parameters If the TF1 object is based on a formula expression (TFormula) and TFormula::GenerateGradientPar() has been successfully called automatic differentiation using CLAD is used instead of the default numerical differentiation. ;  ; template<class T > ; void GradientPar (const T *x, T *grad, Double_t eps=0.01);  ; virtual Double_t GradientPar (Int_t ipar, const Double_t *x, Double_t eps=0.01);  Compute the gradient (derivative) wrt a parameter ipar. ;  ; template<class T > ; T GradientPar (Int_t ipar, const T *x, Do",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:42269,Testability,test,tested,42269," interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass *",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:52974,Testability,test,test,52974,"s the name of an interpreted C++ function. The function is defined with npar parameters fcn must be a function of type:; Double_t fcn(Double_t *x, Double_t *params); This constructor is called for functions of type C by the C++ interpreter.; WarningA function created with this constructor cannot be Cloned. ; Definition at line 714 of file TF1.cxx. ◆ TF1() [6/15]. TF1::TF1 ; (; const char * ; name, . Double_t(*)(Double_t *, Double_t *) ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). Constructor using a pointer to a real function. ; Parameters. [in]nameobject name ; [in]fcnpointer to function ; [in]xmin,xmaxx axis limits ; [in]nparis the number of free parameters used by the function ; [in]ndimnumber of dimensions ; [in]addToGlobListboolean marking if it should be added to global list. This constructor creates a function of type C when invoked with the normal C++ compiler.; see test program test/stress.cxx (function stress1) for an example. note the interface with an intermediate pointer.; WarningA function created with this constructor cannot be Cloned. ; Definition at line 753 of file TF1.cxx. ◆ TF1() [7/15]. TF1::TF1 ; (; const char * ; name, . Double_t(*)(const Double_t *, const Double_t *) ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). Constructor using a pointer to (const) real function. ; Parameters. [in]nameobject name ; [in]fcnpointer to function ; [in]xmin,xmaxx axis limits ; [in]nparis the number of free parameters used by the function ; [in]ndimnumber of dimensions ; [in]addToGlobListboolean marking if it should be added to global list. This constructor creates a function of type C when invoked with the normal C++ compiler.; see test program test/stress.cxx (function stress1) for an example. note the interface with an intermediate pointer.; WarningA functi",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:52987,Testability,test,test,52987,"s the name of an interpreted C++ function. The function is defined with npar parameters fcn must be a function of type:; Double_t fcn(Double_t *x, Double_t *params); This constructor is called for functions of type C by the C++ interpreter.; WarningA function created with this constructor cannot be Cloned. ; Definition at line 714 of file TF1.cxx. ◆ TF1() [6/15]. TF1::TF1 ; (; const char * ; name, . Double_t(*)(Double_t *, Double_t *) ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). Constructor using a pointer to a real function. ; Parameters. [in]nameobject name ; [in]fcnpointer to function ; [in]xmin,xmaxx axis limits ; [in]nparis the number of free parameters used by the function ; [in]ndimnumber of dimensions ; [in]addToGlobListboolean marking if it should be added to global list. This constructor creates a function of type C when invoked with the normal C++ compiler.; see test program test/stress.cxx (function stress1) for an example. note the interface with an intermediate pointer.; WarningA function created with this constructor cannot be Cloned. ; Definition at line 753 of file TF1.cxx. ◆ TF1() [7/15]. TF1::TF1 ; (; const char * ; name, . Double_t(*)(const Double_t *, const Double_t *) ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). Constructor using a pointer to (const) real function. ; Parameters. [in]nameobject name ; [in]fcnpointer to function ; [in]xmin,xmaxx axis limits ; [in]nparis the number of free parameters used by the function ; [in]ndimnumber of dimensions ; [in]addToGlobListboolean marking if it should be added to global list. This constructor creates a function of type C when invoked with the normal C++ compiler.; see test program test/stress.cxx (function stress1) for an example. note the interface with an intermediate pointer.; WarningA functi",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:53855,Testability,test,test,53855,"to global list. This constructor creates a function of type C when invoked with the normal C++ compiler.; see test program test/stress.cxx (function stress1) for an example. note the interface with an intermediate pointer.; WarningA function created with this constructor cannot be Cloned. ; Definition at line 753 of file TF1.cxx. ◆ TF1() [7/15]. TF1::TF1 ; (; const char * ; name, . Double_t(*)(const Double_t *, const Double_t *) ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). Constructor using a pointer to (const) real function. ; Parameters. [in]nameobject name ; [in]fcnpointer to function ; [in]xmin,xmaxx axis limits ; [in]nparis the number of free parameters used by the function ; [in]ndimnumber of dimensions ; [in]addToGlobListboolean marking if it should be added to global list. This constructor creates a function of type C when invoked with the normal C++ compiler.; see test program test/stress.cxx (function stress1) for an example. note the interface with an intermediate pointer.; WarningA function created with this constructor cannot be Cloned. ; Definition at line 775 of file TF1.cxx. ◆ TF1() [8/15]. template<class T > . TF1::TF1 ; (; const char * ; name, . std::function< T(const T *data, const Double_t *param)> & ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). inline . Definition at line 357 of file TF1.h. ◆ TF1() [9/15]. template<class T > . TF1::TF1 ; (; const char * ; name, . T(*)(const T *, const Double_t *) ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). inline . Constructor using a pointer to function. ; Parameters. [in]nameobject name ; [in]fcnpointer to function ; [in]xmin,xmaxx axis limits ; [in]nparis the number of free parameters used by the func",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:53868,Testability,test,test,53868,"to global list. This constructor creates a function of type C when invoked with the normal C++ compiler.; see test program test/stress.cxx (function stress1) for an example. note the interface with an intermediate pointer.; WarningA function created with this constructor cannot be Cloned. ; Definition at line 753 of file TF1.cxx. ◆ TF1() [7/15]. TF1::TF1 ; (; const char * ; name, . Double_t(*)(const Double_t *, const Double_t *) ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). Constructor using a pointer to (const) real function. ; Parameters. [in]nameobject name ; [in]fcnpointer to function ; [in]xmin,xmaxx axis limits ; [in]nparis the number of free parameters used by the function ; [in]ndimnumber of dimensions ; [in]addToGlobListboolean marking if it should be added to global list. This constructor creates a function of type C when invoked with the normal C++ compiler.; see test program test/stress.cxx (function stress1) for an example. note the interface with an intermediate pointer.; WarningA function created with this constructor cannot be Cloned. ; Definition at line 775 of file TF1.cxx. ◆ TF1() [8/15]. template<class T > . TF1::TF1 ; (; const char * ; name, . std::function< T(const T *data, const Double_t *param)> & ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). inline . Definition at line 357 of file TF1.h. ◆ TF1() [9/15]. template<class T > . TF1::TF1 ; (; const char * ; name, . T(*)(const T *, const Double_t *) ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Int_t ; npar = 0, . Int_t ; ndim = 1, . EAddToList ; addToGlobList = EAddToList::kDefault . ). inline . Constructor using a pointer to function. ; Parameters. [in]nameobject name ; [in]fcnpointer to function ; [in]xmin,xmaxx axis limits ; [in]nparis the number of free parameters used by the func",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:60302,Testability,log,log,60302,"n value) ; See TF1::Integral() for parameter definitions; AuthorGene Van Buren gene@.nosp@m.bnl..nosp@m.gov ; Definition at line 3739 of file TF1.cxx. ◆ Class(). static TClass * TF1::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TF1::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TF1::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 755 of file TF1.h. ◆ Clone(). TObject * TF1::Clone ; (; const char * ; newname = nullptr); const. overridevirtual . Make a complete copy of the underlying object. ; If 'newname' is set, the copy's name will be set to that name. ; Reimplemented from TObject.; Definition at line 1064 of file TF1.cxx. ◆ ComputeCdfTable(). Bool_t TF1::ComputeCdfTable ; (; Option_t * ; option). protected . Compute the cumulative function at fNpx points between fXmin and fXmax. ; Option can be used to force a log scale (option = ""log""), linear (option = ""lin"") or automatic if empty. ; Definition at line 2081 of file TF1.cxx. ◆ Copy(). void TF1::Copy ; (; TObject & ; obj); const. overridevirtual . Copy this F1 to a new F1. ; Note that the cached integral with its related arrays are not copied (they are also set as transient data members) ; Reimplemented from TObject.; Reimplemented in TF12, TF2, and TF3.; Definition at line 1005 of file TF1.cxx. ◆ CreateHistogram(). virtual TH1 * TF1::CreateHistogram ; (; ). inlinevirtual . Reimplemented in TF2, and TF3.; Definition at line 477 of file TF1.h. ◆ DeclFileName(). static const char * TF1::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 755 of file TF1.h. ◆ DefaultAddToGlobalList(). Bool_t TF1::DefaultAddToGlobalList ; (; Bool_t ; on = kTRUE). static . Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:60323,Testability,log,log,60323,"n value) ; See TF1::Integral() for parameter definitions; AuthorGene Van Buren gene@.nosp@m.bnl..nosp@m.gov ; Definition at line 3739 of file TF1.cxx. ◆ Class(). static TClass * TF1::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TF1::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TF1::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 755 of file TF1.h. ◆ Clone(). TObject * TF1::Clone ; (; const char * ; newname = nullptr); const. overridevirtual . Make a complete copy of the underlying object. ; If 'newname' is set, the copy's name will be set to that name. ; Reimplemented from TObject.; Definition at line 1064 of file TF1.cxx. ◆ ComputeCdfTable(). Bool_t TF1::ComputeCdfTable ; (; Option_t * ; option). protected . Compute the cumulative function at fNpx points between fXmin and fXmax. ; Option can be used to force a log scale (option = ""log""), linear (option = ""lin"") or automatic if empty. ; Definition at line 2081 of file TF1.cxx. ◆ Copy(). void TF1::Copy ; (; TObject & ; obj); const. overridevirtual . Copy this F1 to a new F1. ; Note that the cached integral with its related arrays are not copied (they are also set as transient data members) ; Reimplemented from TObject.; Reimplemented in TF12, TF2, and TF3.; Definition at line 1005 of file TF1.cxx. ◆ CreateHistogram(). virtual TH1 * TF1::CreateHistogram ; (; ). inlinevirtual . Reimplemented in TF2, and TF3.; Definition at line 477 of file TF1.h. ◆ DeclFileName(). static const char * TF1::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 755 of file TF1.h. ◆ DefaultAddToGlobalList(). Bool_t TF1::DefaultAddToGlobalList ; (; Bool_t ; on = kTRUE). static . Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:74608,Testability,log,logx,74608,"ormula * TF1::GetFormula ; (; ). inlinevirtual . Definition at line 481 of file TF1.h. ◆ GetFormula() [2/2]. virtual const TFormula * TF1::GetFormula ; (; ); const. inlinevirtual . Definition at line 485 of file TF1.h. ◆ GetHistogram(). TH1 * TF1::GetHistogram ; (; ); const. virtual . Return a pointer to the histogram used to visualise the function Note that this histogram is managed by the function and in same case it is automatically deleted when some TF1 functions are called such as TF1::SetParameters, TF1::SetNpx, TF1::SetRange It is then reccomended either to clone the return object or calling again teh GetHistogram function whenever is needed. ; Definition at line 1584 of file TF1.cxx. ◆ GetLinearPart(). virtual const TObject * TF1::GetLinearPart ; (; Int_t ; i); const. inlinevirtual . Definition at line 493 of file TF1.h. ◆ GetMaximum(). Double_t TF1::GetMaximum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented in TF2.; Definition at line 1614 of file TF1.cxx. ◆ GetMaximumStored(). virtual Double_t TF1::GetMaximumStored ; (; ); const. inlinevirtual . Definition at line 501 of file TF",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:75249,Testability,log,logx,75249,"r is needed. ; Definition at line 1584 of file TF1.cxx. ◆ GetLinearPart(). virtual const TObject * TF1::GetLinearPart ; (; Int_t ; i); const. inlinevirtual . Definition at line 493 of file TF1.h. ◆ GetMaximum(). Double_t TF1::GetMaximum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented in TF2.; Definition at line 1614 of file TF1.cxx. ◆ GetMaximumStored(). virtual Double_t TF1::GetMaximumStored ; (; ); const. inlinevirtual . Definition at line 501 of file TF1.h. ◆ GetMaximumX(). Double_t TF1::GetMaximumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (defa",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:75288,Testability,log,log,75288,"r is needed. ; Definition at line 1584 of file TF1.cxx. ◆ GetLinearPart(). virtual const TObject * TF1::GetLinearPart ; (; Int_t ; i); const. inlinevirtual . Definition at line 493 of file TF1.h. ◆ GetMaximum(). Double_t TF1::GetMaximum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented in TF2.; Definition at line 1614 of file TF1.cxx. ◆ GetMaximumStored(). virtual Double_t TF1::GetMaximumStored ; (; ); const. inlinevirtual . Definition at line 501 of file TF1.h. ◆ GetMaximumX(). Double_t TF1::GetMaximumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (defa",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:75336,Testability,log,log,75336,"r is needed. ; Definition at line 1584 of file TF1.cxx. ◆ GetLinearPart(). virtual const TObject * TF1::GetLinearPart ; (; Int_t ; i); const. inlinevirtual . Definition at line 493 of file TF1.h. ◆ GetMaximum(). Double_t TF1::GetMaximum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented in TF2.; Definition at line 1614 of file TF1.cxx. ◆ GetMaximumStored(). virtual Double_t TF1::GetMaximumStored ; (; ); const. inlinevirtual . Definition at line 501 of file TF1.h. ◆ GetMaximumX(). Double_t TF1::GetMaximumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (defa",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:75774,Testability,log,logx,75774,"-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented in TF2.; Definition at line 1614 of file TF1.cxx. ◆ GetMaximumStored(). virtual Double_t TF1::GetMaximumStored ; (; ); const. inlinevirtual . Definition at line 501 of file TF1.h. ◆ GetMaximumX(). Double_t TF1::GetMaximumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetX ; Definition at line 1655 of file TF1.cxx. ◆ GetMethodCall(). TMethodCall * TF1::GetMethodCall ; (; ); const. inline . Definition at line 522 of file TF1.h. ◆ GetMinimum(). Double_t T",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:76444,Testability,log,logx,76444,"inition at line 1614 of file TF1.cxx. ◆ GetMaximumStored(). virtual Double_t TF1::GetMaximumStored ; (; ); const. inlinevirtual . Definition at line 501 of file TF1.h. ◆ GetMaximumX(). Double_t TF1::GetMaximumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetX ; Definition at line 1655 of file TF1.cxx. ◆ GetMethodCall(). TMethodCall * TF1::GetMethodCall ; (; ); const. inline . Definition at line 522 of file TF1.h. ◆ GetMinimum(). Double_t TF1::GetMinimum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:76483,Testability,log,log,76483,"inition at line 1614 of file TF1.cxx. ◆ GetMaximumStored(). virtual Double_t TF1::GetMaximumStored ; (; ); const. inlinevirtual . Definition at line 501 of file TF1.h. ◆ GetMaximumX(). Double_t TF1::GetMaximumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetX ; Definition at line 1655 of file TF1.cxx. ◆ GetMethodCall(). TMethodCall * TF1::GetMethodCall ; (; ); const. inline . Definition at line 522 of file TF1.h. ◆ GetMinimum(). Double_t TF1::GetMinimum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:76531,Testability,log,log,76531,"inition at line 1614 of file TF1.cxx. ◆ GetMaximumStored(). virtual Double_t TF1::GetMaximumStored ; (; ); const. inlinevirtual . Definition at line 501 of file TF1.h. ◆ GetMaximumX(). Double_t TF1::GetMaximumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetX ; Definition at line 1655 of file TF1.cxx. ◆ GetMethodCall(). TMethodCall * TF1::GetMethodCall ; (; ); const. inline . Definition at line 522 of file TF1.h. ◆ GetMinimum(). Double_t TF1::GetMinimum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:76907,Testability,log,logx,76907,"arch is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetX ; Definition at line 1655 of file TF1.cxx. ◆ GetMethodCall(). TMethodCall * TF1::GetMethodCall ; (; ); const. inline . Definition at line 522 of file TF1.h. ◆ GetMinimum(). Double_t TF1::GetMinimum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented in TF2.; Definition at line 1696 of file TF1.cxx. ◆ GetMinimumStored(). virtual Double_t TF1::GetMinimumStored ; (; ); const. inlinevirtual . Defi",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:77577,Testability,log,logx,77577,"TF1::GetX ; Definition at line 1655 of file TF1.cxx. ◆ GetMethodCall(). TMethodCall * TF1::GetMethodCall ; (; ); const. inline . Definition at line 522 of file TF1.h. ◆ GetMinimum(). Double_t TF1::GetMinimum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented in TF2.; Definition at line 1696 of file TF1.cxx. ◆ GetMinimumStored(). virtual Double_t TF1::GetMinimumStored ; (; ); const. inlinevirtual . Definition at line 505 of file TF1.h. ◆ GetMinimumX(). Double_t TF1::GetMinimumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bra",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:77616,Testability,log,log,77616,"TF1::GetX ; Definition at line 1655 of file TF1.cxx. ◆ GetMethodCall(). TMethodCall * TF1::GetMethodCall ; (; ); const. inline . Definition at line 522 of file TF1.h. ◆ GetMinimum(). Double_t TF1::GetMinimum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented in TF2.; Definition at line 1696 of file TF1.cxx. ◆ GetMinimumStored(). virtual Double_t TF1::GetMinimumStored ; (; ); const. inlinevirtual . Definition at line 505 of file TF1.h. ◆ GetMinimumX(). Double_t TF1::GetMinimumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bra",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:77664,Testability,log,log,77664,"TF1::GetX ; Definition at line 1655 of file TF1.cxx. ◆ GetMethodCall(). TMethodCall * TF1::GetMethodCall ; (; ); const. inline . Definition at line 522 of file TF1.h. ◆ GetMinimum(). Double_t TF1::GetMinimum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented in TF2.; Definition at line 1696 of file TF1.cxx. ◆ GetMinimumStored(). virtual Double_t TF1::GetMinimumStored ; (; ); const. inlinevirtual . Definition at line 505 of file TF1.h. ◆ GetMinimumX(). Double_t TF1::GetMinimumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bra",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:78102,Testability,log,logx,78102,"-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented in TF2.; Definition at line 1696 of file TF1.cxx. ◆ GetMinimumStored(). virtual Double_t TF1::GetMinimumStored ; (; ); const. inlinevirtual . Definition at line 505 of file TF1.h. ◆ GetMinimumX(). Double_t TF1::GetMinimumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetX ; Definition at line 1823 of file TF1.cxx. ◆ GetMinMaxNDim(). Double_t TF1::GetMinMaxNDim ; (; Double_t * ; x, . Bool_t ; findmax, . Double_t ; epsilon = ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:78801,Testability,log,logx,78801,"TF1.cxx. ◆ GetMinimumStored(). virtual Double_t TF1::GetMinimumStored ; (; ); const. inlinevirtual . Definition at line 505 of file TF1.h. ◆ GetMinimumX(). Double_t TF1::GetMinimumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetX ; Definition at line 1823 of file TF1.cxx. ◆ GetMinMaxNDim(). Double_t TF1::GetMinMaxNDim ; (; Double_t * ; x, . Bool_t ; findmax, . Double_t ; epsilon = 0, . Int_t ; maxiter = 0 . ); const. protectedvirtual . Find the minimum of a function of whatever dimension. ; While GetMinimum works only for 1D function , GetMinimumNDim works for all dimensions since it uses the minimizer interface vector x at beginning will contained the initial point, on exit will contain the result ; Definition at line 1723 of file TF1.cxx. ◆ GetNDF(). Int_t TF1::GetNDF ; (; ); const. virtual . Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ; The number of degrees of freedom corresponds to the number of points used in the fit minus the number of free parameters. ; Definition at line 1889 of file TF1.cxx",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:78840,Testability,log,log,78840,"TF1.cxx. ◆ GetMinimumStored(). virtual Double_t TF1::GetMinimumStored ; (; ); const. inlinevirtual . Definition at line 505 of file TF1.h. ◆ GetMinimumX(). Double_t TF1::GetMinimumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetX ; Definition at line 1823 of file TF1.cxx. ◆ GetMinMaxNDim(). Double_t TF1::GetMinMaxNDim ; (; Double_t * ; x, . Bool_t ; findmax, . Double_t ; epsilon = 0, . Int_t ; maxiter = 0 . ); const. protectedvirtual . Find the minimum of a function of whatever dimension. ; While GetMinimum works only for 1D function , GetMinimumNDim works for all dimensions since it uses the minimizer interface vector x at beginning will contained the initial point, on exit will contain the result ; Definition at line 1723 of file TF1.cxx. ◆ GetNDF(). Int_t TF1::GetNDF ; (; ); const. virtual . Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ; The number of degrees of freedom corresponds to the number of points used in the fit minus the number of free parameters. ; Definition at line 1889 of file TF1.cxx",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:78888,Testability,log,log,78888,"TF1.cxx. ◆ GetMinimumStored(). virtual Double_t TF1::GetMinimumStored ; (; ); const. inlinevirtual . Definition at line 505 of file TF1.h. ◆ GetMinimumX(). Double_t TF1::GetMinimumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetX ; Definition at line 1823 of file TF1.cxx. ◆ GetMinMaxNDim(). Double_t TF1::GetMinMaxNDim ; (; Double_t * ; x, . Bool_t ; findmax, . Double_t ; epsilon = 0, . Int_t ; maxiter = 0 . ); const. protectedvirtual . Find the minimum of a function of whatever dimension. ; While GetMinimum works only for 1D function , GetMinimumNDim works for all dimensions since it uses the minimizer interface vector x at beginning will contained the initial point, on exit will contain the result ; Definition at line 1723 of file TF1.cxx. ◆ GetNDF(). Int_t TF1::GetNDF ; (; ); const. virtual . Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ; The number of degrees of freedom corresponds to the number of points used in the fit minus the number of free parameters. ; Definition at line 1889 of file TF1.cxx",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:84733,Testability,log,log,84733," with n ; Definition at line 1994 of file TF1.cxx. ◆ GetRandom() [1/2]. Double_t TF1::GetRandom ; (; Double_t ; xmin, . Double_t ; xmax, . TRandom * ; rng = nullptr, . Option_t * ; option = nullptr . ). virtual . Return a random number following this function shape in [xmin,xmax]. ; The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The parabolic approximation is very good as soon as the number of bins is greater than 50.; Parameters. xminminimum value for generated random numbers ; xmaxmaximum value for generated random numbers ; rng(optional) random number generator pointer ; option(optional) : LOG or LIN to force the usage of a log or linear scale for computing the cumulative integral table. IMPORTANT NOTE; The integral of the function is computed at fNpx points. If the function has sharp peaks, you should increase the number of points (SetNpx) such that the peak is correctly tabulated at several points. ; Reimplemented in TF2.; Definition at line 2245 of file TF1.cxx. ◆ GetRandom() [2/2]. Double_t TF1::GetRandom ; (; TRandom * ; rng = nullptr, . Option_t * ; option = nullptr . ). virtual . Return a random number following this function shape. ; Parameters. rngRandom number generator. By default (or when passing a nullptr) the global gRandom is used ; optionOption string which controls the binning used to compute the integral. Default mode is automatic depending of xmax, xmin and Npx (function points). Possible values are:; ""LOG"" to force usage of log scale for tabulating the integral; ""LIN"" to force usage of linear scale when tabulating the ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:85569,Testability,log,log,85569,"e for generated random numbers ; rng(optional) random number generator pointer ; option(optional) : LOG or LIN to force the usage of a log or linear scale for computing the cumulative integral table. IMPORTANT NOTE; The integral of the function is computed at fNpx points. If the function has sharp peaks, you should increase the number of points (SetNpx) such that the peak is correctly tabulated at several points. ; Reimplemented in TF2.; Definition at line 2245 of file TF1.cxx. ◆ GetRandom() [2/2]. Double_t TF1::GetRandom ; (; TRandom * ; rng = nullptr, . Option_t * ; option = nullptr . ). virtual . Return a random number following this function shape. ; Parameters. rngRandom number generator. By default (or when passing a nullptr) the global gRandom is used ; optionOption string which controls the binning used to compute the integral. Default mode is automatic depending of xmax, xmin and Npx (function points). Possible values are:; ""LOG"" to force usage of log scale for tabulating the integral; ""LIN"" to force usage of linear scale when tabulating the integral. The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The user can provide as optional parameter a Random number generator. By default gRandom is used; If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x A log scale for the intergral is also always used if a user specifies the ""LOG"" option Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale whatever the fXmax/fXmin ratio is; Note that the parabolic approximation is very good as s",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:86315,Testability,log,log,86315,"e integral. Default mode is automatic depending of xmax, xmin and Npx (function points). Possible values are:; ""LOG"" to force usage of log scale for tabulating the integral; ""LIN"" to force usage of linear scale when tabulating the integral. The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The user can provide as optional parameter a Random number generator. By default gRandom is used; If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x A log scale for the intergral is also always used if a user specifies the ""LOG"" option Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale whatever the fXmax/fXmin ratio is; Note that the parabolic approximation is very good as soon as the number of bins is greater than 50. ; Reimplemented in TF2.; Definition at line 2192 of file TF1.cxx. ◆ GetRange() [1/4]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; xmax . ); const. virtual . Return range of a 1-D function. ; Reimplemented in TF2, TF3, and TF3.; Definition at line 2308 of file TF1.cxx. ◆ GetRange() [2/4]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. virtual . Return range of a 2-D function. ; Reimplemented in TF2, TF3, TF2, and TF3.; Definition at line 2318 of file TF1.cxx. ◆ GetRange() [3/4]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; zmin, . Double_t & ; xmax, . Double_t & ; ymax, . Double_t & ; zmax . ); const. virtual . Return range of function. ; Reimplemented in TF2, TF3,",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:86332,Testability,log,log,86332,"e integral. Default mode is automatic depending of xmax, xmin and Npx (function points). Possible values are:; ""LOG"" to force usage of log scale for tabulating the integral; ""LIN"" to force usage of linear scale when tabulating the integral. The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The user can provide as optional parameter a Random number generator. By default gRandom is used; If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x A log scale for the intergral is also always used if a user specifies the ""LOG"" option Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale whatever the fXmax/fXmin ratio is; Note that the parabolic approximation is very good as soon as the number of bins is greater than 50. ; Reimplemented in TF2.; Definition at line 2192 of file TF1.cxx. ◆ GetRange() [1/4]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; xmax . ); const. virtual . Return range of a 1-D function. ; Reimplemented in TF2, TF3, and TF3.; Definition at line 2308 of file TF1.cxx. ◆ GetRange() [2/4]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. virtual . Return range of a 2-D function. ; Reimplemented in TF2, TF3, TF2, and TF3.; Definition at line 2318 of file TF1.cxx. ◆ GetRange() [3/4]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; zmin, . Double_t & ; xmax, . Double_t & ; ymax, . Double_t & ; zmax . ); const. virtual . Return range of function. ; Reimplemented in TF2, TF3,",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:86498,Testability,log,log,86498,"e integral. Default mode is automatic depending of xmax, xmin and Npx (function points). Possible values are:; ""LOG"" to force usage of log scale for tabulating the integral; ""LIN"" to force usage of linear scale when tabulating the integral. The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The user can provide as optional parameter a Random number generator. By default gRandom is used; If the ratio fXmax/fXmin > fNpx the integral is tabulated in log scale in x A log scale for the intergral is also always used if a user specifies the ""LOG"" option Instead if a user requestes a ""LIN"" option the integral binning is never done in log scale whatever the fXmax/fXmin ratio is; Note that the parabolic approximation is very good as soon as the number of bins is greater than 50. ; Reimplemented in TF2.; Definition at line 2192 of file TF1.cxx. ◆ GetRange() [1/4]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; xmax . ); const. virtual . Return range of a 1-D function. ; Reimplemented in TF2, TF3, and TF3.; Definition at line 2308 of file TF1.cxx. ◆ GetRange() [2/4]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. virtual . Return range of a 2-D function. ; Reimplemented in TF2, TF3, TF2, and TF3.; Definition at line 2318 of file TF1.cxx. ◆ GetRange() [3/4]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; zmin, . Double_t & ; xmax, . Double_t & ; ymax, . Double_t & ; zmax . ); const. virtual . Return range of function. ; Reimplemented in TF2, TF3,",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:88220,Testability,log,logx,88220,"etRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; zmin, . Double_t & ; xmax, . Double_t & ; ymax, . Double_t & ; zmax . ); const. virtual . Return range of function. ; Reimplemented in TF2, TF3, TF2, and TF3.; Definition at line 2330 of file TF1.cxx. ◆ GetRange() [4/4]. void TF1::GetRange ; (; Double_t * ; xmin, . Double_t * ; xmax . ); const. protectedvirtual . Return range of a generic N-D function. ; Reimplemented in TF2, and TF3.; Definition at line 2281 of file TF1.cxx. ◆ GetSave(). Double_t TF1::GetSave ; (; const Double_t * ; x). virtual . Get value corresponding to X in array of fSave values. ; Reimplemented in TF2, and TF3.; Definition at line 2344 of file TF1.cxx. ◆ GetVariable(). virtual Double_t TF1::GetVariable ; (; const TString & ; name). inlinevirtual . Definition at line 591 of file TF1.h. ◆ GetX(). Double_t TF1::GetX ; (; Double_t ; fy, . Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the function value fy for (xmin<x<xmax). ; in other words it can find the roots of the function when fy=0 and successive calls by changing the next call to [xmin+eps,xmax] where xmin is the previous root.; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX, TF1::G",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:89059,Testability,log,logx,89059,"_t TF1::GetX ; (; Double_t ; fy, . Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the function value fy for (xmin<x<xmax). ; in other words it can find the roots of the function when fy=0 and successive calls by changing the next call to [xmin+eps,xmax] where xmin is the previous root.; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX, TF1::GetMinimumX ; Definition at line 1863 of file TF1.cxx. ◆ GetXaxis(). TAxis * TF1::GetXaxis ; (; ); const. Get x axis of the function. ; Definition at line 2400 of file TF1.cxx. ◆ GetXmax(). virtual Double_t TF1::GetXmax ; (; ); const. inlinevirtual . Definition at line 584 of file TF1.h. ◆ GetXmin(). virtual Double_t TF1::GetXmin ; (; ); const. inlinevirtual . Definition at line 580 of file TF1.h. ◆ GetYaxis(). TAxis * TF1::GetYaxis ; (; ); const. Get y axis of the function. ; Definition at line 2411 of file TF1.cxx. ◆ GetZaxis(). TAxis * TF1::GetZaxis ; (; ); const. Get z axis of the function. (In case this object is a TF2 or TF3) ; Definition at line 2422 of file TF1.cxx. ◆ GradientPar() [1/4]. void TF1::GradientPar ; (; const Double_t * ; x, . Double_t * ; grad, . Double_t ; eps = 0.01 . ). virtual . Compute the gradient wrt parameters If ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:89098,Testability,log,log,89098,"_t TF1::GetX ; (; Double_t ; fy, . Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the function value fy for (xmin<x<xmax). ; in other words it can find the roots of the function when fy=0 and successive calls by changing the next call to [xmin+eps,xmax] where xmin is the previous root.; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX, TF1::GetMinimumX ; Definition at line 1863 of file TF1.cxx. ◆ GetXaxis(). TAxis * TF1::GetXaxis ; (; ); const. Get x axis of the function. ; Definition at line 2400 of file TF1.cxx. ◆ GetXmax(). virtual Double_t TF1::GetXmax ; (; ); const. inlinevirtual . Definition at line 584 of file TF1.h. ◆ GetXmin(). virtual Double_t TF1::GetXmin ; (; ); const. inlinevirtual . Definition at line 580 of file TF1.h. ◆ GetYaxis(). TAxis * TF1::GetYaxis ; (; ); const. Get y axis of the function. ; Definition at line 2411 of file TF1.cxx. ◆ GetZaxis(). TAxis * TF1::GetZaxis ; (; ); const. Get z axis of the function. (In case this object is a TF2 or TF3) ; Definition at line 2422 of file TF1.cxx. ◆ GradientPar() [1/4]. void TF1::GradientPar ; (; const Double_t * ; x, . Double_t * ; grad, . Double_t ; eps = 0.01 . ). virtual . Compute the gradient wrt parameters If ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:89146,Testability,log,log,89146,"_t TF1::GetX ; (; Double_t ; fy, . Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the function value fy for (xmin<x<xmax). ; in other words it can find the roots of the function when fy=0 and successive calls by changing the next call to [xmin+eps,xmax] where xmin is the previous root.; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX, TF1::GetMinimumX ; Definition at line 1863 of file TF1.cxx. ◆ GetXaxis(). TAxis * TF1::GetXaxis ; (; ); const. Get x axis of the function. ; Definition at line 2400 of file TF1.cxx. ◆ GetXmax(). virtual Double_t TF1::GetXmax ; (; ); const. inlinevirtual . Definition at line 584 of file TF1.h. ◆ GetXmin(). virtual Double_t TF1::GetXmin ; (; ); const. inlinevirtual . Definition at line 580 of file TF1.h. ◆ GetYaxis(). TAxis * TF1::GetYaxis ; (; ); const. Get y axis of the function. ; Definition at line 2411 of file TF1.cxx. ◆ GetZaxis(). TAxis * TF1::GetZaxis ; (; ); const. Get z axis of the function. (In case this object is a TF2 or TF3) ; Definition at line 2422 of file TF1.cxx. ◆ GradientPar() [1/4]. void TF1::GradientPar ; (; const Double_t * ; x, . Double_t * ; grad, . Double_t ; eps = 0.01 . ). virtual . Compute the gradient wrt parameters If ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:107640,Testability,test,tested,107640,"1 & ; rhs). Operator =. ; Definition at line 942 of file TF1.cxx. ◆ Paint(). void TF1::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint this function with its current attributes. ; The function is going to be converted in an histogram and the corresponding histogram is painted. The painted histogram can be retrieved calling afterwards the method TF1::GetHistogram() ; Reimplemented from TObject.; Reimplemented in TF2, and TF3.; Definition at line 2953 of file TF1.cxx. ◆ Print(). void TF1::Print ; (; Option_t * ; option = """"); const. overridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 2897 of file TF1.cxx. ◆ RejectedPoint(). Bool_t TF1::RejectedPoint ; (; ). static . See TF1::RejectPoint above. ; Definition at line 3692 of file TF1.cxx. ◆ RejectPoint(). void TF1::RejectPoint ; (; Bool_t ; reject = kTRUE). static . Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ; This flag can be set by a user in a fitting function. The fgRejectPoint flag is reset by the TH1 and TGraph fitting functions. ; Definition at line 3683 of file TF1.cxx. ◆ ReleaseParameter(). void TF1::ReleaseParameter ; (; Int_t ; ipar). virtual . Release parameter number ipar during a fit operation. ; After releasing it, the parameter can vary freely in the fit. The parameter limits are reset to 0,0. ; Definition at line 3151 of file TF1.cxx. ◆ Save(). void TF1::Save ; (; Double_t ; xmin, . Double_t ; xmax, . Double_t ; ymin, . Double_t ; ymax, . Double_t ; zmin, . Double_t ; zmax . ). virtual . Save values of function in array fSave. ; Reimplemented in TF2, and TF3.; Definition at line 3161 of file TF1.cxx. ◆ SavePrimitive(). void TF1::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented f",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF1.html:591,Usability,simpl,simple,591,". ROOT: TF1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TF1 Class ReferenceHistogram Library » Function classes. ; 1-Dim function class . TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit. The function may be a simple function based on a TFormula expression or a precompiled user function. The function may have associated parameters. TF1 graphics function is via the TH1 and TGraph drawing functions.; The following types of functions can be created:. Expression using variable x and no parameters; Expression using variable x with parameters; Lambda Expression with variable x and parameters; A general C function with parameters; A general C++ function object (functor) with parameters; A member function with parameters of a general C++ class. 1 - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators; {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; TF1::TF1TF1()TF1 default constructor.Definition TF1.cxx:489. Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters; {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }. Case 3: inline expression using a user defined CLING function by name; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; double; xDouble_t x[n]Definition legend1.C:17. 2 - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators; Example a:; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; This create",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
https://root.cern/doc/master/classTF12.html:2052,Availability,avail,available,2052,"rent attributes. ;  ; Double_t Eval (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const override;  Evaluate this formula. ;  ; Double_t EvalPar (const Double_t *x, const Double_t *params=nullptr) override;  Evaluate this function at point x[0]. ;  ; virtual Double_t GetXY () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetXY (Double_t xy);  Set the value of the constant for the TF2. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TF1;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions GL - function will be always stored in the global list of functions , independently of the global setting of TF1::DefaultAddToGlobalList. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, EAddToList addToGlobList=EAddToList::kDefault, bool vectorize=false);  TF1 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, const char *, const char *, EAddToList addToGlobList=EAddToList::kDefault);  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  ;  TF1 (const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  F",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:14819,Availability,toler,tolerance,14819,"uble_t epsilon=1.E-2);  Return Error on Integral of a parametric function with dimension larger than one between a[] and b[] due to the parameters uncertainties. ;  ; virtual Double_t IntegralFast (Int_t num, Double_t *x, Double_t *w, Double_t a, Double_t b, Double_t *params=nullptr, Double_t epsilon=1e-12);  Gauss-Legendre integral, see CalcGaussLegendreSamplingPoints. ;  ; virtual Double_t IntegralMultiple (Int_t n, const Double_t *a, const Double_t *b, Double_t epsrel, Double_t &relerr);  See more general prototype below. ;  ; virtual Double_t IntegralMultiple (Int_t n, const Double_t *a, const Double_t *b, Int_t maxpts, Double_t epsrel, Double_t epsabs, Double_t &relerr, Int_t &nfnevl, Int_t &ifail);  This function computes, to an attempted specified accuracy, the value of the integral. ;  ; virtual Double_t IntegralMultiple (Int_t n, const Double_t *a, const Double_t *b, Int_t, Int_t maxpts, Double_t epsrel, Double_t &relerr, Int_t &nfnevl, Int_t &ifail);  ; virtual Double_t IntegralOneDim (Double_t a, Double_t b, Double_t epsrel, Double_t epsabs, Double_t &err);  Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ;  ; virtual Bool_t IsEvalNormalized () const;  ; virtual Bool_t IsInside (const Double_t *x) const;  return kTRUE if the point is inside the function range ;  ; virtual Bool_t IsLinear () const;  ; virtual Bool_t IsValid () const;  Return kTRUE if the function is valid. ;  ; bool IsVectorized ();  ; virtual Double_t Mean (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ; virtual Double_t Moment (Double_t n, Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  Return nth moment of function between a and b. ;  ; template<class T > ; T operator() (const T *x, const Double_t *params=nullptr);  ; virtual Double_t operator() (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;  ; TF1 & operator= (const TF1 &rhs);  Ope",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:16310,Availability,error,errors,16310,"ilon=0.000001);  ; virtual Double_t Moment (Double_t n, Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  Return nth moment of function between a and b. ;  ; template<class T > ; T operator() (const T *x, const Double_t *params=nullptr);  ; virtual Double_t operator() (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;  ; TF1 & operator= (const TF1 &rhs);  Operator =. ;  ; void Paint (Option_t *option="""") override;  Paint this function with its current attributes. ;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; virtual void ReleaseParameter (Int_t ipar);  Release parameter number ipar during a fit operation. ;  ; virtual void Save (Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax);  Save values of function in array fSave. ;  ; virtual void SetChisquare (Double_t chi2);  ; virtual void SetFitResult (const ROOT::Fit::FitResult &result, const Int_t *indpar=nullptr);  Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (with size fNpar) of the parameter indices in the FitResult can be passed This is useful in the case of a combined fit with different functions, and the FitResult contains the global result By default it is assume that indpar = {0,1,2,....,fNpar-1}. ;  ; template<typename Func > ; void SetFunction (Func f);  ; template<class PtrObj , typename MemFn > ; void SetFunction (PtrObj &p, MemFn memFn);  ; virtual void SetMaximum (Double_t maximum=-1111);  Set the maximum value along Y for this function In case the function is already drawn, set also the maximum in the helper histogram. ;  ; virtual void SetMinimum (Double_t minimum=-1111);  Set the minimum value along Y for this function In case the function is already drawn, set also the minimum in the helper histogram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf shoul",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:18160,Availability,error,error,18160,"gram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of free parameters. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetRange (Double_t xmin, Double_t xmax);  Initialize the upper and lower bounds to draw the function. ;  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax);  ; virtual voi",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:18173,Availability,error,error,18173,"gram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of free parameters. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetRange (Double_t xmin, Double_t xmax);  Initialize the upper and lower bounds to draw the function. ;  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax);  ; virtual voi",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:18254,Availability,error,errors,18254,"ers. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetRange (Double_t xmin, Double_t xmax);  Initialize the upper and lower bounds to draw the function. ;  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax);  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax);  ; virtual void SetSavedPoint (Int_t point, Double_t valu",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:18268,Availability,error,errors,18268,"ers. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetRange (Double_t xmin, Double_t xmax);  Initialize the upper and lower bounds to draw the function. ;  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax);  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax);  ; virtual void SetSavedPoint (Int_t point, Double_t valu",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:18339,Availability,error,errors,18339,"ers. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetRange (Double_t xmin, Double_t xmax);  Initialize the upper and lower bounds to draw the function. ;  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax);  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax);  ; virtual void SetSavedPoint (Int_t point, Double_t valu",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:22806,Availability,error,error,22806,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:22895,Availability,error,error,22895,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return t",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:23050,Availability,error,error,23050,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:23227,Availability,error,error,23227,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:26928,Availability,error,error,26928,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:32808,Availability,error,error,32808,"; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; stat",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:37030,Availability,error,errors,37030,mma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::unique_ptr< TMethodCall > fMethodCall;  ! Pointer to MethodCall in case of interpreted function ;  ; Double_t fMinimum {-1111};  Minimum value for plotting. ;  ; Int_t fNDF {};  Number of degrees of freedom in the fit. ;  ; Int_t fNdim {};  Function dimension. ;  ; Bool_t fNormalized {false};  Normalization option (false by default) ;  ; Double_t fNormIntegral {};  Integral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Mar,MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:44452,Deployability,update,updated,44452,"ual . Evaluate this function at point x[0]. ; x[0] is the value along X if fCase =0, the value along Y if fCase=1 if params is non null, the array will be used instead of the internal TF2 parameters ; Reimplemented from TF1.; Definition at line 157 of file TF12.cxx. ◆ GetXY(). virtual Double_t TF12::GetXY ; (; ); const. inlinevirtual . Definition at line 47 of file TF12.h. ◆ IsA(). TClass * TF12::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TF1.; Definition at line 51 of file TF12.h. ◆ SavePrimitive(). void TF12::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TF1.; Definition at line 176 of file TF12.cxx. ◆ SetXY(). void TF12::SetXY ; (; Double_t ; xy). virtual . Set the value of the constant for the TF2. ; constant in X when projecting along Y constant in Y when projecting along X The function title is set to include the value of the constant The current pad is updated ; Definition at line 190 of file TF12.cxx. ◆ Streamer(). void TF12::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TF1. ◆ StreamerNVirtual(). void TF12::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file TF12.h. Member Data Documentation. ◆ fCase. Int_t TF12::fCase. protected . Projection along X(0), or Y(1) ; Definition at line 29 of file TF12.h. ◆ fF2. TF2* TF12::fF2. protected . Pointer to the mother TF2. ; Definition at line 30 of file TF12.h. ◆ fXY. Double_t TF12::fXY. protected . Value along Y (if projection X) or X (if projection Y) ; Definition at line 28 of file TF12.h. Libraries for TF12:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TF12.h; hist/hist/src/TF12.cxx. TF12. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:48 (GVA Time) using Doxygen 1.9",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:22812,Integrability,message,message,22812,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:23233,Integrability,message,message,23233,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:24091,Integrability,message,message,24091," this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:26934,Integrability,message,message,26934,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:27307,Integrability,message,message,27307,"move this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:32216,Integrability,interface,interface,32216,"+ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag i",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:35854,Integrability,wrap,wrap,35854," that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Int_t fCase;  Projection along X(0), or Y(1) ;  ; TF2 * fF2;  Pointer to the mother TF2. ;  ; Double_t fXY;  Value along Y (if projection X) or X (if projection Y) ;  ;  Protected Attributes inherited from TF1; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsComposition > fComposition;  Pointer to composition (NSUM or CONV) ;  ; std::unique_ptr< TFormula > fFormula;  Pointer to TFormula in case when user define formula. ;  ; std::unique_ptr< TF1FunctorPointer > fFunctor;  ! Functor object to wrap any C++ callable object ;  ; std::vector< Double_t > fGamma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::unique_ptr< TMethodCall > fMethodCall;  ! Pointer to MethodCall in case of interpreted function ;  ; Double_t fMinimum {-1111};  Minimum value for plotting. ;  ; Int_t fNDF {};  Number of degrees of freedom in the fit. ;  ; Int_t fNdim {};  Function dimension. ;  ; Bool_t fNormalized {false};  Normalization option (false by default) ;  ; Double_t fNormIntegral {};  Integral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:1811,Modifiability,inherit,inherited,1811,"tion_t *option=""x"");  TF12 normal constructor. ;  ;  TF12 (const TF12 &f12);  Copy constructor. ;  ;  ~TF12 () override;  F2 default destructor. ;  ; void Copy (TObject &f12) const override;  Copy this F2 to a new F2. ;  ; TF1 * DrawCopy (Option_t *option="""") const override;  Draw a copy of this function with its current attributes. ;  ; Double_t Eval (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const override;  Evaluate this formula. ;  ; Double_t EvalPar (const Double_t *x, const Double_t *params=nullptr) override;  Evaluate this function at point x[0]. ;  ; virtual Double_t GetXY () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetXY (Double_t xy);  Set the value of the constant for the TF2. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TF1;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions GL - function will be always stored in the global list of functions , independently of the global setting of TF1::DefaultAddToGlobalList. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, EAddToList addToGlobList=EAddToList::kDefault, bool vectorize=false);  TF1 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, const char *, const char *, EAddToList addToGlobList=EAddToList::kDefault);  ; template<class P",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:19990,Modifiability,inherit,inherited,19990,"l void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax);  ; virtual void SetRange (Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax);  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it is assumed that the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the titles for the X and Y axis respectively. ;  ; virtual void SetVectorized (Bool_t vectorized);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update ();  Called by functions such as SetRange, SetNpx, SetParameters to force the deletion of the associated histogram or Integral. ;  ; virtual Double_t Variance (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title.",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:21649,Modifiability,inherit,inherited,21649,"fer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:22442,Modifiability,inherit,inheritance,22442,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ;",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:24189,Modifiability,inherit,inherits,24189,"l (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:24306,Modifiability,inherit,inherits,24306," (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:27614,Modifiability,inherit,inherited,27614,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:29119,Modifiability,inherit,inherited,29119,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:30374,Modifiability,inherit,inherited,30374,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:31988,Modifiability,inherit,inherited,31988," ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the cu",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:33447,Modifiability,inherit,inherited,33447,"ic method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:33657,Modifiability,inherit,inherited,33657,"ic method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:34175,Modifiability,inherit,inherited,34175,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Int_t fCase;  Projection along X(0), or Y(1) ;  ; TF2 * fF2;  Pointer to the mother TF2. ;  ; Double_t fXY;  Value along Y (if projection X) or X (if projection Y) ;  ;  Protected Attributes inherited from TF1; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsC",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:34387,Modifiability,inherit,inherited,34387,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Int_t fCase;  Projection along X(0), or Y(1) ;  ; TF2 * fF2;  Pointer to the mother TF2. ;  ; Double_t fXY;  Value along Y (if projection X) or X (if projection Y) ;  ;  Protected Attributes inherited from TF1; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsC",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:34599,Modifiability,inherit,inherited,34599,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Int_t fCase;  Projection along X(0), or Y(1) ;  ; TF2 * fF2;  Pointer to the mother TF2. ;  ; Double_t fXY;  Value along Y (if projection X) or X (if projection Y) ;  ;  Protected Attributes inherited from TF1; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsC",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:35315,Modifiability,inherit,inherited,35315,"ss_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Int_t fCase;  Projection along X(0), or Y(1) ;  ; TF2 * fF2;  Pointer to the mother TF2. ;  ; Double_t fXY;  Value along Y (if projection X) or X (if projection Y) ;  ;  Protected Attributes inherited from TF1; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsComposition > fComposition;  Pointer to composition (NSUM or CONV) ;  ; std::unique_ptr< TFormula > fFormula;  Pointer to TFormula in case when user define formula. ;  ; std::unique_ptr< TF1FunctorPointer > fFunctor;  ! Functor object to wrap any C++ callable object ;  ; std::vector< Double_t > fGamma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::unique_ptr< TMethodCall > fMethodCall;  ! Pointer to MethodCall in case of interpreted function ;  ; Double_t fMinimum {-1111}",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:37487,Modifiability,inherit,inherited,37487,"egral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 ",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:37569,Modifiability,inherit,inherited,37569,"egral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 ",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:37730,Modifiability,inherit,inherited,37730,"aphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , k",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:37863,Modifiability,inherit,inherited,37863,"rmula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:38057,Modifiability,inherit,inherited,38057,"uble_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited ",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:38266,Modifiability,inherit,inherited,38266,"lues. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TF1;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToLi",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:38907,Modifiability,inherit,inherited,38907," ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TF1;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute the cumulative function at fNpx points between fXmin and fXmax. ;  ; virtual TH1 * DoCreateHistogram (Double_t xmin, Double_t xmax, Bool_t recreate=kFALSE);  Create histogram with bin content equal to function value computed at the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ;  ; void DoInitialize (EAddToList addToGlobList);  Common initialization of the TF1. ; ",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:39072,Modifiability,inherit,inherited,39072,"1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TF1;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute the cumulative function at fNpx points between fXmin and fXmax. ;  ; virtual TH1 * DoCreateHistogram (Double_t xmin, Double_t xmax, Bool_t recreate=kFALSE);  Create histogram with bin content equal to function value computed at the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ;  ; void DoInitialize (EAddToList addToGlobList);  Common initialization of the TF1. ;  ; virtual Double_t GetMinMaxNDim (Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; virtual void GetRange (Double_t *xmin, Double_t *xmax) const;  Return range of a generic N-D func",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:39171,Modifiability,inherit,inherited,39171,"1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TF1;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute the cumulative function at fNpx points between fXmin and fXmax. ;  ; virtual TH1 * DoCreateHistogram (Double_t xmin, Double_t xmax, Bool_t recreate=kFALSE);  Create histogram with bin content equal to function value computed at the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ;  ; void DoInitialize (EAddToList addToGlobList);  Common initialization of the TF1. ;  ; virtual Double_t GetMinMaxNDim (Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; virtual void GetRange (Double_t *xmin, Double_t *xmax) const;  Return range of a generic N-D func",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:40308,Modifiability,inherit,inherited,40308,"1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute the cumulative function at fNpx points between fXmin and fXmax. ;  ; virtual TH1 * DoCreateHistogram (Double_t xmin, Double_t xmax, Bool_t recreate=kFALSE);  Create histogram with bin content equal to function value computed at the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ;  ; void DoInitialize (EAddToList addToGlobList);  Common initialization of the TF1. ;  ; virtual Double_t GetMinMaxNDim (Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; virtual void GetRange (Double_t *xmin, Double_t *xmax) const;  Return range of a generic N-D function. ;  ; void IntegrateForNormalization ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Attributes inherited from TF1; static std::atomic< Bool_t > fgAbsValue;  ; static std::atomic< Bool_t > fgAddToGlobList;  ; static TF1 * fgCurrent = nullptr;  ; static Bool_t fgRejectPoint = kFALSE;  . #include <TF12.h>. Inheritance diagram for TF12:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF12() [1/3]. TF12::TF12 ; (; ). TF12 default constructor. ; Definition at line 39 of file TF12.cxx. ◆ TF12() [2/3]. TF12::TF12 ; (; const char * ; name, . TF2 * ; f2, . Double_t ; xy, . Option_t * ; option = ""x"" . ). TF12 normal constructor. ; Create a TF12 (special TF1) from a projection of a TF2 for a fix value of Y if option=""X"" or X if option=""Y"" This value may be changed at any time via TF12::SetXY(xy) ; Definition at line 54 of file TF12.c",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:40520,Modifiability,inherit,inherited,40520,"rtual TH1 * DoCreateHistogram (Double_t xmin, Double_t xmax, Bool_t recreate=kFALSE);  Create histogram with bin content equal to function value computed at the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ;  ; void DoInitialize (EAddToList addToGlobList);  Common initialization of the TF1. ;  ; virtual Double_t GetMinMaxNDim (Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; virtual void GetRange (Double_t *xmin, Double_t *xmax) const;  Return range of a generic N-D function. ;  ; void IntegrateForNormalization ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Attributes inherited from TF1; static std::atomic< Bool_t > fgAbsValue;  ; static std::atomic< Bool_t > fgAddToGlobList;  ; static TF1 * fgCurrent = nullptr;  ; static Bool_t fgRejectPoint = kFALSE;  . #include <TF12.h>. Inheritance diagram for TF12:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF12() [1/3]. TF12::TF12 ; (; ). TF12 default constructor. ; Definition at line 39 of file TF12.cxx. ◆ TF12() [2/3]. TF12::TF12 ; (; const char * ; name, . TF2 * ; f2, . Double_t ; xy, . Option_t * ; option = ""x"" . ). TF12 normal constructor. ; Create a TF12 (special TF1) from a projection of a TF2 for a fix value of Y if option=""X"" or X if option=""Y"" This value may be changed at any time via TF12::SetXY(xy) ; Definition at line 54 of file TF12.cxx. ◆ TF12() [3/3]. TF12::TF12 ; (; const TF12 & ; f12). Copy constructor. ; Definition at line 89 of file TF12.cxx. ◆ ~TF12(). TF12::~TF12 ; (; ). override . F2 default destructor. ; Definition at line 81 of file TF12.cxx. Member Functi",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:32211,Safety,safe,safe,32211,"+ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag i",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:32537,Safety,avoid,avoid,32537,";  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char ",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:20858,Security,hash,hash,20858," ; virtual Double_t Variance (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const cha",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:8445,Testability,log,logx,8445,"ing Note that when using pre-defined functions (e.g gaus), one needs to use the fit option 'B' to have the fix of the paramter effective. ;  ; Double_t GetChisquare () const;  Return the Chisquare after fitting. See ROOT::Fit::FitResult::Chi2() ;  ; virtual TString GetExpFormula (Option_t *option="""") const;  ; virtual TFormula * GetFormula ();  ; virtual const TFormula * GetFormula () const;  ; virtual TH1 * GetHistogram () const;  Return a pointer to the histogram used to visualise the function Note that this histogram is managed by the function and in same case it is automatically deleted when some TF1 functions are called such as TF1::SetParameters, TF1::SetNpx, TF1::SetRange It is then reccomended either to clone the return object or calling again teh GetHistogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:8675,Testability,log,logx,8675," ;  ; virtual TString GetExpFormula (Option_t *option="""") const;  ; virtual TFormula * GetFormula ();  ; virtual const TFormula * GetFormula () const;  ; virtual TH1 * GetHistogram () const;  Return a pointer to the histogram used to visualise the function Note that this histogram is managed by the function and in same case it is automatically deleted when some TF1 functions are called such as TF1::SetParameters, TF1::SetNpx, TF1::SetRange It is then reccomended either to clone the return object or calling again teh GetHistogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ; virtual Int_t GetNdim () const;  ; virtual Int_t GetNpar () const;  ; virtual Int_t GetNpx () const;  ; virtual Int_t GetNumber () const;  ; virtual Int_t GetNumberFitPoints () const;  ; virtual Int_t GetNumberFreeParameters () const;  Return ",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:8927,Testability,log,logx,8927,"tion Note that this histogram is managed by the function and in same case it is automatically deleted when some TF1 functions are called such as TF1::SetParameters, TF1::SetNpx, TF1::SetRange It is then reccomended either to clone the return object or calling again teh GetHistogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ; virtual Int_t GetNdim () const;  ; virtual Int_t GetNpar () const;  ; virtual Int_t GetNpx () const;  ; virtual Int_t GetNumber () const;  ; virtual Int_t GetNumberFitPoints () const;  ; virtual Int_t GetNumberFreeParameters () const;  Return the number of free parameters. ;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; virtual Double_t GetParameter (const TString &name) const;  ; virtual Double_t GetParameter (Int_t ipar) const;  ; vir",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:9186,Testability,log,logx,9186,"istogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ; virtual Int_t GetNdim () const;  ; virtual Int_t GetNpar () const;  ; virtual Int_t GetNpx () const;  ; virtual Int_t GetNumber () const;  ; virtual Int_t GetNumberFitPoints () const;  ; virtual Int_t GetNumberFreeParameters () const;  Return the number of free parameters. ;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; virtual Double_t GetParameter (const TString &name) const;  ; virtual Double_t GetParameter (Int_t ipar) const;  ; virtual Double_t * GetParameters () const;  ; virtual void GetParameters (Double_t *params);  ; TObject * GetParent () const;  ; virtual Double_t GetParError (Int_t ipar) const;  Return value of parameter number ipar. ;  ; virtual const Double_t * GetParErrors () const;  ; vi",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:11653,Testability,log,logx,11653,"GetRandom (Double_t xmin, Double_t xmax, TRandom *rng=nullptr, Option_t *opt=nullptr);  Return a random number following this function shape in [xmin,xmax]. ;  ; virtual Double_t GetRandom (TRandom *rng=nullptr, Option_t *opt=nullptr);  Return a random number following this function shape. ;  ; virtual void GetRange (Double_t &xmin, Double_t &xmax) const;  Return range of a 1-D function. ;  ; virtual void GetRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const;  Return range of a 2-D function. ;  ; virtual void GetRange (Double_t &xmin, Double_t &ymin, Double_t &zmin, Double_t &xmax, Double_t &ymax, Double_t &zmax) const;  Return range of function. ;  ; virtual Double_t GetSave (const Double_t *x);  Get value corresponding to X in array of fSave values. ;  ; virtual Double_t GetVariable (const TString &name);  ; virtual Double_t GetX (Double_t y, Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the function value fy for (xmin<x<xmax). ;  ; TAxis * GetXaxis () const;  Get x axis of the function. ;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; TAxis * GetYaxis () const;  Get y axis of the function. ;  ; TAxis * GetZaxis () const;  Get z axis of the function. (In case this object is a TF2 or TF3) ;  ; virtual void GradientPar (const Double_t *x, Double_t *grad, Double_t eps=0.01);  Compute the gradient wrt parameters If the TF1 object is based on a formula expression (TFormula) and TFormula::GenerateGradientPar() has been successfully called automatic differentiation using CLAD is used instead of the default numerical differentiation. ;  ; template<class T > ; void GradientPar (const T *x, T *grad, Double_t eps=0.01);  ; virtual Double_t GradientPar (Int_t ipar, const Double_t *x, Double_t eps=0.01);  Compute the gradient (derivative) wrt a parameter ipar. ;  ; template<class T > ; T GradientPar (Int_t ipar, const T *x, Do",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF12.html:33250,Testability,test,tested,33250," interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass *",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
https://root.cern/doc/master/classTF1AbsComposition.html:2561,Availability,error,error,2561,"nst char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:2650,Availability,error,error,2650,"al void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:2805,Availability,error,error,2805,"nt_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:3102,Availability,error,error,3102,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:7666,Availability,error,error,7666," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:2567,Integrability,message,message,2567,"nst char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:3108,Integrability,message,message,3108,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:4310,Integrability,message,message,4310,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:7672,Integrability,message,message,7672," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:8045,Integrability,message,message,8045," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Addit",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:867,Modifiability,inherit,inherited,867,". ROOT: TF1AbsComposition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TF1AbsComposition Class Referenceabstract. . Definition at line 16 of file TF1AbsComposition.h. Public Member Functions;  ~TF1AbsComposition () override;  ; void Copy (TObject &obj) const override=0;  Copy this to obj. ;  ; TClass * IsA () const override;  ; virtual double operator() (const Double_t *x, const Double_t *p)=0;  ; virtual void SetParameters (const Double_t *params)=0;  ; virtual void SetRange (Double_t a, Double_t b)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, In",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:2197,Modifiability,inherit,inheritance,2197,"ppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:4408,Modifiability,inherit,inherits,4408,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:4525,Modifiability,inherit,inherits,4525,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:8546,Modifiability,inherit,inherited,8546,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , k",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:9076,Modifiability,inherit,inherited,9076,";  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TF1AbsComposition.h>. Inheritance diagram for TF1AbsComposition:. This browser is not able to show SVG: try Firefox, Chrome, Safar",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:9717,Modifiability,inherit,inherited,9717,"tatus of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TF1AbsComposition.h>. Inheritance diagram for TF1AbsComposition:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TF1AbsComposition(). TF1AbsComposition::~TF1AbsComposition ; (; ). inlineoverride . Definition at line 19 of file TF1AbsComposition.h. Member Function Documentation. ◆ Class(). static TClass * TF1AbsComposition::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TF1AbsComposition::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TF1AbsComposition::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 28 of file TF1AbsComposition.h. ◆ Copy(). void TF1AbsComposition::Copy ; ",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:9816,Modifiability,inherit,inherited,9816,"tatus of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TF1AbsComposition.h>. Inheritance diagram for TF1AbsComposition:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TF1AbsComposition(). TF1AbsComposition::~TF1AbsComposition ; (; ). inlineoverride . Definition at line 19 of file TF1AbsComposition.h. Member Function Documentation. ◆ Class(). static TClass * TF1AbsComposition::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TF1AbsComposition::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TF1AbsComposition::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 28 of file TF1AbsComposition.h. ◆ Copy(). void TF1AbsComposition::Copy ; ",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1AbsComposition.html:4039,Security,hash,hash,4039," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
https://root.cern/doc/master/classTF1Convolution.html:565,Availability,avail,available,565,". ROOT: TF1Convolution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TF1Convolution Class ReferenceHistogram Library » Function classes. ; Class wrapping convolution of two functions. ; Class wrapping convolution of two functions: evaluation of \(\int f(x)g(x-t)dx\); The convolution is performed by default using FFTW if it is available . One can pass optionally the range of the convolution (by default the first function range is used). Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side) a spill over will occur on the other side (e.g right side). If no function range is given by default the function1 range + 10% is used One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used. ; Definition at line 20 of file TF1Convolution.h. Public Member Functions;  TF1Convolution ();  constructor without arguments. ;  ;  TF1Convolution (const TF1Convolution &conv);  Copy constructor (necessary to hold unique_ptr as member variable). ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Bool_t useFFT=true);  constructor from the two function pointer and a flag is using FFT. ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Double_t xmin, Double_t xmax, Bool_t useFFT=true);  Constructor from the two function pointer and the convolution range. ;  ;  TF1Convolution (TString formula, Double_t xmin=1., Double_t xmax=0., Bool_t useFFT=true);  Constructor from a formula expression as f1 * f2 where f1 and f2 are two functions known to ROOT. ;  ;  TF1Convolution (TString formula1, TString formula2, Double_t xmin=",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:5507,Availability,error,error,5507,"nst char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:5596,Availability,error,error,5596,"al void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:5751,Availability,error,error,5751,"nt_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:6048,Availability,error,error,6048,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:10612,Availability,error,error,10612," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Double_t SetDefaultExtraRange (Double_t percentage);  Set the default extra range fraction used when doing a FFT convolution. ;  ;  Static Pu",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:382,Integrability,wrap,wrapping,382,". ROOT: TF1Convolution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TF1Convolution Class ReferenceHistogram Library » Function classes. ; Class wrapping convolution of two functions. ; Class wrapping convolution of two functions: evaluation of \(\int f(x)g(x-t)dx\); The convolution is performed by default using FFTW if it is available . One can pass optionally the range of the convolution (by default the first function range is used). Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side) a spill over will occur on the other side (e.g right side). If no function range is given by default the function1 range + 10% is used One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used. ; Definition at line 20 of file TF1Convolution.h. Public Member Functions;  TF1Convolution ();  constructor without arguments. ;  ;  TF1Convolution (const TF1Convolution &conv);  Copy constructor (necessary to hold unique_ptr as member variable). ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Bool_t useFFT=true);  constructor from the two function pointer and a flag is using FFT. ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Double_t xmin, Double_t xmax, Bool_t useFFT=true);  Constructor from the two function pointer and the convolution range. ;  ;  TF1Convolution (TString formula, Double_t xmin=1., Double_t xmax=0., Bool_t useFFT=true);  Constructor from a formula expression as f1 * f2 where f1 and f2 are two functions known to ROOT. ;  ;  TF1Convolution (TString formula1, TString formula2, Double_t xmin=",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:429,Integrability,wrap,wrapping,429,". ROOT: TF1Convolution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TF1Convolution Class ReferenceHistogram Library » Function classes. ; Class wrapping convolution of two functions. ; Class wrapping convolution of two functions: evaluation of \(\int f(x)g(x-t)dx\); The convolution is performed by default using FFTW if it is available . One can pass optionally the range of the convolution (by default the first function range is used). Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side) a spill over will occur on the other side (e.g right side). If no function range is given by default the function1 range + 10% is used One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used. ; Definition at line 20 of file TF1Convolution.h. Public Member Functions;  TF1Convolution ();  constructor without arguments. ;  ;  TF1Convolution (const TF1Convolution &conv);  Copy constructor (necessary to hold unique_ptr as member variable). ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Bool_t useFFT=true);  constructor from the two function pointer and a flag is using FFT. ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Double_t xmin, Double_t xmax, Bool_t useFFT=true);  Constructor from the two function pointer and the convolution range. ;  ;  TF1Convolution (TString formula, Double_t xmin=1., Double_t xmax=0., Bool_t useFFT=true);  Constructor from a formula expression as f1 * f2 where f1 and f2 are two functions known to ROOT. ;  ;  TF1Convolution (TString formula1, TString formula2, Double_t xmin=",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:5513,Integrability,message,message,5513,"nst char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:6054,Integrability,message,message,6054,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:7256,Integrability,message,message,7256,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:10618,Integrability,message,message,10618," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Double_t SetDefaultExtraRange (Double_t percentage);  Set the default extra range fraction used when doing a FFT convolution. ;  ;  Static Pu",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:10991,Integrability,message,message,10991," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Double_t SetDefaultExtraRange (Double_t percentage);  Set the default extra range fraction used when doing a FFT convolution. ;  ;  Static Public Member Functions inherited from TF1AbsComposition; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:1405,Modifiability,variab,variable,1405," Function classes. ; Class wrapping convolution of two functions. ; Class wrapping convolution of two functions: evaluation of \(\int f(x)g(x-t)dx\); The convolution is performed by default using FFTW if it is available . One can pass optionally the range of the convolution (by default the first function range is used). Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side) a spill over will occur on the other side (e.g right side). If no function range is given by default the function1 range + 10% is used One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used. ; Definition at line 20 of file TF1Convolution.h. Public Member Functions;  TF1Convolution ();  constructor without arguments. ;  ;  TF1Convolution (const TF1Convolution &conv);  Copy constructor (necessary to hold unique_ptr as member variable). ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Bool_t useFFT=true);  constructor from the two function pointer and a flag is using FFT. ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Double_t xmin, Double_t xmax, Bool_t useFFT=true);  Constructor from the two function pointer and the convolution range. ;  ;  TF1Convolution (TString formula, Double_t xmin=1., Double_t xmax=0., Bool_t useFFT=true);  Constructor from a formula expression as f1 * f2 where f1 and f2 are two functions known to ROOT. ;  ;  TF1Convolution (TString formula1, TString formula2, Double_t xmin=1., Double_t xmax=0., Bool_t useFFT=true);  Constructor from 2 function names where f1 and f2 are two functions known to ROOT. ;  ;  ~TF1Convolution () override;  ; void Copy (TObject &obj) const override;  Copy this to obj. ;  ; Int_t GetNpar () const;  ; const char * GetParName (Int_t ipar) const;  ; void GetRange (Double_t &a, Double_t &b) const;  G",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:3653,Modifiability,inherit,inherited,3653,"e);  Set the fraction of extra range used when doing an FFT convolution. ;  ; void SetNofPointsFFT (Int_t n);  Set the number of points used for the FFT convolution. ;  ; void SetNumConv (Bool_t flag=true);  ; void SetParameters (const Double_t *params) override;  Set the vector of parameters p for the convolution function g(x,p) = f1 * f2. ;  ; void SetParameters (Double_t p0, Double_t p1, Double_t p2=0., Double_t p3=0., Double_t p4=0., Double_t p5=0., Double_t p6=0., Double_t p7=0.);  Set the parameter values for the convolution function. ;  ; void SetRange (Double_t a, Double_t b) override;  Set the actual range used for the convolution. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update () override;  Update the two component functions of the convolution. ;  ;  Public Member Functions inherited from TF1AbsComposition;  ~TF1AbsComposition () override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ; ",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:3813,Modifiability,inherit,inherited,3813,"e);  Set the fraction of extra range used when doing an FFT convolution. ;  ; void SetNofPointsFFT (Int_t n);  Set the number of points used for the FFT convolution. ;  ; void SetNumConv (Bool_t flag=true);  ; void SetParameters (const Double_t *params) override;  Set the vector of parameters p for the convolution function g(x,p) = f1 * f2. ;  ; void SetParameters (Double_t p0, Double_t p1, Double_t p2=0., Double_t p3=0., Double_t p4=0., Double_t p5=0., Double_t p6=0., Double_t p7=0.);  Set the parameter values for the convolution function. ;  ; void SetRange (Double_t a, Double_t b) override;  Set the actual range used for the convolution. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update () override;  Update the two component functions of the convolution. ;  ;  Public Member Functions inherited from TF1AbsComposition;  ~TF1AbsComposition () override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ; ",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:5143,Modifiability,inherit,inheritance,5143,"ppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:7354,Modifiability,inherit,inherits,7354,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:7471,Modifiability,inherit,inherits,7471,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:11630,Modifiability,inherit,inherited,11630,"UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Double_t SetDefaultExtraRange (Double_t percentage);  Set the default extra range fraction used when doing a FFT convolution. ;  ;  Static Public Member Functions inherited from TF1AbsComposition; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; Double_t EvalFFTConv (Double_t t);  Perform FFT convolution. ;  ; Double_t EvalNumConv (Double_t t);  Perform numerical convolution. ;  ; void InitializeDataMembers (TF1 *function1, TF1 *function2, Bool_t useFFT);  Internal function to initialize data members. ;  ; void MakeFFTConv ();  Perform the FFT of the two functions. ;  . Private Attributes; Int_t fCstIndex;  Index of the constant parameter f the first function. ;  ; Bool_t fFlagFFT;  Choose FFT or numerical convoluti",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:11851,Modifiability,inherit,inherited,11851,"UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Double_t SetDefaultExtraRange (Double_t percentage);  Set the default extra range fraction used when doing a FFT convolution. ;  ;  Static Public Member Functions inherited from TF1AbsComposition; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; Double_t EvalFFTConv (Double_t t);  Perform FFT convolution. ;  ; Double_t EvalNumConv (Double_t t);  Perform numerical convolution. ;  ; void InitializeDataMembers (TF1 *function1, TF1 *function2, Bool_t useFFT);  Internal function to initialize data members. ;  ; void MakeFFTConv ();  Perform the FFT of the two functions. ;  . Private Attributes; Int_t fCstIndex;  Index of the constant parameter f the first function. ;  ; Bool_t fFlagFFT;  Choose FFT or numerical convoluti",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:13705,Modifiability,inherit,inherited,13705,"he first function. ;  ; Bool_t fFlagFFT;  Choose FFT or numerical convolution. ;  ; Bool_t fFlagGraph = false;  ! Tells if the graph is already done or not ;  ; std::unique_ptr< TF1 > fFunction1;  First function to be convolved. ;  ; std::unique_ptr< TF1 > fFunction2;  Second function to be convolved. ;  ; std::unique_ptr< TGraph > fGraphConv;  ! Graph of the convolution ;  ; Int_t fNofParams1;  ; Int_t fNofParams2;  ; Int_t fNofPoints;  Number of point for FFT array. ;  ; std::vector< Double_t > fParams1;  ; std::vector< Double_t > fParams2;  ; std::vector< TString > fParNames;  Parameters' names. ;  ; Double_t fXmax;  Maximal bound of the range of the convolution. ;  ; Double_t fXmin;  Minimal bound of the range of the convolution. ;  . Static Private Attributes; static Double_t fgExtraRangeFraction = 0.1;  ! Additional default fraction of the range used for FFT convolution ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TF1Convolution.h>. Inheritance diagram for TF1Convolution:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or ",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:14346,Modifiability,inherit,inherited,14346,"n;  Minimal bound of the range of the convolution. ;  . Static Private Attributes; static Double_t fgExtraRangeFraction = 0.1;  ! Additional default fraction of the range used for FFT convolution ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TF1Convolution.h>. Inheritance diagram for TF1Convolution:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF1Convolution() [1/6]. TF1Convolution::TF1Convolution ; (; ). constructor without arguments. ; Definition at line 137 of file TF1Convolution.cxx. ◆ TF1Convolution() [2/6]. TF1Convolution::TF1Convolution ; (; TF1 * ; function1, . TF1 * ; function2, . Bool_t ; useFFT = true . ). constructor from the two function pointer and a flag is using FFT. ; Definition at line 145 of file TF1Convolution.cxx. ◆ TF1Convolution() [3/6]. TF1Convolution::TF1Convolution ; (; TF1 * ; function1, . TF1 * ; function2, . Double_t ; xmin, . Double_t ; xmax, . Bool_t ; useFFT = true . ). Constructor from the two function pointer and the convol",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:14445,Modifiability,inherit,inherited,14445,"n;  Minimal bound of the range of the convolution. ;  . Static Private Attributes; static Double_t fgExtraRangeFraction = 0.1;  ! Additional default fraction of the range used for FFT convolution ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TF1Convolution.h>. Inheritance diagram for TF1Convolution:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF1Convolution() [1/6]. TF1Convolution::TF1Convolution ; (; ). constructor without arguments. ; Definition at line 137 of file TF1Convolution.cxx. ◆ TF1Convolution() [2/6]. TF1Convolution::TF1Convolution ; (; TF1 * ; function1, . TF1 * ; function2, . Bool_t ; useFFT = true . ). constructor from the two function pointer and a flag is using FFT. ; Definition at line 145 of file TF1Convolution.cxx. ◆ TF1Convolution() [3/6]. TF1Convolution::TF1Convolution ; (; TF1 * ; function1, . TF1 * ; function2, . Double_t ; xmin, . Double_t ; xmax, . Bool_t ; useFFT = true . ). Constructor from the two function pointer and the convol",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:16390,Modifiability,variab,variable,16390," ; xmax, . Bool_t ; useFFT = true . ). Constructor from the two function pointer and the convolution range. ; Definition at line 153 of file TF1Convolution.cxx. ◆ TF1Convolution() [4/6]. TF1Convolution::TF1Convolution ; (; TString ; formula, . Double_t ; xmin = 1., . Double_t ; xmax = 0., . Bool_t ; useFFT = true . ). Constructor from a formula expression as f1 * f2 where f1 and f2 are two functions known to ROOT. ; Definition at line 169 of file TF1Convolution.cxx. ◆ TF1Convolution() [5/6]. TF1Convolution::TF1Convolution ; (; TString ; formula1, . TString ; formula2, . Double_t ; xmin = 1., . Double_t ; xmax = 0., . Bool_t ; useFFT = true . ). Constructor from 2 function names where f1 and f2 are two functions known to ROOT. ; If the function names are not known to ROOT, tries to interpret them as TFormula. ; Definition at line 209 of file TF1Convolution.cxx. ◆ TF1Convolution() [6/6]. TF1Convolution::TF1Convolution ; (; const TF1Convolution & ; conv). Copy constructor (necessary to hold unique_ptr as member variable). ; Definition at line 241 of file TF1Convolution.cxx. ◆ ~TF1Convolution(). TF1Convolution::~TF1Convolution ; (; ). inlineoverride . Definition at line 56 of file TF1Convolution.h. Member Function Documentation. ◆ Class(). static TClass * TF1Convolution::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TF1Convolution::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TF1Convolution::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 80 of file TF1Convolution.h. ◆ Copy(). void TF1Convolution::Copy ; (; TObject & ; object); const. overridevirtual . Copy this to obj. ; Implements TF1AbsComposition.; Definition at line 504 of file TF1Convolution.cxx. ◆ DeclFileName(). static const char * TF1Convolution::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:21363,Modifiability,extend,extended,21363,"file TF1Convolution.cxx. ◆ SetNumConv(). void TF1Convolution::SetNumConv ; (; Bool_t ; flag = true). inline . Definition at line 64 of file TF1Convolution.h. ◆ SetParameters() [1/2]. void TF1Convolution::SetParameters ; (; const Double_t * ; params). overridevirtual . Set the vector of parameters p for the convolution function g(x,p) = f1 * f2. ; Implements TF1AbsComposition.; Definition at line 393 of file TF1Convolution.cxx. ◆ SetParameters() [2/2]. void TF1Convolution::SetParameters ; (; Double_t ; p0, . Double_t ; p1, . Double_t ; p2 = 0., . Double_t ; p3 = 0., . Double_t ; p4 = 0., . Double_t ; p5 = 0., . Double_t ; p6 = 0., . Double_t ; p7 = 0. . ). Set the parameter values for the convolution function. ; Definition at line 425 of file TF1Convolution.cxx. ◆ SetRange(). void TF1Convolution::SetRange ; (; Double_t ; a, . Double_t ; b . ). overridevirtual . Set the actual range used for the convolution. ; In case a or b are -inf or +inf and FFT convolution is used, then the range of the first function will be used and extended by the default extra range fraction. ; Implements TF1AbsComposition.; Definition at line 452 of file TF1Convolution.cxx. ◆ Streamer(). void TF1Convolution::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TF1AbsComposition. ◆ StreamerNVirtual(). void TF1Convolution::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file TF1Convolution.h. ◆ Update(). void TF1Convolution::Update ; (; ). overridevirtual . Update the two component functions of the convolution. ; Implements TF1AbsComposition.; Definition at line 496 of file TF1Convolution.cxx. Member Data Documentation. ◆ fCstIndex. Int_t TF1Convolution::fCstIndex. private . Index of the constant parameter f the first function. ; Definition at line 34 of file TF1Convolution.h. ◆ fFlagFFT. Bool_t TF1Convolution::fFlagFFT. private . Choose FFT or numerical convolution. ; Definition at line 36 o",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:524,Performance,perform,performed,524,". ROOT: TF1Convolution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TF1Convolution Class ReferenceHistogram Library » Function classes. ; Class wrapping convolution of two functions. ; Class wrapping convolution of two functions: evaluation of \(\int f(x)g(x-t)dx\); The convolution is performed by default using FFTW if it is available . One can pass optionally the range of the convolution (by default the first function range is used). Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side) a spill over will occur on the other side (e.g right side). If no function range is given by default the function1 range + 10% is used One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used. ; Definition at line 20 of file TF1Convolution.h. Public Member Functions;  TF1Convolution ();  constructor without arguments. ;  ;  TF1Convolution (const TF1Convolution &conv);  Copy constructor (necessary to hold unique_ptr as member variable). ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Bool_t useFFT=true);  constructor from the two function pointer and a flag is using FFT. ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Double_t xmin, Double_t xmax, Bool_t useFFT=true);  Constructor from the two function pointer and the convolution range. ;  ;  TF1Convolution (TString formula, Double_t xmin=1., Double_t xmax=0., Bool_t useFFT=true);  Constructor from a formula expression as f1 * f2 where f1 and f2 are two functions known to ROOT. ;  ;  TF1Convolution (TString formula1, TString formula2, Double_t xmin=",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:19996,Safety,avoid,avoid,19996,"e 259 of file TF1Convolution.cxx. ◆ operator()(). Double_t TF1Convolution::operator() ; (; const Double_t * ; x, . const Double_t * ; p . ). overridevirtual . Used in TF1 when doing the fit, will be evaluated at each point. ; Implements TF1AbsComposition.; Definition at line 367 of file TF1Convolution.cxx. ◆ operator=(). TF1Convolution & TF1Convolution::operator= ; (; const TF1Convolution & ; rhs). Operator =. ; Definition at line 249 of file TF1Convolution.cxx. ◆ SetDefaultExtraRange(). Double_t TF1Convolution::SetDefaultExtraRange ; (; Double_t ; fraction). static . Set the default extra range fraction used when doing a FFT convolution. ; By default the value is 0.1 (10%). The function return the previous default defined value. ; Definition at line 477 of file TF1Convolution.cxx. ◆ SetExtraRange(). void TF1Convolution::SetExtraRange ; (; Double_t ; percentage). Set the fraction of extra range used when doing an FFT convolution. ; The extra range is often needed to avoid mirroring effect of the resulting convolution function at the borders. By default an extra range of 0.1 is used. ; Definition at line 438 of file TF1Convolution.cxx. ◆ SetNofPointsFFT(). void TF1Convolution::SetNofPointsFFT ; (; Int_t ; n). Set the number of points used for the FFT convolution. ; Definition at line 382 of file TF1Convolution.cxx. ◆ SetNumConv(). void TF1Convolution::SetNumConv ; (; Bool_t ; flag = true). inline . Definition at line 64 of file TF1Convolution.h. ◆ SetParameters() [1/2]. void TF1Convolution::SetParameters ; (; const Double_t * ; params). overridevirtual . Set the vector of parameters p for the convolution function g(x,p) = f1 * f2. ; Implements TF1AbsComposition.; Definition at line 393 of file TF1Convolution.cxx. ◆ SetParameters() [2/2]. void TF1Convolution::SetParameters ; (; Double_t ; p0, . Double_t ; p1, . Double_t ; p2 = 0., . Double_t ; p3 = 0., . Double_t ; p4 = 0., . Double_t ; p5 = 0., . Double_t ; p6 = 0., . Double_t ; p7 = 0. . ). Set the parameter values ",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1Convolution.html:6985,Security,hash,hash,6985," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
https://root.cern/doc/master/classTF1NormSum.html:4525,Availability,error,error,4525,"nst char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:4614,Availability,error,error,4614,"al void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:4769,Availability,error,error,4769,"nt_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:5066,Availability,error,error,5066,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:9630,Availability,error,error,9630," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1AbsComposition; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexp",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:4531,Integrability,message,message,4531,"nst char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:5072,Integrability,message,message,5072,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:6274,Integrability,message,message,6274,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:9636,Integrability,message,message,9636," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1AbsComposition; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexp",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:10009,Integrability,message,message,10009," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1AbsComposition; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObject",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:684,Modifiability,variab,variable,684,". ROOT: TF1NormSum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TF1NormSum Class ReferenceHistogram Library » Function classes. ; Class adding two functions: c1*f1+c2*f2. ; Definition at line 19 of file TF1NormSum.h. Public Member Functions;  TF1NormSum ();  ;  TF1NormSum (const std::vector< TF1 * > &functions, const std::vector< Double_t > &coeffs, Double_t scale=1.);  ;  TF1NormSum (const TF1NormSum &nsum);  Copy constructor (necessary to hold unique_ptr as member variable) ;  ;  TF1NormSum (const TString &formula, Double_t xmin, Double_t xmax);  TF1NormSum constructor taking any addition of formulas with coefficient or not. ;  ;  TF1NormSum (TF1 *function1, TF1 *function2, Double_t coeff1=1., Double_t coeff2=1., Double_t scale=1.);  TF1NormSum constructor taking 2 functions, and 2 coefficients (if not equal to 1) ;  ;  TF1NormSum (TF1 *function1, TF1 *function2, TF1 *function3, Double_t coeff1=1., Double_t coeff2=1., Double_t coeff3=1., Double_t scale=1.);  TF1NormSum constructor taking 3 functions, and 3 coefficients (if not equal to 1) ;  ;  ~TF1NormSum () override;  ; void Copy (TObject &obj) const override;  Copy this to obj. ;  ; Int_t GetNpar () const;  Return the number of (non constant) parameters including the coefficients: for 2 functions: c1,c2,p0,p1,p2,p3... ;  ; std::vector< double > GetParameters () const;  Return array of parameters. ;  ; const char * GetParName (Int_t ipar) const;  ; void GetRange (Double_t &a, Double_t &b) const;  ; Double_t GetScale () const;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; TClass * IsA () const override;  ; double operator() (const Double_t *x, const Double_t *p) override;  Overload the parenthesis to add the functions. ;  ; TF1NormSum & operator= (const TF1NormSum &rhs);  Operator =. ;  ;",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:2671,Modifiability,inherit,inherited,2671,"min () const;  ; TClass * IsA () const override;  ; double operator() (const Double_t *x, const Double_t *p) override;  Overload the parenthesis to add the functions. ;  ; TF1NormSum & operator= (const TF1NormSum &rhs);  Operator =. ;  ; void SetParameters (const Double_t *params) override;  Initialize array of all parameters. ;  ; void SetParameters (Double_t p0, Double_t p1, Double_t p2=0., Double_t p3=0., Double_t p4=0., Double_t p5=0., Double_t p6=0., Double_t p7=0., Double_t p8=0., Double_t p9=0., Double_t p10=0.);  Initialize array of all parameters. ;  ; void SetRange (Double_t a, Double_t b) override;  ; void SetScale (Double_t scale);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update () override;  Update the component functions of the normalized sum. ;  ;  Public Member Functions inherited from TF1AbsComposition;  ~TF1AbsComposition () override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ; ",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:2831,Modifiability,inherit,inherited,2831,"min () const;  ; TClass * IsA () const override;  ; double operator() (const Double_t *x, const Double_t *p) override;  Overload the parenthesis to add the functions. ;  ; TF1NormSum & operator= (const TF1NormSum &rhs);  Operator =. ;  ; void SetParameters (const Double_t *params) override;  Initialize array of all parameters. ;  ; void SetParameters (Double_t p0, Double_t p1, Double_t p2=0., Double_t p3=0., Double_t p4=0., Double_t p5=0., Double_t p6=0., Double_t p7=0., Double_t p8=0., Double_t p9=0., Double_t p10=0.);  Initialize array of all parameters. ;  ; void SetRange (Double_t a, Double_t b) override;  ; void SetScale (Double_t scale);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update () override;  Update the component functions of the normalized sum. ;  ;  Public Member Functions inherited from TF1AbsComposition;  ~TF1AbsComposition () override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ; ",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:4161,Modifiability,inherit,inheritance,4161,"ppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:6372,Modifiability,inherit,inherits,6372,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:6489,Modifiability,inherit,inherits,6489,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:10510,Modifiability,inherit,inherited,10510,"rror message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1AbsComposition; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void InitializeDataMembers (const std::vector< TF1 * > &functions, const std::vector< Double_t > &coeffs, Double_t scale);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< Double_t > fCo",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:10731,Modifiability,inherit,inherited,10731,"rror message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1AbsComposition; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void InitializeDataMembers (const std::vector< TF1 * > &functions, const std::vector< Double_t > &coeffs, Double_t scale);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< Double_t > fCo",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:11399,Modifiability,inherit,inherited,11399,");  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1AbsComposition; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void InitializeDataMembers (const std::vector< TF1 * > &functions, const std::vector< Double_t > &coeffs, Double_t scale);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< Double_t > fCoeffs;  Vector of size afNOfFunctions containing coefficients in front of each function. ;  ; std::vector< Int_t > fCstIndexes;  Vector with size of fNOfFunctions containing the index of the constant parameter/ function (the removed ones) ;  ; std::vector< std::unique_ptr< TF1 > > fFunctions;  Vector of size fNOfFunctions containing TF1 functions. ;  ; unsigned int fNOfFunctions;  Number of functions to add. ;  ; std::vector< TString > fParNames;  Parameter names. ;  ; Double_t fScale;  Fixed Scale parameter to normalize function (e.g. bin width) ;  ; Double_t fXmax;  Maximal bound of range of NormSum. ;  ; Double_t fXmin;  Minimal bound of range of NormSum. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIs",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:12346,Modifiability,inherit,inherited,12346," from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< Double_t > fCoeffs;  Vector of size afNOfFunctions containing coefficients in front of each function. ;  ; std::vector< Int_t > fCstIndexes;  Vector with size of fNOfFunctions containing the index of the constant parameter/ function (the removed ones) ;  ; std::vector< std::unique_ptr< TF1 > > fFunctions;  Vector of size fNOfFunctions containing TF1 functions. ;  ; unsigned int fNOfFunctions;  Number of functions to add. ;  ; std::vector< TString > fParNames;  Parameter names. ;  ; Double_t fScale;  Fixed Scale parameter to normalize function (e.g. bin width) ;  ; Double_t fXmax;  Maximal bound of range of NormSum. ;  ; Double_t fXmin;  Minimal bound of range of NormSum. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TF1NormSum.h>. Inheritance diagram for TF1NormSum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF1NormSum() [1/6]. TF1NormSum::TF1NormSum ; (; ). Definition at line 129 of file TF1NormSum.cxx. ◆ TF1NormSum() [2/6]. TF1NormSum::TF1NormSum ; (; con",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:12987,Modifiability,inherit,inherited,12987,"s;  Number of functions to add. ;  ; std::vector< TString > fParNames;  Parameter names. ;  ; Double_t fScale;  Fixed Scale parameter to normalize function (e.g. bin width) ;  ; Double_t fXmax;  Maximal bound of range of NormSum. ;  ; Double_t fXmin;  Minimal bound of range of NormSum. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TF1NormSum.h>. Inheritance diagram for TF1NormSum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF1NormSum() [1/6]. TF1NormSum::TF1NormSum ; (; ). Definition at line 129 of file TF1NormSum.cxx. ◆ TF1NormSum() [2/6]. TF1NormSum::TF1NormSum ; (; const std::vector< TF1 * > & ; functions, . const std::vector< Double_t > & ; coeffs, . Double_t ; scale = 1. . ). Definition at line 142 of file TF1NormSum.cxx. ◆ TF1NormSum() [3/6]. TF1NormSum::TF1NormSum ; (; TF1 * ; function1, . TF1 * ; function2, . Double_t ; coeff1 = 1., . Double_t ; coeff2 = 1., . Double_t ; scale = 1. . ). TF1NormSum constructor taking 2 functions, and 2 coefficients (if not equal to 1) ; Definition at line 150 of file TF1NormSum.cxx. ◆ TF1NormSum() [4/6]. TF1NormSum::TF1NormSum ; (; TF1 * ; function1, . TF1 * ; function2, . TF1 * ; function3, . Double_t ; coeff1 = 1., . D",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:14714,Modifiability,variab,variable,14714,"Double_t ; scale = 1. . ). TF1NormSum constructor taking 2 functions, and 2 coefficients (if not equal to 1) ; Definition at line 150 of file TF1NormSum.cxx. ◆ TF1NormSum() [4/6]. TF1NormSum::TF1NormSum ; (; TF1 * ; function1, . TF1 * ; function2, . TF1 * ; function3, . Double_t ; coeff1 = 1., . Double_t ; coeff2 = 1., . Double_t ; coeff3 = 1., . Double_t ; scale = 1. . ). TF1NormSum constructor taking 3 functions, and 3 coefficients (if not equal to 1) ; Definition at line 164 of file TF1NormSum.cxx. ◆ TF1NormSum() [5/6]. TF1NormSum::TF1NormSum ; (; const TString & ; formula, . Double_t ; xmin, . Double_t ; xmax . ). TF1NormSum constructor taking any addition of formulas with coefficient or not. . example 1 : 2.*expo + gauss + 0.5* gauss; example 2 : expo + 0.3*f1 if f1 is defined in the list of functions . Definition at line 181 of file TF1NormSum.cxx. ◆ TF1NormSum() [6/6]. TF1NormSum::TF1NormSum ; (; const TF1NormSum & ; nsum). Copy constructor (necessary to hold unique_ptr as member variable) ; Definition at line 254 of file TF1NormSum.cxx. ◆ ~TF1NormSum(). TF1NormSum::~TF1NormSum ; (; ). inlineoverride . Definition at line 47 of file TF1NormSum.h. Member Function Documentation. ◆ Class(). static TClass * TF1NormSum::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TF1NormSum::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TF1NormSum::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TF1NormSum.h. ◆ Copy(). void TF1NormSum::Copy ; (; TObject & ; object); const. overridevirtual . Copy this to obj. ; Implements TF1AbsComposition.; Definition at line 409 of file TF1NormSum.cxx. ◆ DeclFileName(). static const char * TF1NormSum::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TF1NormSum.h. ◆ GetNpar(). Int_t TF1NormSum::GetNpar ; (; )",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1NormSum.html:6003,Security,hash,hash,6003," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
https://root.cern/doc/master/classTF1Parameters.html:813,Energy Efficiency,efficient,efficient,813,". ROOT: TF1Parameters Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TF1Parameters Class Reference. ; TF1 Parameters class. ; Definition at line 53 of file TF1.h. Public Member Functions;  TF1Parameters ();  ;  TF1Parameters (const TF1Parameters &rhs);  ;  TF1Parameters (Int_t npar);  ; virtual ~TF1Parameters ();  ; Double_t GetParameter (const char *name) const;  ; Double_t GetParameter (Int_t iparam) const;  ; const Double_t * GetParameters () const;  ; const char * GetParName (Int_t iparam) const;  ; Int_t GetParNumber (const char *name) const;  Returns the parameter number given a name not very efficient but list of parameters is typically small could use a map if needed. ;  ; virtual TClass * IsA () const;  ; TF1Parameters & operator= (const TF1Parameters &rhs);  ; const std::vector< double > & ParamsVec () const;  ; void SetParameter (const char *name, Double_t value);  ; void SetParameter (Int_t iparam, Double_t value);  ; void SetParameters (const Double_t *params);  ; template<typename... Args> ; void SetParameters (Double_t arg1, Args &&... args);  Set parameter values. ;  ; void SetParName (Int_t iparam, const char *name);  ; template<typename... Args> ; void SetParNames (Args &&... args);  Set parameter names. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; bool CheckIndex (Int_t i) const;  . Private Attributes; std::vector< Double_t > fParameters;  ; std::vector< std::string > fParNames;  . #include <TF1.h>; Constructor & Destructor Documentation. ◆ TF1Parameters() [1/3]. TF1Paramete",MatchSource.WIKI,doc/master/classTF1Parameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Parameters.html
https://root.cern/doc/master/classTF1Parameters.html:3845,Energy Efficiency,efficient,efficient,3845," TF1Parameters::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 130 of file TF1.h. ◆ DeclFileName(). static const char * TF1Parameters::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 130 of file TF1.h. ◆ GetParameter() [1/2]. Double_t TF1Parameters::GetParameter ; (; const char * ; name); const. inline . Definition at line 84 of file TF1.h. ◆ GetParameter() [2/2]. Double_t TF1Parameters::GetParameter ; (; Int_t ; iparam); const. inline . Definition at line 80 of file TF1.h. ◆ GetParameters(). const Double_t * TF1Parameters::GetParameters ; (; ); const. inline . Definition at line 88 of file TF1.h. ◆ GetParName(). const char * TF1Parameters::GetParName ; (; Int_t ; iparam); const. inline . Definition at line 99 of file TF1.h. ◆ GetParNumber(). Int_t TF1Parameters::GetParNumber ; (; const char * ; name); const. Returns the parameter number given a name not very efficient but list of parameters is typically small could use a map if needed. ; Definition at line 3846 of file TF1.cxx. ◆ IsA(). virtual TClass * TF1Parameters::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 130 of file TF1.h. ◆ operator=(). TF1Parameters & TF1Parameters::operator= ; (; const TF1Parameters & ; rhs). inline . Definition at line 70 of file TF1.h. ◆ ParamsVec(). const std::vector< double > & TF1Parameters::ParamsVec ; (; ); const. inline . Definition at line 92 of file TF1.h. ◆ SetParameter() [1/2]. void TF1Parameters::SetParameter ; (; const char * ; name, . Double_t ; value . ). inline . Definition at line 118 of file TF1.h. ◆ SetParameter() [2/2]. void TF1Parameters::SetParameter ; (; Int_t ; iparam, . Double_t ; value . ). inline . Definition at line 106 of file TF1.h. ◆ SetParameters() [1/2]. void TF1Parameters::SetParameters ; (; const Double_t * ; params). inline . Definition at line 111 of file TF1.h. ◆ SetParameters() [2/2]. ",MatchSource.WIKI,doc/master/classTF1Parameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Parameters.html
https://root.cern/doc/master/classTF2-members.html:3509,Availability,error,error,3509,"r(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoInitialize(EAddToList addToGlobList)TF1protected; Draw(Option_t *option="""") overrideTF2virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""") const overrideTF2virtual; DrawDerivative(Option_t *=""al"") overrideTF2inlinevirtual; DrawF1(Double_t xmin, Double_t xmax, Option_t *option="""")TF1virtual; DrawIntegral(Option_t *=""al"") overrideTF2inlinevirtual; Dump() constTObjectvirtual; EAddToList enum nameTF1; EDeprecatedStatusBits enum nameTObject; EFType enum nameTF1protected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTF1; Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) constTF1virtual; EvalPar(const Double_t *x, const Double_t *params=nullptr)TF1virtual; EvalPar(const T *x, const Double_t *params=nullptr)TF1; EvalParTempl(const T *data, const Double_t *params=nullptr)TF1inlineprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTF2virtual; fAlphaTF1protected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBetaTF1protected; fBitsTObjectprivate; fChisquareTF1protected; fCompositionTF1protected; fContourTF2protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFormulaTF1protected; fFunctorTF1protected; fgAbsValueTF1protectedstatic; fgAddToGlobListTF1protectedstatic; fGammaTF1protected; fgCurrentTF1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgRejectPointTF1protectedstatic; fHistogramTF1protected; FillBuffer(char *&buffer)TNamedvirtual; FindMinMax(Double_t *x, bool findmax) constTF2protectedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fInte",MatchSource.WIKI,doc/master/classTF2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2-members.html
https://root.cern/doc/master/classTF2-members.html:3590,Availability,error,error,3590,"r(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoInitialize(EAddToList addToGlobList)TF1protected; Draw(Option_t *option="""") overrideTF2virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""") const overrideTF2virtual; DrawDerivative(Option_t *=""al"") overrideTF2inlinevirtual; DrawF1(Double_t xmin, Double_t xmax, Option_t *option="""")TF1virtual; DrawIntegral(Option_t *=""al"") overrideTF2inlinevirtual; Dump() constTObjectvirtual; EAddToList enum nameTF1; EDeprecatedStatusBits enum nameTObject; EFType enum nameTF1protected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTF1; Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) constTF1virtual; EvalPar(const Double_t *x, const Double_t *params=nullptr)TF1virtual; EvalPar(const T *x, const Double_t *params=nullptr)TF1; EvalParTempl(const T *data, const Double_t *params=nullptr)TF1inlineprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTF2virtual; fAlphaTF1protected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBetaTF1protected; fBitsTObjectprivate; fChisquareTF1protected; fCompositionTF1protected; fContourTF2protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFormulaTF1protected; fFunctorTF1protected; fgAbsValueTF1protectedstatic; fgAddToGlobListTF1protectedstatic; fGammaTF1protected; fgCurrentTF1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgRejectPointTF1protectedstatic; fHistogramTF1protected; FillBuffer(char *&buffer)TNamedvirtual; FindMinMax(Double_t *x, bool findmax) constTF2protectedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fInte",MatchSource.WIKI,doc/master/classTF2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2-members.html
https://root.cern/doc/master/classTF2-members.html:17748,Availability,error,error,17748,"mum(Double_t minimum=-1111)TF1virtual; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetNDF(Int_t ndf)TF1virtual; SetNdim(Int_t ndim)TF1inline; SetNormalized(Bool_t flag)TF1inlinevirtual; SetNpx(Int_t npx=100)TF1virtual; SetNpy(Int_t npy=100)TF2virtual; SetNumberFitPoints(Int_t npfits)TF1inlinevirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetParameter(Int_t param, Double_t value)TF1inlinevirtual; SetParameter(const TString &name, Double_t value)TF1inlinevirtual; SetParameters(const Double_t *params)TF1inlinevirtual; SetParameters(double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN())TF1inlinevirtual; SetParent(TObject *p=nullptr)TF1inlinevirtual; SetParError(Int_t ipar, Double_t error)TF1virtual; SetParErrors(const Double_t *errors)TF1virtual; SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax)TF1virtual; SetParName(Int_t ipar, const char *name)TF1virtual; SetParNames(const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""")TF1virtual; SetRange(Double_t xmin, Double_t xmax) overrideTF2inlinevirtual; SetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax) overrideTF2virtual; SetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax) overrideTF2inlinevirtual; SetSavedPoint(Int_t point, Double_t value)TF1virtual; SetTitle(const char *title="""") overrideTF1virtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetVectorized(Bool_t vectorized)TF1inlinevirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTF2virtual; Streame",MatchSource.WIKI,doc/master/classTF2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2-members.html
https://root.cern/doc/master/classTF2-members.html:17795,Availability,error,errors,17795,"const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetNDF(Int_t ndf)TF1virtual; SetNdim(Int_t ndim)TF1inline; SetNormalized(Bool_t flag)TF1inlinevirtual; SetNpx(Int_t npx=100)TF1virtual; SetNpy(Int_t npy=100)TF2virtual; SetNumberFitPoints(Int_t npfits)TF1inlinevirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetParameter(Int_t param, Double_t value)TF1inlinevirtual; SetParameter(const TString &name, Double_t value)TF1inlinevirtual; SetParameters(const Double_t *params)TF1inlinevirtual; SetParameters(double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN())TF1inlinevirtual; SetParent(TObject *p=nullptr)TF1inlinevirtual; SetParError(Int_t ipar, Double_t error)TF1virtual; SetParErrors(const Double_t *errors)TF1virtual; SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax)TF1virtual; SetParName(Int_t ipar, const char *name)TF1virtual; SetParNames(const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""")TF1virtual; SetRange(Double_t xmin, Double_t xmax) overrideTF2inlinevirtual; SetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax) overrideTF2virtual; SetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax) overrideTF2inlinevirtual; SetSavedPoint(Int_t point, Double_t value)TF1virtual; SetTitle(const char *title="""") overrideTF1virtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetVectorized(Bool_t vectorized)TF1inlinevirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTF2virtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)T",MatchSource.WIKI,doc/master/classTF2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2-members.html
https://root.cern/doc/master/classTF2-members.html:179,Modifiability,inherit,inherited,179,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TF2 Member List. This is the complete list of members for TF2, including all inherited members. AbstractMethod(const char *method) constTObject; AbsValue(Bool_t reject=kTRUE)TF1static; AddParameter(const TString &name, Double_t value)TF1inlinevirtual; AddToGlobalList(Bool_t on=kTRUE)TF1virtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b) overrideTF1virtual; CalcGaussLegendreSamplingPoints(Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11)TF1static; CentralMoment(Double_t n, Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001)TF1virtual; CentralMoment2(Double_t nx, Double_t ax, Double_t bx, Double_t ny, Double_t ay, Double_t by, Double_t epsilon=0.000001)TF2virtual; CheckedHash()TObjectinline; Class()TF2static; Class_Name()TF2static; Class_Version()TF2inlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname=nullptr) const overrideTF1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeCdfTable(Option_t *opt)TF1protected; Copy(TObject &f2) const overrideTF2virtual; TF1::TAttLine::Copy(TAttLine &attline) constTAttLine; TF1::TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; Covariance2XY(Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001)TF2inlinevirtual; CreateHistogram() overrideTF2virtual; DeclFileName()TF2inlinestatic; DefaultAddToGlobalList(Bool_t on=kTRUE)TF1static; DefineNSUMTerm(TObjArray *newFuncs, TObjArray *coeffNames, TString &fullFormula, TString &formula, int termStart, int termEnd, Double_t xmin, Double_t xmax)TF1private; Delete(Option_t *option="""")TObjectvirtual; Derivative(Double_t x, Double_t *params=nullptr, Double_t epsilon=0.001) constTF1virtual; Derivative2(Double_t x, Double",MatchSource.WIKI,doc/master/classTF2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2-members.html
https://root.cern/doc/master/classTF2-members.html:6264,Testability,log,logx,6264,"nt_t level) constTF2virtual; GetCurrent()TF1static; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetExpFormula(Option_t *option="""") constTF1inlinevirtual; GetFillColor() constTAttFillinlinevirtual; GetFillStyle() constTAttFillinlinevirtual; GetFormula()TF1inlinevirtual; GetFormula() constTF1inlinevirtual; GetHistogram() constTF1virtual; GetIconName() constTObjectvirtual; GetLinearPart(Int_t i) constTF1inlinevirtual; GetLineColor() constTAttLineinlinevirtual; GetLineStyle() constTAttLineinlinevirtual; GetLineWidth() constTAttLineinlinevirtual; GetMarkerColor() constTAttMarkerinlinevirtual; GetMarkerLineWidth(Style_t style)TAttMarkerstatic; GetMarkerSize() constTAttMarkerinlinevirtual; GetMarkerStyle() constTAttMarkerinlinevirtual; GetMarkerStyleBase(Style_t style)TAttMarkerstatic; GetMaximum(Double_t *x) constTF2virtual; GetMaximum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF2virtual; GetMaximumStored() constTF1inlinevirtual; GetMaximumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMaximumXY(Double_t &x, Double_t &y) constTF2virtual; GetMethodCall() constTF1inline; GetMinimum(Double_t *x) constTF2virtual; GetMinimum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF2virtual; GetMinimumStored() constTF1inlinevirtual; GetMinimumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinimumXY(Double_t &x, Double_t &y) constTF2virtual; GetMinMaxNDim(Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) constTF1protectedvirtual; GetName() const overrideTNamedinlinevirtual; GetNDF() constTF1virtual; GetNdim() constTF1inlinevirtual; GetNpar() constTF1inlinevirtual; GetNpx() constTF1inlinevirtual; GetNpy() constTF2inline; GetNumber() constTF1inlinevirtual; GetNumberFitPoints() constTF1inlinevirtual",MatchSource.WIKI,doc/master/classTF2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2-members.html
https://root.cern/doc/master/classTF2-members.html:6432,Testability,log,logx,6432,"rtual; GetFillStyle() constTAttFillinlinevirtual; GetFormula()TF1inlinevirtual; GetFormula() constTF1inlinevirtual; GetHistogram() constTF1virtual; GetIconName() constTObjectvirtual; GetLinearPart(Int_t i) constTF1inlinevirtual; GetLineColor() constTAttLineinlinevirtual; GetLineStyle() constTAttLineinlinevirtual; GetLineWidth() constTAttLineinlinevirtual; GetMarkerColor() constTAttMarkerinlinevirtual; GetMarkerLineWidth(Style_t style)TAttMarkerstatic; GetMarkerSize() constTAttMarkerinlinevirtual; GetMarkerStyle() constTAttMarkerinlinevirtual; GetMarkerStyleBase(Style_t style)TAttMarkerstatic; GetMaximum(Double_t *x) constTF2virtual; GetMaximum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF2virtual; GetMaximumStored() constTF1inlinevirtual; GetMaximumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMaximumXY(Double_t &x, Double_t &y) constTF2virtual; GetMethodCall() constTF1inline; GetMinimum(Double_t *x) constTF2virtual; GetMinimum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF2virtual; GetMinimumStored() constTF1inlinevirtual; GetMinimumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinimumXY(Double_t &x, Double_t &y) constTF2virtual; GetMinMaxNDim(Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) constTF1protectedvirtual; GetName() const overrideTNamedinlinevirtual; GetNDF() constTF1virtual; GetNdim() constTF1inlinevirtual; GetNpar() constTF1inlinevirtual; GetNpx() constTF1inlinevirtual; GetNpy() constTF2inline; GetNumber() constTF1inlinevirtual; GetNumberFitPoints() constTF1inlinevirtual; GetNumberFreeParameters() constTF1virtual; GetObjectInfo(Int_t px, Int_t py) const overrideTF2virtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetParameter(Int_t ipar) constTF1inli",MatchSource.WIKI,doc/master/classTF2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2-members.html
https://root.cern/doc/master/classTF2-members.html:6686,Testability,log,logx,6686,"TF1inlinevirtual; GetLineColor() constTAttLineinlinevirtual; GetLineStyle() constTAttLineinlinevirtual; GetLineWidth() constTAttLineinlinevirtual; GetMarkerColor() constTAttMarkerinlinevirtual; GetMarkerLineWidth(Style_t style)TAttMarkerstatic; GetMarkerSize() constTAttMarkerinlinevirtual; GetMarkerStyle() constTAttMarkerinlinevirtual; GetMarkerStyleBase(Style_t style)TAttMarkerstatic; GetMaximum(Double_t *x) constTF2virtual; GetMaximum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF2virtual; GetMaximumStored() constTF1inlinevirtual; GetMaximumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMaximumXY(Double_t &x, Double_t &y) constTF2virtual; GetMethodCall() constTF1inline; GetMinimum(Double_t *x) constTF2virtual; GetMinimum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF2virtual; GetMinimumStored() constTF1inlinevirtual; GetMinimumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinimumXY(Double_t &x, Double_t &y) constTF2virtual; GetMinMaxNDim(Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) constTF1protectedvirtual; GetName() const overrideTNamedinlinevirtual; GetNDF() constTF1virtual; GetNdim() constTF1inlinevirtual; GetNpar() constTF1inlinevirtual; GetNpx() constTF1inlinevirtual; GetNpy() constTF2inline; GetNumber() constTF1inlinevirtual; GetNumberFitPoints() constTF1inlinevirtual; GetNumberFreeParameters() constTF1virtual; GetObjectInfo(Int_t px, Int_t py) const overrideTF2virtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetParameter(Int_t ipar) constTF1inlinevirtual; GetParameter(const TString &name) constTF1inlinevirtual; GetParameters() constTF1inlinevirtual; GetParameters(Double_t *params)TF1inlinevirtual; GetParent() constTF1inline; GetParError(Int_t ipar) con",MatchSource.WIKI,doc/master/classTF2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2-members.html
https://root.cern/doc/master/classTF2-members.html:6854,Testability,log,logx,6854,,MatchSource.WIKI,doc/master/classTF2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2-members.html
https://root.cern/doc/master/classTF2-members.html:9161,Testability,log,logx,9161,"om, TRandom *rng=nullptr)TF2virtual; GetRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideTF2virtual; GetRange(Double_t &xmin, Double_t &ymin, Double_t &zmin, Double_t &xmax, Double_t &ymax, Double_t &zmax) const overrideTF2virtual; GetRange(Double_t *xmin, Double_t *xmax) constTF2virtual; GetRange(Double_t &xmin, Double_t &xmax) constTF2virtual; GetRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) constTF2virtual; GetRange(Double_t &xmin, Double_t &ymin, Double_t &zmin, Double_t &xmax, Double_t &ymax, Double_t &zmax) constTF2virtual; GetSave(const Double_t *x) overrideTF2virtual; GetTitle() const overrideTNamedinlinevirtual; GetUniqueID() constTObjectvirtual; GetVariable(const TString &name)TF1inlinevirtual; GetX(Double_t y, Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetXaxis() constTF1; GetXmax() constTF1inlinevirtual; GetXmin() constTF1inlinevirtual; GetYaxis() constTF1; GetYmax() constTF2inlinevirtual; GetYmin() constTF2inlinevirtual; GetZaxis() constTF1; GradientPar(Int_t ipar, const Double_t *x, Double_t eps=0.01)TF1virtual; GradientPar(Int_t ipar, const T *x, Double_t eps=0.01)TF1inline; GradientPar(const Double_t *x, Double_t *grad, Double_t eps=0.01)TF1virtual; GradientPar(const T *x, T *grad, Double_t eps=0.01)TF1inline; GradientParTempl(Int_t ipar, const T *x, Double_t eps=0.01)TF1inline; GradientParTempl(const T *x, T *grad, Double_t eps=0.01)TF1inline; HandleTimer(TTimer *timer)TObjectvirtual; Hash() const overrideTNamedinlinevirtual; HasInconsistentHash() constTObjectinline; HasSave() constTF1inline; Info(const char *method, const char *msgfmt,...) constTObjectvirtual; InheritsFrom(const char *classname) constTObjectvirtual; InheritsFrom(const TClass *cl) constTObjectvirtual; InitArgs(const Double_t *x, const Double_t *params)TF1virtual; InitStandardFunctions()TF1static; Inspect() constTObjectvirtual; Integral(Double_t ax, Double",MatchSource.WIKI,doc/master/classTF2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2-members.html
https://root.cern/doc/master/classTF2.html:10124,Availability,avail,available,10124,"r and lower bounds to draw the function. ;  ; void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax) override;  Initialize the upper and lower bounds to draw the function-. ;  ; void SetRange (Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TF2. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Double_t Variance2X (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ; virtual Double_t Variance2Y (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TF1;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions GL - function will be always stored in the global list of functions , independently of the global setting of TF1::DefaultAddToGlobalList. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, EAddToList addToGlobList=EAddToList::kDefault, bool vectorize=false);  TF1 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, const char *, const char *, EAddToList addToGlobList=EAddToList::kDefault);  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  ;  TF1 (const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  F",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:21176,Availability,toler,tolerance,21176,"uble_t epsilon=1.E-2);  Return Error on Integral of a parametric function with dimension larger than one between a[] and b[] due to the parameters uncertainties. ;  ; virtual Double_t IntegralFast (Int_t num, Double_t *x, Double_t *w, Double_t a, Double_t b, Double_t *params=nullptr, Double_t epsilon=1e-12);  Gauss-Legendre integral, see CalcGaussLegendreSamplingPoints. ;  ; virtual Double_t IntegralMultiple (Int_t n, const Double_t *a, const Double_t *b, Double_t epsrel, Double_t &relerr);  See more general prototype below. ;  ; virtual Double_t IntegralMultiple (Int_t n, const Double_t *a, const Double_t *b, Int_t maxpts, Double_t epsrel, Double_t epsabs, Double_t &relerr, Int_t &nfnevl, Int_t &ifail);  This function computes, to an attempted specified accuracy, the value of the integral. ;  ; virtual Double_t IntegralMultiple (Int_t n, const Double_t *a, const Double_t *b, Int_t, Int_t maxpts, Double_t epsrel, Double_t &relerr, Int_t &nfnevl, Int_t &ifail);  ; virtual Double_t IntegralOneDim (Double_t a, Double_t b, Double_t epsrel, Double_t epsabs, Double_t &err);  Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ;  ; virtual Bool_t IsEvalNormalized () const;  ; virtual Bool_t IsLinear () const;  ; virtual Bool_t IsValid () const;  Return kTRUE if the function is valid. ;  ; bool IsVectorized ();  ; virtual Double_t Mean (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ; virtual Double_t Moment (Double_t n, Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  Return nth moment of function between a and b. ;  ; template<class T > ; T operator() (const T *x, const Double_t *params=nullptr);  ; virtual Double_t operator() (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;  ; TF1 & operator= (const TF1 &rhs);  Operator =. ;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class want",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:22301,Availability,error,errors,22301,"ormalized () const;  ; virtual Bool_t IsLinear () const;  ; virtual Bool_t IsValid () const;  Return kTRUE if the function is valid. ;  ; bool IsVectorized ();  ; virtual Double_t Mean (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ; virtual Double_t Moment (Double_t n, Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  Return nth moment of function between a and b. ;  ; template<class T > ; T operator() (const T *x, const Double_t *params=nullptr);  ; virtual Double_t operator() (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;  ; TF1 & operator= (const TF1 &rhs);  Operator =. ;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; virtual void ReleaseParameter (Int_t ipar);  Release parameter number ipar during a fit operation. ;  ; virtual void SetChisquare (Double_t chi2);  ; virtual void SetFitResult (const ROOT::Fit::FitResult &result, const Int_t *indpar=nullptr);  Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (with size fNpar) of the parameter indices in the FitResult can be passed This is useful in the case of a combined fit with different functions, and the FitResult contains the global result By default it is assume that indpar = {0,1,2,....,fNpar-1}. ;  ; template<typename Func > ; void SetFunction (Func f);  ; template<class PtrObj , typename MemFn > ; void SetFunction (PtrObj &p, MemFn memFn);  ; virtual void SetMaximum (Double_t maximum=-1111);  Set the maximum value along Y for this function In case the function is already drawn, set also the maximum in the helper histogram. ;  ; virtual void SetMinimum (Double_t minimum=-1111);  Set the minimum value along Y for this function In case the function is already drawn, set also the minimum in the helper histogram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf shoul",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:24151,Availability,error,error,24151,"gram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of free parameters. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:24164,Availability,error,error,24164,"gram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of free parameters. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:24245,Availability,error,errors,24245,"ers. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it is assumed that the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the titles for the X and Y axis respectively. ;  ; virtual void SetVectorized (Bool_t",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:24259,Availability,error,errors,24259,"ers. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it is assumed that the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the titles for the X and Y axis respectively. ;  ; virtual void SetVectorized (Bool_t",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:24330,Availability,error,errors,24330,"ers. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it is assumed that the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the titles for the X and Y axis respectively. ;  ; virtual void SetVectorized (Bool_t",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:28473,Availability,error,error,28473,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:28562,Availability,error,error,28562,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return t",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:28717,Availability,error,error,28717,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:28894,Availability,error,error,28894,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:32595,Availability,error,error,32595,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:38475,Availability,error,error,38475,"; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; stat",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:44158,Availability,error,errors,44158,mma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::unique_ptr< TMethodCall > fMethodCall;  ! Pointer to MethodCall in case of interpreted function ;  ; Double_t fMinimum {-1111};  Minimum value for plotting. ;  ; Int_t fNDF {};  Number of degrees of freedom in the fit. ;  ; Int_t fNdim {};  Function dimension. ;  ; Bool_t fNormalized {false};  Normalization option (false by default) ;  ; Double_t fNormIntegral {};  Integral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Mar,MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:62172,Deployability,integrat,integrated,62172,"fo ; (; Int_t ; px, . Int_t ; py . ); const. overridevirtual . Redefines TObject::GetObjectInfo. ; Displays the function value corresponding to cursor position px,py ; Reimplemented from TF1.; Definition at line 486 of file TF2.cxx. ◆ GetRandom() [1/2]. Double_t TF2::GetRandom ; (; Double_t ; xmin, . Double_t ; xmax, . TRandom * ; rng = nullptr, . Option_t * ; opt = nullptr . ). overridevirtual . Return a random number following this function shape. ; Reimplemented from TF1.; Definition at line 522 of file TF2.cxx. ◆ GetRandom() [2/2]. Double_t TF2::GetRandom ; (; TRandom * ; rng = nullptr, . Option_t * ; opt = nullptr . ). overridevirtual . Return a random number following this function shape. ; Reimplemented from TF1.; Definition at line 512 of file TF2.cxx. ◆ GetRandom2(). void TF2::GetRandom2 ; (; Double_t & ; xrandom, . Double_t & ; yrandom, . TRandom * ; rng = nullptr . ). virtual . Return 2 random numbers following this function shape. ; The distribution contained in this TF2 function is integrated over the cell contents. It is normalized to 1. Getting the two random numbers implies:; Generating a random number between 0 and 1 (say r1); Look in which cell in the normalized integral r1 corresponds to; make a linear interpolation in the returned cell. IMPORTANT NOTE; The integral of the function is computed at fNpx * fNpy points. If the function has sharp peaks, you should increase the number of points (SetNpx, SetNpy) such that the peak is correctly tabulated at several points. ; Definition at line 547 of file TF2.cxx. ◆ GetRange() [1/6]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; xmax . ); const. virtual . Return range of a 1-D function. ; Reimplemented from TF1.; Reimplemented in TF3, and TF3.; Definition at line 575 of file TF1.cxx. ◆ GetRange() [2/6]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. virtual . Return range of a 2-D function. ; Reimplemented from TF1.; Reimple",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:28479,Integrability,message,message,28479,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:28900,Integrability,message,message,28900,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:29758,Integrability,message,message,29758," this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:32601,Integrability,message,message,32601,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:32974,Integrability,message,message,32974,"move this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:37883,Integrability,interface,interface,37883,"+ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag i",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:42982,Integrability,wrap,wrap,42982,"Object; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fNpy;  Number of points along y used for the graphical representation. ;  ; Double_t fYmax;  Upper bound for the range in y. ;  ; Double_t fYmin;  Lower bound for the range in y. ;  ;  Protected Attributes inherited from TF1; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsComposition > fComposition;  Pointer to composition (NSUM or CONV) ;  ; std::unique_ptr< TFormula > fFormula;  Pointer to TFormula in case when user define formula. ;  ; std::unique_ptr< TF1FunctorPointer > fFunctor;  ! Functor object to wrap any C++ callable object ;  ; std::vector< Double_t > fGamma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::unique_ptr< TMethodCall > fMethodCall;  ! Pointer to MethodCall in case of interpreted function ;  ; Double_t fMinimum {-1111};  Minimum value for plotting. ;  ; Int_t fNDF {};  Number of degrees of freedom in the fit. ;  ; Int_t fNdim {};  Function dimension. ;  ; Bool_t fNormalized {false};  Normalization option (false by default) ;  ; Double_t fNormIntegral {};  Integral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:62172,Integrability,integrat,integrated,62172,"fo ; (; Int_t ; px, . Int_t ; py . ); const. overridevirtual . Redefines TObject::GetObjectInfo. ; Displays the function value corresponding to cursor position px,py ; Reimplemented from TF1.; Definition at line 486 of file TF2.cxx. ◆ GetRandom() [1/2]. Double_t TF2::GetRandom ; (; Double_t ; xmin, . Double_t ; xmax, . TRandom * ; rng = nullptr, . Option_t * ; opt = nullptr . ). overridevirtual . Return a random number following this function shape. ; Reimplemented from TF1.; Definition at line 522 of file TF2.cxx. ◆ GetRandom() [2/2]. Double_t TF2::GetRandom ; (; TRandom * ; rng = nullptr, . Option_t * ; opt = nullptr . ). overridevirtual . Return a random number following this function shape. ; Reimplemented from TF1.; Definition at line 512 of file TF2.cxx. ◆ GetRandom2(). void TF2::GetRandom2 ; (; Double_t & ; xrandom, . Double_t & ; yrandom, . TRandom * ; rng = nullptr . ). virtual . Return 2 random numbers following this function shape. ; The distribution contained in this TF2 function is integrated over the cell contents. It is normalized to 1. Getting the two random numbers implies:; Generating a random number between 0 and 1 (say r1); Look in which cell in the normalized integral r1 corresponds to; make a linear interpolation in the returned cell. IMPORTANT NOTE; The integral of the function is computed at fNpx * fNpy points. If the function has sharp peaks, you should increase the number of points (SetNpx, SetNpy) such that the peak is correctly tabulated at several points. ; Definition at line 547 of file TF2.cxx. ◆ GetRange() [1/6]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; xmax . ); const. virtual . Return range of a 1-D function. ; Reimplemented from TF1.; Reimplemented in TF3, and TF3.; Definition at line 575 of file TF1.cxx. ◆ GetRange() [2/6]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. virtual . Return range of a 2-D function. ; Reimplemented from TF1.; Reimple",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:432,Modifiability,variab,variables,432,". ROOT: TF2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TF2 Class ReferenceHistogram Library » Function classes. ; A 2-Dim function with parameters. ; The following types of functions can be created:. Expression using variables x and y; Expression using a user defined function; Lambda Expression with x and y variables and parameters. Expression using variables x and y; {; auto f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; f2->Draw();; }; TF2::TF2TF2()TF2 default constructor.Definition TF2.cxx:83. Expression using a user defined function; Double_t func(Double_t *val, Double_t *par); {; Float_t x = val[0];; Float_t y = val[1];; Double_t f = x*x-y*y;; return f;; }; ; void fplot(); {; auto f = new TF2(""f"",func,-1,1,-1,1);; f->Draw(""surf1"");; }; f#define f(i)Definition RSha256.hxx:104; Float_tfloat Float_tDefinition RtypesCore.h:57; double; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17. Lambda Expression with x and y variables and parameters; root [0] TF2 f2(""f2"", [](double* x, double*p) { return x[0] + x[1] * p[0]; }, 0., 1., 0., 1., 1); (TF2 &) Name: f2 Title: f2; root [1] f2.SetParameter(0, 1.); root [2] f2.Eval(1., 2.); (double) 3.0000000; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TF2A 2-Dim function with parameters.Definition TF2.h:29; See TF1 class for the list of functions formats ; Definition at line 29 of file TF2.h. Public Member Functions;  TF2 ();  TF2 default constructor. ;  ;  TF2 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Option_t *opt=nullptr);  F2 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF2 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, D",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:524,Modifiability,variab,variables,524,". ROOT: TF2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TF2 Class ReferenceHistogram Library » Function classes. ; A 2-Dim function with parameters. ; The following types of functions can be created:. Expression using variables x and y; Expression using a user defined function; Lambda Expression with x and y variables and parameters. Expression using variables x and y; {; auto f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; f2->Draw();; }; TF2::TF2TF2()TF2 default constructor.Definition TF2.cxx:83. Expression using a user defined function; Double_t func(Double_t *val, Double_t *par); {; Float_t x = val[0];; Float_t y = val[1];; Double_t f = x*x-y*y;; return f;; }; ; void fplot(); {; auto f = new TF2(""f"",func,-1,1,-1,1);; f->Draw(""surf1"");; }; f#define f(i)Definition RSha256.hxx:104; Float_tfloat Float_tDefinition RtypesCore.h:57; double; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17. Lambda Expression with x and y variables and parameters; root [0] TF2 f2(""f2"", [](double* x, double*p) { return x[0] + x[1] * p[0]; }, 0., 1., 0., 1., 1); (TF2 &) Name: f2 Title: f2; root [1] f2.SetParameter(0, 1.); root [2] f2.Eval(1., 2.); (double) 3.0000000; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TF2A 2-Dim function with parameters.Definition TF2.h:29; See TF1 class for the list of functions formats ; Definition at line 29 of file TF2.h. Public Member Functions;  TF2 ();  TF2 default constructor. ;  ;  TF2 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Option_t *opt=nullptr);  F2 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF2 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, D",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:567,Modifiability,variab,variables,567,". ROOT: TF2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TF2 Class ReferenceHistogram Library » Function classes. ; A 2-Dim function with parameters. ; The following types of functions can be created:. Expression using variables x and y; Expression using a user defined function; Lambda Expression with x and y variables and parameters. Expression using variables x and y; {; auto f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; f2->Draw();; }; TF2::TF2TF2()TF2 default constructor.Definition TF2.cxx:83. Expression using a user defined function; Double_t func(Double_t *val, Double_t *par); {; Float_t x = val[0];; Float_t y = val[1];; Double_t f = x*x-y*y;; return f;; }; ; void fplot(); {; auto f = new TF2(""f"",func,-1,1,-1,1);; f->Draw(""surf1"");; }; f#define f(i)Definition RSha256.hxx:104; Float_tfloat Float_tDefinition RtypesCore.h:57; double; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17. Lambda Expression with x and y variables and parameters; root [0] TF2 f2(""f2"", [](double* x, double*p) { return x[0] + x[1] * p[0]; }, 0., 1., 0., 1., 1); (TF2 &) Name: f2 Title: f2; root [1] f2.SetParameter(0, 1.); root [2] f2.Eval(1., 2.); (double) 3.0000000; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TF2A 2-Dim function with parameters.Definition TF2.h:29; See TF1 class for the list of functions formats ; Definition at line 29 of file TF2.h. Public Member Functions;  TF2 ();  TF2 default constructor. ;  ;  TF2 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Option_t *opt=nullptr);  F2 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF2 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, D",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:1176,Modifiability,variab,variables,1176,"nctions |; Protected Attributes |; List of all members ; TF2 Class ReferenceHistogram Library » Function classes. ; A 2-Dim function with parameters. ; The following types of functions can be created:. Expression using variables x and y; Expression using a user defined function; Lambda Expression with x and y variables and parameters. Expression using variables x and y; {; auto f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; f2->Draw();; }; TF2::TF2TF2()TF2 default constructor.Definition TF2.cxx:83. Expression using a user defined function; Double_t func(Double_t *val, Double_t *par); {; Float_t x = val[0];; Float_t y = val[1];; Double_t f = x*x-y*y;; return f;; }; ; void fplot(); {; auto f = new TF2(""f"",func,-1,1,-1,1);; f->Draw(""surf1"");; }; f#define f(i)Definition RSha256.hxx:104; Float_tfloat Float_tDefinition RtypesCore.h:57; double; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17. Lambda Expression with x and y variables and parameters; root [0] TF2 f2(""f2"", [](double* x, double*p) { return x[0] + x[1] * p[0]; }, 0., 1., 0., 1., 1); (TF2 &) Name: f2 Title: f2; root [1] f2.SetParameter(0, 1.); root [2] f2.Eval(1., 2.); (double) 3.0000000; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TF2A 2-Dim function with parameters.Definition TF2.h:29; See TF1 class for the list of functions formats ; Definition at line 29 of file TF2.h. Public Member Functions;  TF2 ();  TF2 default constructor. ;  ;  TF2 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Option_t *opt=nullptr);  F2 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF2 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Int_t npar, const char *, const char *);  Backward compatible ctor. ;  ; template<class PtrObj , typename MemFn > ;  TF2 (const char *name, const PtrObj &p, MemFn memFn",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:9883,Modifiability,inherit,inherited,9883,"ontour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetNpy (Int_t npy=100);  Set the number of points used to draw the function. ;  ; void SetRange (Double_t xmin, Double_t xmax) override;  Initialize the upper and lower bounds to draw the function. ;  ; void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax) override;  Initialize the upper and lower bounds to draw the function-. ;  ; void SetRange (Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TF2. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Double_t Variance2X (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ; virtual Double_t Variance2Y (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TF1;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions GL - function will be always stored in the global list of functions , independently of the global setting of TF1::DefaultAddToGlobalList. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, EAddToList addToGlobList=EAddToList::kDefault, bool vectorize=false);  TF1 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, const char *, const char *, EAddToList addToGlobList=EAddToList::kDefault);  ; template<class PtrObj , typename MemFn > ;  TF",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:25657,Modifiability,inherit,inherited,25657,"3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it is assumed that the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the titles for the X and Y axis respectively. ;  ; virtual void SetVectorized (Bool_t vectorized);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update ();  Called by functions such as SetRange, SetNpx, SetParameters to force the deletion of the associated histogram or Integral. ;  ; virtual Double_t Variance (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title.",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:27316,Modifiability,inherit,inherited,27316,"fer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:28109,Modifiability,inherit,inheritance,28109,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ;",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:29856,Modifiability,inherit,inherits,29856,"l (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:29973,Modifiability,inherit,inherits,29973," (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:33281,Modifiability,inherit,inherited,33281,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:34786,Modifiability,inherit,inherited,34786,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:36041,Modifiability,inherit,inherited,36041,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:37655,Modifiability,inherit,inherited,37655," ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the cu",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:39114,Modifiability,inherit,inherited,39114,"ic method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:39324,Modifiability,inherit,inherited,39324,"ic method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:39842,Modifiability,inherit,inherited,39842,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; virtual Double_t FindMinMax (Double_t *x, bool findmax) const;  Return minimum/maximum value of the function. ;  ;  Protected Member Functions inherited from TF1;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:40054,Modifiability,inherit,inherited,40054,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; virtual Double_t FindMinMax (Double_t *x, bool findmax) const;  Return minimum/maximum value of the function. ;  ;  Protected Member Functions inherited from TF1;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:40266,Modifiability,inherit,inherited,40266,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; virtual Double_t FindMinMax (Double_t *x, bool findmax) const;  Return minimum/maximum value of the function. ;  ;  Protected Member Functions inherited from TF1;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:40940,Modifiability,inherit,inherited,40940,"Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; virtual Double_t FindMinMax (Double_t *x, bool findmax) const;  Return minimum/maximum value of the function. ;  ;  Protected Member Functions inherited from TF1;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute the cumulative function at fNpx points between fXmin and fXmax. ;  ; virtual TH1 * DoCreateHistogram (Double_t xmin, Double_t xmax, Bool_t recreate=kFALSE);  Create histogram with bin content equal to function value computed at the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ;  ; void DoInitialize (EAddToList addToGlobList);  Common initialization of the TF1. ;  ; virtual Double_t GetMinMaxNDim (Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; void IntegrateForNormalization ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *locati",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:41969,Modifiability,inherit,inherited,41969,"e_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute the cumulative function at fNpx points between fXmin and fXmax. ;  ; virtual TH1 * DoCreateHistogram (Double_t xmin, Double_t xmax, Bool_t recreate=kFALSE);  Create histogram with bin content equal to function value computed at the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ;  ; void DoInitialize (EAddToList addToGlobList);  Common initialization of the TF1. ;  ; virtual Double_t GetMinMaxNDim (Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; void IntegrateForNormalization ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fNpy;  Number of points along y used for the graphical representation. ;  ; Double_t fYmax;  Upper bound for the range in y. ;  ; Double_t fYmin;  Lower bound for the range in y. ;  ;  Protected Attributes inherited from TF1; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsComposition > fComposition;  Pointer to composition (NSUM or CONV) ;  ; std::unique_ptr< TFormula > fFormula;  Pointer to TFormula in case when user define formula. ;  ; std::unique_ptr< TF1FunctorPointer > fFunctor;  ! Functor object to wrap any C++ callable object",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:42443,Modifiability,inherit,inherited,42443,"h bin content equal to function value computed at the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ;  ; void DoInitialize (EAddToList addToGlobList);  Common initialization of the TF1. ;  ; virtual Double_t GetMinMaxNDim (Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; void IntegrateForNormalization ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fNpy;  Number of points along y used for the graphical representation. ;  ; Double_t fYmax;  Upper bound for the range in y. ;  ; Double_t fYmin;  Lower bound for the range in y. ;  ;  Protected Attributes inherited from TF1; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsComposition > fComposition;  Pointer to composition (NSUM or CONV) ;  ; std::unique_ptr< TFormula > fFormula;  Pointer to TFormula in case when user define formula. ;  ; std::unique_ptr< TF1FunctorPointer > fFunctor;  ! Functor object to wrap any C++ callable object ;  ; std::vector< Double_t > fGamma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::unique_ptr< TMethodCall > fMethodCall;  ! Pointer to MethodCall in case of interpreted function ;  ; Double_t fMinimum {-1111};  Minimum value for plotting. ;  ; In",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:44615,Modifiability,inherit,inherited,44615,"egral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:44697,Modifiability,inherit,inherited,44697,"egral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:44858,Modifiability,inherit,inherited,44858,"aphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , k",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:44991,Modifiability,inherit,inherited,44991,"rmula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:45185,Modifiability,inherit,inherited,45185,"uble_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:45394,Modifiability,inherit,inherited,45394,"lues. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TF1; static std::atomic< Bool_t > fgAbsValue;  ; static std::atomic< Bool_t > fgAddToGlobList;  ; static TF1 * ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:46035,Modifiability,inherit,inherited,46035," ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TF1; static std::atomic< Bool_t > fgAbsValue;  ; static std::atomic< Bool_t > fgAddToGlobList;  ; static TF1 * fgCurrent = nullptr;  ; static Bool_t fgRejectPoint = kFALSE;  . #include <TF2.h>. Inheritance diagram for TF2:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF2() [1/10]. TF2::TF2 ; (; ). TF2 default constructor. ; Definition at line 83 of file TF2.cxx. ◆ TF2() [2/10]. TF2::TF2 ; (; const char * ; name, . const char * ; formula, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Double_t ; ymin = 0, . Double_t ; ymax = 1, . Option_t * ; opt = nullptr . ). F2 constructor using a formula definition. ; See TFormula constructor for explanation of the formula syntax.; If form",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:46200,Modifiability,inherit,inherited,46200,"< ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TF1; static std::atomic< Bool_t > fgAbsValue;  ; static std::atomic< Bool_t > fgAddToGlobList;  ; static TF1 * fgCurrent = nullptr;  ; static Bool_t fgRejectPoint = kFALSE;  . #include <TF2.h>. Inheritance diagram for TF2:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF2() [1/10]. TF2::TF2 ; (; ). TF2 default constructor. ; Definition at line 83 of file TF2.cxx. ◆ TF2() [2/10]. TF2::TF2 ; (; const char * ; name, . const char * ; formula, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Double_t ; ymin = 0, . Double_t ; ymax = 1, . Option_t * ; opt = nullptr . ). F2 constructor using a formula definition. ; See TFormula constructor for explanation of the formula syntax.; If formula has the form ""fffffff;xxxx;yyyy"", it is assumed that the formula string is ""fffffff"" and ""xxxx"" and ""yyyy"" are the titles for the X and Y axis respectively. ; Definition at line 97 of file TF2.cxx. ◆ TF2() [3/10]. TF2::TF2 ; (; const c",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:46300,Modifiability,inherit,inherited,46300,"< ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TF1; static std::atomic< Bool_t > fgAbsValue;  ; static std::atomic< Bool_t > fgAddToGlobList;  ; static TF1 * fgCurrent = nullptr;  ; static Bool_t fgRejectPoint = kFALSE;  . #include <TF2.h>. Inheritance diagram for TF2:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF2() [1/10]. TF2::TF2 ; (; ). TF2 default constructor. ; Definition at line 83 of file TF2.cxx. ◆ TF2() [2/10]. TF2::TF2 ; (; const char * ; name, . const char * ; formula, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Double_t ; ymin = 0, . Double_t ; ymax = 1, . Option_t * ; opt = nullptr . ). F2 constructor using a formula definition. ; See TFormula constructor for explanation of the formula syntax.; If formula has the form ""fffffff;xxxx;yyyy"", it is assumed that the formula string is ""fffffff"" and ""xxxx"" and ""yyyy"" are the titles for the X and Y axis respectively. ; Definition at line 97 of file TF2.cxx. ◆ TF2() [3/10]. TF2::TF2 ; (; const c",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:55442,Performance,perform,performed,55442,"resulting graph will be drawn into the current pad. If this function is used via the context menu, it recommended to create a new canvas/pad before invoking this function. ; Reimplemented from TF1.; Reimplemented in TF3.; Definition at line 91 of file TF2.h. ◆ ExecuteEvent(). void TF2::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a F2 is clicked with the locator ; Reimplemented from TF1.; Reimplemented in TF3.; Definition at line 316 of file TF2.cxx. ◆ FindMinMax(). Double_t TF2::FindMinMax ; (; Double_t * ; x, . bool ; findmax . ); const. protectedvirtual . Return minimum/maximum value of the function. ; To find the minimum on a range, first set this range via the SetRange function. If a vector x of coordinate is passed it will be used as starting point for the minimum. In addition on exit x will contain the coordinate values at the minimuma; If x is NULL or x is infinity or NaN, first, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx and fNpy sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx and SetNpy functions; Then, a minimization is used with starting values found by the grid search The minimizer algorithm used (by default Minuit) can be changed by callinga ROOT::Math::Minimizer::SetDefaultMinimizerType("".."") Other option for the minimizer can be set using the static method of the MinimizerOptions class ; Reimplemented in TF3.; Definition at line 363 of file TF2.cxx. ◆ GetContour(). Int_t TF2::GetContour ; (; Double_t * ; levels = nullptr). virtual . Return contour values into array levels. ; The number of contour levels can be returned by getContourLevel ; Definition at line 326 of file TF2.cxx. ◆ GetContourLevel(). Double_t TF2::GetContourLevel ; (; Int_t ; level); const. virtual . Return the number of contour levels. ; Defini",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:58394,Performance,perform,performed,58394,"rols the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented from TF1.; Definition at line 497 of file TF1.cxx. ◆ GetMaximumXY(). Double_t TF2::GetMaximumXY ; (; Double_t & ; x, . Double_t & ; y . ); const. virtual . Compute the X and Y values corresponding to the maximum value of the function. ; Return the maximum value of the function See TF2::GetMinimumXY ; Definition at line 440 of file TF2.cxx. ◆ GetMinimum() [1/2]. Double_t TF2::GetMinimum ; (; Double_t * ; x); const. virtual . Return minimum/maximum value of the function. ; To find the minimum on a range, first set this range via the SetRange function If a vector x of coordinate is passed it will be used as starting point for the minimum. In addition on exit x will contain the coordinate values at the minimuma If x is NULL or x is infinity or NaN, first, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx and fNpy sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx and SetNpy functions Then, a minimization is used with starting values found by the grid search The minimizer algorithm used (by default Minuit) can be changed by callinga ROOT::Math::Minimizer::SetDefaultMinimizerType("".."") Other option for the minimizer can be set using the static method of the MinimizerOptions class ; Definition at line 465 of file TF2.cxx. ◆ GetMinimum() [2/2]. Double_t TF1::GetMinimum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step s",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:60374,Performance,perform,performed,60374,"min)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented from TF1.; Definition at line 498 of file TF1.cxx. ◆ GetMinimumXY(). Double_t TF2::GetMinimumXY ; (; Double_t & ; x, . Double_t & ; y . ); const. virtual . Compute the X and Y values corresponding to the minimum value of the function. ; Return the minimum value of the function To find the minimum on a range, first set this range via the SetRange function; Method: First, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx and fNpy sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx and SetNpy functions Then, a minimization is used with starting values found by the grid search The minimizer algorithm used (by default Minuit) can be changed by callinga ROOT::Math::Minimizer::SetDefaultMinimizerType("".."") Other option for the minimizer can be set using the static method of the MinimizerOptions class; Note that this method will always do first a grid search in contrast to GetMinimum ; Definition at line 425 of file TF2.cxx. ◆ GetNpy(). Int_t TF2::GetNpy ; (; ); const. inline . Definition at line 96 of file TF2.h. ◆ GetObjectInfo(). char * TF2::GetObjectInfo ; (; Int_t ; px, . Int_t ; py . ); const. overridevirtual . Redefines TObject::GetObjectInfo. ; Displays the function value corresponding to cursor position px,py ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:37878,Safety,safe,safe,37878,"+ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag i",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:38204,Safety,avoid,avoid,38204,";  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:26525,Security,hash,hash,26525," ; virtual Double_t Variance (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const cha",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:5207,Testability,log,logx,5207,"ompute distance from point px,py to a function. ;  ; void Draw (Option_t *option="""") override;  Draw this function with its current attributes. ;  ; TF1 * DrawCopy (Option_t *option="""") const override;  Draw a copy of this function with its current attributes-*. ;  ; TObject * DrawDerivative (Option_t *=""al"") override;  Draw derivative of this function. ;  ; TObject * DrawIntegral (Option_t *=""al"") override;  Draw integral of this function. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Int_t GetContour (Double_t *levels=nullptr);  Return contour values into array levels. ;  ; virtual Double_t GetContourLevel (Int_t level) const;  Return the number of contour levels. ;  ; virtual Double_t GetMaximum (Double_t *x) const;  Return maximum value of the function See TF2::GetMinimum. ;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t *x) const;  Return minimum/maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the minimum value of the function. ;  ; Int_t GetNpy () const;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; Double_t GetRandom (Double_t xmin, Double_t xmax, TRandom *rng=nullptr, Option_t *opt=nullptr) override;  Return a random number following this function shape. ;  ; Double_t GetRandom (TRandom *rng=nullptr, Option",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:5639,Testability,log,logx,5639,"  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Int_t GetContour (Double_t *levels=nullptr);  Return contour values into array levels. ;  ; virtual Double_t GetContourLevel (Int_t level) const;  Return the number of contour levels. ;  ; virtual Double_t GetMaximum (Double_t *x) const;  Return maximum value of the function See TF2::GetMinimum. ;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t *x) const;  Return minimum/maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the minimum value of the function. ;  ; Int_t GetNpy () const;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; Double_t GetRandom (Double_t xmin, Double_t xmax, TRandom *rng=nullptr, Option_t *opt=nullptr) override;  Return a random number following this function shape. ;  ; Double_t GetRandom (TRandom *rng=nullptr, Option_t *opt=nullptr) override;  Return a random number following this function shape. ;  ; virtual void GetRandom2 (Double_t &xrandom, Double_t &yrandom, TRandom *rng=nullptr);  Return 2 random numbers following this function shape. ;  ; virtual void GetRange (Double_t &xmin, Double_t &xmax) const;  Return range of a 1-D function. ;  ; virtual void GetRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const;  Return range of a ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:16272,Testability,log,logx,16272," needs to use the fit option 'B' to have the fix of the paramter effective. ;  ; Double_t GetChisquare () const;  Return the Chisquare after fitting. See ROOT::Fit::FitResult::Chi2() ;  ; virtual TString GetExpFormula (Option_t *option="""") const;  ; virtual TFormula * GetFormula ();  ; virtual const TFormula * GetFormula () const;  ; virtual TH1 * GetHistogram () const;  Return a pointer to the histogram used to visualise the function Note that this histogram is managed by the function and in same case it is automatically deleted when some TF1 functions are called such as TF1::SetParameters, TF1::SetNpx, TF1::SetRange It is then reccomended either to clone the return object or calling again teh GetHistogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ; virtual Int_t GetNdim () const;  ; virtual Int_t GetNpar () const;  ; virtual Int_t GetNpx () const;  ; virtual Int_t GetNumber () const;  ; virtual Int_t GetNumberFitPoints () const;  ; virtual Int_t GetNumberFreeParameters () const;  Return the number of free parameters. ;  ; virtual Double_t GetParameter (const TString &name) const;  ; virtual Double_t GetParameter (Int_t ipar) const;  ; virtual Double_t * GetParameters () const;  ; virtual void G",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:16572,Testability,log,logx,16572,"Formula () const;  ; virtual TH1 * GetHistogram () const;  Return a pointer to the histogram used to visualise the function Note that this histogram is managed by the function and in same case it is automatically deleted when some TF1 functions are called such as TF1::SetParameters, TF1::SetNpx, TF1::SetRange It is then reccomended either to clone the return object or calling again teh GetHistogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ; virtual Int_t GetNdim () const;  ; virtual Int_t GetNpar () const;  ; virtual Int_t GetNpx () const;  ; virtual Int_t GetNumber () const;  ; virtual Int_t GetNumberFitPoints () const;  ; virtual Int_t GetNumberFreeParameters () const;  Return the number of free parameters. ;  ; virtual Double_t GetParameter (const TString &name) const;  ; virtual Double_t GetParameter (Int_t ipar) const;  ; virtual Double_t * GetParameters () const;  ; virtual void GetParameters (Double_t *params);  ; TObject * GetParent () const;  ; virtual Double_t GetParError (Int_t ipar) const;  Return value of parameter number ipar. ;  ; virtual const Double_t * GetParErrors () const;  ; virtual void GetParLimits (Int_t ipar, Double_t &parmin, Double_t &parmax) const;  Return limits for",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:18131,Testability,log,logx,18131," TString &name) const;  ; virtual Double_t GetParameter (Int_t ipar) const;  ; virtual Double_t * GetParameters () const;  ; virtual void GetParameters (Double_t *params);  ; TObject * GetParent () const;  ; virtual Double_t GetParError (Int_t ipar) const;  Return value of parameter number ipar. ;  ; virtual const Double_t * GetParErrors () const;  ; virtual void GetParLimits (Int_t ipar, Double_t &parmin, Double_t &parmax) const;  Return limits for parameter ipar. ;  ; virtual const char * GetParName (Int_t ipar) const;  ; virtual Int_t GetParNumber (const char *name) const;  ; virtual Double_t GetProb () const;  Return the fit probability. ;  ; virtual Int_t GetQuantiles (Int_t n, Double_t *xp, const Double_t *p);  Compute Quantiles for density distribution of this function. ;  ; virtual Double_t GetVariable (const TString &name);  ; virtual Double_t GetX (Double_t y, Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the function value fy for (xmin<x<xmax). ;  ; TAxis * GetXaxis () const;  Get x axis of the function. ;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; TAxis * GetYaxis () const;  Get y axis of the function. ;  ; TAxis * GetZaxis () const;  Get z axis of the function. (In case this object is a TF2 or TF3) ;  ; virtual void GradientPar (const Double_t *x, Double_t *grad, Double_t eps=0.01);  Compute the gradient wrt parameters If the TF1 object is based on a formula expression (TFormula) and TFormula::GenerateGradientPar() has been successfully called automatic differentiation using CLAD is used instead of the default numerical differentiation. ;  ; template<class T > ; void GradientPar (const T *x, T *grad, Double_t eps=0.01);  ; virtual Double_t GradientPar (Int_t ipar, const Double_t *x, Double_t eps=0.01);  Compute the gradient (derivative) wrt a parameter ipar. ;  ; template<class T > ; T GradientPar (Int_t ipar, const T *x, Do",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:38917,Testability,test,tested,38917," interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass *",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:56788,Testability,log,logx,56788,"nuit) can be changed by callinga ROOT::Math::Minimizer::SetDefaultMinimizerType("".."") Other option for the minimizer can be set using the static method of the MinimizerOptions class ; Reimplemented in TF3.; Definition at line 363 of file TF2.cxx. ◆ GetContour(). Int_t TF2::GetContour ; (; Double_t * ; levels = nullptr). virtual . Return contour values into array levels. ; The number of contour levels can be returned by getContourLevel ; Definition at line 326 of file TF2.cxx. ◆ GetContourLevel(). Double_t TF2::GetContourLevel ; (; Int_t ; level); const. virtual . Return the number of contour levels. ; Definition at line 338 of file TF2.cxx. ◆ GetMaximum() [1/2]. Double_t TF2::GetMaximum ; (; Double_t * ; x); const. virtual . Return maximum value of the function See TF2::GetMinimum. ; Definition at line 474 of file TF2.cxx. ◆ GetMaximum() [2/2]. Double_t TF1::GetMaximum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented from TF1.; Definition at line 497 of file TF1.cxx. ◆ GetMaximumXY(). Double_t TF2::GetMaximumXY ; (; Double_t & ; x, . Double_t & ; y . ); const. virtual . Compute the X and Y",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:57429,Testability,log,logx,57429,"x. ◆ GetMaximum() [1/2]. Double_t TF2::GetMaximum ; (; Double_t * ; x); const. virtual . Return maximum value of the function See TF2::GetMinimum. ; Definition at line 474 of file TF2.cxx. ◆ GetMaximum() [2/2]. Double_t TF1::GetMaximum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented from TF1.; Definition at line 497 of file TF1.cxx. ◆ GetMaximumXY(). Double_t TF2::GetMaximumXY ; (; Double_t & ; x, . Double_t & ; y . ); const. virtual . Compute the X and Y values corresponding to the maximum value of the function. ; Return the maximum value of the function See TF2::GetMinimumXY ; Definition at line 440 of file TF2.cxx. ◆ GetMinimum() [1/2]. Double_t TF2::GetMinimum ; (; Double_t * ; x); const. virtual . Return minimum/maximum value of the function. ; To find the minimum on a range, first set this range via the SetRange function If a vector x of coordinate is passed it will be used as starting point for the minimum. In addition on exit x will contain the coordinate values at the minimuma If x is NULL or x is infinity or NaN, first, a grid search is performed to find the initial estimate of ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:57468,Testability,log,log,57468,"x. ◆ GetMaximum() [1/2]. Double_t TF2::GetMaximum ; (; Double_t * ; x); const. virtual . Return maximum value of the function See TF2::GetMinimum. ; Definition at line 474 of file TF2.cxx. ◆ GetMaximum() [2/2]. Double_t TF1::GetMaximum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented from TF1.; Definition at line 497 of file TF1.cxx. ◆ GetMaximumXY(). Double_t TF2::GetMaximumXY ; (; Double_t & ; x, . Double_t & ; y . ); const. virtual . Compute the X and Y values corresponding to the maximum value of the function. ; Return the maximum value of the function See TF2::GetMinimumXY ; Definition at line 440 of file TF2.cxx. ◆ GetMinimum() [1/2]. Double_t TF2::GetMinimum ; (; Double_t * ; x); const. virtual . Return minimum/maximum value of the function. ; To find the minimum on a range, first set this range via the SetRange function If a vector x of coordinate is passed it will be used as starting point for the minimum. In addition on exit x will contain the coordinate values at the minimuma If x is NULL or x is infinity or NaN, first, a grid search is performed to find the initial estimate of ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:57516,Testability,log,log,57516,"x. ◆ GetMaximum() [1/2]. Double_t TF2::GetMaximum ; (; Double_t * ; x); const. virtual . Return maximum value of the function See TF2::GetMinimum. ; Definition at line 474 of file TF2.cxx. ◆ GetMaximum() [2/2]. Double_t TF1::GetMaximum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented from TF1.; Definition at line 497 of file TF1.cxx. ◆ GetMaximumXY(). Double_t TF2::GetMaximumXY ; (; Double_t & ; x, . Double_t & ; y . ); const. virtual . Compute the X and Y values corresponding to the maximum value of the function. ; Return the maximum value of the function See TF2::GetMinimumXY ; Definition at line 440 of file TF2.cxx. ◆ GetMinimum() [1/2]. Double_t TF2::GetMinimum ; (; Double_t * ; x); const. virtual . Return minimum/maximum value of the function. ; To find the minimum on a range, first set this range via the SetRange function If a vector x of coordinate is passed it will be used as starting point for the minimum. In addition on exit x will contain the coordinate values at the minimuma If x is NULL or x is infinity or NaN, first, a grid search is performed to find the initial estimate of ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:59128,Testability,log,logx,59128,"et this range via the SetRange function If a vector x of coordinate is passed it will be used as starting point for the minimum. In addition on exit x will contain the coordinate values at the minimuma If x is NULL or x is infinity or NaN, first, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx and fNpy sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx and SetNpy functions Then, a minimization is used with starting values found by the grid search The minimizer algorithm used (by default Minuit) can be changed by callinga ROOT::Math::Minimizer::SetDefaultMinimizerType("".."") Other option for the minimizer can be set using the static method of the MinimizerOptions class ; Definition at line 465 of file TF2.cxx. ◆ GetMinimum() [2/2]. Double_t TF1::GetMinimum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented from TF1.; Definition at line 498 of file TF1.cxx. ◆ GetMinimumXY(). Double_t TF2::GetMinimumXY ; (; Double_t & ; x, . Double_t & ; y . ); const. ",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:59798,Testability,log,logx,59798,"ltMinimizerType("".."") Other option for the minimizer can be set using the static method of the MinimizerOptions class ; Definition at line 465 of file TF2.cxx. ◆ GetMinimum() [2/2]. Double_t TF1::GetMinimum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented from TF1.; Definition at line 498 of file TF1.cxx. ◆ GetMinimumXY(). Double_t TF2::GetMinimumXY ; (; Double_t & ; x, . Double_t & ; y . ); const. virtual . Compute the X and Y values corresponding to the minimum value of the function. ; Return the minimum value of the function To find the minimum on a range, first set this range via the SetRange function; Method: First, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx and fNpy sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx and SetNpy functions Then, a minimization is used with starting values found by the grid search The minimizer algorithm used (by default Minuit) can be changed by callinga ROOT::Math::Minimizer::SetDefaultMinimizerType(""..""",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:59837,Testability,log,log,59837,"ltMinimizerType("".."") Other option for the minimizer can be set using the static method of the MinimizerOptions class ; Definition at line 465 of file TF2.cxx. ◆ GetMinimum() [2/2]. Double_t TF1::GetMinimum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented from TF1.; Definition at line 498 of file TF1.cxx. ◆ GetMinimumXY(). Double_t TF2::GetMinimumXY ; (; Double_t & ; x, . Double_t & ; y . ); const. virtual . Compute the X and Y values corresponding to the minimum value of the function. ; Return the minimum value of the function To find the minimum on a range, first set this range via the SetRange function; Method: First, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx and fNpy sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx and SetNpy functions Then, a minimization is used with starting values found by the grid search The minimizer algorithm used (by default Minuit) can be changed by callinga ROOT::Math::Minimizer::SetDefaultMinimizerType(""..""",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF2.html:59885,Testability,log,log,59885,"ltMinimizerType("".."") Other option for the minimizer can be set using the static method of the MinimizerOptions class ; Definition at line 465 of file TF2.cxx. ◆ GetMinimum() [2/2]. Double_t TF1::GetMinimum ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented from TF1.; Definition at line 498 of file TF1.cxx. ◆ GetMinimumXY(). Double_t TF2::GetMinimumXY ; (; Double_t & ; x, . Double_t & ; y . ); const. virtual . Compute the X and Y values corresponding to the minimum value of the function. ; Return the minimum value of the function To find the minimum on a range, first set this range via the SetRange function; Method: First, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx and fNpy sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx and SetNpy functions Then, a minimization is used with starting values found by the grid search The minimizer algorithm used (by default Minuit) can be changed by callinga ROOT::Math::Minimizer::SetDefaultMinimizerType(""..""",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
https://root.cern/doc/master/classTF3.html:14495,Availability,avail,available,14495,"],[ay,by]. ;  ; TF2 & operator= (const TF2 &rhs);  Operator =. ;  ; virtual void SetContour (Int_t nlevels=20, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetNpy (Int_t npy=100);  Set the number of points used to draw the function. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Double_t Variance2X (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ; virtual Double_t Variance2Y (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TF1;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions GL - function will be always stored in the global list of functions , independently of the global setting of TF1::DefaultAddToGlobalList. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, EAddToList addToGlobList=EAddToList::kDefault, bool vectorize=false);  TF1 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, const char *, const char *, EAddToList addToGlobList=EAddToList::kDefault);  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  ;  TF1 (const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  F",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:25547,Availability,toler,tolerance,25547,"uble_t epsilon=1.E-2);  Return Error on Integral of a parametric function with dimension larger than one between a[] and b[] due to the parameters uncertainties. ;  ; virtual Double_t IntegralFast (Int_t num, Double_t *x, Double_t *w, Double_t a, Double_t b, Double_t *params=nullptr, Double_t epsilon=1e-12);  Gauss-Legendre integral, see CalcGaussLegendreSamplingPoints. ;  ; virtual Double_t IntegralMultiple (Int_t n, const Double_t *a, const Double_t *b, Double_t epsrel, Double_t &relerr);  See more general prototype below. ;  ; virtual Double_t IntegralMultiple (Int_t n, const Double_t *a, const Double_t *b, Int_t maxpts, Double_t epsrel, Double_t epsabs, Double_t &relerr, Int_t &nfnevl, Int_t &ifail);  This function computes, to an attempted specified accuracy, the value of the integral. ;  ; virtual Double_t IntegralMultiple (Int_t n, const Double_t *a, const Double_t *b, Int_t, Int_t maxpts, Double_t epsrel, Double_t &relerr, Int_t &nfnevl, Int_t &ifail);  ; virtual Double_t IntegralOneDim (Double_t a, Double_t b, Double_t epsrel, Double_t epsabs, Double_t &err);  Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ;  ; virtual Bool_t IsEvalNormalized () const;  ; virtual Bool_t IsLinear () const;  ; virtual Bool_t IsValid () const;  Return kTRUE if the function is valid. ;  ; bool IsVectorized ();  ; virtual Double_t Mean (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ; virtual Double_t Moment (Double_t n, Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  Return nth moment of function between a and b. ;  ; template<class T > ; T operator() (const T *x, const Double_t *params=nullptr);  ; virtual Double_t operator() (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;  ; TF1 & operator= (const TF1 &rhs);  Operator =. ;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class want",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:26672,Availability,error,errors,26672,"ormalized () const;  ; virtual Bool_t IsLinear () const;  ; virtual Bool_t IsValid () const;  Return kTRUE if the function is valid. ;  ; bool IsVectorized ();  ; virtual Double_t Mean (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ; virtual Double_t Moment (Double_t n, Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  Return nth moment of function between a and b. ;  ; template<class T > ; T operator() (const T *x, const Double_t *params=nullptr);  ; virtual Double_t operator() (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;  ; TF1 & operator= (const TF1 &rhs);  Operator =. ;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; virtual void ReleaseParameter (Int_t ipar);  Release parameter number ipar during a fit operation. ;  ; virtual void SetChisquare (Double_t chi2);  ; virtual void SetFitResult (const ROOT::Fit::FitResult &result, const Int_t *indpar=nullptr);  Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (with size fNpar) of the parameter indices in the FitResult can be passed This is useful in the case of a combined fit with different functions, and the FitResult contains the global result By default it is assume that indpar = {0,1,2,....,fNpar-1}. ;  ; template<typename Func > ; void SetFunction (Func f);  ; template<class PtrObj , typename MemFn > ; void SetFunction (PtrObj &p, MemFn memFn);  ; virtual void SetMaximum (Double_t maximum=-1111);  Set the maximum value along Y for this function In case the function is already drawn, set also the maximum in the helper histogram. ;  ; virtual void SetMinimum (Double_t minimum=-1111);  Set the minimum value along Y for this function In case the function is already drawn, set also the minimum in the helper histogram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf shoul",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:28522,Availability,error,error,28522,"gram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of free parameters. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:28535,Availability,error,error,28535,"gram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of free parameters. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:28616,Availability,error,errors,28616,"ers. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it is assumed that the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the titles for the X and Y axis respectively. ;  ; virtual void SetVectorized (Bool_t",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:28630,Availability,error,errors,28630,"ers. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it is assumed that the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the titles for the X and Y axis respectively. ;  ; virtual void SetVectorized (Bool_t",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:28701,Availability,error,errors,28701,"ers. ;  ; void SetNdim (Int_t ndim);  ; virtual void SetNormalized (Bool_t flag);  ; virtual void SetNpx (Int_t npx=100);  Set the number of points used to draw the function. ;  ; virtual void SetNumberFitPoints (Int_t npfits);  ; virtual void SetParameter (const TString &name, Double_t value);  ; virtual void SetParameter (Int_t param, Double_t value);  ; virtual void SetParameters (const Double_t *params);  ; virtual void SetParameters (double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN());  Set parameter values. ;  ; virtual void SetParent (TObject *p=nullptr);  ; virtual void SetParError (Int_t ipar, Double_t error);  Set error for parameter number ipar. ;  ; virtual void SetParErrors (const Double_t *errors);  Set errors for all active parameters when calling this function, the array errors must have at least fNpar values. ;  ; virtual void SetParLimits (Int_t ipar, Double_t parmin, Double_t parmax);  Set lower and upper limits for parameter ipar. ;  ; virtual void SetParName (Int_t ipar, const char *name);  Set name of parameter number ipar. ;  ; virtual void SetParNames (const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it is assumed that the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the titles for the X and Y axis respectively. ;  ; virtual void SetVectorized (Bool_t",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:32844,Availability,error,error,32844,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:32933,Availability,error,error,32933,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return t",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:33088,Availability,error,error,33088,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:33265,Availability,error,error,33265,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:36966,Availability,error,error,36966,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:43053,Availability,error,error,43053,"; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; stat",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:49074,Availability,error,errors,49074,mma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::unique_ptr< TMethodCall > fMethodCall;  ! Pointer to MethodCall in case of interpreted function ;  ; Double_t fMinimum {-1111};  Minimum value for plotting. ;  ; Int_t fNDF {};  Number of degrees of freedom in the fit. ;  ; Int_t fNdim {};  Function dimension. ;  ; Bool_t fNormalized {false};  Normalization option (false by default) ;  ; Double_t fNormIntegral {};  Integral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Mar,MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:63166,Deployability,integrat,integrated,63166,"g to the minimum value of the function on its range. ; Returns the function value at the minimum. To find the minimum on a subrange, use the SetRange() function first.; Method: First, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx,fNpy and fNpz sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx(), SetNpy() and SetNpz() functions. Then, Minuit minimization is used with starting values found by the grid search; Note that this method will always do first a grid search in contrast to GetMinimum ; Definition at line 298 of file TF3.cxx. ◆ GetNpz(). Int_t TF3::GetNpz ; (; ); const. inline . Definition at line 91 of file TF3.h. ◆ GetRandom3(). void TF3::GetRandom3 ; (; Double_t & ; xrandom, . Double_t & ; yrandom, . Double_t & ; zrandom, . TRandom * ; rng = nullptr . ). virtual . Return 3 random numbers following this function shape. ; The distribution contained in this TF3 function is integrated over the cell contents. It is normalized to 1. Getting the three random numbers implies:; Generating a random number between 0 and 1 (say r1); Look in which cell in the normalized integral r1 corresponds to; make a linear interpolation in the returned cell. IMPORTANT NOTE; The integral of the function is computed at fNpx * fNpy * fNpz points. If the function has sharp peaks, you should increase the number of points (SetNpx, SetNpy, SetNpz) such that the peak is correctly tabulated at several points. ; Definition at line 342 of file TF3.cxx. ◆ GetRange() [1/7]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; xmax . ); const. virtual . Return range of a 1-D function. ; Reimplemented from TF2.; Definition at line 575 of file TF1.cxx. ◆ GetRange() [2/7]. void TF3::GetRange ; (; Double_t & ; xmin, . Double_t & ; xmax . ); const. inlineoverridevirtual . Return range of a 1-D function. ; Reimplemented from TF2.; Definition at line 139 of file TF3.h. ◆ GetRange()",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:32850,Integrability,message,message,32850,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:33271,Integrability,message,message,33271,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:34129,Integrability,message,message,34129," this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:36972,Integrability,message,message,36972,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:37345,Integrability,message,message,37345,"move this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:42461,Integrability,interface,interface,42461,"tual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF2; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag i",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:47898,Integrability,wrap,wrap,47898,for the graphical representation. ;  ; Double_t fZmax;  Upper bound for the range in z. ;  ; Double_t fZmin;  Lower bound for the range in z. ;  ;  Protected Attributes inherited from TF2; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fNpy;  Number of points along y used for the graphical representation. ;  ; Double_t fYmax;  Upper bound for the range in y. ;  ; Double_t fYmin;  Lower bound for the range in y. ;  ;  Protected Attributes inherited from TF1; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsComposition > fComposition;  Pointer to composition (NSUM or CONV) ;  ; std::unique_ptr< TFormula > fFormula;  Pointer to TFormula in case when user define formula. ;  ; std::unique_ptr< TF1FunctorPointer > fFunctor;  ! Functor object to wrap any C++ callable object ;  ; std::vector< Double_t > fGamma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::unique_ptr< TMethodCall > fMethodCall;  ! Pointer to MethodCall in case of interpreted function ;  ; Double_t fMinimum {-1111};  Minimum value for plotting. ;  ; Int_t fNDF {};  Number of degrees of freedom in the fit. ;  ; Int_t fNdim {};  Function dimension. ;  ; Bool_t fNormalized {false};  Normalization option (false by default) ;  ; Double_t fNormIntegral {};  Integral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (,MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:63166,Integrability,integrat,integrated,63166,"g to the minimum value of the function on its range. ; Returns the function value at the minimum. To find the minimum on a subrange, use the SetRange() function first.; Method: First, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx,fNpy and fNpz sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx(), SetNpy() and SetNpz() functions. Then, Minuit minimization is used with starting values found by the grid search; Note that this method will always do first a grid search in contrast to GetMinimum ; Definition at line 298 of file TF3.cxx. ◆ GetNpz(). Int_t TF3::GetNpz ; (; ); const. inline . Definition at line 91 of file TF3.h. ◆ GetRandom3(). void TF3::GetRandom3 ; (; Double_t & ; xrandom, . Double_t & ; yrandom, . Double_t & ; zrandom, . TRandom * ; rng = nullptr . ). virtual . Return 3 random numbers following this function shape. ; The distribution contained in this TF3 function is integrated over the cell contents. It is normalized to 1. Getting the three random numbers implies:; Generating a random number between 0 and 1 (say r1); Look in which cell in the normalized integral r1 corresponds to; make a linear interpolation in the returned cell. IMPORTANT NOTE; The integral of the function is computed at fNpx * fNpy * fNpz points. If the function has sharp peaks, you should increase the number of points (SetNpx, SetNpy, SetNpz) such that the peak is correctly tabulated at several points. ; Definition at line 342 of file TF3.cxx. ◆ GetRange() [1/7]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; xmax . ); const. virtual . Return range of a 1-D function. ; Reimplemented from TF2.; Definition at line 575 of file TF1.cxx. ◆ GetRange() [2/7]. void TF3::GetRange ; (; Double_t & ; xmin, . Double_t & ; xmax . ); const. inlineoverridevirtual . Return range of a 1-D function. ; Reimplemented from TF2.; Definition at line 139 of file TF3.h. ◆ GetRange()",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:8902,Modifiability,inherit,inherited,8902,"xmax) override;  Initialize the upper and lower bounds to draw the function. ;  ; void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax) override;  Initialize the upper and lower bounds to draw the function-. ;  ; void SetRange (Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax) override;  Initialize the upper and lower bounds to draw the function. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TF3. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Double_t Variance3X (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t az, Double_t bz, Double_t epsilon=0.000001);  ; virtual Double_t Variance3Y (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t az, Double_t bz, Double_t epsilon=0.000001);  ; virtual Double_t Variance3Z (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t az, Double_t bz, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TF2;  TF2 ();  TF2 default constructor. ;  ;  TF2 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Option_t *opt=nullptr);  F2 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF2 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Int_t npar, const char *, const char *);  Backward compatible ctor. ;  ; template<class PtrObj , typename MemFn > ;  TF2 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Int_t npar, Int_t ndim=2);  Template constructors from a pointer to any C++ class of type PtrObj with a specific member function of type MemFn. ;  ;  TF2 (const char *name, Double_t(*fcn)(const Double_t *, const Double_t *), Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Int_t npar=0, Int_t ndim=2);  F2 constructor using a pointer to a compiled function",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:14254,Modifiability,inherit,inherited,14254,"uble_t Mean2Y (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ; virtual Double_t Moment2 (Double_t nx, Double_t ax, Double_t bx, Double_t ny, Double_t ay, Double_t by, Double_t epsilon=0.000001);  Return x^nx * y^ny moment of a 2d function in range [ax,bx],[ay,by]. ;  ; TF2 & operator= (const TF2 &rhs);  Operator =. ;  ; virtual void SetContour (Int_t nlevels=20, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetNpy (Int_t npy=100);  Set the number of points used to draw the function. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Double_t Variance2X (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ; virtual Double_t Variance2Y (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TF1;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions GL - function will be always stored in the global list of functions , independently of the global setting of TF1::DefaultAddToGlobalList. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, EAddToList addToGlobList=EAddToList::kDefault, bool vectorize=false);  TF1 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, const char *, const char *, EAddToList addToGlobList=EAddToList::kDefault);  ; template<class PtrObj , typename MemFn > ;  TF",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:30028,Modifiability,inherit,inherited,30028,"3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""");  Set up to 10 parameter names. ;  ; virtual void SetSavedPoint (Int_t point, Double_t value);  Restore value of function saved at point. ;  ; void SetTitle (const char *title="""") override;  Set function title if title has the form ""fffffff;xxxx;yyyy"", it is assumed that the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the titles for the X and Y axis respectively. ;  ; virtual void SetVectorized (Bool_t vectorized);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update ();  Called by functions such as SetRange, SetNpx, SetParameters to force the deletion of the associated histogram or Integral. ;  ; virtual Double_t Variance (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title.",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:31687,Modifiability,inherit,inherited,31687,"fer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:32480,Modifiability,inherit,inheritance,32480,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ;",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:34227,Modifiability,inherit,inherits,34227,"l (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:34344,Modifiability,inherit,inherits,34344," (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:37652,Modifiability,inherit,inherited,37652,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:39157,Modifiability,inherit,inherited,39157,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:40412,Modifiability,inherit,inherited,40412,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:42026,Modifiability,inherit,inherited,42026,"n="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF2; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last ca",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:42233,Modifiability,inherit,inherited,42233,"n="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF2; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last ca",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:43692,Modifiability,inherit,inherited,43692,"ic method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:43902,Modifiability,inherit,inherited,43902,"ic method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:44420,Modifiability,inherit,inherited,44420,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t FindMinMax (Double_t *x, bool findmax) const override;  Return minimum/maximum value of the function. ;  ;  Protected Member Functions inherited from TF1;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:44632,Modifiability,inherit,inherited,44632,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t FindMinMax (Double_t *x, bool findmax) const override;  Return minimum/maximum value of the function. ;  ;  Protected Member Functions inherited from TF1;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:44844,Modifiability,inherit,inherited,44844,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t FindMinMax (Double_t *x, bool findmax) const override;  Return minimum/maximum value of the function. ;  ;  Protected Member Functions inherited from TF1;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:45519,Modifiability,inherit,inherited,45519,"unctions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t FindMinMax (Double_t *x, bool findmax) const override;  Return minimum/maximum value of the function. ;  ;  Protected Member Functions inherited from TF1;  TF1 (EFType functionType, const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute the cumulative function at fNpx points between fXmin and fXmax. ;  ; virtual TH1 * DoCreateHistogram (Double_t xmin, Double_t xmax, Bool_t recreate=kFALSE);  Create histogram with bin content equal to function value computed at the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ;  ; void DoInitialize (EAddToList addToGlobList);  Common initialization of the TF1. ;  ; virtual Double_t GetMinMaxNDim (Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; void IntegrateForNormalization ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *locati",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:46548,Modifiability,inherit,inherited,46548,"e_t xmin, Double_t xmax, Int_t npar, Int_t ndim, EAddToList addToGlobList, TF1Parameters *params=nullptr, TF1FunctorPointer *functor=nullptr);  General constructor for TF1. Most of the other constructors delegate on it. ;  ; Bool_t ComputeCdfTable (Option_t *opt);  Compute the cumulative function at fNpx points between fXmin and fXmax. ;  ; virtual TH1 * DoCreateHistogram (Double_t xmin, Double_t xmax, Bool_t recreate=kFALSE);  Create histogram with bin content equal to function value computed at the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ;  ; void DoInitialize (EAddToList addToGlobList);  Common initialization of the TF1. ;  ; virtual Double_t GetMinMaxNDim (Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; void IntegrateForNormalization ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fClipBox [3];  ! Coordinates of clipbox ;  ; Bool_t fClipBoxOn {kFALSE};  ! Is clip box on ;  ; Int_t fNpz;  Number of points along z used for the graphical representation. ;  ; Double_t fZmax;  Upper bound for the range in z. ;  ; Double_t fZmin;  Lower bound for the range in z. ;  ;  Protected Attributes inherited from TF2; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fNpy;  Number of points along y used for the graphical representation. ;  ; Double_t fYmax;  Upper bound for the range in y. ;  ; Double_t fYmin;  Lower bound for the range in y. ;  ;  Protected Attributes inherited from TF1; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:47070,Modifiability,inherit,inherited,47070,"the bin center This histogram will be used to paint the function A re-creation is forced and a new histogram is done if recreate=true. ;  ; void DoInitialize (EAddToList addToGlobList);  Common initialization of the TF1. ;  ; virtual Double_t GetMinMaxNDim (Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; void IntegrateForNormalization ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fClipBox [3];  ! Coordinates of clipbox ;  ; Bool_t fClipBoxOn {kFALSE};  ! Is clip box on ;  ; Int_t fNpz;  Number of points along z used for the graphical representation. ;  ; Double_t fZmax;  Upper bound for the range in z. ;  ; Double_t fZmin;  Lower bound for the range in z. ;  ;  Protected Attributes inherited from TF2; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fNpy;  Number of points along y used for the graphical representation. ;  ; Double_t fYmax;  Upper bound for the range in y. ;  ; Double_t fYmin;  Lower bound for the range in y. ;  ;  Protected Attributes inherited from TF1; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsComposition > fComposition;  Pointer to composition (NSUM or CONV) ;  ; std::unique_ptr< TFormula > fFormula;  Pointer to TFormula in case when user define formula. ;  ; std::unique_ptr< TF1FunctorPointer > fFunctor;  ! Functor object to wrap any C++ callable object ;  ; std::vector< Double_t > fGamma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIn",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:47359,Modifiability,inherit,inherited,47359,"Double_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; void IntegrateForNormalization ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fClipBox [3];  ! Coordinates of clipbox ;  ; Bool_t fClipBoxOn {kFALSE};  ! Is clip box on ;  ; Int_t fNpz;  Number of points along z used for the graphical representation. ;  ; Double_t fZmax;  Upper bound for the range in z. ;  ; Double_t fZmin;  Lower bound for the range in z. ;  ;  Protected Attributes inherited from TF2; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fNpy;  Number of points along y used for the graphical representation. ;  ; Double_t fYmax;  Upper bound for the range in y. ;  ; Double_t fYmin;  Lower bound for the range in y. ;  ;  Protected Attributes inherited from TF1; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsComposition > fComposition;  Pointer to composition (NSUM or CONV) ;  ; std::unique_ptr< TFormula > fFormula;  Pointer to TFormula in case when user define formula. ;  ; std::unique_ptr< TF1FunctorPointer > fFunctor;  ! Functor object to wrap any C++ callable object ;  ; std::vector< Double_t > fGamma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::unique_ptr< TMethodCall > fMethodCall;  ! Pointer to MethodCall in case of interpreted function ;  ; Double_t fMinimum {-1111};  Minimum value for plotting. ;  ; In",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:49531,Modifiability,inherit,inherited,49531,"egral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 ",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:49613,Modifiability,inherit,inherited,49613,"egral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 ",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:49774,Modifiability,inherit,inherited,49774,"aphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , k",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:49907,Modifiability,inherit,inherited,49907,"rmula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:50101,Modifiability,inherit,inherited,50101,"uble_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited ",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:50310,Modifiability,inherit,inherited,50310,"lues. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TF1; static std::atomic< Bool_t > fgAbsValue;  ; static std::atomic< Bool_t > fgAddToGlobList;  ; static TF1 * ",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:50951,Modifiability,inherit,inherited,50951," ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TF1; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TF1; static std::atomic< Bool_t > fgAbsValue;  ; static std::atomic< Bool_t > fgAddToGlobList;  ; static TF1 * fgCurrent = nullptr;  ; static Bool_t fgRejectPoint = kFALSE;  . #include <TF3.h>. Inheritance diagram for TF3:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF3() [1/10]. TF3::TF3 ; (; ). F3 default constructor. ; Definition at line 37 of file TF3.cxx. ◆ TF3() [2/10]. TF3::TF3 ; (; const char * ; name, . const char * ; formula, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Double_t ; ymin = 0, . Double_t ; ymax = 1, . Double_t ; zmin = 0, . Double_t ; zmax = 1, . Option_t * ; opt = nullptr . ). F3 constructor using a formula definition. ; See TFormula constructor fo",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:51116,Modifiability,inherit,inherited,51116,"< ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TF1; static std::atomic< Bool_t > fgAbsValue;  ; static std::atomic< Bool_t > fgAddToGlobList;  ; static TF1 * fgCurrent = nullptr;  ; static Bool_t fgRejectPoint = kFALSE;  . #include <TF3.h>. Inheritance diagram for TF3:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF3() [1/10]. TF3::TF3 ; (; ). F3 default constructor. ; Definition at line 37 of file TF3.cxx. ◆ TF3() [2/10]. TF3::TF3 ; (; const char * ; name, . const char * ; formula, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Double_t ; ymin = 0, . Double_t ; ymax = 1, . Double_t ; zmin = 0, . Double_t ; zmax = 1, . Option_t * ; opt = nullptr . ). F3 constructor using a formula definition. ; See TFormula constructor for explanation of the formula syntax. ; Definition at line 50 of file TF3.cxx. ◆ TF3() [3/10]. TF3::TF3 ; (; const char * ; name, . Double_t(*)(Double_t *, Double_t *) ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Double_t ; ymin =",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:51216,Modifiability,inherit,inherited,51216,"< ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TF1; enum  EFType { ;   kFormula = 0; , kPtrScalarFreeFcn; , kInterpreted; , kTemplVec; , ;   kTemplScalar; , kCompositionFcn. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TF1; static std::atomic< Bool_t > fgAbsValue;  ; static std::atomic< Bool_t > fgAddToGlobList;  ; static TF1 * fgCurrent = nullptr;  ; static Bool_t fgRejectPoint = kFALSE;  . #include <TF3.h>. Inheritance diagram for TF3:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF3() [1/10]. TF3::TF3 ; (; ). F3 default constructor. ; Definition at line 37 of file TF3.cxx. ◆ TF3() [2/10]. TF3::TF3 ; (; const char * ; name, . const char * ; formula, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Double_t ; ymin = 0, . Double_t ; ymax = 1, . Double_t ; zmin = 0, . Double_t ; zmax = 1, . Option_t * ; opt = nullptr . ). F3 constructor using a formula definition. ; See TFormula constructor for explanation of the formula syntax. ; Definition at line 50 of file TF3.cxx. ◆ TF3() [3/10]. TF3::TF3 ; (; const char * ; name, . Double_t(*)(Double_t *, Double_t *) ; fcn, . Double_t ; xmin = 0, . Double_t ; xmax = 1, . Double_t ; ymin =",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:60815,Performance,perform,performed,60815,"aph*)myfunc.DrawIntegral(option);; The resulting graph will be drawn into the current pad. If this function is used via the context menu, it recommended to create a new canvas/pad before invoking this function. ; Reimplemented from TF2.; Definition at line 87 of file TF3.h. ◆ ExecuteEvent(). void TF3::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a F3 is clicked with the locator ; Reimplemented from TF2.; Definition at line 209 of file TF3.cxx. ◆ FindMinMax(). Double_t TF3::FindMinMax ; (; Double_t * ; x, . bool ; findmax . ); const. overrideprotectedvirtual . Return minimum/maximum value of the function. ; To find the minimum on a range, first set this range via the SetRange function If a vector x of coordinate is passed it will be used as starting point for the minimum. In addition on exit x will contain the coordinate values at the minimuma If x is NULL or x is inifinity or NaN, first, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx and fNpy sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx and SetNpy functions; Then, a minimization is used with starting values found by the grid search The minimizer algorithm used (by default Minuit) can be changed by callinga ROOT::Math::Minimizer::SetDefaultMinimizerType("".."") Other option for the minimizer can be set using the static method of the MinimizerOptions class ; Reimplemented from TF2.; Definition at line 230 of file TF3.cxx. ◆ GetClippingBox(). virtual const Double_t * TF3::GetClippingBox ; (; ); const. inlinevirtual . Definition at line 110 of file TF3.h. ◆ GetClippingBoxOn(). virtual Bool_t TF3::GetClippingBoxOn ; (; ); const. inlinevirtual . Definition at line 108 of file TF3.h. ◆ GetMaximumXYZ(). Double_t TF3::GetMaximumXYZ ; (; Double_t & ; x, . Double_t & ; y, . Double_t & ; z .",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:62357,Performance,perform,performed,62357," Definition at line 230 of file TF3.cxx. ◆ GetClippingBox(). virtual const Double_t * TF3::GetClippingBox ; (; ); const. inlinevirtual . Definition at line 110 of file TF3.h. ◆ GetClippingBoxOn(). virtual Bool_t TF3::GetClippingBoxOn ; (; ); const. inlinevirtual . Definition at line 108 of file TF3.h. ◆ GetMaximumXYZ(). Double_t TF3::GetMaximumXYZ ; (; Double_t & ; x, . Double_t & ; y, . Double_t & ; z . ). virtual . Compute the X, Y and Z values corresponding to the maximum value of the function on its range. ; Return the function value at the maximum. See TF3::GetMinimumXYZ ; Definition at line 314 of file TF3.cxx. ◆ GetMinimumXYZ(). Double_t TF3::GetMinimumXYZ ; (; Double_t & ; x, . Double_t & ; y, . Double_t & ; z . ). virtual . Compute the X, Y and Z values corresponding to the minimum value of the function on its range. ; Returns the function value at the minimum. To find the minimum on a subrange, use the SetRange() function first.; Method: First, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx,fNpy and fNpz sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx(), SetNpy() and SetNpz() functions. Then, Minuit minimization is used with starting values found by the grid search; Note that this method will always do first a grid search in contrast to GetMinimum ; Definition at line 298 of file TF3.cxx. ◆ GetNpz(). Int_t TF3::GetNpz ; (; ); const. inline . Definition at line 91 of file TF3.h. ◆ GetRandom3(). void TF3::GetRandom3 ; (; Double_t & ; xrandom, . Double_t & ; yrandom, . Double_t & ; zrandom, . TRandom * ; rng = nullptr . ). virtual . Return 3 random numbers following this function shape. ; The distribution contained in this TF3 function is integrated over the cell contents. It is normalized to 1. Getting the three random numbers implies:; Generating a random number between 0 and 1 (say r1); Look in which cell in the normalized integral r1 cor",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:42456,Safety,safe,safe,42456,"tual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF2; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag i",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:42782,Safety,avoid,avoid,42782,"al (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF2; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char ",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:30896,Security,hash,hash,30896," ; virtual Double_t Variance (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const cha",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:11819,Testability,log,logx,11819,"le *) ;  ;  TF2 (const TF2 &f2);  Copy constructor. ;  ;  ~TF2 () override;  F2 default destructor. ;  ; virtual Double_t CentralMoment2 (Double_t nx, Double_t ax, Double_t bx, Double_t ny, Double_t ay, Double_t by, Double_t epsilon=0.000001);  Return x^nx * y^ny central moment of a 2d function in range [ax,bx],[ay,by]. ;  ; virtual Double_t Covariance2XY (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ; TF1 * DrawCopy (Option_t *option="""") const override;  Draw a copy of this function with its current attributes-*. ;  ; virtual Int_t GetContour (Double_t *levels=nullptr);  Return contour values into array levels. ;  ; virtual Double_t GetContourLevel (Int_t level) const;  Return the number of contour levels. ;  ; virtual Double_t GetMaximum (Double_t *x) const;  Return maximum value of the function See TF2::GetMinimum. ;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t *x) const;  Return minimum/maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the minimum value of the function. ;  ; Int_t GetNpy () const;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; Double_t GetRandom (Double_t xmin, Double_t xmax, TRandom *rng=nullptr, Option_t *opt=nullptr) override;  Return a random number following this function shape. ;  ; Double_t GetRandom (TRandom *rng=nullptr, Option",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:12251,Testability,log,logx,12251,"* DrawCopy (Option_t *option="""") const override;  Draw a copy of this function with its current attributes-*. ;  ; virtual Int_t GetContour (Double_t *levels=nullptr);  Return contour values into array levels. ;  ; virtual Double_t GetContourLevel (Int_t level) const;  Return the number of contour levels. ;  ; virtual Double_t GetMaximum (Double_t *x) const;  Return maximum value of the function See TF2::GetMinimum. ;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t *x) const;  Return minimum/maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the minimum value of the function. ;  ; Int_t GetNpy () const;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; Double_t GetRandom (Double_t xmin, Double_t xmax, TRandom *rng=nullptr, Option_t *opt=nullptr) override;  Return a random number following this function shape. ;  ; Double_t GetRandom (TRandom *rng=nullptr, Option_t *opt=nullptr) override;  Return a random number following this function shape. ;  ; virtual void GetRandom2 (Double_t &xrandom, Double_t &yrandom, TRandom *rng=nullptr);  Return 2 random numbers following this function shape. ;  ; virtual Double_t GetYmax () const;  ; virtual Double_t GetYmin () const;  ; virtual Double_t Mean2X (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ; virtual Double_t Mean2Y (Doub",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:20643,Testability,log,logx,20643," needs to use the fit option 'B' to have the fix of the paramter effective. ;  ; Double_t GetChisquare () const;  Return the Chisquare after fitting. See ROOT::Fit::FitResult::Chi2() ;  ; virtual TString GetExpFormula (Option_t *option="""") const;  ; virtual TFormula * GetFormula ();  ; virtual const TFormula * GetFormula () const;  ; virtual TH1 * GetHistogram () const;  Return a pointer to the histogram used to visualise the function Note that this histogram is managed by the function and in same case it is automatically deleted when some TF1 functions are called such as TF1::SetParameters, TF1::SetNpx, TF1::SetRange It is then reccomended either to clone the return object or calling again teh GetHistogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ; virtual Int_t GetNdim () const;  ; virtual Int_t GetNpar () const;  ; virtual Int_t GetNpx () const;  ; virtual Int_t GetNumber () const;  ; virtual Int_t GetNumberFitPoints () const;  ; virtual Int_t GetNumberFreeParameters () const;  Return the number of free parameters. ;  ; virtual Double_t GetParameter (const TString &name) const;  ; virtual Double_t GetParameter (Int_t ipar) const;  ; virtual Double_t * GetParameters () const;  ; virtual void G",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:20943,Testability,log,logx,20943,"Formula () const;  ; virtual TH1 * GetHistogram () const;  Return a pointer to the histogram used to visualise the function Note that this histogram is managed by the function and in same case it is automatically deleted when some TF1 functions are called such as TF1::SetParameters, TF1::SetNpx, TF1::SetRange It is then reccomended either to clone the return object or calling again teh GetHistogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ; virtual Int_t GetNdim () const;  ; virtual Int_t GetNpar () const;  ; virtual Int_t GetNpx () const;  ; virtual Int_t GetNumber () const;  ; virtual Int_t GetNumberFitPoints () const;  ; virtual Int_t GetNumberFreeParameters () const;  Return the number of free parameters. ;  ; virtual Double_t GetParameter (const TString &name) const;  ; virtual Double_t GetParameter (Int_t ipar) const;  ; virtual Double_t * GetParameters () const;  ; virtual void GetParameters (Double_t *params);  ; TObject * GetParent () const;  ; virtual Double_t GetParError (Int_t ipar) const;  Return value of parameter number ipar. ;  ; virtual const Double_t * GetParErrors () const;  ; virtual void GetParLimits (Int_t ipar, Double_t &parmin, Double_t &parmax) const;  Return limits for",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:22502,Testability,log,logx,22502," TString &name) const;  ; virtual Double_t GetParameter (Int_t ipar) const;  ; virtual Double_t * GetParameters () const;  ; virtual void GetParameters (Double_t *params);  ; TObject * GetParent () const;  ; virtual Double_t GetParError (Int_t ipar) const;  Return value of parameter number ipar. ;  ; virtual const Double_t * GetParErrors () const;  ; virtual void GetParLimits (Int_t ipar, Double_t &parmin, Double_t &parmax) const;  Return limits for parameter ipar. ;  ; virtual const char * GetParName (Int_t ipar) const;  ; virtual Int_t GetParNumber (const char *name) const;  ; virtual Double_t GetProb () const;  Return the fit probability. ;  ; virtual Int_t GetQuantiles (Int_t n, Double_t *xp, const Double_t *p);  Compute Quantiles for density distribution of this function. ;  ; virtual Double_t GetVariable (const TString &name);  ; virtual Double_t GetX (Double_t y, Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the function value fy for (xmin<x<xmax). ;  ; TAxis * GetXaxis () const;  Get x axis of the function. ;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; TAxis * GetYaxis () const;  Get y axis of the function. ;  ; TAxis * GetZaxis () const;  Get z axis of the function. (In case this object is a TF2 or TF3) ;  ; virtual void GradientPar (const Double_t *x, Double_t *grad, Double_t eps=0.01);  Compute the gradient wrt parameters If the TF1 object is based on a formula expression (TFormula) and TFormula::GenerateGradientPar() has been successfully called automatic differentiation using CLAD is used instead of the default numerical differentiation. ;  ; template<class T > ; void GradientPar (const T *x, T *grad, Double_t eps=0.01);  ; virtual Double_t GradientPar (Int_t ipar, const Double_t *x, Double_t eps=0.01);  Compute the gradient (derivative) wrt a parameter ipar. ;  ; template<class T > ; T GradientPar (Int_t ipar, const T *x, Do",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTF3.html:43495,Testability,test,tested,43495," interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass *",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
https://root.cern/doc/master/classTFeldmanCousins.html:5198,Availability,error,error,5198,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:5287,Availability,error,error,5287,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:5442,Availability,error,error,5442,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:5739,Availability,error,error,5739,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:10303,Availability,error,error,10303," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:386,Integrability,interface,interface,386,". ROOT: TFeldmanCousins Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFeldmanCousins Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TFeldmanCousins is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFeldmanCousins might still be a valid solution. Consider switching to RooStats for non-trivial cases. ; Class to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889; The default confidence interval calculated using this method is 90% This is set either by having a default the constructor, or using the appropriate fraction when instantiating an object of this class (e.g. 0.9); The simple extension to a gaussian resolution function bounded at zero has not been addressed as yet -> ‘time is of the essence’ as they write on the wall of the maze in that classic game ...; VARIABLES THAT CAN BE ALTERED; => depending on your desired precision: The initial values of fMuMin, fMuMax, fMuStep and fNMax are those used in the PRD: fMuMin = 0.0; fMuMax = 50.0; fMuStep= 0.005; TFeldmanCousins::fMuMaxDouble_t fMuMaxDefinition TFeldmanCousins.h:55; TFeldmanCousins::fMuStepDouble_t fMuStepDefinition TFeldmanCousins.h:56; TFeldmanCousins::fMuMinDouble_t fMuMinDefinition TFeldmanCousins.h:54; but there is total flexibility in changing this should you desire.; see example of use in $ROOTSYS/tutorials/math/FeldmanCousins.C; see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?"" in the TRolke class description.; Author: Adrian Bevan, Liverpool University; Copyright Liverpool University 2001 bevan.nosp@m.@sla.nosp@m.c.sta.nosp@m.nfor.nosp@m.d.edu ; Definition at line 47 of file TFeldman",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:527,Integrability,depend,depending,527,". ROOT: TFeldmanCousins Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFeldmanCousins Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TFeldmanCousins is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFeldmanCousins might still be a valid solution. Consider switching to RooStats for non-trivial cases. ; Class to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889; The default confidence interval calculated using this method is 90% This is set either by having a default the constructor, or using the appropriate fraction when instantiating an object of this class (e.g. 0.9); The simple extension to a gaussian resolution function bounded at zero has not been addressed as yet -> ‘time is of the essence’ as they write on the wall of the maze in that classic game ...; VARIABLES THAT CAN BE ALTERED; => depending on your desired precision: The initial values of fMuMin, fMuMax, fMuStep and fNMax are those used in the PRD: fMuMin = 0.0; fMuMax = 50.0; fMuStep= 0.005; TFeldmanCousins::fMuMaxDouble_t fMuMaxDefinition TFeldmanCousins.h:55; TFeldmanCousins::fMuStepDouble_t fMuStepDefinition TFeldmanCousins.h:56; TFeldmanCousins::fMuMinDouble_t fMuMinDefinition TFeldmanCousins.h:54; but there is total flexibility in changing this should you desire.; see example of use in $ROOTSYS/tutorials/math/FeldmanCousins.C; see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?"" in the TRolke class description.; Author: Adrian Bevan, Liverpool University; Copyright Liverpool University 2001 bevan.nosp@m.@sla.nosp@m.c.sta.nosp@m.nfor.nosp@m.d.edu ; Definition at line 47 of file TFeldman",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:1215,Integrability,depend,depending,1215,"st of all members ; TFeldmanCousins Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TFeldmanCousins is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFeldmanCousins might still be a valid solution. Consider switching to RooStats for non-trivial cases. ; Class to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889; The default confidence interval calculated using this method is 90% This is set either by having a default the constructor, or using the appropriate fraction when instantiating an object of this class (e.g. 0.9); The simple extension to a gaussian resolution function bounded at zero has not been addressed as yet -> ‘time is of the essence’ as they write on the wall of the maze in that classic game ...; VARIABLES THAT CAN BE ALTERED; => depending on your desired precision: The initial values of fMuMin, fMuMax, fMuStep and fNMax are those used in the PRD: fMuMin = 0.0; fMuMax = 50.0; fMuStep= 0.005; TFeldmanCousins::fMuMaxDouble_t fMuMaxDefinition TFeldmanCousins.h:55; TFeldmanCousins::fMuStepDouble_t fMuStepDefinition TFeldmanCousins.h:56; TFeldmanCousins::fMuMinDouble_t fMuMinDefinition TFeldmanCousins.h:54; but there is total flexibility in changing this should you desire.; see example of use in $ROOTSYS/tutorials/math/FeldmanCousins.C; see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?"" in the TRolke class description.; Author: Adrian Bevan, Liverpool University; Copyright Liverpool University 2001 bevan.nosp@m.@sla.nosp@m.c.sta.nosp@m.nfor.nosp@m.d.edu ; Definition at line 47 of file TFeldmanCousins.h. Public Member Functions;  TFeldmanCousins (Double_t newCL=0.9, TString options="""");  Constructor. ;  ;  ~TFeldmanCousins () override;  ; Double_t CalculateLowerLimit (Double_t Nobserved, Double_t Nbackground);  given Nobserved and Nbackground, try dif",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:5204,Integrability,message,message,5204,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:5745,Integrability,message,message,5745,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:6947,Integrability,message,message,6947,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:10309,Integrability,message,message,10309," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:10682,Integrability,message,message,10682," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Prote",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:3437,Modifiability,inherit,inherited,3437,";  given Nobserved and Nbackground, try different values of mu that give upper limits that are consistent with Nobserved. ;  ; Double_t GetCL (void) const;  ; Double_t GetLowerLimit (void) const;  ; Double_t GetMuMax (void) const;  ; Double_t GetMuMin (void) const;  ; Double_t GetMuStep (void) const;  ; Double_t GetNbackground (void) const;  ; Double_t GetNMax (void) const;  ; Double_t GetNobserved (void) const;  ; Double_t GetUpperLimit (void) const;  ; TClass * IsA () const override;  ; void SetCL (Double_t newCL);  ; void SetMuMax (Double_t newMax=50.0);  Set maximum value of signal to use in calculating the tables. ;  ; void SetMuMin (Double_t newMin=0.0);  ; void SetMuStep (Double_t newMuStep=0.005);  Set the step in signal to use when generating tables. ;  ; void SetNbackground (Double_t Nbg);  ; void SetNobserved (Double_t NObs);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:4834,Modifiability,inherit,inheritance,4834,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:7045,Modifiability,inherit,inherits,7045,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:7162,Modifiability,inherit,inherits,7162,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:11183,Modifiability,inherit,inherited,11183,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Int_t FindLimitsFromTable (Double_t mu);  calculate the probability table for a given mu for n = 0, NMAX and return 1 if the number of observed events is consistent with the CL bad ;  ; Double_t Prob (Int_t N, Double_t mu, Double_t B);  Calculate the poissonian probability for a mean of mu+B events with a variance of N. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler ",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:12052,Modifiability,inherit,inherited,12052,"tatic const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Int_t FindLimitsFromTable (Double_t mu);  calculate the probability table for a given mu for n = 0, NMAX and return 1 if the number of observed events is consistent with the CL bad ;  ; Double_t Prob (Int_t N, Double_t mu, Double_t B);  Calculate the poissonian probability for a mean of mu+B events with a variance of N. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fCL;  ; Double_t fLowerLimit;  ; Double_t fMuMax;  ; Double_t fMuMin;  ; Double_t fMuStep;  ; Double_t fNbackground;  ; Int_t fNMax;  ; Int_t fNMuStep;  ; Double_t fNobserved;  ; Int_t fQUICK;  ; Double_t fUpperLimit;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); ",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:12531,Modifiability,inherit,inherited,12531,"t (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Int_t FindLimitsFromTable (Double_t mu);  calculate the probability table for a given mu for n = 0, NMAX and return 1 if the number of observed events is consistent with the CL bad ;  ; Double_t Prob (Int_t N, Double_t mu, Double_t B);  Calculate the poissonian probability for a mean of mu+B events with a variance of N. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fCL;  ; Double_t fLowerLimit;  ; Double_t fMuMax;  ; Double_t fMuMin;  ; Double_t fMuStep;  ; Double_t fNbackground;  ; Int_t fNMax;  ; Int_t fNMuStep;  ; Double_t fNobserved;  ; Int_t fQUICK;  ; Double_t fUpperLimit;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TFeldmanCousins.h>. Inheritance diagram for TFeldmanCousins:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFeldmanCousins(). TFeldmanCousins::TFeldmanCousins ; (; Double_t ; newCL = 0.9, . TString ; options = """" . ). Constructor. ; Definition at l",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:13172,Modifiability,inherit,inherited,13172,"protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fCL;  ; Double_t fLowerLimit;  ; Double_t fMuMax;  ; Double_t fMuMin;  ; Double_t fMuStep;  ; Double_t fNbackground;  ; Int_t fNMax;  ; Int_t fNMuStep;  ; Double_t fNobserved;  ; Int_t fQUICK;  ; Double_t fUpperLimit;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TFeldmanCousins.h>. Inheritance diagram for TFeldmanCousins:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFeldmanCousins(). TFeldmanCousins::TFeldmanCousins ; (; Double_t ; newCL = 0.9, . TString ; options = """" . ). Constructor. ; Definition at line 58 of file TFeldmanCousins.cxx. ◆ ~TFeldmanCousins(). TFeldmanCousins::~TFeldmanCousins ; (; ). override . Definition at line 80 of file TFeldmanCousins.cxx. Member Function Documentation. ◆ CalculateLowerLimit(). Double_t TFeldmanCousins::CalculateLowerLimit ; (; Double_t ; Nobserved, . Double_t ; Nbackground . ). given Nobserved and Nbackground, try different values of mu that give lower limits that are consistent with Nobserved. ; The closed interval (plus any stragglers) corresponds to the F&C interval ; Definition at line 89 of file TFeldmanCousins.cxx. ◆ CalculateUpperLimit(). Double_",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:6676,Security,hash,hash,6676," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFeldmanCousins.html:992,Usability,simpl,simple,992,"  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFeldmanCousins Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TFeldmanCousins is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFeldmanCousins might still be a valid solution. Consider switching to RooStats for non-trivial cases. ; Class to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889; The default confidence interval calculated using this method is 90% This is set either by having a default the constructor, or using the appropriate fraction when instantiating an object of this class (e.g. 0.9); The simple extension to a gaussian resolution function bounded at zero has not been addressed as yet -> ‘time is of the essence’ as they write on the wall of the maze in that classic game ...; VARIABLES THAT CAN BE ALTERED; => depending on your desired precision: The initial values of fMuMin, fMuMax, fMuStep and fNMax are those used in the PRD: fMuMin = 0.0; fMuMax = 50.0; fMuStep= 0.005; TFeldmanCousins::fMuMaxDouble_t fMuMaxDefinition TFeldmanCousins.h:55; TFeldmanCousins::fMuStepDouble_t fMuStepDefinition TFeldmanCousins.h:56; TFeldmanCousins::fMuMinDouble_t fMuMinDefinition TFeldmanCousins.h:54; but there is total flexibility in changing this should you desire.; see example of use in $ROOTSYS/tutorials/math/FeldmanCousins.C; see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?"" in the TRolke class description.; Author: Adrian Bevan, Liverpool University; Copyright Liverpool University 2001 bevan.nosp@m.@sla.nosp@m.c.sta.nosp@m.nfor.nosp@m.d.edu ; Definition at line 47 of file TFeldmanCousins.h. Public Member Functions;  TFeldmanCousins (Double_t newCL=0.9, TStrin",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
https://root.cern/doc/master/classTFFTComplex.html:6109,Availability,error,error,6109,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:6198,Availability,error,error,6198,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:6353,Availability,error,error,6353,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:6650,Availability,error,error,6650,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:11214,Availability,error,error,11214," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Vers",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:741,Energy Efficiency,allocate,allocate,741,". ROOT: TFFTComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplex Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented. Computes complex input/output discrete Fourier transforms (DFT) in one or more dimensions. For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"".; How to use it:. Create an instance of TFFTComplex - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointComplex() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags or sign, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size . Definition at line 20 of file TFFTComplex.h. Public Member Functions;  TFFTComplex ();  default ;  ;  TFFTComplex (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplex (Int_t ndim, Int_t *n, Bool_t inPlace=kFALSE);  For multidim. ;  ;  ~TFFTComplex () override;  Destroys the data arrays and the plan. ;  ; Int_t * GetN () const override;  ; Int_t GetNdim () const override;  ; void GetPointComplex (const Int_t *ipoint, Dou",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:320,Integrability,interface,interface,320,". ROOT: TFFTComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplex Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented. Computes complex input/output discrete Fourier transforms (DFT) in one or more dimensions. For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"".; How to use it:. Create an instance of TFFTComplex - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointComplex() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags or sign, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size . Definition at line 20 of file TFFTComplex.h. Public Member Functions;  TFFTComplex ();  default ;  ;  TFFTComplex (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplex (Int_t ndim, Int_t *n, Bool_t inPlace=kFALSE);  For multidim. ;  ;  ~TFFTComplex () override;  Destroys the data arrays and the plan. ;  ; Int_t * GetN () const override;  ; Int_t GetNdim () const override;  ; void GetPointComplex (const Int_t *ipoint, Dou",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:427,Integrability,interface,interface,427,". ROOT: TFFTComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplex Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented. Computes complex input/output discrete Fourier transforms (DFT) in one or more dimensions. For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"".; How to use it:. Create an instance of TFFTComplex - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointComplex() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags or sign, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size . Definition at line 20 of file TFFTComplex.h. Public Member Functions;  TFFTComplex ();  default ;  ;  TFFTComplex (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplex (Int_t ndim, Int_t *n, Bool_t inPlace=kFALSE);  For multidim. ;  ;  ~TFFTComplex () override;  Destroys the data arrays and the plan. ;  ; Int_t * GetN () const override;  ; Int_t GetNdim () const override;  ; void GetPointComplex (const Int_t *ipoint, Dou",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:6115,Integrability,message,message,6115,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:6656,Integrability,message,message,6656,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:7858,Integrability,message,message,7858,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:11220,Integrability,message,message,11220," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Vers",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:11593,Integrability,message,message,11593," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualFFT * FFT (Int_t ndim, Int_t *n, Option_t *option);  Returns a pointer to the FFT of requested size and type. ;  ; static TVirtualFFT * GetCurrentTransform ();  static: return current fgFFT ;  ; static const char * GetDefaultFFT ();  static: return the name of the default fft ;  ; static void",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:20210,Integrability,depend,depending,20210,"tual . Implements TVirtualFFT.; Definition at line 45 of file TFFTComplex.h. ◆ GetSize(). virtual Int_t TFFTComplex::GetSize ; (; ); const. inlinevirtual . Definition at line 43 of file TFFTComplex.h. ◆ GetTransformFlag(). Option_t * TFFTComplex::GetTransformFlag ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 46 of file TFFTComplex.h. ◆ GetType(). Option_t * TFFTComplex::GetType ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 44 of file TFFTComplex.h. ◆ Init(). void TFFTComplex::Init ; (; Option_t * ; flags, . Int_t ; sign, . const Int_t * ;  . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this function!!!!!; 2nd parameter: +1; Argument kind is dummy and doesn't need to be specified; Possible flag_options:; ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. . Implements TVirtualFFT.; Definition at line 140 of file TFFTComplex.cxx. ◆ IsA(). TClass * TFFTComplex::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 65 of file TFFTComplex.h. ◆ IsInplace(). Bool_t TFFTComplex::IsInplace ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 47 of file TFFTComplex.h. ◆ MapFlag(). UInt_t TFFTComplex::MapFlag ; (; Option_t * ; flag). protected . allowed options: . ""ES"" - FFTW_ESTIMATE; ""M"" - FFTW_MEASURE; ""P"" - FFTW_PATIENT; ""EX"" - FFTW",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:4056,Modifiability,inherit,inherited,4056,"t_t sign, const Int_t *) override;  Creates the fftw-plan. ;  ; TClass * IsA () const override;  ; Bool_t IsInplace () const override;  ; void SetPoint (const Int_t *ipoint, Double_t re, Double_t im=0) override;  For multidim. transforms. Sets real and imaginary parts of point # ipoint. ;  ; void SetPoint (Int_t ipoint, Double_t re, Double_t im=0) override;  sets real and imaginary parts of point # ipoint ;  ; void SetPointComplex (Int_t ipoint, TComplex &c) override;  ; void SetPoints (const Double_t *data) override;  set all points. ;  ; void SetPointsComplex (const Double_t *re, const Double_t *im) override;  set all points. the values are copied ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform () override;  Computes the transform, specified in Init() function. ;  ;  Public Member Functions inherited from TVirtualFFT;  TVirtualFFT ();  ; virtual ~TVirtualFFT ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual vo",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:4348,Modifiability,inherit,inherited,4348,"le_t im=0) override;  For multidim. transforms. Sets real and imaginary parts of point # ipoint. ;  ; void SetPoint (Int_t ipoint, Double_t re, Double_t im=0) override;  sets real and imaginary parts of point # ipoint ;  ; void SetPointComplex (Int_t ipoint, TComplex &c) override;  ; void SetPoints (const Double_t *data) override;  set all points. ;  ; void SetPointsComplex (const Double_t *re, const Double_t *im) override;  set all points. the values are copied ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform () override;  Computes the transform, specified in Init() function. ;  ;  Public Member Functions inherited from TVirtualFFT;  TVirtualFFT ();  ; virtual ~TVirtualFFT ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:5745,Modifiability,inherit,inheritance,5745,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:7956,Modifiability,inherit,inherits,7956,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:8073,Modifiability,inherit,inherits,8073,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:12094,Modifiability,inherit,inherited,12094,"d SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualFFT * FFT (Int_t ndim, Int_t *n, Option_t *option);  Returns a pointer to the FFT of requested size and type. ;  ; static TVirtualFFT * GetCurrentTransform ();  static: return current fgFFT ;  ; static const char * GetDefaultFFT ();  static: return the name of the default fft ;  ; static void SetDefaultFFT (const char *name="""");  static: set name of default fft ;  ; static void SetTransform (TVirtualFFT *fft);  static: set the current transfrom to parameter ;  ; static TVirtualFFT * SineCosine (Int_t ndim, Int_t *n, Int_t *r2rkind, Option_t *option);  Returns a pointer to a sine or cosine transform of requested size and kind. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:12963,Modifiability,inherit,inherited,12963,"tatic Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualFFT * FFT (Int_t ndim, Int_t *n, Option_t *option);  Returns a pointer to the FFT of requested size and type. ;  ; static TVirtualFFT * GetCurrentTransform ();  static: return current fgFFT ;  ; static const char * GetDefaultFFT ();  static: return the name of the default fft ;  ; static void SetDefaultFFT (const char *name="""");  static: set name of default fft ;  ; static void SetTransform (TVirtualFFT *fft);  static: set the current transfrom to parameter ;  ; static TVirtualFFT * SineCosine (Int_t ndim, Int_t *n, Int_t *r2rkind, Option_t *option);  Returns a pointer to a sine or cosine transform of requested size and kind. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; UInt_t MapFlag (Option_t *flag);  allowed options: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fSign;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kIncon",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:13561,Modifiability,inherit,inherited,13561,"void SetDefaultFFT (const char *name="""");  static: set name of default fft ;  ; static void SetTransform (TVirtualFFT *fft);  static: set the current transfrom to parameter ;  ; static TVirtualFFT * SineCosine (Int_t ndim, Int_t *n, Int_t *r2rkind, Option_t *option);  Returns a pointer to a sine or cosine transform of requested size and kind. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; UInt_t MapFlag (Option_t *flag);  allowed options: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fSign;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Ty",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:13945,Modifiability,inherit,inherited,13945,"s ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; UInt_t MapFlag (Option_t *flag);  allowed options: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fSign;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TVirtualFFT; static TString fgDefault = """";  ; static TVirtualFFT * fgFFT = nullptr;  . #include <TFFTComplex.h>. Inheritance diagram for TFFTComplex:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFFTComplex() [1/",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:14586,Modifiability,inherit,inherited,14586,"  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fSign;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TVirtualFFT; static TString fgDefault = """";  ; static TVirtualFFT * fgFFT = nullptr;  . #include <TFFTComplex.h>. Inheritance diagram for TFFTComplex:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFFTComplex() [1/3]. TFFTComplex::TFFTComplex ; (; ). default ; Definition at line 52 of file TFFTComplex.cxx. ◆ TFFTComplex() [2/3]. TFFTComplex::TFFTComplex ; (; Int_t ; n, . Bool_t ; inPlace . ). For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ; Definition at line 67 of file TFFTComplex.cxx. ◆ TFFTComplex() [3/3]. TFFTComplex::TFFTComplex ; (; Int_t ; ndim, . Int_t * ; n, . Bool_t ; inPlace = kFALSE . ). For multidim. ; transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array ; Definition at line 86 of file TFFTComplex.cxx. ◆ ~TFFTComplex(). TFFTComplex::~TFFTComplex ; (; ). over",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:14686,Modifiability,inherit,inherited,14686,"  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fSign;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TVirtualFFT; static TString fgDefault = """";  ; static TVirtualFFT * fgFFT = nullptr;  . #include <TFFTComplex.h>. Inheritance diagram for TFFTComplex:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFFTComplex() [1/3]. TFFTComplex::TFFTComplex ; (; ). default ; Definition at line 52 of file TFFTComplex.cxx. ◆ TFFTComplex() [2/3]. TFFTComplex::TFFTComplex ; (; Int_t ; n, . Bool_t ; inPlace . ). For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ; Definition at line 67 of file TFFTComplex.cxx. ◆ TFFTComplex() [3/3]. TFFTComplex::TFFTComplex ; (; Int_t ; ndim, . Int_t * ; n, . Bool_t ; inPlace = kFALSE . ). For multidim. ; transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array ; Definition at line 86 of file TFFTComplex.cxx. ◆ ~TFFTComplex(). TFFTComplex::~TFFTComplex ; (; ). over",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:19937,Performance,perform,performance,19937,"tual . Implements TVirtualFFT.; Definition at line 45 of file TFFTComplex.h. ◆ GetSize(). virtual Int_t TFFTComplex::GetSize ; (; ); const. inlinevirtual . Definition at line 43 of file TFFTComplex.h. ◆ GetTransformFlag(). Option_t * TFFTComplex::GetTransformFlag ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 46 of file TFFTComplex.h. ◆ GetType(). Option_t * TFFTComplex::GetType ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 44 of file TFFTComplex.h. ◆ Init(). void TFFTComplex::Init ; (; Option_t * ; flags, . Int_t ; sign, . const Int_t * ;  . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this function!!!!!; 2nd parameter: +1; Argument kind is dummy and doesn't need to be specified; Possible flag_options:; ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. . Implements TVirtualFFT.; Definition at line 140 of file TFFTComplex.cxx. ◆ IsA(). TClass * TFFTComplex::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 65 of file TFFTComplex.h. ◆ IsInplace(). Bool_t TFFTComplex::IsInplace ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 47 of file TFFTComplex.h. ◆ MapFlag(). UInt_t TFFTComplex::MapFlag ; (; Option_t * ; flag). protected . allowed options: . ""ES"" - FFTW_ESTIMATE; ""M"" - FFTW_MEASURE; ""P"" - FFTW_PATIENT; ""EX"" - FFTW",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplex.html:7587,Security,hash,hash,7587," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
https://root.cern/doc/master/classTFFTComplexReal.html:587,Availability,redundant,redundant,587,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:6834,Availability,error,error,6834,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:6923,Availability,error,error,6923,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:7078,Availability,error,error,7078,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:7375,Availability,error,error,7375,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:11939,Availability,error,error,11939," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Vers",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:751,Energy Efficiency,allocate,allocate,751,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:328,Integrability,interface,interface,328,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:435,Integrability,interface,interface,435,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:6840,Integrability,message,message,6840,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:7381,Integrability,message,message,7381,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:8583,Integrability,message,message,8583,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:11945,Integrability,message,message,11945," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Vers",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:12318,Integrability,message,message,12318," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualFFT * FFT (Int_t ndim, Int_t *n, Option_t *option);  Returns a pointer to the FFT of requested size and type. ;  ; static TVirtualFFT * GetCurrentTransform ();  static: return current fgFFT ;  ; static const char * GetDefaultFFT ();  static: return the name of the default fft ;  ; static void",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:21808,Integrability,depend,depending,21808,"lineoverridevirtual . Implements TVirtualFFT.; Definition at line 47 of file TFFTComplexReal.h. ◆ GetType(). Option_t * TFFTComplexReal::GetType ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 45 of file TFFTComplexReal.h. ◆ Init(). void TFFTComplexReal::Init ; (; Option_t * ; flags, . Int_t ; , . const Int_t * ;  . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this function!!!!!; Arguments sign and kind are dummy and not need to be specified Possible flag_options:. ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found. This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. ; Implements TVirtualFFT.; Definition at line 148 of file TFFTComplexReal.cxx. ◆ IsA(). TClass * TFFTComplexReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 66 of file TFFTComplexReal.h. ◆ IsInplace(). Bool_t TFFTComplexReal::IsInplace ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 48 of file TFFTComplexReal.h. ◆ MapFlag(). UInt_t TFFTComplexReal::MapFlag ; (; Option_t * ; flag). protected . allowed options: ""ES"" - FFTW_ESTIMATE ""M"" - FFTW_MEASURE ""P"" - FFTW_PATIENT ""EX"" - FFTW_EXHAUSTIVE ; Definition at line 390 of file TFFTComplexReal.cxx. ◆ SetPoint() [1/2]. void TFFTComplexReal::SetPoint ; (; const Int_t * ; ipoint, . Double_t ; re, . Double_t ; im = 0 . ). overridevirtual . Set the point #ipoint. ; Since the input is Hermitian, ",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:4781,Modifiability,inherit,inherited,4781,"  ; void SetPoint (const Int_t *ipoint, Double_t re, Double_t im=0) override;  Set the point #ipoint. ;  ; void SetPoint (Int_t ipoint, Double_t re, Double_t im=0) override;  since the input must be complex-Hermitian, if the ipoint > n/2, the according point before n/2 is set to (re, -im) ;  ; void SetPointComplex (Int_t ipoint, TComplex &c) override;  since the input must be complex-Hermitian, if the ipoint > n/2, the according point before n/2 is set to (re, -im) ;  ; void SetPoints (const Double_t *data) override;  set all points. ;  ; void SetPointsComplex (const Double_t *re, const Double_t *im) override;  Set all points. The values are copied. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform () override;  Computes the transform, specified in Init() function. ;  ;  Public Member Functions inherited from TVirtualFFT;  TVirtualFFT ();  ; virtual ~TVirtualFFT ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual vo",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:5073,Modifiability,inherit,inherited,5073,"must be complex-Hermitian, if the ipoint > n/2, the according point before n/2 is set to (re, -im) ;  ; void SetPointComplex (Int_t ipoint, TComplex &c) override;  since the input must be complex-Hermitian, if the ipoint > n/2, the according point before n/2 is set to (re, -im) ;  ; void SetPoints (const Double_t *data) override;  set all points. ;  ; void SetPointsComplex (const Double_t *re, const Double_t *im) override;  Set all points. The values are copied. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform () override;  Computes the transform, specified in Init() function. ;  ;  Public Member Functions inherited from TVirtualFFT;  TVirtualFFT ();  ; virtual ~TVirtualFFT ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:6470,Modifiability,inherit,inheritance,6470,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:8681,Modifiability,inherit,inherits,8681,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:8798,Modifiability,inherit,inherits,8798,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:12819,Modifiability,inherit,inherited,12819,"d SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualFFT * FFT (Int_t ndim, Int_t *n, Option_t *option);  Returns a pointer to the FFT of requested size and type. ;  ; static TVirtualFFT * GetCurrentTransform ();  static: return current fgFFT ;  ; static const char * GetDefaultFFT ();  static: return the name of the default fft ;  ; static void SetDefaultFFT (const char *name="""");  static: set name of default fft ;  ; static void SetTransform (TVirtualFFT *fft);  static: set the current transfrom to parameter ;  ; static TVirtualFFT * SineCosine (Int_t ndim, Int_t *n, Int_t *r2rkind, Option_t *option);  Returns a pointer to a sine or cosine transform of requested size and kind. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:13688,Modifiability,inherit,inherited,13688,"tatic Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualFFT * FFT (Int_t ndim, Int_t *n, Option_t *option);  Returns a pointer to the FFT of requested size and type. ;  ; static TVirtualFFT * GetCurrentTransform ();  static: return current fgFFT ;  ; static const char * GetDefaultFFT ();  static: return the name of the default fft ;  ; static void SetDefaultFFT (const char *name="""");  static: set name of default fft ;  ; static void SetTransform (TVirtualFFT *fft);  static: set the current transfrom to parameter ;  ; static TVirtualFFT * SineCosine (Int_t ndim, Int_t *n, Int_t *r2rkind, Option_t *option);  Returns a pointer to a sine or cosine transform of requested size and kind. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; UInt_t MapFlag (Option_t *flag);  allowed options: ""ES"" - FFTW_ESTIMATE ""M"" - FFTW_MEASURE ""P"" - FFTW_PATIENT ""EX"" - FFTW_EXHAUSTIVE ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x0100",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:14368,Modifiability,inherit,inherited,14368,"  static: set name of default fft ;  ; static void SetTransform (TVirtualFFT *fft);  static: set the current transfrom to parameter ;  ; static TVirtualFFT * SineCosine (Int_t ndim, Int_t *n, Int_t *r2rkind, Option_t *option);  Returns a pointer to a sine or cosine transform of requested size and kind. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; UInt_t MapFlag (Option_t *flag);  allowed options: ""ES"" - FFTW_ESTIMATE ""M"" - FFTW_MEASURE ""P"" - FFTW_PATIENT ""EX"" - FFTW_EXHAUSTIVE ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 1",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:14736,Modifiability,inherit,inherited,14736,"rsion_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; UInt_t MapFlag (Option_t *flag);  allowed options: ""ES"" - FFTW_ESTIMATE ""M"" - FFTW_MEASURE ""P"" - FFTW_PATIENT ""EX"" - FFTW_EXHAUSTIVE ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TVirtualFFT; static TString fgDefault = """";  ; static TVirtualFFT * fgFFT = nullptr;  . #include <TFFTComplexReal.h>. Inheritance diagram for TFFTComplexReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFFTCompl",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:15377,Modifiability,inherit,inherited,15377,"_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TVirtualFFT; static TString fgDefault = """";  ; static TVirtualFFT * fgFFT = nullptr;  . #include <TFFTComplexReal.h>. Inheritance diagram for TFFTComplexReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFFTComplexReal() [1/3]. TFFTComplexReal::TFFTComplexReal ; (; ). default ; Definition at line 54 of file TFFTComplexReal.cxx. ◆ TFFTComplexReal() [2/3]. TFFTComplexReal::TFFTComplexReal ; (; Int_t ; n, . Bool_t ; inPlace . ). For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ; Definition at line 68 of file TFFTComplexReal.cxx. ◆ TFFTComplexReal() [3/3]. TFFTComplexReal::TFFTComplexReal ; (; Int_t ; ndim, . Int_t * ; n, . Bool_t ; inPlace . ). For ndim-dimensional transforms Second argument contains sizes of the transform in each dimension. ; Definition at line 89 of file TFFTComplexReal.cxx. ◆ ~TFFTComplexReal(). ",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:15477,Modifiability,inherit,inherited,15477,"_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TVirtualFFT; static TString fgDefault = """";  ; static TVirtualFFT * fgFFT = nullptr;  . #include <TFFTComplexReal.h>. Inheritance diagram for TFFTComplexReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFFTComplexReal() [1/3]. TFFTComplexReal::TFFTComplexReal ; (; ). default ; Definition at line 54 of file TFFTComplexReal.cxx. ◆ TFFTComplexReal() [2/3]. TFFTComplexReal::TFFTComplexReal ; (; Int_t ; n, . Bool_t ; inPlace . ). For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ; Definition at line 68 of file TFFTComplexReal.cxx. ◆ TFFTComplexReal() [3/3]. TFFTComplexReal::TFFTComplexReal ; (; Int_t ; ndim, . Int_t * ; n, . Bool_t ; inPlace . ). For ndim-dimensional transforms Second argument contains sizes of the transform in each dimension. ; Definition at line 89 of file TFFTComplexReal.cxx. ◆ ~TFFTComplexReal(). ",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:21534,Performance,perform,performance,21534,"l.h. ◆ GetSize(). virtual Int_t TFFTComplexReal::GetSize ; (; ); const. inlinevirtual . Definition at line 42 of file TFFTComplexReal.h. ◆ GetTransformFlag(). Option_t * TFFTComplexReal::GetTransformFlag ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 47 of file TFFTComplexReal.h. ◆ GetType(). Option_t * TFFTComplexReal::GetType ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 45 of file TFFTComplexReal.h. ◆ Init(). void TFFTComplexReal::Init ; (; Option_t * ; flags, . Int_t ; , . const Int_t * ;  . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this function!!!!!; Arguments sign and kind are dummy and not need to be specified Possible flag_options:. ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found. This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. ; Implements TVirtualFFT.; Definition at line 148 of file TFFTComplexReal.cxx. ◆ IsA(). TClass * TFFTComplexReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 66 of file TFFTComplexReal.h. ◆ IsInplace(). Bool_t TFFTComplexReal::IsInplace ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 48 of file TFFTComplexReal.h. ◆ MapFlag(). UInt_t TFFTComplexReal::MapFlag ; (; Option_t * ; flag). protected . allowed options: ""ES"" - FFTW_ESTIMATE ""M"" - FFTW_MEASURE ""P"" - FFTW_PATIENT ""EX"" - FFTW_EXHAUSTIVE ; Definition at line 390 of f",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:587,Safety,redund,redundant,587,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:8312,Security,hash,hash,8312," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTComplexReal.html:607,Testability,log,logically,607,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
https://root.cern/doc/master/classTFFTReal.html:6704,Availability,error,error,6704,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:6793,Availability,error,error,6793,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:6948,Availability,error,error,6948,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:7245,Availability,error,error,7245,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:11809,Availability,error,error,11809," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Vers",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:19498,Availability,error,error,19498,"nput = kFALSE . ); const. overridevirtual . Copies the output (or input) points into the provided array, that should be big enough. ; Implements TVirtualFFT.; Definition at line 226 of file TFFTReal.cxx. ◆ GetPointsComplex() [1/2]. void TFFTReal::GetPointsComplex ; (; Double_t * ; , . Bool_t ;  . ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 59 of file TFFTReal.h. ◆ GetPointsComplex() [2/2]. void TFFTReal::GetPointsComplex ; (; Double_t * ; , . Double_t * ; , . Bool_t ;  . ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 58 of file TFFTReal.h. ◆ GetPointsReal(). Double_t * TFFTReal::GetPointsReal ; (; Bool_t ; fromInput = kFALSE); const. overridevirtual . Returns the output (or input) array we have 4 different cases: . fromInput = false; fOut = !NULL (transformed is not in place) : return fOut; fromInput = false; fOut = NULL (transformed is in place) : return fIn. fromInput = true; fOut = !NULL : return fIn; fromInput = true; fOut = NULL return an error since input array is overwritten . Implements TVirtualFFT.; Definition at line 296 of file TFFTReal.cxx. ◆ GetSign(). Int_t TFFTReal::GetSign ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 46 of file TFFTReal.h. ◆ GetSize(). virtual Int_t TFFTReal::GetSize ; (; ); const. inlinevirtual . Definition at line 42 of file TFFTReal.h. ◆ GetTransformFlag(). Option_t * TFFTReal::GetTransformFlag ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 47 of file TFFTReal.h. ◆ GetType(). Option_t * TFFTReal::GetType ; (; ); const. overridevirtual . Returns the type of the transform. ; Implements TVirtualFFT.; Definition at line 210 of file TFFTReal.cxx. ◆ Init(). void TFFTReal::Init ; (; Option_t * ; flags, . Int_t ; sign, . const Int_t * ; kind . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this f",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:21206,Availability,avail,available,21206,"f file TFFTReal.cxx. ◆ Init(). void TFFTReal::Init ; (; Option_t * ; flags, . Int_t ; sign, . const Int_t * ; kind . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this function!!!!!; 1st parameter:; Possible flag_options:. ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found; This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. 2nd parameter:; is dummy and doesn't need to be specified; 3rd parameter:; transform kind for each dimension 4 different kinds of sine and cosine transforms are available; DCT-I - kind=0; DCT-II - kind=1; DCT-III - kind=2; DCT-IV - kind=3; DST-I - kind=4; DST-II - kind=5; DSTIII - kind=6; DSTIV - kind=7 . Implements TVirtualFFT.; Definition at line 176 of file TFFTReal.cxx. ◆ IsA(). TClass * TFFTReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 69 of file TFFTReal.h. ◆ IsInplace(). Bool_t TFFTReal::IsInplace ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 48 of file TFFTReal.h. ◆ MapFlag(). UInt_t TFFTReal::MapFlag ; (; Option_t * ; flag). protected . allowed options: . ""ES"" - FFTW_ESTIMATE; ""M"" - FFTW_MEASURE; ""P"" - FFTW_PATIENT; ""EX"" - FFTW_EXHAUSTIVE . Definition at line 403 of file TFFTReal.cxx. ◆ MapOptions(). Int_t TFFTReal::MapOptions ; (; const Int_t * ; kind). protected . transfers the r2r_kind parameters to fftw type ; Definition at line 357 of file TFFTReal.cxx. ◆ SetPoint() [1/2]. void TFFTReal::SetPoi",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:958,Energy Efficiency,allocate,allocate,958,"hes. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes transforms called r2r in FFTW manual:; transforms of real input and output in ""halfcomplex"" format i.e. real and imaginary parts for a transform of size n stored as (r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1); discrete Hartley transform; sine and cosine transforms (DCT-I,II,III,IV and DST-I,II,III,IV) For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"". How to use it:; Create an instance of TFFTReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but of different kind (or with different flags), rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function!; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled BY:; transform size (N) for R2HC, HC2R, DHT transforms; 2*(N-1) for DCT-I (REDFT00); 2*(N+1) for DST-I (RODFT00); 2*N for the remaining transforms. Transform inverses:; R2HC<-->HC2R; DHT<-->DHT; DCT-I<-->DCT-I; DCT-II<-->DCT-III; DCT-IV<-->DCT-IV; DST-I<-->DST-I; DST-II<-->DST-III; DST-IV<-->DST-IV . Definition at line 20 of file TFFTReal.h. Public Member Functions;  TFFTReal ();  default ;  ;  TFFTReal",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:314,Integrability,interface,interface,314,". ROOT: TFFTReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes transforms called r2r in FFTW manual:; transforms of real input and output in ""halfcomplex"" format i.e. real and imaginary parts for a transform of size n stored as (r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1); discrete Hartley transform; sine and cosine transforms (DCT-I,II,III,IV and DST-I,II,III,IV) For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"". How to use it:; Create an instance of TFFTReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but of different kind (or with different flags), rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function!; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled BY:; transform size (N) for R2HC, HC2R, DHT transforms; 2*(N-1) for DCT-I (REDFT00); 2*(N+1) for DST-I (RODFT00); 2*N for the remaining transforms. Transform inverses:; R2HC<-->HC2R; DHT<-->DHT; DCT-I<-->DCT-I; DCT-II<-->DCT-III; DCT-IV<-->DCT-IV; DST-I<-->DST-I; DST-II<-->DST-III; DST-IV<-->DST-",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:421,Integrability,interface,interface,421,". ROOT: TFFTReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes transforms called r2r in FFTW manual:; transforms of real input and output in ""halfcomplex"" format i.e. real and imaginary parts for a transform of size n stored as (r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1); discrete Hartley transform; sine and cosine transforms (DCT-I,II,III,IV and DST-I,II,III,IV) For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"". How to use it:; Create an instance of TFFTReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but of different kind (or with different flags), rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function!; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled BY:; transform size (N) for R2HC, HC2R, DHT transforms; 2*(N-1) for DCT-I (REDFT00); 2*(N+1) for DST-I (RODFT00); 2*N for the remaining transforms. Transform inverses:; R2HC<-->HC2R; DHT<-->DHT; DCT-I<-->DCT-I; DCT-II<-->DCT-III; DCT-IV<-->DCT-IV; DST-I<-->DST-I; DST-II<-->DST-III; DST-IV<-->DST-",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:6710,Integrability,message,message,6710,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:7251,Integrability,message,message,7251,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:8453,Integrability,message,message,8453,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:11815,Integrability,message,message,11815," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Vers",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:12188,Integrability,message,message,12188," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualFFT * FFT (Int_t ndim, Int_t *n, Option_t *option);  Returns a pointer to the FFT of requested size and type. ;  ; static TVirtualFFT * GetCurrentTransform ();  static: return current fgFFT ;  ; static const char * GetDefaultFFT ();  static: return the name of the default fft ;  ; static void",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:20889,Integrability,depend,depending,20889,".h. ◆ GetSize(). virtual Int_t TFFTReal::GetSize ; (; ); const. inlinevirtual . Definition at line 42 of file TFFTReal.h. ◆ GetTransformFlag(). Option_t * TFFTReal::GetTransformFlag ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 47 of file TFFTReal.h. ◆ GetType(). Option_t * TFFTReal::GetType ; (; ); const. overridevirtual . Returns the type of the transform. ; Implements TVirtualFFT.; Definition at line 210 of file TFFTReal.cxx. ◆ Init(). void TFFTReal::Init ; (; Option_t * ; flags, . Int_t ; sign, . const Int_t * ; kind . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this function!!!!!; 1st parameter:; Possible flag_options:. ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found; This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. 2nd parameter:; is dummy and doesn't need to be specified; 3rd parameter:; transform kind for each dimension 4 different kinds of sine and cosine transforms are available; DCT-I - kind=0; DCT-II - kind=1; DCT-III - kind=2; DCT-IV - kind=3; DST-I - kind=4; DST-II - kind=5; DSTIII - kind=6; DSTIV - kind=7 . Implements TVirtualFFT.; Definition at line 176 of file TFFTReal.cxx. ◆ IsA(). TClass * TFFTReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 69 of file TFFTReal.h. ◆ IsInplace(). Bool_t TFFTReal::IsInplace ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 48 of file TFFTRea",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:4651,Modifiability,inherit,inherited,4651,"onst override;  Returns the type of the transform. ;  ; void Init (Option_t *flags, Int_t sign, const Int_t *kind) override;  Creates the fftw-plan. ;  ; TClass * IsA () const override;  ; Bool_t IsInplace () const override;  ; void SetPoint (const Int_t *ipoint, Double_t re, Double_t) override;  Since multidimensional R2HC and HC2R transforms are not supported, third parameter is dummy. ;  ; void SetPoint (Int_t ipoint, Double_t re, Double_t im=0) override;  ; void SetPointComplex (Int_t, TComplex &) override;  ; void SetPoints (const Double_t *data) override;  Sets all points. ;  ; void SetPointsComplex (const Double_t *, const Double_t *) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform () override;  Computes the transform, specified in Init() function. ;  ;  Public Member Functions inherited from TVirtualFFT;  TVirtualFFT ();  ; virtual ~TVirtualFFT ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual vo",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:4943,Modifiability,inherit,inherited,4943,"ol_t IsInplace () const override;  ; void SetPoint (const Int_t *ipoint, Double_t re, Double_t) override;  Since multidimensional R2HC and HC2R transforms are not supported, third parameter is dummy. ;  ; void SetPoint (Int_t ipoint, Double_t re, Double_t im=0) override;  ; void SetPointComplex (Int_t, TComplex &) override;  ; void SetPoints (const Double_t *data) override;  Sets all points. ;  ; void SetPointsComplex (const Double_t *, const Double_t *) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform () override;  Computes the transform, specified in Init() function. ;  ;  Public Member Functions inherited from TVirtualFFT;  TVirtualFFT ();  ; virtual ~TVirtualFFT ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:6340,Modifiability,inherit,inheritance,6340,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:8551,Modifiability,inherit,inherits,8551,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:8668,Modifiability,inherit,inherits,8668,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:12689,Modifiability,inherit,inherited,12689,"d SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualFFT * FFT (Int_t ndim, Int_t *n, Option_t *option);  Returns a pointer to the FFT of requested size and type. ;  ; static TVirtualFFT * GetCurrentTransform ();  static: return current fgFFT ;  ; static const char * GetDefaultFFT ();  static: return the name of the default fft ;  ; static void SetDefaultFFT (const char *name="""");  static: set name of default fft ;  ; static void SetTransform (TVirtualFFT *fft);  static: set the current transfrom to parameter ;  ; static TVirtualFFT * SineCosine (Int_t ndim, Int_t *n, Int_t *r2rkind, Option_t *option);  Returns a pointer to a sine or cosine transform of requested size and kind. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:13558,Modifiability,inherit,inherited,13558,"tatic Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualFFT * FFT (Int_t ndim, Int_t *n, Option_t *option);  Returns a pointer to the FFT of requested size and type. ;  ; static TVirtualFFT * GetCurrentTransform ();  static: return current fgFFT ;  ; static const char * GetDefaultFFT ();  static: return the name of the default fft ;  ; static void SetDefaultFFT (const char *name="""");  static: set name of default fft ;  ; static void SetTransform (TVirtualFFT *fft);  static: set the current transfrom to parameter ;  ; static TVirtualFFT * SineCosine (Int_t ndim, Int_t *n, Int_t *r2rkind, Option_t *option);  Returns a pointer to a sine or cosine transform of requested size and kind. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; UInt_t MapFlag (Option_t *flag);  allowed options: ;  ; Int_t MapOptions (const Int_t *kind);  transfers the r2r_kind parameters to fftw type ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; void * fKind;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:14247,Modifiability,inherit,inherited,14247,"tic: set name of default fft ;  ; static void SetTransform (TVirtualFFT *fft);  static: set the current transfrom to parameter ;  ; static TVirtualFFT * SineCosine (Int_t ndim, Int_t *n, Int_t *r2rkind, Option_t *option);  Returns a pointer to a sine or cosine transform of requested size and kind. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; UInt_t MapFlag (Option_t *flag);  allowed options: ;  ; Int_t MapOptions (const Int_t *kind);  transfers the r2r_kind parameters to fftw type ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; void * fKind;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvali",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:14632,Modifiability,inherit,inherited,14632," ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; UInt_t MapFlag (Option_t *flag);  allowed options: ;  ; Int_t MapOptions (const Int_t *kind);  transfers the r2r_kind parameters to fftw type ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; void * fKind;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TVirtualFFT; static TString fgDefault = """";  ; static TVirtualFFT * fgFFT = nullptr;  . #include <TFFTReal.h>. Inheritance diagram for TFFTReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFFTReal() [1/3]. TFFTR",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:15273,Modifiability,inherit,inherited,15273," Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; void * fKind;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TVirtualFFT; static TString fgDefault = """";  ; static TVirtualFFT * fgFFT = nullptr;  . #include <TFFTReal.h>. Inheritance diagram for TFFTReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFFTReal() [1/3]. TFFTReal::TFFTReal ; (; ). default ; Definition at line 69 of file TFFTReal.cxx. ◆ TFFTReal() [2/3]. TFFTReal::TFFTReal ; (; Int_t ; n, . Bool_t ; inPlace = kFALSE . ). For 1d transforms n here is the physical size of the transform (see FFTW manual for more details) ; Definition at line 84 of file TFFTReal.cxx. ◆ TFFTReal() [3/3]. TFFTReal::TFFTReal ; (; Int_t ; ndim, . Int_t * ; n, . Bool_t ; inPlace = kFALSE . ). For multidimensional transforms 1st parameter is the # of dimensions, 2nd is the sizes (physical) of the transform in each dimension. ; Definition at line 103 of file TFFTReal.cxx. ◆ ~TFFTReal(). TFFTReal::~TFFTReal ; (; ). override . clean-up ; Definit",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:15373,Modifiability,inherit,inherited,15373," Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; void * fKind;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TVirtualFFT; static TString fgDefault = """";  ; static TVirtualFFT * fgFFT = nullptr;  . #include <TFFTReal.h>. Inheritance diagram for TFFTReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFFTReal() [1/3]. TFFTReal::TFFTReal ; (; ). default ; Definition at line 69 of file TFFTReal.cxx. ◆ TFFTReal() [2/3]. TFFTReal::TFFTReal ; (; Int_t ; n, . Bool_t ; inPlace = kFALSE . ). For 1d transforms n here is the physical size of the transform (see FFTW manual for more details) ; Definition at line 84 of file TFFTReal.cxx. ◆ TFFTReal() [3/3]. TFFTReal::TFFTReal ; (; Int_t ; ndim, . Int_t * ; n, . Bool_t ; inPlace = kFALSE . ). For multidimensional transforms 1st parameter is the # of dimensions, 2nd is the sizes (physical) of the transform in each dimension. ; Definition at line 103 of file TFFTReal.cxx. ◆ ~TFFTReal(). TFFTReal::~TFFTReal ; (; ). override . clean-up ; Definit",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:20615,Performance,perform,performance,20615,".h. ◆ GetSize(). virtual Int_t TFFTReal::GetSize ; (; ); const. inlinevirtual . Definition at line 42 of file TFFTReal.h. ◆ GetTransformFlag(). Option_t * TFFTReal::GetTransformFlag ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 47 of file TFFTReal.h. ◆ GetType(). Option_t * TFFTReal::GetType ; (; ); const. overridevirtual . Returns the type of the transform. ; Implements TVirtualFFT.; Definition at line 210 of file TFFTReal.cxx. ◆ Init(). void TFFTReal::Init ; (; Option_t * ; flags, . Int_t ; sign, . const Int_t * ; kind . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this function!!!!!; 1st parameter:; Possible flag_options:. ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found; This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. 2nd parameter:; is dummy and doesn't need to be specified; 3rd parameter:; transform kind for each dimension 4 different kinds of sine and cosine transforms are available; DCT-I - kind=0; DCT-II - kind=1; DCT-III - kind=2; DCT-IV - kind=3; DST-I - kind=4; DST-II - kind=5; DSTIII - kind=6; DSTIV - kind=7 . Implements TVirtualFFT.; Definition at line 176 of file TFFTReal.cxx. ◆ IsA(). TClass * TFFTReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 69 of file TFFTReal.h. ◆ IsInplace(). Bool_t TFFTReal::IsInplace ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 48 of file TFFTRea",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTReal.html:8182,Security,hash,hash,8182," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
https://root.cern/doc/master/classTFFTRealComplex.html:6668,Availability,error,error,6668,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:6757,Availability,error,error,6757,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:6912,Availability,error,error,6912,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:7209,Availability,error,error,7209,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:11773,Availability,error,error,11773," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Vers",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:811,Energy Efficiency,allocate,allocate,811,". ROOT: TFFTRealComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTRealComplex Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes a real input/complex output discrete Fourier transform in 1 or more dimensions. However, only out-of-place transforms are now supported for transforms in more than 1 dimension. For detailed information about the computed transforms, please refer to the FFTW manual; How to use it:; Create an instance of TFFTRealComplex - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5). NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size . Definition at line 20 of file TFFTRealComplex.h. Public Member Functions;  TFFTRealComplex ();  default ;  ;  TFFTRealComplex (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTRealComplex (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in each dimension. ;  ;  ~TFFTRealComplex ()",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:328,Integrability,interface,interface,328,". ROOT: TFFTRealComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTRealComplex Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes a real input/complex output discrete Fourier transform in 1 or more dimensions. However, only out-of-place transforms are now supported for transforms in more than 1 dimension. For detailed information about the computed transforms, please refer to the FFTW manual; How to use it:; Create an instance of TFFTRealComplex - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5). NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size . Definition at line 20 of file TFFTRealComplex.h. Public Member Functions;  TFFTRealComplex ();  default ;  ;  TFFTRealComplex (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTRealComplex (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in each dimension. ;  ;  ~TFFTRealComplex ()",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:435,Integrability,interface,interface,435,". ROOT: TFFTRealComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTRealComplex Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes a real input/complex output discrete Fourier transform in 1 or more dimensions. However, only out-of-place transforms are now supported for transforms in more than 1 dimension. For detailed information about the computed transforms, please refer to the FFTW manual; How to use it:; Create an instance of TFFTRealComplex - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5). NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size . Definition at line 20 of file TFFTRealComplex.h. Public Member Functions;  TFFTRealComplex ();  default ;  ;  TFFTRealComplex (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTRealComplex (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in each dimension. ;  ;  ~TFFTRealComplex ()",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:3376,Integrability,interface,interface,3376,"E) const override;  Returns the point #ipoint. ;  ; Double_t GetPointReal (const Int_t *ipoint, Bool_t fromInput=kFALSE) const override;  Returns the real part of the point #ipoint from the output or the point #ipoint from the input. ;  ; Double_t GetPointReal (Int_t ipoint, Bool_t fromInput=kFALSE) const override;  Returns the real part of the point #ipoint from the output or the point #ipoint from the input. ;  ; void GetPoints (Double_t *data, Bool_t fromInput=kFALSE) const override;  Fills the array data with the computed transform. ;  ; void GetPointsComplex (Double_t *data, Bool_t fromInput=kFALSE) const override;  Fills the argument arrays with the real and imaginary parts of the computed transform. ;  ; void GetPointsComplex (Double_t *re, Double_t *im, Bool_t fromInput=kFALSE) const override;  Fills the argument arrays with the real and imaginary parts of the computed transform. ;  ; Double_t * GetPointsReal (Bool_t fromInput=kFALSE) const override;  Returns the input array// One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ;  ; Int_t GetSign () const override;  ; virtual Int_t GetSize () const;  ; Option_t * GetTransformFlag () const override;  ; Option_t * GetType () const override;  ; void Init (Option_t *flags, Int_t, const Int_t *) override;  Creates the fftw-plan. ;  ; TClass * IsA () const override;  ; Bool_t IsInplace () const override;  ; void SetPoint (const Int_t *ipoint, Double_t re, Double_t im=0) override;  For multidimensional transforms. Set the point #ipoint ;  ; void SetPoint (Int_t ipoint, Double_t re, Double_t im=0) override;  Set the point #ipoint ;  ; void SetPointComplex (Int_t ipoint, TComplex &c) override;  Sets the point #ipoint (only the real part of the argument is taken) ;  ; void SetPoints (const Double_t *data) override;  Set all input points. ;  ; void SetPointsComplex (const Double_t *re, const Double_t *im) override;  Set all points. Only the real array is used. ;  ; void ",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:6674,Integrability,message,message,6674,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:7215,Integrability,message,message,7215,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:8417,Integrability,message,message,8417,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:11779,Integrability,message,message,11779," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Vers",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:12152,Integrability,message,message,12152," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualFFT * FFT (Int_t ndim, Int_t *n, Option_t *option);  Returns a pointer to the FFT of requested size and type. ;  ; static TVirtualFFT * GetCurrentTransform ();  static: return current fgFFT ;  ; static const char * GetDefaultFFT ();  static: return the name of the default fft ;  ; static void",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:20507,Integrability,interface,interface,20507,"::GetPointsComplex ; (; Double_t * ; data, . Bool_t ; fromInput = kFALSE . ); const. overridevirtual . Fills the argument arrays with the real and imaginary parts of the computed transform. ; Only (roughly) a half of the transform is copied, the rest being Hermitian symmetric with the first half ; Implements TVirtualFFT.; Definition at line 411 of file TFFTRealComplex.cxx. ◆ GetPointsComplex() [2/2]. void TFFTRealComplex::GetPointsComplex ; (; Double_t * ; re, . Double_t * ; im, . Bool_t ; fromInput = kFALSE . ); const. overridevirtual . Fills the argument arrays with the real and imaginary parts of the computed transform. ; Only (roughly) a half of the transform is copied, the rest being Hermitian symmetric with the first half ; Implements TVirtualFFT.; Definition at line 382 of file TFFTRealComplex.cxx. ◆ GetPointsReal(). Double_t * TFFTRealComplex::GetPointsReal ; (; Bool_t ; fromInput = kFALSE); const. overridevirtual . Returns the input array// One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented. ; Implements TVirtualFFT.; Definition at line 368 of file TFFTRealComplex.cxx. ◆ GetSign(). Int_t TFFTRealComplex::GetSign ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 44 of file TFFTRealComplex.h. ◆ GetSize(). virtual Int_t TFFTRealComplex::GetSize ; (; ); const. inlinevirtual . Definition at line 40 of file TFFTRealComplex.h. ◆ GetTransformFlag(). Option_t * TFFTRealComplex::GetTransformFlag ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 45 of file TFFTRealComplex.h. ◆ GetType(). Option_t * TFFTRealComplex::GetType ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 43 of file TFFTRealComplex.h. ◆ Init(). void TFFTRealComplex::Init ; (; Option_t * ; flags, . Int_t ; , . const Int_t * ;  . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are ",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:20614,Integrability,interface,interface,20614,"ridevirtual . Fills the argument arrays with the real and imaginary parts of the computed transform. ; Only (roughly) a half of the transform is copied, the rest being Hermitian symmetric with the first half ; Implements TVirtualFFT.; Definition at line 411 of file TFFTRealComplex.cxx. ◆ GetPointsComplex() [2/2]. void TFFTRealComplex::GetPointsComplex ; (; Double_t * ; re, . Double_t * ; im, . Bool_t ; fromInput = kFALSE . ); const. overridevirtual . Fills the argument arrays with the real and imaginary parts of the computed transform. ; Only (roughly) a half of the transform is copied, the rest being Hermitian symmetric with the first half ; Implements TVirtualFFT.; Definition at line 382 of file TFFTRealComplex.cxx. ◆ GetPointsReal(). Double_t * TFFTRealComplex::GetPointsReal ; (; Bool_t ; fromInput = kFALSE); const. overridevirtual . Returns the input array// One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented. ; Implements TVirtualFFT.; Definition at line 368 of file TFFTRealComplex.cxx. ◆ GetSign(). Int_t TFFTRealComplex::GetSign ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 44 of file TFFTRealComplex.h. ◆ GetSize(). virtual Int_t TFFTRealComplex::GetSize ; (; ); const. inlinevirtual . Definition at line 40 of file TFFTRealComplex.h. ◆ GetTransformFlag(). Option_t * TFFTRealComplex::GetTransformFlag ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 45 of file TFFTRealComplex.h. ◆ GetType(). Option_t * TFFTRealComplex::GetType ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 43 of file TFFTRealComplex.h. ◆ Init(). void TFFTRealComplex::Init ; (; Option_t * ; flags, . Int_t ; , . const Int_t * ;  . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this function!",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:22075,Integrability,depend,depending,22075,"lineoverridevirtual . Implements TVirtualFFT.; Definition at line 45 of file TFFTRealComplex.h. ◆ GetType(). Option_t * TFFTRealComplex::GetType ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 43 of file TFFTRealComplex.h. ◆ Init(). void TFFTRealComplex::Init ; (; Option_t * ; flags, . Int_t ; , . const Int_t * ;  . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this function!!!!!; Arguments sign and kind are dummy and not need to be specified Possible flag_options:. ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found. This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. ; Implements TVirtualFFT.; Definition at line 152 of file TFFTRealComplex.cxx. ◆ IsA(). TClass * TFFTRealComplex::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 64 of file TFFTRealComplex.h. ◆ IsInplace(). Bool_t TFFTRealComplex::IsInplace ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 46 of file TFFTRealComplex.h. ◆ MapFlag(). UInt_t TFFTRealComplex::MapFlag ; (; Option_t * ; flag). protected . allowed options: ""ES"" ""M"" ""P"" ""EX"" ; Definition at line 489 of file TFFTRealComplex.cxx. ◆ SetPoint() [1/2]. void TFFTRealComplex::SetPoint ; (; const Int_t * ; ipoint, . Double_t ; re, . Double_t ; im = 0 . ). overridevirtual . For multidimensional transforms. Set the point #ipoint ; Implements TVirtualFFT.; Definition at line 447 of file TFFTRe",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:4615,Modifiability,inherit,inherited,4615,"ates the fftw-plan. ;  ; TClass * IsA () const override;  ; Bool_t IsInplace () const override;  ; void SetPoint (const Int_t *ipoint, Double_t re, Double_t im=0) override;  For multidimensional transforms. Set the point #ipoint ;  ; void SetPoint (Int_t ipoint, Double_t re, Double_t im=0) override;  Set the point #ipoint ;  ; void SetPointComplex (Int_t ipoint, TComplex &c) override;  Sets the point #ipoint (only the real part of the argument is taken) ;  ; void SetPoints (const Double_t *data) override;  Set all input points. ;  ; void SetPointsComplex (const Double_t *re, const Double_t *im) override;  Set all points. Only the real array is used. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform () override;  Computes the transform, specified in Init() function. ;  ;  Public Member Functions inherited from TVirtualFFT;  TVirtualFFT ();  ; virtual ~TVirtualFFT ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual vo",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:4907,Modifiability,inherit,inherited,4907,"nal transforms. Set the point #ipoint ;  ; void SetPoint (Int_t ipoint, Double_t re, Double_t im=0) override;  Set the point #ipoint ;  ; void SetPointComplex (Int_t ipoint, TComplex &c) override;  Sets the point #ipoint (only the real part of the argument is taken) ;  ; void SetPoints (const Double_t *data) override;  Set all input points. ;  ; void SetPointsComplex (const Double_t *re, const Double_t *im) override;  Set all points. Only the real array is used. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform () override;  Computes the transform, specified in Init() function. ;  ;  Public Member Functions inherited from TVirtualFFT;  TVirtualFFT ();  ; virtual ~TVirtualFFT ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:6304,Modifiability,inherit,inheritance,6304,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:8515,Modifiability,inherit,inherits,8515,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:8632,Modifiability,inherit,inherits,8632,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:12653,Modifiability,inherit,inherited,12653,"d SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualFFT * FFT (Int_t ndim, Int_t *n, Option_t *option);  Returns a pointer to the FFT of requested size and type. ;  ; static TVirtualFFT * GetCurrentTransform ();  static: return current fgFFT ;  ; static const char * GetDefaultFFT ();  static: return the name of the default fft ;  ; static void SetDefaultFFT (const char *name="""");  static: set name of default fft ;  ; static void SetTransform (TVirtualFFT *fft);  static: set the current transfrom to parameter ;  ; static TVirtualFFT * SineCosine (Int_t ndim, Int_t *n, Int_t *r2rkind, Option_t *option);  Returns a pointer to a sine or cosine transform of requested size and kind. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:13522,Modifiability,inherit,inherited,13522,"tatic Public Member Functions inherited from TVirtualFFT; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualFFT * FFT (Int_t ndim, Int_t *n, Option_t *option);  Returns a pointer to the FFT of requested size and type. ;  ; static TVirtualFFT * GetCurrentTransform ();  static: return current fgFFT ;  ; static const char * GetDefaultFFT ();  static: return the name of the default fft ;  ; static void SetDefaultFFT (const char *name="""");  static: set name of default fft ;  ; static void SetTransform (TVirtualFFT *fft);  static: set the current transfrom to parameter ;  ; static TVirtualFFT * SineCosine (Int_t ndim, Int_t *n, Int_t *r2rkind, Option_t *option);  Returns a pointer to a sine or cosine transform of requested size and kind. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; UInt_t MapFlag (Option_t *flag);  allowed options: ""ES"" ""M"" ""P"" ""EX"" ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInc",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:14138,Modifiability,inherit,inherited,14138,"efaultFFT (const char *name="""");  static: set name of default fft ;  ; static void SetTransform (TVirtualFFT *fft);  static: set the current transfrom to parameter ;  ; static TVirtualFFT * SineCosine (Int_t ndim, Int_t *n, Int_t *r2rkind, Option_t *option);  Returns a pointer to a sine or cosine transform of requested size and kind. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; UInt_t MapFlag (Option_t *flag);  allowed options: ""ES"" ""M"" ""P"" ""EX"" ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inh",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:14506,Modifiability,inherit,inherited,14506,"();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; UInt_t MapFlag (Option_t *flag);  allowed options: ""ES"" ""M"" ""P"" ""EX"" ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TVirtualFFT; static TString fgDefault = """";  ; static TVirtualFFT * fgFFT = nullptr;  . #include <TFFTRealComplex.h>. Inheritance diagram for TFFTRealComplex:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFFTRealC",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:15147,Modifiability,inherit,inherited,15147,"_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TVirtualFFT; static TString fgDefault = """";  ; static TVirtualFFT * fgFFT = nullptr;  . #include <TFFTRealComplex.h>. Inheritance diagram for TFFTRealComplex:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFFTRealComplex() [1/3]. TFFTRealComplex::TFFTRealComplex ; (; ). default ; Definition at line 55 of file TFFTRealComplex.cxx. ◆ TFFTRealComplex() [2/3]. TFFTRealComplex::TFFTRealComplex ; (; Int_t ; n, . Bool_t ; inPlace . ). For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ; Definition at line 69 of file TFFTRealComplex.cxx. ◆ TFFTRealComplex() [3/3]. TFFTRealComplex::TFFTRealComplex ; (; Int_t ; ndim, . Int_t * ; n, . Bool_t ; inPlace . ). For ndim-dimensional transforms Second argument contains sizes of the transform in each dimension. ; Definition at line 90 of file TFFTRealComplex.cxx. ◆ ~TFFTRealComplex(). ",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:15247,Modifiability,inherit,inherited,15247,"_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TVirtualFFT; static TString fgDefault = """";  ; static TVirtualFFT * fgFFT = nullptr;  . #include <TFFTRealComplex.h>. Inheritance diagram for TFFTRealComplex:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFFTRealComplex() [1/3]. TFFTRealComplex::TFFTRealComplex ; (; ). default ; Definition at line 55 of file TFFTRealComplex.cxx. ◆ TFFTRealComplex() [2/3]. TFFTRealComplex::TFFTRealComplex ; (; Int_t ; n, . Bool_t ; inPlace . ). For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ; Definition at line 69 of file TFFTRealComplex.cxx. ◆ TFFTRealComplex() [3/3]. TFFTRealComplex::TFFTRealComplex ; (; Int_t ; ndim, . Int_t * ; n, . Bool_t ; inPlace . ). For ndim-dimensional transforms Second argument contains sizes of the transform in each dimension. ; Definition at line 90 of file TFFTRealComplex.cxx. ◆ ~TFFTRealComplex(). ",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:21801,Performance,perform,performance,21801,"x.h. ◆ GetSize(). virtual Int_t TFFTRealComplex::GetSize ; (; ); const. inlinevirtual . Definition at line 40 of file TFFTRealComplex.h. ◆ GetTransformFlag(). Option_t * TFFTRealComplex::GetTransformFlag ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 45 of file TFFTRealComplex.h. ◆ GetType(). Option_t * TFFTRealComplex::GetType ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 43 of file TFFTRealComplex.h. ◆ Init(). void TFFTRealComplex::Init ; (; Option_t * ; flags, . Int_t ; , . const Int_t * ;  . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this function!!!!!; Arguments sign and kind are dummy and not need to be specified Possible flag_options:. ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found. This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. ; Implements TVirtualFFT.; Definition at line 152 of file TFFTRealComplex.cxx. ◆ IsA(). TClass * TFFTRealComplex::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 64 of file TFFTRealComplex.h. ◆ IsInplace(). Bool_t TFFTRealComplex::IsInplace ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 46 of file TFFTRealComplex.h. ◆ MapFlag(). UInt_t TFFTRealComplex::MapFlag ; (; Option_t * ; flag). protected . allowed options: ""ES"" ""M"" ""P"" ""EX"" ; Definition at line 489 of file TFFTRealComplex.cxx. ◆ SetPoint() [1/2]. void TFFTRealComple",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFFTRealComplex.html:8146,Security,hash,hash,8146," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
https://root.cern/doc/master/classTFile-members.html:3604,Availability,error,error,3604,"; DirReadKeys(TDirectory *)TFileinlineprotectedvirtual; DirWriteHeader(TDirectory *)TFileinlineprotectedvirtual; DirWriteKeys(TDirectory *)TFileinlineprotectedvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTFilevirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawMap(const char *keys=""*"", Option_t *option="""")TFilevirtual; Dump() constTObjectvirtual; EAsyncOpenStatus enum nameTFile; ECacheAction enum nameTFile; EDeprecatedStatusBits enum nameTObject; EFileType enum nameTFile; EOpenTimeOut enum nameTFile; ERelativeTo enum nameTFile; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTFile; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fArchiveTFileprotected; fArchiveOffsetTFileprotected; fAsyncHandleTFileprotected; fAsyncOpenStatusTFileprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBEGINTFileprotected; fBitsTObjectprivate; fBufferSizeTDirectoryFileprotected; fBytesReadTFileprotected; fBytesReadExtraTFileprotected; fBytesWriteTFileprotected; fCacheReadTFileprotected; fCacheReadMapTFileprotected; fCacheWriteTFileprotected; fClassIndexTFileprotected; fCompressTFileprotected; fContextTDirectoryprotected; fContextPegTDirectoryprotected; fDTFileprotected; fDatimeCTDirectoryFileprotected; fDatimeMTDirectoryFileprotected; fENDTFileprotected; fFileTDirectoryFileprotected; fFreeTFileprotected; fgAddDirectoryTDirectoryprotectedstatic; fgAsyncOpenRequestsTFileprotectedstatic; fgBytesReadTFileprotectedstatic; fgBytesWriteTFileprotectedstatic; fgCacheFileDirTFileprotectedstatic; fgCacheFileDisconnectedTFileprotectedstatic; fgCacheFileFo",MatchSource.WIKI,doc/master/classTFile-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile-members.html
https://root.cern/doc/master/classTFile-members.html:3685,Availability,error,error,3685,"; DirReadKeys(TDirectory *)TFileinlineprotectedvirtual; DirWriteHeader(TDirectory *)TFileinlineprotectedvirtual; DirWriteKeys(TDirectory *)TFileinlineprotectedvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTFilevirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawMap(const char *keys=""*"", Option_t *option="""")TFilevirtual; Dump() constTObjectvirtual; EAsyncOpenStatus enum nameTFile; ECacheAction enum nameTFile; EDeprecatedStatusBits enum nameTObject; EFileType enum nameTFile; EOpenTimeOut enum nameTFile; ERelativeTo enum nameTFile; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTFile; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fArchiveTFileprotected; fArchiveOffsetTFileprotected; fAsyncHandleTFileprotected; fAsyncOpenStatusTFileprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBEGINTFileprotected; fBitsTObjectprivate; fBufferSizeTDirectoryFileprotected; fBytesReadTFileprotected; fBytesReadExtraTFileprotected; fBytesWriteTFileprotected; fCacheReadTFileprotected; fCacheReadMapTFileprotected; fCacheWriteTFileprotected; fClassIndexTFileprotected; fCompressTFileprotected; fContextTDirectoryprotected; fContextPegTDirectoryprotected; fDTFileprotected; fDatimeCTDirectoryFileprotected; fDatimeMTDirectoryFileprotected; fENDTFileprotected; fFileTDirectoryFileprotected; fFreeTFileprotected; fgAddDirectoryTDirectoryprotectedstatic; fgAsyncOpenRequestsTFileprotectedstatic; fgBytesReadTFileprotectedstatic; fgBytesWriteTFileprotectedstatic; fgCacheFileDirTFileprotectedstatic; fgCacheFileDisconnectedTFileprotectedstatic; fgCacheFileFo",MatchSource.WIKI,doc/master/classTFile-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile-members.html
https://root.cern/doc/master/classTFile-members.html:183,Modifiability,inherit,inherited,183,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TFile Member List. This is the complete list of members for TFile, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TObject *obj, Bool_t replace=kFALSE) overrideTDirectoryFileinlinevirtual; AddDirectory(Bool_t add=kTRUE)TDirectorystatic; AddDirectoryStatus()TDirectorystatic; AddToTObjectTable(TObject *)TObjectprivatestatic; Append(TObject *obj, Bool_t replace=kFALSE) overrideTDirectoryFilevirtual; AppendKey(TKey *key) overrideTDirectoryFilevirtual; AppendPad(Option_t *option="""")TObjectvirtual; AsyncOpen(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)TFilestatic; Browse(TBrowser *b) overrideTDirectoryFilevirtual; Build(TFile *motherFile=nullptr, TDirectory *motherDir=nullptr) overrideTDirectoryFileinlinevirtual; BuildDirectory(TFile *motherFile, TDirectory *motherDir)TDirectoryprotected; BuildDirectoryFile(TFile *motherFile, TDirectory *motherDir)TDirectoryFileprotected; Cd(const char *path)TDirectorystatic; cd() overrideTDirectoryFilevirtual; cd(const char *path) overrideTDirectoryFilevirtual; Cd1(const char *path)TDirectoryprotectedstatic; cd1(const char *path)TDirectoryprotected; CheckedHash()TObjectinline; Class()TFilestatic; Class_Name()TFilestatic; Class_Version()TFileinlinestatic; ClassName() constTObjectvirtual; CleanTargets()TDirectoryFileprotected; Clear(Option_t *option="""") overrideTDirectoryvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloneObject(const TObject *obj, Bool_t autoadd=kTRUE) overrideTDirectoryFilevirtual; Close(Option_t *option="""") overrideTFilevirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &) const overrideTFileinlinevirtual; Cp(const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000)TFilevirtual; Cp(const char *src, const char *dst, Boo",MatchSource.WIKI,doc/master/classTFile-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile-members.html
https://root.cern/doc/master/classTFile-members.html:16785,Performance,cache,cacheDir,16785,"ecursiveRemove(TObject *obj) overrideTDirectoryvirtual; RegisterContext(TContext *ctxt)TDirectoryprotected; RegisterGDirectory(SharedGDirectory_t &ptr)TDirectoryprotected; Remove(TObject *)TDirectoryvirtual; ReOpen(Option_t *mode)TFilevirtual; ResetAfterMerge(TFileMergeInfo *)TDirectoryFilevirtual; ResetBit(UInt_t f)TObjectinline; ResetErrno() constTFilevirtual; rmdir(const char *name) overrideTDirectoryFilevirtual; Save() overrideTDirectoryFilevirtual; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SaveObjectAs(const TObject *obj, const char *filename="""", Option_t *option="""") const overrideTDirectoryFilevirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SaveSelf(Bool_t force=kFALSE) overrideTDirectoryFilevirtual; Seek(Long64_t offset, ERelativeTo pos=kBeg)TFilevirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetBufferSize(Int_t bufsize) overrideTDirectoryFilevirtual; SetCacheFileDir(std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE)TFilestatic; SetCacheRead(TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect)TFilevirtual; SetCacheWrite(TFileCacheWrite *cache)TFilevirtual; SetCompressionAlgorithm(Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal)TFilevirtual; SetCompressionLevel(Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin)TFilevirtual; SetCompressionSettings(Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault)TFilevirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEND(Long64_t last)TFileinlinevirtual; SetFileBytesRead(Long64_t bytes=0)TFilestatic; SetFileBytesWritten(Long64_t bytes=0)TFilestatic; SetFileReadCalls(Int_t readcalls=0)TFilestatic; SetModified() overrideTDirectoryFileinlinevirtual; SetMother(TObject *mother)TDirectoryinlinevirtual; SetName(const char *newname) overrideTDirectoryvirtual; SetNameTitle(const char *name",MatchSource.WIKI,doc/master/classTFile-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile-members.html
https://root.cern/doc/master/classTFile-members.html:16900,Performance,cache,cache,16900,"erGDirectory(SharedGDirectory_t &ptr)TDirectoryprotected; Remove(TObject *)TDirectoryvirtual; ReOpen(Option_t *mode)TFilevirtual; ResetAfterMerge(TFileMergeInfo *)TDirectoryFilevirtual; ResetBit(UInt_t f)TObjectinline; ResetErrno() constTFilevirtual; rmdir(const char *name) overrideTDirectoryFilevirtual; Save() overrideTDirectoryFilevirtual; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SaveObjectAs(const TObject *obj, const char *filename="""", Option_t *option="""") const overrideTDirectoryFilevirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SaveSelf(Bool_t force=kFALSE) overrideTDirectoryFilevirtual; Seek(Long64_t offset, ERelativeTo pos=kBeg)TFilevirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetBufferSize(Int_t bufsize) overrideTDirectoryFilevirtual; SetCacheFileDir(std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE)TFilestatic; SetCacheRead(TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect)TFilevirtual; SetCacheWrite(TFileCacheWrite *cache)TFilevirtual; SetCompressionAlgorithm(Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal)TFilevirtual; SetCompressionLevel(Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin)TFilevirtual; SetCompressionSettings(Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault)TFilevirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEND(Long64_t last)TFileinlinevirtual; SetFileBytesRead(Long64_t bytes=0)TFilestatic; SetFileBytesWritten(Long64_t bytes=0)TFilestatic; SetFileReadCalls(Int_t readcalls=0)TFilestatic; SetModified() overrideTDirectoryFileinlinevirtual; SetMother(TObject *mother)TDirectoryinlinevirtual; SetName(const char *newname) overrideTDirectoryvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetOffset(Long64_t offset, ERelativeT",MatchSource.WIKI,doc/master/classTFile-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile-members.html
https://root.cern/doc/master/classTFile-members.html:17007,Performance,cache,cache,17007,"_t *mode)TFilevirtual; ResetAfterMerge(TFileMergeInfo *)TDirectoryFilevirtual; ResetBit(UInt_t f)TObjectinline; ResetErrno() constTFilevirtual; rmdir(const char *name) overrideTDirectoryFilevirtual; Save() overrideTDirectoryFilevirtual; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SaveObjectAs(const TObject *obj, const char *filename="""", Option_t *option="""") const overrideTDirectoryFilevirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SaveSelf(Bool_t force=kFALSE) overrideTDirectoryFilevirtual; Seek(Long64_t offset, ERelativeTo pos=kBeg)TFilevirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetBufferSize(Int_t bufsize) overrideTDirectoryFilevirtual; SetCacheFileDir(std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE)TFilestatic; SetCacheRead(TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect)TFilevirtual; SetCacheWrite(TFileCacheWrite *cache)TFilevirtual; SetCompressionAlgorithm(Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal)TFilevirtual; SetCompressionLevel(Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin)TFilevirtual; SetCompressionSettings(Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault)TFilevirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEND(Long64_t last)TFileinlinevirtual; SetFileBytesRead(Long64_t bytes=0)TFilestatic; SetFileBytesWritten(Long64_t bytes=0)TFilestatic; SetFileReadCalls(Int_t readcalls=0)TFilestatic; SetModified() overrideTDirectoryFileinlinevirtual; SetMother(TObject *mother)TDirectoryinlinevirtual; SetName(const char *newname) overrideTDirectoryvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetOffset(Long64_t offset, ERelativeTo pos=kBeg)TFilevirtual; SetOnlyStaged(Bool_t onlystaged)TFilestatic; SetOpenTimeout(UInt_t timeout)TFilest",MatchSource.WIKI,doc/master/classTFile-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile-members.html
https://root.cern/doc/master/classTFile-members.html:17995,Safety,timeout,timeout,17995,"acheAction action=kDisconnect)TFilevirtual; SetCacheWrite(TFileCacheWrite *cache)TFilevirtual; SetCompressionAlgorithm(Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal)TFilevirtual; SetCompressionLevel(Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin)TFilevirtual; SetCompressionSettings(Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault)TFilevirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEND(Long64_t last)TFileinlinevirtual; SetFileBytesRead(Long64_t bytes=0)TFilestatic; SetFileBytesWritten(Long64_t bytes=0)TFilestatic; SetFileReadCalls(Int_t readcalls=0)TFilestatic; SetModified() overrideTDirectoryFileinlinevirtual; SetMother(TObject *mother)TDirectoryinlinevirtual; SetName(const char *newname) overrideTDirectoryvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetOffset(Long64_t offset, ERelativeTo pos=kBeg)TFilevirtual; SetOnlyStaged(Bool_t onlystaged)TFilestatic; SetOpenTimeout(UInt_t timeout)TFilestatic; SetOption(Option_t *option="">"")TFileinlinevirtual; SetReadaheadSize(Int_t bufsize=256000)TFilestatic; SetReadCalls(Int_t readcalls=0)TFileinlinevirtual; SetReadStreamerInfo(Bool_t readinfo=kTRUE)TFilestatic; SetSeekDir(Long64_t v) overrideTDirectoryFileinlinevirtual; SetTitle(const char *title="""")TNamedvirtual; SetTRefAction(TObject *ref, TObject *parent) overrideTDirectoryFilevirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetWritable(Bool_t writable=kTRUE) overrideTDirectoryFilevirtual; SharedGDirectory_t typedefTDirectoryprotected; ShowStreamerInfo()TFilevirtual; ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval=0)TFilestatic; Sizeof() const overrideTFilevirtual; Streamer(TBuffer &) overrideTFilevirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TFileinline; SumBuffer(Int_t bufsize)TFile; SysClose(Int_t fd)TFileprotectedvirtual; SysError(const char *method, const char *msgfmt,.",MatchSource.WIKI,doc/master/classTFile-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile-members.html
https://root.cern/doc/master/classTFile.html:12425,Availability,recover,recover,12425,"(const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void ResetErrno () const;  Method resetting the errno. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:25905,Availability,error,error,25905," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer)",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:25994,Availability,error,error,25994,"ave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:26149,Availability,error,error,26149,"hether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, ",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:26446,Availability,error,error,26446,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ; ",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:29939,Availability,error,error,29939," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:52388,Availability,recover,recovery,52388,"bie. One can detect this situation with a code like: TFile f(""file.root"");; if (f.IsZombie()) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; f#define f(i)Definition RSha256.hxx:104; If you open a file instead with TFile::Open(""file.root"") use rather the following code as a nullptr is returned. TFile* f = TFile::Open(""file.root"");; if (!f) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; When opening the file, the system checks the validity of this directory. If something wrong is detected, an automatic Recovery is performed. In this case, the file is scanned sequentially reading all logical blocks and attempting to rebuild a correct directory (see TFile::Recover). One can disable the automatic recovery procedure when reading one or more files by setting the environment variable ""TFile.Recover: 0"" in the system.rootrc file.; A bit TFile::kReproducible can be enabled specifying the ""reproducible"" url option when creating the file: TFile *f = TFile::Open(""name.root?reproducible"",""RECREATE"",""File title"");; Unlike regular TFiles, the content of such file has reproducible binary content when writing exactly same data. This achieved by writing pre-defined values for creation and modification date of TKey/TDirectory objects and null value for TUUID objects inside TFile. As drawback, TRef objects stored in such file cannot be read correctly.; In case the name of the file is not reproducible either (in case of creating temporary filenames) a value can be passed to the reproducible option to replace the name stored in the file. TFile *f = TFile::Open(""tmpname.root?reproducible=fixedname"",""RECREATE"",""File title"");. Definition at line 339 of file TFile.cxx. ◆ ~TFile(). TFile::~TFile ; (; ). override . File destructor.",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:61121,Availability,error,error,61121,"ew->Event Statusbar"". Then, when moving the mouse in the canvas, the ""Event Status"" panels shows the object corresponding to the mouse position.; Example: auto f = new TFile(""myfile.root"");; f->DrawMap();; TFile::TFileTFile()File default Constructor.Definition TFile.cxx:201. Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1128 of file TFile.cxx. ◆ FillBuffer(). void TFile::FillBuffer ; (; char *& ; buffer). overridevirtual . Encode file output buffer. ; The file output buffer contains only the FREE data record. ; Reimplemented from TDirectoryFile.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1170 of file TFile.cxx. ◆ Flush(). void TFile::Flush ; (; ). virtual . Synchronize a file's in-memory and on-disk states. ; Reimplemented in TSQLFile, TXMLFile, TNetFile, and TNetXNGFile.; Definition at line 1141 of file TFile.cxx. ◆ FlushWriteCache(). Bool_t TFile::FlushWriteCache ; (; ). protected . Flush the write cache if active. ; Return kTRUE in case of error ; Definition at line 1158 of file TFile.cxx. ◆ GetArchive(). TArchiveFile * TFile::GetArchive ; (; ); const. inline . Definition at line 220 of file TFile.h. ◆ GetArchiveOffset(). Long64_t TFile::GetArchiveOffset ; (; ); const. inline . Definition at line 221 of file TFile.h. ◆ GetAsyncOpenStatus() [1/3]. virtual EAsyncOpenStatus TFile::GetAsyncOpenStatus ; (; ). inlineprotectedvirtual . Definition at line 137 of file TFile.h. ◆ GetAsyncOpenStatus() [2/3]. TFile::EAsyncOpenStatus TFile::GetAsyncOpenStatus ; (; const char * ; name). static . Get status of the async open request related to 'name'. ; Definition at line 4899 of file TFile.cxx. ◆ GetAsyncOpenStatus() [3/3]. TFile::EAsyncOpenStatus TFile::GetAsyncOpenStatus ; (; TFileOpenHandle * ; handle). static . Get status of the async open request related to 'handle'. ; Definition at line 4928 of file TFile.cxx. ◆ GetBestBuffer(). Int_t TFile::GetBestBuffer ; (; ); const. Return the best buffer size of objects on this file. ; The best buffe",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:64841,Availability,avail,available,64841,"e.h. ◆ GetCompressionFactor(). Float_t TFile::GetCompressionFactor ; (; ). Return the file compression factor. ; Add total number of compressed/uncompressed bytes for each key. Returns the ratio of the two. ; Definition at line 1202 of file TFile.cxx. ◆ GetCompressionLevel(). Int_t TFile::GetCompressionLevel ; (; ); const. inline . Definition at line 391 of file TFile.h. ◆ GetCompressionSettings(). Int_t TFile::GetCompressionSettings ; (; ); const. inline . Definition at line 397 of file TFile.h. ◆ GetEND(). virtual Long64_t TFile::GetEND ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 231 of file TFile.h. ◆ GetEndpointUrl() [1/2]. virtual const TUrl * TFile::GetEndpointUrl ; (; ); const. inlinevirtual . Reimplemented in TNetFile.; Definition at line 235 of file TFile.h. ◆ GetEndpointUrl() [2/2]. const TUrl * TFile::GetEndpointUrl ; (; const char * ; name). static . Get final URL for file being opened asynchronously. ; Returns 0 is the information is not yet available. ; Definition at line 4945 of file TFile.cxx. ◆ GetErrno(). Int_t TFile::GetErrno ; (; ); const. virtual . Method returning errno. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1246 of file TFile.cxx. ◆ GetFd(). Int_t TFile::GetFd ; (; ); const. inline . Definition at line 234 of file TFile.h. ◆ GetFileBytesRead(). Long64_t TFile::GetFileBytesRead ; (; ). static . Static function returning the total number of bytes read from all files. ; Definition at line 4574 of file TFile.cxx. ◆ GetFileBytesWritten(). Long64_t TFile::GetFileBytesWritten ; (; ). static . Static function returning the total number of bytes written to all files. ; Does not take into account what might still be in the write caches. ; Definition at line 4583 of file TFile.cxx. ◆ GetFileCounter(). Long64_t TFile::GetFileCounter ; (; ). static . Definition at line 4617 of file TFile.cxx. ◆ GetFileReadCalls(). Int_t TFile::GetFileReadCalls ; (; ). static . Static function returning",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:75339,Availability,avail,available,75339,"(default and currently the only supported value), the function generates an include file for each class in the StreamerInfo list for which a TClass object does not exist.; The code generated includes:; dirnameProjectHeaders.h, which contains one #include statement per generated header file; dirnameProjectSource.cxx,which contains all the constructors and destructors implementation. and one header per class that is not nested inside another class. The header file name is the fully qualified name of the class after all the special characters ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class are replaced by a vector of pair. set and multiset when the tempalte parameter is a class are replaced by a vector. This is required since we do not have the code needed to order and/or compare the object of the classes. This is a quick explanation of the options available: . Option Details . new (default) A new directory dirname is created. If dirname already exist, an error message is printed and the function returns. . recreate If dirname does not exist, it is created (like in ""new""). If dirname already exist, all existing files in dirname are deleted before creating the new files. . update New classes are added to the existing directory. Existing classes with the same name are replaced by the new definition. If the directory dirname doest not exist, same effect as ""new"". . genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirn",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:75448,Availability,error,error,75448,"ich a TClass object does not exist.; The code generated includes:; dirnameProjectHeaders.h, which contains one #include statement per generated header file; dirnameProjectSource.cxx,which contains all the constructors and destructors implementation. and one header per class that is not nested inside another class. The header file name is the fully qualified name of the class after all the special characters ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class are replaced by a vector of pair. set and multiset when the tempalte parameter is a class are replaced by a vector. This is required since we do not have the code needed to order and/or compare the object of the classes. This is a quick explanation of the options available: . Option Details . new (default) A new directory dirname is created. If dirname already exist, an error message is printed and the function returns. . recreate If dirname does not exist, it is created (like in ""new""). If dirname already exist, all existing files in dirname are deleted before creating the new files. . update New classes are added to the existing directory. Existing classes with the same name are replaced by the new definition. If the directory dirname doest not exist, same effect as ""new"". . genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the cur",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:78016,Availability,error,error,78016,"the CINT dictionary.; creates the build script MAKEP; creates a LinkDef.h file; runs rootcint generating demoProjectDict.cxx; compiles demoProjectDict.cxx into demoProjectDict.o; generates a shared lib demo.so; dynamically links the shared lib demo.so to the executable If only the option ""+"" had been specified, one can still link the shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2726 of file TFile.cxx. ◆ MakeProjectParMake(). Int_t TFile::MakeProjectParMake ; (; const char * ; pack, . const char * ; filemake . ). protected . Create makefile at 'filemake' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on success, -1 on error. ; Definition at line 3364 of file TFile.cxx. ◆ MakeProjectParProofInf(). Int_t TFile::MakeProjectParProofInf ; (; const char * ; pack, . const char * ; proofinf . ). protected . Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on success, -1 on error. ; Definition at line 3486 of file TFile.cxx. ◆ Map() [1/2]. virtual void TFile::Map ; (; ). inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 267 of file TFile.h. ◆ Map() [2/2]. void TFile::Map ; (; Option_t * ; opt). virtual . List the contents of a file sequentially. ; For each logical record found, it prints: Date/Time Record_Adress Logical_Record_Length ClassName CompressionFactor; Example of output 20010404/150437 At:64 N=150 TFile; 20010404/150440 At:214 N=28326 TBasket CX = 1.13; 20010404/150440 At:28540 N=29616 TBasket CX = 1.08; 20010404/150440 At:58156 N=29640 TBasket CX = 1.08; 20010404/150440 At:87796 N",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:78349,Availability,error,error,78349,"he shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2726 of file TFile.cxx. ◆ MakeProjectParMake(). Int_t TFile::MakeProjectParMake ; (; const char * ; pack, . const char * ; filemake . ). protected . Create makefile at 'filemake' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on success, -1 on error. ; Definition at line 3364 of file TFile.cxx. ◆ MakeProjectParProofInf(). Int_t TFile::MakeProjectParProofInf ; (; const char * ; pack, . const char * ; proofinf . ). protected . Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on success, -1 on error. ; Definition at line 3486 of file TFile.cxx. ◆ Map() [1/2]. virtual void TFile::Map ; (; ). inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 267 of file TFile.h. ◆ Map() [2/2]. void TFile::Map ; (; Option_t * ; opt). virtual . List the contents of a file sequentially. ; For each logical record found, it prints: Date/Time Record_Adress Logical_Record_Length ClassName CompressionFactor; Example of output 20010404/150437 At:64 N=150 TFile; 20010404/150440 At:214 N=28326 TBasket CX = 1.13; 20010404/150440 At:28540 N=29616 TBasket CX = 1.08; 20010404/150440 At:58156 N=29640 TBasket CX = 1.08; 20010404/150440 At:87796 N=29076 TBasket CX = 1.10; 20010404/150440 At:116872 N=10151 TBasket CX = 3.15; 20010404/150441 At:127023 N=28341 TBasket CX = 1.13; 20010404/150441 At:155364 N=29594 TBasket CX = 1.08; 20010404/150441 At:184958 N=29616 TBasket CX = 1.08; 20010404/150441 At:214574 N=29075 TBasket CX = 1.10; 20010404/150441 At:243649 N=9583 TBasket C",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:83314,Availability,error,error,83314,"r (for the plugin manager see the TPluginManager class). The returned type of TFile depends on the file name specified by 'url'. If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried sequentially in the specified order until a successful open. If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile, etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:83733,Availability,down,downloaded,83733,"ile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ;",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:83787,Availability,down,download,83787,"ular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseComp",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:83848,Availability,down,downloaded,83848,"will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). staticprivate . Open a fi",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:84927,Availability,down,downloaded,84927,"eleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). staticprivate . Open a file for reading through the file cache. ; The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir(). ; Definition at line 3874 of file TFile.cxx. ◆ operator=(). void TFile::operator= ; (; const TFile & ; ). privatedelete . ◆ Paint(). void TFile::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:84981,Availability,down,download,84981,"f the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). staticprivate . Open a file for reading through the file cache. ; The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir(). ; Definition at line 3874 of file TFile.cxx. ◆ operator=(). void TFile::operator= ; (; const TFile & ; ). privatedelete . ◆ Paint(). void TFile::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TDCacheFile, TNetFile, TWebFile, an",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:85042,Availability,down,downloaded,85042," nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). staticprivate . Open a file for reading through the file cache. ; The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir(). ; Definition at line 3874 of file TFile.cxx. ◆ operator=(). void TFile::operator= ; (; const TFile & ; ). privatedelete . ◆ Paint(). void TFile::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1770 of file TFile.cxx. ◆ Rea",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:85904,Availability,failure,failure,85904," file cache. ; The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir(). ; Definition at line 3874 of file TFile.cxx. ◆ operator=(). void TFile::operator= ; (; const TFile & ; ). privatedelete . ◆ Paint(). void TFile::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1770 of file TFile.cxx. ◆ ReadBuffer() [2/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks ",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:86259,Availability,failure,failure,86259,"int ; (; Option_t * ; option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1770 of file TFile.cxx. ◆ ReadBuffer() [2/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TDCacheFile, TNetFile, TS3WebFile, TWebFile, and TNetXNGFile.; ",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:87146,Availability,failure,failure,87146,"pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TDCacheFile, TNetFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 1821 of file TFile.cxx. ◆ ReadBufferViaCache(). Int_t TFile::ReadBufferViaCache ; (; char * ; buf, . Int_t ; len . ). protected . Read buffer via cache. ; Returns 0 if the requested block is not in the cache, 1 in case read via cache was successful, 2 in case read via cache failed. ; Definition at line 1889 of file TFile.cxx. ◆ ReadFree(). void TFile::ReadFree ; (; ). virtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at lin",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:88616,Availability,recover,recover,88616,"ee ; (; ). virtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is imp",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:88711,Availability,recover,recovered,88711,"e has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see T",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:88740,Availability,recover,recovered,88740,"en on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree heade",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:88992,Availability,recover,recover,88992,". The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the sys",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:89135,Availability,recover,recovered,89135,"ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reope",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:89403,Availability,recover,recovered,89403," that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case th",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:89505,Availability,recover,recovered,89505,"amerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or w",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:89577,Availability,recover,recovered,89577,"f not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is chan",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:89735,Availability,recover,recovered,89735,"the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is changed to this file. ; Reimplemented in TSQLFile, TXMLFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 2162 of",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:89933,Availability,recover,recovery,89933," open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is changed to this file. ; Reimplemented in TSQLFile, TXMLFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 2162 of file TFile.cxx. ◆ ResetErrno(). void TFile::ResetErrno ; (; ); const. virtual . Method resetting the errno. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, and TMemFile.; Definiti",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:90538,Availability,failure,failure,90538,"est if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is changed to this file. ; Reimplemented in TSQLFile, TXMLFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 2162 of file TFile.cxx. ◆ ResetErrno(). void TFile::ResetErrno ; (; ); const. virtual . Method resetting the errno. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, and TMemFile.; Definition at line 1254 of file TFile.cxx. ◆ Seek(). void TFile::Seek ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ; Reimplemented in TDavixFile, TNetFile, TWebFile, TNetXNGFile, TSQLFile, and TXMLFile.; Definition at line 2274 of file TFile.cxx. ◆ SetCacheFileDir(). Bool_t TFile::SetCacheFileDir ; (; std::string_view ; cachedir, . Bool_t ; operatedisconnected = kTRUE, . Bool_t ; forcecacheread = kFALSE . ). static . Sets the directory where to locally ",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:100840,Availability,failure,failure,100840,"SQLFile, TXMLFile, and TParallelMergingFile.; Definition at line 2466 of file TFile.cxx. ◆ Write() [2/2]. Int_t TFile::Write ; (; const char * ; name = nullptr, . Int_t ; opt = 0, . Int_t ; bufsiz = 0 . ). overridevirtual . Write memory objects to this file. ; Loop on all objects in memory (including subdirectories). A new key is created in the KEYS linked list for each object. The list of keys is then saved on the file (via WriteKeys) as a single data record. For values of opt see TObject::Write(). The directory header info is rewritten on the directory header record. The linked list of FREE segments is written. The file header is written (bytes 1->fBEGIN). ; Reimplemented from TDirectoryFile.; Reimplemented in TSQLFile, TXMLFile, and TParallelMergingFile.; Definition at line 2436 of file TFile.cxx. ◆ WriteBuffer(). Bool_t TFile::WriteBuffer ; (; const char * ; buf, . Int_t ; len . ). virtual . Write a buffer to the file. ; This is the basic low level write operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, TNetFile, TDavixFile, and TNetXNGFile.; Definition at line 2476 of file TFile.cxx. ◆ WriteBufferViaCache(). Int_t TFile::WriteBufferViaCache ; (; const char * ; buf, . Int_t ; len . ). protected . Write buffer via cache. ; Returns 0 if cache is not active, 1 in case write via cache was successful, 2 in case write via cache failed. ; Definition at line 2519 of file TFile.cxx. ◆ WriteFree(). void TFile::WriteFree ; (; ). virtual . Write FREE linked list on the file. ; The linked list of FREE segments (fFree) is written as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2543 of file TFile.cxx. ◆ WriteHeader(). void TFile::WriteHeader ; (; ). virtual . Write File Header. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2615 of file TFile.cxx. ◆ WriteProcessID(). UShort_t TFile::WriteProcessID ; (; TProcessID * ; pid). virtual . Check if the ProcessID pidd is already in t",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:75669,Deployability,update,update,75669,"ementation. and one header per class that is not nested inside another class. The header file name is the fully qualified name of the class after all the special characters ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class are replaced by a vector of pair. set and multiset when the tempalte parameter is a class are replaced by a vector. This is required since we do not have the code needed to order and/or compare the object of the classes. This is a quick explanation of the options available: . Option Details . new (default) A new directory dirname is created. If dirname already exist, an error message is printed and the function returns. . recreate If dirname does not exist, it is created (like in ""new""). If dirname already exist, all existing files in dirname are deleted before creating the new files. . update New classes are added to the existing directory. Existing classes with the same name are replaced by the new definition. If the directory dirname doest not exist, same effect as ""new"". . genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; a shared lib dirname.so will be created. If the option ""++"" is specified, the generated shared lib is dynamically linked with the current executable module. If the option ""+"" and ""nocompile"" are specified, t",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:88386,Deployability,update,updated,88386,"t_t ; len . ). protected . Read buffer via cache. ; Returns 0 if the requested block is not in the cache, 1 in case read via cache was successful, 2 in case read via cache failed. ; Definition at line 1889 of file TFile.cxx. ◆ ReadFree(). void TFile::ReadFree ; (; ). virtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is u",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:88944,Deployability,update,update,88944,". The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the sys",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:25911,Integrability,message,message,25911," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer)",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:26452,Integrability,message,message,26452,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ; ",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:27200,Integrability,message,message,27200,"ct with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be o",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:29945,Integrability,message,message,29945," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:30318,Integrability,message,message,30318," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;  ; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const char * GetCacheFileDir ();  Get the directory where to loca",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:32303,Integrability,protocol,protocol,32303,"const char * GetCacheFileDir ();  Get the directory where to locally stage/cache remote files. ;  ; static const TUrl * GetEndpointUrl (const char *name);  Get final URL for file being opened asynchronously. ;  ; static Long64_t GetFileBytesRead ();  Static function returning the total number of bytes read from all files. ;  ; static Long64_t GetFileBytesWritten ();  Static function returning the total number of bytes written to all files. ;  ; static Long64_t GetFileCounter ();  ; static Int_t GetFileReadCalls ();  Static function returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void ",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:71121,Integrability,protocol,protocol,71121,"ile.root"");; auto list = f.GetStreamerInfoList();; auto info = dynamic_cast<TStreamerInfo*>(list->FindObject(""MyClass""));; if (info) auto classversionid = info->GetClassVersion();; delete list;; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStreamerInfo::GetClassVersionInt_t GetClassVersion() const overrideDefinition TStreamerInfo.h:161. Definition at line 1445 of file TFile.cxx. ◆ GetStreamerInfoListImpl(). TFile::InfoListRet TFile::GetStreamerInfoListImpl ; (; bool ; lookupSICache). protectedvirtual . See documentation of GetStreamerInfoList for more details. ; This is an internal method which returns the list of streamer infos and also information about the success of the operation. ; Reimplemented in TXMLFile, and TSQLFile.; Definition at line 1376 of file TFile.cxx. ◆ GetType(). TFile::EFileType TFile::GetType ; (; const char * ; name, . Option_t * ; option = """", . TString * ; prefix = nullptr . ). static . Resolve the file type as a function of the protocol field in 'name'. ; If defined, the string 'prefix' is added when testing the locality of a 'name' with network-like structure (i.e. root://host//path); if the file is local, on return 'prefix' will contain the actual local path of the file. ; Definition at line 4821 of file TFile.cxx. ◆ GetVersion(). Int_t TFile::GetVersion ; (; ); const. inline . Definition at line 245 of file TFile.h. ◆ IncrementFileCounter(). void TFile::IncrementFileCounter ; (; ). static . Definition at line 4620 of file TFile.cxx. ◆ IncrementProcessIDs(). virtual void TFile::IncrementProcessIDs ; (; ). inlinevirtual . Definition at line 257 of file TFile.h. ◆ Init(). void TFile::Init ; (; Bool_t ; create). protectedvirtual . Initialize a TFile object. ; Parameters. [in]createCreate a new file. TFile implementations providing asynchronous open functionality need to override this method to run the appropriate checks before calling this standard initialization part. See TNetXNGFile::Init for an exa",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:75454,Integrability,message,message,75454,"ich a TClass object does not exist.; The code generated includes:; dirnameProjectHeaders.h, which contains one #include statement per generated header file; dirnameProjectSource.cxx,which contains all the constructors and destructors implementation. and one header per class that is not nested inside another class. The header file name is the fully qualified name of the class after all the special characters ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class are replaced by a vector of pair. set and multiset when the tempalte parameter is a class are replaced by a vector. This is required since we do not have the code needed to order and/or compare the object of the classes. This is a quick explanation of the options available: . Option Details . new (default) A new directory dirname is created. If dirname already exist, an error message is printed and the function returns. . recreate If dirname does not exist, it is created (like in ""new""). If dirname already exist, all existing files in dirname are deleted before creating the new files. . update New classes are added to the existing directory. Existing classes with the same name are replaced by the new definition. If the directory dirname doest not exist, same effect as ""new"". . genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the cur",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:81560,Integrability,depend,dependent,81560,"y title: ntuple 220200820/155032 At:88646 N=29209 TBasket CX = 1.10 name: pz title: ntuple 220200820/155032 At:117855 N=10197 TBasket CX = 3.14 name: i title: ntuple ... 20200820/155032 At:405110 N=808 TNtuple CX = 3.53 name: ntuple title: Demo ntuple 20200820/155706 At:405918 N=307 KeysList name: hsimple.root title: Demo ROOT file with histograms 20200820/155032 At:406225 N=8556 StreamerInfo CX = 3.42 name: StreamerInfo title: Doubly linked list 20200820/155708 At:414781 N=86 FreeSegments name: hsimple.root title: Demo ROOT file with histograms 20200820/155708 At:414867 N=1 END; Note: The combined size of the classname, name and title is truncated to 476 characters (a little more for regular keys of small files) ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1567 of file TFile.cxx. ◆ Matches(). Bool_t TFile::Matches ; (; const char * ; url). virtual . Return kTRUE if 'url' matches the coordinates of this file. ; The check is implementation dependent and may need to be overload by each TFile implementation relying on this check. The default implementation checks the file name only. ; Reimplemented in TNetFile.; Definition at line 4766 of file TFile.cxx. ◆ MustFlush(). virtual Bool_t TFile::MustFlush ; (; ); const. inlinevirtual . Definition at line 269 of file TFile.h. ◆ Open() [1/2]. TFile * TFile::Open ; (; const char * ; url, . Option_t * ; options = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). static . Create / open a file. ; The type of the file can be either a TFile, TNetFile, TWebFile or any TFile derived class for which an plugin library handler has been registered with the plugin manager (for the plugin manager see the TPluginManager class). The returned type of TFile depends on the file name specified by 'url'. If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried sequentially in the specified order until a successful open. If the fi",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:82406,Integrability,depend,depends,82406,"ol_t TFile::Matches ; (; const char * ; url). virtual . Return kTRUE if 'url' matches the coordinates of this file. ; The check is implementation dependent and may need to be overload by each TFile implementation relying on this check. The default implementation checks the file name only. ; Reimplemented in TNetFile.; Definition at line 4766 of file TFile.cxx. ◆ MustFlush(). virtual Bool_t TFile::MustFlush ; (; ); const. inlinevirtual . Definition at line 269 of file TFile.h. ◆ Open() [1/2]. TFile * TFile::Open ; (; const char * ; url, . Option_t * ; options = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). static . Create / open a file. ; The type of the file can be either a TFile, TNetFile, TWebFile or any TFile derived class for which an plugin library handler has been registered with the plugin manager (for the plugin manager see the TPluginManager class). The returned type of TFile depends on the file name specified by 'url'. If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried sequentially in the specified order until a successful open. If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile, etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:86311,Integrability,rout,routine,86311,"nted from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1770 of file TFile.cxx. ◆ ReadBuffer() [2/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TDCacheFile, TNetFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 1821 of file TFile.cxx. ◆ ReadBufferViaCache(). Int_t TFile::ReadBufferViaCach",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:89078,Integrability,message,message,89078,"ered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:98788,Integrability,interface,interface,98788,"lemented in TSQLFile, TXMLFile, TDCacheFile, TMemFile, and TNetFile.; Definition at line 4481 of file TFile.cxx. ◆ SysRead(). Int_t TFile::SysRead ; (; Int_t ; fd, . void * ; buf, . Int_t ; len . ). protectedvirtual . Interface to system read. All arguments like in POSIX read(). ; Reimplemented in TDCacheFile, TMemFile, TSQLFile, and TXMLFile.; Definition at line 4506 of file TFile.cxx. ◆ SysSeek(). Long64_t TFile::SysSeek ; (; Int_t ; fd, . Long64_t ; offset, . Int_t ; whence . ). protectedvirtual . Interface to system lseek. ; All arguments like in POSIX lseek() except that the offset and return value are of a type which are able to handle 64 bit file systems. ; Reimplemented in TDCacheFile, TMemFile, TSQLFile, and TXMLFile.; Definition at line 4525 of file TFile.cxx. ◆ SysStat(). Int_t TFile::SysStat ; (; Int_t ; fd, . Long_t * ; id, . Long64_t * ; size, . Long_t * ; flags, . Long_t * ; modtime . ). protectedvirtual . Return file stat information. ; The interface and return value is identical to TSystem::GetPathInfo(). The function returns 0 in case of success and 1 if the file could not be stat'ed. ; Reimplemented in TDCacheFile, TMemFile, TNetFile, TSQLFile, and TXMLFile.; Definition at line 4543 of file TFile.cxx. ◆ SysSync(). Int_t TFile::SysSync ; (; Int_t ; fd). protectedvirtual . Interface to system fsync. All arguments like in POSIX fsync(). ; Reimplemented in TDCacheFile, TMemFile, TSQLFile, and TXMLFile.; Definition at line 4552 of file TFile.cxx. ◆ SysWrite(). Int_t TFile::SysWrite ; (; Int_t ; fd, . const void * ; buf, . Int_t ; len . ). protectedvirtual . Interface to system write. All arguments like in POSIX write(). ; Reimplemented in TDCacheFile, TMemFile, TSQLFile, and TXMLFile.; Definition at line 4514 of file TFile.cxx. ◆ Write() [1/2]. Int_t TFile::Write ; (; const char * ; name = nullptr, . Int_t ; opt = 0, . Int_t ; bufsiz = 0 . ); const. overridevirtual . One can not save a const TDirectory object. ; Reimplemented from TDirectoryFile.; Reimp",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:3538,Modifiability,inherit,inherited,3538,"essed object . 11->14 Datime Date and time when object was written to file . 15->16 KeyLen Length of the key structure (in bytes) . 17->18 Cycle Cycle of key . 19->22 [19->26] SeekKey Pointer to record itself (consistency check) . 23->26 [27->34] SeekPdir Pointer to directory header . 27->27 [35->35] lname Number of bytes in the class name . 28->.. [36->..] ClassName Object Class Name . ..->.. lname Number of bytes in the object name . ..->.. Name lName bytes with the name of the object . ..->.. lTitle Number of bytes in the object title . ..->.. Title Title of the object . --—> DATA Data bytes associated to the object . The structure of a directory is shown in TDirectoryFile::TDirectoryFile. PyROOT; In the same way as for TDirectory, it is possible to get the content of a TFile object with the familiar item-getting syntax. For more information, please refer to the TDirectory documentation.; In addition, TFile instances can be inspected via the Get method, a feature that is inherited from TDirectoryFile (please see the documentation of TDirectoryFile for examples on how to use it).; In order to write objects into a TFile, the WriteObject Python method can be used (more information in the documentation of TDirectoryFile).; PyROOT modifies the TFile constructor and the TFile::Open method to make them behave in a more pythonic way. In particular, they both throw an OSError if there was a problem accessing the file (e.g. non-existent or corrupted file).; This class can also be used as a context manager, with the goal of opening a file and doing some quick manipulations of the objects inside it. The TFile::Close method will be automatically called at the end of the context. For example: from ROOT import TFile; with TFile(""file1.root"", ""recreate"") as outfile:; hout = ROOT.TH1F(...); outfile.WriteObject(hout, ""myhisto""); TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; Since the file is close",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:6587,Modifiability,inherit,inherited,6587,"AOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; void Copy (TObject &) const override",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:6693,Modifiability,inherit,inherited,6693,"AOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; void Copy (TObject &) const override",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:15000,Modifiability,inherit,inherited,15000,"amerNVirtual_b);  ; void SumBuffer (Int_t bufsize);  Increment statistics for buffer sizes of objects in this file. ;  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) const override;  One can not save a const TDirectory object. ;  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) override;  Write memory objects to this file. ;  ; virtual Bool_t WriteBuffer (const char *buf, Int_t len);  Write a buffer to the file. ;  ; virtual void WriteFree ();  Write FREE linked list on the file. ;  ; virtual void WriteHeader ();  Write File Header. ;  ; virtual UShort_t WriteProcessID (TProcessID *pid);  Check if the ProcessID pidd is already in the file, if not, add it and return the index number in the local file list. ;  ; virtual void WriteStreamerInfo ();  Write the list of TStreamerInfo as a single object in this file The class Streamer description for all classes written to this file is saved. ;  ;  Public Member Functions inherited from TDirectoryFile;  TDirectoryFile ();  Default TDirectoryFile constructor. ;  ;  TDirectoryFile (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new TDirectoryFile. ;  ;  ~TDirectoryFile () override;  Destructor. ;  ; void Add (TObject *obj, Bool_t replace=kFALSE) override;  ; void Append (TObject *obj, Bool_t replace=kFALSE) override;  Append object to this directory. ;  ; Int_t AppendKey (TKey *key) override;  Insert key in the linked list of keys of this directory. ;  ; void Browse (TBrowser *b) override;  Browse the content of the directory. ;  ; void Build (TFile *motherFile=nullptr, TDirectory *motherDir=nullptr) override;  ; Bool_t cd () override;  Change current directory to ""this"" directory. ;  ; Bool_t cd (const char *path) override;  Change current directory the directory described by the path if given one. ;  ; TObject * CloneObject (const TObject *obj, Bool_t autoadd=kTRUE) override;  Make a clone of an object using the Streamer facilit",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:20769,Modifiability,inherit,inherited,20769,"d in the dictionary of the parent class and store the corresponding exec number into fBits. ;  ; void SetWritable (Bool_t writable=kTRUE) override;  Set the new value of fWritable recursively. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteDirHeader () override;  Overwrite the Directory header record. ;  ; void WriteKeys () override;  Write Keys linked list on the file. ;  ; Int_t WriteObjectAny (const void *obj, const char *classname, const char *name, Option_t *option="""", Int_t bufsize=0) override;  Write object from pointer of class classname in this directory. ;  ; Int_t WriteObjectAny (const void *obj, const TClass *cl, const char *name, Option_t *option="""", Int_t bufsize=0) override;  Write object of class with dictionary cl in this directory. ;  ; Int_t WriteTObject (const TObject *obj, const char *name=nullptr, Option_t *option="""", Int_t bufsize=0) override;  Write object obj to this directory. ;  ;  Public Member Functions inherited from TDirectory;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; void Clear (Option_t *option="""") override;  Delete all objects from a Directory list. ;  ; virtual void DeleteAll (Option_t *option="""");  Delete all objects from memory. ;  ; TObject * FindObject (const char *name) const override;  Find object by name in the list of memory objects. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object in the list of memory objects. ;  ; template<class T > ; T * Get (const char *namecycle);  See documentation of TDirectoryFile::Get(const char *namecycle) ;  ; virtual TList * GetList () const;  ; TObject * GetMother () const;  ; TDirectory * GetMotherDir () const;  ; template<class T > ; void GetObject (const char *namecycle, T *&ptr);  Get an object with proper type checking. ;  ; virtual const char * G",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:23203,Modifiability,inherit,inherited,23203,"ecursively remove object from a Directory. ;  ; virtual TObject * Remove (TObject *);  Remove an object from the in-memory list. ;  ; virtual void SetMother (TObject *mother);  ; void SetName (const char *newname) override;  Set the name for directory If the directory name is changed after the directory was written once, ROOT currently would NOT change the name of correspondent key in the mother directory. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; template<typename T > ; std::enable_if_t<!std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ; template<typename T > ; std::enable_if_t< std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:24703,Modifiability,inherit,inherited,24703," *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:25541,Modifiability,inherit,inheritance,25541,"amer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics sys",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:27298,Modifiability,inherit,inherits,27298,"Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op).",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:27415,Modifiability,inherit,inherits,27415,"nst char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method ",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:33575,Modifiability,inherit,inherited,33575,"l_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:33793,Modifiability,inherit,inherited,33793,"l_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:34626,Modifiability,inherit,inherited,34626,"AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize ",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:34836,Modifiability,inherit,inherited,34836,"AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize ",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:37167,Modifiability,inherit,inherited,37167,"virtual Int_t SysClose (Int_t fd);  Interface to system close. All arguments like in POSIX close(). ;  ; virtual Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode);  Interface to system open. All arguments like in POSIX open(). ;  ; virtual Int_t SysRead (Int_t fd, void *buf, Int_t len);  Interface to system read. All arguments like in POSIX read(). ;  ; virtual Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence);  Interface to system lseek. ;  ; virtual Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime);  Return file stat information. ;  ; virtual Int_t SysSync (Int_t fd);  Interface to system fsync. All arguments like in POSIX fsync(). ;  ; virtual Int_t SysWrite (Int_t fd, const void *buf, Int_t len);  Interface to system write. All arguments like in POSIX write(). ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr); ",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:37557,Modifiability,inherit,inherited,37557," offset, Int_t whence);  Interface to system lseek. ;  ; virtual Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime);  Return file stat information. ;  ; virtual Int_t SysSync (Int_t fd);  Interface to system fsync. All arguments like in POSIX fsync(). ;  ; virtual Int_t SysWrite (Int_t fd, const void *buf, Int_t len);  Interface to system write. All arguments like in POSIX write(). ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . ",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:38446,Modifiability,inherit,inherited,38446,"ted data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any)",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:41667,Modifiability,inherit,inherited,41667,;  !Seek offset cache ;  ; TList * fOpenPhases {nullptr};  !Time info about open phases ;  ; TString fOption;  File options. ;  ; TObjArray * fProcessIDs {nullptr};  !Array of pointers to TProcessIDs ;  ; Int_t fReadCalls {0};  Number of read calls ( not counting the cache calls ) ;  ; TString fRealName;  Effective real file name (not original url) ;  ; Long64_t fSeekFree {0};  Location on disk of free segments structure. ;  ; Long64_t fSeekInfo {0};  Location on disk of StreamerInfo record. ;  ; Double_t fSum2Buffer {0};  Sum of squares of buffer sizes of objects written so far. ;  ; Double_t fSumBuffer {0};  Sum of buffer sizes of objects written so far. ;  ; Char_t fUnits {0};  Number of bytes for file pointers. ;  ; TUrl fUrl;  !URL of file ;  ; Int_t fVersion {0};  File format version. ;  ; std::mutex fWriteMutex;  !Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to create new TKeys. ;  ; TDatime fDatimeC;  Date and time when directory is created. ;  ; TDatime fDatimeM;  Date and time of last modification. ;  ; TFile * fFile {nullptr};  Pointer to current file in memory. ;  ; TList * fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vect,MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:42503,Modifiability,inherit,inherited,42503,"Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to create new TKeys. ;  ; TDatime fDatimeC;  Date and time when directory is created. ;  ; TDatime fDatimeM;  Date and time of last modification. ;  ; TFile * fFile {nullptr};  Pointer to current file in memory. ;  ; TList * fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileF",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
https://root.cern/doc/master/classTFile.html:42959,Modifiability,inherit,inherited,42959," fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadahe",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
