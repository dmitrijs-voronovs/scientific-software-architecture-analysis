id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/pull/1760#issuecomment-567295634:32,Testability,test,test,32,"oh dear, the scf_cholesky_basis test is failing again on Windows. That it's intermittent suggests that there's a reference/number-of-decimals-checked/runtime-convergence that's borderline out of whack. Maybe try collecting the ref vals from a very tight run and/or loosening the decimals checked.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-567295634
https://github.com/psi4/psi4/pull/1760#issuecomment-568071614:278,Deployability,install,install,278,"This has a record number of approvals, so just need to get over the Windows block. May be time to add it as a Spot test again to see output (`-o stdout` like below is my latest refinement to Windows debugging). ```; # Spot Test; - script: |; set PATH=$(Build.BinariesDirectory)\install\bin;%PATH%; psi4 -o stdout $(Build.SourcesDirectory)\tests\pywrap-cbs1\input.dat; displayName: 'MP5 Spot Test'; workingDirectory: $(Build.BinariesDirectory)/build; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-568071614
https://github.com/psi4/psi4/pull/1760#issuecomment-568071614:115,Testability,test,test,115,"This has a record number of approvals, so just need to get over the Windows block. May be time to add it as a Spot test again to see output (`-o stdout` like below is my latest refinement to Windows debugging). ```; # Spot Test; - script: |; set PATH=$(Build.BinariesDirectory)\install\bin;%PATH%; psi4 -o stdout $(Build.SourcesDirectory)\tests\pywrap-cbs1\input.dat; displayName: 'MP5 Spot Test'; workingDirectory: $(Build.BinariesDirectory)/build; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-568071614
https://github.com/psi4/psi4/pull/1760#issuecomment-568071614:223,Testability,Test,Test,223,"This has a record number of approvals, so just need to get over the Windows block. May be time to add it as a Spot test again to see output (`-o stdout` like below is my latest refinement to Windows debugging). ```; # Spot Test; - script: |; set PATH=$(Build.BinariesDirectory)\install\bin;%PATH%; psi4 -o stdout $(Build.SourcesDirectory)\tests\pywrap-cbs1\input.dat; displayName: 'MP5 Spot Test'; workingDirectory: $(Build.BinariesDirectory)/build; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-568071614
https://github.com/psi4/psi4/pull/1760#issuecomment-568071614:339,Testability,test,tests,339,"This has a record number of approvals, so just need to get over the Windows block. May be time to add it as a Spot test again to see output (`-o stdout` like below is my latest refinement to Windows debugging). ```; # Spot Test; - script: |; set PATH=$(Build.BinariesDirectory)\install\bin;%PATH%; psi4 -o stdout $(Build.SourcesDirectory)\tests\pywrap-cbs1\input.dat; displayName: 'MP5 Spot Test'; workingDirectory: $(Build.BinariesDirectory)/build; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-568071614
https://github.com/psi4/psi4/pull/1760#issuecomment-568071614:391,Testability,Test,Test,391,"This has a record number of approvals, so just need to get over the Windows block. May be time to add it as a Spot test again to see output (`-o stdout` like below is my latest refinement to Windows debugging). ```; # Spot Test; - script: |; set PATH=$(Build.BinariesDirectory)\install\bin;%PATH%; psi4 -o stdout $(Build.SourcesDirectory)\tests\pywrap-cbs1\input.dat; displayName: 'MP5 Spot Test'; workingDirectory: $(Build.BinariesDirectory)/build; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-568071614
https://github.com/psi4/psi4/pull/1760#issuecomment-571203823:150,Availability,toler,tolerance,150,Mild reminder to throw in an [extra Windows test](https://github.com/psi4/psi4/pull/1760#issuecomment-568071614) to debug what I hope is a borderline tolerance instability.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571203823
https://github.com/psi4/psi4/pull/1760#issuecomment-571203823:44,Testability,test,test,44,Mild reminder to throw in an [extra Windows test](https://github.com/psi4/psi4/pull/1760#issuecomment-568071614) to debug what I hope is a borderline tolerance instability.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571203823
https://github.com/psi4/psi4/pull/1760#issuecomment-571243720:229,Availability,toler,tolerances,229,Some [large ints](https://dev.azure.com/psi4/psi4/_build/results?buildId=1567&view=logs&j=f31c9f97-4411-58e7-49ac-fc73f645e6b6&t=168f406a-25eb-5f8a-7d4d-4c979d542d09&l=728) in the Cholesky decomp matrix that apparently the lower tolerances can manage but the 1e-6 can't,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571243720
https://github.com/psi4/psi4/pull/1760#issuecomment-571243720:83,Testability,log,logs,83,Some [large ints](https://dev.azure.com/psi4/psi4/_build/results?buildId=1567&view=logs&j=f31c9f97-4411-58e7-49ac-fc73f645e6b6&t=168f406a-25eb-5f8a-7d4d-4c979d542d09&l=728) in the Cholesky decomp matrix that apparently the lower tolerances can manage but the 1e-6 can't,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571243720
https://github.com/psi4/psi4/pull/1760#issuecomment-571256793:410,Energy Efficiency,energy,energy,410,"On my computer, there's no problem with huge integers (edit: yes there is). Also, that bug is unrelated to the algorithm: I don't use the Cholesky decomposed overlap, the only thing that matter are the pivot indices. So, looks like the problem is that in the 5th symmetry block, the Windows build picks up the 3rd SO basis function, while my build picks up the 12th basis function, thus leading to a different energy. The other blocks are the same.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571256793
https://github.com/psi4/psi4/pull/1760#issuecomment-571269056:63,Availability,error,errors,63,@andysim great. Since the weird thing is that I can't find any errors in the build log that @loriab linked:; ```; 2020-01-06T17:54:37.8471030Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:54:37.8471436Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:55:04.0834277Z Energy with Cholesky 1e-5.........................................PASSED; 2020-01-06T17:55:04.0834591Z Energy with Cholesky 1e-5.........................................PASSED; ```; The crash comes suddenly; ```; 2020-01-06T17:55:21.8639362Z ; 2020-01-06T17:55:21.8712539Z Using partial Cholesky orthogonalization (doi:10.1063/1.5139948).; 2020-01-06T17:55:30.8500954Z ##[error]Cmd.exe exited with code '-1073741819'.; 2020-01-06T17:55:30.9285461Z ##[section]Finishing: CHolesky basis Spot Test; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571269056
https://github.com/psi4/psi4/pull/1760#issuecomment-571269056:721,Availability,error,error,721,@andysim great. Since the weird thing is that I can't find any errors in the build log that @loriab linked:; ```; 2020-01-06T17:54:37.8471030Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:54:37.8471436Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:55:04.0834277Z Energy with Cholesky 1e-5.........................................PASSED; 2020-01-06T17:55:04.0834591Z Energy with Cholesky 1e-5.........................................PASSED; ```; The crash comes suddenly; ```; 2020-01-06T17:55:21.8639362Z ; 2020-01-06T17:55:21.8712539Z Using partial Cholesky orthogonalization (doi:10.1063/1.5139948).; 2020-01-06T17:55:30.8500954Z ##[error]Cmd.exe exited with code '-1073741819'.; 2020-01-06T17:55:30.9285461Z ##[section]Finishing: CHolesky basis Spot Test; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571269056
https://github.com/psi4/psi4/pull/1760#issuecomment-571269056:143,Energy Efficiency,Energy,Energy,143,@andysim great. Since the weird thing is that I can't find any errors in the build log that @loriab linked:; ```; 2020-01-06T17:54:37.8471030Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:54:37.8471436Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:55:04.0834277Z Energy with Cholesky 1e-5.........................................PASSED; 2020-01-06T17:55:04.0834591Z Energy with Cholesky 1e-5.........................................PASSED; ```; The crash comes suddenly; ```; 2020-01-06T17:55:21.8639362Z ; 2020-01-06T17:55:21.8712539Z Using partial Cholesky orthogonalization (doi:10.1063/1.5139948).; 2020-01-06T17:55:30.8500954Z ##[error]Cmd.exe exited with code '-1073741819'.; 2020-01-06T17:55:30.9285461Z ##[section]Finishing: CHolesky basis Spot Test; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571269056
https://github.com/psi4/psi4/pull/1760#issuecomment-571269056:246,Energy Efficiency,Energy,Energy,246,@andysim great. Since the weird thing is that I can't find any errors in the build log that @loriab linked:; ```; 2020-01-06T17:54:37.8471030Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:54:37.8471436Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:55:04.0834277Z Energy with Cholesky 1e-5.........................................PASSED; 2020-01-06T17:55:04.0834591Z Energy with Cholesky 1e-5.........................................PASSED; ```; The crash comes suddenly; ```; 2020-01-06T17:55:21.8639362Z ; 2020-01-06T17:55:21.8712539Z Using partial Cholesky orthogonalization (doi:10.1063/1.5139948).; 2020-01-06T17:55:30.8500954Z ##[error]Cmd.exe exited with code '-1073741819'.; 2020-01-06T17:55:30.9285461Z ##[section]Finishing: CHolesky basis Spot Test; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571269056
https://github.com/psi4/psi4/pull/1760#issuecomment-571269056:349,Energy Efficiency,Energy,Energy,349,@andysim great. Since the weird thing is that I can't find any errors in the build log that @loriab linked:; ```; 2020-01-06T17:54:37.8471030Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:54:37.8471436Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:55:04.0834277Z Energy with Cholesky 1e-5.........................................PASSED; 2020-01-06T17:55:04.0834591Z Energy with Cholesky 1e-5.........................................PASSED; ```; The crash comes suddenly; ```; 2020-01-06T17:55:21.8639362Z ; 2020-01-06T17:55:21.8712539Z Using partial Cholesky orthogonalization (doi:10.1063/1.5139948).; 2020-01-06T17:55:30.8500954Z ##[error]Cmd.exe exited with code '-1073741819'.; 2020-01-06T17:55:30.9285461Z ##[section]Finishing: CHolesky basis Spot Test; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571269056
https://github.com/psi4/psi4/pull/1760#issuecomment-571269056:452,Energy Efficiency,Energy,Energy,452,@andysim great. Since the weird thing is that I can't find any errors in the build log that @loriab linked:; ```; 2020-01-06T17:54:37.8471030Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:54:37.8471436Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:55:04.0834277Z Energy with Cholesky 1e-5.........................................PASSED; 2020-01-06T17:55:04.0834591Z Energy with Cholesky 1e-5.........................................PASSED; ```; The crash comes suddenly; ```; 2020-01-06T17:55:21.8639362Z ; 2020-01-06T17:55:21.8712539Z Using partial Cholesky orthogonalization (doi:10.1063/1.5139948).; 2020-01-06T17:55:30.8500954Z ##[error]Cmd.exe exited with code '-1073741819'.; 2020-01-06T17:55:30.9285461Z ##[section]Finishing: CHolesky basis Spot Test; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571269056
https://github.com/psi4/psi4/pull/1760#issuecomment-571269056:83,Testability,log,log,83,@andysim great. Since the weird thing is that I can't find any errors in the build log that @loriab linked:; ```; 2020-01-06T17:54:37.8471030Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:54:37.8471436Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:55:04.0834277Z Energy with Cholesky 1e-5.........................................PASSED; 2020-01-06T17:55:04.0834591Z Energy with Cholesky 1e-5.........................................PASSED; ```; The crash comes suddenly; ```; 2020-01-06T17:55:21.8639362Z ; 2020-01-06T17:55:21.8712539Z Using partial Cholesky orthogonalization (doi:10.1063/1.5139948).; 2020-01-06T17:55:30.8500954Z ##[error]Cmd.exe exited with code '-1073741819'.; 2020-01-06T17:55:30.9285461Z ##[section]Finishing: CHolesky basis Spot Test; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571269056
https://github.com/psi4/psi4/pull/1760#issuecomment-571269056:839,Testability,Test,Test,839,@andysim great. Since the weird thing is that I can't find any errors in the build log that @loriab linked:; ```; 2020-01-06T17:54:37.8471030Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:54:37.8471436Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:55:04.0834277Z Energy with Cholesky 1e-5.........................................PASSED; 2020-01-06T17:55:04.0834591Z Energy with Cholesky 1e-5.........................................PASSED; ```; The crash comes suddenly; ```; 2020-01-06T17:55:21.8639362Z ; 2020-01-06T17:55:21.8712539Z Using partial Cholesky orthogonalization (doi:10.1063/1.5139948).; 2020-01-06T17:55:30.8500954Z ##[error]Cmd.exe exited with code '-1073741819'.; 2020-01-06T17:55:30.9285461Z ##[section]Finishing: CHolesky basis Spot Test; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571269056
https://github.com/psi4/psi4/pull/1760#issuecomment-572135738:21,Testability,test,test,21,So... now the VS2015 test crashes even before it anything is printed out....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-572135738
https://github.com/psi4/psi4/pull/1760#issuecomment-573356712:41,Testability,test,test,41,@andysim please have a look. The Windows test crashes even when the checks are turned off!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-573356712
https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:2769,Availability,error,errors,2769,"mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = core.IntegralFactory(basis); >; > # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses.; >; > # We have a problem!; > petite = core.PetiteList(basis, factory, True); > so2ao = petite.sotoao().nph[0]; > print(so2ao); > print(so2ao.shape) # (24, 25); > ao2so = petite.aotoso().nph[0]; > print(np.dot(so2ao, ao2so)); >; > # Works fine!; > petite = core.PetiteList(basis, factory, False); > so2ao = petite.sotoao().nph[0]; > print(so2ao); > print(so2ao.shape) # (24, 24); > ao2so = petite.aotoso().nph[0]; > print(np.dot(so2ao, ao2so)); >; > The next question is what we do about this. I see two solutions:; >; > 1. Put a flag in sotoao that throws if include_pure_transform_ is; > true. I've run this change through full tests and didn't get any errors.; > However, somebody can assume sotoao() is the transpose of aotoso() and; > get rubbish.; > 2. Remove the functionality of the include_pure_transform flag; > entirely. The transformations are always invertible, but we lose whatever; > efficiency gain motivated including the flag in the first place.; >; > I don't know which is the best solution, or if there's a third.; >; > Pinging @andysim <https://github.com/andysim>, @susilehtola; > <https://github.com/susilehtola>, @jturney <https://github.com/jturney>,; > and @fevangelista <https://github.com/fevangelista>, all of whom have; > either touched this code or expressed interest in this issue previously.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1763?email_source=notifications&email_token=AAXVA5WSYVY7DDERYLO3GDLQWURWFA5CNFSM4JTXOXB2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475
https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:3154,Availability,Ping,Pinging,3154,"-0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = core.IntegralFactory(basis); >; > # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses.; >; > # We have a problem!; > petite = core.PetiteList(basis, factory, True); > so2ao = petite.sotoao().nph[0]; > print(so2ao); > print(so2ao.shape) # (24, 25); > ao2so = petite.aotoso().nph[0]; > print(np.dot(so2ao, ao2so)); >; > # Works fine!; > petite = core.PetiteList(basis, factory, False); > so2ao = petite.sotoao().nph[0]; > print(so2ao); > print(so2ao.shape) # (24, 24); > ao2so = petite.aotoso().nph[0]; > print(np.dot(so2ao, ao2so)); >; > The next question is what we do about this. I see two solutions:; >; > 1. Put a flag in sotoao that throws if include_pure_transform_ is; > true. I've run this change through full tests and didn't get any errors.; > However, somebody can assume sotoao() is the transpose of aotoso() and; > get rubbish.; > 2. Remove the functionality of the include_pure_transform flag; > entirely. The transformations are always invertible, but we lose whatever; > efficiency gain motivated including the flag in the first place.; >; > I don't know which is the best solution, or if there's a third.; >; > Pinging @andysim <https://github.com/andysim>, @susilehtola; > <https://github.com/susilehtola>, @jturney <https://github.com/jturney>,; > and @fevangelista <https://github.com/fevangelista>, all of whom have; > either touched this code or expressed interest in this issue previously.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1763?email_source=notifications&email_token=AAXVA5WSYVY7DDERYLO3GDLQWURWFA5CNFSM4JTXOXB2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4H5JN6UA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5VPMHM3HOZ7O5JLBRDQWURWFANCNFSM4JTXOXBQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475
https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:160,Deployability,update,updated,160,"I don't have an opinion about the include_pure_transform_ flag, depends on; use cases. However, it seems at the very least that the documentation needs to get; updated. On Mon, Dec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = cor",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475
https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:1216,Energy Efficiency,adapt,adapted,1216,"ec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = core.IntegralFactory(basis); >; > # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses.; >; > # We have a problem!; > petite = core.PetiteList(basis, fa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475
https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:64,Integrability,depend,depends,64,"I don't have an opinion about the include_pure_transform_ flag, depends on; use cases. However, it seems at the very least that the documentation needs to get; updated. On Mon, Dec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = cor",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475
https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:1048,Integrability,depend,depending,1048,"pends on; use cases. However, it seems at the very least that the documentation needs to get; updated. On Mon, Dec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = core.IntegralFactory(basis); >; > # np.dot(so2ao, ao2so) should alwa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475
https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:1216,Modifiability,adapt,adapted,1216,"ec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = core.IntegralFactory(basis); >; > # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses.; >; > # We have a problem!; > petite = core.PetiteList(basis, fa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475
https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:2744,Testability,test,tests,2744,"mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = core.IntegralFactory(basis); >; > # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses.; >; > # We have a problem!; > petite = core.PetiteList(basis, factory, True); > so2ao = petite.sotoao().nph[0]; > print(so2ao); > print(so2ao.shape) # (24, 25); > ao2so = petite.aotoso().nph[0]; > print(np.dot(so2ao, ao2so)); >; > # Works fine!; > petite = core.PetiteList(basis, factory, False); > so2ao = petite.sotoao().nph[0]; > print(so2ao); > print(so2ao.shape) # (24, 24); > ao2so = petite.aotoso().nph[0]; > print(np.dot(so2ao, ao2so)); >; > The next question is what we do about this. I see two solutions:; >; > 1. Put a flag in sotoao that throws if include_pure_transform_ is; > true. I've run this change through full tests and didn't get any errors.; > However, somebody can assume sotoao() is the transpose of aotoso() and; > get rubbish.; > 2. Remove the functionality of the include_pure_transform flag; > entirely. The transformations are always invertible, but we lose whatever; > efficiency gain motivated including the flag in the first place.; >; > I don't know which is the best solution, or if there's a third.; >; > Pinging @andysim <https://github.com/andysim>, @susilehtola; > <https://github.com/susilehtola>, @jturney <https://github.com/jturney>,; > and @fevangelista <https://github.com/fevangelista>, all of whom have; > either touched this code or expressed interest in this issue previously.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1763?email_source=notifications&email_token=AAXVA5WSYVY7DDERYLO3GDLQWURWFA5CNFSM4JTXOXB2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475
https://github.com/psi4/psi4/issues/1763#issuecomment-560457075:185,Integrability,rout,routine,185,"Thanks for a clear exposition of the problem. This is one that will be fixed as part of the in-progress integral overhaul. At one point we had a relatively slow integral transformation routine (which has since been sped up) and I experimented with a flag to allow the AO->SO transformation to incorporate the Cartesian->pure transformation also. That's what the `force_cartesian_` member of the integral code is for. Given that the transformation is no longer a performance concern in the integral code, the `include_pure_transform_` machinery will be remove and the petite list will only handle unitary AO->SO transformations, as originally intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560457075
https://github.com/psi4/psi4/issues/1763#issuecomment-560457075:462,Performance,perform,performance,462,"Thanks for a clear exposition of the problem. This is one that will be fixed as part of the in-progress integral overhaul. At one point we had a relatively slow integral transformation routine (which has since been sped up) and I experimented with a flag to allow the AO->SO transformation to incorporate the Cartesian->pure transformation also. That's what the `force_cartesian_` member of the integral code is for. Given that the transformation is no longer a performance concern in the integral code, the `include_pure_transform_` machinery will be remove and the petite list will only handle unitary AO->SO transformations, as originally intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560457075
https://github.com/psi4/psi4/issues/1763#issuecomment-560457075:13,Usability,clear,clear,13,"Thanks for a clear exposition of the problem. This is one that will be fixed as part of the in-progress integral overhaul. At one point we had a relatively slow integral transformation routine (which has since been sped up) and I experimented with a flag to allow the AO->SO transformation to incorporate the Cartesian->pure transformation also. That's what the `force_cartesian_` member of the integral code is for. Given that the transformation is no longer a performance concern in the integral code, the `include_pure_transform_` machinery will be remove and the petite list will only handle unitary AO->SO transformations, as originally intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560457075
https://github.com/psi4/psi4/issues/1764#issuecomment-560861573:98,Modifiability,variab,variable,98,possibly related to https://github.com/psi4/psi4/issues/1679. Although it should fit in the `int` variable raised in that issue. (i think). Is there any other output? `stderr` captured by slurm?; What is the last content of `timer.dat`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-560861573
https://github.com/psi4/psi4/issues/1764#issuecomment-560949511:161,Integrability,contract,contractions,161,"Technically, the problem is in the DFOCC module, not the OCC module. Thoughts, @bozkaya? The part that grabs my attention is the line `Memory requirement for CC contractions: -49826.57 MB`. Somehow, I doubt that negative memory is accurate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-560949511
https://github.com/psi4/psi4/issues/1764#issuecomment-561253192:50,Testability,test,test,50,Thanks. Odd having no `timer.dat` at all. Hard to test these large calculations ourselves. @JonathonMisiewicz I've seen these overflowing numbers before without crashes. But could still point in the right direction. (mentioned here https://github.com/psi4/psi4/issues/898 ),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561253192
https://github.com/psi4/psi4/issues/1764#issuecomment-561262601:261,Modifiability,variab,variables,261,"Sorry, I don't have the bandwidth to build it right now, but I think [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2264) could be responsible for the bad memory estimate and, perhaps, that's causing problems later on. The variables `aocc2AA` and `nvir2AA` are declared `int`, so their product will be computed as an `int`, overflow, and then that overflowed entity is cast to `double`. A quick fix for that would be to declare the various dimensioning variables as `size_t`. Hopefully that'll fix the issue 🤞",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561262601
https://github.com/psi4/psi4/issues/1764#issuecomment-561262601:491,Modifiability,variab,variables,491,"Sorry, I don't have the bandwidth to build it right now, but I think [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2264) could be responsible for the bad memory estimate and, perhaps, that's causing problems later on. The variables `aocc2AA` and `nvir2AA` are declared `int`, so their product will be computed as an `int`, overflow, and then that overflowed entity is cast to `double`. A quick fix for that would be to declare the various dimensioning variables as `size_t`. Hopefully that'll fix the issue 🤞",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561262601
https://github.com/psi4/psi4/issues/1764#issuecomment-561544849:534,Energy Efficiency,allocate,allocated,534,"I had looked into the integer overflow issues in the DF code with MP3 as an example several months ago. The negative memory values reported are of course integral overflows and one can fix the printing of memory requirements by changing the int to a type that holds larger integers. But the actual problem happens later when, if I understand correctly, an array index becomes bigger than 2,147,483,647. . In my DF-MP3 test calculation this happened in the main loop in mp3_WabefT2. . Memory for I, Vs, Va, Ts, and Ta was successfully allocated, but then the quantity a * navirA * nQ became too large. I forced it to long or long-long, so the product could be evaluated (and printed printed out) as 2148655392 (as opposed to -2146311904 with int) but this positive value ""anavirAnQ3"" was illegal for the subsequent contraction. I->contract(false, true, navirA * nb, navirA, nQ, K, K, 0, anavirAnQ3, 1.0, 0.0);. So, it is the array index, and not the array value, that is bigger than the 32-bit integer. And our math libraries index arrays with the 32-bit integer type! . I tried to compile Psi against MKL and OpenBLAS with 64-bit index arrays (the ILP64 interface) but the resulting program was not stable. So, if my thinking is correct, I am afraid we do not have an easy fix as long as Psi4 expects math libraries with 32-bit integer indices. I can share some debug code (modified dfocc.h, df_ref.cc, tei_grad_corr.cc, df_corr.cc, ref_grad.cc, and mp3_W_intr.cc with some long int and printf statements) and sample outputs if anybody thinks this is helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561544849
https://github.com/psi4/psi4/issues/1764#issuecomment-561544849:814,Integrability,contract,contraction,814,"I had looked into the integer overflow issues in the DF code with MP3 as an example several months ago. The negative memory values reported are of course integral overflows and one can fix the printing of memory requirements by changing the int to a type that holds larger integers. But the actual problem happens later when, if I understand correctly, an array index becomes bigger than 2,147,483,647. . In my DF-MP3 test calculation this happened in the main loop in mp3_WabefT2. . Memory for I, Vs, Va, Ts, and Ta was successfully allocated, but then the quantity a * navirA * nQ became too large. I forced it to long or long-long, so the product could be evaluated (and printed printed out) as 2148655392 (as opposed to -2146311904 with int) but this positive value ""anavirAnQ3"" was illegal for the subsequent contraction. I->contract(false, true, navirA * nb, navirA, nQ, K, K, 0, anavirAnQ3, 1.0, 0.0);. So, it is the array index, and not the array value, that is bigger than the 32-bit integer. And our math libraries index arrays with the 32-bit integer type! . I tried to compile Psi against MKL and OpenBLAS with 64-bit index arrays (the ILP64 interface) but the resulting program was not stable. So, if my thinking is correct, I am afraid we do not have an easy fix as long as Psi4 expects math libraries with 32-bit integer indices. I can share some debug code (modified dfocc.h, df_ref.cc, tei_grad_corr.cc, df_corr.cc, ref_grad.cc, and mp3_W_intr.cc with some long int and printf statements) and sample outputs if anybody thinks this is helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561544849
https://github.com/psi4/psi4/issues/1764#issuecomment-561544849:830,Integrability,contract,contract,830,"I had looked into the integer overflow issues in the DF code with MP3 as an example several months ago. The negative memory values reported are of course integral overflows and one can fix the printing of memory requirements by changing the int to a type that holds larger integers. But the actual problem happens later when, if I understand correctly, an array index becomes bigger than 2,147,483,647. . In my DF-MP3 test calculation this happened in the main loop in mp3_WabefT2. . Memory for I, Vs, Va, Ts, and Ta was successfully allocated, but then the quantity a * navirA * nQ became too large. I forced it to long or long-long, so the product could be evaluated (and printed printed out) as 2148655392 (as opposed to -2146311904 with int) but this positive value ""anavirAnQ3"" was illegal for the subsequent contraction. I->contract(false, true, navirA * nb, navirA, nQ, K, K, 0, anavirAnQ3, 1.0, 0.0);. So, it is the array index, and not the array value, that is bigger than the 32-bit integer. And our math libraries index arrays with the 32-bit integer type! . I tried to compile Psi against MKL and OpenBLAS with 64-bit index arrays (the ILP64 interface) but the resulting program was not stable. So, if my thinking is correct, I am afraid we do not have an easy fix as long as Psi4 expects math libraries with 32-bit integer indices. I can share some debug code (modified dfocc.h, df_ref.cc, tei_grad_corr.cc, df_corr.cc, ref_grad.cc, and mp3_W_intr.cc with some long int and printf statements) and sample outputs if anybody thinks this is helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561544849
https://github.com/psi4/psi4/issues/1764#issuecomment-561544849:1154,Integrability,interface,interface,1154,"I had looked into the integer overflow issues in the DF code with MP3 as an example several months ago. The negative memory values reported are of course integral overflows and one can fix the printing of memory requirements by changing the int to a type that holds larger integers. But the actual problem happens later when, if I understand correctly, an array index becomes bigger than 2,147,483,647. . In my DF-MP3 test calculation this happened in the main loop in mp3_WabefT2. . Memory for I, Vs, Va, Ts, and Ta was successfully allocated, but then the quantity a * navirA * nQ became too large. I forced it to long or long-long, so the product could be evaluated (and printed printed out) as 2148655392 (as opposed to -2146311904 with int) but this positive value ""anavirAnQ3"" was illegal for the subsequent contraction. I->contract(false, true, navirA * nb, navirA, nQ, K, K, 0, anavirAnQ3, 1.0, 0.0);. So, it is the array index, and not the array value, that is bigger than the 32-bit integer. And our math libraries index arrays with the 32-bit integer type! . I tried to compile Psi against MKL and OpenBLAS with 64-bit index arrays (the ILP64 interface) but the resulting program was not stable. So, if my thinking is correct, I am afraid we do not have an easy fix as long as Psi4 expects math libraries with 32-bit integer indices. I can share some debug code (modified dfocc.h, df_ref.cc, tei_grad_corr.cc, df_corr.cc, ref_grad.cc, and mp3_W_intr.cc with some long int and printf statements) and sample outputs if anybody thinks this is helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561544849
https://github.com/psi4/psi4/issues/1764#issuecomment-561544849:418,Testability,test,test,418,"I had looked into the integer overflow issues in the DF code with MP3 as an example several months ago. The negative memory values reported are of course integral overflows and one can fix the printing of memory requirements by changing the int to a type that holds larger integers. But the actual problem happens later when, if I understand correctly, an array index becomes bigger than 2,147,483,647. . In my DF-MP3 test calculation this happened in the main loop in mp3_WabefT2. . Memory for I, Vs, Va, Ts, and Ta was successfully allocated, but then the quantity a * navirA * nQ became too large. I forced it to long or long-long, so the product could be evaluated (and printed printed out) as 2148655392 (as opposed to -2146311904 with int) but this positive value ""anavirAnQ3"" was illegal for the subsequent contraction. I->contract(false, true, navirA * nb, navirA, nQ, K, K, 0, anavirAnQ3, 1.0, 0.0);. So, it is the array index, and not the array value, that is bigger than the 32-bit integer. And our math libraries index arrays with the 32-bit integer type! . I tried to compile Psi against MKL and OpenBLAS with 64-bit index arrays (the ILP64 interface) but the resulting program was not stable. So, if my thinking is correct, I am afraid we do not have an easy fix as long as Psi4 expects math libraries with 32-bit integer indices. I can share some debug code (modified dfocc.h, df_ref.cc, tei_grad_corr.cc, df_corr.cc, ref_grad.cc, and mp3_W_intr.cc with some long int and printf statements) and sample outputs if anybody thinks this is helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561544849
https://github.com/psi4/psi4/issues/1764#issuecomment-561549878:166,Availability,Avail,Available,166,"After @andysim 's fix I get a normal print; ```; MO spaces... FC OCC VIR FV; ----------------------; 36 91 567 0. Number of basis functions in the DF-CC basis: 2548. Available memory : 61440.00 MB; Memory requirement for 3-index ints : 7413.66 MB; Memory requirement for DF-CC int trans: 23261.99 MB; Memory requirement for CC contractions: 60934.08 MB; Warning: T2 amplitudes will be stored on the disk!; Memory requirement for Wabef term : 34201.37 MB; ```. Though the calculation exceeds my 64 GiB RAM in the end. @kaljugit wow, looks like you went deep!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561549878
https://github.com/psi4/psi4/issues/1764#issuecomment-561549878:327,Integrability,contract,contractions,327,"After @andysim 's fix I get a normal print; ```; MO spaces... FC OCC VIR FV; ----------------------; 36 91 567 0. Number of basis functions in the DF-CC basis: 2548. Available memory : 61440.00 MB; Memory requirement for 3-index ints : 7413.66 MB; Memory requirement for DF-CC int trans: 23261.99 MB; Memory requirement for CC contractions: 60934.08 MB; Warning: T2 amplitudes will be stored on the disk!; Memory requirement for Wabef term : 34201.37 MB; ```. Though the calculation exceeds my 64 GiB RAM in the end. @kaljugit wow, looks like you went deep!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561549878
https://github.com/psi4/psi4/issues/1764#issuecomment-561685809:233,Deployability,patch,patch,233,good news. The MKL is fine for this. I got the calculation finished.; Trouble was likely again #1679 because it failed right at the amplitude writing. I applied the `long long int` modification and the `size_t` suggestion above (see patch).; Results: [outfile.txt](https://github.com/psi4/psi4/files/3922471/outfile.txt); git patch: [fix.patch.txt](https://github.com/psi4/psi4/files/3922477/fix.patch.txt) (sort of untested hot fix for now),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561685809
https://github.com/psi4/psi4/issues/1764#issuecomment-561685809:326,Deployability,patch,patch,326,good news. The MKL is fine for this. I got the calculation finished.; Trouble was likely again #1679 because it failed right at the amplitude writing. I applied the `long long int` modification and the `size_t` suggestion above (see patch).; Results: [outfile.txt](https://github.com/psi4/psi4/files/3922471/outfile.txt); git patch: [fix.patch.txt](https://github.com/psi4/psi4/files/3922477/fix.patch.txt) (sort of untested hot fix for now),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561685809
https://github.com/psi4/psi4/issues/1764#issuecomment-561685809:338,Deployability,patch,patch,338,good news. The MKL is fine for this. I got the calculation finished.; Trouble was likely again #1679 because it failed right at the amplitude writing. I applied the `long long int` modification and the `size_t` suggestion above (see patch).; Results: [outfile.txt](https://github.com/psi4/psi4/files/3922471/outfile.txt); git patch: [fix.patch.txt](https://github.com/psi4/psi4/files/3922477/fix.patch.txt) (sort of untested hot fix for now),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561685809
https://github.com/psi4/psi4/issues/1764#issuecomment-561685809:396,Deployability,patch,patch,396,good news. The MKL is fine for this. I got the calculation finished.; Trouble was likely again #1679 because it failed right at the amplitude writing. I applied the `long long int` modification and the `size_t` suggestion above (see patch).; Results: [outfile.txt](https://github.com/psi4/psi4/files/3922471/outfile.txt); git patch: [fix.patch.txt](https://github.com/psi4/psi4/files/3922477/fix.patch.txt) (sort of untested hot fix for now),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561685809
https://github.com/psi4/psi4/issues/1764#issuecomment-561713329:130,Testability,test,test,130,"That is a good news! @hokru if you have time and resources, could you please check if your modification also works for the larger test case that gave me trouble. I am unable to try out your fix for another couple of weeks:; Input: ; [kk_dfmp3_test.log](https://github.com/psi4/psi4/files/3922793/kk_dfmp3_test.log)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561713329
https://github.com/psi4/psi4/issues/1764#issuecomment-561713329:248,Testability,log,log,248,"That is a good news! @hokru if you have time and resources, could you please check if your modification also works for the larger test case that gave me trouble. I am unable to try out your fix for another couple of weeks:; Input: ; [kk_dfmp3_test.log](https://github.com/psi4/psi4/files/3922793/kk_dfmp3_test.log)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561713329
https://github.com/psi4/psi4/issues/1764#issuecomment-561713329:310,Testability,log,log,310,"That is a good news! @hokru if you have time and resources, could you please check if your modification also works for the larger test case that gave me trouble. I am unable to try out your fix for another couple of weeks:; Input: ; [kk_dfmp3_test.log](https://github.com/psi4/psi4/files/3922793/kk_dfmp3_test.log)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561713329
https://github.com/psi4/psi4/issues/1764#issuecomment-561722952:366,Energy Efficiency,energy,energy,366,"@kaljugit It goes past the MP2 printout so it might work.; Anion without diffuse functions, though. Are you sure? `fno-mp3/mar-cc-pV5Z` should work very well with the 4-fold symmetry, btw. Only the integral writing after the scf is painfully slow (single-threaded). ```; set globals {; basis mar-cc-pV5Z; freeze_core true; ints_tolerance 1e-11; s_tolerance 1e-9; }; energy('fno-mp3'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561722952
https://github.com/psi4/psi4/issues/1764#issuecomment-561791551:47,Energy Efficiency,energy,energy,47,"well, I see now that the 3rd order correlation energy is zero in my calculations...so this is not solved yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561791551
https://github.com/psi4/psi4/issues/1764#issuecomment-561872174:56,Deployability,patch,patch,56,"@hokru I made a few changes beyond what you had in your patch and it seems to work correctly now, for this molecule at least. MP2 and MP3 correlation energies are non-zero and in line with what I expect from smaller systems.; [patch.txt](https://github.com/psi4/psi4/files/3924255/patch.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561872174
https://github.com/psi4/psi4/issues/1764#issuecomment-561872174:227,Deployability,patch,patch,227,"@hokru I made a few changes beyond what you had in your patch and it seems to work correctly now, for this molecule at least. MP2 and MP3 correlation energies are non-zero and in line with what I expect from smaller systems.; [patch.txt](https://github.com/psi4/psi4/files/3924255/patch.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561872174
https://github.com/psi4/psi4/issues/1764#issuecomment-561872174:281,Deployability,patch,patch,281,"@hokru I made a few changes beyond what you had in your patch and it seems to work correctly now, for this molecule at least. MP2 and MP3 correlation energies are non-zero and in line with what I expect from smaller systems.; [patch.txt](https://github.com/psi4/psi4/files/3924255/patch.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561872174
https://github.com/psi4/psi4/issues/1764#issuecomment-561974472:91,Energy Efficiency,Energy,Energy,91,"@hokru Thank you for giving it a try! . Yes, with my fixes it completed MP2 ; DF-MP2 Total Energy (a.u.) : -419.66275196620722; wrote out recalculated T2_2 (IA|JB) amplitudes in mp3_WmnijT2AA, ; succeeded through mp3_WmbejT2,; and then died in mp3_WabefT2. I omitted diffuse function for debugging only. All research work is with aug-cc-pVXZ or zapa-nr. The latter, while not as diffuse as aug-cc-pVXZ, gave me very nice basis set convergence for E2. For this system, mar-cc-pV5Z was actually not an obvious improvement over aug-cc-pVQZ ... Proton affinity with the latter was closer to aug-cc-pV5Z result compared to proton affinity with mar-cc-pV5Z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561974472
https://github.com/psi4/psi4/issues/1764#issuecomment-561976491:39,Deployability,patch,patch,39,"@devinamatthews Thanks for sharing the patch. Speaking of science, I am not sure if your example was a test or production job but I would be careful with third-order correlation energies in cc-pVDZ basis. See [https://www.ncbi.nlm.nih.gov/pubmed/17186479](url) for details.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561976491
https://github.com/psi4/psi4/issues/1764#issuecomment-561976491:103,Testability,test,test,103,"@devinamatthews Thanks for sharing the patch. Speaking of science, I am not sure if your example was a test or production job but I would be careful with third-order correlation energies in cc-pVDZ basis. See [https://www.ncbi.nlm.nih.gov/pubmed/17186479](url) for details.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561976491
https://github.com/psi4/psi4/issues/1764#issuecomment-562216701:211,Availability,Avail,Available,211,"Apparently the problem is not completely fixed. Running (H2O)30 results in:. ```; 	MO spaces... . 	 FC OCC VIR FV ; 	----------------------; 	 30 120 570 0. 	Number of basis functions in the DF-CC basis: 2520. 	Available memory : 667572.02 MB ; 	Memory requirement for 3-index ints : 7838.47 MB ; 	Memory requirement for DF-CC int trans: 24103.73 MB ; 	Memory requirement for CC contractions: 142778.32 MB ; 	Total memory requirement for DF+CC int: 150616.79 MB ; 	Memory requirement for Wabef term : 49600.59 MB . Traceback (most recent call last):; File ""/users/damatthews/apps/psi4/bin/psi4"", line 289, in <module>; exec(content); File ""<string>"", line 121, in <module>; File ""/users/damatthews/apps/psi4/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 1620, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn). MemoryError: std::bad_array_new_length; ```. Any ideas where to look next?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562216701
https://github.com/psi4/psi4/issues/1764#issuecomment-562216701:749,Energy Efficiency,energy,energy,749,"Apparently the problem is not completely fixed. Running (H2O)30 results in:. ```; 	MO spaces... . 	 FC OCC VIR FV ; 	----------------------; 	 30 120 570 0. 	Number of basis functions in the DF-CC basis: 2520. 	Available memory : 667572.02 MB ; 	Memory requirement for 3-index ints : 7838.47 MB ; 	Memory requirement for DF-CC int trans: 24103.73 MB ; 	Memory requirement for CC contractions: 142778.32 MB ; 	Total memory requirement for DF+CC int: 150616.79 MB ; 	Memory requirement for Wabef term : 49600.59 MB . Traceback (most recent call last):; File ""/users/damatthews/apps/psi4/bin/psi4"", line 289, in <module>; exec(content); File ""<string>"", line 121, in <module>; File ""/users/damatthews/apps/psi4/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 1620, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn). MemoryError: std::bad_array_new_length; ```. Any ideas where to look next?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562216701
https://github.com/psi4/psi4/issues/1764#issuecomment-562216701:775,Energy Efficiency,energy,energy,775,"Apparently the problem is not completely fixed. Running (H2O)30 results in:. ```; 	MO spaces... . 	 FC OCC VIR FV ; 	----------------------; 	 30 120 570 0. 	Number of basis functions in the DF-CC basis: 2520. 	Available memory : 667572.02 MB ; 	Memory requirement for 3-index ints : 7838.47 MB ; 	Memory requirement for DF-CC int trans: 24103.73 MB ; 	Memory requirement for CC contractions: 142778.32 MB ; 	Total memory requirement for DF+CC int: 150616.79 MB ; 	Memory requirement for Wabef term : 49600.59 MB . Traceback (most recent call last):; File ""/users/damatthews/apps/psi4/bin/psi4"", line 289, in <module>; exec(content); File ""<string>"", line 121, in <module>; File ""/users/damatthews/apps/psi4/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 1620, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn). MemoryError: std::bad_array_new_length; ```. Any ideas where to look next?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562216701
https://github.com/psi4/psi4/issues/1764#issuecomment-562216701:379,Integrability,contract,contractions,379,"Apparently the problem is not completely fixed. Running (H2O)30 results in:. ```; 	MO spaces... . 	 FC OCC VIR FV ; 	----------------------; 	 30 120 570 0. 	Number of basis functions in the DF-CC basis: 2520. 	Available memory : 667572.02 MB ; 	Memory requirement for 3-index ints : 7838.47 MB ; 	Memory requirement for DF-CC int trans: 24103.73 MB ; 	Memory requirement for CC contractions: 142778.32 MB ; 	Total memory requirement for DF+CC int: 150616.79 MB ; 	Memory requirement for Wabef term : 49600.59 MB . Traceback (most recent call last):; File ""/users/damatthews/apps/psi4/bin/psi4"", line 289, in <module>; exec(content); File ""<string>"", line 121, in <module>; File ""/users/damatthews/apps/psi4/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 1620, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn). MemoryError: std::bad_array_new_length; ```. Any ideas where to look next?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562216701
https://github.com/psi4/psi4/issues/1764#issuecomment-562292735:111,Deployability,patch,patched-up,111,"One could try to incorporate the debugging ""Printf"" statements from the attached file to mp3_W_intr.cc in your patched-up system to see how far the MP3 calculation progresses. The lines with anavirAnQ1, anavirAnQ2, anavirAnQ3 are probably not relevant after your patches but printing the value of the product (a navirA nQ) out in this main loop would be still helpful. [mp3_W_intr.cc.gz](https://github.com/psi4/psi4/files/3928773/mp3_W_intr.cc.gz)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562292735
https://github.com/psi4/psi4/issues/1764#issuecomment-562292735:263,Deployability,patch,patches,263,"One could try to incorporate the debugging ""Printf"" statements from the attached file to mp3_W_intr.cc in your patched-up system to see how far the MP3 calculation progresses. The lines with anavirAnQ1, anavirAnQ2, anavirAnQ3 are probably not relevant after your patches but printing the value of the product (a navirA nQ) out in this main loop would be still helpful. [mp3_W_intr.cc.gz](https://github.com/psi4/psi4/files/3928773/mp3_W_intr.cc.gz)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562292735
https://github.com/psi4/psi4/issues/1764#issuecomment-562356814:120,Deployability,update,update,120,It appears the problem is that `Tensor1d` (used e.g. in `Tensor2d::write_symm()`) uses `int` for the size--I'll have to update the whole class.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562356814
https://github.com/psi4/psi4/issues/1764#issuecomment-562578029:82,Deployability,patch,patching,82,@devinamatthews This sounds great until @bozkaya can respond here. Would you mind patching this into Psi4 master?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562578029
https://github.com/psi4/psi4/issues/1764#issuecomment-562608405:272,Availability,avail,available,272,"Hi all,. I am out of Country for the International Junior Science Olympiad (IJSO), hence I could not catch up with you. I know the problem for large molecules, it is because of int. I think if I change all ints to long long int, the problem will be solved. When I find an available time I can take a look. Meanwhile, you can use your patch and update dfocc as long as your patch passes all dfocc tests. Alternatively, a volunter may change all int data types to LLI for dfocc. @devinamatthews @dgasmith . Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405
https://github.com/psi4/psi4/issues/1764#issuecomment-562608405:334,Deployability,patch,patch,334,"Hi all,. I am out of Country for the International Junior Science Olympiad (IJSO), hence I could not catch up with you. I know the problem for large molecules, it is because of int. I think if I change all ints to long long int, the problem will be solved. When I find an available time I can take a look. Meanwhile, you can use your patch and update dfocc as long as your patch passes all dfocc tests. Alternatively, a volunter may change all int data types to LLI for dfocc. @devinamatthews @dgasmith . Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405
https://github.com/psi4/psi4/issues/1764#issuecomment-562608405:344,Deployability,update,update,344,"Hi all,. I am out of Country for the International Junior Science Olympiad (IJSO), hence I could not catch up with you. I know the problem for large molecules, it is because of int. I think if I change all ints to long long int, the problem will be solved. When I find an available time I can take a look. Meanwhile, you can use your patch and update dfocc as long as your patch passes all dfocc tests. Alternatively, a volunter may change all int data types to LLI for dfocc. @devinamatthews @dgasmith . Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405
https://github.com/psi4/psi4/issues/1764#issuecomment-562608405:373,Deployability,patch,patch,373,"Hi all,. I am out of Country for the International Junior Science Olympiad (IJSO), hence I could not catch up with you. I know the problem for large molecules, it is because of int. I think if I change all ints to long long int, the problem will be solved. When I find an available time I can take a look. Meanwhile, you can use your patch and update dfocc as long as your patch passes all dfocc tests. Alternatively, a volunter may change all int data types to LLI for dfocc. @devinamatthews @dgasmith . Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405
https://github.com/psi4/psi4/issues/1764#issuecomment-562608405:396,Testability,test,tests,396,"Hi all,. I am out of Country for the International Junior Science Olympiad (IJSO), hence I could not catch up with you. I know the problem for large molecules, it is because of int. I think if I change all ints to long long int, the problem will be solved. When I find an available time I can take a look. Meanwhile, you can use your patch and update dfocc as long as your patch passes all dfocc tests. Alternatively, a volunter may change all int data types to LLI for dfocc. @devinamatthews @dgasmith . Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405
https://github.com/psi4/psi4/issues/1764#issuecomment-562739051:82,Modifiability,variab,variables,82,"Yes in most cases size_t would be better. However, we need to investigate all int variables in DFOCC whether they can have negative values or not, may be some of them are signed ints. Hence, the safest solution could be changing int to long long it. Overall, size_t is okay if we sure that we are not breaking any other part of the code, if we are not sure then long long int is a good solution. @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562739051
https://github.com/psi4/psi4/issues/1764#issuecomment-562739051:195,Safety,safe,safest,195,"Yes in most cases size_t would be better. However, we need to investigate all int variables in DFOCC whether they can have negative values or not, may be some of them are signed ints. Hence, the safest solution could be changing int to long long it. Overall, size_t is okay if we sure that we are not breaking any other part of the code, if we are not sure then long long int is a good solution. @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562739051
https://github.com/psi4/psi4/pull/1766#issuecomment-565454511:64,Availability,down,downstreams,64,"The functions weren't exposed to plugins or Python, so the only downstreams we could possibly break are using locally modified Psi. I'm not worried about them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1766#issuecomment-565454511
https://github.com/psi4/psi4/pull/1766#issuecomment-565454511:33,Modifiability,plugin,plugins,33,"The functions weren't exposed to plugins or Python, so the only downstreams we could possibly break are using locally modified Psi. I'm not worried about them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1766#issuecomment-565454511
https://github.com/psi4/psi4/pull/1766#issuecomment-565454511:22,Security,expose,exposed,22,"The functions weren't exposed to plugins or Python, so the only downstreams we could possibly break are using locally modified Psi. I'm not worried about them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1766#issuecomment-565454511
https://github.com/psi4/psi4/pull/1772#issuecomment-568070767:92,Testability,test,tests,92,"> @bozkaya should have an opportunity to look over the changes to reference energies in the tests. For his reference, most of the changes are going to be just in the sixth decimal place due to tighter convergence. The one exception are DF-OMP3 tests, where a bug caused fourth decimal place changes as described in the first post.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1772#issuecomment-568070767
https://github.com/psi4/psi4/pull/1772#issuecomment-568070767:244,Testability,test,tests,244,"> @bozkaya should have an opportunity to look over the changes to reference energies in the tests. For his reference, most of the changes are going to be just in the sixth decimal place due to tighter convergence. The one exception are DF-OMP3 tests, where a bug caused fourth decimal place changes as described in the first post.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1772#issuecomment-568070767
https://github.com/psi4/psi4/issues/1774#issuecomment-568835165:115,Availability,fault,fault,115,"You’re not mistaken — forum has been unreliable for over a week. We haven’t determined exactly which service is at fault, but it’s on the todo list.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1774#issuecomment-568835165
https://github.com/psi4/psi4/issues/1775#issuecomment-570012416:52,Deployability,release,release,52,"Thanks for the report. Just to be clear, the stable release psi v1.3.2 (`-c psi4`) isn't expected to be compatible with the latest v2rdm from `-c psi4/label/dev` which has build version (can see in `conda list`) that ends in `_11`. Instead, it should be compatible with the latest v2rdm installable from `-c psi4` which ends in `_6`. Could you be trying to mix conda channel labels?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1775#issuecomment-570012416
https://github.com/psi4/psi4/issues/1775#issuecomment-570012416:287,Deployability,install,installable,287,"Thanks for the report. Just to be clear, the stable release psi v1.3.2 (`-c psi4`) isn't expected to be compatible with the latest v2rdm from `-c psi4/label/dev` which has build version (can see in `conda list`) that ends in `_11`. Instead, it should be compatible with the latest v2rdm installable from `-c psi4` which ends in `_6`. Could you be trying to mix conda channel labels?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1775#issuecomment-570012416
https://github.com/psi4/psi4/issues/1775#issuecomment-570012416:34,Usability,clear,clear,34,"Thanks for the report. Just to be clear, the stable release psi v1.3.2 (`-c psi4`) isn't expected to be compatible with the latest v2rdm from `-c psi4/label/dev` which has build version (can see in `conda list`) that ends in `_11`. Instead, it should be compatible with the latest v2rdm installable from `-c psi4` which ends in `_6`. Could you be trying to mix conda channel labels?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1775#issuecomment-570012416
https://github.com/psi4/psi4/pull/1776#issuecomment-572037458:74,Performance,concurren,concurrent,74,"A single service is nice. But Azure is both much faster and provides more concurrent resources. We originally didn't dive too much into Azure due to its relative complexity, but switching over only took an afternoon of trying.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1776#issuecomment-572037458
https://github.com/psi4/psi4/issues/1777#issuecomment-571630492:226,Availability,down,down,226,"I scale the DIIS B matrix diagonals based on the suggestion made by Pulay (JCP, 84, 5728, 1986). It is expected to improve convergence in problematic cases, where B matrix is not diagonally dominant. However, it slightly slow down the diis. @JonathonMisiewicz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-571630492
https://github.com/psi4/psi4/issues/1777#issuecomment-571668983:573,Availability,error,error,573,"This is damping, not level shifting. This keyword should be renamed. To give you some perspective on how severe these convergence problems are, for the test case I gave, which is in the Psi test suite:; No damping: 16 iterations; 0.01 damping: 38 iterations; 0.02 damping (default): 53 iterations. So we've made convergence **three times harder** to achieve in this example. Have you seen many cases where this damping is necessary or helpful to converge? Otherwise, I agree with Lori about turning this off by default. For future reference:; Eq. 5 of the paper has a sign error: the - needs to be a + in order for minimizing to favor a solution where c_i^2 B_ii small, which should prevent individual c coefficients blowing up. The (1+d) rule in the paper is correct, as is the Psi implementation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-571668983
https://github.com/psi4/psi4/issues/1777#issuecomment-571668983:152,Testability,test,test,152,"This is damping, not level shifting. This keyword should be renamed. To give you some perspective on how severe these convergence problems are, for the test case I gave, which is in the Psi test suite:; No damping: 16 iterations; 0.01 damping: 38 iterations; 0.02 damping (default): 53 iterations. So we've made convergence **three times harder** to achieve in this example. Have you seen many cases where this damping is necessary or helpful to converge? Otherwise, I agree with Lori about turning this off by default. For future reference:; Eq. 5 of the paper has a sign error: the - needs to be a + in order for minimizing to favor a solution where c_i^2 B_ii small, which should prevent individual c coefficients blowing up. The (1+d) rule in the paper is correct, as is the Psi implementation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-571668983
https://github.com/psi4/psi4/issues/1777#issuecomment-571668983:190,Testability,test,test,190,"This is damping, not level shifting. This keyword should be renamed. To give you some perspective on how severe these convergence problems are, for the test case I gave, which is in the Psi test suite:; No damping: 16 iterations; 0.01 damping: 38 iterations; 0.02 damping (default): 53 iterations. So we've made convergence **three times harder** to achieve in this example. Have you seen many cases where this damping is necessary or helpful to converge? Otherwise, I agree with Lori about turning this off by default. For future reference:; Eq. 5 of the paper has a sign error: the - needs to be a + in order for minimizing to favor a solution where c_i^2 B_ii small, which should prevent individual c coefficients blowing up. The (1+d) rule in the paper is correct, as is the Psi implementation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-571668983
https://github.com/psi4/psi4/issues/1777#issuecomment-571728193:92,Testability,test,tests,92,"Go for the renaming and default toggling, I think, @JonathonMisiewicz. It's good to get the tests passing and converging under conditions other than early exit from iterations. If you have a non-diagonally dominant B-matrix case around, @bozkaya, it'd be nice to have that in the test suite to make sure we're not favoring one class of systems over others.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-571728193
https://github.com/psi4/psi4/issues/1777#issuecomment-571728193:280,Testability,test,test,280,"Go for the renaming and default toggling, I think, @JonathonMisiewicz. It's good to get the tests passing and converging under conditions other than early exit from iterations. If you have a non-diagonally dominant B-matrix case around, @bozkaya, it'd be nice to have that in the test suite to make sure we're not favoring one class of systems over others.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-571728193
https://github.com/psi4/psi4/issues/1777#issuecomment-572032439:11,Testability,test,tests,11,"Additional tests show that just turning off the damping may not be a good idea after all. Many of the OCEPA/OLCCD tests use the NO radical (ocepa-grad2, ocepa3, ocepa2), and none of them pass if I have damping off. I'll continue investigating and post back when I have something. These convergence problems aren't consistent with my experience with my own OCEPA code, and the damping is far more chaotic than I'd expect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-572032439
https://github.com/psi4/psi4/issues/1777#issuecomment-572032439:114,Testability,test,tests,114,"Additional tests show that just turning off the damping may not be a good idea after all. Many of the OCEPA/OLCCD tests use the NO radical (ocepa-grad2, ocepa3, ocepa2), and none of them pass if I have damping off. I'll continue investigating and post back when I have something. These convergence problems aren't consistent with my experience with my own OCEPA code, and the damping is far more chaotic than I'd expect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-572032439
https://github.com/psi4/psi4/issues/1777#issuecomment-582943452:7,Deployability,update,update,7,"Status update: I have coupled DIIS working for OCEPA. The OMP family should follow without _much_ additional effort. For `ocepa-grad2`, I'm seeing in 13 iterations what took 33 [before my meddling](https://github.com/psi4/psi4/blob/master/tests/ocepa-grad2/output.ref). I'm going to take some extra time before pushing anything to do a thorough convergence study.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-582943452
https://github.com/psi4/psi4/issues/1777#issuecomment-582943452:239,Testability,test,tests,239,"Status update: I have coupled DIIS working for OCEPA. The OMP family should follow without _much_ additional effort. For `ocepa-grad2`, I'm seeing in 13 iterations what took 33 [before my meddling](https://github.com/psi4/psi4/blob/master/tests/ocepa-grad2/output.ref). I'm going to take some extra time before pushing anything to do a thorough convergence study.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-582943452
https://github.com/psi4/psi4/issues/1778#issuecomment-572203700:1240,Energy Efficiency,energy,energy,1240,"ence actually has some; influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; computation). The issue is that the code can't determine what irrep; your target wavefunction is supposed to be, because you haven't given it; information about the orbital occupancy of the reference HF wavefunction.; I think if you specified docc [] and socc [] arrays for the reference; high-spin triplet, the code would have a much better chance to figure out; what you want. On Wed, Jan 8, 2020 at 7:10 AM Susi Lehtola <notifications@github.com>; wrote:. > I'm hoping to do atomic MCHF calculations with Psi4, which amount to small; > CASSCF calculations. However, I can't get DETCI to run the calculations for; > me.; >; > Take the oxygen atom for example. The 3P state has 4 electrons on the P; > shell. DETCI correctly determines that there is 1 alpha string (since the; > shell is fully occupied) and 3 beta strings, but then it says that the CI; > space only has a single determinant and crashes.; >; > Example inputs; >; > molecule {; > 0 3; > O; > }; >; > set basis cc-pVDZ; > set reference rohf; > set restricted_docc [2, 0, 0, 0, 0, 0, 0, 0]; > set active [0, 0, 0, 0, 0, 1, 1, 1]; > energy('casscf'); >; > or a lower symmetry; >; > molecule {; > symmetry c2h; > 0 3; > O; > }; >; > set basis cc-pVDZ; > set reference rohf; > set restricted_docc [2, 0, 0, 0]; > set active [0, 0, 1, 2]; > energy('casscf'); >; > I guess the problem is that DETCI can't find a proper symmetry? Is there a; > way to circumvent this issue? @CDSherrill <https://github.com/CDSherrill>; > ?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1778?email_source=notifications&email_token=AAXVA5S35WYJS2NBHZWGQ23Q4W7DBA5CNFSM4KEHMIA2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IEX3GRQ>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5TREGCEEDC6ZHCE5EDQ4W7DBANCNFSM4KEHMIAQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572203700
https://github.com/psi4/psi4/issues/1778#issuecomment-572203700:1445,Energy Efficiency,energy,energy,1445,"ence actually has some; influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; computation). The issue is that the code can't determine what irrep; your target wavefunction is supposed to be, because you haven't given it; information about the orbital occupancy of the reference HF wavefunction.; I think if you specified docc [] and socc [] arrays for the reference; high-spin triplet, the code would have a much better chance to figure out; what you want. On Wed, Jan 8, 2020 at 7:10 AM Susi Lehtola <notifications@github.com>; wrote:. > I'm hoping to do atomic MCHF calculations with Psi4, which amount to small; > CASSCF calculations. However, I can't get DETCI to run the calculations for; > me.; >; > Take the oxygen atom for example. The 3P state has 4 electrons on the P; > shell. DETCI correctly determines that there is 1 alpha string (since the; > shell is fully occupied) and 3 beta strings, but then it says that the CI; > space only has a single determinant and crashes.; >; > Example inputs; >; > molecule {; > 0 3; > O; > }; >; > set basis cc-pVDZ; > set reference rohf; > set restricted_docc [2, 0, 0, 0, 0, 0, 0, 0]; > set active [0, 0, 0, 0, 0, 1, 1, 1]; > energy('casscf'); >; > or a lower symmetry; >; > molecule {; > symmetry c2h; > 0 3; > O; > }; >; > set basis cc-pVDZ; > set reference rohf; > set restricted_docc [2, 0, 0, 0]; > set active [0, 0, 1, 2]; > energy('casscf'); >; > I guess the problem is that DETCI can't find a proper symmetry? Is there a; > way to circumvent this issue? @CDSherrill <https://github.com/CDSherrill>; > ?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1778?email_source=notifications&email_token=AAXVA5S35WYJS2NBHZWGQ23Q4W7DBA5CNFSM4KEHMIA2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IEX3GRQ>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5TREGCEEDC6ZHCE5EDQ4W7DBANCNFSM4KEHMIAQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572203700
https://github.com/psi4/psi4/issues/1778#issuecomment-572205907:1483,Energy Efficiency,energy,energy,1483,"vant"" in a CASSCF; > computation). The issue is that the code can't determine what irrep; > your target wavefunction is supposed to be, because you haven't given it; > information about the orbital occupancy of the reference HF wavefunction.; > I think if you specified docc [] and socc [] arrays for the reference; > high-spin triplet, the code would have a much better chance to figure out; > what you want.; >; > On Wed, Jan 8, 2020 at 7:10 AM Susi Lehtola <notifications@github.com>; > wrote:; >; >> I'm hoping to do atomic MCHF calculations with Psi4, which amount to; >> small CASSCF calculations. However, I can't get DETCI to run the; >> calculations for me.; >>; >> Take the oxygen atom for example. The 3P state has 4 electrons on the P; >> shell. DETCI correctly determines that there is 1 alpha string (since the; >> shell is fully occupied) and 3 beta strings, but then it says that the CI; >> space only has a single determinant and crashes.; >>; >> Example inputs; >>; >> molecule {; >> 0 3; >> O; >> }; >>; >> set basis cc-pVDZ; >> set reference rohf; >> set restricted_docc [2, 0, 0, 0, 0, 0, 0, 0]; >> set active [0, 0, 0, 0, 0, 1, 1, 1]; >> energy('casscf'); >>; >> or a lower symmetry; >>; >> molecule {; >> symmetry c2h; >> 0 3; >> O; >> }; >>; >> set basis cc-pVDZ; >> set reference rohf; >> set restricted_docc [2, 0, 0, 0]; >> set active [0, 0, 1, 2]; >> energy('casscf'); >>; >> I guess the problem is that DETCI can't find a proper symmetry? Is there; >> a way to circumvent this issue? @CDSherrill; >> <https://github.com/CDSherrill> ?; >>; >> —; >> You are receiving this because you were mentioned.; >> Reply to this email directly, view it on GitHub; >> <https://github.com/psi4/psi4/issues/1778?email_source=notifications&email_token=AAXVA5S35WYJS2NBHZWGQ23Q4W7DBA5CNFSM4KEHMIA2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IEX3GRQ>,; >> or unsubscribe; >> <https://github.com/notifications/unsubscribe-auth/AAXVA5TREGCEEDC6ZHCE5EDQ4W7DBANCNFSM4KEHMIAQ>; >> .; >>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572205907
https://github.com/psi4/psi4/issues/1778#issuecomment-572205907:1702,Energy Efficiency,energy,energy,1702,"vant"" in a CASSCF; > computation). The issue is that the code can't determine what irrep; > your target wavefunction is supposed to be, because you haven't given it; > information about the orbital occupancy of the reference HF wavefunction.; > I think if you specified docc [] and socc [] arrays for the reference; > high-spin triplet, the code would have a much better chance to figure out; > what you want.; >; > On Wed, Jan 8, 2020 at 7:10 AM Susi Lehtola <notifications@github.com>; > wrote:; >; >> I'm hoping to do atomic MCHF calculations with Psi4, which amount to; >> small CASSCF calculations. However, I can't get DETCI to run the; >> calculations for me.; >>; >> Take the oxygen atom for example. The 3P state has 4 electrons on the P; >> shell. DETCI correctly determines that there is 1 alpha string (since the; >> shell is fully occupied) and 3 beta strings, but then it says that the CI; >> space only has a single determinant and crashes.; >>; >> Example inputs; >>; >> molecule {; >> 0 3; >> O; >> }; >>; >> set basis cc-pVDZ; >> set reference rohf; >> set restricted_docc [2, 0, 0, 0, 0, 0, 0, 0]; >> set active [0, 0, 0, 0, 0, 1, 1, 1]; >> energy('casscf'); >>; >> or a lower symmetry; >>; >> molecule {; >> symmetry c2h; >> 0 3; >> O; >> }; >>; >> set basis cc-pVDZ; >> set reference rohf; >> set restricted_docc [2, 0, 0, 0]; >> set active [0, 0, 1, 2]; >> energy('casscf'); >>; >> I guess the problem is that DETCI can't find a proper symmetry? Is there; >> a way to circumvent this issue? @CDSherrill; >> <https://github.com/CDSherrill> ?; >>; >> —; >> You are receiving this because you were mentioned.; >> Reply to this email directly, view it on GitHub; >> <https://github.com/psi4/psi4/issues/1778?email_source=notifications&email_token=AAXVA5S35WYJS2NBHZWGQ23Q4W7DBA5CNFSM4KEHMIA2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IEX3GRQ>,; >> or unsubscribe; >> <https://github.com/notifications/unsubscribe-auth/AAXVA5TREGCEEDC6ZHCE5EDQ4W7DBANCNFSM4KEHMIAQ>; >> .; >>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572205907
https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:1031,Deployability,configurat,configurational,1031,"as written assuming that one wants to find a; wavefunction of a definite irreducible representation. So, within D2H, or; C2H, your 3 determinants have different symmetries. I think the only; subgroup in which they will have the same irrep is if it is run in C1. So, I tried setting it up in C1. It runs, but it just gives the HF energy; back. Why? Well, even if we tell the program ""C1"", the system still has; the underlying atomic symmetry (D2H being the highest Abelian subgroup).; Under D2H symmetry, those 3 determinants won't mix, and they don't. Of course, the *true* symmetry of the molecule is atomic symmetry, higher; than D2H. But unfortunately we only have Abelian subgroups in Psi. I am not sure offhand if one could force a mixing by deliberately breaking; the symmetry of the orbitals, or by using a different guess CI vector. I'd; have to think about that a little more. It might be that to do what you; are trying to do and get a fully-spin-adapted multi-configurational; wavefunction, one would need to use actual spherical harmonic atomic; orbitals, not the Cartesian representations p_x, p_y, p_z. On Wed, Jan 8, 2020 at 1:52 PM David Sherrill <prof.david.sherrill@gmail.com>; wrote:. > Hm, nope, that doesn't get around the problem. I'll see if I can take a; > look if I get a minute free later.; >; > On Wed, Jan 8, 2020 at 1:46 PM David Sherrill <; > prof.david.sherrill@gmail.com> wrote:; >; >> This is one of those rare cases where the HF reference actually has some; >> influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; >> computation). The issue is that the code can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out; >> what you want.; >>; >> On Wed, Jan 8, 2020 at 7:10 AM S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043
https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:389,Energy Efficiency,energy,energy,389,"I've looked at this a little more. The issue is that DETCI was written assuming that one wants to find a; wavefunction of a definite irreducible representation. So, within D2H, or; C2H, your 3 determinants have different symmetries. I think the only; subgroup in which they will have the same irrep is if it is run in C1. So, I tried setting it up in C1. It runs, but it just gives the HF energy; back. Why? Well, even if we tell the program ""C1"", the system still has; the underlying atomic symmetry (D2H being the highest Abelian subgroup).; Under D2H symmetry, those 3 determinants won't mix, and they don't. Of course, the *true* symmetry of the molecule is atomic symmetry, higher; than D2H. But unfortunately we only have Abelian subgroups in Psi. I am not sure offhand if one could force a mixing by deliberately breaking; the symmetry of the orbitals, or by using a different guess CI vector. I'd; have to think about that a little more. It might be that to do what you; are trying to do and get a fully-spin-adapted multi-configurational; wavefunction, one would need to use actual spherical harmonic atomic; orbitals, not the Cartesian representations p_x, p_y, p_z. On Wed, Jan 8, 2020 at 1:52 PM David Sherrill <prof.david.sherrill@gmail.com>; wrote:. > Hm, nope, that doesn't get around the problem. I'll see if I can take a; > look if I get a minute free later.; >; > On Wed, Jan 8, 2020 at 1:46 PM David Sherrill <; > prof.david.sherrill@gmail.com> wrote:; >; >> This is one of those rare cases where the HF reference actually has some; >> influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; >> computation). The issue is that the code can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043
https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:1017,Energy Efficiency,adapt,adapted,1017,"as written assuming that one wants to find a; wavefunction of a definite irreducible representation. So, within D2H, or; C2H, your 3 determinants have different symmetries. I think the only; subgroup in which they will have the same irrep is if it is run in C1. So, I tried setting it up in C1. It runs, but it just gives the HF energy; back. Why? Well, even if we tell the program ""C1"", the system still has; the underlying atomic symmetry (D2H being the highest Abelian subgroup).; Under D2H symmetry, those 3 determinants won't mix, and they don't. Of course, the *true* symmetry of the molecule is atomic symmetry, higher; than D2H. But unfortunately we only have Abelian subgroups in Psi. I am not sure offhand if one could force a mixing by deliberately breaking; the symmetry of the orbitals, or by using a different guess CI vector. I'd; have to think about that a little more. It might be that to do what you; are trying to do and get a fully-spin-adapted multi-configurational; wavefunction, one would need to use actual spherical harmonic atomic; orbitals, not the Cartesian representations p_x, p_y, p_z. On Wed, Jan 8, 2020 at 1:52 PM David Sherrill <prof.david.sherrill@gmail.com>; wrote:. > Hm, nope, that doesn't get around the problem. I'll see if I can take a; > look if I get a minute free later.; >; > On Wed, Jan 8, 2020 at 1:46 PM David Sherrill <; > prof.david.sherrill@gmail.com> wrote:; >; >> This is one of those rare cases where the HF reference actually has some; >> influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; >> computation). The issue is that the code can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out; >> what you want.; >>; >> On Wed, Jan 8, 2020 at 7:10 AM S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043
https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:2796,Energy Efficiency,energy,energy,2796,"ode can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out; >> what you want.; >>; >> On Wed, Jan 8, 2020 at 7:10 AM Susi Lehtola <notifications@github.com>; >> wrote:; >>; >>> I'm hoping to do atomic MCHF calculations with Psi4, which amount to; >>> small CASSCF calculations. However, I can't get DETCI to run the; >>> calculations for me.; >>>; >>> Take the oxygen atom for example. The 3P state has 4 electrons on the P; >>> shell. DETCI correctly determines that there is 1 alpha string (since the; >>> shell is fully occupied) and 3 beta strings, but then it says that the CI; >>> space only has a single determinant and crashes.; >>>; >>> Example inputs; >>>; >>> molecule {; >>> 0 3; >>> O; >>> }; >>>; >>> set basis cc-pVDZ; >>> set reference rohf; >>> set restricted_docc [2, 0, 0, 0, 0, 0, 0, 0]; >>> set active [0, 0, 0, 0, 0, 1, 1, 1]; >>> energy('casscf'); >>>; >>> or a lower symmetry; >>>; >>> molecule {; >>> symmetry c2h; >>> 0 3; >>> O; >>> }; >>>; >>> set basis cc-pVDZ; >>> set reference rohf; >>> set restricted_docc [2, 0, 0, 0]; >>> set active [0, 0, 1, 2]; >>> energy('casscf'); >>>; >>> I guess the problem is that DETCI can't find a proper symmetry? Is there; >>> a way to circumvent this issue? @CDSherrill; >>> <https://github.com/CDSherrill> ?; >>>; >>> —; >>> You are receiving this because you were mentioned.; >>> Reply to this email directly, view it on GitHub; >>> <https://github.com/psi4/psi4/issues/1778?email_source=notifications&email_token=AAXVA5S35WYJS2NBHZWGQ23Q4W7DBA5CNFSM4KEHMIA2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IEX3GRQ>,; >>> or unsubscribe; >>> <https://github.com/notifications/unsubscribe-auth/AAXVA5TREGCEEDC6ZHCE5EDQ4W7DBANCNFSM4KEHMIAQ>; >>> .; >>>; >>",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043
https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:3029,Energy Efficiency,energy,energy,3029,"ode can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out; >> what you want.; >>; >> On Wed, Jan 8, 2020 at 7:10 AM Susi Lehtola <notifications@github.com>; >> wrote:; >>; >>> I'm hoping to do atomic MCHF calculations with Psi4, which amount to; >>> small CASSCF calculations. However, I can't get DETCI to run the; >>> calculations for me.; >>>; >>> Take the oxygen atom for example. The 3P state has 4 electrons on the P; >>> shell. DETCI correctly determines that there is 1 alpha string (since the; >>> shell is fully occupied) and 3 beta strings, but then it says that the CI; >>> space only has a single determinant and crashes.; >>>; >>> Example inputs; >>>; >>> molecule {; >>> 0 3; >>> O; >>> }; >>>; >>> set basis cc-pVDZ; >>> set reference rohf; >>> set restricted_docc [2, 0, 0, 0, 0, 0, 0, 0]; >>> set active [0, 0, 0, 0, 0, 1, 1, 1]; >>> energy('casscf'); >>>; >>> or a lower symmetry; >>>; >>> molecule {; >>> symmetry c2h; >>> 0 3; >>> O; >>> }; >>>; >>> set basis cc-pVDZ; >>> set reference rohf; >>> set restricted_docc [2, 0, 0, 0]; >>> set active [0, 0, 1, 2]; >>> energy('casscf'); >>>; >>> I guess the problem is that DETCI can't find a proper symmetry? Is there; >>> a way to circumvent this issue? @CDSherrill; >>> <https://github.com/CDSherrill> ?; >>>; >>> —; >>> You are receiving this because you were mentioned.; >>> Reply to this email directly, view it on GitHub; >>> <https://github.com/psi4/psi4/issues/1778?email_source=notifications&email_token=AAXVA5S35WYJS2NBHZWGQ23Q4W7DBA5CNFSM4KEHMIA2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IEX3GRQ>,; >>> or unsubscribe; >>> <https://github.com/notifications/unsubscribe-auth/AAXVA5TREGCEEDC6ZHCE5EDQ4W7DBANCNFSM4KEHMIAQ>; >>> .; >>>; >>",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043
https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:1017,Modifiability,adapt,adapted,1017,"as written assuming that one wants to find a; wavefunction of a definite irreducible representation. So, within D2H, or; C2H, your 3 determinants have different symmetries. I think the only; subgroup in which they will have the same irrep is if it is run in C1. So, I tried setting it up in C1. It runs, but it just gives the HF energy; back. Why? Well, even if we tell the program ""C1"", the system still has; the underlying atomic symmetry (D2H being the highest Abelian subgroup).; Under D2H symmetry, those 3 determinants won't mix, and they don't. Of course, the *true* symmetry of the molecule is atomic symmetry, higher; than D2H. But unfortunately we only have Abelian subgroups in Psi. I am not sure offhand if one could force a mixing by deliberately breaking; the symmetry of the orbitals, or by using a different guess CI vector. I'd; have to think about that a little more. It might be that to do what you; are trying to do and get a fully-spin-adapted multi-configurational; wavefunction, one would need to use actual spherical harmonic atomic; orbitals, not the Cartesian representations p_x, p_y, p_z. On Wed, Jan 8, 2020 at 1:52 PM David Sherrill <prof.david.sherrill@gmail.com>; wrote:. > Hm, nope, that doesn't get around the problem. I'll see if I can take a; > look if I get a minute free later.; >; > On Wed, Jan 8, 2020 at 1:46 PM David Sherrill <; > prof.david.sherrill@gmail.com> wrote:; >; >> This is one of those rare cases where the HF reference actually has some; >> influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; >> computation). The issue is that the code can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out; >> what you want.; >>; >> On Wed, Jan 8, 2020 at 7:10 AM S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043
https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:1031,Modifiability,config,configurational,1031,"as written assuming that one wants to find a; wavefunction of a definite irreducible representation. So, within D2H, or; C2H, your 3 determinants have different symmetries. I think the only; subgroup in which they will have the same irrep is if it is run in C1. So, I tried setting it up in C1. It runs, but it just gives the HF energy; back. Why? Well, even if we tell the program ""C1"", the system still has; the underlying atomic symmetry (D2H being the highest Abelian subgroup).; Under D2H symmetry, those 3 determinants won't mix, and they don't. Of course, the *true* symmetry of the molecule is atomic symmetry, higher; than D2H. But unfortunately we only have Abelian subgroups in Psi. I am not sure offhand if one could force a mixing by deliberately breaking; the symmetry of the orbitals, or by using a different guess CI vector. I'd; have to think about that a little more. It might be that to do what you; are trying to do and get a fully-spin-adapted multi-configurational; wavefunction, one would need to use actual spherical harmonic atomic; orbitals, not the Cartesian representations p_x, p_y, p_z. On Wed, Jan 8, 2020 at 1:52 PM David Sherrill <prof.david.sherrill@gmail.com>; wrote:. > Hm, nope, that doesn't get around the problem. I'll see if I can take a; > look if I get a minute free later.; >; > On Wed, Jan 8, 2020 at 1:46 PM David Sherrill <; > prof.david.sherrill@gmail.com> wrote:; >; >> This is one of those rare cases where the HF reference actually has some; >> influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; >> computation). The issue is that the code can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out; >> what you want.; >>; >> On Wed, Jan 8, 2020 at 7:10 AM S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043
https://github.com/psi4/psi4/pull/1781#issuecomment-575314304:65,Testability,test,tests,65,"I think this all makes sense and the fact that this didn't break tests is pretty impressive (or says something about our test?). I don't thin these is a reason to assume that X is symmetric either. We seem to assume this in some places of the code however, but this should be restricted to the SCF code. It would be good for @andysim/ @jturney to comment on this as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1781#issuecomment-575314304
https://github.com/psi4/psi4/pull/1781#issuecomment-575314304:121,Testability,test,test,121,"I think this all makes sense and the fact that this didn't break tests is pretty impressive (or says something about our test?). I don't thin these is a reason to assume that X is symmetric either. We seem to assume this in some places of the code however, but this should be restricted to the SCF code. It would be good for @andysim/ @jturney to comment on this as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1781#issuecomment-575314304
https://github.com/psi4/psi4/pull/1781#issuecomment-577251659:21,Availability,error,error,21,The ROHF guess==read error is indeed outdated,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1781#issuecomment-577251659
https://github.com/psi4/psi4/issues/1782#issuecomment-575400886:89,Integrability,depend,depends,89,"To answer your probable follow-up question, we hope to have a new Conda package soon. It depends on a tricky bug fix I'm working on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1782#issuecomment-575400886
https://github.com/psi4/psi4/pull/1783#issuecomment-575460073:304,Deployability,release,released,304,This pull request **introduces 1 alert** and **fixes 3** when merging d09ba6e426967fec0428f906a12765be177024b2 into c871e6cc2bff3e4252a19a82c5b49b6e6c6e05de - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6d50e515572122ac6209caa6ed7ad750b20ebbb7). **new alerts:**. * 1 for Resource not released in destructor. **fixed alerts:**. * 3 for Resource not released in destructor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575460073
https://github.com/psi4/psi4/pull/1783#issuecomment-575460073:368,Deployability,release,released,368,This pull request **introduces 1 alert** and **fixes 3** when merging d09ba6e426967fec0428f906a12765be177024b2 into c871e6cc2bff3e4252a19a82c5b49b6e6c6e05de - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6d50e515572122ac6209caa6ed7ad750b20ebbb7). **new alerts:**. * 1 for Resource not released in destructor. **fixed alerts:**. * 3 for Resource not released in destructor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575460073
https://github.com/psi4/psi4/pull/1783#issuecomment-575501992:58,Availability,avail,available,58,"* I think CDS would like to see levelshifting as a widely available convergence strategy. But no need to tack it onto this project.; * The disappearance of the level_shift keyword (for reference, used by dfocc, occ, mcscf) doesn't trouble me much. If `throw_deprecation_errors` can't catch set as global, only way I can think of to emit a warning is to add it back to read_options, then probe in the occ module itself and throw an exception there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575501992
https://github.com/psi4/psi4/pull/1783#issuecomment-575614107:157,Energy Efficiency,energy,energy,157,"For your first point, do you mean damping or level shifting? Remember that ""level shifting"" in `occ` is a misnomer. It has nothing to do with increasing the energy gap between occupied and virtual orbitals but is a _damping_ scheme that scales the diagonal elements of the DIIS B matrix. I was sloppy about this distinction when I first posted this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575614107
https://github.com/psi4/psi4/pull/1783#issuecomment-575627958:55,Usability,clear,clear,55,"Ah, yes, it would require changes to libDIIS. It's not clear to me that it would help, so I agree with removal too - thanks for the clarification",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575627958
https://github.com/psi4/psi4/pull/1783#issuecomment-575663398:286,Deployability,release,released,286,This pull request **fixes 3 alerts** when merging 243f0e3764fcb774adf59ebcf663c642091b9de9 into c871e6cc2bff3e4252a19a82c5b49b6e6c6e05de - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-05ff4a152e1bbfc4cc4f76756181321b72126d42). **fixed alerts:**. * 3 for Resource not released in destructor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575663398
https://github.com/psi4/psi4/pull/1783#issuecomment-575730343:145,Deployability,update,updated,145,"Would it be possible to decouple amplitude and orbital DIIS, i.e. so that the amplitudes get solved at fixed orbitals, and then the orbitals are updated? This would be useful for cases that are hard to converge, as well as active space calculations in large basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575730343
https://github.com/psi4/psi4/pull/1783#issuecomment-575762496:56,Performance,optimiz,optimization,56,"@susilehtola ; You're talking about a different orbital-optimization algorithm. I can organize the code so that it's relatively easy to reuse the ""key pieces"", including DIIS, for different algorithms, but new OCC algorithms are outside the scope of this project. Maybe after I get frozen core energies/gradients working.; I'll also add that the orbital-optimization code isn't centralized, so active space calculations aren't handled by OCC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575762496
https://github.com/psi4/psi4/pull/1783#issuecomment-575762496:354,Performance,optimiz,optimization,354,"@susilehtola ; You're talking about a different orbital-optimization algorithm. I can organize the code so that it's relatively easy to reuse the ""key pieces"", including DIIS, for different algorithms, but new OCC algorithms are outside the scope of this project. Maybe after I get frozen core energies/gradients working.; I'll also add that the orbital-optimization code isn't centralized, so active space calculations aren't handled by OCC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575762496
https://github.com/psi4/psi4/pull/1785#issuecomment-576081766:179,Integrability,depend,depending,179,"The diffs come up clean for every section of variable printing in OCEPA, CEPA, OMP2, OMP3, OMP2.5, MP3, MP2.5, MP2... Numbers vary, unsurprisingly. There's no printing difference depending on closed vs open-shell except for ROHF-MP2. I can't find an ROHF-MP2 test anywhere, so I compared a UHF-MP2 and an ROHF-MP2 calculation. After fixing one silly mistake (see last commit), the diff was exactly what I expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1785#issuecomment-576081766
https://github.com/psi4/psi4/pull/1785#issuecomment-576081766:45,Modifiability,variab,variable,45,"The diffs come up clean for every section of variable printing in OCEPA, CEPA, OMP2, OMP3, OMP2.5, MP3, MP2.5, MP2... Numbers vary, unsurprisingly. There's no printing difference depending on closed vs open-shell except for ROHF-MP2. I can't find an ROHF-MP2 test anywhere, so I compared a UHF-MP2 and an ROHF-MP2 calculation. After fixing one silly mistake (see last commit), the diff was exactly what I expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1785#issuecomment-576081766
https://github.com/psi4/psi4/pull/1785#issuecomment-576081766:259,Testability,test,test,259,"The diffs come up clean for every section of variable printing in OCEPA, CEPA, OMP2, OMP3, OMP2.5, MP3, MP2.5, MP2... Numbers vary, unsurprisingly. There's no printing difference depending on closed vs open-shell except for ROHF-MP2. I can't find an ROHF-MP2 test anywhere, so I compared a UHF-MP2 and an ROHF-MP2 calculation. After fixing one silly mistake (see last commit), the diff was exactly what I expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1785#issuecomment-576081766
https://github.com/psi4/psi4/pull/1786#issuecomment-576896216:289,Modifiability,variab,variable,289,This pull request **introduces 2 alerts** when merging 7f8117aaddecbcd3cebf1cc3d8505d580212fe9e into 4a03175edbda6213e73e429eca4908872876bfb6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-67df4c7a1685c696e0af1bbb3ccbcd977f92a80e). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1786#issuecomment-576896216
https://github.com/psi4/psi4/pull/1786#issuecomment-582452220:289,Modifiability,variab,variable,289,This pull request **introduces 3 alerts** when merging 1f3386888ecd01eb5e6fc077cbbee2c7901b391f into d7335d5ddb64071c10f72b320ab253c79ede91b7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0f7ac36ab9adb2e8c9b5ebda16627b17f34217ec). **new alerts:**. * 2 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1786#issuecomment-582452220
https://github.com/psi4/psi4/issues/1788#issuecomment-578132699:75,Deployability,upgrade,upgrade,75,"@Diazonium, you are right. Is there any way can solve this problem without upgrade?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1788#issuecomment-578132699
https://github.com/psi4/psi4/pull/1789#issuecomment-578806742:395,Deployability,update,updates,395,"Forewarning that the [documentation in occ/dfocc](http://www.psicode.org/psi4manual/master/occ.html#) needed reworking even _before_ this commit, and it certainly will afterwards. I'll hold off on rewriting that (and updating the `driver.energy` docstring) until the rest of the PR looks good. How I decide to rewrite the manual will depend on if I need to make other changes, and the docstring updates will depend on the manual changes... Aren't dependencies fun?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742
https://github.com/psi4/psi4/pull/1789#issuecomment-578806742:238,Energy Efficiency,energy,energy,238,"Forewarning that the [documentation in occ/dfocc](http://www.psicode.org/psi4manual/master/occ.html#) needed reworking even _before_ this commit, and it certainly will afterwards. I'll hold off on rewriting that (and updating the `driver.energy` docstring) until the rest of the PR looks good. How I decide to rewrite the manual will depend on if I need to make other changes, and the docstring updates will depend on the manual changes... Aren't dependencies fun?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742
https://github.com/psi4/psi4/pull/1789#issuecomment-578806742:334,Integrability,depend,depend,334,"Forewarning that the [documentation in occ/dfocc](http://www.psicode.org/psi4manual/master/occ.html#) needed reworking even _before_ this commit, and it certainly will afterwards. I'll hold off on rewriting that (and updating the `driver.energy` docstring) until the rest of the PR looks good. How I decide to rewrite the manual will depend on if I need to make other changes, and the docstring updates will depend on the manual changes... Aren't dependencies fun?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742
https://github.com/psi4/psi4/pull/1789#issuecomment-578806742:408,Integrability,depend,depend,408,"Forewarning that the [documentation in occ/dfocc](http://www.psicode.org/psi4manual/master/occ.html#) needed reworking even _before_ this commit, and it certainly will afterwards. I'll hold off on rewriting that (and updating the `driver.energy` docstring) until the rest of the PR looks good. How I decide to rewrite the manual will depend on if I need to make other changes, and the docstring updates will depend on the manual changes... Aren't dependencies fun?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742
https://github.com/psi4/psi4/pull/1789#issuecomment-578806742:447,Integrability,depend,dependencies,447,"Forewarning that the [documentation in occ/dfocc](http://www.psicode.org/psi4manual/master/occ.html#) needed reworking even _before_ this commit, and it certainly will afterwards. I'll hold off on rewriting that (and updating the `driver.energy` docstring) until the rest of the PR looks good. How I decide to rewrite the manual will depend on if I need to make other changes, and the docstring updates will depend on the manual changes... Aren't dependencies fun?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742
https://github.com/psi4/psi4/pull/1789#issuecomment-578806742:310,Modifiability,rewrite,rewrite,310,"Forewarning that the [documentation in occ/dfocc](http://www.psicode.org/psi4manual/master/occ.html#) needed reworking even _before_ this commit, and it certainly will afterwards. I'll hold off on rewriting that (and updating the `driver.energy` docstring) until the rest of the PR looks good. How I decide to rewrite the manual will depend on if I need to make other changes, and the docstring updates will depend on the manual changes... Aren't dependencies fun?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742
https://github.com/psi4/psi4/pull/1789#issuecomment-581087208:243,Integrability,wrap,wrap,243,"One final logistical point before I head off for the night: my current plan is to make these changes and commit those. If you are willing to add `occ`/`dfocc` documentation and docstring changes to your to-do list, I say we can call this PR a wrap so I can slay the behemoth that is orbital convergence. If you don't have time for that, I can take documentation on, but that will delay getting orbital convergence fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581087208
https://github.com/psi4/psi4/pull/1789#issuecomment-581087208:10,Testability,log,logistical,10,"One final logistical point before I head off for the night: my current plan is to make these changes and commit those. If you are willing to add `occ`/`dfocc` documentation and docstring changes to your to-do list, I say we can call this PR a wrap so I can slay the behemoth that is orbital convergence. If you don't have time for that, I can take documentation on, but that will delay getting orbital convergence fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581087208
https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:98,Deployability,update,updated,98,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412
https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:161,Deployability,update,updated,161,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412
https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:69,Energy Efficiency,energy,energy,69,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412
https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:1004,Modifiability,variab,variables,1004,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412
https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:1182,Modifiability,variab,variables,1182,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412
https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:1138,Performance,optimiz,optimization,1138,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412
https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:887,Safety,redund,redundancy,887,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412
https://github.com/psi4/psi4/pull/1789#issuecomment-581627355:141,Energy Efficiency,ENERGY,ENERGY,141,"In my view, the most important variables that get set in OCC are the `[SAME-SPIN|OPPOSITE-SPIN|SINGLES] [|O][MP2|MP3|MP2.5|LCCD] CORRELATION ENERGY`] ones both now and in future because all others can be constructed from these. yes, I think in future the main printing from OCC could be moved py-side, especially for quantities like SCS that OCC does nothing further with internally. I broadly plan that OCC would set the above variables and any totals that it likes, that OCC would print c-side the main energies that it's dealing with, then in proc.py, the return variables get sent to qcdb to be composed into `SCS(N)-MP2 TOTAL ENERGY` and anything else for which input pieces are present. the key thing about qcdb qcvar composition is that it also checks to make sure the SCS(N) built from components equals any SCS(N) passed in whole so ensures that OCC and qcdb are using the same definitions. I don't want to delete OCC's definitions before this check is active. So that plus leaving Ugur's printing mostly undisrupted is why I figured this could be put off. > If so, then the correct solution to the spin-redundancy problem is to eliminate the spin-component variables from occ. Are you meaning SCS(N) or SAME-/OPPOSITE-SPIN variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355
https://github.com/psi4/psi4/pull/1789#issuecomment-581627355:631,Energy Efficiency,ENERGY,ENERGY,631,"In my view, the most important variables that get set in OCC are the `[SAME-SPIN|OPPOSITE-SPIN|SINGLES] [|O][MP2|MP3|MP2.5|LCCD] CORRELATION ENERGY`] ones both now and in future because all others can be constructed from these. yes, I think in future the main printing from OCC could be moved py-side, especially for quantities like SCS that OCC does nothing further with internally. I broadly plan that OCC would set the above variables and any totals that it likes, that OCC would print c-side the main energies that it's dealing with, then in proc.py, the return variables get sent to qcdb to be composed into `SCS(N)-MP2 TOTAL ENERGY` and anything else for which input pieces are present. the key thing about qcdb qcvar composition is that it also checks to make sure the SCS(N) built from components equals any SCS(N) passed in whole so ensures that OCC and qcdb are using the same definitions. I don't want to delete OCC's definitions before this check is active. So that plus leaving Ugur's printing mostly undisrupted is why I figured this could be put off. > If so, then the correct solution to the spin-redundancy problem is to eliminate the spin-component variables from occ. Are you meaning SCS(N) or SAME-/OPPOSITE-SPIN variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355
https://github.com/psi4/psi4/pull/1789#issuecomment-581627355:31,Modifiability,variab,variables,31,"In my view, the most important variables that get set in OCC are the `[SAME-SPIN|OPPOSITE-SPIN|SINGLES] [|O][MP2|MP3|MP2.5|LCCD] CORRELATION ENERGY`] ones both now and in future because all others can be constructed from these. yes, I think in future the main printing from OCC could be moved py-side, especially for quantities like SCS that OCC does nothing further with internally. I broadly plan that OCC would set the above variables and any totals that it likes, that OCC would print c-side the main energies that it's dealing with, then in proc.py, the return variables get sent to qcdb to be composed into `SCS(N)-MP2 TOTAL ENERGY` and anything else for which input pieces are present. the key thing about qcdb qcvar composition is that it also checks to make sure the SCS(N) built from components equals any SCS(N) passed in whole so ensures that OCC and qcdb are using the same definitions. I don't want to delete OCC's definitions before this check is active. So that plus leaving Ugur's printing mostly undisrupted is why I figured this could be put off. > If so, then the correct solution to the spin-redundancy problem is to eliminate the spin-component variables from occ. Are you meaning SCS(N) or SAME-/OPPOSITE-SPIN variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355
https://github.com/psi4/psi4/pull/1789#issuecomment-581627355:428,Modifiability,variab,variables,428,"In my view, the most important variables that get set in OCC are the `[SAME-SPIN|OPPOSITE-SPIN|SINGLES] [|O][MP2|MP3|MP2.5|LCCD] CORRELATION ENERGY`] ones both now and in future because all others can be constructed from these. yes, I think in future the main printing from OCC could be moved py-side, especially for quantities like SCS that OCC does nothing further with internally. I broadly plan that OCC would set the above variables and any totals that it likes, that OCC would print c-side the main energies that it's dealing with, then in proc.py, the return variables get sent to qcdb to be composed into `SCS(N)-MP2 TOTAL ENERGY` and anything else for which input pieces are present. the key thing about qcdb qcvar composition is that it also checks to make sure the SCS(N) built from components equals any SCS(N) passed in whole so ensures that OCC and qcdb are using the same definitions. I don't want to delete OCC's definitions before this check is active. So that plus leaving Ugur's printing mostly undisrupted is why I figured this could be put off. > If so, then the correct solution to the spin-redundancy problem is to eliminate the spin-component variables from occ. Are you meaning SCS(N) or SAME-/OPPOSITE-SPIN variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355
https://github.com/psi4/psi4/pull/1789#issuecomment-581627355:566,Modifiability,variab,variables,566,"In my view, the most important variables that get set in OCC are the `[SAME-SPIN|OPPOSITE-SPIN|SINGLES] [|O][MP2|MP3|MP2.5|LCCD] CORRELATION ENERGY`] ones both now and in future because all others can be constructed from these. yes, I think in future the main printing from OCC could be moved py-side, especially for quantities like SCS that OCC does nothing further with internally. I broadly plan that OCC would set the above variables and any totals that it likes, that OCC would print c-side the main energies that it's dealing with, then in proc.py, the return variables get sent to qcdb to be composed into `SCS(N)-MP2 TOTAL ENERGY` and anything else for which input pieces are present. the key thing about qcdb qcvar composition is that it also checks to make sure the SCS(N) built from components equals any SCS(N) passed in whole so ensures that OCC and qcdb are using the same definitions. I don't want to delete OCC's definitions before this check is active. So that plus leaving Ugur's printing mostly undisrupted is why I figured this could be put off. > If so, then the correct solution to the spin-redundancy problem is to eliminate the spin-component variables from occ. Are you meaning SCS(N) or SAME-/OPPOSITE-SPIN variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355
https://github.com/psi4/psi4/pull/1789#issuecomment-581627355:1167,Modifiability,variab,variables,1167,"In my view, the most important variables that get set in OCC are the `[SAME-SPIN|OPPOSITE-SPIN|SINGLES] [|O][MP2|MP3|MP2.5|LCCD] CORRELATION ENERGY`] ones both now and in future because all others can be constructed from these. yes, I think in future the main printing from OCC could be moved py-side, especially for quantities like SCS that OCC does nothing further with internally. I broadly plan that OCC would set the above variables and any totals that it likes, that OCC would print c-side the main energies that it's dealing with, then in proc.py, the return variables get sent to qcdb to be composed into `SCS(N)-MP2 TOTAL ENERGY` and anything else for which input pieces are present. the key thing about qcdb qcvar composition is that it also checks to make sure the SCS(N) built from components equals any SCS(N) passed in whole so ensures that OCC and qcdb are using the same definitions. I don't want to delete OCC's definitions before this check is active. So that plus leaving Ugur's printing mostly undisrupted is why I figured this could be put off. > If so, then the correct solution to the spin-redundancy problem is to eliminate the spin-component variables from occ. Are you meaning SCS(N) or SAME-/OPPOSITE-SPIN variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355
https://github.com/psi4/psi4/pull/1789#issuecomment-581627355:1233,Modifiability,variab,variables,1233,"In my view, the most important variables that get set in OCC are the `[SAME-SPIN|OPPOSITE-SPIN|SINGLES] [|O][MP2|MP3|MP2.5|LCCD] CORRELATION ENERGY`] ones both now and in future because all others can be constructed from these. yes, I think in future the main printing from OCC could be moved py-side, especially for quantities like SCS that OCC does nothing further with internally. I broadly plan that OCC would set the above variables and any totals that it likes, that OCC would print c-side the main energies that it's dealing with, then in proc.py, the return variables get sent to qcdb to be composed into `SCS(N)-MP2 TOTAL ENERGY` and anything else for which input pieces are present. the key thing about qcdb qcvar composition is that it also checks to make sure the SCS(N) built from components equals any SCS(N) passed in whole so ensures that OCC and qcdb are using the same definitions. I don't want to delete OCC's definitions before this check is active. So that plus leaving Ugur's printing mostly undisrupted is why I figured this could be put off. > If so, then the correct solution to the spin-redundancy problem is to eliminate the spin-component variables from occ. Are you meaning SCS(N) or SAME-/OPPOSITE-SPIN variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355
https://github.com/psi4/psi4/pull/1789#issuecomment-581627355:1113,Safety,redund,redundancy,1113,"In my view, the most important variables that get set in OCC are the `[SAME-SPIN|OPPOSITE-SPIN|SINGLES] [|O][MP2|MP3|MP2.5|LCCD] CORRELATION ENERGY`] ones both now and in future because all others can be constructed from these. yes, I think in future the main printing from OCC could be moved py-side, especially for quantities like SCS that OCC does nothing further with internally. I broadly plan that OCC would set the above variables and any totals that it likes, that OCC would print c-side the main energies that it's dealing with, then in proc.py, the return variables get sent to qcdb to be composed into `SCS(N)-MP2 TOTAL ENERGY` and anything else for which input pieces are present. the key thing about qcdb qcvar composition is that it also checks to make sure the SCS(N) built from components equals any SCS(N) passed in whole so ensures that OCC and qcdb are using the same definitions. I don't want to delete OCC's definitions before this check is active. So that plus leaving Ugur's printing mostly undisrupted is why I figured this could be put off. > If so, then the correct solution to the spin-redundancy problem is to eliminate the spin-component variables from occ. Are you meaning SCS(N) or SAME-/OPPOSITE-SPIN variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355
https://github.com/psi4/psi4/pull/1789#issuecomment-581686480:28,Modifiability,variab,variables,28,"I _was_ meaning SCS(N)-type variables, but after reading your comments, I've changed my mind again. While the number of spin-related variables on OCC's wavefunction object is _bad_, defining the same quantities multiple times throughout OCC is _worse_. That risks inconsistencies in the definitions and is another thing you need to check for when moving to qcdb. So the current plan (which is what I'll go with pending your objections) is to just use the variables already saved to OCC rather than re-computing them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581686480
https://github.com/psi4/psi4/pull/1789#issuecomment-581686480:133,Modifiability,variab,variables,133,"I _was_ meaning SCS(N)-type variables, but after reading your comments, I've changed my mind again. While the number of spin-related variables on OCC's wavefunction object is _bad_, defining the same quantities multiple times throughout OCC is _worse_. That risks inconsistencies in the definitions and is another thing you need to check for when moving to qcdb. So the current plan (which is what I'll go with pending your objections) is to just use the variables already saved to OCC rather than re-computing them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581686480
https://github.com/psi4/psi4/pull/1789#issuecomment-581686480:455,Modifiability,variab,variables,455,"I _was_ meaning SCS(N)-type variables, but after reading your comments, I've changed my mind again. While the number of spin-related variables on OCC's wavefunction object is _bad_, defining the same quantities multiple times throughout OCC is _worse_. That risks inconsistencies in the definitions and is another thing you need to check for when moving to qcdb. So the current plan (which is what I'll go with pending your objections) is to just use the variables already saved to OCC rather than re-computing them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581686480
https://github.com/psi4/psi4/pull/1789#issuecomment-581686480:258,Safety,risk,risks,258,"I _was_ meaning SCS(N)-type variables, but after reading your comments, I've changed my mind again. While the number of spin-related variables on OCC's wavefunction object is _bad_, defining the same quantities multiple times throughout OCC is _worse_. That risks inconsistencies in the definitions and is another thing you need to check for when moving to qcdb. So the current plan (which is what I'll go with pending your objections) is to just use the variables already saved to OCC rather than re-computing them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581686480
https://github.com/psi4/psi4/pull/1789#issuecomment-581700316:150,Availability,failure,failure,150,"...And unfortunately, one more wrinkle. Upon deleting the remaining `P::e.globals`, we lose the`SCS-OMP3 TOTAL ENERGY` variable, causing a quick test failure. When you said ""kill off all the remaining P::e.globals"", did you mean _turn them into `variables_`, or did you mean _delete the lines, and remove any reference to them in tests_? There is nothing in`proc.py` to reconstruct the missing variables.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581700316
https://github.com/psi4/psi4/pull/1789#issuecomment-581700316:111,Energy Efficiency,ENERGY,ENERGY,111,"...And unfortunately, one more wrinkle. Upon deleting the remaining `P::e.globals`, we lose the`SCS-OMP3 TOTAL ENERGY` variable, causing a quick test failure. When you said ""kill off all the remaining P::e.globals"", did you mean _turn them into `variables_`, or did you mean _delete the lines, and remove any reference to them in tests_? There is nothing in`proc.py` to reconstruct the missing variables.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581700316
https://github.com/psi4/psi4/pull/1789#issuecomment-581700316:119,Modifiability,variab,variable,119,"...And unfortunately, one more wrinkle. Upon deleting the remaining `P::e.globals`, we lose the`SCS-OMP3 TOTAL ENERGY` variable, causing a quick test failure. When you said ""kill off all the remaining P::e.globals"", did you mean _turn them into `variables_`, or did you mean _delete the lines, and remove any reference to them in tests_? There is nothing in`proc.py` to reconstruct the missing variables.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581700316
https://github.com/psi4/psi4/pull/1789#issuecomment-581700316:394,Modifiability,variab,variables,394,"...And unfortunately, one more wrinkle. Upon deleting the remaining `P::e.globals`, we lose the`SCS-OMP3 TOTAL ENERGY` variable, causing a quick test failure. When you said ""kill off all the remaining P::e.globals"", did you mean _turn them into `variables_`, or did you mean _delete the lines, and remove any reference to them in tests_? There is nothing in`proc.py` to reconstruct the missing variables.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581700316
https://github.com/psi4/psi4/pull/1789#issuecomment-581700316:145,Testability,test,test,145,"...And unfortunately, one more wrinkle. Upon deleting the remaining `P::e.globals`, we lose the`SCS-OMP3 TOTAL ENERGY` variable, causing a quick test failure. When you said ""kill off all the remaining P::e.globals"", did you mean _turn them into `variables_`, or did you mean _delete the lines, and remove any reference to them in tests_? There is nothing in`proc.py` to reconstruct the missing variables.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581700316
https://github.com/psi4/psi4/pull/1789#issuecomment-581705172:45,Testability,test,tests,45,"That should be everything now, thanks. Quick tests still pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581705172
https://github.com/psi4/psi4/pull/1789#issuecomment-582496652:59,Modifiability,variab,variables,59,"`mp2_test.py` changed by no longer looking for custom spin variables when custom spin wasn't set, but that was all. Now that this is in, time for the Big One...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-582496652
https://github.com/psi4/psi4/pull/1790#issuecomment-579879121:289,Modifiability,variab,variable,289,This pull request **introduces 3 alerts** when merging aabc56bc7dea931923051a71869c61a307a378fc into 65c0921213e6fe2979733f6c316915f79051f558 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-1e86035bc1a97349519dd611e05008e910588cff). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1790#issuecomment-579879121
https://github.com/psi4/psi4/issues/1791#issuecomment-580181993:88,Availability,fault,faulty,88,Thank you for the report. The issue persists with the current development version.; The faulty module is `fnocc`. ; I suspect the error is in the re-computation of the one-electron integrals in the DF-CCSD algorithm (https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L714),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-580181993
https://github.com/psi4/psi4/issues/1791#issuecomment-580181993:130,Availability,error,error,130,Thank you for the report. The issue persists with the current development version.; The faulty module is `fnocc`. ; I suspect the error is in the re-computation of the one-electron integrals in the DF-CCSD algorithm (https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L714),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-580181993
https://github.com/psi4/psi4/issues/1791#issuecomment-580235446:25,Availability,Ping,Pinging,25,That would likely do it. Pinging @fevangelista since this is relevant to #1770.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-580235446
https://github.com/psi4/psi4/issues/1791#issuecomment-580401788:270,Energy Efficiency,energy,energy,270,The remaining problem would be that `H` is recalculated manually by directly calling [so_potential](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L1261) that only knows about DKH and not X2C. ; That means X2C is only included in the SCF energy and not in the Fock matrix in DF/CD-(FNO)-CC.; X2C did not crash the calculation. Either `H` is taken from the SCF wavefunction object like done elsewhere (e.g in [dfocc](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/get_moinfo.cc#L367) or the X2C potential needs to be added somehow. Direct use of `so_potential` is done here (as far as I could find):; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/frozen_natural_orbitals.cc#L1039; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L714. The other occurrence I found is in the SCF template: https://github.com/psi4/psi4/blob/master/psi4/share/psi4/plugin/scf/scf.cc.template,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-580401788
https://github.com/psi4/psi4/issues/1791#issuecomment-580401788:929,Modifiability,plugin,plugin,929,The remaining problem would be that `H` is recalculated manually by directly calling [so_potential](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L1261) that only knows about DKH and not X2C. ; That means X2C is only included in the SCF energy and not in the Fock matrix in DF/CD-(FNO)-CC.; X2C did not crash the calculation. Either `H` is taken from the SCF wavefunction object like done elsewhere (e.g in [dfocc](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/get_moinfo.cc#L367) or the X2C potential needs to be added somehow. Direct use of `so_potential` is done here (as far as I could find):; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/frozen_natural_orbitals.cc#L1039; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L714. The other occurrence I found is in the SCF template: https://github.com/psi4/psi4/blob/master/psi4/share/psi4/plugin/scf/scf.cc.template,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-580401788
https://github.com/psi4/psi4/issues/1791#issuecomment-582019360:93,Testability,test,test,93,Ah! I wasn't aware of all the changes introduced by #1770. My point has been addressed.; The test calculation does not crash and relativistic effects are included where they should be.; I tested DKH and X2C. This can be closed unless @ludgerpalm has another comment/question to the topic?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-582019360
https://github.com/psi4/psi4/issues/1791#issuecomment-582019360:188,Testability,test,tested,188,Ah! I wasn't aware of all the changes introduced by #1770. My point has been addressed.; The test calculation does not crash and relativistic effects are included where they should be.; I tested DKH and X2C. This can be closed unless @ludgerpalm has another comment/question to the topic?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-582019360
https://github.com/psi4/psi4/issues/1791#issuecomment-582050346:322,Testability,test,test,322,"No, I don't have any other comment. I can hardly follow your conversation ;-); Thanks for your efforts!. > Am 04.02.2020 um 18:19 schrieb Holger Kruse <notifications@github.com>:; > ; > Ah! I wasn't aware of all the changes introduced by #1770 <https://github.com/psi4/psi4/pull/1770>. My point has been addressed.; > The test calculation does not crash and relativistic effects are included where they should be.; > I tested DKH and X2C.; > ; > This can be closed unless @ludgerpalm <https://github.com/ludgerpalm> has another comment/question to the topic?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/1791?email_source=notifications&email_token=AONKCKFUAWDAESNBZ5RAYNDRBGPRFA5CNFSM4KNSN4LKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEKYOSIA#issuecomment-582019360>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AONKCKGEQ6YJT4U5MX7YI73RBGPRFANCNFSM4KNSN4LA>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-582050346
https://github.com/psi4/psi4/issues/1791#issuecomment-582050346:419,Testability,test,tested,419,"No, I don't have any other comment. I can hardly follow your conversation ;-); Thanks for your efforts!. > Am 04.02.2020 um 18:19 schrieb Holger Kruse <notifications@github.com>:; > ; > Ah! I wasn't aware of all the changes introduced by #1770 <https://github.com/psi4/psi4/pull/1770>. My point has been addressed.; > The test calculation does not crash and relativistic effects are included where they should be.; > I tested DKH and X2C.; > ; > This can be closed unless @ludgerpalm <https://github.com/ludgerpalm> has another comment/question to the topic?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/1791?email_source=notifications&email_token=AONKCKFUAWDAESNBZ5RAYNDRBGPRFA5CNFSM4KNSN4LKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEKYOSIA#issuecomment-582019360>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AONKCKGEQ6YJT4U5MX7YI73RBGPRFANCNFSM4KNSN4LA>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-582050346
https://github.com/psi4/psi4/issues/1792#issuecomment-580240271:8,Deployability,update,update,8,"You can update the operating system, though :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-580240271
https://github.com/psi4/psi4/issues/1792#issuecomment-607181717:101,Availability,mainten,maintenance,101,"@susilehtola Thank you for the explanation. Given that we want to run psi4 run on clusters where the maintenance is done by people holding permanent positions, it is quite difficult to have them do anything. I wonder if you can suggest the oldest kernel version that I can purpose them to update to? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607181717
https://github.com/psi4/psi4/issues/1792#issuecomment-607181717:289,Deployability,update,update,289,"@susilehtola Thank you for the explanation. Given that we want to run psi4 run on clusters where the maintenance is done by people holding permanent positions, it is quite difficult to have them do anything. I wonder if you can suggest the oldest kernel version that I can purpose them to update to? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607181717
https://github.com/psi4/psi4/issues/1792#issuecomment-607278556:23,Deployability,release,release,23,"It looks like [SL6 was release back in 2011 and is going to be end-of-life later this year](https://en.wikipedia.org/wiki/Scientific_Linux). Upgrading to SL7 (released 2014) should give the sys admins a familiar environment and it looks like it comes with glibc 2.17, which is known to work for Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607278556
https://github.com/psi4/psi4/issues/1792#issuecomment-607278556:159,Deployability,release,released,159,"It looks like [SL6 was release back in 2011 and is going to be end-of-life later this year](https://en.wikipedia.org/wiki/Scientific_Linux). Upgrading to SL7 (released 2014) should give the sys admins a familiar environment and it looks like it comes with glibc 2.17, which is known to work for Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607278556
https://github.com/psi4/psi4/issues/1792#issuecomment-607282725:176,Testability,test,test,176,It could be helpful to know what `ldd -v <prefix>/lib/python3.<x>/site-packages/psi4/core*so` (approximate path) produces. And if the segfault was immediate or on a particular test (I learned recently that `gcp` exe unnecessarily used too high a glibc).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607282725
https://github.com/psi4/psi4/issues/1792#issuecomment-607282725:184,Usability,learn,learned,184,It could be helpful to know what `ldd -v <prefix>/lib/python3.<x>/site-packages/psi4/core*so` (approximate path) produces. And if the segfault was immediate or on a particular test (I learned recently that `gcp` exe unnecessarily used too high a glibc).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607282725
https://github.com/psi4/psi4/issues/1792#issuecomment-607346549:137,Availability,avail,available,137,"@xiki-tempula there's more to the OS than just the kernel. Like @andysim said, EL7 would be a better option. EL6 is ancient. EL8 is also available, so if a reinstall is necessary then going straight to EL8 is an option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607346549
https://github.com/psi4/psi4/issues/1792#issuecomment-607347442:54,Availability,mainten,maintenance,54,Thanks for all the help. I will see if I can push the maintenance to install SL7.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607347442
https://github.com/psi4/psi4/issues/1792#issuecomment-607347442:69,Deployability,install,install,69,Thanks for all the help. I will see if I can push the maintenance to install SL7.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607347442
https://github.com/psi4/psi4/issues/1793#issuecomment-581033462:140,Availability,failure,failures,140,"Thanks for making this into a written issue. This was discussed on Slack over a week ago, but not everyone may have seen it. All those test failures trace back to a ""delicate"" part of the OCC module. It has very slow orbital convergence. I [updated the default orbital convergence criteria in OCC to be the same as in DFOCC](https://github.com/psi4/psi4/pull/1772/commits/896a7c22be5c72542b8773ca2a1b9164dee1fc2a), and for all the failing test cases, OCC simply can't converge the orbitals that tightly. You can see the issue about the OCC problem [here](https://github.com/psi4/psi4/issues/1777). It traces back to OCC not coupling orbital and T2 amplitude DIIS, when in my experience, coupling them is crucial for good convergence. I'm in the process of fixing that, but it's slow. A lot of junk in the OCC module needed to be cleaned out to make the code less confusing before I can start making the actual fix. If you want to move that along, you can help by reviewing [the current cleanup PR](https://github.com/psi4/psi4/pull/1789). I wanted to wait to write the next and final PR in the series until that one was accepted, but I may need to start on that now. Until that final PR gets in, we don't have conda builds and certainly can't have the next release. As you're probably wondering about this, these changes are also necessary for a paper I want submitted before I leave CCQC. While I'm quite unhappy these changes needed to be done, that they are made is useful for me personally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462
https://github.com/psi4/psi4/issues/1793#issuecomment-581033462:241,Deployability,update,updated,241,"Thanks for making this into a written issue. This was discussed on Slack over a week ago, but not everyone may have seen it. All those test failures trace back to a ""delicate"" part of the OCC module. It has very slow orbital convergence. I [updated the default orbital convergence criteria in OCC to be the same as in DFOCC](https://github.com/psi4/psi4/pull/1772/commits/896a7c22be5c72542b8773ca2a1b9164dee1fc2a), and for all the failing test cases, OCC simply can't converge the orbitals that tightly. You can see the issue about the OCC problem [here](https://github.com/psi4/psi4/issues/1777). It traces back to OCC not coupling orbital and T2 amplitude DIIS, when in my experience, coupling them is crucial for good convergence. I'm in the process of fixing that, but it's slow. A lot of junk in the OCC module needed to be cleaned out to make the code less confusing before I can start making the actual fix. If you want to move that along, you can help by reviewing [the current cleanup PR](https://github.com/psi4/psi4/pull/1789). I wanted to wait to write the next and final PR in the series until that one was accepted, but I may need to start on that now. Until that final PR gets in, we don't have conda builds and certainly can't have the next release. As you're probably wondering about this, these changes are also necessary for a paper I want submitted before I leave CCQC. While I'm quite unhappy these changes needed to be done, that they are made is useful for me personally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462
https://github.com/psi4/psi4/issues/1793#issuecomment-581033462:1257,Deployability,release,release,1257,"Thanks for making this into a written issue. This was discussed on Slack over a week ago, but not everyone may have seen it. All those test failures trace back to a ""delicate"" part of the OCC module. It has very slow orbital convergence. I [updated the default orbital convergence criteria in OCC to be the same as in DFOCC](https://github.com/psi4/psi4/pull/1772/commits/896a7c22be5c72542b8773ca2a1b9164dee1fc2a), and for all the failing test cases, OCC simply can't converge the orbitals that tightly. You can see the issue about the OCC problem [here](https://github.com/psi4/psi4/issues/1777). It traces back to OCC not coupling orbital and T2 amplitude DIIS, when in my experience, coupling them is crucial for good convergence. I'm in the process of fixing that, but it's slow. A lot of junk in the OCC module needed to be cleaned out to make the code less confusing before I can start making the actual fix. If you want to move that along, you can help by reviewing [the current cleanup PR](https://github.com/psi4/psi4/pull/1789). I wanted to wait to write the next and final PR in the series until that one was accepted, but I may need to start on that now. Until that final PR gets in, we don't have conda builds and certainly can't have the next release. As you're probably wondering about this, these changes are also necessary for a paper I want submitted before I leave CCQC. While I'm quite unhappy these changes needed to be done, that they are made is useful for me personally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462
https://github.com/psi4/psi4/issues/1793#issuecomment-581033462:624,Modifiability,coupling,coupling,624,"Thanks for making this into a written issue. This was discussed on Slack over a week ago, but not everyone may have seen it. All those test failures trace back to a ""delicate"" part of the OCC module. It has very slow orbital convergence. I [updated the default orbital convergence criteria in OCC to be the same as in DFOCC](https://github.com/psi4/psi4/pull/1772/commits/896a7c22be5c72542b8773ca2a1b9164dee1fc2a), and for all the failing test cases, OCC simply can't converge the orbitals that tightly. You can see the issue about the OCC problem [here](https://github.com/psi4/psi4/issues/1777). It traces back to OCC not coupling orbital and T2 amplitude DIIS, when in my experience, coupling them is crucial for good convergence. I'm in the process of fixing that, but it's slow. A lot of junk in the OCC module needed to be cleaned out to make the code less confusing before I can start making the actual fix. If you want to move that along, you can help by reviewing [the current cleanup PR](https://github.com/psi4/psi4/pull/1789). I wanted to wait to write the next and final PR in the series until that one was accepted, but I may need to start on that now. Until that final PR gets in, we don't have conda builds and certainly can't have the next release. As you're probably wondering about this, these changes are also necessary for a paper I want submitted before I leave CCQC. While I'm quite unhappy these changes needed to be done, that they are made is useful for me personally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462
https://github.com/psi4/psi4/issues/1793#issuecomment-581033462:687,Modifiability,coupling,coupling,687,"Thanks for making this into a written issue. This was discussed on Slack over a week ago, but not everyone may have seen it. All those test failures trace back to a ""delicate"" part of the OCC module. It has very slow orbital convergence. I [updated the default orbital convergence criteria in OCC to be the same as in DFOCC](https://github.com/psi4/psi4/pull/1772/commits/896a7c22be5c72542b8773ca2a1b9164dee1fc2a), and for all the failing test cases, OCC simply can't converge the orbitals that tightly. You can see the issue about the OCC problem [here](https://github.com/psi4/psi4/issues/1777). It traces back to OCC not coupling orbital and T2 amplitude DIIS, when in my experience, coupling them is crucial for good convergence. I'm in the process of fixing that, but it's slow. A lot of junk in the OCC module needed to be cleaned out to make the code less confusing before I can start making the actual fix. If you want to move that along, you can help by reviewing [the current cleanup PR](https://github.com/psi4/psi4/pull/1789). I wanted to wait to write the next and final PR in the series until that one was accepted, but I may need to start on that now. Until that final PR gets in, we don't have conda builds and certainly can't have the next release. As you're probably wondering about this, these changes are also necessary for a paper I want submitted before I leave CCQC. While I'm quite unhappy these changes needed to be done, that they are made is useful for me personally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462
https://github.com/psi4/psi4/issues/1793#issuecomment-581033462:135,Testability,test,test,135,"Thanks for making this into a written issue. This was discussed on Slack over a week ago, but not everyone may have seen it. All those test failures trace back to a ""delicate"" part of the OCC module. It has very slow orbital convergence. I [updated the default orbital convergence criteria in OCC to be the same as in DFOCC](https://github.com/psi4/psi4/pull/1772/commits/896a7c22be5c72542b8773ca2a1b9164dee1fc2a), and for all the failing test cases, OCC simply can't converge the orbitals that tightly. You can see the issue about the OCC problem [here](https://github.com/psi4/psi4/issues/1777). It traces back to OCC not coupling orbital and T2 amplitude DIIS, when in my experience, coupling them is crucial for good convergence. I'm in the process of fixing that, but it's slow. A lot of junk in the OCC module needed to be cleaned out to make the code less confusing before I can start making the actual fix. If you want to move that along, you can help by reviewing [the current cleanup PR](https://github.com/psi4/psi4/pull/1789). I wanted to wait to write the next and final PR in the series until that one was accepted, but I may need to start on that now. Until that final PR gets in, we don't have conda builds and certainly can't have the next release. As you're probably wondering about this, these changes are also necessary for a paper I want submitted before I leave CCQC. While I'm quite unhappy these changes needed to be done, that they are made is useful for me personally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462
https://github.com/psi4/psi4/issues/1793#issuecomment-581033462:439,Testability,test,test,439,"Thanks for making this into a written issue. This was discussed on Slack over a week ago, but not everyone may have seen it. All those test failures trace back to a ""delicate"" part of the OCC module. It has very slow orbital convergence. I [updated the default orbital convergence criteria in OCC to be the same as in DFOCC](https://github.com/psi4/psi4/pull/1772/commits/896a7c22be5c72542b8773ca2a1b9164dee1fc2a), and for all the failing test cases, OCC simply can't converge the orbitals that tightly. You can see the issue about the OCC problem [here](https://github.com/psi4/psi4/issues/1777). It traces back to OCC not coupling orbital and T2 amplitude DIIS, when in my experience, coupling them is crucial for good convergence. I'm in the process of fixing that, but it's slow. A lot of junk in the OCC module needed to be cleaned out to make the code less confusing before I can start making the actual fix. If you want to move that along, you can help by reviewing [the current cleanup PR](https://github.com/psi4/psi4/pull/1789). I wanted to wait to write the next and final PR in the series until that one was accepted, but I may need to start on that now. Until that final PR gets in, we don't have conda builds and certainly can't have the next release. As you're probably wondering about this, these changes are also necessary for a paper I want submitted before I leave CCQC. While I'm quite unhappy these changes needed to be done, that they are made is useful for me personally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462
https://github.com/psi4/psi4/issues/1793#issuecomment-581033462:455,Usability,simpl,simply,455,"Thanks for making this into a written issue. This was discussed on Slack over a week ago, but not everyone may have seen it. All those test failures trace back to a ""delicate"" part of the OCC module. It has very slow orbital convergence. I [updated the default orbital convergence criteria in OCC to be the same as in DFOCC](https://github.com/psi4/psi4/pull/1772/commits/896a7c22be5c72542b8773ca2a1b9164dee1fc2a), and for all the failing test cases, OCC simply can't converge the orbitals that tightly. You can see the issue about the OCC problem [here](https://github.com/psi4/psi4/issues/1777). It traces back to OCC not coupling orbital and T2 amplitude DIIS, when in my experience, coupling them is crucial for good convergence. I'm in the process of fixing that, but it's slow. A lot of junk in the OCC module needed to be cleaned out to make the code less confusing before I can start making the actual fix. If you want to move that along, you can help by reviewing [the current cleanup PR](https://github.com/psi4/psi4/pull/1789). I wanted to wait to write the next and final PR in the series until that one was accepted, but I may need to start on that now. Until that final PR gets in, we don't have conda builds and certainly can't have the next release. As you're probably wondering about this, these changes are also necessary for a paper I want submitted before I leave CCQC. While I'm quite unhappy these changes needed to be done, that they are made is useful for me personally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462
https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:2043,Availability,error,error,2043,"0395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, this is due to PR #1663, where I fixed an error in the initial displacement for the IRC. At step 22, the geometry is very close to the minimum, so the next step ends up raising the energy. The two IRCs then bounce around, with the reference IRC bouncing in the fourth decimal place and the current IRC bouncing in the fifth. This is enough bounce for the final energies to be outside convergence criteria. Unless somebody has the time and drive to improve the IRC termination cutoff in C-Optking, I recommend changing the reference value for now and investigating this in Py-Optking, whenever that comes out. Meanwhile, I have most of the occ tests fixed locally, but `ocepa-grad2` is proving more difficult. My Psi4Numpy converges with no problems, so the issue probably isn't in the coupled-DIIS approach itself... My current guess is that it's the fact that the ""residuals"" `occ` throws into DIIS aren't the residuals but the residuals divided by the MPPT-like denominators from the standard amplitude update algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226
https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:3006,Deployability,update,update,3006,"0395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, this is due to PR #1663, where I fixed an error in the initial displacement for the IRC. At step 22, the geometry is very close to the minimum, so the next step ends up raising the energy. The two IRCs then bounce around, with the reference IRC bouncing in the fourth decimal place and the current IRC bouncing in the fifth. This is enough bounce for the final energies to be outside convergence criteria. Unless somebody has the time and drive to improve the IRC termination cutoff in C-Optking, I recommend changing the reference value for now and investigating this in Py-Optking, whenever that comes out. Meanwhile, I have most of the occ tests fixed locally, but `ocepa-grad2` is proving more difficult. My Psi4Numpy converges with no problems, so the issue probably isn't in the coupled-DIIS approach itself... My current guess is that it's the fact that the ""residuals"" `occ` throws into DIIS aren't the residuals but the residuals divided by the MPPT-like denominators from the standard amplitude update algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226
https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:81,Energy Efficiency,adapt,adapt,81,"`dfmp2-4` and `opt-irc-2` are currently failing as well. `dfmp2-4` just needs to adapt to syntax from PR #1789 and is easily fixed. `opt-irc-2` fails because the last IRC point does not have the expected energy. I suspect #1804 instigated this, but the true culprit is that optking cannot accurately say when the IRC converged. The IRC report when I run the test is. ```; @IRC ----------------------------------------------; @IRC **** IRC Report **** ; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -92.810710767266 -92.810710767266; @IRC 1 -92.811778450261 -0.001067682995; @IRC 2 -92.814803984808 -0.003025534547; @IRC 3 -92.819270546903 -0.004466562095; @IRC 4 -92.824389153679 -0.005118606776; @IRC 5 -92.829383508727 -0.004994355049; @IRC 6 -92.833903705977 -0.004520197249; @IRC 7 -92.838018066774 -0.004114360797; @IRC 8 -92.841889747803 -0.003871681030; @IRC 9 -92.845625951635 -0.003736203832; @IRC 10 -92.849260395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226
https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:204,Energy Efficiency,energy,energy,204,"`dfmp2-4` and `opt-irc-2` are currently failing as well. `dfmp2-4` just needs to adapt to syntax from PR #1789 and is easily fixed. `opt-irc-2` fails because the last IRC point does not have the expected energy. I suspect #1804 instigated this, but the true culprit is that optking cannot accurately say when the IRC converged. The IRC report when I run the test is. ```; @IRC ----------------------------------------------; @IRC **** IRC Report **** ; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -92.810710767266 -92.810710767266; @IRC 1 -92.811778450261 -0.001067682995; @IRC 2 -92.814803984808 -0.003025534547; @IRC 3 -92.819270546903 -0.004466562095; @IRC 4 -92.824389153679 -0.005118606776; @IRC 5 -92.829383508727 -0.004994355049; @IRC 6 -92.833903705977 -0.004520197249; @IRC 7 -92.838018066774 -0.004114360797; @IRC 8 -92.841889747803 -0.003871681030; @IRC 9 -92.845625951635 -0.003736203832; @IRC 10 -92.849260395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226
https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:516,Energy Efficiency,Energy,Energy,516,"`dfmp2-4` and `opt-irc-2` are currently failing as well. `dfmp2-4` just needs to adapt to syntax from PR #1789 and is easily fixed. `opt-irc-2` fails because the last IRC point does not have the expected energy. I suspect #1804 instigated this, but the true culprit is that optking cannot accurately say when the IRC converged. The IRC report when I run the test is. ```; @IRC ----------------------------------------------; @IRC **** IRC Report **** ; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -92.810710767266 -92.810710767266; @IRC 1 -92.811778450261 -0.001067682995; @IRC 2 -92.814803984808 -0.003025534547; @IRC 3 -92.819270546903 -0.004466562095; @IRC 4 -92.824389153679 -0.005118606776; @IRC 5 -92.829383508727 -0.004994355049; @IRC 6 -92.833903705977 -0.004520197249; @IRC 7 -92.838018066774 -0.004114360797; @IRC 8 -92.841889747803 -0.003871681030; @IRC 9 -92.845625951635 -0.003736203832; @IRC 10 -92.849260395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226
https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:533,Energy Efficiency,Energy,Energy,533,"`dfmp2-4` and `opt-irc-2` are currently failing as well. `dfmp2-4` just needs to adapt to syntax from PR #1789 and is easily fixed. `opt-irc-2` fails because the last IRC point does not have the expected energy. I suspect #1804 instigated this, but the true culprit is that optking cannot accurately say when the IRC converged. The IRC report when I run the test is. ```; @IRC ----------------------------------------------; @IRC **** IRC Report **** ; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -92.810710767266 -92.810710767266; @IRC 1 -92.811778450261 -0.001067682995; @IRC 2 -92.814803984808 -0.003025534547; @IRC 3 -92.819270546903 -0.004466562095; @IRC 4 -92.824389153679 -0.005118606776; @IRC 5 -92.829383508727 -0.004994355049; @IRC 6 -92.833903705977 -0.004520197249; @IRC 7 -92.838018066774 -0.004114360797; @IRC 8 -92.841889747803 -0.003871681030; @IRC 9 -92.845625951635 -0.003736203832; @IRC 10 -92.849260395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226
https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:1876,Energy Efficiency,energy,energy,1876,"18066774 -0.004114360797; @IRC 8 -92.841889747803 -0.003871681030; @IRC 9 -92.845625951635 -0.003736203832; @IRC 10 -92.849260395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, this is due to PR #1663, where I fixed an error in the initial displacement for the IRC. At step 22, the geometry is very close to the minimum, so the next step ends up raising the energy. The two IRCs then bounce around, with the reference IRC bouncing in the fourth decimal place and the current IRC bouncing in the fifth. This is enough bounce for the final energies to be outside convergence criteria. Unless somebody has the time and drive to improve the IRC termination cutoff in C-Optking, I recommend changing the reference value for now and investigating this in Py-Optking, whenever that comes out. Meanwhile, I have most of the occ tests fixed locally, but `ocepa-grad2` is proving more difficult. My Psi4Numpy converges with no problems, so the issue probably isn't in the coupled-DIIS approach itself... My current guess is that it's the fact that the ""residuals"" `occ` throws into DII",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226
https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:1924,Energy Efficiency,energy,energy,1924,"18066774 -0.004114360797; @IRC 8 -92.841889747803 -0.003871681030; @IRC 9 -92.845625951635 -0.003736203832; @IRC 10 -92.849260395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, this is due to PR #1663, where I fixed an error in the initial displacement for the IRC. At step 22, the geometry is very close to the minimum, so the next step ends up raising the energy. The two IRCs then bounce around, with the reference IRC bouncing in the fourth decimal place and the current IRC bouncing in the fifth. This is enough bounce for the final energies to be outside convergence criteria. Unless somebody has the time and drive to improve the IRC termination cutoff in C-Optking, I recommend changing the reference value for now and investigating this in Py-Optking, whenever that comes out. Meanwhile, I have most of the occ tests fixed locally, but `ocepa-grad2` is proving more difficult. My Psi4Numpy converges with no problems, so the issue probably isn't in the coupled-DIIS approach itself... My current guess is that it's the fact that the ""residuals"" `occ` throws into DII",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226
https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:2182,Energy Efficiency,energy,energy,2182,"0395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, this is due to PR #1663, where I fixed an error in the initial displacement for the IRC. At step 22, the geometry is very close to the minimum, so the next step ends up raising the energy. The two IRCs then bounce around, with the reference IRC bouncing in the fourth decimal place and the current IRC bouncing in the fifth. This is enough bounce for the final energies to be outside convergence criteria. Unless somebody has the time and drive to improve the IRC termination cutoff in C-Optking, I recommend changing the reference value for now and investigating this in Py-Optking, whenever that comes out. Meanwhile, I have most of the occ tests fixed locally, but `ocepa-grad2` is proving more difficult. My Psi4Numpy converges with no problems, so the issue probably isn't in the coupled-DIIS approach itself... My current guess is that it's the fact that the ""residuals"" `occ` throws into DIIS aren't the residuals but the residuals divided by the MPPT-like denominators from the standard amplitude update algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226
https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:81,Modifiability,adapt,adapt,81,"`dfmp2-4` and `opt-irc-2` are currently failing as well. `dfmp2-4` just needs to adapt to syntax from PR #1789 and is easily fixed. `opt-irc-2` fails because the last IRC point does not have the expected energy. I suspect #1804 instigated this, but the true culprit is that optking cannot accurately say when the IRC converged. The IRC report when I run the test is. ```; @IRC ----------------------------------------------; @IRC **** IRC Report **** ; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -92.810710767266 -92.810710767266; @IRC 1 -92.811778450261 -0.001067682995; @IRC 2 -92.814803984808 -0.003025534547; @IRC 3 -92.819270546903 -0.004466562095; @IRC 4 -92.824389153679 -0.005118606776; @IRC 5 -92.829383508727 -0.004994355049; @IRC 6 -92.833903705977 -0.004520197249; @IRC 7 -92.838018066774 -0.004114360797; @IRC 8 -92.841889747803 -0.003871681030; @IRC 9 -92.845625951635 -0.003736203832; @IRC 10 -92.849260395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226
https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:358,Testability,test,test,358,"`dfmp2-4` and `opt-irc-2` are currently failing as well. `dfmp2-4` just needs to adapt to syntax from PR #1789 and is easily fixed. `opt-irc-2` fails because the last IRC point does not have the expected energy. I suspect #1804 instigated this, but the true culprit is that optking cannot accurately say when the IRC converged. The IRC report when I run the test is. ```; @IRC ----------------------------------------------; @IRC **** IRC Report **** ; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -92.810710767266 -92.810710767266; @IRC 1 -92.811778450261 -0.001067682995; @IRC 2 -92.814803984808 -0.003025534547; @IRC 3 -92.819270546903 -0.004466562095; @IRC 4 -92.824389153679 -0.005118606776; @IRC 5 -92.829383508727 -0.004994355049; @IRC 6 -92.833903705977 -0.004520197249; @IRC 7 -92.838018066774 -0.004114360797; @IRC 8 -92.841889747803 -0.003871681030; @IRC 9 -92.845625951635 -0.003736203832; @IRC 10 -92.849260395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226
https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:2644,Testability,test,tests,2644,"0395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, this is due to PR #1663, where I fixed an error in the initial displacement for the IRC. At step 22, the geometry is very close to the minimum, so the next step ends up raising the energy. The two IRCs then bounce around, with the reference IRC bouncing in the fourth decimal place and the current IRC bouncing in the fifth. This is enough bounce for the final energies to be outside convergence criteria. Unless somebody has the time and drive to improve the IRC termination cutoff in C-Optking, I recommend changing the reference value for now and investigating this in Py-Optking, whenever that comes out. Meanwhile, I have most of the occ tests fixed locally, but `ocepa-grad2` is proving more difficult. My Psi4Numpy converges with no problems, so the issue probably isn't in the coupled-DIIS approach itself... My current guess is that it's the fact that the ""residuals"" `occ` throws into DIIS aren't the residuals but the residuals divided by the MPPT-like denominators from the standard amplitude update algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226
https://github.com/psi4/psi4/issues/1794#issuecomment-581095759:542,Energy Efficiency,energy,energy,542,"If you're able to run psi outside Jupyter, could you try the below? It's your file with `clean()` added. It runs fine for me. It sounds like something you tried, so I want to confirm we're running the same circumstances. ```; import psi4 . basis_sets = ['STO-3G','6-31g','6-311g','6-31+G','6-31G*','6-31+G*',; '6-311G*','6-311+G**','cc-pVDZ','cc-pVTZ']. B = psi4.geometry(""""""; 0 2; B; """"""). bs, es, wfns = [], [], []. for basis_set in basis_sets:; ; psi4.core.clean(); psi4.set_options({'reference': 'uhf','basis': basis_set}); e, wfn = psi4.energy('hf',return_wfn=True); ; es.append(e); wfns.append(wfn.basisset().nbf()); bs.append(basis_set). print(bs); print(es); print(wfns); ```. ```; ['STO-3G', '6-31g', '6-311g', '6-31+G', '6-31G*', '6-31+G*', '6-311G*', '6-311+G**', 'cc-pVDZ', 'cc-pVTZ']; [-24.149116604634685, -24.519491417069652, -24.52701726771759, -24.52372741487474, -24.522035242682847, -24.526158480502467, -24.5300987020333, -24.53034517277682, -24.529958285088252, -24.532065412570194]; [5, 9, 13, 13, 15, 19, 18, 22, 14, 30]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1794#issuecomment-581095759
https://github.com/psi4/psi4/issues/1794#issuecomment-582005411:172,Testability,test,test,172,"@billy-doyle: The pull request that fixes this issue is now merged in the master branch. If you are compiling psi4 from source, can you try to pull from it, recompile, and test the Jupyter problem again?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1794#issuecomment-582005411
https://github.com/psi4/psi4/issues/1796#issuecomment-582589959:21,Availability,error,error,21,- [ ] mention Disp30 error before v1.4 in docs #1803,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1796#issuecomment-582589959
https://github.com/psi4/psi4/issues/1796#issuecomment-683315968:19,Energy Efficiency,energy,energy,19,"route for example `energy('scs-mp3')` through managed method proc routines, otherwise mp3 may route to df and scs-mp3 route to conv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1796#issuecomment-683315968
https://github.com/psi4/psi4/issues/1796#issuecomment-683315968:0,Integrability,rout,route,0,"route for example `energy('scs-mp3')` through managed method proc routines, otherwise mp3 may route to df and scs-mp3 route to conv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1796#issuecomment-683315968
https://github.com/psi4/psi4/issues/1796#issuecomment-683315968:66,Integrability,rout,routines,66,"route for example `energy('scs-mp3')` through managed method proc routines, otherwise mp3 may route to df and scs-mp3 route to conv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1796#issuecomment-683315968
https://github.com/psi4/psi4/issues/1796#issuecomment-683315968:94,Integrability,rout,route,94,"route for example `energy('scs-mp3')` through managed method proc routines, otherwise mp3 may route to df and scs-mp3 route to conv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1796#issuecomment-683315968
https://github.com/psi4/psi4/issues/1796#issuecomment-683315968:118,Integrability,rout,route,118,"route for example `energy('scs-mp3')` through managed method proc routines, otherwise mp3 may route to df and scs-mp3 route to conv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1796#issuecomment-683315968
https://github.com/psi4/psi4/pull/1799#issuecomment-596681614:79,Integrability,contract,contracting,79,@dgasmith I finally got the export working and tested it on the python side by contracting the exported integrals with the ao density and comparing against the already implemented and exported `dipole_grad()` function. How/where do you want me to implement a test for this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-596681614
https://github.com/psi4/psi4/pull/1799#issuecomment-596681614:47,Testability,test,tested,47,@dgasmith I finally got the export working and tested it on the python side by contracting the exported integrals with the ao density and comparing against the already implemented and exported `dipole_grad()` function. How/where do you want me to implement a test for this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-596681614
https://github.com/psi4/psi4/pull/1799#issuecomment-596681614:259,Testability,test,test,259,@dgasmith I finally got the export working and tested it on the python side by contracting the exported integrals with the ao density and comparing against the already implemented and exported `dipole_grad()` function. How/where do you want me to implement a test for this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-596681614
https://github.com/psi4/psi4/pull/1799#issuecomment-596682471:71,Testability,test,tests,71,"@loriab might be a better place to recommend. But my first thought it `tests/pytests/test_mints.py`. This would be a new file, but a good place for libmints unit tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-596682471
https://github.com/psi4/psi4/pull/1799#issuecomment-596682471:162,Testability,test,tests,162,"@loriab might be a better place to recommend. But my first thought it `tests/pytests/test_mints.py`. This would be a new file, but a good place for libmints unit tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-596682471
https://github.com/psi4/psi4/pull/1799#issuecomment-597238265:222,Integrability,contract,contracting,222,"> @loriab might be a better place to recommend. But my first thought it `tests/pytests/test_mints.py`. This would be a new file, but a good place for libmints unit tests.; ; Would it be best to still test this function by contracting the exported dipole derivates with a density and then comparing results to the `dipole_grad()` function in mintshelper that contracts the dipole derivatives with an AO density before exporting to python side?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-597238265
https://github.com/psi4/psi4/pull/1799#issuecomment-597238265:358,Integrability,contract,contracts,358,"> @loriab might be a better place to recommend. But my first thought it `tests/pytests/test_mints.py`. This would be a new file, but a good place for libmints unit tests.; ; Would it be best to still test this function by contracting the exported dipole derivates with a density and then comparing results to the `dipole_grad()` function in mintshelper that contracts the dipole derivatives with an AO density before exporting to python side?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-597238265
https://github.com/psi4/psi4/pull/1799#issuecomment-597238265:73,Testability,test,tests,73,"> @loriab might be a better place to recommend. But my first thought it `tests/pytests/test_mints.py`. This would be a new file, but a good place for libmints unit tests.; ; Would it be best to still test this function by contracting the exported dipole derivates with a density and then comparing results to the `dipole_grad()` function in mintshelper that contracts the dipole derivatives with an AO density before exporting to python side?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-597238265
https://github.com/psi4/psi4/pull/1799#issuecomment-597238265:164,Testability,test,tests,164,"> @loriab might be a better place to recommend. But my first thought it `tests/pytests/test_mints.py`. This would be a new file, but a good place for libmints unit tests.; ; Would it be best to still test this function by contracting the exported dipole derivates with a density and then comparing results to the `dipole_grad()` function in mintshelper that contracts the dipole derivatives with an AO density before exporting to python side?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-597238265
https://github.com/psi4/psi4/pull/1799#issuecomment-597238265:200,Testability,test,test,200,"> @loriab might be a better place to recommend. But my first thought it `tests/pytests/test_mints.py`. This would be a new file, but a good place for libmints unit tests.; ; Would it be best to still test this function by contracting the exported dipole derivates with a density and then comparing results to the `dipole_grad()` function in mintshelper that contracts the dipole derivatives with an AO density before exporting to python side?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-597238265
https://github.com/psi4/psi4/pull/1799#issuecomment-597927326:5,Availability,failure,failures,5,"Test failures are everywhere, even on master. I think the MKL constraints of some of the psi packages and adcc are interacting badly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-597927326
https://github.com/psi4/psi4/pull/1799#issuecomment-597927326:0,Testability,Test,Test,0,"Test failures are everywhere, even on master. I think the MKL constraints of some of the psi packages and adcc are interacting badly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-597927326
https://github.com/psi4/psi4/pull/1799#issuecomment-599580161:28,Testability,test,tests,28,@loriab I ran a full set of tests locally and seem to be failing only the following two ctests: `432 - python-mints9 (Failed)` and `443 - json-schema-1-properties (Failed)`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-599580161
https://github.com/psi4/psi4/pull/1799#issuecomment-600881028:12,Testability,test,tests,12,@loriab All tests are passing! Ready for review on my end.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-600881028
https://github.com/psi4/psi4/pull/1800#issuecomment-582534340:39,Security,access,access,39,this PR now has higher order multipole access and is complete (imo),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1800#issuecomment-582534340
https://github.com/psi4/psi4/pull/1800#issuecomment-583159747:72,Testability,test,test,72,"This PR was actually developed over in DDD and is needed there to fix a test after adding Stefan's findif dipder_by_dipole. I'll give this another day to accumulate reviews, but if everyone's busy, I'll merge the commits at the tip of DDD, and they'll get rebased out later. Rest assured, DDD test suite still clean (though only on my localbox). @jeffschriber",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1800#issuecomment-583159747
https://github.com/psi4/psi4/pull/1800#issuecomment-583159747:293,Testability,test,test,293,"This PR was actually developed over in DDD and is needed there to fix a test after adding Stefan's findif dipder_by_dipole. I'll give this another day to accumulate reviews, but if everyone's busy, I'll merge the commits at the tip of DDD, and they'll get rebased out later. Rest assured, DDD test suite still clean (though only on my localbox). @jeffschriber",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1800#issuecomment-583159747
https://github.com/psi4/psi4/pull/1803#issuecomment-582740483:84,Testability,test,test,84,"@konpat @loriab before I merge this, I wanted to check whether you checked the full test suite? I see the differences are in 10's of cal/mol, but still, I'd expect something somewhere to fail. Your comment seems to imply that we just about pass under the radar...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1803#issuecomment-582740483
https://github.com/psi4/psi4/pull/1803#issuecomment-582743062:142,Availability,fault,fault,142,"I checked `ctest -R sapt` because I was expecting sapt6 to fail, being the most thorough per-term and per-sapt-level test. However, the Ind30 fault doesn't show up at that level because (1) we check elst/exch/ind/disp components but not e.g., elst10, elst20 terms and (2) the deltaHF term by definition compensates for (read: hides) the induction term problem. So current test suite is ok, though that itself is a failure demanding more tests. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1803#issuecomment-582743062
https://github.com/psi4/psi4/pull/1803#issuecomment-582743062:414,Availability,failure,failure,414,"I checked `ctest -R sapt` because I was expecting sapt6 to fail, being the most thorough per-term and per-sapt-level test. However, the Ind30 fault doesn't show up at that level because (1) we check elst/exch/ind/disp components but not e.g., elst10, elst20 terms and (2) the deltaHF term by definition compensates for (read: hides) the induction term problem. So current test suite is ok, though that itself is a failure demanding more tests. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1803#issuecomment-582743062
https://github.com/psi4/psi4/pull/1803#issuecomment-582743062:117,Testability,test,test,117,"I checked `ctest -R sapt` because I was expecting sapt6 to fail, being the most thorough per-term and per-sapt-level test. However, the Ind30 fault doesn't show up at that level because (1) we check elst/exch/ind/disp components but not e.g., elst10, elst20 terms and (2) the deltaHF term by definition compensates for (read: hides) the induction term problem. So current test suite is ok, though that itself is a failure demanding more tests. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1803#issuecomment-582743062
https://github.com/psi4/psi4/pull/1803#issuecomment-582743062:372,Testability,test,test,372,"I checked `ctest -R sapt` because I was expecting sapt6 to fail, being the most thorough per-term and per-sapt-level test. However, the Ind30 fault doesn't show up at that level because (1) we check elst/exch/ind/disp components but not e.g., elst10, elst20 terms and (2) the deltaHF term by definition compensates for (read: hides) the induction term problem. So current test suite is ok, though that itself is a failure demanding more tests. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1803#issuecomment-582743062
https://github.com/psi4/psi4/pull/1803#issuecomment-582743062:437,Testability,test,tests,437,"I checked `ctest -R sapt` because I was expecting sapt6 to fail, being the most thorough per-term and per-sapt-level test. However, the Ind30 fault doesn't show up at that level because (1) we check elst/exch/ind/disp components but not e.g., elst10, elst20 terms and (2) the deltaHF term by definition compensates for (read: hides) the induction term problem. So current test suite is ok, though that itself is a failure demanding more tests. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1803#issuecomment-582743062
https://github.com/psi4/psi4/pull/1804#issuecomment-582747287:154,Testability,log,logs,154,"The problem seems to be that the ""default"" fitting basis set remains `def-qzvpp-jkfit`:. https://dev.azure.com/psi4/psi4/_build/results?buildId=1658&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a&t=895e49e6-cad9-5b25-6d66-c0b61859d928&l=698. I think those can be modified here:. https://github.com/psi4/psi4/blob/287610542a3f71ec58007da9df7e6ba451c83fc7/psi4/driver/qcdb/libmintsbasisset.py#L761-L765. Also, could you add a quick comment about what you did into the psi4/share/psi4/basis/NOTES file, here: https://github.com/psi4/psi4/blob/309b058ce75b55c8d8e19245b6ce480c00f1797e/psi4/share/psi4/basis/NOTES",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1804#issuecomment-582747287
https://github.com/psi4/psi4/pull/1804#issuecomment-583191559:269,Testability,test,tests,269,"I've diffed the universal and existing jkfit/jfit with diff_gbs.py (screenshot below), and all's well. (black is unchanged, blue adds an element, yellow is different but I don't really care about thallium and we don't use jfit anyways. I think if you edit the basis in tests mints9 and python/mints9 to universal, that should finally heal CI. Thanks for fixing this up. ![Screen Shot 2020-02-06 at 8 24 05 PM](https://user-images.githubusercontent.com/2314730/73992981-dd5e1b00-491e-11ea-8ddb-b2c115f232e1.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1804#issuecomment-583191559
https://github.com/psi4/psi4/pull/1805#issuecomment-583022833:92,Performance,perform,performance,92,Many thanks to @JonathonMisiewicz and some very diligent forum members for pointing out the performance problem :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1805#issuecomment-583022833
https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:1330,Availability,failure,failure,1330,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866
https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:1404,Availability,error,error,1404,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866
https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:1754,Availability,ping,ping,1754,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866
https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:352,Energy Efficiency,energy,energy,352,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866
https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:400,Energy Efficiency,energy,energy,400,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866
https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:1228,Testability,test,tests,1228,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866
https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:1417,Testability,test,test,1417,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866
https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:1519,Testability,test,test,1519,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866
https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:1647,Testability,test,test,1647,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866
https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:177,Usability,simpl,simplified,177,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866
https://github.com/psi4/psi4/issues/1808#issuecomment-584134023:160,Availability,toler,tolerance,160,"I implemented OMP2.5 gradients with obsessively tight convergence criteria.; The fixed-Psi implementation agrees with Psi4Numpy OMP2.5 gradients within testing tolerance, but the current-Psi implementation does not. Note that `omp2p5-grad2` only has one independent gradient parameter, being a diatomic. The values the three implementations give for this parameter are:; ```; Psi4Num: 0.011650390674; New Psi: 0.011650262043; ^; Old Psi: 0.011614594883; ^; ```. My conclusion is that my fix is correct, and the reference values are not correct to within testing values, although close enough to correct to not have caused a problem for most users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-584134023
https://github.com/psi4/psi4/issues/1808#issuecomment-584134023:152,Testability,test,testing,152,"I implemented OMP2.5 gradients with obsessively tight convergence criteria.; The fixed-Psi implementation agrees with Psi4Numpy OMP2.5 gradients within testing tolerance, but the current-Psi implementation does not. Note that `omp2p5-grad2` only has one independent gradient parameter, being a diatomic. The values the three implementations give for this parameter are:; ```; Psi4Num: 0.011650390674; New Psi: 0.011650262043; ^; Old Psi: 0.011614594883; ^; ```. My conclusion is that my fix is correct, and the reference values are not correct to within testing values, although close enough to correct to not have caused a problem for most users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-584134023
https://github.com/psi4/psi4/issues/1808#issuecomment-584134023:554,Testability,test,testing,554,"I implemented OMP2.5 gradients with obsessively tight convergence criteria.; The fixed-Psi implementation agrees with Psi4Numpy OMP2.5 gradients within testing tolerance, but the current-Psi implementation does not. Note that `omp2p5-grad2` only has one independent gradient parameter, being a diatomic. The values the three implementations give for this parameter are:; ```; Psi4Num: 0.011650390674; New Psi: 0.011650262043; ^; Old Psi: 0.011614594883; ^; ```. My conclusion is that my fix is correct, and the reference values are not correct to within testing values, although close enough to correct to not have caused a problem for most users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-584134023
https://github.com/psi4/psi4/issues/1808#issuecomment-592130784:103,Availability,toler,tolerance,103,"You may check energy and gradients with respect to DFOCC CD-OMP2.5 code. In the case of energy with CD tolerance of 10^-14, CD becomes exact. Hence, you may verify your changes with respect to DFOCC module. In the case of OMP2.5 gradient you may compute gradient with a 5 point formula again with CD-OMP2.5 energies. Alternatively, you may use DF-OMP2.5 gradient in a small primary basis set with a very large auxiliary basis. As long as you can reproduce my results in OMP2.5 paper (with CDS) or you can get the same results with CD-OMP2.5, you are welcome to make any change in OCC module. Frankly speaking, I have focused on DFOCC since 2014. @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-592130784
https://github.com/psi4/psi4/issues/1808#issuecomment-592130784:14,Energy Efficiency,energy,energy,14,"You may check energy and gradients with respect to DFOCC CD-OMP2.5 code. In the case of energy with CD tolerance of 10^-14, CD becomes exact. Hence, you may verify your changes with respect to DFOCC module. In the case of OMP2.5 gradient you may compute gradient with a 5 point formula again with CD-OMP2.5 energies. Alternatively, you may use DF-OMP2.5 gradient in a small primary basis set with a very large auxiliary basis. As long as you can reproduce my results in OMP2.5 paper (with CDS) or you can get the same results with CD-OMP2.5, you are welcome to make any change in OCC module. Frankly speaking, I have focused on DFOCC since 2014. @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-592130784
https://github.com/psi4/psi4/issues/1808#issuecomment-592130784:88,Energy Efficiency,energy,energy,88,"You may check energy and gradients with respect to DFOCC CD-OMP2.5 code. In the case of energy with CD tolerance of 10^-14, CD becomes exact. Hence, you may verify your changes with respect to DFOCC module. In the case of OMP2.5 gradient you may compute gradient with a 5 point formula again with CD-OMP2.5 energies. Alternatively, you may use DF-OMP2.5 gradient in a small primary basis set with a very large auxiliary basis. As long as you can reproduce my results in OMP2.5 paper (with CDS) or you can get the same results with CD-OMP2.5, you are welcome to make any change in OCC module. Frankly speaking, I have focused on DFOCC since 2014. @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-592130784
https://github.com/psi4/psi4/issues/1808#issuecomment-592153360:231,Usability,clear,clear,231,"```; Psi4Num: 0.011650390674; New Psi: 0.011650262043; ^; Old Psi: 0.011614594883; ^; CD-5PT : 0.011650363426; ^; ```. Not that I'd _recommend_ trusting a finite difference gradient to eight decimal places, but it looks like we're clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-592153360
https://github.com/psi4/psi4/pull/1809#issuecomment-590992084:3,Availability,ping,pinging,3,Re-pinging @bozkaya. Even an estimate on when you can look at this would be helpful.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1809#issuecomment-590992084
https://github.com/psi4/psi4/pull/1809#issuecomment-592131837:96,Availability,toler,tolerance,96,"You may verify your changes with respect to DFOCC CD-OMP2.5 code. In the case of energy with CD tolerance of 10^-14, CD becomes exact. Hence, you may verify your changes with respect to DFOCC module. As long as you can reproduce my results in OMP2.5 paper (with CDS) or you can get the same results with CD-OMP2.5, you are welcome to make any change in OCC module. Frankly speaking, I have focused on DFOCC since 2014. @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1809#issuecomment-592131837
https://github.com/psi4/psi4/pull/1809#issuecomment-592131837:81,Energy Efficiency,energy,energy,81,"You may verify your changes with respect to DFOCC CD-OMP2.5 code. In the case of energy with CD tolerance of 10^-14, CD becomes exact. Hence, you may verify your changes with respect to DFOCC module. As long as you can reproduce my results in OMP2.5 paper (with CDS) or you can get the same results with CD-OMP2.5, you are welcome to make any change in OCC module. Frankly speaking, I have focused on DFOCC since 2014. @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1809#issuecomment-592131837
https://github.com/psi4/psi4/pull/1809#issuecomment-592153927:7,Testability,test,test,7,"The CD test passes, so we're clear to merge once pending reviews are in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1809#issuecomment-592153927
https://github.com/psi4/psi4/pull/1809#issuecomment-592153927:29,Usability,clear,clear,29,"The CD test passes, so we're clear to merge once pending reviews are in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1809#issuecomment-592153927
https://github.com/psi4/psi4/pull/1811#issuecomment-586557996:40,Availability,error,error,40,"I was like ""what's a correct copy-paste error message"" until I read the change, and realized that this meant rectifying a copy-pasted error message in detci...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1811#issuecomment-586557996
https://github.com/psi4/psi4/pull/1811#issuecomment-586557996:134,Availability,error,error,134,"I was like ""what's a correct copy-paste error message"" until I read the change, and realized that this meant rectifying a copy-pasted error message in detci...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1811#issuecomment-586557996
https://github.com/psi4/psi4/pull/1811#issuecomment-586557996:46,Integrability,message,message,46,"I was like ""what's a correct copy-paste error message"" until I read the change, and realized that this meant rectifying a copy-pasted error message in detci...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1811#issuecomment-586557996
https://github.com/psi4/psi4/pull/1811#issuecomment-586557996:140,Integrability,message,message,140,"I was like ""what's a correct copy-paste error message"" until I read the change, and realized that this meant rectifying a copy-pasted error message in detci...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1811#issuecomment-586557996
https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:2383,Availability,ping,pinging,2383,"that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TPDM be formed and kept via set tpdm true. If; > cleanup is not the responsibility of procrouting, then which code is; > supposed to be responsible for it? Leave it to the destructor?; >; > DETCI design decisions are above my pay grade, so I'm leaving this to DGAS; > and CDS. The 1.4 paper is of course higher priority, but I need this; > feature working very badly, so I will start pinging on Tuesday.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1812?email_source=notifications&email_token=AAXVA5XS3UFCJKRLHOJNWI3RC3M2FA5CNFSM4KVNDPSKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4INUQSEQ>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5SRRGB7SRIJPXE5OATRC3M2FANCNFSM4KVNDPSA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160
https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:373,Energy Efficiency,energy,energy,373,"DETCI was designed in the old Psi days where each module simply terminated; after it executed. So, something like your example was never envisioned,; and if the user wanted the TPDM, they had to request that in the input; before executing DETCI. DETCI can generate an awful lot of intermediate and; bookkeeping data, which is why all that stuff gets blown away after each; energy call. Do you just want the TPDM on disk? If so you could just set the expert; user option 'tpdm' to 'true'. If you somehow need to be able to form it through this kind of API, then I; don't have an immediate answer other than to say it sounds like Daniel or I; would have to dig into the details. The decode matrix itself is not really; so large and so if that's literally the only problem, maybe it could be; kept around. But I suspect that there is other stuff that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160
https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:1102,Energy Efficiency,energy,energy,1102,"something like your example was never envisioned,; and if the user wanted the TPDM, they had to request that in the input; before executing DETCI. DETCI can generate an awful lot of intermediate and; bookkeeping data, which is why all that stuff gets blown away after each; energy call. Do you just want the TPDM on disk? If so you could just set the expert; user option 'tpdm' to 'true'. If you somehow need to be able to form it through this kind of API, then I; don't have an immediate answer other than to say it sounds like Daniel or I; would have to dig into the details. The decode matrix itself is not really; so large and so if that's literally the only problem, maybe it could be; kept around. But I suspect that there is other stuff that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TPDM be formed and kept via set tpdm true. If; > cleanup is not the responsibility of procrouting, th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160
https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:1215,Energy Efficiency,energy,energy,1215,"o request that in the input; before executing DETCI. DETCI can generate an awful lot of intermediate and; bookkeeping data, which is why all that stuff gets blown away after each; energy call. Do you just want the TPDM on disk? If so you could just set the expert; user option 'tpdm' to 'true'. If you somehow need to be able to form it through this kind of API, then I; don't have an immediate answer other than to say it sounds like Daniel or I; would have to dig into the details. The decode matrix itself is not really; so large and so if that's literally the only problem, maybe it could be; kept around. But I suspect that there is other stuff that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TPDM be formed and kept via set tpdm true. If; > cleanup is not the responsibility of procrouting, then which code is; > supposed to be responsible for it? Leave it to the destructor?; >; > DETC",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160
https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:1733,Security,access,access,1733,"lly; so large and so if that's literally the only problem, maybe it could be; kept around. But I suspect that there is other stuff that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TPDM be formed and kept via set tpdm true. If; > cleanup is not the responsibility of procrouting, then which code is; > supposed to be responsible for it? Leave it to the destructor?; >; > DETCI design decisions are above my pay grade, so I'm leaving this to DGAS; > and CDS. The 1.4 paper is of course higher priority, but I need this; > feature working very badly, so I will start pinging on Tuesday.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1812?email_source=notifications&email_token=AAXVA5XS3UFCJKRLHOJNWI3RC3M2FA5CNFSM4KVNDPSKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4INUQS",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160
https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:1941,Security,expose,exposed,1941,"that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TPDM be formed and kept via set tpdm true. If; > cleanup is not the responsibility of procrouting, then which code is; > supposed to be responsible for it? Leave it to the destructor?; >; > DETCI design decisions are above my pay grade, so I'm leaving this to DGAS; > and CDS. The 1.4 paper is of course higher priority, but I need this; > feature working very badly, so I will start pinging on Tuesday.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1812?email_source=notifications&email_token=AAXVA5XS3UFCJKRLHOJNWI3RC3M2FA5CNFSM4KVNDPSKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4INUQSEQ>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5SRRGB7SRIJPXE5OATRC3M2FANCNFSM4KVNDPSA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160
https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:57,Usability,simpl,simply,57,"DETCI was designed in the old Psi days where each module simply terminated; after it executed. So, something like your example was never envisioned,; and if the user wanted the TPDM, they had to request that in the input; before executing DETCI. DETCI can generate an awful lot of intermediate and; bookkeeping data, which is why all that stuff gets blown away after each; energy call. Do you just want the TPDM on disk? If so you could just set the expert; user option 'tpdm' to 'true'. If you somehow need to be able to form it through this kind of API, then I; don't have an immediate answer other than to say it sounds like Daniel or I; would have to dig into the details. The decode matrix itself is not really; so large and so if that's literally the only problem, maybe it could be; kept around. But I suspect that there is other stuff that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160
https://github.com/psi4/psi4/issues/1812#issuecomment-586425138:293,Safety,avoid,avoid,293,"To get this particular example to work I think you can look into `proc.py:run_detci` which calls the following:; ```python; ciwfn.cleanup_ci(); ciwfn.cleanup_dpd(); ```. For now, comment this out and it should work. In the future we can add this an option like `detci_dirty` or something that avoid cleanup so that the tpdm code works as expected. To avoid the segfault you can add something like this to `form_opdm`:. ```C++; if (cleaned_up_ci_) {; throw PSIEXCEPTION(""The CIWavefunction was cleaned up, please call xxx to avoid cleanup."");; }",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586425138
https://github.com/psi4/psi4/issues/1812#issuecomment-586425138:351,Safety,avoid,avoid,351,"To get this particular example to work I think you can look into `proc.py:run_detci` which calls the following:; ```python; ciwfn.cleanup_ci(); ciwfn.cleanup_dpd(); ```. For now, comment this out and it should work. In the future we can add this an option like `detci_dirty` or something that avoid cleanup so that the tpdm code works as expected. To avoid the segfault you can add something like this to `form_opdm`:. ```C++; if (cleaned_up_ci_) {; throw PSIEXCEPTION(""The CIWavefunction was cleaned up, please call xxx to avoid cleanup."");; }",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586425138
https://github.com/psi4/psi4/issues/1812#issuecomment-586425138:524,Safety,avoid,avoid,524,"To get this particular example to work I think you can look into `proc.py:run_detci` which calls the following:; ```python; ciwfn.cleanup_ci(); ciwfn.cleanup_dpd(); ```. For now, comment this out and it should work. In the future we can add this an option like `detci_dirty` or something that avoid cleanup so that the tpdm code works as expected. To avoid the segfault you can add something like this to `form_opdm`:. ```C++; if (cleaned_up_ci_) {; throw PSIEXCEPTION(""The CIWavefunction was cleaned up, please call xxx to avoid cleanup."");; }",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586425138
https://github.com/psi4/psi4/issues/1812#issuecomment-586435576:556,Availability,error,error,556,"Thanks for the swift response from both of you. `set tpdm true` combined with the `get_tpdm` function gets the TPDM as a matrix into Python, which is what I need for my use case. (The map from matrix indices to orbital indices would also be nice, but I think I can dig that up myself.) So this isn't blocking me anymore, and there shouldn't be much ""digging into details"" of DETCI required!. I think the primary question is if we want to have a `detci` dirty mode or not, and if so, how much information it should keep. The other action item is to have an error message instead of the segfault, but I can do that myself, now that I have more context on expected DETCI operation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586435576
https://github.com/psi4/psi4/issues/1812#issuecomment-586435576:562,Integrability,message,message,562,"Thanks for the swift response from both of you. `set tpdm true` combined with the `get_tpdm` function gets the TPDM as a matrix into Python, which is what I need for my use case. (The map from matrix indices to orbital indices would also be nice, but I think I can dig that up myself.) So this isn't blocking me anymore, and there shouldn't be much ""digging into details"" of DETCI required!. I think the primary question is if we want to have a `detci` dirty mode or not, and if so, how much information it should keep. The other action item is to have an error message instead of the segfault, but I can do that myself, now that I have more context on expected DETCI operation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586435576
https://github.com/psi4/psi4/issues/1812#issuecomment-586440640:173,Integrability,message,message,173,"You could probably use the `ciwave.cc::get_dimension` which will get you the offsets for orbital indices. Feel free to write something there that provides orders. The above message in the `form_*` functions is probably all thats required. I would say yes to a dirty flag, but have a warning that it isn't exactly supported. There are a lot of functionality there that is only meant to be used in conjunction with some careful usage.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586440640
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:359,Modifiability,config,config,359,"You can pull geometric apart like so: https://github.com/leeping/geomeTRIC/blob/master/geometric/tests/test_batch_opt.py. This is a bit complex compared to what you wish to do, but it may give a better product. Here is everything unwound:. ```python; import qcengine as qcng; import qcelemental as qcel; import geometric; import pkg_resources; import logging.config; import sys. mol_uc2 = qcel.models.Molecule.from_data(; """"""; O 0 0 0; H 0 0 1; H 0 1 0; """"""; ). input_data = {; ""keywords"": {; ""convergence_set"": ""GAU_LOOSE"",; ""coordsys"": ""tric"",; ""maxiter"": 25,; ""enforce"": 0.1,; ""constraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:1240,Performance,optimiz,optimize,1240,"ython; import qcengine as qcng; import qcelemental as qcel; import geometric; import pkg_resources; import logging.config; import sys. mol_uc2 = qcel.models.Molecule.from_data(; """"""; O 0 0 0; H 0 0 1; H 0 1 0; """"""; ). input_data = {; ""keywords"": {; ""convergence_set"": ""GAU_LOOSE"",; ""coordsys"": ""tric"",; ""maxiter"": 25,; ""enforce"": 0.1,; ""constraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:1579,Performance,optimiz,optimize,1579,"nstraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2435,Performance,optimiz,optimizer,2435,", CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2472,Performance,optimiz,optimize,2472,"traints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2506,Performance,optimiz,optimizer,2506,"n constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](htt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2528,Performance,optimiz,optimize,2528,"alueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geom",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2537,Performance,Optimiz,Optimizer,2537," CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2928,Performance,optimiz,optimizer,2928,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2957,Performance,optimiz,optimizer,2957,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3039,Performance,optimiz,optimizer,3039,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3052,Performance,optimiz,optimizer,3052,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3067,Performance,optimiz,optimizer,3067,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3083,Performance,optimiz,optimizer,3083,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3121,Performance,optimiz,optimizer,3121,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3151,Performance,optimiz,optimize,3151,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3191,Performance,optimiz,optimize,3191,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3267,Performance,optimiz,optimizer,3267,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3285,Performance,optimiz,optimizer,3285,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3314,Performance,optimiz,optimizer,3314,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3392,Performance,optimiz,optimizer,3392,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3405,Performance,optimiz,optimizer,3405,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3420,Performance,optimiz,optimizer,3420,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3436,Performance,optimiz,optimizer,3436,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:97,Testability,test,tests,97,"You can pull geometric apart like so: https://github.com/leeping/geomeTRIC/blob/master/geometric/tests/test_batch_opt.py. This is a bit complex compared to what you wish to do, but it may give a better product. Here is everything unwound:. ```python; import qcengine as qcng; import qcelemental as qcel; import geometric; import pkg_resources; import logging.config; import sys. mol_uc2 = qcel.models.Molecule.from_data(; """"""; O 0 0 0; H 0 0 1; H 0 1 0; """"""; ). input_data = {; ""keywords"": {; ""convergence_set"": ""GAU_LOOSE"",; ""coordsys"": ""tric"",; ""maxiter"": 25,; ""enforce"": 0.1,; ""constraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:351,Testability,log,logging,351,"You can pull geometric apart like so: https://github.com/leeping/geomeTRIC/blob/master/geometric/tests/test_batch_opt.py. This is a bit complex compared to what you wish to do, but it may give a better product. Here is everything unwound:. ```python; import qcengine as qcng; import qcelemental as qcel; import geometric; import pkg_resources; import logging.config; import sys. mol_uc2 = qcel.models.Molecule.from_data(; """"""; O 0 0 0; H 0 0 1; H 0 1 0; """"""; ). input_data = {; ""keywords"": {; ""convergence_set"": ""GAU_LOOSE"",; ""coordsys"": ""tric"",; ""maxiter"": 25,; ""enforce"": 0.1,; ""constraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:914,Testability,log,logger,914,"You can pull geometric apart like so: https://github.com/leeping/geomeTRIC/blob/master/geometric/tests/test_batch_opt.py. This is a bit complex compared to what you wish to do, but it may give a better product. Here is everything unwound:. ```python; import qcengine as qcng; import qcelemental as qcel; import geometric; import pkg_resources; import logging.config; import sys. mol_uc2 = qcel.models.Molecule.from_data(; """"""; O 0 0 0; H 0 0 1; H 0 1 0; """"""; ). input_data = {; ""keywords"": {; ""convergence_set"": ""GAU_LOOSE"",; ""coordsys"": ""tric"",; ""maxiter"": 25,; ""enforce"": 0.1,; ""constraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:1073,Testability,log,logger,1073,"/geomeTRIC/blob/master/geometric/tests/test_batch_opt.py. This is a bit complex compared to what you wish to do, but it may give a better product. Here is everything unwound:. ```python; import qcengine as qcng; import qcelemental as qcel; import geometric; import pkg_resources; import logging.config; import sys. mol_uc2 = qcel.models.Molecule.from_data(; """"""; O 0 0 0; H 0 0 1; H 0 1 0; """"""; ). input_data = {; ""keywords"": {; ""convergence_set"": ""GAU_LOOSE"",; ""coordsys"": ""tric"",; ""maxiter"": 25,; ""enforce"": 0.1,; ""constraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedIn",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:1098,Testability,log,logger,1098,"st_batch_opt.py. This is a bit complex compared to what you wish to do, but it may give a better product. Here is everything unwound:. ```python; import qcengine as qcng; import qcelemental as qcel; import geometric; import pkg_resources; import logging.config; import sys. mol_uc2 = qcel.models.Molecule.from_data(; """"""; O 0 0 0; H 0 0 1; H 0 1 0; """"""; ). input_data = {; ""keywords"": {; ""convergence_set"": ""GAU_LOOSE"",; ""coordsys"": ""tric"",; ""maxiter"": 25,; ""enforce"": 0.1,; ""constraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Bui",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:1106,Testability,log,logger,1106,"st_batch_opt.py. This is a bit complex compared to what you wish to do, but it may give a better product. Here is everything unwound:. ```python; import qcengine as qcng; import qcelemental as qcel; import geometric; import pkg_resources; import logging.config; import sys. mol_uc2 = qcel.models.Molecule.from_data(; """"""; O 0 0 0; H 0 0 1; H 0 1 0; """"""; ). input_data = {; ""keywords"": {; ""convergence_set"": ""GAU_LOOSE"",; ""coordsys"": ""tric"",; ""maxiter"": 25,; ""enforce"": 0.1,; ""constraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Bui",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2987,Testability,log,logger,2987,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3220,Testability,log,logger,3220,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:3340,Testability,log,logger,3340,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:390,Modifiability,config,config,390,"> You can pull geometric apart like so: https://github.com/leeping/geomeTRIC/blob/master/geometric/tests/test_batch_opt.py; > ; > This is a bit complex compared to what you wish to do, but it may give a better product.; > ; > Here is everything unwound:; > ; > ```python; > import qcengine as qcng; > import qcelemental as qcel; > import geometric; > import pkg_resources; > import logging.config; > import sys; > ; > mol_uc2 = qcel.models.Molecule.from_data(; > """"""; > O 0 0 0; > H 0 0 1; > H 0 1 0; > """"""; > ); > ; > input_data = {; > ""keywords"": {; > ""convergence_set"": ""GAU_LOOSE"",; > ""coordsys"": ""tric"",; > ""maxiter"": 25,; > ""enforce"": 0.1,; > ""constraints"": {; > ""set"": [; > {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; > ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.P",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:1373,Performance,optimiz,optimize,1373,"port logging.config; > import sys; > ; > mol_uc2 = qcel.models.Molecule.from_data(; > """"""; > O 0 0 0; > H 0 0 1; > H 0 1 0; > """"""; > ); > ; > input_data = {; > ""keywords"": {; > ""convergence_set"": ""GAU_LOOSE"",; > ""coordsys"": ""tric"",; > ""maxiter"": 25,; > ""enforce"": 0.1,; > ""constraints"": {; > ""set"": [; > {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; > ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:1732,Performance,optimiz,optimize,1732," ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2658,Performance,optimiz,optimizer,2658,"ts_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2697,Performance,optimiz,optimize,2697,"!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > o",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2733,Performance,optimiz,optimizer,2733,"c.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],op",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2755,Performance,optimiz,optimize,2755,", constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2764,Performance,Optimiz,Optimizer,2764,"up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to bu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3205,Performance,optimiz,optimizer,3205,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3236,Performance,optimiz,optimizer,3236,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3322,Performance,optimiz,optimizer,3322,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3335,Performance,optimiz,optimizer,3335,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3350,Performance,optimiz,optimizer,3350,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3366,Performance,optimiz,optimizer,3366,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3412,Performance,optimiz,optimizer,3412,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3442,Performance,optimiz,optimize,3442,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3482,Performance,optimiz,optimize,3482,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3568,Performance,optimiz,optimizer,3568,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3588,Performance,optimiz,optimizer,3588,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3619,Performance,optimiz,optimizer,3619,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3701,Performance,optimiz,optimizer,3701,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3714,Performance,optimiz,optimizer,3714,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3729,Performance,optimiz,optimizer,3729,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3745,Performance,optimiz,optimizer,3745,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:99,Testability,test,tests,99,"> You can pull geometric apart like so: https://github.com/leeping/geomeTRIC/blob/master/geometric/tests/test_batch_opt.py; > ; > This is a bit complex compared to what you wish to do, but it may give a better product.; > ; > Here is everything unwound:; > ; > ```python; > import qcengine as qcng; > import qcelemental as qcel; > import geometric; > import pkg_resources; > import logging.config; > import sys; > ; > mol_uc2 = qcel.models.Molecule.from_data(; > """"""; > O 0 0 0; > H 0 0 1; > H 0 1 0; > """"""; > ); > ; > input_data = {; > ""keywords"": {; > ""convergence_set"": ""GAU_LOOSE"",; > ""coordsys"": ""tric"",; > ""maxiter"": 25,; > ""enforce"": 0.1,; > ""constraints"": {; > ""set"": [; > {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; > ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.P",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:382,Testability,log,logging,382,"> You can pull geometric apart like so: https://github.com/leeping/geomeTRIC/blob/master/geometric/tests/test_batch_opt.py; > ; > This is a bit complex compared to what you wish to do, but it may give a better product.; > ; > Here is everything unwound:; > ; > ```python; > import qcengine as qcng; > import qcelemental as qcel; > import geometric; > import pkg_resources; > import logging.config; > import sys; > ; > mol_uc2 = qcel.models.Molecule.from_data(; > """"""; > O 0 0 0; > H 0 0 1; > H 0 1 0; > """"""; > ); > ; > input_data = {; > ""keywords"": {; > ""convergence_set"": ""GAU_LOOSE"",; > ""coordsys"": ""tric"",; > ""maxiter"": 25,; > ""enforce"": 0.1,; > ""constraints"": {; > ""set"": [; > {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; > ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.P",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:1025,Testability,log,logger,1025,"art like so: https://github.com/leeping/geomeTRIC/blob/master/geometric/tests/test_batch_opt.py; > ; > This is a bit complex compared to what you wish to do, but it may give a better product.; > ; > Here is everything unwound:; > ; > ```python; > import qcengine as qcng; > import qcelemental as qcel; > import geometric; > import pkg_resources; > import logging.config; > import sys; > ; > mol_uc2 = qcel.models.Molecule.from_data(; > """"""; > O 0 0 0; > H 0 0 1; > H 0 1 0; > """"""; > ); > ; > input_data = {; > ""keywords"": {; > ""convergence_set"": ""GAU_LOOSE"",; > ""coordsys"": ""tric"",; > ""maxiter"": 25,; > ""enforce"": 0.1,; > ""constraints"": {; > ""set"": [; > {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; > ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:1190,Testability,log,logger,1190," do, but it may give a better product.; > ; > Here is everything unwound:; > ; > ```python; > import qcengine as qcng; > import qcelemental as qcel; > import geometric; > import pkg_resources; > import logging.config; > import sys; > ; > mol_uc2 = qcel.models.Molecule.from_data(; > """"""; > O 0 0 0; > H 0 0 1; > H 0 1 0; > """"""; > ); > ; > input_data = {; > ""keywords"": {; > ""convergence_set"": ""GAU_LOOSE"",; > ""coordsys"": ""tric"",; > ""maxiter"": 25,; > ""enforce"": 0.1,; > ""constraints"": {; > ""set"": [; > {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; > ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinate",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:1215,Testability,log,logger,1215," > Here is everything unwound:; > ; > ```python; > import qcengine as qcng; > import qcelemental as qcel; > import geometric; > import pkg_resources; > import logging.config; > import sys; > ; > mol_uc2 = qcel.models.Molecule.from_data(; > """"""; > O 0 0 0; > H 0 0 1; > H 0 1 0; > """"""; > ); > ; > input_data = {; > ""keywords"": {; > ""convergence_set"": ""GAU_LOOSE"",; > ""coordsys"": ""tric"",; > ""maxiter"": 25,; > ""enforce"": 0.1,; > ""constraints"": {; > ""set"": [; > {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; > ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.inter",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:1225,Testability,log,logger,1225," > Here is everything unwound:; > ; > ```python; > import qcengine as qcng; > import qcelemental as qcel; > import geometric; > import pkg_resources; > import logging.config; > import sys; > ; > mol_uc2 = qcel.models.Molecule.from_data(; > """"""; > O 0 0 0; > H 0 0 1; > H 0 1 0; > """"""; > ); > ; > input_data = {; > ""keywords"": {; > ""convergence_set"": ""GAU_LOOSE"",; > ""coordsys"": ""tric"",; > ""maxiter"": 25,; > ""enforce"": 0.1,; > ""constraints"": {; > ""set"": [; > {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; > ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.inter",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3268,Testability,log,logger,3268,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3513,Testability,log,logger,3513,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3647,Testability,log,logger,3647,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275
https://github.com/psi4/psi4/pull/1813#issuecomment-588025649:289,Modifiability,variab,variable,289,This pull request **introduces 2 alerts** when merging 1bf69ab8306df4171b54c921964ba73d30cd5a78 into 31219187caa9e8736b3323b078324f85d8c9cd6f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6cd6a417b2dccc930d2d41fcecbb1f78c3420d0d). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588025649
https://github.com/psi4/psi4/pull/1813#issuecomment-609231547:166,Testability,test,test,166,"> This looks great already and I'm looking forward to trying it out. I have a couple of minor comments, though. Also, can GeomeTRIC do TS searches? If yes, perhaps a test would be good. Thanks Peter, your comments are very helpful! I don't think transition state searches are implemented yet, although I see that there is a PR in the GeomeTRIC repo:; https://github.com/leeping/geomeTRIC/pull/107",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-609231547
https://github.com/psi4/psi4/pull/1813#issuecomment-615052462:332,Energy Efficiency,efficient,efficient,332,"Hi there, thanks a lot for including me on this. :) . Transition state optimization is implemented, but we have not tested it extensively against other codes. It does work quite well for in-house applications containing 50+ atoms. I'm very interested to see how you run these optimizations directly in Psi4. It should be a lot more efficient than calling Psi4 repeatedly on the command line. Also happy to provide examples of constrained optimization. Let me know if you need any.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615052462
https://github.com/psi4/psi4/pull/1813#issuecomment-615052462:71,Performance,optimiz,optimization,71,"Hi there, thanks a lot for including me on this. :) . Transition state optimization is implemented, but we have not tested it extensively against other codes. It does work quite well for in-house applications containing 50+ atoms. I'm very interested to see how you run these optimizations directly in Psi4. It should be a lot more efficient than calling Psi4 repeatedly on the command line. Also happy to provide examples of constrained optimization. Let me know if you need any.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615052462
https://github.com/psi4/psi4/pull/1813#issuecomment-615052462:276,Performance,optimiz,optimizations,276,"Hi there, thanks a lot for including me on this. :) . Transition state optimization is implemented, but we have not tested it extensively against other codes. It does work quite well for in-house applications containing 50+ atoms. I'm very interested to see how you run these optimizations directly in Psi4. It should be a lot more efficient than calling Psi4 repeatedly on the command line. Also happy to provide examples of constrained optimization. Let me know if you need any.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615052462
https://github.com/psi4/psi4/pull/1813#issuecomment-615052462:438,Performance,optimiz,optimization,438,"Hi there, thanks a lot for including me on this. :) . Transition state optimization is implemented, but we have not tested it extensively against other codes. It does work quite well for in-house applications containing 50+ atoms. I'm very interested to see how you run these optimizations directly in Psi4. It should be a lot more efficient than calling Psi4 repeatedly on the command line. Also happy to provide examples of constrained optimization. Let me know if you need any.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615052462
https://github.com/psi4/psi4/pull/1813#issuecomment-615052462:116,Testability,test,tested,116,"Hi there, thanks a lot for including me on this. :) . Transition state optimization is implemented, but we have not tested it extensively against other codes. It does work quite well for in-house applications containing 50+ atoms. I'm very interested to see how you run these optimizations directly in Psi4. It should be a lot more efficient than calling Psi4 repeatedly on the command line. Also happy to provide examples of constrained optimization. Let me know if you need any.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615052462
https://github.com/psi4/psi4/pull/1813#issuecomment-615084584:202,Availability,checkpoint,checkpoint,202,Is there a performance benefit over running the program in the command line? Nuclear forces / hessians i/o is inconsequential compared to the quantum chemistry part. Any savings would come from reusing checkpoint information for the Fock / density matrices... right?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615084584
https://github.com/psi4/psi4/pull/1813#issuecomment-615084584:11,Performance,perform,performance,11,Is there a performance benefit over running the program in the command line? Nuclear forces / hessians i/o is inconsequential compared to the quantum chemistry part. Any savings would come from reusing checkpoint information for the Fock / density matrices... right?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615084584
https://github.com/psi4/psi4/pull/1813#issuecomment-615104789:109,Availability,down,down,109,I'm just referring to the overhead associated with setup & teardown of the calculation. It could slow things down if the calculations are fast (which might be the case with semiempirical methods or minimal basis sets).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615104789
https://github.com/psi4/psi4/pull/1813#issuecomment-615224465:74,Performance,load,loading,74,"It can a bit, Psi's startup time is ~0.4 seconds or so with all of Python loading in. In general QC will dwarf this time so it isn't much of an issue. Your right though with XTB and DFTB it gets more interesting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615224465
https://github.com/psi4/psi4/pull/1814#issuecomment-630179716:289,Modifiability,variab,variable,289,This pull request **introduces 6 alerts** when merging 045b406c1297b920491547ea16f4d74d9297ecc3 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-4b13d0b588cee328bfe8367e2e961021cc099959). **new alerts:**. * 3 for Unused local variable; * 2 for Wrong number of arguments in a call; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-630179716
https://github.com/psi4/psi4/pull/1814#issuecomment-630353814:289,Modifiability,variab,variable,289,This pull request **introduces 6 alerts** when merging 488a04e374e0b719f8e2ab52eeb30abb8f61f422 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e37292bb2c83649313b4a9650424fbee07599d25). **new alerts:**. * 3 for Unused local variable; * 2 for Wrong number of arguments in a call; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-630353814
https://github.com/psi4/psi4/pull/1814#issuecomment-630952798:289,Modifiability,variab,variable,289,This pull request **introduces 3 alerts** when merging c5de1fc1d7e7f04cb4cb2e4d428f69fe7ded2912 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a4adf33dc27a26a38747d55b56206af1a411325a). **new alerts:**. * 3 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-630952798
https://github.com/psi4/psi4/pull/1814#issuecomment-631396705:289,Modifiability,variab,variable,289,This pull request **introduces 3 alerts** when merging c14c00323f180fe7ff5c3f23e6c65a46537adca8 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-185d41b9eddf87bd1348a081ae083b24a201f9ac). **new alerts:**. * 3 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-631396705
https://github.com/psi4/psi4/pull/1814#issuecomment-631555791:5,Testability,test,tests,5,Unit tests fail because the velocity-gauge electric dipole transition moments are not quite the same as the reference.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-631555791
https://github.com/psi4/psi4/pull/1814#issuecomment-631617323:341,Availability,Redundant,Redundant,341,This pull request **introduces 1 alert** and **fixes 1** when merging bbaeafca76f0b8f0657f63704be6c24c774151d2 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-af9d090bb28f72b3456f9ecc4bacbd1194bf0e45). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-631617323
https://github.com/psi4/psi4/pull/1814#issuecomment-631617323:304,Modifiability,variab,variable,304,This pull request **introduces 1 alert** and **fixes 1** when merging bbaeafca76f0b8f0657f63704be6c24c774151d2 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-af9d090bb28f72b3456f9ecc4bacbd1194bf0e45). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-631617323
https://github.com/psi4/psi4/pull/1814#issuecomment-631617323:341,Safety,Redund,Redundant,341,This pull request **introduces 1 alert** and **fixes 1** when merging bbaeafca76f0b8f0657f63704be6c24c774151d2 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-af9d090bb28f72b3456f9ecc4bacbd1194bf0e45). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-631617323
https://github.com/psi4/psi4/pull/1814#issuecomment-632142335:342,Availability,Redundant,Redundant,342,This pull request **introduces 2 alerts** and **fixes 1** when merging 9b95c9a47cfe0cf8c58856d9dac9438954f03aa6 into 48958305338231540da2d23670a0b396289ac52a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a6422872aa19929786271260d5be4c41a2b6237f). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632142335
https://github.com/psi4/psi4/pull/1814#issuecomment-632142335:305,Modifiability,variab,variable,305,This pull request **introduces 2 alerts** and **fixes 1** when merging 9b95c9a47cfe0cf8c58856d9dac9438954f03aa6 into 48958305338231540da2d23670a0b396289ac52a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a6422872aa19929786271260d5be4c41a2b6237f). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632142335
https://github.com/psi4/psi4/pull/1814#issuecomment-632142335:342,Safety,Redund,Redundant,342,This pull request **introduces 2 alerts** and **fixes 1** when merging 9b95c9a47cfe0cf8c58856d9dac9438954f03aa6 into 48958305338231540da2d23670a0b396289ac52a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a6422872aa19929786271260d5be4c41a2b6237f). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632142335
https://github.com/psi4/psi4/pull/1814#issuecomment-632603458:342,Availability,Redundant,Redundant,342,This pull request **introduces 2 alerts** and **fixes 1** when merging 1b5210dbe737c9ac457492d53ff84b354cfc7f7a into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c14a24ebff769e8beefb4fd5c8030e03aa18477c). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632603458
https://github.com/psi4/psi4/pull/1814#issuecomment-632603458:305,Modifiability,variab,variable,305,This pull request **introduces 2 alerts** and **fixes 1** when merging 1b5210dbe737c9ac457492d53ff84b354cfc7f7a into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c14a24ebff769e8beefb4fd5c8030e03aa18477c). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632603458
https://github.com/psi4/psi4/pull/1814#issuecomment-632603458:342,Safety,Redund,Redundant,342,This pull request **introduces 2 alerts** and **fixes 1** when merging 1b5210dbe737c9ac457492d53ff84b354cfc7f7a into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c14a24ebff769e8beefb4fd5c8030e03aa18477c). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632603458
https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:487,Availability,down,down,487,"This is ready for review. With my latest changes:; - The user specifies a number of roots to seek to converge. If the system has symmetry, we spread them around among the irreps. For example, 10 roots in C2v means `[3, 3, 2, 2]` in whatever order the irreps are for the given system. To have more granular control over what symmetries to seek roots in, the user can pass a list: `[10, 0, 0, 0]` will seek the 10 roots in the totally symmetric irrep.; - Option for triplets is now passed down to the solver correctly. `""none""` is the default (singlet roots only); `""also""` will compute as many singlet roots as triplet roots, so this makes the calculation cost twice as much (at least). Notable limitations:; - restricted triplets: RPA or TDA, Hartree-Fock only. Notes in code state that the XC kernel is only spin-adapted for singlets.; - unresctricted: RPA or TDA, Hartre-Fock and LDA only. Notes in code state that there is a bug for UKS beyond LDA, but aren't more specific than that. I am waiting on #1885 to be in to write docs. An example of PsiAPI usage:; ```python; import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). # structure from Pederson et al., CPL, submitted; moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). method = 'HF'; basis = 'cc-pVDZ'; e, wfn = psi4.energy(f""{method}/{basis}"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). from typing import Tuple, Dict. import numpy as np; import pandas as pd; import altair as alt. def plot_spectrum(data: Dict,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226
https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:814,Energy Efficiency,adapt,adapted,814,"This is ready for review. With my latest changes:; - The user specifies a number of roots to seek to converge. If the system has symmetry, we spread them around among the irreps. For example, 10 roots in C2v means `[3, 3, 2, 2]` in whatever order the irreps are for the given system. To have more granular control over what symmetries to seek roots in, the user can pass a list: `[10, 0, 0, 0]` will seek the 10 roots in the totally symmetric irrep.; - Option for triplets is now passed down to the solver correctly. `""none""` is the default (singlet roots only); `""also""` will compute as many singlet roots as triplet roots, so this makes the calculation cost twice as much (at least). Notable limitations:; - restricted triplets: RPA or TDA, Hartree-Fock only. Notes in code state that the XC kernel is only spin-adapted for singlets.; - unresctricted: RPA or TDA, Hartre-Fock and LDA only. Notes in code state that there is a bug for UKS beyond LDA, but aren't more specific than that. I am waiting on #1885 to be in to write docs. An example of PsiAPI usage:; ```python; import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). # structure from Pederson et al., CPL, submitted; moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). method = 'HF'; basis = 'cc-pVDZ'; e, wfn = psi4.energy(f""{method}/{basis}"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). from typing import Tuple, Dict. import numpy as np; import pandas as pd; import altair as alt. def plot_spectrum(data: Dict,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226
https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:1759,Energy Efficiency,energy,energy,1759,"pted for singlets.; - unresctricted: RPA or TDA, Hartre-Fock and LDA only. Notes in code state that there is a bug for UKS beyond LDA, but aren't more specific than that. I am waiting on #1885 to be in to write docs. An example of PsiAPI usage:; ```python; import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). # structure from Pederson et al., CPL, submitted; moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). method = 'HF'; basis = 'cc-pVDZ'; e, wfn = psi4.energy(f""{method}/{basis}"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). from typing import Tuple, Dict. import numpy as np; import pandas as pd; import altair as alt. def plot_spectrum(data: Dict,; *,; title: str = """",; x_title: Tuple[str, str] = (""ω"", ""au""),; y_title: Tuple[str, str] = (""ε"", ""L⋅mol⁻¹⋅cm⁻¹""),; offset: int = 0):; hover = alt.selection_single(; fields=[""x""],; nearest=True,; on=""mouseover"",; empty=""none"",; clear=""mouseout""; ). s1 = pd.DataFrame(data[""convolution""]); lines = alt.Chart(s1).mark_line(size=1.5).encode(; x=alt.X(""x"", axis=alt.Axis(title=f""{x_title[0]} [{x_title[1]}]"", offset=offset)),; y=alt.Y(""y"", axis=alt.Axis(title=f""{y_title[0]} [{y_title[1]}]"")),; ). points = lines.transform_filter(hover).mark_circle(). tooltips = alt.Chart(s1).mark_rule().encode(; x='x:Q',; opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),; tooltip=[alt.Tooltip(""x:Q"", format="".4f"", title=f""{x_title[0]}""), alt.Tooltip(""y:Q"", format="".1f"", title=f""{y_title[0]}"")]; ).add_selection(; hover; ). ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226
https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:3186,Energy Efficiency,ENERGY,ENERGY,3186,"ields=[""x""],; nearest=True,; on=""mouseover"",; empty=""none"",; clear=""mouseout""; ). s1 = pd.DataFrame(data[""convolution""]); lines = alt.Chart(s1).mark_line(size=1.5).encode(; x=alt.X(""x"", axis=alt.Axis(title=f""{x_title[0]} [{x_title[1]}]"", offset=offset)),; y=alt.Y(""y"", axis=alt.Axis(title=f""{y_title[0]} [{y_title[1]}]"")),; ). points = lines.transform_filter(hover).mark_circle(). tooltips = alt.Chart(s1).mark_rule().encode(; x='x:Q',; opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),; tooltip=[alt.Tooltip(""x:Q"", format="".4f"", title=f""{x_title[0]}""), alt.Tooltip(""y:Q"", format="".1f"", title=f""{y_title[0]}"")]; ).add_selection(; hover; ). s2 = pd.DataFrame(data[""sticks""]); sticks = alt.Chart(s2).mark_bar(size=2, opacity=0.2, color=""red"").encode(; x=""poles:Q"",; y=""residues:Q"",; ). # Put the layers into a chart and bind the data; plot = alt.layer(; lines, points, tooltips, sticks,; ).properties(; title=title,; ). return plot. # get poles and residues to plot OPA and ECD spectra; poles = [r[""EXCITATION ENERGY""] for r in res]; opa_residues = [np.linalg.norm(r[""LENGTH-GAUGE ELECTRIC DIPOLE TRANSITION MOMENT""])**2 for r in res]; ecd_residues = [r[""LENGTH-GAUGE ROTATORY STRENGTH""] for r in res]. opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); opa_plot = plot_spectrum(opa_spectrum,; title=""OPA (Gaussian broadening)"",; x_title=(""λ"", ""nm"")). ecd_spectrum = spectrum(poles=poles, residues=ecd_residues, kind=""ECD"", gamma=0.01, out_units=""nm""); ecd_plot = plot_spectrum(ecd_spectrum,; title=""ECD (Gaussian broadening)"",; x_title=(""λ"", ""nm""),; y_title=(""Δε"", ""L⋅mol⁻¹⋅cm⁻¹"")). (opa_plot & ecd_plot).save(""moxy.html""); ```; and obtain these plots:; ![visualization](https://user-images.githubusercontent.com/3708689/82666127-7ba78f80-9c35-11ea-9768-e291b2e69f67.png). The plotting function itself (`plot_spectrum`) is not in Psi4. The `spectrum` function will compute the convolution with the selected lineshape and then with that data any plotting ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226
https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:4615,Energy Efficiency,Energy,Energy,4615,"nm""),; y_title=(""Δε"", ""L⋅mol⁻¹⋅cm⁻¹"")). (opa_plot & ecd_plot).save(""moxy.html""); ```; and obtain these plots:; ![visualization](https://user-images.githubusercontent.com/3708689/82666127-7ba78f80-9c35-11ea-9768-e291b2e69f67.png). The plotting function itself (`plot_spectrum`) is not in Psi4. The `spectrum` function will compute the convolution with the selected lineshape and then with that data any plotting library will work. Here I am using [Altair](https://altair-viz.github.io/). The output file contains the following summary:; ```; ******************************************************************************************; ********** WARNING **********; ********** Length-gauge rotatory strengths are **NOT** gauge-origin invariant **********; ******************************************************************************************. Excitation Energy Total Energy Oscillator Strength Rotatory Strength ; # Sym: GS->ES (Trans) au eV au au (length) au (velocity) au (length) au (velocity) ; ---- -------------------- --------------- --------------- --------------- --------------- --------------- --------------- ---------------; 1 A->A (3 A) 0.29232 7.95436 -191.62963 0.0000 0.0000 0.0000 -0.0000 ; 2 A->A (3 A) 0.32745 8.91025 -191.59450 0.0000 0.0000 0.0000 -0.0000 ; 3 A->A (3 A) 0.33091 9.00446 -191.59104 0.0000 0.0000 0.0000 -0.0000 ; 4 A->A (3 A) 0.34771 9.46180 -191.57423 0.0000 0.0000 0.0000 -0.0000 ; 5 A->A (3 A) 0.36617 9.96389 -191.55578 0.0000 0.0000 0.0000 -0.0000 ; 6 A->A (1 A) 0.36723 9.99278 -191.55472 0.0030 0.0073 -0.0070 -0.0076 ; 7 A->A (3 A) 0.38101 10.36789 -191.54093 0.0000 0.0000 0.0000 -0.0000 ; 8 A->A (3 A) 0.38434 10.45833 -191.53761 0.0000 0.0000 0.0000 -0.0000 ; 9 A->A (1 A) 0.38603 10.50444 -191.53591 0.0057 0.0118 0.0207 0.0211 ; 10 A->A (3 A) 0.39165 10.65733 -191.53030 0.0000 0.0000 0.0000 -0.0000 ; 11 A->A (1 A) 0.39470 10.74043 -191.52724 0.0255 0.0287 0.0509 0.0617 ; 12 A->A (1 A) 0.40636 11.05757 -191.51559 0.1813 0.1877 0.0663 0.0563 ; 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226
https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:4628,Energy Efficiency,Energy,Energy,4628,"nm""),; y_title=(""Δε"", ""L⋅mol⁻¹⋅cm⁻¹"")). (opa_plot & ecd_plot).save(""moxy.html""); ```; and obtain these plots:; ![visualization](https://user-images.githubusercontent.com/3708689/82666127-7ba78f80-9c35-11ea-9768-e291b2e69f67.png). The plotting function itself (`plot_spectrum`) is not in Psi4. The `spectrum` function will compute the convolution with the selected lineshape and then with that data any plotting library will work. Here I am using [Altair](https://altair-viz.github.io/). The output file contains the following summary:; ```; ******************************************************************************************; ********** WARNING **********; ********** Length-gauge rotatory strengths are **NOT** gauge-origin invariant **********; ******************************************************************************************. Excitation Energy Total Energy Oscillator Strength Rotatory Strength ; # Sym: GS->ES (Trans) au eV au au (length) au (velocity) au (length) au (velocity) ; ---- -------------------- --------------- --------------- --------------- --------------- --------------- --------------- ---------------; 1 A->A (3 A) 0.29232 7.95436 -191.62963 0.0000 0.0000 0.0000 -0.0000 ; 2 A->A (3 A) 0.32745 8.91025 -191.59450 0.0000 0.0000 0.0000 -0.0000 ; 3 A->A (3 A) 0.33091 9.00446 -191.59104 0.0000 0.0000 0.0000 -0.0000 ; 4 A->A (3 A) 0.34771 9.46180 -191.57423 0.0000 0.0000 0.0000 -0.0000 ; 5 A->A (3 A) 0.36617 9.96389 -191.55578 0.0000 0.0000 0.0000 -0.0000 ; 6 A->A (1 A) 0.36723 9.99278 -191.55472 0.0030 0.0073 -0.0070 -0.0076 ; 7 A->A (3 A) 0.38101 10.36789 -191.54093 0.0000 0.0000 0.0000 -0.0000 ; 8 A->A (3 A) 0.38434 10.45833 -191.53761 0.0000 0.0000 0.0000 -0.0000 ; 9 A->A (1 A) 0.38603 10.50444 -191.53591 0.0057 0.0118 0.0207 0.0211 ; 10 A->A (3 A) 0.39165 10.65733 -191.53030 0.0000 0.0000 0.0000 -0.0000 ; 11 A->A (1 A) 0.39470 10.74043 -191.52724 0.0255 0.0287 0.0509 0.0617 ; 12 A->A (1 A) 0.40636 11.05757 -191.51559 0.1813 0.1877 0.0663 0.0563 ; 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226
https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:814,Modifiability,adapt,adapted,814,"This is ready for review. With my latest changes:; - The user specifies a number of roots to seek to converge. If the system has symmetry, we spread them around among the irreps. For example, 10 roots in C2v means `[3, 3, 2, 2]` in whatever order the irreps are for the given system. To have more granular control over what symmetries to seek roots in, the user can pass a list: `[10, 0, 0, 0]` will seek the 10 roots in the totally symmetric irrep.; - Option for triplets is now passed down to the solver correctly. `""none""` is the default (singlet roots only); `""also""` will compute as many singlet roots as triplet roots, so this makes the calculation cost twice as much (at least). Notable limitations:; - restricted triplets: RPA or TDA, Hartree-Fock only. Notes in code state that the XC kernel is only spin-adapted for singlets.; - unresctricted: RPA or TDA, Hartre-Fock and LDA only. Notes in code state that there is a bug for UKS beyond LDA, but aren't more specific than that. I am waiting on #1885 to be in to write docs. An example of PsiAPI usage:; ```python; import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). # structure from Pederson et al., CPL, submitted; moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). method = 'HF'; basis = 'cc-pVDZ'; e, wfn = psi4.energy(f""{method}/{basis}"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). from typing import Tuple, Dict. import numpy as np; import pandas as pd; import altair as alt. def plot_spectrum(data: Dict,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226
https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:2972,Modifiability,layers,layers,2972,"ata: Dict,; *,; title: str = """",; x_title: Tuple[str, str] = (""ω"", ""au""),; y_title: Tuple[str, str] = (""ε"", ""L⋅mol⁻¹⋅cm⁻¹""),; offset: int = 0):; hover = alt.selection_single(; fields=[""x""],; nearest=True,; on=""mouseover"",; empty=""none"",; clear=""mouseout""; ). s1 = pd.DataFrame(data[""convolution""]); lines = alt.Chart(s1).mark_line(size=1.5).encode(; x=alt.X(""x"", axis=alt.Axis(title=f""{x_title[0]} [{x_title[1]}]"", offset=offset)),; y=alt.Y(""y"", axis=alt.Axis(title=f""{y_title[0]} [{y_title[1]}]"")),; ). points = lines.transform_filter(hover).mark_circle(). tooltips = alt.Chart(s1).mark_rule().encode(; x='x:Q',; opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),; tooltip=[alt.Tooltip(""x:Q"", format="".4f"", title=f""{x_title[0]}""), alt.Tooltip(""y:Q"", format="".1f"", title=f""{y_title[0]}"")]; ).add_selection(; hover; ). s2 = pd.DataFrame(data[""sticks""]); sticks = alt.Chart(s2).mark_bar(size=2, opacity=0.2, color=""red"").encode(; x=""poles:Q"",; y=""residues:Q"",; ). # Put the layers into a chart and bind the data; plot = alt.layer(; lines, points, tooltips, sticks,; ).properties(; title=title,; ). return plot. # get poles and residues to plot OPA and ECD spectra; poles = [r[""EXCITATION ENERGY""] for r in res]; opa_residues = [np.linalg.norm(r[""LENGTH-GAUGE ELECTRIC DIPOLE TRANSITION MOMENT""])**2 for r in res]; ecd_residues = [r[""LENGTH-GAUGE ROTATORY STRENGTH""] for r in res]. opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); opa_plot = plot_spectrum(opa_spectrum,; title=""OPA (Gaussian broadening)"",; x_title=(""λ"", ""nm"")). ecd_spectrum = spectrum(poles=poles, residues=ecd_residues, kind=""ECD"", gamma=0.01, out_units=""nm""); ecd_plot = plot_spectrum(ecd_spectrum,; title=""ECD (Gaussian broadening)"",; x_title=(""λ"", ""nm""),; y_title=(""Δε"", ""L⋅mol⁻¹⋅cm⁻¹"")). (opa_plot & ecd_plot).save(""moxy.html""); ```; and obtain these plots:; ![visualization](https://user-images.githubusercontent.com/3708689/82666127-7ba78f80-9c35-11ea-9768-e291b2e69f67.png). The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226
https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:2229,Usability,clear,clear,2229,"ctrum. psi4.core.set_output_file(""moxy.out""). # structure from Pederson et al., CPL, submitted; moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). method = 'HF'; basis = 'cc-pVDZ'; e, wfn = psi4.energy(f""{method}/{basis}"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). from typing import Tuple, Dict. import numpy as np; import pandas as pd; import altair as alt. def plot_spectrum(data: Dict,; *,; title: str = """",; x_title: Tuple[str, str] = (""ω"", ""au""),; y_title: Tuple[str, str] = (""ε"", ""L⋅mol⁻¹⋅cm⁻¹""),; offset: int = 0):; hover = alt.selection_single(; fields=[""x""],; nearest=True,; on=""mouseover"",; empty=""none"",; clear=""mouseout""; ). s1 = pd.DataFrame(data[""convolution""]); lines = alt.Chart(s1).mark_line(size=1.5).encode(; x=alt.X(""x"", axis=alt.Axis(title=f""{x_title[0]} [{x_title[1]}]"", offset=offset)),; y=alt.Y(""y"", axis=alt.Axis(title=f""{y_title[0]} [{y_title[1]}]"")),; ). points = lines.transform_filter(hover).mark_circle(). tooltips = alt.Chart(s1).mark_rule().encode(; x='x:Q',; opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),; tooltip=[alt.Tooltip(""x:Q"", format="".4f"", title=f""{x_title[0]}""), alt.Tooltip(""y:Q"", format="".1f"", title=f""{y_title[0]}"")]; ).add_selection(; hover; ). s2 = pd.DataFrame(data[""sticks""]); sticks = alt.Chart(s2).mark_bar(size=2, opacity=0.2, color=""red"").encode(; x=""poles:Q"",; y=""residues:Q"",; ). # Put the layers into a chart and bind the data; plot = alt.layer(; lines, points, tooltips, sticks,; ).properties(; title=title,; ). return plot. # get poles and residues to plot OPA and ECD spectra; poles = [r[""EXCITATION ENERGY""] for ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226
https://github.com/psi4/psi4/pull/1814#issuecomment-632722306:272,Availability,Redundant,Redundant,272,This pull request **fixes 1 alert** when merging f715e11e174760f3415ced1b6fff154ed5d9ce3c into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-66d8003b5900a07ff0545b9c739c7ba5c7a56ea1). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632722306
https://github.com/psi4/psi4/pull/1814#issuecomment-632722306:272,Safety,Redund,Redundant,272,This pull request **fixes 1 alert** when merging f715e11e174760f3415ced1b6fff154ed5d9ce3c into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-66d8003b5900a07ff0545b9c739c7ba5c7a56ea1). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632722306
https://github.com/psi4/psi4/pull/1814#issuecomment-632829864:272,Availability,Redundant,Redundant,272,This pull request **fixes 1 alert** when merging 748bae92d70cf0e19af497f556068be7c3721f34 into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5beb9c3620c1b55e8eb5ef7829a2c59d0d407612). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632829864
https://github.com/psi4/psi4/pull/1814#issuecomment-632829864:272,Safety,Redund,Redundant,272,This pull request **fixes 1 alert** when merging 748bae92d70cf0e19af497f556068be7c3721f34 into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5beb9c3620c1b55e8eb5ef7829a2c59d0d407612). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632829864
https://github.com/psi4/psi4/pull/1814#issuecomment-633024058:272,Availability,Redundant,Redundant,272,This pull request **fixes 1 alert** when merging f55573bde60e561ca64f5e5aeddb5f61dd41d371 into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e3da07fa43c3dda1694d8fb758216fe82b3a6579). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633024058
https://github.com/psi4/psi4/pull/1814#issuecomment-633024058:272,Safety,Redund,Redundant,272,This pull request **fixes 1 alert** when merging f55573bde60e561ca64f5e5aeddb5f61dd41d371 into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e3da07fa43c3dda1694d8fb758216fe82b3a6579). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633024058
https://github.com/psi4/psi4/pull/1814#issuecomment-633650674:272,Availability,Redundant,Redundant,272,This pull request **fixes 1 alert** when merging 2b7850eeeb1dc8d025e15d68ea6b2349acc8cbad into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d2be110d7ae94dbcc4973fbdc5a098a0880f12e9). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633650674
https://github.com/psi4/psi4/pull/1814#issuecomment-633650674:272,Safety,Redund,Redundant,272,This pull request **fixes 1 alert** when merging 2b7850eeeb1dc8d025e15d68ea6b2349acc8cbad into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d2be110d7ae94dbcc4973fbdc5a098a0880f12e9). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633650674
https://github.com/psi4/psi4/pull/1814#issuecomment-633934735:272,Availability,Redundant,Redundant,272,This pull request **fixes 1 alert** when merging 2d2c8cd002229f90176b3d930e2c28714de7e079 into c9b79fb016d8e3b09e8dd980093da576d06ce03d - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-254cf1d1e2f779ca42d4f2d520a4a6cad494a4eb). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633934735
https://github.com/psi4/psi4/pull/1814#issuecomment-633934735:272,Safety,Redund,Redundant,272,This pull request **fixes 1 alert** when merging 2d2c8cd002229f90176b3d930e2c28714de7e079 into c9b79fb016d8e3b09e8dd980093da576d06ce03d - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-254cf1d1e2f779ca42d4f2d520a4a6cad494a4eb). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633934735
https://github.com/psi4/psi4/pull/1814#issuecomment-634140366:74,Usability,clear,clear,74,"I think JS analysis is squashed now, so ready for another try. No need to clear up history imo. I think it has to be `identifier`, not `@identifier` since latter not in JSON-LD (unless you're understanding the schema differently). I hadn't seem that you tried the id->identifier, or I wouldn't have starting in on #1905, sorry.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-634140366
https://github.com/psi4/psi4/pull/1814#issuecomment-634552573:272,Availability,Redundant,Redundant,272,This pull request **fixes 1 alert** when merging e82cd637a7bbb2a0ab9613f5df07b79d5fe14555 into ea5b5eb71ab65469629b345d78fe6e7b1a5a34fa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ce8ad6faf1c1497dbd02ae59bfe7b34ffe12cffa). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-634552573
https://github.com/psi4/psi4/pull/1814#issuecomment-634552573:272,Safety,Redund,Redundant,272,This pull request **fixes 1 alert** when merging e82cd637a7bbb2a0ab9613f5df07b79d5fe14555 into ea5b5eb71ab65469629b345d78fe6e7b1a5a34fa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ce8ad6faf1c1497dbd02ae59bfe7b34ffe12cffa). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-634552573
https://github.com/psi4/psi4/pull/1814#issuecomment-634602868:46,Energy Efficiency,green,green,46,"@loriab JavaScript is gone and the builds are green. I'm stashing the converged response vectors in the `Wavefunction` too, this should enable the computation of other transition quantities, if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-634602868
https://github.com/psi4/psi4/pull/1814#issuecomment-634678153:272,Availability,Redundant,Redundant,272,This pull request **fixes 1 alert** when merging ae77767cd65e9001c9e56fcde7c5bf4abab27e9a into ea5b5eb71ab65469629b345d78fe6e7b1a5a34fa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c491159b4fb95f1b6ad5ec2471c7b5a6e28e9015). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-634678153
https://github.com/psi4/psi4/pull/1814#issuecomment-634678153:272,Safety,Redund,Redundant,272,This pull request **fixes 1 alert** when merging ae77767cd65e9001c9e56fcde7c5bf4abab27e9a into ea5b5eb71ab65469629b345d78fe6e7b1a5a34fa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c491159b4fb95f1b6ad5ec2471c7b5a6e28e9015). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-634678153
https://github.com/psi4/psi4/pull/1814#issuecomment-635267517:272,Availability,Redundant,Redundant,272,This pull request **fixes 1 alert** when merging eb0938024a80785ce5a99f1491a2be2f0a5548dd into 66da0fea4b3dbab319b6b517fca0a3983256781f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d746dd3b769b758b7085d20f4fd85ed38912269d). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-635267517
https://github.com/psi4/psi4/pull/1814#issuecomment-635267517:272,Safety,Redund,Redundant,272,This pull request **fixes 1 alert** when merging eb0938024a80785ce5a99f1491a2be2f0a5548dd into 66da0fea4b3dbab319b6b517fca0a3983256781f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d746dd3b769b758b7085d20f4fd85ed38912269d). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-635267517
https://github.com/psi4/psi4/pull/1814#issuecomment-638313947:272,Availability,Redundant,Redundant,272,This pull request **fixes 1 alert** when merging 643451ec8104ee345521b0675147a520ee43629b into 58d3bc0ae55d3affca9c75c80126be08d610915c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0b919987994ea1b1be45839c560908e938a58255). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-638313947
https://github.com/psi4/psi4/pull/1814#issuecomment-638313947:272,Safety,Redund,Redundant,272,This pull request **fixes 1 alert** when merging 643451ec8104ee345521b0675147a520ee43629b into 58d3bc0ae55d3affca9c75c80126be08d610915c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0b919987994ea1b1be45839c560908e938a58255). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-638313947
https://github.com/psi4/psi4/pull/1814#issuecomment-641954616:272,Availability,Redundant,Redundant,272,This pull request **fixes 1 alert** when merging d232b91fae696c3e5ff52e092ac2bc3b19dfe35b into 741f46ea0bf7a3591988040538589eecaa8f0ab8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a1910976e51a18d568b90d9aca9fd67f7b151905). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-641954616
https://github.com/psi4/psi4/pull/1814#issuecomment-641954616:272,Safety,Redund,Redundant,272,This pull request **fixes 1 alert** when merging d232b91fae696c3e5ff52e092ac2bc3b19dfe35b into 741f46ea0bf7a3591988040538589eecaa8f0ab8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a1910976e51a18d568b90d9aca9fd67f7b151905). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-641954616
https://github.com/psi4/psi4/pull/1814#issuecomment-642655962:227,Testability,log,logic,227,"I've rebased on top of Jeff's (#1885) changes. I need to implement the handling of triplets _à la_ famous program. Is there a way to have the `TDSCF_STATES` option be either an array or an integer? It would be good to move the logic for apportioning states per irrep (and triplets) further up from `tdscf_excitations`, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-642655962
https://github.com/psi4/psi4/pull/1814#issuecomment-642811449:341,Availability,Redundant,Redundant,341,This pull request **introduces 1 alert** and **fixes 2** when merging 29961b2d54eba96b9cc3688900e512db98e834a6 into c05d38b04dc8500c1cd9f92e5f313bebac15e219 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f2d58b3d379a82a33b29490be79a38a91a155f49). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-642811449
https://github.com/psi4/psi4/pull/1814#issuecomment-642811449:304,Modifiability,variab,variable,304,This pull request **introduces 1 alert** and **fixes 2** when merging 29961b2d54eba96b9cc3688900e512db98e834a6 into c05d38b04dc8500c1cd9f92e5f313bebac15e219 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f2d58b3d379a82a33b29490be79a38a91a155f49). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-642811449
https://github.com/psi4/psi4/pull/1814#issuecomment-642811449:384,Modifiability,variab,variable,384,This pull request **introduces 1 alert** and **fixes 2** when merging 29961b2d54eba96b9cc3688900e512db98e834a6 into c05d38b04dc8500c1cd9f92e5f313bebac15e219 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f2d58b3d379a82a33b29490be79a38a91a155f49). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-642811449
https://github.com/psi4/psi4/pull/1814#issuecomment-642811449:341,Safety,Redund,Redundant,341,This pull request **introduces 1 alert** and **fixes 2** when merging 29961b2d54eba96b9cc3688900e512db98e834a6 into c05d38b04dc8500c1cd9f92e5f313bebac15e219 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f2d58b3d379a82a33b29490be79a38a91a155f49). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-642811449
https://github.com/psi4/psi4/pull/1814#issuecomment-643662031:304,Availability,Redundant,Redundant,304,This pull request **fixes 3 alerts** when merging 886f6f2c3bb882a600f22d42fe55683417408405 into 5f1a24a8b6b77b0d368cd434c0584f027a28d975 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6e817128cb8d64d1e00edc7bd75efa82e352418d). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-643662031
https://github.com/psi4/psi4/pull/1814#issuecomment-643662031:286,Modifiability,variab,variable,286,This pull request **fixes 3 alerts** when merging 886f6f2c3bb882a600f22d42fe55683417408405 into 5f1a24a8b6b77b0d368cd434c0584f027a28d975 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6e817128cb8d64d1e00edc7bd75efa82e352418d). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-643662031
https://github.com/psi4/psi4/pull/1814#issuecomment-643662031:304,Safety,Redund,Redundant,304,This pull request **fixes 3 alerts** when merging 886f6f2c3bb882a600f22d42fe55683417408405 into 5f1a24a8b6b77b0d368cd434c0584f027a28d975 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6e817128cb8d64d1e00edc7bd75efa82e352418d). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-643662031
https://github.com/psi4/psi4/pull/1814#issuecomment-644203551:39,Safety,safe,safe,39,"So far I think this looks great - type safe python with a lot of testing, and a great modular design for the solvers. I really like the line broadening plot generation. If there's some kind of provenance info that can be added to the json reference data file that would be handy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644203551
https://github.com/psi4/psi4/pull/1814#issuecomment-644203551:65,Testability,test,testing,65,"So far I think this looks great - type safe python with a lot of testing, and a great modular design for the solvers. I really like the line broadening plot generation. If there's some kind of provenance info that can be added to the json reference data file that would be handy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644203551
https://github.com/psi4/psi4/pull/1814#issuecomment-644236820:524,Availability,checkpoint,checkpoint,524,"> So far I think this looks great - type safe python with a lot of testing, and a great modular design for the solvers. . All AJ's work!. > I really like the line broadening plot generation. . Thanks, it took me an embarrassingly long amount of time to check that units of measure all made sense... > If there's some kind of provenance info that can be added to the json reference data file that would be handy. I have the raw G09 input and output files, together with the notebook that extracts the data from the formatted checkpoint files. Should I include that in the `pytests` folder?. @loriab I'm seeing some funny behavior (or most likely I don't understand what the normal behavior actually is); ```; molecule {; 0 1; O 0.000000 0.695000 -0.092486; O -0.000000 -0.695000 -0.092486; H -0.388142 0.895249 0.739888; H 0.388142 -0.895249 0.739888; }. set {; tdscf_states 10; scf_type pk; }. energy('td-scf/cc-pvdz'); ```; I'd expect this to converge the wavefunction to `D_CONVERGENCE` 1e-6 and then compute the 10 states to `TDSCF_R_CONVERGENCE` 1e-4 The thresholds seems however to be 1e-8 (and 1e-6) respectively. I can't figure out where `D_CONVERGENCE` gets tightened from what stated in the [table](http://psicode.org/psi4manual/master/scf.html#convergence-and-algorithm-defaults)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644236820
https://github.com/psi4/psi4/pull/1814#issuecomment-644236820:894,Energy Efficiency,energy,energy,894,"> So far I think this looks great - type safe python with a lot of testing, and a great modular design for the solvers. . All AJ's work!. > I really like the line broadening plot generation. . Thanks, it took me an embarrassingly long amount of time to check that units of measure all made sense... > If there's some kind of provenance info that can be added to the json reference data file that would be handy. I have the raw G09 input and output files, together with the notebook that extracts the data from the formatted checkpoint files. Should I include that in the `pytests` folder?. @loriab I'm seeing some funny behavior (or most likely I don't understand what the normal behavior actually is); ```; molecule {; 0 1; O 0.000000 0.695000 -0.092486; O -0.000000 -0.695000 -0.092486; H -0.388142 0.895249 0.739888; H 0.388142 -0.895249 0.739888; }. set {; tdscf_states 10; scf_type pk; }. energy('td-scf/cc-pvdz'); ```; I'd expect this to converge the wavefunction to `D_CONVERGENCE` 1e-6 and then compute the 10 states to `TDSCF_R_CONVERGENCE` 1e-4 The thresholds seems however to be 1e-8 (and 1e-6) respectively. I can't figure out where `D_CONVERGENCE` gets tightened from what stated in the [table](http://psicode.org/psi4manual/master/scf.html#convergence-and-algorithm-defaults)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644236820
https://github.com/psi4/psi4/pull/1814#issuecomment-644236820:41,Safety,safe,safe,41,"> So far I think this looks great - type safe python with a lot of testing, and a great modular design for the solvers. . All AJ's work!. > I really like the line broadening plot generation. . Thanks, it took me an embarrassingly long amount of time to check that units of measure all made sense... > If there's some kind of provenance info that can be added to the json reference data file that would be handy. I have the raw G09 input and output files, together with the notebook that extracts the data from the formatted checkpoint files. Should I include that in the `pytests` folder?. @loriab I'm seeing some funny behavior (or most likely I don't understand what the normal behavior actually is); ```; molecule {; 0 1; O 0.000000 0.695000 -0.092486; O -0.000000 -0.695000 -0.092486; H -0.388142 0.895249 0.739888; H 0.388142 -0.895249 0.739888; }. set {; tdscf_states 10; scf_type pk; }. energy('td-scf/cc-pvdz'); ```; I'd expect this to converge the wavefunction to `D_CONVERGENCE` 1e-6 and then compute the 10 states to `TDSCF_R_CONVERGENCE` 1e-4 The thresholds seems however to be 1e-8 (and 1e-6) respectively. I can't figure out where `D_CONVERGENCE` gets tightened from what stated in the [table](http://psicode.org/psi4manual/master/scf.html#convergence-and-algorithm-defaults)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644236820
https://github.com/psi4/psi4/pull/1814#issuecomment-644236820:67,Testability,test,testing,67,"> So far I think this looks great - type safe python with a lot of testing, and a great modular design for the solvers. . All AJ's work!. > I really like the line broadening plot generation. . Thanks, it took me an embarrassingly long amount of time to check that units of measure all made sense... > If there's some kind of provenance info that can be added to the json reference data file that would be handy. I have the raw G09 input and output files, together with the notebook that extracts the data from the formatted checkpoint files. Should I include that in the `pytests` folder?. @loriab I'm seeing some funny behavior (or most likely I don't understand what the normal behavior actually is); ```; molecule {; 0 1; O 0.000000 0.695000 -0.092486; O -0.000000 -0.695000 -0.092486; H -0.388142 0.895249 0.739888; H 0.388142 -0.895249 0.739888; }. set {; tdscf_states 10; scf_type pk; }. energy('td-scf/cc-pvdz'); ```; I'd expect this to converge the wavefunction to `D_CONVERGENCE` 1e-6 and then compute the 10 states to `TDSCF_R_CONVERGENCE` 1e-4 The thresholds seems however to be 1e-8 (and 1e-6) respectively. I can't figure out where `D_CONVERGENCE` gets tightened from what stated in the [table](http://psicode.org/psi4manual/master/scf.html#convergence-and-algorithm-defaults)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644236820
https://github.com/psi4/psi4/pull/1814#issuecomment-644301799:304,Availability,Redundant,Redundant,304,This pull request **fixes 3 alerts** when merging e8a99524a098b99c215ea9c9fd0d9f2b81fd5f9b into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-485d0633a6e802d5dead0de11395e4fd055349fb). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644301799
https://github.com/psi4/psi4/pull/1814#issuecomment-644301799:286,Modifiability,variab,variable,286,This pull request **fixes 3 alerts** when merging e8a99524a098b99c215ea9c9fd0d9f2b81fd5f9b into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-485d0633a6e802d5dead0de11395e4fd055349fb). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644301799
https://github.com/psi4/psi4/pull/1814#issuecomment-644301799:304,Safety,Redund,Redundant,304,This pull request **fixes 3 alerts** when merging e8a99524a098b99c215ea9c9fd0d9f2b81fd5f9b into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-485d0633a6e802d5dead0de11395e4fd055349fb). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644301799
https://github.com/psi4/psi4/pull/1814#issuecomment-644666491:323,Energy Efficiency,energy,energy,323,"> I've lost your `D_CONVERGENCE` comment, so answering here. Looks like expanding the functions that classify to SCF [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver_util.py#L96) will get the right 1.e-6 value. Thanks for the pointer. Now fixed with the following contraption:; ```python; if (procedures['energy'][method_name] == proc.run_scf; or procedures['energy'][method_name] == proc.run_tdscf_energy):; ```; so that TDSCF closely follows SCF. Probably there's a better way?. I'm also slightly puzzled at the following. TDSCF will fail to converge for non totally symmetric roots when running with symmetry _and_ density-fitting (which is by and large the default behavior for small-ish molecules, I believe) I thought this was a fluke for one particular system I was testing, but it does indeed show up consistently for irrep >= 1. The solver will either stall and die exceeding the maximum number of iterations (the subspace never grows after a certain, early iteration) or it will (falsely, I believe) identify a negative eigenvalue in the subspace representation of the Hessian (instability) and consequently fail.; Is there something in JK that I am misusing? @andysim @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644666491
https://github.com/psi4/psi4/pull/1814#issuecomment-644666491:377,Energy Efficiency,energy,energy,377,"> I've lost your `D_CONVERGENCE` comment, so answering here. Looks like expanding the functions that classify to SCF [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver_util.py#L96) will get the right 1.e-6 value. Thanks for the pointer. Now fixed with the following contraption:; ```python; if (procedures['energy'][method_name] == proc.run_scf; or procedures['energy'][method_name] == proc.run_tdscf_energy):; ```; so that TDSCF closely follows SCF. Probably there's a better way?. I'm also slightly puzzled at the following. TDSCF will fail to converge for non totally symmetric roots when running with symmetry _and_ density-fitting (which is by and large the default behavior for small-ish molecules, I believe) I thought this was a fluke for one particular system I was testing, but it does indeed show up consistently for irrep >= 1. The solver will either stall and die exceeding the maximum number of iterations (the subspace never grows after a certain, early iteration) or it will (falsely, I believe) identify a negative eigenvalue in the subspace representation of the Hessian (instability) and consequently fail.; Is there something in JK that I am misusing? @andysim @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644666491
https://github.com/psi4/psi4/pull/1814#issuecomment-644666491:791,Testability,test,testing,791,"> I've lost your `D_CONVERGENCE` comment, so answering here. Looks like expanding the functions that classify to SCF [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver_util.py#L96) will get the right 1.e-6 value. Thanks for the pointer. Now fixed with the following contraption:; ```python; if (procedures['energy'][method_name] == proc.run_scf; or procedures['energy'][method_name] == proc.run_tdscf_energy):; ```; so that TDSCF closely follows SCF. Probably there's a better way?. I'm also slightly puzzled at the following. TDSCF will fail to converge for non totally symmetric roots when running with symmetry _and_ density-fitting (which is by and large the default behavior for small-ish molecules, I believe) I thought this was a fluke for one particular system I was testing, but it does indeed show up consistently for irrep >= 1. The solver will either stall and die exceeding the maximum number of iterations (the subspace never grows after a certain, early iteration) or it will (falsely, I believe) identify a negative eigenvalue in the subspace representation of the Hessian (instability) and consequently fail.; Is there something in JK that I am misusing? @andysim @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644666491
https://github.com/psi4/psi4/pull/1814#issuecomment-644751262:304,Availability,Redundant,Redundant,304,This pull request **fixes 3 alerts** when merging 26dd489b730d6192edaec19d716bd118288b2761 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3e243df6c568db8e3fb5c827f875da7df7629608). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644751262
https://github.com/psi4/psi4/pull/1814#issuecomment-644751262:286,Modifiability,variab,variable,286,This pull request **fixes 3 alerts** when merging 26dd489b730d6192edaec19d716bd118288b2761 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3e243df6c568db8e3fb5c827f875da7df7629608). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644751262
https://github.com/psi4/psi4/pull/1814#issuecomment-644751262:304,Safety,Redund,Redundant,304,This pull request **fixes 3 alerts** when merging 26dd489b730d6192edaec19d716bd118288b2761 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3e243df6c568db8e3fb5c827f875da7df7629608). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644751262
https://github.com/psi4/psi4/pull/1814#issuecomment-644786185:72,Energy Efficiency,energy,energy,72,"The contraption you show above could also be written as `if procedures['energy'][method_name] in [proc.run_scf, proc.run_tdscf_energy]:`. Regarding the nirrep>1 problem, it sounds like the backtransformation is either not numerically sound or is not being applied correctly. I didn't see anything wrong in the first pass through but I'll look again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644786185
https://github.com/psi4/psi4/pull/1814#issuecomment-644794380:396,Availability,fault,faulty,396,"> The contraption you show above could also be written as `if procedures['energy'][method_name] in [proc.run_scf, proc.run_tdscf_energy]:`. . Yep, much cleaner syntax. > Regarding the nirrep>1 problem, it sounds like the backtransformation is either not numerically sound or is not being applied correctly. I didn't see anything wrong in the first pass through but I'll look again. The (probably faulty) code should be in `twoel_Hx` (and deeper) which was not touched in this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644794380
https://github.com/psi4/psi4/pull/1814#issuecomment-644794380:74,Energy Efficiency,energy,energy,74,"> The contraption you show above could also be written as `if procedures['energy'][method_name] in [proc.run_scf, proc.run_tdscf_energy]:`. . Yep, much cleaner syntax. > Regarding the nirrep>1 problem, it sounds like the backtransformation is either not numerically sound or is not being applied correctly. I didn't see anything wrong in the first pass through but I'll look again. The (probably faulty) code should be in `twoel_Hx` (and deeper) which was not touched in this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644794380
https://github.com/psi4/psi4/pull/1814#issuecomment-644908614:304,Availability,Redundant,Redundant,304,This pull request **fixes 3 alerts** when merging c04bf332addc72cf7d17f710b9ebf9046e67745d into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-cd35c8eb5ac96c8f187051a362c86e3042b4139a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644908614
https://github.com/psi4/psi4/pull/1814#issuecomment-644908614:286,Modifiability,variab,variable,286,This pull request **fixes 3 alerts** when merging c04bf332addc72cf7d17f710b9ebf9046e67745d into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-cd35c8eb5ac96c8f187051a362c86e3042b4139a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644908614
https://github.com/psi4/psi4/pull/1814#issuecomment-644908614:304,Safety,Redund,Redundant,304,This pull request **fixes 3 alerts** when merging c04bf332addc72cf7d17f710b9ebf9046e67745d into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-cd35c8eb5ac96c8f187051a362c86e3042b4139a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644908614
https://github.com/psi4/psi4/pull/1814#issuecomment-645294586:304,Availability,Redundant,Redundant,304,This pull request **fixes 3 alerts** when merging b907a23b7fc19b0f53df66237412be4ffa936d38 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-14201e7d5a09c3b6d04c364e80720d8cae55b372). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645294586
https://github.com/psi4/psi4/pull/1814#issuecomment-645294586:286,Modifiability,variab,variable,286,This pull request **fixes 3 alerts** when merging b907a23b7fc19b0f53df66237412be4ffa936d38 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-14201e7d5a09c3b6d04c364e80720d8cae55b372). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645294586
https://github.com/psi4/psi4/pull/1814#issuecomment-645294586:304,Safety,Redund,Redundant,304,This pull request **fixes 3 alerts** when merging b907a23b7fc19b0f53df66237412be4ffa936d38 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-14201e7d5a09c3b6d04c364e80720d8cae55b372). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645294586
https://github.com/psi4/psi4/pull/1814#issuecomment-645669096:304,Availability,Redundant,Redundant,304,This pull request **fixes 3 alerts** when merging 59f9232b2dcdb5b83df6e799aab9781dc7400ec0 into 9a2de04698459b23e55df5f582873fcff9b9a320 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b10a9d0172ee67a707b5e4730ed0a64843867e5a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645669096
https://github.com/psi4/psi4/pull/1814#issuecomment-645669096:286,Modifiability,variab,variable,286,This pull request **fixes 3 alerts** when merging 59f9232b2dcdb5b83df6e799aab9781dc7400ec0 into 9a2de04698459b23e55df5f582873fcff9b9a320 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b10a9d0172ee67a707b5e4730ed0a64843867e5a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645669096
https://github.com/psi4/psi4/pull/1814#issuecomment-645669096:304,Safety,Redund,Redundant,304,This pull request **fixes 3 alerts** when merging 59f9232b2dcdb5b83df6e799aab9781dc7400ec0 into 9a2de04698459b23e55df5f582873fcff9b9a320 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b10a9d0172ee67a707b5e4730ed0a64843867e5a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645669096
https://github.com/psi4/psi4/pull/1814#issuecomment-650202722:304,Availability,Redundant,Redundant,304,This pull request **fixes 3 alerts** when merging a2046e3cf4e86590471f2507d714a9e713e47ffa into 1cf7468090b1e0432811ff55811a380ea9469cb3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-10e94c75ac5916bddaeb30d709d3e42401046033). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-650202722
https://github.com/psi4/psi4/pull/1814#issuecomment-650202722:286,Modifiability,variab,variable,286,This pull request **fixes 3 alerts** when merging a2046e3cf4e86590471f2507d714a9e713e47ffa into 1cf7468090b1e0432811ff55811a380ea9469cb3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-10e94c75ac5916bddaeb30d709d3e42401046033). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-650202722
https://github.com/psi4/psi4/pull/1814#issuecomment-650202722:304,Safety,Redund,Redundant,304,This pull request **fixes 3 alerts** when merging a2046e3cf4e86590471f2507d714a9e713e47ffa into 1cf7468090b1e0432811ff55811a380ea9469cb3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-10e94c75ac5916bddaeb30d709d3e42401046033). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-650202722
https://github.com/psi4/psi4/pull/1814#issuecomment-651333350:304,Availability,Redundant,Redundant,304,This pull request **fixes 3 alerts** when merging 2e4489cc2418b61564026101d6565950833492d9 into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0426279eb5b6e50edb1b6f56ac45cccedd202f76). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-651333350
https://github.com/psi4/psi4/pull/1814#issuecomment-651333350:286,Modifiability,variab,variable,286,This pull request **fixes 3 alerts** when merging 2e4489cc2418b61564026101d6565950833492d9 into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0426279eb5b6e50edb1b6f56ac45cccedd202f76). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-651333350
https://github.com/psi4/psi4/pull/1814#issuecomment-651333350:304,Safety,Redund,Redundant,304,This pull request **fixes 3 alerts** when merging 2e4489cc2418b61564026101d6565950833492d9 into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0426279eb5b6e50edb1b6f56ac45cccedd202f76). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-651333350
https://github.com/psi4/psi4/pull/1814#issuecomment-652525590:304,Availability,Redundant,Redundant,304,This pull request **fixes 3 alerts** when merging 0a831d55b0279a3994e266e8be57b0c40282afdc into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-35d47f355c035e2c7831af16a00367c164707166). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652525590
https://github.com/psi4/psi4/pull/1814#issuecomment-652525590:286,Modifiability,variab,variable,286,This pull request **fixes 3 alerts** when merging 0a831d55b0279a3994e266e8be57b0c40282afdc into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-35d47f355c035e2c7831af16a00367c164707166). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652525590
https://github.com/psi4/psi4/pull/1814#issuecomment-652525590:304,Safety,Redund,Redundant,304,This pull request **fixes 3 alerts** when merging 0a831d55b0279a3994e266e8be57b0c40282afdc into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-35d47f355c035e2c7831af16a00367c164707166). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652525590
https://github.com/psi4/psi4/pull/1814#issuecomment-652931619:304,Availability,Redundant,Redundant,304,This pull request **fixes 3 alerts** when merging 0949406d24c3a58b269c260eef7307c4a3fa0ecb into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-408feb738b27e0191da3dcc7821bc3329b691950). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652931619
https://github.com/psi4/psi4/pull/1814#issuecomment-652931619:286,Modifiability,variab,variable,286,This pull request **fixes 3 alerts** when merging 0949406d24c3a58b269c260eef7307c4a3fa0ecb into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-408feb738b27e0191da3dcc7821bc3329b691950). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652931619
https://github.com/psi4/psi4/pull/1814#issuecomment-652931619:304,Safety,Redund,Redundant,304,This pull request **fixes 3 alerts** when merging 0949406d24c3a58b269c260eef7307c4a3fa0ecb into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-408feb738b27e0191da3dcc7821bc3329b691950). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652931619
https://github.com/psi4/psi4/pull/1814#issuecomment-653239861:304,Availability,Redundant,Redundant,304,This pull request **fixes 3 alerts** when merging ebe0f4e9884c91bd725e8bcdb4b49447bb18b85f into 90403ec0e424a296679aa5533afec8b8cbd4d1af - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-010d589fd9aa17b4699886375c9ee1ac5e7ce0cd). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653239861
https://github.com/psi4/psi4/pull/1814#issuecomment-653239861:286,Modifiability,variab,variable,286,This pull request **fixes 3 alerts** when merging ebe0f4e9884c91bd725e8bcdb4b49447bb18b85f into 90403ec0e424a296679aa5533afec8b8cbd4d1af - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-010d589fd9aa17b4699886375c9ee1ac5e7ce0cd). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653239861
https://github.com/psi4/psi4/pull/1814#issuecomment-653239861:304,Safety,Redund,Redundant,304,This pull request **fixes 3 alerts** when merging ebe0f4e9884c91bd725e8bcdb4b49447bb18b85f into 90403ec0e424a296679aa5533afec8b8cbd4d1af - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-010d589fd9aa17b4699886375c9ee1ac5e7ce0cd). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653239861
https://github.com/psi4/psi4/pull/1814#issuecomment-653467444:304,Availability,Redundant,Redundant,304,This pull request **fixes 3 alerts** when merging 319e8ae23f1af15a0e12b22aa2f3c59f4763fd28 into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-494b3553ec0f3442315c9d0f11847e9f40d0f7f3). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653467444
https://github.com/psi4/psi4/pull/1814#issuecomment-653467444:286,Modifiability,variab,variable,286,This pull request **fixes 3 alerts** when merging 319e8ae23f1af15a0e12b22aa2f3c59f4763fd28 into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-494b3553ec0f3442315c9d0f11847e9f40d0f7f3). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653467444
https://github.com/psi4/psi4/pull/1814#issuecomment-653467444:304,Safety,Redund,Redundant,304,This pull request **fixes 3 alerts** when merging 319e8ae23f1af15a0e12b22aa2f3c59f4763fd28 into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-494b3553ec0f3442315c9d0f11847e9f40d0f7f3). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653467444
https://github.com/psi4/psi4/pull/1814#issuecomment-655675838:304,Availability,Redundant,Redundant,304,This pull request **fixes 3 alerts** when merging 90d1421addd3d748d40a0d2ca5d603c4e00ee439 into 2b2c8bc97d85ca42187ce33555c58a1a281213ca - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8b0108d7532de3a536fd291df05b83ed13f5e8a2). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-655675838
https://github.com/psi4/psi4/pull/1814#issuecomment-655675838:286,Modifiability,variab,variable,286,This pull request **fixes 3 alerts** when merging 90d1421addd3d748d40a0d2ca5d603c4e00ee439 into 2b2c8bc97d85ca42187ce33555c58a1a281213ca - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8b0108d7532de3a536fd291df05b83ed13f5e8a2). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-655675838
https://github.com/psi4/psi4/pull/1814#issuecomment-655675838:304,Safety,Redund,Redundant,304,This pull request **fixes 3 alerts** when merging 90d1421addd3d748d40a0d2ca5d603c4e00ee439 into 2b2c8bc97d85ca42187ce33555c58a1a281213ca - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8b0108d7532de3a536fd291df05b83ed13f5e8a2). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-655675838
https://github.com/psi4/psi4/issues/1818#issuecomment-589923810:39,Testability,test,tested,39,"Also, the option does not appear to be tested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1818#issuecomment-589923810
https://github.com/psi4/psi4/issues/1818#issuecomment-590391052:201,Availability,avail,available,201,"This might be a holdover from some tests Rob Parrish did? If I recall; correctly, the biggest holdup to pseudospectral implementation is that one; needs special grids, which are not generally publicly available. On Sat, Feb 22, 2020 at 1:15 AM Susi Lehtola <notifications@github.com>; wrote:. > I'm looking at; >; > https://github.com/psi4/psi4/blob/31219187caa9e8736b3323b078324f85d8c9cd6f/psi4/src/read_options.cc#L1612; >; > which indicates the pseudospectral method is implemented, but only for; > CPHF. However, although I can find the integrals in libmints, I'm unable; > to see where the code is called.; >; > I was thinking that if one-electron integrals are now faster (related to; > PCM?), implementing a seminumerical exchange algorithm should be relatively; > straightforward. It might be really beneficial in Psi4 since although RI is; > really fast, exact integrals are quite slow at present, which is a problem; > for e.g. benchmark calculations that would be feasible with a seminumerical; > approach.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1818?email_source=notifications&email_token=AAXVA5W3GNAG3GBCVIBKXCDREC7JNA5CNFSM4KZO5AEKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPOVMXA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5UHRR5HOSMLNRKHRBTREC7JNANCNFSM4KZO5AEA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1818#issuecomment-590391052
https://github.com/psi4/psi4/issues/1818#issuecomment-590391052:35,Testability,test,tests,35,"This might be a holdover from some tests Rob Parrish did? If I recall; correctly, the biggest holdup to pseudospectral implementation is that one; needs special grids, which are not generally publicly available. On Sat, Feb 22, 2020 at 1:15 AM Susi Lehtola <notifications@github.com>; wrote:. > I'm looking at; >; > https://github.com/psi4/psi4/blob/31219187caa9e8736b3323b078324f85d8c9cd6f/psi4/src/read_options.cc#L1612; >; > which indicates the pseudospectral method is implemented, but only for; > CPHF. However, although I can find the integrals in libmints, I'm unable; > to see where the code is called.; >; > I was thinking that if one-electron integrals are now faster (related to; > PCM?), implementing a seminumerical exchange algorithm should be relatively; > straightforward. It might be really beneficial in Psi4 since although RI is; > really fast, exact integrals are quite slow at present, which is a problem; > for e.g. benchmark calculations that would be feasible with a seminumerical; > approach.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1818?email_source=notifications&email_token=AAXVA5W3GNAG3GBCVIBKXCDREC7JNA5CNFSM4KZO5AEKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPOVMXA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5UHRR5HOSMLNRKHRBTREC7JNANCNFSM4KZO5AEA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1818#issuecomment-590391052
https://github.com/psi4/psi4/issues/1818#issuecomment-590391052:938,Testability,benchmark,benchmark,938,"This might be a holdover from some tests Rob Parrish did? If I recall; correctly, the biggest holdup to pseudospectral implementation is that one; needs special grids, which are not generally publicly available. On Sat, Feb 22, 2020 at 1:15 AM Susi Lehtola <notifications@github.com>; wrote:. > I'm looking at; >; > https://github.com/psi4/psi4/blob/31219187caa9e8736b3323b078324f85d8c9cd6f/psi4/src/read_options.cc#L1612; >; > which indicates the pseudospectral method is implemented, but only for; > CPHF. However, although I can find the integrals in libmints, I'm unable; > to see where the code is called.; >; > I was thinking that if one-electron integrals are now faster (related to; > PCM?), implementing a seminumerical exchange algorithm should be relatively; > straightforward. It might be really beneficial in Psi4 since although RI is; > really fast, exact integrals are quite slow at present, which is a problem; > for e.g. benchmark calculations that would be feasible with a seminumerical; > approach.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1818?email_source=notifications&email_token=AAXVA5W3GNAG3GBCVIBKXCDREC7JNA5CNFSM4KZO5AEKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPOVMXA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5UHRR5HOSMLNRKHRBTREC7JNANCNFSM4KZO5AEA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1818#issuecomment-590391052
https://github.com/psi4/psi4/issues/1819#issuecomment-593636343:101,Performance,Cache,Cached,101,"OK, now it's; ```; DFHelper Memory: AOs need 4.030 GiB; user supplied 4.030 GiB. Using in-core AOs.; Cached 50.0% of DFT collocation blocks in 6.225 [GiB].; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1819#issuecomment-593636343
https://github.com/psi4/psi4/issues/1819#issuecomment-593637795:40,Performance,cache,cached,40,"Yes, that's what I was expecting -- 50% cached and fits ~10gb should fit in memory. Further problem?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1819#issuecomment-593637795
https://github.com/psi4/psi4/issues/1820#issuecomment-592740552:117,Availability,error,error,117,"Thanks for the report. I think we've averting the warning in the linked issue. It was just a warning for you, not an error, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1820#issuecomment-592740552
https://github.com/psi4/psi4/issues/1820#issuecomment-599140618:77,Testability,test,test,77,"failing input is tu5 changed to jaTZ or jaQZ (which is also the tes_theading test, https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L72-L102). The `omp_set_nested` is only deprecated in OMP 5.0, so we've got some time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1820#issuecomment-599140618
https://github.com/psi4/psi4/issues/1820#issuecomment-625417041:192,Modifiability,variab,variable,192,"I understand the docs (https://www.openmp.org/spec-html/5.0/openmpse57.html) such that an integer of `1` is the same behaviour as `(omp_set_nested(0);` where 0 is a bool. > If the environment variable is set to false, the initial value of max-active-levels-var is set to 1. The `max-active-levels-var` corresponds to `omp_set/get_max_active_levels`. Below does seem to pass the sapt-tu5 test with jaQZ (and which I can make fail with `omp_set_max_active_levels(0);`). . ```; #ifdef _OPENMP; omp_set_max_active_levels(1);; #endif; ```. The threading test gives the same level of threading as compiling with `omp_set_nested(0)` (and conda psi4). . Though I am hesitant making a 'too quick' PR about it. Opinions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1820#issuecomment-625417041
https://github.com/psi4/psi4/issues/1820#issuecomment-625417041:387,Testability,test,test,387,"I understand the docs (https://www.openmp.org/spec-html/5.0/openmpse57.html) such that an integer of `1` is the same behaviour as `(omp_set_nested(0);` where 0 is a bool. > If the environment variable is set to false, the initial value of max-active-levels-var is set to 1. The `max-active-levels-var` corresponds to `omp_set/get_max_active_levels`. Below does seem to pass the sapt-tu5 test with jaQZ (and which I can make fail with `omp_set_max_active_levels(0);`). . ```; #ifdef _OPENMP; omp_set_max_active_levels(1);; #endif; ```. The threading test gives the same level of threading as compiling with `omp_set_nested(0)` (and conda psi4). . Though I am hesitant making a 'too quick' PR about it. Opinions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1820#issuecomment-625417041
https://github.com/psi4/psi4/issues/1820#issuecomment-625417041:549,Testability,test,test,549,"I understand the docs (https://www.openmp.org/spec-html/5.0/openmpse57.html) such that an integer of `1` is the same behaviour as `(omp_set_nested(0);` where 0 is a bool. > If the environment variable is set to false, the initial value of max-active-levels-var is set to 1. The `max-active-levels-var` corresponds to `omp_set/get_max_active_levels`. Below does seem to pass the sapt-tu5 test with jaQZ (and which I can make fail with `omp_set_max_active_levels(0);`). . ```; #ifdef _OPENMP; omp_set_max_active_levels(1);; #endif; ```. The threading test gives the same level of threading as compiling with `omp_set_nested(0)` (and conda psi4). . Though I am hesitant making a 'too quick' PR about it. Opinions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1820#issuecomment-625417041
https://github.com/psi4/psi4/pull/1821#issuecomment-592552146:269,Security,hash,hash,269,"Thanks for switching the base from `1.3.x` to `master`. Unfortunately, it didn't go as cleanly as we need. The thing to do is on your clone, make sure you have `origin` and `upstream` remotes at `git remote -v`. Then checkout the upstream master branch, check that its hash matches the upstream psi4 master (that is, the hash next to ""Latest commit"" right off the https://github.com/psi4/psi4/ page). Then checkout a new branch, e.g., `git checkout -b libpsioexport`. Then apply your one commit, `git cherry-pick 9788333289e4c48d57a9bf7e453fb8855fbc8ae9`. Then push that new branch to the branch associated with this PR. It will have to be force-pushed b/c overwriting history, `git push origin libpsioexport:psi4-dev --force`. Then this PR should have only one commit in it, yours, and be with respect to the development, master branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-592552146
https://github.com/psi4/psi4/pull/1821#issuecomment-592552146:321,Security,hash,hash,321,"Thanks for switching the base from `1.3.x` to `master`. Unfortunately, it didn't go as cleanly as we need. The thing to do is on your clone, make sure you have `origin` and `upstream` remotes at `git remote -v`. Then checkout the upstream master branch, check that its hash matches the upstream psi4 master (that is, the hash next to ""Latest commit"" right off the https://github.com/psi4/psi4/ page). Then checkout a new branch, e.g., `git checkout -b libpsioexport`. Then apply your one commit, `git cherry-pick 9788333289e4c48d57a9bf7e453fb8855fbc8ae9`. Then push that new branch to the branch associated with this PR. It will have to be force-pushed b/c overwriting history, `git push origin libpsioexport:psi4-dev --force`. Then this PR should have only one commit in it, yours, and be with respect to the development, master branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-592552146
https://github.com/psi4/psi4/pull/1821#issuecomment-592557057:271,Security,hash,hash,271,"> Thanks for switching the base from `1.3.x` to `master`. Unfortunately, it didn't go as cleanly as we need. The thing to do is on your clone, make sure you have `origin` and `upstream` remotes at `git remote -v`. Then checkout the upstream master branch, check that its hash matches the upstream psi4 master (that is, the hash next to ""Latest commit"" right off the https://github.com/psi4/psi4/ page). Then checkout a new branch, e.g., `git checkout -b libpsioexport`. Then apply your one commit, `git cherry-pick 9788333289e4c48d57a9bf7e453fb8855fbc8ae9`. Then push that new branch to the branch associated with this PR. It will have to be force-pushed b/c overwriting history, `git push origin libpsioexport:psi4-dev --force`. Then this PR should have only one commit in it, yours, and be with respect to the development, master branch. Done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-592557057
https://github.com/psi4/psi4/pull/1821#issuecomment-592557057:323,Security,hash,hash,323,"> Thanks for switching the base from `1.3.x` to `master`. Unfortunately, it didn't go as cleanly as we need. The thing to do is on your clone, make sure you have `origin` and `upstream` remotes at `git remote -v`. Then checkout the upstream master branch, check that its hash matches the upstream psi4 master (that is, the hash next to ""Latest commit"" right off the https://github.com/psi4/psi4/ page). Then checkout a new branch, e.g., `git checkout -b libpsioexport`. Then apply your one commit, `git cherry-pick 9788333289e4c48d57a9bf7e453fb8855fbc8ae9`. Then push that new branch to the branch associated with this PR. It will have to be force-pushed b/c overwriting history, `git push origin libpsioexport:psi4-dev --force`. Then this PR should have only one commit in it, yours, and be with respect to the development, master branch. Done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-592557057
https://github.com/psi4/psi4/pull/1821#issuecomment-643793311:120,Integrability,wrap,wrapper,120,@SinaMostafanejad Were you able to get this to work? I think the only way in which we could do this would be to write a wrapper code around these functions (similar to the __array_interface__ on Matrix objects) so that we can correctly return the python values instead of updating them in place.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-643793311
https://github.com/psi4/psi4/pull/1821#issuecomment-643814110:122,Integrability,wrap,wrapper,122,"> @SinaMostafanejad Were you able to get this to work? I think the only way in which we could do this would be to write a wrapper code around these functions (similar to the **array_interface** on Matrix objects) so that we can correctly return the python values instead of updating them in place. Hi @dgasmith,. Unfortunately not. I had a lot in my plate last month because of my dissertation defense. I agree with you about this possibility as I have already discussed it with @mattwelborn and Sam although I am not aware of specifics you are referring to about the array_interface in Psi4. Since C extension in python is out of my comfort zone in programming, it might take me some time to work it out considering a few other tasks w/ priorities on my list, in case if you want me to do that. If so, please point me to the files and directions in Psi4 that I need to look into before I begin. Otherwise, please tell me how can I be of any help. Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-643814110
https://github.com/psi4/psi4/pull/1821#issuecomment-951147533:229,Energy Efficiency,schedul,schedule,229,"> @SinaMostafanejad Are you interested in continuing this PR? A PR that I have in the works also needs to export functions from PSIO, so there could be merge conflicts. Not at this time. I can reopen and work on it as soon as my schedule allows it. Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-951147533
https://github.com/psi4/psi4/pull/1821#issuecomment-951158154:15,Deployability,update,update,15,"Thanks for the update. Feel free to reopen, but until then, PR closed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-951158154
https://github.com/psi4/psi4/pull/1825#issuecomment-593790466:41,Availability,down,downloads,41,Yes sorry about that ... in the build it downloads an old adcc version from github instead of recognising the installed version from conda it seems. I'll take a look.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1825#issuecomment-593790466
https://github.com/psi4/psi4/pull/1825#issuecomment-593790466:110,Deployability,install,installed,110,Yes sorry about that ... in the build it downloads an old adcc version from github instead of recognising the installed version from conda it seems. I'll take a look.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1825#issuecomment-593790466
https://github.com/psi4/psi4/pull/1825#issuecomment-593803229:97,Testability,test,testes,97,Yes it's py 3.6. We do not have this at the moment. I made an amendment in #1827 to disable adcc testes if pyversion != 3.7. We'll look into producing builds for 3.6 and 3.8 as well.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1825#issuecomment-593803229
https://github.com/psi4/psi4/pull/1825#issuecomment-594346555:14,Availability,avail,available,14,"Py 3.6 is now available on anaconda as well, see #1827.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1825#issuecomment-594346555
https://github.com/psi4/psi4/issues/1828#issuecomment-593935057:91,Availability,error,error,91,"Before anything else, update to a more recent version of Psi4 and see if there is still an error. Psi4 1.1 is almost three years old, and there have been a lot of improvements since then. Instructions to download the latest stable version of Psi, Psi4 1.3.2, can be found [here](https://admiring-tesla-08529a.netlify.com/installs/v132/).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1828#issuecomment-593935057
https://github.com/psi4/psi4/issues/1828#issuecomment-593935057:204,Availability,down,download,204,"Before anything else, update to a more recent version of Psi4 and see if there is still an error. Psi4 1.1 is almost three years old, and there have been a lot of improvements since then. Instructions to download the latest stable version of Psi, Psi4 1.3.2, can be found [here](https://admiring-tesla-08529a.netlify.com/installs/v132/).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1828#issuecomment-593935057
https://github.com/psi4/psi4/issues/1828#issuecomment-593935057:22,Deployability,update,update,22,"Before anything else, update to a more recent version of Psi4 and see if there is still an error. Psi4 1.1 is almost three years old, and there have been a lot of improvements since then. Instructions to download the latest stable version of Psi, Psi4 1.3.2, can be found [here](https://admiring-tesla-08529a.netlify.com/installs/v132/).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1828#issuecomment-593935057
https://github.com/psi4/psi4/issues/1828#issuecomment-593935057:321,Deployability,install,installs,321,"Before anything else, update to a more recent version of Psi4 and see if there is still an error. Psi4 1.1 is almost three years old, and there have been a lot of improvements since then. Instructions to download the latest stable version of Psi, Psi4 1.3.2, can be found [here](https://admiring-tesla-08529a.netlify.com/installs/v132/).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1828#issuecomment-593935057
https://github.com/psi4/psi4/pull/1829#issuecomment-594647283:429,Deployability,update,update,429,"`dfocc` was better off. `dfocc` doesn't have problems 1, 2, or 4. Not sure about 5 because I'm rusty on converting DF integrals to conventional, but if it did have that problem, it would show up in the gradients. 3 is a problem in `dfocc`. I can deal with it if you'd like, but I assumed nobody would use that algorithm for orbital optimization, and it wasn't worth adding to the #1390 nightmare. Good catch on the comment. I'll update that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1829#issuecomment-594647283
https://github.com/psi4/psi4/pull/1829#issuecomment-594647283:332,Performance,optimiz,optimization,332,"`dfocc` was better off. `dfocc` doesn't have problems 1, 2, or 4. Not sure about 5 because I'm rusty on converting DF integrals to conventional, but if it did have that problem, it would show up in the gradients. 3 is a problem in `dfocc`. I can deal with it if you'd like, but I assumed nobody would use that algorithm for orbital optimization, and it wasn't worth adding to the #1390 nightmare. Good catch on the comment. I'll update that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1829#issuecomment-594647283
https://github.com/psi4/psi4/pull/1829#issuecomment-594950777:179,Testability,test,test,179,"I have the expanded OMP2/OCEPA hessian formulas in a Jupyter notebook, and I know they're implemented in DFOCC. Seeing how that choice affects convergence would be an interesting test some time. (Well, assuming DFOCC orbital convergence gets straightened out...)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1829#issuecomment-594950777
https://github.com/psi4/psi4/issues/1830#issuecomment-600406166:155,Availability,ping,ping,155,"Thanks, @jgonthier. The gdb procedure these days is `gdb --args python stage/bin/psi4 input.dat`. It should work readily -- I've used it this year. Please ping me if it gives trouble. I think @zachglick is also interested. http://psicode.org/psi4manual/master/build_planning.html#how-to-use-gdb-and-lldb-with-psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-600406166
https://github.com/psi4/psi4/issues/1830#issuecomment-601308620:7,Deployability,update,update,7,"Little update: looking at formulas, I think we should just set a bunch of exchange terms involving the absent spin to 0. Probably check number of alpha and beta electrons of each monomer at the beginning of the code and then select which terms to compute based on that. I'm set up with debugging (thanks Lori!) so I'll try that soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-601308620
https://github.com/psi4/psi4/issues/1830#issuecomment-658966911:338,Availability,avail,available,338,"@loriab ; as a follow up from #1948; the original issue was resolved, but I've missed another edge-case, where setting `freeze_core True` results in empty-blocks in mp2 terms ... (sorry for being such a pain).; I've hacked away a solution and additional regression tests (should I add `output.ref` also?) with lithium dimer.; The code is available at [fcore_fix](https://github.com/PhillCli/psi4/tree/usapt0_spin_fix_fcore), should I make another PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-658966911
https://github.com/psi4/psi4/issues/1830#issuecomment-658966911:265,Testability,test,tests,265,"@loriab ; as a follow up from #1948; the original issue was resolved, but I've missed another edge-case, where setting `freeze_core True` results in empty-blocks in mp2 terms ... (sorry for being such a pain).; I've hacked away a solution and additional regression tests (should I add `output.ref` also?) with lithium dimer.; The code is available at [fcore_fix](https://github.com/PhillCli/psi4/tree/usapt0_spin_fix_fcore), should I make another PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-658966911
https://github.com/psi4/psi4/issues/1830#issuecomment-658972493:433,Availability,avail,available,433,"@PhillCli . > as a follow up from #1948 the original issue was resolved, but I've missed another edge-case, where setting freeze_core True results in empty-blocks in mp2 terms ... (sorry for being such a pain).; I've hacked away a solution and additional regression tests (should I add output.ref also?) with lithium dimer. Not at all -- problem identified and solution prepared is a double win, not a pain. thank you. > The code is available at fcore_fix, should I make another PR?. please do. and `output.ref` welcome. we try to generate missing ones every year or so, but sooner they're present the better.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-658972493
https://github.com/psi4/psi4/issues/1830#issuecomment-658972493:266,Testability,test,tests,266,"@PhillCli . > as a follow up from #1948 the original issue was resolved, but I've missed another edge-case, where setting freeze_core True results in empty-blocks in mp2 terms ... (sorry for being such a pain).; I've hacked away a solution and additional regression tests (should I add output.ref also?) with lithium dimer. Not at all -- problem identified and solution prepared is a double win, not a pain. thank you. > The code is available at fcore_fix, should I make another PR?. please do. and `output.ref` welcome. we try to generate missing ones every year or so, but sooner they're present the better.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-658972493
https://github.com/psi4/psi4/issues/1835#issuecomment-595374584:19,Availability,down,down,19,"Yeah we should sit down and try to sort out all the latest SAPT additions; and how they should be called. On Thu, Mar 5, 2020 at 12:56 PM Lori A. Burns <notifications@github.com>; wrote:. > right now, one gets (wfn) sapt0-inf through sapt(dft). in light of that; > new addition, plus outright sapt(dft) plus sapt0-d, take a wholistic looks; > at the arguments to energy(sapt*); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1835?email_source=notifications&email_token=AAXVA5X6PP6BNHUB4YWNW33RF7RTTA5CNFSM4LCPIX5KYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IS3UY5Q>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5TLWRLB4PCIU2BX74TRF7RTTANCNFSM4LCPIX5A>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1835#issuecomment-595374584
https://github.com/psi4/psi4/issues/1835#issuecomment-595374584:363,Energy Efficiency,energy,energy,363,"Yeah we should sit down and try to sort out all the latest SAPT additions; and how they should be called. On Thu, Mar 5, 2020 at 12:56 PM Lori A. Burns <notifications@github.com>; wrote:. > right now, one gets (wfn) sapt0-inf through sapt(dft). in light of that; > new addition, plus outright sapt(dft) plus sapt0-d, take a wholistic looks; > at the arguments to energy(sapt*); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1835?email_source=notifications&email_token=AAXVA5X6PP6BNHUB4YWNW33RF7RTTA5CNFSM4LCPIX5KYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IS3UY5Q>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5TLWRLB4PCIU2BX74TRF7RTTANCNFSM4LCPIX5A>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1835#issuecomment-595374584
https://github.com/psi4/psi4/issues/1835#issuecomment-815586442:20,Security,access,access,20,Because I wanted to access certain variants I did some work towards this on a local branch.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1835#issuecomment-815586442
https://github.com/psi4/psi4/issues/1841#issuecomment-1520901434:41,Performance,queue,queue,41,"The community feedback for the GH ""merge queue"" beta is strongly pushing for different sets of ""required"" checks btwn PR and merge-queue into master. Hopefully that gets enacted, then I think the latter would be an excellent occasion to run full tests on local-hosted resources.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1841#issuecomment-1520901434
https://github.com/psi4/psi4/issues/1841#issuecomment-1520901434:131,Performance,queue,queue,131,"The community feedback for the GH ""merge queue"" beta is strongly pushing for different sets of ""required"" checks btwn PR and merge-queue into master. Hopefully that gets enacted, then I think the latter would be an excellent occasion to run full tests on local-hosted resources.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1841#issuecomment-1520901434
https://github.com/psi4/psi4/issues/1841#issuecomment-1520901434:246,Testability,test,tests,246,"The community feedback for the GH ""merge queue"" beta is strongly pushing for different sets of ""required"" checks btwn PR and merge-queue into master. Hopefully that gets enacted, then I think the latter would be an excellent occasion to run full tests on local-hosted resources.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1841#issuecomment-1520901434
https://github.com/psi4/psi4/issues/1841#issuecomment-1520901434:14,Usability,feedback,feedback,14,"The community feedback for the GH ""merge queue"" beta is strongly pushing for different sets of ""required"" checks btwn PR and merge-queue into master. Hopefully that gets enacted, then I think the latter would be an excellent occasion to run full tests on local-hosted resources.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1841#issuecomment-1520901434
https://github.com/psi4/psi4/pull/1843#issuecomment-595606978:123,Energy Efficiency,energy,energy,123,"The following calculation; ```; molecule {; 0 1; He 0.0 0.0 -0.01; Gh(Be) 0.0 0.0 0.0; He 0.0 0.0 0.01; }. set basis ugbs; energy('scf'); ```; crashes with; ```; qcelemental.exceptions.ValidationError: Following atoms are too close: [(0, 1, 0.0), (0, 2, 0.0), (1, 2, 0.0)]; ```; Something in the code (QCElemental?) is bastardizing the input so that the atoms that are well-separated are placed on top of each other. @loriab @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595606978
https://github.com/psi4/psi4/pull/1843#issuecomment-595606978:185,Security,Validat,ValidationError,185,"The following calculation; ```; molecule {; 0 1; He 0.0 0.0 -0.01; Gh(Be) 0.0 0.0 0.0; He 0.0 0.0 0.01; }. set basis ugbs; energy('scf'); ```; crashes with; ```; qcelemental.exceptions.ValidationError: Following atoms are too close: [(0, 1, 0.0), (0, 2, 0.0), (1, 2, 0.0)]; ```; Something in the code (QCElemental?) is bastardizing the input so that the atoms that are well-separated are placed on top of each other. @loriab @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595606978
https://github.com/psi4/psi4/pull/1843#issuecomment-595613132:119,Energy Efficiency,energy,energy,119,"Also; ```; mol = psi4.core.Molecule.from_arrays([0, 0, -0.01, 0, 0, 0.01], elez=[2,2]); activate(mol); set basis ugbs; energy('scf'); ```; fails with; ```; qcelemental.exceptions.ValidationError: Following atoms are too close: [(0, 1, 0.0)]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595613132
https://github.com/psi4/psi4/pull/1843#issuecomment-595613132:179,Security,Validat,ValidationError,179,"Also; ```; mol = psi4.core.Molecule.from_arrays([0, 0, -0.01, 0, 0, 0.01], elez=[2,2]); activate(mol); set basis ugbs; energy('scf'); ```; fails with; ```; qcelemental.exceptions.ValidationError: Following atoms are too close: [(0, 1, 0.0)]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595613132
https://github.com/psi4/psi4/pull/1843#issuecomment-595893879:330,Availability,error,error,330,"this will get past molecule. ```; diff --git a/psi4/driver/qcdb/molecule.py b/psi4/driver/qcdb/molecule.py; index f8f7ea6..361f059 100644; --- a/psi4/driver/qcdb/molecule.py; +++ b/psi4/driver/qcdb/molecule.py; @@ -1171,7 +1171,7 @@ class Molecule(LibmintsMolecule):; provenance=None,; connectivity=None,; missing_enabled_return='error',; - tooclose=0.1,; + tooclose=1.e-6, #0.1,; zero_ghost_fragments=False,; nonphysical=False,; mtol=1.e-3,; @@ -1465,7 +1465,7 @@ class Molecule(LibmintsMolecule):; # to_dict, but is included as a check. in practice, only fills in mass; # numbers and heals user chgmult.; try:; - validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); + validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', tooclose=1.e-6, **molrec); except qcel.ValidationError as err:; # * this can legitimately happen if total chg or mult has been set; # independently b/c fragment chg/mult not reset. so try again.; @@ -1474,7 +1474,7 @@ class Molecule(LibmintsMolecule):; ); molrec['fragment_charges'] = [None] * len(fragments); molrec['fragment_multiplicities'] = [None] * len(fragments); - validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); + validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', tooclose=1.e-6, **molrec); forgive.append('fragment_charges'); forgive.append('fragment_multiplicities'); compare_molrecs(validated_molrec, molrec, 'to_dict', atol=1.e-6, forgive=forgive, verbose=0); ; diff --git a/psi4/src/psi4/libmints/molecule.h b/psi4/src/psi4/libmints/molecule.h; index 30ef61e..6129121 100644; --- a/psi4/src/psi4/libmints/molecule.h; +++ b/psi4/src/psi4/libmints/molecule.h; @@ -317,9 +317,9 @@ class PSI_API Molecule {; ; /// @{; /// Tests to see of an atom is at the passed position with a given tolerance; - int atom_at_position1(double*, double tol = 0.05) const;; - int atom_at_position2(Vector3&, double tol = 0.0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879
https://github.com/psi4/psi4/pull/1843#issuecomment-595893879:1880,Availability,toler,tolerance,1880,"ionError as err:; # * this can legitimately happen if total chg or mult has been set; # independently b/c fragment chg/mult not reset. so try again.; @@ -1474,7 +1474,7 @@ class Molecule(LibmintsMolecule):; ); molrec['fragment_charges'] = [None] * len(fragments); molrec['fragment_multiplicities'] = [None] * len(fragments); - validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); + validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', tooclose=1.e-6, **molrec); forgive.append('fragment_charges'); forgive.append('fragment_multiplicities'); compare_molrecs(validated_molrec, molrec, 'to_dict', atol=1.e-6, forgive=forgive, verbose=0); ; diff --git a/psi4/src/psi4/libmints/molecule.h b/psi4/src/psi4/libmints/molecule.h; index 30ef61e..6129121 100644; --- a/psi4/src/psi4/libmints/molecule.h; +++ b/psi4/src/psi4/libmints/molecule.h; @@ -317,9 +317,9 @@ class PSI_API Molecule {; ; /// @{; /// Tests to see of an atom is at the passed position with a given tolerance; - int atom_at_position1(double*, double tol = 0.05) const;; - int atom_at_position2(Vector3&, double tol = 0.05) const;; - int atom_at_position3(const std::array<double, 3>&, const double tol = 0.05) const;; + int atom_at_position1(double*, double tol = 1.e-6) const;; + int atom_at_position2(Vector3&, double tol = 1.e-6) const;; + int atom_at_position3(const std::array<double, 3>&, const double tol = 1.e-6) const;; /// @}; ; /// Do we reinterpret coordentries during a call to update_geometry?; @@ -505,7 +505,7 @@ class PSI_API Molecule {; * Force the molecule to have the symmetry specified in pg_.; * This is to handle noise coming in from optking.; */; - void symmetrize(double tol = 0.05, bool suppress_mol_print_in_exc = false);; + void symmetrize(double tol = 1.e-6, bool suppress_mol_print_in_exc = false);; /// @}; ; /**; @@ -668,7 +668,7 @@ class PSI_API Molecule {; /// Returns the Schoenflies symbol; std::string schoenflies_symbol() const;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879
https://github.com/psi4/psi4/pull/1843#issuecomment-595893879:3738,Availability,Error,Error,3738,"; - int atom_at_position1(double*, double tol = 0.05) const;; - int atom_at_position2(Vector3&, double tol = 0.05) const;; - int atom_at_position3(const std::array<double, 3>&, const double tol = 0.05) const;; + int atom_at_position1(double*, double tol = 1.e-6) const;; + int atom_at_position2(Vector3&, double tol = 1.e-6) const;; + int atom_at_position3(const std::array<double, 3>&, const double tol = 1.e-6) const;; /// @}; ; /// Do we reinterpret coordentries during a call to update_geometry?; @@ -505,7 +505,7 @@ class PSI_API Molecule {; * Force the molecule to have the symmetry specified in pg_.; * This is to handle noise coming in from optking.; */; - void symmetrize(double tol = 0.05, bool suppress_mol_print_in_exc = false);; + void symmetrize(double tol = 1.e-6, bool suppress_mol_print_in_exc = false);; /// @}; ; /**; @@ -668,7 +668,7 @@ class PSI_API Molecule {; /// Returns the Schoenflies symbol; std::string schoenflies_symbol() const;; /// Check if current geometry fits current point group; - bool valid_atom_map(double tol = 0.05) const;; + bool valid_atom_map(double tol = 1.e-6) const;; /// Return point group name such as C3v or S8.; std::string full_point_group() const;; /// Return point group name such as Cnv or Sn.; ```. input; ```; import psi4. mol = psi4.core.Molecule.from_arrays(; elez=[2, 4, 2],; #fix_com=True,; #fix_orientation=True,; fix_symmetry='c1',; tooclose=1.e-6,; real=[True, False, True],; geom=[; 1.0, 0.0, -0.01,; 1.0, 0.0, 0.0,; 1.0, 0.0, 0.01]); activate(mol). set basis cc-pvdz #ugbs; energy('scf'). # fix_symmetry needed to avoid:; #Program received signal SIGFPE, Arithmetic exception.; #0x00007fffe1b5700e in psi::PetiteList::init (this=0x0, tol=0) at /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/petitelist.cc:567; #567 lamij_[ij] = (char)(ng_ / nij);. # now ends with; #Fatal Error: SOBasis::SOBasis: shell changed; #Error occurred in file: /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/sobasis.cc on line: 257; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879
https://github.com/psi4/psi4/pull/1843#issuecomment-595893879:3779,Availability,Error,Error,3779,"; - int atom_at_position1(double*, double tol = 0.05) const;; - int atom_at_position2(Vector3&, double tol = 0.05) const;; - int atom_at_position3(const std::array<double, 3>&, const double tol = 0.05) const;; + int atom_at_position1(double*, double tol = 1.e-6) const;; + int atom_at_position2(Vector3&, double tol = 1.e-6) const;; + int atom_at_position3(const std::array<double, 3>&, const double tol = 1.e-6) const;; /// @}; ; /// Do we reinterpret coordentries during a call to update_geometry?; @@ -505,7 +505,7 @@ class PSI_API Molecule {; * Force the molecule to have the symmetry specified in pg_.; * This is to handle noise coming in from optking.; */; - void symmetrize(double tol = 0.05, bool suppress_mol_print_in_exc = false);; + void symmetrize(double tol = 1.e-6, bool suppress_mol_print_in_exc = false);; /// @}; ; /**; @@ -668,7 +668,7 @@ class PSI_API Molecule {; /// Returns the Schoenflies symbol; std::string schoenflies_symbol() const;; /// Check if current geometry fits current point group; - bool valid_atom_map(double tol = 0.05) const;; + bool valid_atom_map(double tol = 1.e-6) const;; /// Return point group name such as C3v or S8.; std::string full_point_group() const;; /// Return point group name such as Cnv or Sn.; ```. input; ```; import psi4. mol = psi4.core.Molecule.from_arrays(; elez=[2, 4, 2],; #fix_com=True,; #fix_orientation=True,; fix_symmetry='c1',; tooclose=1.e-6,; real=[True, False, True],; geom=[; 1.0, 0.0, -0.01,; 1.0, 0.0, 0.0,; 1.0, 0.0, 0.01]); activate(mol). set basis cc-pvdz #ugbs; energy('scf'). # fix_symmetry needed to avoid:; #Program received signal SIGFPE, Arithmetic exception.; #0x00007fffe1b5700e in psi::PetiteList::init (this=0x0, tol=0) at /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/petitelist.cc:567; #567 lamij_[ij] = (char)(ng_ / nij);. # now ends with; #Fatal Error: SOBasis::SOBasis: shell changed; #Error occurred in file: /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/sobasis.cc on line: 257; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879
https://github.com/psi4/psi4/pull/1843#issuecomment-595893879:3429,Energy Efficiency,energy,energy,3429,"; - int atom_at_position1(double*, double tol = 0.05) const;; - int atom_at_position2(Vector3&, double tol = 0.05) const;; - int atom_at_position3(const std::array<double, 3>&, const double tol = 0.05) const;; + int atom_at_position1(double*, double tol = 1.e-6) const;; + int atom_at_position2(Vector3&, double tol = 1.e-6) const;; + int atom_at_position3(const std::array<double, 3>&, const double tol = 1.e-6) const;; /// @}; ; /// Do we reinterpret coordentries during a call to update_geometry?; @@ -505,7 +505,7 @@ class PSI_API Molecule {; * Force the molecule to have the symmetry specified in pg_.; * This is to handle noise coming in from optking.; */; - void symmetrize(double tol = 0.05, bool suppress_mol_print_in_exc = false);; + void symmetrize(double tol = 1.e-6, bool suppress_mol_print_in_exc = false);; /// @}; ; /**; @@ -668,7 +668,7 @@ class PSI_API Molecule {; /// Returns the Schoenflies symbol; std::string schoenflies_symbol() const;; /// Check if current geometry fits current point group; - bool valid_atom_map(double tol = 0.05) const;; + bool valid_atom_map(double tol = 1.e-6) const;; /// Return point group name such as C3v or S8.; std::string full_point_group() const;; /// Return point group name such as Cnv or Sn.; ```. input; ```; import psi4. mol = psi4.core.Molecule.from_arrays(; elez=[2, 4, 2],; #fix_com=True,; #fix_orientation=True,; fix_symmetry='c1',; tooclose=1.e-6,; real=[True, False, True],; geom=[; 1.0, 0.0, -0.01,; 1.0, 0.0, 0.0,; 1.0, 0.0, 0.01]); activate(mol). set basis cc-pvdz #ugbs; energy('scf'). # fix_symmetry needed to avoid:; #Program received signal SIGFPE, Arithmetic exception.; #0x00007fffe1b5700e in psi::PetiteList::init (this=0x0, tol=0) at /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/petitelist.cc:567; #567 lamij_[ij] = (char)(ng_ / nij);. # now ends with; #Fatal Error: SOBasis::SOBasis: shell changed; #Error occurred in file: /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/sobasis.cc on line: 257; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879
https://github.com/psi4/psi4/pull/1843#issuecomment-595893879:3469,Safety,avoid,avoid,3469,"; - int atom_at_position1(double*, double tol = 0.05) const;; - int atom_at_position2(Vector3&, double tol = 0.05) const;; - int atom_at_position3(const std::array<double, 3>&, const double tol = 0.05) const;; + int atom_at_position1(double*, double tol = 1.e-6) const;; + int atom_at_position2(Vector3&, double tol = 1.e-6) const;; + int atom_at_position3(const std::array<double, 3>&, const double tol = 1.e-6) const;; /// @}; ; /// Do we reinterpret coordentries during a call to update_geometry?; @@ -505,7 +505,7 @@ class PSI_API Molecule {; * Force the molecule to have the symmetry specified in pg_.; * This is to handle noise coming in from optking.; */; - void symmetrize(double tol = 0.05, bool suppress_mol_print_in_exc = false);; + void symmetrize(double tol = 1.e-6, bool suppress_mol_print_in_exc = false);; /// @}; ; /**; @@ -668,7 +668,7 @@ class PSI_API Molecule {; /// Returns the Schoenflies symbol; std::string schoenflies_symbol() const;; /// Check if current geometry fits current point group; - bool valid_atom_map(double tol = 0.05) const;; + bool valid_atom_map(double tol = 1.e-6) const;; /// Return point group name such as C3v or S8.; std::string full_point_group() const;; /// Return point group name such as Cnv or Sn.; ```. input; ```; import psi4. mol = psi4.core.Molecule.from_arrays(; elez=[2, 4, 2],; #fix_com=True,; #fix_orientation=True,; fix_symmetry='c1',; tooclose=1.e-6,; real=[True, False, True],; geom=[; 1.0, 0.0, -0.01,; 1.0, 0.0, 0.0,; 1.0, 0.0, 0.01]); activate(mol). set basis cc-pvdz #ugbs; energy('scf'). # fix_symmetry needed to avoid:; #Program received signal SIGFPE, Arithmetic exception.; #0x00007fffe1b5700e in psi::PetiteList::init (this=0x0, tol=0) at /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/petitelist.cc:567; #567 lamij_[ij] = (char)(ng_ / nij);. # now ends with; #Fatal Error: SOBasis::SOBasis: shell changed; #Error occurred in file: /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/sobasis.cc on line: 257; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879
https://github.com/psi4/psi4/pull/1843#issuecomment-595893879:839,Security,Validat,ValidationError,839,"this will get past molecule. ```; diff --git a/psi4/driver/qcdb/molecule.py b/psi4/driver/qcdb/molecule.py; index f8f7ea6..361f059 100644; --- a/psi4/driver/qcdb/molecule.py; +++ b/psi4/driver/qcdb/molecule.py; @@ -1171,7 +1171,7 @@ class Molecule(LibmintsMolecule):; provenance=None,; connectivity=None,; missing_enabled_return='error',; - tooclose=0.1,; + tooclose=1.e-6, #0.1,; zero_ghost_fragments=False,; nonphysical=False,; mtol=1.e-3,; @@ -1465,7 +1465,7 @@ class Molecule(LibmintsMolecule):; # to_dict, but is included as a check. in practice, only fills in mass; # numbers and heals user chgmult.; try:; - validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); + validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', tooclose=1.e-6, **molrec); except qcel.ValidationError as err:; # * this can legitimately happen if total chg or mult has been set; # independently b/c fragment chg/mult not reset. so try again.; @@ -1474,7 +1474,7 @@ class Molecule(LibmintsMolecule):; ); molrec['fragment_charges'] = [None] * len(fragments); molrec['fragment_multiplicities'] = [None] * len(fragments); - validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); + validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', tooclose=1.e-6, **molrec); forgive.append('fragment_charges'); forgive.append('fragment_multiplicities'); compare_molrecs(validated_molrec, molrec, 'to_dict', atol=1.e-6, forgive=forgive, verbose=0); ; diff --git a/psi4/src/psi4/libmints/molecule.h b/psi4/src/psi4/libmints/molecule.h; index 30ef61e..6129121 100644; --- a/psi4/src/psi4/libmints/molecule.h; +++ b/psi4/src/psi4/libmints/molecule.h; @@ -317,9 +317,9 @@ class PSI_API Molecule {; ; /// @{; /// Tests to see of an atom is at the passed position with a given tolerance; - int atom_at_position1(double*, double tol = 0.05) const;; - int atom_at_position2(Vector3&, double tol = 0.0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879
https://github.com/psi4/psi4/pull/1843#issuecomment-595893879:1817,Testability,Test,Tests,1817,"ionError as err:; # * this can legitimately happen if total chg or mult has been set; # independently b/c fragment chg/mult not reset. so try again.; @@ -1474,7 +1474,7 @@ class Molecule(LibmintsMolecule):; ); molrec['fragment_charges'] = [None] * len(fragments); molrec['fragment_multiplicities'] = [None] * len(fragments); - validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); + validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', tooclose=1.e-6, **molrec); forgive.append('fragment_charges'); forgive.append('fragment_multiplicities'); compare_molrecs(validated_molrec, molrec, 'to_dict', atol=1.e-6, forgive=forgive, verbose=0); ; diff --git a/psi4/src/psi4/libmints/molecule.h b/psi4/src/psi4/libmints/molecule.h; index 30ef61e..6129121 100644; --- a/psi4/src/psi4/libmints/molecule.h; +++ b/psi4/src/psi4/libmints/molecule.h; @@ -317,9 +317,9 @@ class PSI_API Molecule {; ; /// @{; /// Tests to see of an atom is at the passed position with a given tolerance; - int atom_at_position1(double*, double tol = 0.05) const;; - int atom_at_position2(Vector3&, double tol = 0.05) const;; - int atom_at_position3(const std::array<double, 3>&, const double tol = 0.05) const;; + int atom_at_position1(double*, double tol = 1.e-6) const;; + int atom_at_position2(Vector3&, double tol = 1.e-6) const;; + int atom_at_position3(const std::array<double, 3>&, const double tol = 1.e-6) const;; /// @}; ; /// Do we reinterpret coordentries during a call to update_geometry?; @@ -505,7 +505,7 @@ class PSI_API Molecule {; * Force the molecule to have the symmetry specified in pg_.; * This is to handle noise coming in from optking.; */; - void symmetrize(double tol = 0.05, bool suppress_mol_print_in_exc = false);; + void symmetrize(double tol = 1.e-6, bool suppress_mol_print_in_exc = false);; /// @}; ; /**; @@ -668,7 +668,7 @@ class PSI_API Molecule {; /// Returns the Schoenflies symbol; std::string schoenflies_symbol() const;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879
https://github.com/psi4/psi4/pull/1843#issuecomment-595911780:71,Availability,toler,tolerances,71,"Main thing to watch for mol-wise is that if atoms are near and all the tolerances aren't even, internal molecule processing will take in all your coordinates, then effectively zero them without warning, so `geometry()` is an array of zeros, and downstream is right to protest that atoms are overlapping.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595911780
https://github.com/psi4/psi4/pull/1843#issuecomment-595911780:245,Availability,down,downstream,245,"Main thing to watch for mol-wise is that if atoms are near and all the tolerances aren't even, internal molecule processing will take in all your coordinates, then effectively zero them without warning, so `geometry()` is an array of zeros, and downstream is right to protest that atoms are overlapping.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595911780
https://github.com/psi4/psi4/pull/1843#issuecomment-595998279:101,Availability,error,errors,101,"Okay, I got something to run, but it's getting inf's and nan's. Looks like built-in basis sets cause errors, while with custom ones the calculation runs, but something weird happens. The matrices look alright: the Cholesky procedure builds MOs, the Fock matrix is built and looks fine, but in the next iteration the density and Fock matrices are full of NaNs....; ```; import psi4. mol = psi4.core.Molecule.from_arrays(; elez=[2, 4, 2],; #fix_com=True,; #fix_orientation=True,; fix_symmetry='c1',; tooclose=1.e-6,; real=[True, False, True],; geom=[; 1.0, 0.0, -0.05,; 1.0, 0.0, 0.0,; 1.0, 0.0, 0.05]); activate(mol); set s_orthogonalization partialcholesky; set df_scf_guess false; set scf_type direct; set basis ugbs; #set basis cc-pvdz # fails with SOBasis: shell changed; #set basis cc-pvdz-decon # fails with SOBasis: shell changed; set debug 10; set guess core; energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595998279
https://github.com/psi4/psi4/pull/1843#issuecomment-595998279:867,Energy Efficiency,energy,energy,867,"Okay, I got something to run, but it's getting inf's and nan's. Looks like built-in basis sets cause errors, while with custom ones the calculation runs, but something weird happens. The matrices look alright: the Cholesky procedure builds MOs, the Fock matrix is built and looks fine, but in the next iteration the density and Fock matrices are full of NaNs....; ```; import psi4. mol = psi4.core.Molecule.from_arrays(; elez=[2, 4, 2],; #fix_com=True,; #fix_orientation=True,; fix_symmetry='c1',; tooclose=1.e-6,; real=[True, False, True],; geom=[; 1.0, 0.0, -0.05,; 1.0, 0.0, 0.0,; 1.0, 0.0, 0.05]); activate(mol); set s_orthogonalization partialcholesky; set df_scf_guess false; set scf_type direct; set basis ugbs; #set basis cc-pvdz # fails with SOBasis: shell changed; #set basis cc-pvdz-decon # fails with SOBasis: shell changed; set debug 10; set guess core; energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595998279
https://github.com/psi4/psi4/pull/1846#issuecomment-596133916:111,Deployability,update,updates,111,"Anything involving tensor contractions is just moving code around, and isn't something I'm worried about. Test updates, I'm confident are correct. Things worth checking:; * Code readability; * Nothing obviously suspicious in the DIIS call or setup in `occ_iterations`; * `opt-irc-2`, are we okay punting on this until PyOptking?. It may also be worth letting @susilehtola have a look, since he has experience with OO. Now that I type this out, it occurs to me that I may also need to change some of the DIIS keywords along with the DIIS behavior change... As I recall, UB had separate keywords for OO or non-OO DIIS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1846#issuecomment-596133916
https://github.com/psi4/psi4/pull/1846#issuecomment-596133916:26,Integrability,contract,contractions,26,"Anything involving tensor contractions is just moving code around, and isn't something I'm worried about. Test updates, I'm confident are correct. Things worth checking:; * Code readability; * Nothing obviously suspicious in the DIIS call or setup in `occ_iterations`; * `opt-irc-2`, are we okay punting on this until PyOptking?. It may also be worth letting @susilehtola have a look, since he has experience with OO. Now that I type this out, it occurs to me that I may also need to change some of the DIIS keywords along with the DIIS behavior change... As I recall, UB had separate keywords for OO or non-OO DIIS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1846#issuecomment-596133916
https://github.com/psi4/psi4/pull/1846#issuecomment-596133916:106,Testability,Test,Test,106,"Anything involving tensor contractions is just moving code around, and isn't something I'm worried about. Test updates, I'm confident are correct. Things worth checking:; * Code readability; * Nothing obviously suspicious in the DIIS call or setup in `occ_iterations`; * `opt-irc-2`, are we okay punting on this until PyOptking?. It may also be worth letting @susilehtola have a look, since he has experience with OO. Now that I type this out, it occurs to me that I may also need to change some of the DIIS keywords along with the DIIS behavior change... As I recall, UB had separate keywords for OO or non-OO DIIS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1846#issuecomment-596133916
https://github.com/psi4/psi4/pull/1847#issuecomment-597266781:161,Energy Efficiency,energy,energy,161,"@dgasmith: The problems was with modifying the orbitals. In the old code I created a unique unitary U and used it to rotate the space ""ROT"", but that caused the energy to differ. In this solution I rotate each space separately (""DOCC"", ""ACT"", ""VIR""). However, I am not sure why ""ROT"" did not work. How is this space defined? Any idea?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1847#issuecomment-597266781
https://github.com/psi4/psi4/pull/1847#issuecomment-597961289:315,Testability,test,test,315,"I am not really sure the Pade matters. However I am still a bit confused by the wording: ""ROT is defined by DOCC + ACT + VIR removed"", what is removed? I have not tried to compare the ROT vs individual blocks of DOCC + ACT + VIR, maybe I should do that to figure out what's wrong. The PR is now failing on a molden test (which apparently I contributed to :) but I am wondering if such test is meaningful. After all the orbital phase is arbitrary so the test could fail without anything being wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1847#issuecomment-597961289
https://github.com/psi4/psi4/pull/1847#issuecomment-597961289:385,Testability,test,test,385,"I am not really sure the Pade matters. However I am still a bit confused by the wording: ""ROT is defined by DOCC + ACT + VIR removed"", what is removed? I have not tried to compare the ROT vs individual blocks of DOCC + ACT + VIR, maybe I should do that to figure out what's wrong. The PR is now failing on a molden test (which apparently I contributed to :) but I am wondering if such test is meaningful. After all the orbital phase is arbitrary so the test could fail without anything being wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1847#issuecomment-597961289
https://github.com/psi4/psi4/pull/1847#issuecomment-597961289:453,Testability,test,test,453,"I am not really sure the Pade matters. However I am still a bit confused by the wording: ""ROT is defined by DOCC + ACT + VIR removed"", what is removed? I have not tried to compare the ROT vs individual blocks of DOCC + ACT + VIR, maybe I should do that to figure out what's wrong. The PR is now failing on a molden test (which apparently I contributed to :) but I am wondering if such test is meaningful. After all the orbital phase is arbitrary so the test could fail without anything being wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1847#issuecomment-597961289
https://github.com/psi4/psi4/pull/1847#issuecomment-598212613:180,Integrability,message,message,180,I think in other orbital test we attempted to take magnitudes or norms to remove these issues. ROT is DOCC + ACT + VIR with the inactive pieces removed. I can see how the previous message was confusing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1847#issuecomment-598212613
https://github.com/psi4/psi4/pull/1847#issuecomment-598212613:25,Testability,test,test,25,I think in other orbital test we attempted to take magnitudes or norms to remove these issues. ROT is DOCC + ACT + VIR with the inactive pieces removed. I can see how the previous message was confusing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1847#issuecomment-598212613
https://github.com/psi4/psi4/pull/1847#issuecomment-598747236:275,Energy Efficiency,energy,energy,275,@dgasmith: I realized that there was a typo in the fix that I suggested and when I corrected it the issue persisted. I think the current (and the previous) procedures were correct and that's because if I take the MOs from psi4's CASSCF and run FCI in forte I get the correct energy and the orbitals are semi-canonical. So I suspect the problem is in this snippet of code where we compute the energy after semi-canonicalization:; https://github.com/psi4/psi4/blob/1662c5d7669e80eb32864e62e73df41d929621eb/psi4/driver/procrouting/mcscf/mcscf_solver.py#L358-L372; Am I missing some step here?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1847#issuecomment-598747236
https://github.com/psi4/psi4/pull/1847#issuecomment-598747236:392,Energy Efficiency,energy,energy,392,@dgasmith: I realized that there was a typo in the fix that I suggested and when I corrected it the issue persisted. I think the current (and the previous) procedures were correct and that's because if I take the MOs from psi4's CASSCF and run FCI in forte I get the correct energy and the orbitals are semi-canonical. So I suspect the problem is in this snippet of code where we compute the energy after semi-canonicalization:; https://github.com/psi4/psi4/blob/1662c5d7669e80eb32864e62e73df41d929621eb/psi4/driver/procrouting/mcscf/mcscf_solver.py#L358-L372; Am I missing some step here?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1847#issuecomment-598747236
https://github.com/psi4/psi4/pull/1848#issuecomment-598785196:90,Availability,avail,available,90,The newly built adcc conda packages (with the less strict dependency constraints) are now available in the [adcc/label/dev](https://anaconda.org/adcc/adcc/files) channel. Perhaps would be good to try them here and check they ease compatibility as expected.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598785196
https://github.com/psi4/psi4/pull/1848#issuecomment-598785196:58,Integrability,depend,dependency,58,The newly built adcc conda packages (with the less strict dependency constraints) are now available in the [adcc/label/dev](https://anaconda.org/adcc/adcc/files) channel. Perhaps would be good to try them here and check they ease compatibility as expected.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598785196
https://github.com/psi4/psi4/pull/1848#issuecomment-598787318:186,Testability,test,test,186,"Good news -- Azure now has a ""rerun failed jobs"" button that is both findable and does as expected. That's triggered on this PR. Bad news -- this isn't the PR I should have triggered to test new adcc packages. So have now retriggered Azure on https://github.com/psi4/psi4/pull/1799",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598787318
https://github.com/psi4/psi4/pull/1848#issuecomment-598790998:90,Deployability,update,updated,90,"@loriab I'm not sure this does what we want as the packages in the main label are not yet updated. I can do that now, however, if you want.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598790998
https://github.com/psi4/psi4/pull/1848#issuecomment-598804826:162,Testability,log,logs,162,"It's not going well. Still trying to solve the env after 20 min, and something wants hdf5 1.10.2 https://dev.azure.com/psi4/psi4/_build/results?buildId=1786&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598804826
https://github.com/psi4/psi4/pull/1848#issuecomment-598805685:26,Availability,down,downloaded,26,"But adcc hasn't even been downloaded yet, so it may be a pre-adcc problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598805685
https://github.com/psi4/psi4/pull/1848#issuecomment-598821323:53,Deployability,install,install,53,It seems so ... actually already in the first `conda install` it does not pick up the hdf5 from the psi4 channel but uses a default one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598821323
https://github.com/psi4/psi4/pull/1848#issuecomment-598840910:19,Availability,ping,ping,19,"Thanks, will do. I ping when it's done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598840910
https://github.com/psi4/psi4/pull/1848#issuecomment-598847371:56,Testability,test,test,56,"@mfherbst, would you mind building a py38 (sorry, can't test it against a psi yet) while you're at it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598847371
https://github.com/psi4/psi4/pull/1848#issuecomment-598849565:17,Modifiability,extend,extended,17,"We tried when we extended our build to py38 and py36 some time ago there were a couple of unforeseen problems with py38, so it's unfortunately not a simple thing of just amending the config. For the moment we have put it on hold, sorry. How pressing is it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598849565
https://github.com/psi4/psi4/pull/1848#issuecomment-598849565:183,Modifiability,config,config,183,"We tried when we extended our build to py38 and py36 some time ago there were a couple of unforeseen problems with py38, so it's unfortunately not a simple thing of just amending the config. For the moment we have put it on hold, sorry. How pressing is it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598849565
https://github.com/psi4/psi4/pull/1848#issuecomment-598849565:149,Usability,simpl,simple,149,"We tried when we extended our build to py38 and py36 some time ago there were a couple of unforeseen problems with py38, so it's unfortunately not a simple thing of just amending the config. For the moment we have put it on hold, sorry. How pressing is it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598849565
https://github.com/psi4/psi4/pull/1848#issuecomment-598880741:61,Availability,avail,available,61,"Last time we tried with py3.8 some dependencies were not yet available for python 3.8. Might be solved now. Adcc should not be a problem, since with pypi packages 3.8 is already supported.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598880741
https://github.com/psi4/psi4/pull/1848#issuecomment-598880741:35,Integrability,depend,dependencies,35,"Last time we tried with py3.8 some dependencies were not yet available for python 3.8. Might be solved now. Adcc should not be a problem, since with pypi packages 3.8 is already supported.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598880741
https://github.com/psi4/psi4/pull/1848#issuecomment-598881163:48,Integrability,depend,dependency,48,@loriab It is done. adcc 0.14.2 now has the new dependency pins as discussed in main.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598881163
https://github.com/psi4/psi4/pull/1850#issuecomment-599174263:286,Modifiability,variab,variable,286,This pull request **fixes 8 alerts** when merging 42ee16830479f5bce0088efea93e053816fe2dee into f72289571432bd1588eafa273489fcd67a93b94c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-03162bd6f15fc285eb50ea38e0a73ecdc8426b5b). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-599174263
https://github.com/psi4/psi4/pull/1850#issuecomment-600390806:286,Modifiability,variab,variable,286,This pull request **fixes 8 alerts** when merging 0ef7299dbeb1df436942434fc1a7410e7de1aa9b into f72289571432bd1588eafa273489fcd67a93b94c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-38e66840c1a14b4f9cf960945cc7ce4d28b8e36c). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-600390806
https://github.com/psi4/psi4/pull/1850#issuecomment-601064236:286,Modifiability,variab,variable,286,This pull request **fixes 8 alerts** when merging d779ba448f11caa8905811497633b61202262d61 into f72289571432bd1588eafa273489fcd67a93b94c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f562be3788d603b60e1dd0b8cf7052235f764b03). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-601064236
https://github.com/psi4/psi4/pull/1850#issuecomment-601357038:286,Modifiability,variab,variable,286,This pull request **fixes 8 alerts** when merging bb6048a7245774247e865986c2b66c1bb20ab0ab into 8fd25f21722fddc8dd2e581bc16b464f85a9bd51 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e06bd6afcbc71e36203aa520bc6c4a13f8c6b368). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-601357038
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:41,Testability,test,tests,41,what it looks like in practice:; ```; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfmp2-ene0] PASSED [ 2%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:138,Testability,test,tests,138,what it looks like in practice:; ```; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfmp2-ene0] PASSED [ 2%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:237,Testability,test,tests,237,what it looks like in practice:; ```; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfmp2-ene0] PASSED [ 2%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:334,Testability,test,tests,334,what it looks like in practice:; ```; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfmp2-ene0] PASSED [ 2%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:432,Testability,test,tests,432,what it looks like in practice:; ```; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfmp2-ene0] PASSED [ 2%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:531,Testability,test,tests,531,what it looks like in practice:; ```; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfmp2-ene0] PASSED [ 2%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:628,Testability,test,tests,628,what it looks like in practice:; ```; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfmp2-ene0] PASSED [ 2%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:725,Testability,test,tests,725,what it looks like in practice:; ```; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfmp2-ene0] PASSED [ 2%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:824,Testability,test,tests,824,what it looks like in practice:; ```; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfmp2-ene0] PASSED [ 2%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:921,Testability,test,tests,921,what it looks like in practice:; ```; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfmp2-ene0] PASSED [ 2%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:1019,Testability,test,tests,1019,:; ```; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfmp2-ene0] PASSED [ 2%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:1118,Testability,test,tests,1118, 2%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:1215,Testability,test,tests,1215, [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfmp2-ene0] PASSED [ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:1313,Testability,test,tests,1313,[ 3%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:1413,Testability,test,tests,1413,4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:1511,Testability,test,tests,1511, 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfmp2-ene0] PASSED [ 4%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytest,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:1610,Testability,test,tests,1610,%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:1710,Testability,test,tests,1710, ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/df rr dfocc-ene0] PASSED [ 5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:1808,Testability,test,tests,1808,; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:1908,Testability,test,tests,1908,./tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:2010,Testability,test,tests,2010,sts/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/df rr dfocc-ene0] PASSED [ 6%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:2110,Testability,test,tests,2110,ts/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/df rr dfocc-ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:2211,Testability,test,tests,2211,ytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr occ -ene0] PASSED [ 7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:2313,Testability,test,tests,2313,ts/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:2413,Testability,test,tests,2413,ts/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr occ -ene0] PASSED [ 8%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:2510,Testability,test,tests,2510,sts/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:2607,Testability,test,tests,2607,tests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:2705,Testability,test,tests,2705,pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr occ -ene0] PASSED [ 9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:2802,Testability,test,tests,2802,/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf pk/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:2899,Testability,test,tests,2899,sts/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf drct/conv rr fnocc-ene0] PASSED [ 10%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pyte,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:2997,Testability,test,tests,2997,./tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf df/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:3097,Testability,test,tests,3097,./tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf mem/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:3197,Testability,test,tests,3197,../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf disk/conv rr fnocc-ene0] PASSED [ 11%]; ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:3298,Testability,test,tests,3298, ../tests/pytests/test_mp2.py::test_mp2_energy_scftype[mp2 rhf cd/conv rr fnocc-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:3398,Testability,test,tests,3398, ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: * dfmp2-ene0] PASSED [ 12%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:3498,Testability,test,tests,3498,/tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:3599,Testability,test,tests,3599,ts/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:3699,Testability,test,tests,3699,/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: * dfmp2-ene0] PASSED [ 13%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:3799,Testability,test,tests,3799,tests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:3900,Testability,test,tests,3900,s/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: * dfmp2-ene0] PASSED [ 14%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:4000,Testability,test,tests,4000,test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:4100,Testability,test,tests,4100,test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:4201,Testability,test,tests,4201,est_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: * dfmp2-ene0] PASSED [ 15%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_e,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:4298,Testability,test,tests,4298,ts/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_en,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:4395,Testability,test,tests,4395,tests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: * dfmp2-ene0] PASSED [ 16%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_ener,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:4493,Testability,test,tests,4493,pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:4591,Testability,test,tests,4591,ts/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: * dfmp2-ene0] PASSED [ 17%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_mo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:4690,Testability,test,tests,4690,sts/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_mod,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:4788,Testability,test,tests,4788,tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_mod,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:4886,Testability,test,tests,4886,../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: * dfmp2-ene0] PASSED [ 18%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_mo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:4985,Testability,test,tests,4985, ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_mod,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:5080,Testability,test,tests,5080,19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: * dfmp2-ene0] PASSED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:5175,Testability,test,tests,5175,SED [ 19%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_ene,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:5271,Testability,test,tests,5271,SSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: fnocc-ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_e,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:5366,Testability,test,tests,5366,PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv fc: * occ -ene0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:5461,Testability,test,tests,5461,0] PASSED [ 20%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:5557,Testability,test,tests,5557,ne0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv fc: * occ -ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:5655,Testability,test,tests,5655,ene0] PASSED [ 21%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:5753,Testability,test,tests,5753,ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:5852,Testability,test,tests,5852,ne0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf conv ae: * occ -ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:5950,Testability,test,tests,5950,ene0] PASSED [ 22%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:6048,Testability,test,tests,6048,0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df fc: dfocc-ene0] PASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:6147,Testability,test,tests,6147,ASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:6245,Testability,test,tests,6245,SED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:6343,Testability,test,tests,6343, [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:6442,Testability,test,tests,6442,5%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:6540,Testability,test,tests,6540,]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:6638,Testability,test,tests,6638,]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:6737,Testability,test,tests,6737,; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:6834,Testability,test,tests,6834,%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:6931,Testability,test,tests,6931,7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:7029,Testability,test,tests,7029,7%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:7126,Testability,test,tests,7126, 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:7223,Testability,test,tests,7223,[ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:7321,Testability,test,tests,7321,[ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:7421,Testability,test,tests,7421, 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:7521,Testability,test,tests,7521,9%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:7622,Testability,test,tests,7622,; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_en,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:7722,Testability,test,tests,7722, ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:7822,Testability,test,tests,7822,/tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_defaul,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:7923,Testability,test,tests,7923,ts/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 u,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:8019,Testability,test,tests,8019,ests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 roh,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:8115,Testability,test,tests,8115,tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:8212,Testability,test,tests,8212,tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd ae: * dfocc-ene0] PASSED [ 32%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd f,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:8308,Testability,test,tests,8308,./tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:8404,Testability,test,tests,8404,]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd fc: * dfocc-ene0] PASSED [ 33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:8501,Testability,test,tests,8501,33%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd fc: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:8595,Testability,test,tests,8595,SSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:8689,Testability,test,tests,8689,e0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/cd ae: * dfocc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -en,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:8784,Testability,test,tests,8784,cc-ene0] PASSED [ 34%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/cd ae: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:8878,Testability,test,tests,8878,: * dfocc-ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PA,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:8972,Testability,test,tests,8972,onv fc: dd -ene0] PASSED [ 35%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSE,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:9067,Testability,test,tests,9067,conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:9160,Testability,test,tests,9160,ohf conv fc: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:9254,Testability,test,tests,9254,2 rhf conv ae: dd -ene0] PASSED [ 36%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASS,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:9349,Testability,test,tests,9349,p2 uhf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0],MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:9442,Testability,test,tests,9442,t[mp2 rohf conv ae: dd -ene0] PASSED [ 37%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr df,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:9536,Testability,test,tests,9536,ault[mp2 rhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:9631,Testability,test,tests,9631,ult[mp2 uhf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rh,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:9722,Testability,test,tests,9722,efault[mp2 rohf df fc: dd -ene0] PASSED [ 38%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scfty,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:9813,Testability,test,tests,9813,gy_default[mp2 rhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:9905,Testability,test,tests,9905,ergy_default[mp2 uhf df ae: dd -ene0] PASSED [ 39%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:9996,Testability,test,tests,9996,_energy_default[mp2 rohf df ae: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:10087,Testability,test,tests,10087,_mp2_energy_default[mp2 rhf cd fc: dd -ene0] XFAIL [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:10179,Testability,test,tests,10179,t_mp2_energy_default[mp2 uhf cd fc: dd -ene0] PASSED [ 40%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:10279,Testability,test,tests,10279,energy_default[mp2 rohf cd fc: dd -ene0] PASSED [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:10379,Testability,test,tests,10379,y_default[mp2 rhf cd ae: dd -ene0] XFAIL [ 41%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:10481,Testability,test,tests,10481,[mp2 uhf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:10583,Testability,test,tests,10583,f cd ae: dd -ene0] PASSED [ 42%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:10683,Testability,test,tests,10683,dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:10783,Testability,test,tests,10783, PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf fc: dd -ene0] PASSED [ 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:10884,Testability,test,tests,10884, 43%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:10985,Testability,test,tests,10985,tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 uhf ae: dd -ene0] PASSED [ 44%]; ../tests/pytests/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:11087,Testability,test,tests,11087,ts/test_mp2.py::test_mp2_energy_default[mp2 rohf ae: dd -ene0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:11189,Testability,test,tests,11189,2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd1] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:11289,Testability,test,tests,11289,2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfmp2-grd0] PASSED [ 45%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:11389,Testability,test,tests,11389,2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd1] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:11489,Testability,test,tests,11489,mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfmp2-grd0] PASSED [ 46%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:11589,Testability,test,tests,11589,t_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:11691,Testability,test,tests,11691,mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfmp2-grd0] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ..,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:11793,Testability,test,tests,11793,2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd1] PASSED [ 47%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:11893,Testability,test,tests,11893,p2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfmp2-grd0] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%];,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:11993,Testability,test,tests,11993,mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd1] PASSED [ 48%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%],MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:12094,Testability,test,tests,12094,_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfmp2-grd0] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:12195,Testability,test,tests,12195,t_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd1] PASSED [ 49%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:12297,Testability,test,tests,12297,mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfmp2-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 5,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:12399,Testability,test,tests,12399,2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd1] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:12499,Testability,test,tests,12499,2.py::test_mp2_gradient_scftype[mp2 rhf pk/df rr dfocc-grd0] PASSED [ 50%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:12599,Testability,test,tests,12599,2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd1] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:12703,Testability,test,tests,12703,py::test_mp2_gradient_scftype[mp2 rhf drct/df rr dfocc-grd0] PASSED [ 51%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:12807,Testability,test,tests,12807,::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:12908,Testability,test,tests,12908,:test_mp2_gradient_scftype[mp2 rhf df/df rr dfocc-grd0] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:13009,Testability,test,tests,13009,test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd1] PASSED [ 52%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:13112,Testability,test,tests,13112,st_mp2_gradient_scftype[mp2 rhf mem/df rr dfocc-grd0] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%],MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:13215,Testability,test,tests,13215,_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd1] PASSED [ 53%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ..,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:13316,Testability,test,tests,13316,t_mp2_gradient_scftype[mp2 rhf disk/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:13417,Testability,test,tests,13417,st_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd1] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:13519,Testability,test,tests,13519,_mp2_gradient_scftype[mp2 rhf cd/df rr dfocc-grd0] PASSED [ 54%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:13621,Testability,test,tests,13621,p2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd1] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:13724,Testability,test,tests,13724,mp2_gradient_scftype[mp2 rhf fc pk/conv rr occ -grd0] PASSED [ 55%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:13827,Testability,test,tests,13827,_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:13928,Testability,test,tests,13928,_mp2_gradient_scftype[mp2 rhf pk/conv rr occ -grd0] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:14029,Testability,test,tests,14029,_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd1] PASSED [ 56%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:14128,Testability,test,tests,14128,test_mp2_gradient_scftype[mp2 rhf drct/conv rr occ -grd0] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:14227,Testability,test,tests,14227,py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd1] PASSED [ 57%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:14326,Testability,test,tests,14326,2.py::test_mp2_gradient_scftype[mp2 rhf df/conv rr occ -grd0] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:14425,Testability,test,tests,14425,mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd1] PASSED [ 58%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:14525,Testability,test,tests,14525,t_mp2.py::test_mp2_gradient_scftype[mp2 rhf mem/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:14625,Testability,test,tests,14625,est_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd1] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:14724,Testability,test,tests,14724,ts/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf disk/conv rr occ -grd0] PASSED [ 59%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:14823,Testability,test,tests,14823,ytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd1] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:14922,Testability,test,tests,14922,/pytests/test_mp2.py::test_mp2_gradient_scftype[mp2 rhf cd/conv rr occ -grd0] PASSED [ 60%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pyte,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:15021,Testability,test,tests,15021,ts/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pyt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:15121,Testability,test,tests,15121,s/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: * dfmp2-grd0] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pyt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:15221,Testability,test,tests,15221,/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd1] PASSED [ 61%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pyt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:15321,Testability,test,tests,15321,pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: * dfmp2-grd0] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:15421,Testability,test,tests,15421,ytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd1] PASSED [ 62%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:15521,Testability,test,tests,15521,ytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pyte,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:15621,Testability,test,tests,15621,ytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd1] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:15722,Testability,test,tests,15722,ests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: * dfmp2-grd0] PASSED [ 63%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:15823,Testability,test,tests,15823,ts/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd1] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:15923,Testability,test,tests,15923,s/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: * dfmp2-grd0] PASSED [ 64%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:16023,Testability,test,tests,16023,/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:16123,Testability,test,tests,16123,/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: * dfmp2-grd0] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:16223,Testability,test,tests,16223,/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd1] PASSED [ 65%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:16324,Testability,test,tests,16324,test_mp2.py::test_mp2_gradient_module[mp2 rhf conv fc: * occ -grd0] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:16425,Testability,test,tests,16425,est_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd1] PASSED [ 66%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gra,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:16522,Testability,test,tests,16522,s/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv fc: * occ -grd0] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gr,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:16619,Testability,test,tests,16619,ests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd1] PASSED [ 67%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:16716,Testability,test,tests,16716,/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv fc: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:16813,Testability,test,tests,16813,ests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd1] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:16911,Testability,test,tests,16911,/tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf conv ae: * occ -grd0] PASSED [ 68%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:17009,Testability,test,tests,17009,../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd1] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:17106,Testability,test,tests,17106,]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf conv ae: * occ -grd0] PASSED [ 69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:17203,Testability,test,tests,17203,69%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:17300,Testability,test,tests,17300,D [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:17397,Testability,test,tests,17397,ASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:17495,Testability,test,tests,17495,SSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:17593,Testability,test,tests,17593,SED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:17692,Testability,test,tests,17692,D [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:17791,Testability,test,tests,17791,[ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:17890,Testability,test,tests,17890, 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:17989,Testability,test,tests,17989,72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:18089,Testability,test,tests,18089,]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:18189,Testability,test,tests,18189,../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:18288,Testability,test,tests,18288,/tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:18387,Testability,test,tests,18387,ests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:18486,Testability,test,tests,18486,sts/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:18585,Testability,test,tests,18585,ts/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:18685,Testability,test,tests,18685,s/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:18785,Testability,test,tests,18785,/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:18882,Testability,test,tests,18882,ts/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:18980,Testability,test,tests,18980,sts/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:19077,Testability,test,tests,19077,/tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:19175,Testability,test,tests,19175,../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:19273,Testability,test,tests,19273, ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:19372,Testability,test,tests,19372, ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gr,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:19470,Testability,test,tests,19470,; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_grad,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:19568,Testability,test,tests,19568,]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:19666,Testability,test,tests,19666,9%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd0] PASSED [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradien,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:19764,Testability,test,tests,19764, 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd1] XFAIL [ 80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:19862,Testability,test,tests,19862,80%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_de,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:19961,Testability,test,tests,19961,1%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd1] XFAIL [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_defau,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:20057,Testability,test,tests,20057,81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv fc: dd -grd0] PASSED [ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_defau,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:20153,Testability,test,tests,20153,[ 81%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd1] XFAIL [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_defa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:20249,Testability,test,tests,20249,L [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_defau,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:20345,Testability,test,tests,20345,SSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_defaul,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:20441,Testability,test,tests,20441,PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:20538,Testability,test,tests,20538, PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:20634,Testability,test,tests,20634,1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:20730,Testability,test,tests,20730,rd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:20826,Testability,test,tests,20826, -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:20922,Testability,test,tests,20922,dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:21018,Testability,test,tests,21018,dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:21115,Testability,test,tests,21115,d -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:21210,Testability,test,tests,21210,dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:21305,Testability,test,tests,21305, dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:21400,Testability,test,tests,21400,c: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:21496,Testability,test,tests,21496,c: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 u,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:21592,Testability,test,tests,21592,e: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:21689,Testability,test,tests,21689,: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:21784,Testability,test,tests,21784,e: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:21879,Testability,test,tests,21879,ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:21974,Testability,test,tests,21974,f ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:22070,Testability,test,tests,22070,f ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd0] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:22166,Testability,test,tests,22166,d fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd0] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd1] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd0] P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:22263,Testability,test,tests,22263,fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd0] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd1] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd0] PASSED [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd1] XFAI,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:22356,Testability,test,tests,22356,d fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd0] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd1] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd0] PASSED [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd1] XFAIL [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd0] PASS,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:22449,Testability,test,tests,22449,] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd0] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd1] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd0] PASSED [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd1] XFAIL [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd0] PASSED [100%]. ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:22542,Testability,test,tests,22542,] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd0] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd1] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd0] PASSED [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd1] XFAIL [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd0] PASSED [100%]. ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:22635,Testability,test,tests,22635,] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd0] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd1] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd0] PASSED [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd1] XFAIL [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd0] PASSED [100%]. ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:22728,Testability,test,tests,22728,] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd0] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd1] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd0] PASSED [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd1] XFAIL [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd0] PASSED [100%]. ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:22822,Testability,test,tests,22822,] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd0] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd1] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd0] PASSED [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd1] XFAIL [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd0] PASSED [100%]. ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:22915,Testability,test,tests,22915,] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd0] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd1] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd0] PASSED [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd1] XFAIL [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd0] PASSED [100%]. ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:23008,Testability,test,tests,23008,] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd0] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd1] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd0] PASSED [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd1] XFAIL [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd0] PASSED [100%]. ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:23101,Testability,test,tests,23101,] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd0] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd1] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd0] PASSED [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd1] XFAIL [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd0] PASSED [100%]. ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:23194,Testability,test,tests,23194,] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd0] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd1] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd0] PASSED [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd1] XFAIL [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd0] PASSED [100%]. ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:23287,Testability,test,tests,23287,] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd0] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd ae: dd -grd0] PASSED [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd1] XFAIL [ 94%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd ae: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd1] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf fc: dd -grd0] PASSED [ 95%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd1] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf fc: dd -grd0] PASSED [ 96%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd1] XFAIL [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf fc: dd -grd0] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd1] PASSED [ 97%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf ae: dd -grd0] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd1] PASSED [ 98%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf ae: dd -grd0] PASSED [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd1] XFAIL [ 99%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf ae: dd -grd0] PASSED [100%]. ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841
https://github.com/psi4/psi4/pull/1850#issuecomment-612577737:286,Modifiability,variab,variable,286,This pull request **fixes 8 alerts** when merging cb9c21e49b5ae908e13ba89f857d67c10e5e0d1c into 37dfe8f30a22133c09c2038a583275b73c2e6fde - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e1e85132dd6db98d5a4c8d2d53ef4aaf04a9d6e5). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-612577737
https://github.com/psi4/psi4/pull/1850#issuecomment-612656089:286,Modifiability,variab,variable,286,This pull request **fixes 8 alerts** when merging 16b8eee6e73e047222ca1f72552a3decb7a440d4 into 37dfe8f30a22133c09c2038a583275b73c2e6fde - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c001c1b601b28c10f5d50bb7c7219af804572bd4). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-612656089
https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:273,Availability,down,downstream,273,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447
https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:517,Deployability,toggle,toggles,517,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447
https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:317,Energy Efficiency,energy,energy,317,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447
https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:351,Energy Efficiency,energy,energy,351,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447
https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:701,Energy Efficiency,ENERGY,ENERGY,701,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447
https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:918,Energy Efficiency,ENERGY,ENERGY,918,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447
https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:1137,Energy Efficiency,ENERGY,ENERGY,1137,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447
https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:39,Testability,test,tests,39,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447
https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:594,Testability,Assert,AssertionError,594,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447
https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:810,Testability,Assert,AssertionError,810,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447
https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:1028,Testability,Assert,AssertionError,1028,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447
https://github.com/psi4/psi4/pull/1850#issuecomment-632027218:286,Modifiability,variab,variable,286,This pull request **fixes 8 alerts** when merging 986ee14fa09da4640dba114297992ef5950f83f4 into 48958305338231540da2d23670a0b396289ac52a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-40494d669d4a6a920a495ff49494a878aa48907f). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-632027218
https://github.com/psi4/psi4/pull/1850#issuecomment-632336456:286,Modifiability,variab,variable,286,This pull request **fixes 8 alerts** when merging 36bb8de592ebf59f111f71ec04d06c3ed8a637ed into 48958305338231540da2d23670a0b396289ac52a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9b2357882c5dced37991df9ddc57ba7371b38743). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-632336456
https://github.com/psi4/psi4/pull/1850#issuecomment-634147911:158,Usability,undo,undo,158,"> Can I get an estimate on when this will be merged in, so I know when this will no longer be blocking #1872?. @JonathonMisiewicz As soon as I can rebase and undo the MKL 2020.1 experiments. @dgasmith Note that I've added printing the input at the top of schema runs: https://github.com/psi4/psi4/pull/1850/files#diff-a54f9d4707cbe64f08c3df0dfc0c8376R392-R396 opportunity to object. I think @hokru's concerns have been addressed except for the singles/doubles. We're using the same defs as MolSSI (of course, we proposed the defs), and TDC didn't object, so sticking with them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-634147911
https://github.com/psi4/psi4/pull/1850#issuecomment-634260559:286,Modifiability,variab,variable,286,This pull request **fixes 8 alerts** when merging 6f7418559659b04073f96db593285d84f38eaceb into ea89228d15e136b9f53f715bc1c68ce6af7cdaf0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-aa972eb7c7ac05dd263020d65dc050c19fbd5145). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-634260559
https://github.com/psi4/psi4/issues/1851#issuecomment-600658163:127,Security,access,access,127,"I should have learned by now not to agree to deal with issues you bring up when they involve OCC or DFOCC. We're getting a bad access exception when trying to [open the libtrans PSIO file](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/open.cc#L69). I'm not sure what the connection is between the wavefunction you pass in and making PSIO unhappy, but I'll investigate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-600658163
https://github.com/psi4/psi4/issues/1851#issuecomment-600658163:14,Usability,learn,learned,14,"I should have learned by now not to agree to deal with issues you bring up when they involve OCC or DFOCC. We're getting a bad access exception when trying to [open the libtrans PSIO file](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/open.cc#L69). I'm not sure what the connection is between the wavefunction you pass in and making PSIO unhappy, but I'll investigate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-600658163
https://github.com/psi4/psi4/issues/1851#issuecomment-600719939:540,Availability,error,error,540,"This bug is surprisingly straightforward, but figuring out the correct fix requires a lot of deep Psi knowledge. The `psio_` object of `occ` is set by a call to [the shallow_copy function](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/occwave.cc#L50). This works fine when the reference wavefunction has a PSIO object. No part of the [`from_file` function](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L145-L221) gives the reference wavefunction a PSIO object. Unsurprisingly, you get a memory error when you try to use an uninitialized object. The other modules Holger tested don't have a problem because they don't use the reference wavefunction's PSIO. `fnocc` and `dfmp2`, for instance, make their own. Can anybody explain why we require the Wavefunction base class to have a PSIO object? It seems like something that a subclass can create if convenient, but we shouldn't assume will always be set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-600719939
https://github.com/psi4/psi4/issues/1851#issuecomment-600719939:616,Testability,test,tested,616,"This bug is surprisingly straightforward, but figuring out the correct fix requires a lot of deep Psi knowledge. The `psio_` object of `occ` is set by a call to [the shallow_copy function](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/occwave.cc#L50). This works fine when the reference wavefunction has a PSIO object. No part of the [`from_file` function](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L145-L221) gives the reference wavefunction a PSIO object. Unsurprisingly, you get a memory error when you try to use an uninitialized object. The other modules Holger tested don't have a problem because they don't use the reference wavefunction's PSIO. `fnocc` and `dfmp2`, for instance, make their own. Can anybody explain why we require the Wavefunction base class to have a PSIO object? It seems like something that a subclass can create if convenient, but we shouldn't assume will always be set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-600719939
https://github.com/psi4/psi4/issues/1851#issuecomment-602681392:63,Usability,feedback,feedback,63,"For the record, I'm not touching this until some more core dev feedback comes in. I am not taking changes to the wavefunction class lightly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-602681392
https://github.com/psi4/psi4/issues/1851#issuecomment-608613470:335,Availability,error,error,335,"Summing up discussion from the conference call on Wednesday:; * This is a non-trivial bug to fix. The easy fix of removing `psio_` from the wavefunction won't work from DFOCC, as that is how DFOCC gets some of its integrals.; * DGAS is generally uneasy with changes to the wavefunction specification. The current plan is to put actual error messages instead of segfaults for the four aforementioned modules and leave this aside, otherwise.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-608613470
https://github.com/psi4/psi4/issues/1851#issuecomment-608613470:341,Integrability,message,messages,341,"Summing up discussion from the conference call on Wednesday:; * This is a non-trivial bug to fix. The easy fix of removing `psio_` from the wavefunction won't work from DFOCC, as that is how DFOCC gets some of its integrals.; * DGAS is generally uneasy with changes to the wavefunction specification. The current plan is to put actual error messages instead of segfaults for the four aforementioned modules and leave this aside, otherwise.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-608613470
https://github.com/psi4/psi4/issues/1851#issuecomment-815284339:69,Integrability,message,message,69,"Unmarking this as attached to any milestone. As noted in my previous message, this is a very difficult (and not pressing) bug to fix because we _really_ want to avoid touching wavefunction API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-815284339
https://github.com/psi4/psi4/issues/1851#issuecomment-815284339:161,Safety,avoid,avoid,161,"Unmarking this as attached to any milestone. As noted in my previous message, this is a very difficult (and not pressing) bug to fix because we _really_ want to avoid touching wavefunction API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-815284339
https://github.com/psi4/psi4/pull/1852#issuecomment-601352896:35,Testability,test,testing,35,"finite difference (5-pt) is a good testing strategy. e.g., https://github.com/psi4/psi4/blob/master/tests/pytests/test_dipoles.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1852#issuecomment-601352896
https://github.com/psi4/psi4/pull/1852#issuecomment-601352896:100,Testability,test,tests,100,"finite difference (5-pt) is a good testing strategy. e.g., https://github.com/psi4/psi4/blob/master/tests/pytests/test_dipoles.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1852#issuecomment-601352896
https://github.com/psi4/psi4/pull/1855#issuecomment-606202256:54,Availability,fault,fault,54,"Thanks for working on this!. The test fail isn't your fault. DETCI [isn't reset-able](https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R217), and that has looming consequences for pytest testing and QCA use. Does your test run ok in random order and w/o the cas test `pytest ... test_psi4.py -n2 -k ""not cas""`? You've correctly found all the clean statements, but it isn't necessary to include them explicitly b/c they're run before every test https://github.com/psi4/psi4/blob/master/tests/pytests/conftest.py#L9-L14",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-606202256
https://github.com/psi4/psi4/pull/1855#issuecomment-606202256:33,Testability,test,test,33,"Thanks for working on this!. The test fail isn't your fault. DETCI [isn't reset-able](https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R217), and that has looming consequences for pytest testing and QCA use. Does your test run ok in random order and w/o the cas test `pytest ... test_psi4.py -n2 -k ""not cas""`? You've correctly found all the clean statements, but it isn't necessary to include them explicitly b/c they're run before every test https://github.com/psi4/psi4/blob/master/tests/pytests/conftest.py#L9-L14",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-606202256
https://github.com/psi4/psi4/pull/1855#issuecomment-606202256:220,Testability,test,testing,220,"Thanks for working on this!. The test fail isn't your fault. DETCI [isn't reset-able](https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R217), and that has looming consequences for pytest testing and QCA use. Does your test run ok in random order and w/o the cas test `pytest ... test_psi4.py -n2 -k ""not cas""`? You've correctly found all the clean statements, but it isn't necessary to include them explicitly b/c they're run before every test https://github.com/psi4/psi4/blob/master/tests/pytests/conftest.py#L9-L14",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-606202256
https://github.com/psi4/psi4/pull/1855#issuecomment-606202256:251,Testability,test,test,251,"Thanks for working on this!. The test fail isn't your fault. DETCI [isn't reset-able](https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R217), and that has looming consequences for pytest testing and QCA use. Does your test run ok in random order and w/o the cas test `pytest ... test_psi4.py -n2 -k ""not cas""`? You've correctly found all the clean statements, but it isn't necessary to include them explicitly b/c they're run before every test https://github.com/psi4/psi4/blob/master/tests/pytests/conftest.py#L9-L14",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-606202256
https://github.com/psi4/psi4/pull/1855#issuecomment-606202256:295,Testability,test,test,295,"Thanks for working on this!. The test fail isn't your fault. DETCI [isn't reset-able](https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R217), and that has looming consequences for pytest testing and QCA use. Does your test run ok in random order and w/o the cas test `pytest ... test_psi4.py -n2 -k ""not cas""`? You've correctly found all the clean statements, but it isn't necessary to include them explicitly b/c they're run before every test https://github.com/psi4/psi4/blob/master/tests/pytests/conftest.py#L9-L14",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-606202256
https://github.com/psi4/psi4/pull/1855#issuecomment-606202256:472,Testability,test,test,472,"Thanks for working on this!. The test fail isn't your fault. DETCI [isn't reset-able](https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R217), and that has looming consequences for pytest testing and QCA use. Does your test run ok in random order and w/o the cas test `pytest ... test_psi4.py -n2 -k ""not cas""`? You've correctly found all the clean statements, but it isn't necessary to include them explicitly b/c they're run before every test https://github.com/psi4/psi4/blob/master/tests/pytests/conftest.py#L9-L14",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-606202256
https://github.com/psi4/psi4/pull/1855#issuecomment-606202256:518,Testability,test,tests,518,"Thanks for working on this!. The test fail isn't your fault. DETCI [isn't reset-able](https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R217), and that has looming consequences for pytest testing and QCA use. Does your test run ok in random order and w/o the cas test `pytest ... test_psi4.py -n2 -k ""not cas""`? You've correctly found all the clean statements, but it isn't necessary to include them explicitly b/c they're run before every test https://github.com/psi4/psi4/blob/master/tests/pytests/conftest.py#L9-L14",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-606202256
https://github.com/psi4/psi4/pull/1855#issuecomment-607977205:142,Energy Efficiency,reduce,reduce,142,"Yes, it seems to run fine! I am calling DETCI multiple times within the test itself, since I wanted to test SF, SF-IP, and SF-EA cases; I can reduce it to just SF-IP if that will be more stable in the long run. I've also just added some docs; let me know if there's anything else I need to do. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-607977205
https://github.com/psi4/psi4/pull/1855#issuecomment-607977205:72,Testability,test,test,72,"Yes, it seems to run fine! I am calling DETCI multiple times within the test itself, since I wanted to test SF, SF-IP, and SF-EA cases; I can reduce it to just SF-IP if that will be more stable in the long run. I've also just added some docs; let me know if there's anything else I need to do. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-607977205
https://github.com/psi4/psi4/pull/1855#issuecomment-607977205:103,Testability,test,test,103,"Yes, it seems to run fine! I am calling DETCI multiple times within the test itself, since I wanted to test SF, SF-IP, and SF-EA cases; I can reduce it to just SF-IP if that will be more stable in the long run. I've also just added some docs; let me know if there's anything else I need to do. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-607977205
https://github.com/psi4/psi4/pull/1855#issuecomment-643792312:78,Deployability,release,release,78,"@shannonhouck Gentle poke here, let us know if this will be make the Psi4 1.4 release or needs to be pushed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-643792312
https://github.com/psi4/psi4/pull/1855#issuecomment-644216732:230,Deployability,release,release,230,"Oops, thanks for the reminder! I'd love to add the things that @loriab suggested so Psi4FockCI can be built with Psi4. It should be a relatively quick fix, so I can try and get that done before tomorrow if that's okay for the 1.4 release timeline. After that's complete, I think everything should be good to go, assuming there aren't any additional issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-644216732
https://github.com/psi4/psi4/pull/1855#issuecomment-644380628:117,Deployability,pipeline,pipelines,117,"I've got a `fockci` conda package built, so you can try adding it to https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L90 and seeing if your pytest runs in continuous integration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-644380628
https://github.com/psi4/psi4/pull/1855#issuecomment-644380628:133,Deployability,pipeline,pipelines-linux,133,"I've got a `fockci` conda package built, so you can try adding it to https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L90 and seeing if your pytest runs in continuous integration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-644380628
https://github.com/psi4/psi4/pull/1855#issuecomment-644380628:191,Deployability,continuous,continuous,191,"I've got a `fockci` conda package built, so you can try adding it to https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L90 and seeing if your pytest runs in continuous integration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-644380628
https://github.com/psi4/psi4/pull/1855#issuecomment-644380628:202,Deployability,integrat,integration,202,"I've got a `fockci` conda package built, so you can try adding it to https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L90 and seeing if your pytest runs in continuous integration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-644380628
https://github.com/psi4/psi4/pull/1855#issuecomment-644380628:202,Integrability,integrat,integration,202,"I've got a `fockci` conda package built, so you can try adding it to https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L90 and seeing if your pytest runs in continuous integration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-644380628
https://github.com/psi4/psi4/pull/1855#issuecomment-644526678:91,Deployability,install,installation,91,"@loriab I've added the internal build like you suggested (drawing from the previous add-on installation files). It seems to compile without issues on my machine, but let me know if anything looks awry!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-644526678
https://github.com/psi4/psi4/issues/1856#issuecomment-638995737:156,Availability,error,error,156,"Another instance of triggering the same ""Failed to converge"" print message, carried forward from [the forums](http://forum.psicode.org/t/failed-to-converge-error/1811). ```; memory 48 Gb. molecule {; 0 1; Au 0.456697 -1.333264 0.040916; C 2.603870 -0.838096 0.229755; H 2.763370 -0.719170 1.301892; C 2.477106 -2.135791 -0.222006; H 2.550111 -2.348345 -1.284567; H 2.591715 -2.990149 0.439107; B 2.865868 0.484463 -0.740811; F 1.800945 0.626222 -1.684345; F 2.929814 1.631672 0.055078; F 4.060740 0.285067 -1.428702. units angstrom; no_reorient; symmetry c1; }. set globals {; basis def2-svpd; }. energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1856#issuecomment-638995737
https://github.com/psi4/psi4/issues/1856#issuecomment-638995737:597,Energy Efficiency,energy,energy,597,"Another instance of triggering the same ""Failed to converge"" print message, carried forward from [the forums](http://forum.psicode.org/t/failed-to-converge-error/1811). ```; memory 48 Gb. molecule {; 0 1; Au 0.456697 -1.333264 0.040916; C 2.603870 -0.838096 0.229755; H 2.763370 -0.719170 1.301892; C 2.477106 -2.135791 -0.222006; H 2.550111 -2.348345 -1.284567; H 2.591715 -2.990149 0.439107; B 2.865868 0.484463 -0.740811; F 1.800945 0.626222 -1.684345; F 2.929814 1.631672 0.055078; F 4.060740 0.285067 -1.428702. units angstrom; no_reorient; symmetry c1; }. set globals {; basis def2-svpd; }. energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1856#issuecomment-638995737
https://github.com/psi4/psi4/issues/1856#issuecomment-638995737:67,Integrability,message,message,67,"Another instance of triggering the same ""Failed to converge"" print message, carried forward from [the forums](http://forum.psicode.org/t/failed-to-converge-error/1811). ```; memory 48 Gb. molecule {; 0 1; Au 0.456697 -1.333264 0.040916; C 2.603870 -0.838096 0.229755; H 2.763370 -0.719170 1.301892; C 2.477106 -2.135791 -0.222006; H 2.550111 -2.348345 -1.284567; H 2.591715 -2.990149 0.439107; B 2.865868 0.484463 -0.740811; F 1.800945 0.626222 -1.684345; F 2.929814 1.631672 0.055078; F 4.060740 0.285067 -1.428702. units angstrom; no_reorient; symmetry c1; }. set globals {; basis def2-svpd; }. energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1856#issuecomment-638995737
https://github.com/psi4/psi4/issues/1856#issuecomment-1133742940:83,Integrability,message,message,83,"Closing issue. In neither of the posted input files do I see a ""fails to converge"" message. On modifying Peter's posted input to use the def2-QZVP basis, the SCF converges using 10 iterations. Likely explanations include ADIIS SCF convergence acceleration and the switch to libecpint.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1856#issuecomment-1133742940
https://github.com/psi4/psi4/pull/1860#issuecomment-610439837:28,Modifiability,variab,variables,28,"Biggest issue is moving the variables between the Functional/LibXCFunctional/Superfunctional; objects. Some of the C++ magic is completely lost to me. This line [here](https://github.com/hokru/psi4/blob/rho_cutoff/psi4/src/psi4/libfunctional/superfunctional.cc#L98); is supposed to set the density cutoff to the superfunctional. But this [print out](https://github.com/hokru/psi4/blob/rho_cutoff/psi4/src/psi4/libfunctional/superfunctional.cc#L287) shows me it does not work. I can set this value using python [superfunctional](https://github.com/hokru/psi4/blob/rho_cutoff/psi4/driver/procrouting/dft/superfunctionals.py#L80) but that doesn't seem consistent. I spend a lot of time trying to fix this, but for now I am too confused. Need to revisit later. I welcome any pointers to what could be wrong :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-610439837
https://github.com/psi4/psi4/pull/1860#issuecomment-610517532:1,Availability,TOLER,TOLERANCE,1,"""TOLERANCE"" is used in most ofter cutoff-type keywords, so I kept to that. ; Not the biggest fan of it either, but consistency among the keywords is useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-610517532
https://github.com/psi4/psi4/pull/1860#issuecomment-611009420:82,Deployability,update,updated,82,Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-611009420
https://github.com/psi4/psi4/pull/1860#issuecomment-611009420:54,Modifiability,variab,variable,54,Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-611009420
https://github.com/psi4/psi4/pull/1860#issuecomment-611050691:84,Deployability,update,updated,84,"> Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class. Is this necessary at all? I mean, do we want to set the density cutoff _also_ through the LibXCFunctional class? How much flexibility is wanted?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-611050691
https://github.com/psi4/psi4/pull/1860#issuecomment-611050691:56,Modifiability,variab,variable,56,"> Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class. Is this necessary at all? I mean, do we want to set the density cutoff _also_ through the LibXCFunctional class? How much flexibility is wanted?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-611050691
https://github.com/psi4/psi4/pull/1860#issuecomment-612060219:86,Deployability,update,updated,86,"> > Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class.; > ; > Is this necessary at all? I mean, do we want to set the density cutoff _also_ through the LibXCFunctional class? How much flexibility is wanted?. Where are you trying to set this at? The first thing that comes to mind is the functional can be ""locked"" so that when a threaded V matrix is computed we can correctly replicate the `SuperFunctional` to compute on each thread. It may be worth double checking that you have the correct locking guards around this like other setters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-612060219
https://github.com/psi4/psi4/pull/1860#issuecomment-612060219:58,Modifiability,variab,variable,58,"> > Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class.; > ; > Is this necessary at all? I mean, do we want to set the density cutoff _also_ through the LibXCFunctional class? How much flexibility is wanted?. Where are you trying to set this at? The first thing that comes to mind is the functional can be ""locked"" so that when a threaded V matrix is computed we can correctly replicate the `SuperFunctional` to compute on each thread. It may be worth double checking that you have the correct locking guards around this like other setters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-612060219
https://github.com/psi4/psi4/pull/1860#issuecomment-612134583:71,Testability,test,tests,71,Maybe I should mention that the current version works and I am running tests.; That's also why debug statement are still included.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-612134583
https://github.com/psi4/psi4/pull/1860#issuecomment-612347115:216,Testability,test,testing,216,"> Is there a way to control the grid sparsity cutoffs, i.e. the basis function screening thresholds?. Yes, i believe `dft_basis_tolerance` does that job. This and my new `dft_density_tolerance` are at `1e-12` for my testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-612347115
https://github.com/psi4/psi4/pull/1860#issuecomment-612518067:168,Deployability,update,updated,168,"OK. I added a test that also servers as an example on some details. Combinations of empty, X-only, C-only and multiple X,C kernels are being tested. Also check out the updated OP.; I am happy with the functionality. This would be ready for review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-612518067
https://github.com/psi4/psi4/pull/1860#issuecomment-612518067:14,Testability,test,test,14,"OK. I added a test that also servers as an example on some details. Combinations of empty, X-only, C-only and multiple X,C kernels are being tested. Also check out the updated OP.; I am happy with the functionality. This would be ready for review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-612518067
https://github.com/psi4/psi4/pull/1860#issuecomment-612518067:141,Testability,test,tested,141,"OK. I added a test that also servers as an example on some details. Combinations of empty, X-only, C-only and multiple X,C kernels are being tested. Also check out the updated OP.; I am happy with the functionality. This would be ready for review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-612518067
https://github.com/psi4/psi4/pull/1860#issuecomment-614003569:350,Testability,test,test,350,"The introduction of `dens_threshold` has implications for PSI4 and CAM-B3LYP: https://gitlab.com/libxc/libxc/-/issues/99#note_324078822; (possibly other functionals, too? @susilehtola ). Either the default threshold will to be larger than `1e-12` or perhaps functional specific threshold are an option.; It seems `2.5E-11` still passes the cam-b3lyp test, but `1E-11` not anymore.; For users CAM-B3LYP should work out of the box",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-614003569
https://github.com/psi4/psi4/pull/1860#issuecomment-616657858:336,Deployability,update,update,336,"Full overview of default cutoffs and generating python file can be found here: https://gist.github.com/hokru/546307545c7bf0d96de5cf867e036cae. Currently the best way forward, I think, is leaving density screening **off** by default to avoid setting too tight thresholds for certain components leading to unintuitive behaviour. ; I will update the PR accordingly unless another direction is wanted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-616657858
https://github.com/psi4/psi4/pull/1860#issuecomment-616657858:235,Safety,avoid,avoid,235,"Full overview of default cutoffs and generating python file can be found here: https://gist.github.com/hokru/546307545c7bf0d96de5cf867e036cae. Currently the best way forward, I think, is leaving density screening **off** by default to avoid setting too tight thresholds for certain components leading to unintuitive behaviour. ; I will update the PR accordingly unless another direction is wanted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-616657858
https://github.com/psi4/psi4/pull/1860#issuecomment-624507775:171,Integrability,rout,routines,171,I ran clang-format over some of the files and also looked manually for odd empty lines. There is the remaining question if the unused (as far as I see) `lsda/meta_cutoff` routines should stay or be remove?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-624507775
https://github.com/psi4/psi4/pull/1862#issuecomment-611412812:22,Availability,error,error,22,"The extraction of the error message looks complicated, but I want to catch the case where the message contains other "":"" characters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611412812
https://github.com/psi4/psi4/pull/1862#issuecomment-611412812:28,Integrability,message,message,28,"The extraction of the error message looks complicated, but I want to catch the case where the message contains other "":"" characters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611412812
https://github.com/psi4/psi4/pull/1862#issuecomment-611412812:94,Integrability,message,message,94,"The extraction of the error message looks complicated, but I want to catch the case where the message contains other "":"" characters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611412812
https://github.com/psi4/psi4/pull/1862#issuecomment-611486697:70,Availability,error,error,70,"I'd suggest trying to identify what the ""header"" to remove in a given error message is for a large variety of error messages, those raised C-side and those raised Py-side. Once you have that, look into the source to confirm the error messages follow that pattern, and when it's confirmed, remove what matches that pattern. Then you should be able to handle the case that an error message contains a colon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697
https://github.com/psi4/psi4/pull/1862#issuecomment-611486697:110,Availability,error,error,110,"I'd suggest trying to identify what the ""header"" to remove in a given error message is for a large variety of error messages, those raised C-side and those raised Py-side. Once you have that, look into the source to confirm the error messages follow that pattern, and when it's confirmed, remove what matches that pattern. Then you should be able to handle the case that an error message contains a colon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697
https://github.com/psi4/psi4/pull/1862#issuecomment-611486697:228,Availability,error,error,228,"I'd suggest trying to identify what the ""header"" to remove in a given error message is for a large variety of error messages, those raised C-side and those raised Py-side. Once you have that, look into the source to confirm the error messages follow that pattern, and when it's confirmed, remove what matches that pattern. Then you should be able to handle the case that an error message contains a colon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697
https://github.com/psi4/psi4/pull/1862#issuecomment-611486697:374,Availability,error,error,374,"I'd suggest trying to identify what the ""header"" to remove in a given error message is for a large variety of error messages, those raised C-side and those raised Py-side. Once you have that, look into the source to confirm the error messages follow that pattern, and when it's confirmed, remove what matches that pattern. Then you should be able to handle the case that an error message contains a colon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697
https://github.com/psi4/psi4/pull/1862#issuecomment-611486697:76,Integrability,message,message,76,"I'd suggest trying to identify what the ""header"" to remove in a given error message is for a large variety of error messages, those raised C-side and those raised Py-side. Once you have that, look into the source to confirm the error messages follow that pattern, and when it's confirmed, remove what matches that pattern. Then you should be able to handle the case that an error message contains a colon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697
https://github.com/psi4/psi4/pull/1862#issuecomment-611486697:116,Integrability,message,messages,116,"I'd suggest trying to identify what the ""header"" to remove in a given error message is for a large variety of error messages, those raised C-side and those raised Py-side. Once you have that, look into the source to confirm the error messages follow that pattern, and when it's confirmed, remove what matches that pattern. Then you should be able to handle the case that an error message contains a colon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697
https://github.com/psi4/psi4/pull/1862#issuecomment-611486697:234,Integrability,message,messages,234,"I'd suggest trying to identify what the ""header"" to remove in a given error message is for a large variety of error messages, those raised C-side and those raised Py-side. Once you have that, look into the source to confirm the error messages follow that pattern, and when it's confirmed, remove what matches that pattern. Then you should be able to handle the case that an error message contains a colon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697
https://github.com/psi4/psi4/pull/1862#issuecomment-611486697:380,Integrability,message,message,380,"I'd suggest trying to identify what the ""header"" to remove in a given error message is for a large variety of error messages, those raised C-side and those raised Py-side. Once you have that, look into the source to confirm the error messages follow that pattern, and when it's confirmed, remove what matches that pattern. Then you should be able to handle the case that an error message contains a colon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697
https://github.com/psi4/psi4/pull/1862#issuecomment-611520933:109,Availability,error,error,109,"I may have been unclear. It already works with multiple "":"" characters. Not sure if there is already such an error message somewhere. Format always seems: `<exception name>: <exception message>`, so the splitting the string at the first "":"" in 2 parts and then taking the second (=last) part should work well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611520933
https://github.com/psi4/psi4/pull/1862#issuecomment-611520933:115,Integrability,message,message,115,"I may have been unclear. It already works with multiple "":"" characters. Not sure if there is already such an error message somewhere. Format always seems: `<exception name>: <exception message>`, so the splitting the string at the first "":"" in 2 parts and then taking the second (=last) part should work well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611520933
https://github.com/psi4/psi4/pull/1862#issuecomment-611520933:185,Integrability,message,message,185,"I may have been unclear. It already works with multiple "":"" characters. Not sure if there is already such an error message somewhere. Format always seems: `<exception name>: <exception message>`, so the splitting the string at the first "":"" in 2 parts and then taking the second (=last) part should work well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611520933
https://github.com/psi4/psi4/pull/1862#issuecomment-611615058:70,Energy Efficiency,adapt,adapts,70,Thanks for the code snippet @dgasmith ! I added the text wrapping. It adapts to the length of the message up to a maximum value of 80. One can set a different maximum via optional argument. I renamed the function to a more general `message_box` in case one wants to use it for something else. For testing: [wrap.py.txt](https://github.com/psi4/psi4/files/4457324/wrap.py.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058
https://github.com/psi4/psi4/pull/1862#issuecomment-611615058:57,Integrability,wrap,wrapping,57,Thanks for the code snippet @dgasmith ! I added the text wrapping. It adapts to the length of the message up to a maximum value of 80. One can set a different maximum via optional argument. I renamed the function to a more general `message_box` in case one wants to use it for something else. For testing: [wrap.py.txt](https://github.com/psi4/psi4/files/4457324/wrap.py.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058
https://github.com/psi4/psi4/pull/1862#issuecomment-611615058:98,Integrability,message,message,98,Thanks for the code snippet @dgasmith ! I added the text wrapping. It adapts to the length of the message up to a maximum value of 80. One can set a different maximum via optional argument. I renamed the function to a more general `message_box` in case one wants to use it for something else. For testing: [wrap.py.txt](https://github.com/psi4/psi4/files/4457324/wrap.py.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058
https://github.com/psi4/psi4/pull/1862#issuecomment-611615058:307,Integrability,wrap,wrap,307,Thanks for the code snippet @dgasmith ! I added the text wrapping. It adapts to the length of the message up to a maximum value of 80. One can set a different maximum via optional argument. I renamed the function to a more general `message_box` in case one wants to use it for something else. For testing: [wrap.py.txt](https://github.com/psi4/psi4/files/4457324/wrap.py.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058
https://github.com/psi4/psi4/pull/1862#issuecomment-611615058:363,Integrability,wrap,wrap,363,Thanks for the code snippet @dgasmith ! I added the text wrapping. It adapts to the length of the message up to a maximum value of 80. One can set a different maximum via optional argument. I renamed the function to a more general `message_box` in case one wants to use it for something else. For testing: [wrap.py.txt](https://github.com/psi4/psi4/files/4457324/wrap.py.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058
https://github.com/psi4/psi4/pull/1862#issuecomment-611615058:70,Modifiability,adapt,adapts,70,Thanks for the code snippet @dgasmith ! I added the text wrapping. It adapts to the length of the message up to a maximum value of 80. One can set a different maximum via optional argument. I renamed the function to a more general `message_box` in case one wants to use it for something else. For testing: [wrap.py.txt](https://github.com/psi4/psi4/files/4457324/wrap.py.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058
https://github.com/psi4/psi4/pull/1862#issuecomment-611615058:297,Testability,test,testing,297,Thanks for the code snippet @dgasmith ! I added the text wrapping. It adapts to the length of the message up to a maximum value of 80. One can set a different maximum via optional argument. I renamed the function to a more general `message_box` in case one wants to use it for something else. For testing: [wrap.py.txt](https://github.com/psi4/psi4/files/4457324/wrap.py.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058
https://github.com/psi4/psi4/issues/1863#issuecomment-611901249:50,Deployability,update,updated,50,"Good catch! Yes, I agree that the docs need to be updated. That particular manual page was already a [target to be updated](https://github.com/psi4/psi4/issues/1796), but we hadn't specifically realized the problem with frozen core. As for frozen core support... `occ` includes methods that are orbital-optimized and methods that are not. The non-orbital optimized methods support frozen core energies but not gradients, but there is no frozen core for orbital optimized methods. `dfocc` universally has frozen-core for its orbital optimized methods, but orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. Getting frozen core (and frozen virtual!) support into orbital-optimized methods of the `occ` module is on my to-do list, but my current ETA is Spring 2021 due to circumstances you probably don't care about. If you don't mind me asking, what are you trying to do?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249
https://github.com/psi4/psi4/issues/1863#issuecomment-611901249:115,Deployability,update,updated,115,"Good catch! Yes, I agree that the docs need to be updated. That particular manual page was already a [target to be updated](https://github.com/psi4/psi4/issues/1796), but we hadn't specifically realized the problem with frozen core. As for frozen core support... `occ` includes methods that are orbital-optimized and methods that are not. The non-orbital optimized methods support frozen core energies but not gradients, but there is no frozen core for orbital optimized methods. `dfocc` universally has frozen-core for its orbital optimized methods, but orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. Getting frozen core (and frozen virtual!) support into orbital-optimized methods of the `occ` module is on my to-do list, but my current ETA is Spring 2021 due to circumstances you probably don't care about. If you don't mind me asking, what are you trying to do?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249
https://github.com/psi4/psi4/issues/1863#issuecomment-611901249:303,Performance,optimiz,optimized,303,"Good catch! Yes, I agree that the docs need to be updated. That particular manual page was already a [target to be updated](https://github.com/psi4/psi4/issues/1796), but we hadn't specifically realized the problem with frozen core. As for frozen core support... `occ` includes methods that are orbital-optimized and methods that are not. The non-orbital optimized methods support frozen core energies but not gradients, but there is no frozen core for orbital optimized methods. `dfocc` universally has frozen-core for its orbital optimized methods, but orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. Getting frozen core (and frozen virtual!) support into orbital-optimized methods of the `occ` module is on my to-do list, but my current ETA is Spring 2021 due to circumstances you probably don't care about. If you don't mind me asking, what are you trying to do?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249
https://github.com/psi4/psi4/issues/1863#issuecomment-611901249:355,Performance,optimiz,optimized,355,"Good catch! Yes, I agree that the docs need to be updated. That particular manual page was already a [target to be updated](https://github.com/psi4/psi4/issues/1796), but we hadn't specifically realized the problem with frozen core. As for frozen core support... `occ` includes methods that are orbital-optimized and methods that are not. The non-orbital optimized methods support frozen core energies but not gradients, but there is no frozen core for orbital optimized methods. `dfocc` universally has frozen-core for its orbital optimized methods, but orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. Getting frozen core (and frozen virtual!) support into orbital-optimized methods of the `occ` module is on my to-do list, but my current ETA is Spring 2021 due to circumstances you probably don't care about. If you don't mind me asking, what are you trying to do?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249
https://github.com/psi4/psi4/issues/1863#issuecomment-611901249:461,Performance,optimiz,optimized,461,"Good catch! Yes, I agree that the docs need to be updated. That particular manual page was already a [target to be updated](https://github.com/psi4/psi4/issues/1796), but we hadn't specifically realized the problem with frozen core. As for frozen core support... `occ` includes methods that are orbital-optimized and methods that are not. The non-orbital optimized methods support frozen core energies but not gradients, but there is no frozen core for orbital optimized methods. `dfocc` universally has frozen-core for its orbital optimized methods, but orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. Getting frozen core (and frozen virtual!) support into orbital-optimized methods of the `occ` module is on my to-do list, but my current ETA is Spring 2021 due to circumstances you probably don't care about. If you don't mind me asking, what are you trying to do?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249
https://github.com/psi4/psi4/issues/1863#issuecomment-611901249:532,Performance,optimiz,optimized,532,"Good catch! Yes, I agree that the docs need to be updated. That particular manual page was already a [target to be updated](https://github.com/psi4/psi4/issues/1796), but we hadn't specifically realized the problem with frozen core. As for frozen core support... `occ` includes methods that are orbital-optimized and methods that are not. The non-orbital optimized methods support frozen core energies but not gradients, but there is no frozen core for orbital optimized methods. `dfocc` universally has frozen-core for its orbital optimized methods, but orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. Getting frozen core (and frozen virtual!) support into orbital-optimized methods of the `occ` module is on my to-do list, but my current ETA is Spring 2021 due to circumstances you probably don't care about. If you don't mind me asking, what are you trying to do?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249
https://github.com/psi4/psi4/issues/1863#issuecomment-611901249:563,Performance,optimiz,optimized,563,"Good catch! Yes, I agree that the docs need to be updated. That particular manual page was already a [target to be updated](https://github.com/psi4/psi4/issues/1796), but we hadn't specifically realized the problem with frozen core. As for frozen core support... `occ` includes methods that are orbital-optimized and methods that are not. The non-orbital optimized methods support frozen core energies but not gradients, but there is no frozen core for orbital optimized methods. `dfocc` universally has frozen-core for its orbital optimized methods, but orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. Getting frozen core (and frozen virtual!) support into orbital-optimized methods of the `occ` module is on my to-do list, but my current ETA is Spring 2021 due to circumstances you probably don't care about. If you don't mind me asking, what are you trying to do?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249
https://github.com/psi4/psi4/issues/1863#issuecomment-611901249:737,Performance,optimiz,optimized,737,"Good catch! Yes, I agree that the docs need to be updated. That particular manual page was already a [target to be updated](https://github.com/psi4/psi4/issues/1796), but we hadn't specifically realized the problem with frozen core. As for frozen core support... `occ` includes methods that are orbital-optimized and methods that are not. The non-orbital optimized methods support frozen core energies but not gradients, but there is no frozen core for orbital optimized methods. `dfocc` universally has frozen-core for its orbital optimized methods, but orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. Getting frozen core (and frozen virtual!) support into orbital-optimized methods of the `occ` module is on my to-do list, but my current ETA is Spring 2021 due to circumstances you probably don't care about. If you don't mind me asking, what are you trying to do?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249
https://github.com/psi4/psi4/issues/1863#issuecomment-611917954:43,Performance,optimiz,optimized,43,"Thanks for the information!; > ; > orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. I kinda thought you solved all the the DFOCC convergence issues recently, at great effort.; > ; > If you don't mind me asking, what are you trying to do?. I don't mind it at all, as long as you don't mind a long winded explanation. ;-) Also, I am mostly just poking around, trying to weigh my options.; Essentially I am looking for code that can do open-shell Brueckner coupled-cluster doubles with perturbative triples ( either RBCCD(T) or UBCCD(T) ), using an ROHF reference. We have recently published a [paper](https://doi.org/10.1039/C9CP07007A), where we found that the (T) contribution of BCCD(T) is much more stable than the (T) of CCSD(T) at geometries far from equilibrium, which is what we need a lot (about 1e+5 single point energies) of for our purposes. Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611917954
https://github.com/psi4/psi4/issues/1863#issuecomment-611917954:1117,Performance,perform,performant,1117,"Thanks for the information!; > ; > orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. I kinda thought you solved all the the DFOCC convergence issues recently, at great effort.; > ; > If you don't mind me asking, what are you trying to do?. I don't mind it at all, as long as you don't mind a long winded explanation. ;-) Also, I am mostly just poking around, trying to weigh my options.; Essentially I am looking for code that can do open-shell Brueckner coupled-cluster doubles with perturbative triples ( either RBCCD(T) or UBCCD(T) ), using an ROHF reference. We have recently published a [paper](https://doi.org/10.1039/C9CP07007A), where we found that the (T) contribution of BCCD(T) is much more stable than the (T) of CCSD(T) at geometries far from equilibrium, which is what we need a lot (about 1e+5 single point energies) of for our purposes. Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611917954
https://github.com/psi4/psi4/issues/1863#issuecomment-611923735:325,Availability,avail,available,325,"Yes, the shortcoming of (T) on non-equilibrium structures is know.; PSI4 has UBCC(T) `energy('bcc(t)')` on a ROHF reference, but only conventional integrals with the `ccenergy` module. Maybe you already found it. You may want to have a look at Piecuch's methods (and his group's general work) for which now there is a plugin available https://github.com/piecuch-group/psi4_cct3 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611923735
https://github.com/psi4/psi4/issues/1863#issuecomment-611923735:86,Energy Efficiency,energy,energy,86,"Yes, the shortcoming of (T) on non-equilibrium structures is know.; PSI4 has UBCC(T) `energy('bcc(t)')` on a ROHF reference, but only conventional integrals with the `ccenergy` module. Maybe you already found it. You may want to have a look at Piecuch's methods (and his group's general work) for which now there is a plugin available https://github.com/piecuch-group/psi4_cct3 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611923735
https://github.com/psi4/psi4/issues/1863#issuecomment-611923735:318,Modifiability,plugin,plugin,318,"Yes, the shortcoming of (T) on non-equilibrium structures is know.; PSI4 has UBCC(T) `energy('bcc(t)')` on a ROHF reference, but only conventional integrals with the `ccenergy` module. Maybe you already found it. You may want to have a look at Piecuch's methods (and his group's general work) for which now there is a plugin available https://github.com/piecuch-group/psi4_cct3 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611923735
https://github.com/psi4/psi4/issues/1863#issuecomment-611929316:549,Availability,avail,available,549,"> . > PSI4 has UBCC(T) `energy('bcc(t)')` on a ROHF reference, but only conventional integrals with the `ccenergy` module. Maybe you already found it. o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. > ; > You may want to have a look at Piecuch's methods (and his group's general work) for which now there is a plugin available https://github.com/piecuch-group/psi4_cct3 . Thanks, I will check it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611929316
https://github.com/psi4/psi4/issues/1863#issuecomment-611929316:24,Energy Efficiency,energy,energy,24,"> . > PSI4 has UBCC(T) `energy('bcc(t)')` on a ROHF reference, but only conventional integrals with the `ccenergy` module. Maybe you already found it. o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. > ; > You may want to have a look at Piecuch's methods (and his group's general work) for which now there is a plugin available https://github.com/piecuch-group/psi4_cct3 . Thanks, I will check it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611929316
https://github.com/psi4/psi4/issues/1863#issuecomment-611929316:542,Modifiability,plugin,plugin,542,"> . > PSI4 has UBCC(T) `energy('bcc(t)')` on a ROHF reference, but only conventional integrals with the `ccenergy` module. Maybe you already found it. o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. > ; > You may want to have a look at Piecuch's methods (and his group's general work) for which now there is a plugin available https://github.com/piecuch-group/psi4_cct3 . Thanks, I will check it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611929316
https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:1981,Availability,error,error,1981,"g things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF gradients, on the order of E-5. That is _also_ on my to-fix list, but given some other papers I need to write, I don't expect to get to that until Winter 2020. The other potential dealbreaker is that method _also_ lacks frozen core support, DF or not. Fixing that is a Spring 2021 target.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450
https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:806,Energy Efficiency,energy,energy,806,"> I kinda thought you solved all the the DFOCC convergence issues recently, at great effort. OCC convergence issues, not DFOCC convergence issues. The same trick should solve the convergence issues in DFOCC, but DFOCC is a much more difficult module to work with, so I'm avoiding fixing things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF grad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450
https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:1497,Energy Efficiency,energy,energy,1497,"g things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF gradients, on the order of E-5. That is _also_ on my to-fix list, but given some other papers I need to write, I don't expect to get to that until Winter 2020. The other potential dealbreaker is that method _also_ lacks frozen core support, DF or not. Fixing that is a Spring 2021 target.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450
https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:1798,Energy Efficiency,energy,energy,1798,"g things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF gradients, on the order of E-5. That is _also_ on my to-fix list, but given some other papers I need to write, I don't expect to get to that until Winter 2020. The other potential dealbreaker is that method _also_ lacks frozen core support, DF or not. Fixing that is a Spring 2021 target.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450
https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:744,Integrability,depend,depending,744,"> I kinda thought you solved all the the DFOCC convergence issues recently, at great effort. OCC convergence issues, not DFOCC convergence issues. The same trick should solve the convergence issues in DFOCC, but DFOCC is a much more difficult module to work with, so I'm avoiding fixing things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF grad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450
https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:542,Performance,perform,performant,542,"> I kinda thought you solved all the the DFOCC convergence issues recently, at great effort. OCC convergence issues, not DFOCC convergence issues. The same trick should solve the convergence issues in DFOCC, but DFOCC is a much more difficult module to work with, so I'm avoiding fixing things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF grad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450
https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:770,Performance,optimiz,optimized,770,"> I kinda thought you solved all the the DFOCC convergence issues recently, at great effort. OCC convergence issues, not DFOCC convergence issues. The same trick should solve the convergence issues in DFOCC, but DFOCC is a much more difficult module to work with, so I'm avoiding fixing things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF grad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450
https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:852,Performance,optimiz,optimized,852,"> I kinda thought you solved all the the DFOCC convergence issues recently, at great effort. OCC convergence issues, not DFOCC convergence issues. The same trick should solve the convergence issues in DFOCC, but DFOCC is a much more difficult module to work with, so I'm avoiding fixing things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF grad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450
https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:1736,Performance,optimiz,optimized,1736,"g things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF gradients, on the order of E-5. That is _also_ on my to-fix list, but given some other papers I need to write, I don't expect to get to that until Winter 2020. The other potential dealbreaker is that method _also_ lacks frozen core support, DF or not. Fixing that is a Spring 2021 target.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450
https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:271,Safety,avoid,avoiding,271,"> I kinda thought you solved all the the DFOCC convergence issues recently, at great effort. OCC convergence issues, not DFOCC convergence issues. The same trick should solve the convergence issues in DFOCC, but DFOCC is a much more difficult module to work with, so I'm avoiding fixing things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF grad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450
https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:1886,Testability,benchmark,benchmarking,1886,"g things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF gradients, on the order of E-5. That is _also_ on my to-fix list, but given some other papers I need to write, I don't expect to get to that until Winter 2020. The other potential dealbreaker is that method _also_ lacks frozen core support, DF or not. Fixing that is a Spring 2021 target.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450
https://github.com/psi4/psi4/issues/1863#issuecomment-612132054:39,Integrability,message,message,39,"Yeah, that ""fc not implemented for oo"" message is of module scope. That's not unreasonable for a module author to write, but it is harder to interpret b/c of the known connection btwn occ/dfocc. And reasonably impossible for an outsider who sees psi as a cohesive entity to interpret. Some mention in the docs would be nice. But the scalable way forward as I see it is to add ae/fc to managed methods like https://github.com/psi4/psi4/pull/1850/files#diff-dbf22cd80d16f6d8ef8250145a6d91bfR153 and to expand explicit testing for NYI https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R154. That way, a user who doesn't specify a module will get a ""can't do"" at the driver level and module authors can stay module-local in their messaging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612132054
https://github.com/psi4/psi4/issues/1863#issuecomment-612132054:333,Performance,scalab,scalable,333,"Yeah, that ""fc not implemented for oo"" message is of module scope. That's not unreasonable for a module author to write, but it is harder to interpret b/c of the known connection btwn occ/dfocc. And reasonably impossible for an outsider who sees psi as a cohesive entity to interpret. Some mention in the docs would be nice. But the scalable way forward as I see it is to add ae/fc to managed methods like https://github.com/psi4/psi4/pull/1850/files#diff-dbf22cd80d16f6d8ef8250145a6d91bfR153 and to expand explicit testing for NYI https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R154. That way, a user who doesn't specify a module will get a ""can't do"" at the driver level and module authors can stay module-local in their messaging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612132054
https://github.com/psi4/psi4/issues/1863#issuecomment-612132054:516,Testability,test,testing,516,"Yeah, that ""fc not implemented for oo"" message is of module scope. That's not unreasonable for a module author to write, but it is harder to interpret b/c of the known connection btwn occ/dfocc. And reasonably impossible for an outsider who sees psi as a cohesive entity to interpret. Some mention in the docs would be nice. But the scalable way forward as I see it is to add ae/fc to managed methods like https://github.com/psi4/psi4/pull/1850/files#diff-dbf22cd80d16f6d8ef8250145a6d91bfR153 and to expand explicit testing for NYI https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R154. That way, a user who doesn't specify a module will get a ""can't do"" at the driver level and module authors can stay module-local in their messaging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612132054
https://github.com/psi4/psi4/issues/1864#issuecomment-612255996:102,Usability,simpl,simple,102,"I'm not going to debug this myself, but if a new developer wants to take this on, the first steps are simple enough. Compile a debug build, run the input file with a breakpoint on the timer.cc:1143, then get the traceback to see which timer we're trying to turn _off_ that was never turned _on_. You can figure out a fix from there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-612255996
https://github.com/psi4/psi4/issues/1864#issuecomment-612258144:247,Usability,learn,learn,247,"Ah, yes, I'm right (for once). The `ccenergy` timer is stopped on the line I linked. Then the `exit_io` call on the line below attempts to stop it again, triggering the bug. The fix is to delete the line that I linked. It will be good practice to learn the pull request process for anybody who wants to implement it. Also, kudos for the minimal working example in your bug report @TiborGY - it really helps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-612258144
https://github.com/psi4/psi4/issues/1864#issuecomment-625366719:365,Integrability,depend,dependency,365,"> ; > ; > This issue has been open for almost a month now. I'll deal with this in a week if it hasn't been taken by then.; > ; > I've plugged this as a good new developer issue in the HFS group, so we'll see if anything happens. I might have done it, but at the moment I cannot really invest the time to properly set up a dev env (especially all the numpy/BLAS/OMP dependency migraine), fix the issue, and send in a PR.; Sorry.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-625366719
https://github.com/psi4/psi4/issues/1864#issuecomment-628803661:280,Availability,error,error,280,"This issue has a bit more to it than just removing the line Andy mentioned. The computation dies due to `'psi4.core.variable: Requested variable BRUECKNER CONVERGED was not set!\n'`, rather than the fact that convergence failed. Is there a standard way to represent a convergence error, C-side? `dct` and LMP2 in `cc` throw `ConvergenceError`, failure during an orbital-optimized `occ` computation gets you a generic `PSIEXCEPTION`, and I haven't checked other things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661
https://github.com/psi4/psi4/issues/1864#issuecomment-628803661:344,Availability,failure,failure,344,"This issue has a bit more to it than just removing the line Andy mentioned. The computation dies due to `'psi4.core.variable: Requested variable BRUECKNER CONVERGED was not set!\n'`, rather than the fact that convergence failed. Is there a standard way to represent a convergence error, C-side? `dct` and LMP2 in `cc` throw `ConvergenceError`, failure during an orbital-optimized `occ` computation gets you a generic `PSIEXCEPTION`, and I haven't checked other things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661
https://github.com/psi4/psi4/issues/1864#issuecomment-628803661:116,Modifiability,variab,variable,116,"This issue has a bit more to it than just removing the line Andy mentioned. The computation dies due to `'psi4.core.variable: Requested variable BRUECKNER CONVERGED was not set!\n'`, rather than the fact that convergence failed. Is there a standard way to represent a convergence error, C-side? `dct` and LMP2 in `cc` throw `ConvergenceError`, failure during an orbital-optimized `occ` computation gets you a generic `PSIEXCEPTION`, and I haven't checked other things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661
https://github.com/psi4/psi4/issues/1864#issuecomment-628803661:136,Modifiability,variab,variable,136,"This issue has a bit more to it than just removing the line Andy mentioned. The computation dies due to `'psi4.core.variable: Requested variable BRUECKNER CONVERGED was not set!\n'`, rather than the fact that convergence failed. Is there a standard way to represent a convergence error, C-side? `dct` and LMP2 in `cc` throw `ConvergenceError`, failure during an orbital-optimized `occ` computation gets you a generic `PSIEXCEPTION`, and I haven't checked other things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661
https://github.com/psi4/psi4/issues/1864#issuecomment-628803661:370,Performance,optimiz,optimized,370,"This issue has a bit more to it than just removing the line Andy mentioned. The computation dies due to `'psi4.core.variable: Requested variable BRUECKNER CONVERGED was not set!\n'`, rather than the fact that convergence failed. Is there a standard way to represent a convergence error, C-side? `dct` and LMP2 in `cc` throw `ConvergenceError`, failure during an orbital-optimized `occ` computation gets you a generic `PSIEXCEPTION`, and I haven't checked other things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661
https://github.com/psi4/psi4/pull/1865#issuecomment-613168315:335,Modifiability,variab,variable,335,This pull request **introduces 4 alerts** when merging bc41e77019c914a43d3bd1d821dbba782dc05b40 into 37dfe8f30a22133c09c2038a583275b73c2e6fde - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-968f96e8ce526778b006e6018f90d92893bf6698). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-613168315
https://github.com/psi4/psi4/pull/1865#issuecomment-613182718:322,Security,access,accessible,322,"The existing sapt-dft1 test case isn't passing with this PR, so some edits here weren't compatible. I'd make up test cases for your new formulation from values in the technical report, then adjust the code so that both old and new tests pass. Or, there will need to be careful explanations of why the old way shouldn't be accessible anymore.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-613182718
https://github.com/psi4/psi4/pull/1865#issuecomment-613182718:23,Testability,test,test,23,"The existing sapt-dft1 test case isn't passing with this PR, so some edits here weren't compatible. I'd make up test cases for your new formulation from values in the technical report, then adjust the code so that both old and new tests pass. Or, there will need to be careful explanations of why the old way shouldn't be accessible anymore.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-613182718
https://github.com/psi4/psi4/pull/1865#issuecomment-613182718:112,Testability,test,test,112,"The existing sapt-dft1 test case isn't passing with this PR, so some edits here weren't compatible. I'd make up test cases for your new formulation from values in the technical report, then adjust the code so that both old and new tests pass. Or, there will need to be careful explanations of why the old way shouldn't be accessible anymore.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-613182718
https://github.com/psi4/psi4/pull/1865#issuecomment-613182718:231,Testability,test,tests,231,"The existing sapt-dft1 test case isn't passing with this PR, so some edits here weren't compatible. I'd make up test cases for your new formulation from values in the technical report, then adjust the code so that both old and new tests pass. Or, there will need to be careful explanations of why the old way shouldn't be accessible anymore.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-613182718
https://github.com/psi4/psi4/pull/1865#issuecomment-618496737:0,Availability,ping,pinging,0,pinging @yxie326 that there's things to address in case the GH notification got buried.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-618496737
https://github.com/psi4/psi4/pull/1865#issuecomment-637251576:335,Modifiability,variab,variable,335,This pull request **introduces 4 alerts** when merging f1cb0d945d1dc12c23275fbd8936306b3de66965 into ac109c99d2154bb8d998cbcde43dfca9f453cbce - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ec4775af2bd36fbe9e93df241e758eda63de222b). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-637251576
https://github.com/psi4/psi4/pull/1865#issuecomment-650670910:335,Modifiability,variab,variable,335,This pull request **introduces 4 alerts** when merging b0500c6ad3f55f789c0da51ecabeca013ac0b0c0 into 1cf7468090b1e0432811ff55811a380ea9469cb3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-680c8472422602cdbf5ba69982d626c003486fc9). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-650670910
https://github.com/psi4/psi4/pull/1865#issuecomment-650816427:335,Modifiability,variab,variable,335,This pull request **introduces 4 alerts** when merging 41d3b9b8967ab05c039db5135be30175abbe22af into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9bfe80c352dc8898d78c279194915abf035e5956). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-650816427
https://github.com/psi4/psi4/pull/1865#issuecomment-652171153:141,Availability,fault,faulty,141,"At present you're trying to merge 288 commits and nearly 30k lines, and the commits are from many non-you authors. This means the rebase was faulty. If you made a backup branch locally before commencing rebase, restore from that. If not, you'll have to start from a fresh branch and cherry-pick over your own commits similar to https://github.com/psi4/psi4/pull/1490#issuecomment-457765390 . Another resource is http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-652171153
https://github.com/psi4/psi4/pull/1865#issuecomment-652733970:335,Modifiability,variab,variable,335,This pull request **introduces 4 alerts** when merging d643a954d37f3bc7f1eb77c3c4e5749b9d0300fd into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-69d5ef3136f1c28c9fc08c5b9d04ef9d4c46df19). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-652733970
https://github.com/psi4/psi4/pull/1865#issuecomment-662022217:250,Energy Efficiency,energy,energy,250,"> This is really cool to see and looks very good overall. Can you describe the testing process in more details and what you are comparing to to ensure the overall implementation is correct?. So in general, we have so far tested for total interaction energy against CCSD(T)/CBS benchmark on S22, and separate SAPT terms against SAPT(CCSD) results provided by Korona, Mol. Phys. 111, 3705(2013). We are planning to add S66 and SSI into the tests, but we would use SAPT2+3(CCD)δMP2 as the benchmark for individual terms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-662022217
https://github.com/psi4/psi4/pull/1865#issuecomment-662022217:79,Testability,test,testing,79,"> This is really cool to see and looks very good overall. Can you describe the testing process in more details and what you are comparing to to ensure the overall implementation is correct?. So in general, we have so far tested for total interaction energy against CCSD(T)/CBS benchmark on S22, and separate SAPT terms against SAPT(CCSD) results provided by Korona, Mol. Phys. 111, 3705(2013). We are planning to add S66 and SSI into the tests, but we would use SAPT2+3(CCD)δMP2 as the benchmark for individual terms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-662022217
https://github.com/psi4/psi4/pull/1865#issuecomment-662022217:221,Testability,test,tested,221,"> This is really cool to see and looks very good overall. Can you describe the testing process in more details and what you are comparing to to ensure the overall implementation is correct?. So in general, we have so far tested for total interaction energy against CCSD(T)/CBS benchmark on S22, and separate SAPT terms against SAPT(CCSD) results provided by Korona, Mol. Phys. 111, 3705(2013). We are planning to add S66 and SSI into the tests, but we would use SAPT2+3(CCD)δMP2 as the benchmark for individual terms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-662022217
https://github.com/psi4/psi4/pull/1865#issuecomment-662022217:277,Testability,benchmark,benchmark,277,"> This is really cool to see and looks very good overall. Can you describe the testing process in more details and what you are comparing to to ensure the overall implementation is correct?. So in general, we have so far tested for total interaction energy against CCSD(T)/CBS benchmark on S22, and separate SAPT terms against SAPT(CCSD) results provided by Korona, Mol. Phys. 111, 3705(2013). We are planning to add S66 and SSI into the tests, but we would use SAPT2+3(CCD)δMP2 as the benchmark for individual terms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-662022217
https://github.com/psi4/psi4/pull/1865#issuecomment-662022217:438,Testability,test,tests,438,"> This is really cool to see and looks very good overall. Can you describe the testing process in more details and what you are comparing to to ensure the overall implementation is correct?. So in general, we have so far tested for total interaction energy against CCSD(T)/CBS benchmark on S22, and separate SAPT terms against SAPT(CCSD) results provided by Korona, Mol. Phys. 111, 3705(2013). We are planning to add S66 and SSI into the tests, but we would use SAPT2+3(CCD)δMP2 as the benchmark for individual terms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-662022217
https://github.com/psi4/psi4/pull/1865#issuecomment-662022217:486,Testability,benchmark,benchmark,486,"> This is really cool to see and looks very good overall. Can you describe the testing process in more details and what you are comparing to to ensure the overall implementation is correct?. So in general, we have so far tested for total interaction energy against CCSD(T)/CBS benchmark on S22, and separate SAPT terms against SAPT(CCSD) results provided by Korona, Mol. Phys. 111, 3705(2013). We are planning to add S66 and SSI into the tests, but we would use SAPT2+3(CCD)δMP2 as the benchmark for individual terms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-662022217
https://github.com/psi4/psi4/pull/1865#issuecomment-674974155:1248,Energy Efficiency,charge,charge-transfer,1248,"It'd be good if your experience writing and running the code and some of the data from your technical document can be formed into some user documentation, @yxie326 . I suggest a section within https://raw.githubusercontent.com/psi4/psi4/master/doc/sphinxman/source/sapt.rst . No need to build the docs -- you can just edit the file, and I'll clean up any sphinx difficulties later. You'll want the section to help the user answer the questions of ""what is this method?"" and ""will it work for my application?"". Below are some specific aspects that might help the user. Anything in the style of the rest of that sapt.rst file would be helpful. * what references (rhf/uhf/rohf) does dft-sapt work for?; * what are the differences btwn this and molpro or sapt2000? implementations?; * hybrid disp is new. what accuracy advantages can it give? what's not coded (e.g., LRC)?; * what is the largest system it's been tried for?; * what is the big-O scaling wrt occ/virt orb/aux sizes?; * eligible scf_type both conv and df?; * S^2 treatment? is the approx always applied or can Patkowski's S inf be used?; * any needed or recommended keywords for running?; * influence of grid? default (75, 302) ok? any more sensitive than dft itself?; * probably mention charge-transfer and monomer-centered basis variants not applicable to dft-sapt; * when you'd want to use each of the disp_scale_scheme; * is GRAC pertinent? any additional data needed for molecular system?; * where (in literature) can I find the equations if I want to know more? (probably the answer is a few published papers and your WIP one that you can use a placeholder for)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-674974155
https://github.com/psi4/psi4/pull/1865#issuecomment-707400670:650,Energy Efficiency,energy,energy,650,"@yxie326 how much should the SAPT(HF) from your calcs match a conventional SAPT0? Below, the ""Total HF"" from a SAPT0 and the ""Total HF"" from your ""SAPT(HF) Results"" match exactly and the induction terms nearly but not so much the elst or exch. Can the deltaHF join the Induction section?. I assume the differences in labels btwn HF and DFT SAPT (Elst10 vs Elst1, Ind20,r vs Ind2,r) are correct since that's what I recall from Molpro, too, but now would be a good time to look over them and confirm that all differences are intentional. wfn sapt input; ```; molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; }; energy(""sapt0""); ```. wfn sapt output; ```; SAPT Results ; --------------------------------------------------------------------------------------------------------; Electrostatics -0.08863776 [mEh] -0.05562103 [kcal/mol] -0.23271841 [kJ/mol]; Elst10,r -0.08863776 [mEh] -0.05562103 [kcal/mol] -0.23271841 [kJ/mol]. Exchange 0.32126855 [mEh] 0.20159906 [kcal/mol] 0.84349046 [kJ/mol]; Exch10 0.32126855 [mEh] 0.20159906 [kcal/mol] 0.84349046 [kJ/mol]; Exch10(S^2) 0.32120420 [mEh] 0.20155868 [kcal/mol] 0.84332151 [kJ/mol]. Induction -0.01300161 [mEh] -0.00815863 [kcal/mol] -0.03413572 [kJ/mol]; Ind20,r -0.09189525 [mEh] -0.05766514 [kcal/mol] -0.24127094 [kJ/mol]; Exch-Ind20,r 0.09502640 [mEh] 0.05962997 [kcal/mol] 0.24949178 [kJ/mol]; delta HF,r (2) -0.01613276 [mEh] -0.01012346 [kcal/mol] -0.04235656 [kJ/mol]. Dispersion -0.26779778 [mEh] -0.16804565 [kcal/mol] -0.70310299 [kJ/mol]; Disp20 -0.28239464 [mEh] -0.17720531 [kcal/mol] -0.74142701 [kJ/mol]; Exch-Disp20 0.01459685 [mEh] 0.00915966 [kcal/mol] 0.03832403 [kJ/mol]; Disp20 (SS) -0.14119732 [mEh] -0.08860265 [kcal/mol] -0.37071351 [kJ/mol]; Disp20 (OS) -0.14119732 [mEh] -0.08860265 [kcal/mol] -0.37071351 [kJ/mol]; Exch-Disp20 (SS) 0.00826777 [mEh] 0.00518811 [kcal/mol] 0.02170704 [kJ/mol]; Exch-Disp20 (OS) 0.00632908 [mEh] 0.00397156 [kcal/mol] 0.01661699 [kJ/mol]. Total HF 0.21",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-707400670
https://github.com/psi4/psi4/pull/1865#issuecomment-707400670:2715,Testability,test,tests,2715,"-0.14119732 [mEh] -0.08860265 [kcal/mol] -0.37071351 [kJ/mol]; Exch-Disp20 (SS) 0.00826777 [mEh] 0.00518811 [kcal/mol] 0.02170704 [kJ/mol]; Exch-Disp20 (OS) 0.00632908 [mEh] 0.00397156 [kcal/mol] 0.01661699 [kJ/mol]. Total HF 0.21962918 [mEh] 0.13781939 [kcal/mol] 0.57663633 [kJ/mol]; Total SAPT0 -0.04816861 [mEh] -0.03022626 [kcal/mol] -0.12646666 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.08863776 [mEh] -0.05562103 [kcal/mol] -0.23271841 [kJ/mol]; Exchange sSAPT0 0.32126855 [mEh] 0.20159906 [kcal/mol] 0.84349046 [kJ/mol]; Induction sSAPT0 -0.01294449 [mEh] -0.00812279 [kcal/mol] -0.03398574 [kJ/mol]; Dispersion sSAPT0 -0.26778901 [mEh] -0.16804014 [kcal/mol] -0.70307995 [kJ/mol]; Total sSAPT0 -0.04810271 [mEh] -0.03018490 [kcal/mol] -0.12629364 [kJ/mol]; -------------------------------------------------------------------------------------------------; ```. output from one of your sapt(dft) tests; ```; SAPT(HF) Results; -------------------------------------------------------------------------------------------------; Electrostatics -0.09010773 [mEh] -0.05654345 [kcal/mol] -0.23657781 [kJ/mol]; Elst10,r -0.09010773 [mEh] -0.05654345 [kcal/mol] -0.23657781 [kJ/mol]. Exchange 0.31850488 [mEh] 0.19986483 [kcal/mol] 0.83623444 [kJ/mol]; Exch10 0.31850488 [mEh] 0.19986483 [kcal/mol] 0.83623444 [kJ/mol]; Exch10(S^2) 0.31844097 [mEh] 0.19982473 [kcal/mol] 0.83606665 [kJ/mol]. Induction 0.00312943 [mEh] 0.00196374 [kcal/mol] 0.00821630 [kJ/mol]; Ind20,r -0.09188769 [mEh] -0.05766040 [kcal/mol] -0.24125111 [kJ/mol]; Exch-Ind20,r 0.09501712 [mEh] 0.05962414 [kcal/mol] 0.24946741 [kJ/mol]; Induction (A<-B) -0.00060389 [mEh] -0.00037895 [kcal/mol] -0.00158551 [kJ/mol]; Induction (A->B) 0.00373331 [mEh] 0.00234269 [kcal/mol] 0.00980181 [kJ/mol]. Total SAPT 0.23152657 [mEh] 0.14528512 [kcal/mol] 0.60787293 [kJ/mol]; Total HF 0.21962918 [mEh] 0.13781939 [kcal/mol] 0.57663633 [kJ/mol]; Delta HF -0.01189740 [mEh] -0.00746573 [kcal/mol] -0.03123",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-707400670
https://github.com/psi4/psi4/issues/1866#issuecomment-613206104:36,Testability,test,test,36,"> Alas, this is not something I can test easily myself, as it looks nontrivial to compile. If you do not need a debug version, they do offer a binary package. IIRC compiling it is not that bad if you already have icc/ifort set up, but does take a while to run.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866#issuecomment-613206104
https://github.com/psi4/psi4/issues/1866#issuecomment-613267151:307,Availability,down,download,307,"Ran into this issue myself a week ago. It turns out that you need to patch a few file in the MRCC tarball and recompile to make it work (and this has to be done independently of the Psi4 interface) I couldn't see this info advertised on the MRCC website, I happened to browse the ""Patches"" section in their download page and noticed that there were few patches more recent than the tarball I had just downloaded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866#issuecomment-613267151
https://github.com/psi4/psi4/issues/1866#issuecomment-613267151:401,Availability,down,downloaded,401,"Ran into this issue myself a week ago. It turns out that you need to patch a few file in the MRCC tarball and recompile to make it work (and this has to be done independently of the Psi4 interface) I couldn't see this info advertised on the MRCC website, I happened to browse the ""Patches"" section in their download page and noticed that there were few patches more recent than the tarball I had just downloaded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866#issuecomment-613267151
https://github.com/psi4/psi4/issues/1866#issuecomment-613267151:69,Deployability,patch,patch,69,"Ran into this issue myself a week ago. It turns out that you need to patch a few file in the MRCC tarball and recompile to make it work (and this has to be done independently of the Psi4 interface) I couldn't see this info advertised on the MRCC website, I happened to browse the ""Patches"" section in their download page and noticed that there were few patches more recent than the tarball I had just downloaded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866#issuecomment-613267151
https://github.com/psi4/psi4/issues/1866#issuecomment-613267151:281,Deployability,Patch,Patches,281,"Ran into this issue myself a week ago. It turns out that you need to patch a few file in the MRCC tarball and recompile to make it work (and this has to be done independently of the Psi4 interface) I couldn't see this info advertised on the MRCC website, I happened to browse the ""Patches"" section in their download page and noticed that there were few patches more recent than the tarball I had just downloaded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866#issuecomment-613267151
https://github.com/psi4/psi4/issues/1866#issuecomment-613267151:353,Deployability,patch,patches,353,"Ran into this issue myself a week ago. It turns out that you need to patch a few file in the MRCC tarball and recompile to make it work (and this has to be done independently of the Psi4 interface) I couldn't see this info advertised on the MRCC website, I happened to browse the ""Patches"" section in their download page and noticed that there were few patches more recent than the tarball I had just downloaded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866#issuecomment-613267151
https://github.com/psi4/psi4/issues/1866#issuecomment-613267151:187,Integrability,interface,interface,187,"Ran into this issue myself a week ago. It turns out that you need to patch a few file in the MRCC tarball and recompile to make it work (and this has to be done independently of the Psi4 interface) I couldn't see this info advertised on the MRCC website, I happened to browse the ""Patches"" section in their download page and noticed that there were few patches more recent than the tarball I had just downloaded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866#issuecomment-613267151
https://github.com/psi4/psi4/issues/1867#issuecomment-613327739:141,Availability,error,error,141,All newlines are removed in favour of a making a single long string that can be easily wrapped.; But one could instead wrap all lines of the error message separately to preserve these kind of formatted errors?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613327739
https://github.com/psi4/psi4/issues/1867#issuecomment-613327739:202,Availability,error,errors,202,All newlines are removed in favour of a making a single long string that can be easily wrapped.; But one could instead wrap all lines of the error message separately to preserve these kind of formatted errors?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613327739
https://github.com/psi4/psi4/issues/1867#issuecomment-613327739:87,Integrability,wrap,wrapped,87,All newlines are removed in favour of a making a single long string that can be easily wrapped.; But one could instead wrap all lines of the error message separately to preserve these kind of formatted errors?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613327739
https://github.com/psi4/psi4/issues/1867#issuecomment-613327739:119,Integrability,wrap,wrap,119,All newlines are removed in favour of a making a single long string that can be easily wrapped.; But one could instead wrap all lines of the error message separately to preserve these kind of formatted errors?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613327739
https://github.com/psi4/psi4/issues/1867#issuecomment-613327739:147,Integrability,message,message,147,All newlines are removed in favour of a making a single long string that can be easily wrapped.; But one could instead wrap all lines of the error message separately to preserve these kind of formatted errors?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613327739
https://github.com/psi4/psi4/issues/1867#issuecomment-613407334:145,Integrability,wrap,wrap,145,"Oh yea, this need to have a double split so that original line breaks are kept.; ```python; lines = []; for x in msg.splitlines():; lines.extend(wrap(x, linewidth).splitlines()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613407334
https://github.com/psi4/psi4/issues/1867#issuecomment-613407334:138,Modifiability,extend,extend,138,"Oh yea, this need to have a double split so that original line breaks are kept.; ```python; lines = []; for x in msg.splitlines():; lines.extend(wrap(x, linewidth).splitlines()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613407334
https://github.com/psi4/psi4/issues/1870#issuecomment-614671116:493,Testability,test,test,493,"Adding `/opt/intel/lib` to envvar `DYLD_LIBRARY_PATH` will probably fix your immediate problem.(The `-DOpenMP_LIBRARY_DIRS` can only influence how the lib gets built, not the runtime env.). A greater concern is that your psi and the numpy you use in running it need to have the same blas (hopefully MKL) libraries and the same threading (omp/iomp5 vs. gomp; gomp *strongly* discouraged), and gcc _really_ wants to link gomp in there. If you do get a working compile, make sure to run a simple test (like tu1) again with multiple threads to make sure it gives the correct answer before declaring victory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614671116
https://github.com/psi4/psi4/issues/1870#issuecomment-614671116:486,Usability,simpl,simple,486,"Adding `/opt/intel/lib` to envvar `DYLD_LIBRARY_PATH` will probably fix your immediate problem.(The `-DOpenMP_LIBRARY_DIRS` can only influence how the lib gets built, not the runtime env.). A greater concern is that your psi and the numpy you use in running it need to have the same blas (hopefully MKL) libraries and the same threading (omp/iomp5 vs. gomp; gomp *strongly* discouraged), and gcc _really_ wants to link gomp in there. If you do get a working compile, make sure to run a simple test (like tu1) again with multiple threads to make sure it gives the correct answer before declaring victory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614671116
https://github.com/psi4/psi4/issues/1870#issuecomment-614747634:86,Testability,test,test,86,"Thank you for your fast answers ! . @loriab, this indeed solved my problem. The first test failed but the other passed for now (still running). I will provide you a feedback on the tests which fail when it is finished. I'll also run the test you suggest. @andysim This is the results of the output of the command you asked:; ```; /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so:; 	@rpath/core.cpython-37m-darwin.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614747634
https://github.com/psi4/psi4/issues/1870#issuecomment-614747634:181,Testability,test,tests,181,"Thank you for your fast answers ! . @loriab, this indeed solved my problem. The first test failed but the other passed for now (still running). I will provide you a feedback on the tests which fail when it is finished. I'll also run the test you suggest. @andysim This is the results of the output of the command you asked:; ```; /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so:; 	@rpath/core.cpython-37m-darwin.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614747634
https://github.com/psi4/psi4/issues/1870#issuecomment-614747634:237,Testability,test,test,237,"Thank you for your fast answers ! . @loriab, this indeed solved my problem. The first test failed but the other passed for now (still running). I will provide you a feedback on the tests which fail when it is finished. I'll also run the test you suggest. @andysim This is the results of the output of the command you asked:; ```; /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so:; 	@rpath/core.cpython-37m-darwin.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614747634
https://github.com/psi4/psi4/issues/1870#issuecomment-614747634:165,Usability,feedback,feedback,165,"Thank you for your fast answers ! . @loriab, this indeed solved my problem. The first test failed but the other passed for now (still running). I will provide you a feedback on the tests which fail when it is finished. I'll also run the test you suggest. @andysim This is the results of the output of the command you asked:; ```; /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so:; 	@rpath/core.cpython-37m-darwin.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614747634
https://github.com/psi4/psi4/issues/1870#issuecomment-614773796:28,Availability,failure,failures,28,"Ok I got the following test failures:. ```; 252:nbody-convergence; 306:psimrcc-ccsd_t-4; 420:psi4numpy-cphf; 421:psi4numpy-dfmp2; 422:psi4numpy-rhf; 423:psi4numpy-rhf-gradient; 424:psi4numpy-rhf-hessian; 425:psi4numpy-fci; 429:python-energy; 430:python-curve; 431:python-pubchem; 432:python-mints9; 433:python-mints2; 434:python-cc54; 435:python-3-index-transforms; 436:python-mints13; 437:python-cc_amps; 438:json-schema-1-energy; 439:json-schema-1-ghost; 440:json-schema-1-orient; 441:json-schema-1-throws; 442:json-schema-1-gradient; 443:json-schema-1-properties; 444:gcp-pbeh3c; 445:gcp-hf3c; 446:gcp-hf3c-gradient; 447:gcp-hf3c-hessian; 448:gcp-dft-custom-hybrid; ```. And now my problem is on the import psi4. I tried adding the correct PYTHONPATH as follows:. ```; export PATH=/usr/local/bin:$PATH # python interpreter; export PATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin:$PATH # psi4 executable; export PYTHONPATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib//:$PYTHONPATH # psi4 pymodule; ```. But I get a new kind of error. Any idea how to fix it? :. ```; >>> import psi4; Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Expected in: flat namespace; in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); Im",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614773796
https://github.com/psi4/psi4/issues/1870#issuecomment-614773796:1072,Availability,error,error,1072,"nce; 306:psimrcc-ccsd_t-4; 420:psi4numpy-cphf; 421:psi4numpy-dfmp2; 422:psi4numpy-rhf; 423:psi4numpy-rhf-gradient; 424:psi4numpy-rhf-hessian; 425:psi4numpy-fci; 429:python-energy; 430:python-curve; 431:python-pubchem; 432:python-mints9; 433:python-mints2; 434:python-cc54; 435:python-3-index-transforms; 436:python-mints13; 437:python-cc_amps; 438:json-schema-1-energy; 439:json-schema-1-ghost; 440:json-schema-1-orient; 441:json-schema-1-throws; 442:json-schema-1-gradient; 443:json-schema-1-properties; 444:gcp-pbeh3c; 445:gcp-hf3c; 446:gcp-hf3c-gradient; 447:gcp-hf3c-hessian; 448:gcp-dft-custom-hybrid; ```. And now my problem is on the import psi4. I tried adding the correct PYTHONPATH as follows:. ```; export PATH=/usr/local/bin:$PATH # python interpreter; export PATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin:$PATH # psi4 executable; export PYTHONPATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib//:$PYTHONPATH # psi4 pymodule; ```. But I get a new kind of error. Any idea how to fix it? :. ```; >>> import psi4; Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Expected in: flat namespace; in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614773796
https://github.com/psi4/psi4/issues/1870#issuecomment-614773796:234,Energy Efficiency,energy,energy,234,"Ok I got the following test failures:. ```; 252:nbody-convergence; 306:psimrcc-ccsd_t-4; 420:psi4numpy-cphf; 421:psi4numpy-dfmp2; 422:psi4numpy-rhf; 423:psi4numpy-rhf-gradient; 424:psi4numpy-rhf-hessian; 425:psi4numpy-fci; 429:python-energy; 430:python-curve; 431:python-pubchem; 432:python-mints9; 433:python-mints2; 434:python-cc54; 435:python-3-index-transforms; 436:python-mints13; 437:python-cc_amps; 438:json-schema-1-energy; 439:json-schema-1-ghost; 440:json-schema-1-orient; 441:json-schema-1-throws; 442:json-schema-1-gradient; 443:json-schema-1-properties; 444:gcp-pbeh3c; 445:gcp-hf3c; 446:gcp-hf3c-gradient; 447:gcp-hf3c-hessian; 448:gcp-dft-custom-hybrid; ```. And now my problem is on the import psi4. I tried adding the correct PYTHONPATH as follows:. ```; export PATH=/usr/local/bin:$PATH # python interpreter; export PATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin:$PATH # psi4 executable; export PYTHONPATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib//:$PYTHONPATH # psi4 pymodule; ```. But I get a new kind of error. Any idea how to fix it? :. ```; >>> import psi4; Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Expected in: flat namespace; in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); Im",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614773796
https://github.com/psi4/psi4/issues/1870#issuecomment-614773796:424,Energy Efficiency,energy,energy,424,"Ok I got the following test failures:. ```; 252:nbody-convergence; 306:psimrcc-ccsd_t-4; 420:psi4numpy-cphf; 421:psi4numpy-dfmp2; 422:psi4numpy-rhf; 423:psi4numpy-rhf-gradient; 424:psi4numpy-rhf-hessian; 425:psi4numpy-fci; 429:python-energy; 430:python-curve; 431:python-pubchem; 432:python-mints9; 433:python-mints2; 434:python-cc54; 435:python-3-index-transforms; 436:python-mints13; 437:python-cc_amps; 438:json-schema-1-energy; 439:json-schema-1-ghost; 440:json-schema-1-orient; 441:json-schema-1-throws; 442:json-schema-1-gradient; 443:json-schema-1-properties; 444:gcp-pbeh3c; 445:gcp-hf3c; 446:gcp-hf3c-gradient; 447:gcp-hf3c-hessian; 448:gcp-dft-custom-hybrid; ```. And now my problem is on the import psi4. I tried adding the correct PYTHONPATH as follows:. ```; export PATH=/usr/local/bin:$PATH # python interpreter; export PATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin:$PATH # psi4 executable; export PYTHONPATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib//:$PYTHONPATH # psi4 pymodule; ```. But I get a new kind of error. Any idea how to fix it? :. ```; >>> import psi4; Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Expected in: flat namespace; in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); Im",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614773796
https://github.com/psi4/psi4/issues/1870#issuecomment-614773796:23,Testability,test,test,23,"Ok I got the following test failures:. ```; 252:nbody-convergence; 306:psimrcc-ccsd_t-4; 420:psi4numpy-cphf; 421:psi4numpy-dfmp2; 422:psi4numpy-rhf; 423:psi4numpy-rhf-gradient; 424:psi4numpy-rhf-hessian; 425:psi4numpy-fci; 429:python-energy; 430:python-curve; 431:python-pubchem; 432:python-mints9; 433:python-mints2; 434:python-cc54; 435:python-3-index-transforms; 436:python-mints13; 437:python-cc_amps; 438:json-schema-1-energy; 439:json-schema-1-ghost; 440:json-schema-1-orient; 441:json-schema-1-throws; 442:json-schema-1-gradient; 443:json-schema-1-properties; 444:gcp-pbeh3c; 445:gcp-hf3c; 446:gcp-hf3c-gradient; 447:gcp-hf3c-hessian; 448:gcp-dft-custom-hybrid; ```. And now my problem is on the import psi4. I tried adding the correct PYTHONPATH as follows:. ```; export PATH=/usr/local/bin:$PATH # python interpreter; export PATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin:$PATH # psi4 executable; export PYTHONPATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib//:$PYTHONPATH # psi4 pymodule; ```. But I get a new kind of error. Any idea how to fix it? :. ```; >>> import psi4; Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Expected in: flat namespace; in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); Im",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614773796
https://github.com/psi4/psi4/issues/1870#issuecomment-614779248:48,Availability,error,error,48,"I'm compiling everything by myself. I think the error might be because I got rid of the ```libstdc++``` flag, because I configured with:; ```-DCMAKE_CXX_FLAGS=""-march=native"" ```. This might be an issue related to:; https://stackoverflow.com/questions/35006614/what-does-symbol-not-found-expected-in-flat-namespace-actually-mean. But when I kept it I couldn't configure if I remember correctly. I will check this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614779248
https://github.com/psi4/psi4/issues/1870#issuecomment-614779248:120,Modifiability,config,configured,120,"I'm compiling everything by myself. I think the error might be because I got rid of the ```libstdc++``` flag, because I configured with:; ```-DCMAKE_CXX_FLAGS=""-march=native"" ```. This might be an issue related to:; https://stackoverflow.com/questions/35006614/what-does-symbol-not-found-expected-in-flat-namespace-actually-mean. But when I kept it I couldn't configure if I remember correctly. I will check this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614779248
https://github.com/psi4/psi4/issues/1870#issuecomment-614779248:360,Modifiability,config,configure,360,"I'm compiling everything by myself. I think the error might be because I got rid of the ```libstdc++``` flag, because I configured with:; ```-DCMAKE_CXX_FLAGS=""-march=native"" ```. This might be an issue related to:; https://stackoverflow.com/questions/35006614/what-does-symbol-not-found-expected-in-flat-namespace-actually-mean. But when I kept it I couldn't configure if I remember correctly. I will check this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614779248
https://github.com/psi4/psi4/issues/1870#issuecomment-614781646:15,Availability,error,errors,15,flat namespace errors are a nightmare.. It is easier and faster to compile against the `psi4-dev` miniconda package.; It comes with a cmake advisor (run `psi4-path-advisor -h)` that will set a correct `cmake` command line with proper flags and library location.; Custom CXX_FLAGS should not be needed anymore then.; You can use the miniconda provided gcc/clang setup or your own gcc. edit: This way you also ensure your python and psi4 has the same numpy/mkl setup.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614781646
https://github.com/psi4/psi4/issues/1870#issuecomment-614786340:67,Deployability,update,update,67,"The `psi4-dev` pkg is generally preferred (though probably need to update qcel and qcng separately these days), but `--clang` is valid for Mac only and `--gcc` for Linux only. For single-core, I wouldn't be surprised if you're pretty close, since the psithon tests overwhelmingly worked. I'd try Andy's library manip, but I'm also a little suspicious of `/usr/local/bin/python` unless that's truly your everyday python and you install (or build) numpy w/MKL to that installation's site-packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614786340
https://github.com/psi4/psi4/issues/1870#issuecomment-614786340:427,Deployability,install,install,427,"The `psi4-dev` pkg is generally preferred (though probably need to update qcel and qcng separately these days), but `--clang` is valid for Mac only and `--gcc` for Linux only. For single-core, I wouldn't be surprised if you're pretty close, since the psithon tests overwhelmingly worked. I'd try Andy's library manip, but I'm also a little suspicious of `/usr/local/bin/python` unless that's truly your everyday python and you install (or build) numpy w/MKL to that installation's site-packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614786340
https://github.com/psi4/psi4/issues/1870#issuecomment-614786340:466,Deployability,install,installation,466,"The `psi4-dev` pkg is generally preferred (though probably need to update qcel and qcng separately these days), but `--clang` is valid for Mac only and `--gcc` for Linux only. For single-core, I wouldn't be surprised if you're pretty close, since the psithon tests overwhelmingly worked. I'd try Andy's library manip, but I'm also a little suspicious of `/usr/local/bin/python` unless that's truly your everyday python and you install (or build) numpy w/MKL to that installation's site-packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614786340
https://github.com/psi4/psi4/issues/1870#issuecomment-614786340:259,Testability,test,tests,259,"The `psi4-dev` pkg is generally preferred (though probably need to update qcel and qcng separately these days), but `--clang` is valid for Mac only and `--gcc` for Linux only. For single-core, I wouldn't be surprised if you're pretty close, since the psithon tests overwhelmingly worked. I'd try Andy's library manip, but I'm also a little suspicious of `/usr/local/bin/python` unless that's truly your everyday python and you install (or build) numpy w/MKL to that installation's site-packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614786340
https://github.com/psi4/psi4/issues/1870#issuecomment-614787323:197,Deployability,install,installation,197,"@andysim Thanks, I added the path to this library but it doesn't fix the issue:; ```; export DYLD_LIBRARY_PATH=/opt/intel/lib:/usr/local/lib/gcc/8/; source ~/.bash_profile; ```. I'm now trying the installation suggested by @hokru.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614787323
https://github.com/psi4/psi4/issues/1870#issuecomment-614793642:173,Deployability,install,installed,173,"Ok then no point of trying the ```psi-dev``` as I'm on a Mac but want to use ```gcc``` (right?). @loriab I just reinstalled python few days ago with homebrew. Before it was installed with the psi4conda package but I decided to get rid of it for now, as I want the source version of the code. But then I reainstalled numpy using pip, as follows, so I guess it's ok?:. ```; >>> pip3 install numpy; Requirement already satisfied: numpy in /usr/local/lib/python3.7/site-packages (1.18.2)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614793642
https://github.com/psi4/psi4/issues/1870#issuecomment-614793642:381,Deployability,install,install,381,"Ok then no point of trying the ```psi-dev``` as I'm on a Mac but want to use ```gcc``` (right?). @loriab I just reinstalled python few days ago with homebrew. Before it was installed with the psi4conda package but I decided to get rid of it for now, as I want the source version of the code. But then I reainstalled numpy using pip, as follows, so I guess it's ok?:. ```; >>> pip3 install numpy; Requirement already satisfied: numpy in /usr/local/lib/python3.7/site-packages (1.18.2)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614793642
https://github.com/psi4/psi4/issues/1870#issuecomment-614809204:1182,Energy Efficiency,power,powerful,1182,"The `pip` numpy probably doesn't use MKL (you'd have to `otool -L` one of numpy's internal `.dylib`s to figure out where it's getting blas and what threading library it's using), so that can interact very badly (wrong answers or n-thread-dependent answers) with a psi4 that does use MKL. If your aim is solely psithon (running psi as executable), you may want to backtrack to before the triple export when ~all the testsuite besides the psiapi (start with json/psi4numpy/python) was working, run `which python psi4` to confirm you're running what you expect, check the multithreaded answers to make sure that's not wrong, then work with that until I get a recent nightly build up. What you're doing (Mac + GCC + indep numpy) should be perfectly do-able, but Psi needs MKL for best performance (and it's easy to get _wrong_ performance from other libs) and that means numpy needs to be MKL (whichever symbols of numpy or psi loaded first are what the other one has to use, so it's best if they're identical) so we encourage the conda groove for numpy. The psi4-dev (w/o --clang/intel/gcc) that Holger mentioned will help compiling with conda python, numpy, libint, etc. But it isn't powerful enough to counteract the gomp that gcc will try to impose.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204
https://github.com/psi4/psi4/issues/1870#issuecomment-614809204:238,Integrability,depend,dependent,238,"The `pip` numpy probably doesn't use MKL (you'd have to `otool -L` one of numpy's internal `.dylib`s to figure out where it's getting blas and what threading library it's using), so that can interact very badly (wrong answers or n-thread-dependent answers) with a psi4 that does use MKL. If your aim is solely psithon (running psi as executable), you may want to backtrack to before the triple export when ~all the testsuite besides the psiapi (start with json/psi4numpy/python) was working, run `which python psi4` to confirm you're running what you expect, check the multithreaded answers to make sure that's not wrong, then work with that until I get a recent nightly build up. What you're doing (Mac + GCC + indep numpy) should be perfectly do-able, but Psi needs MKL for best performance (and it's easy to get _wrong_ performance from other libs) and that means numpy needs to be MKL (whichever symbols of numpy or psi loaded first are what the other one has to use, so it's best if they're identical) so we encourage the conda groove for numpy. The psi4-dev (w/o --clang/intel/gcc) that Holger mentioned will help compiling with conda python, numpy, libint, etc. But it isn't powerful enough to counteract the gomp that gcc will try to impose.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204
https://github.com/psi4/psi4/issues/1870#issuecomment-614809204:781,Performance,perform,performance,781,"The `pip` numpy probably doesn't use MKL (you'd have to `otool -L` one of numpy's internal `.dylib`s to figure out where it's getting blas and what threading library it's using), so that can interact very badly (wrong answers or n-thread-dependent answers) with a psi4 that does use MKL. If your aim is solely psithon (running psi as executable), you may want to backtrack to before the triple export when ~all the testsuite besides the psiapi (start with json/psi4numpy/python) was working, run `which python psi4` to confirm you're running what you expect, check the multithreaded answers to make sure that's not wrong, then work with that until I get a recent nightly build up. What you're doing (Mac + GCC + indep numpy) should be perfectly do-able, but Psi needs MKL for best performance (and it's easy to get _wrong_ performance from other libs) and that means numpy needs to be MKL (whichever symbols of numpy or psi loaded first are what the other one has to use, so it's best if they're identical) so we encourage the conda groove for numpy. The psi4-dev (w/o --clang/intel/gcc) that Holger mentioned will help compiling with conda python, numpy, libint, etc. But it isn't powerful enough to counteract the gomp that gcc will try to impose.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204
https://github.com/psi4/psi4/issues/1870#issuecomment-614809204:823,Performance,perform,performance,823,"The `pip` numpy probably doesn't use MKL (you'd have to `otool -L` one of numpy's internal `.dylib`s to figure out where it's getting blas and what threading library it's using), so that can interact very badly (wrong answers or n-thread-dependent answers) with a psi4 that does use MKL. If your aim is solely psithon (running psi as executable), you may want to backtrack to before the triple export when ~all the testsuite besides the psiapi (start with json/psi4numpy/python) was working, run `which python psi4` to confirm you're running what you expect, check the multithreaded answers to make sure that's not wrong, then work with that until I get a recent nightly build up. What you're doing (Mac + GCC + indep numpy) should be perfectly do-able, but Psi needs MKL for best performance (and it's easy to get _wrong_ performance from other libs) and that means numpy needs to be MKL (whichever symbols of numpy or psi loaded first are what the other one has to use, so it's best if they're identical) so we encourage the conda groove for numpy. The psi4-dev (w/o --clang/intel/gcc) that Holger mentioned will help compiling with conda python, numpy, libint, etc. But it isn't powerful enough to counteract the gomp that gcc will try to impose.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204
https://github.com/psi4/psi4/issues/1870#issuecomment-614809204:924,Performance,load,loaded,924,"The `pip` numpy probably doesn't use MKL (you'd have to `otool -L` one of numpy's internal `.dylib`s to figure out where it's getting blas and what threading library it's using), so that can interact very badly (wrong answers or n-thread-dependent answers) with a psi4 that does use MKL. If your aim is solely psithon (running psi as executable), you may want to backtrack to before the triple export when ~all the testsuite besides the psiapi (start with json/psi4numpy/python) was working, run `which python psi4` to confirm you're running what you expect, check the multithreaded answers to make sure that's not wrong, then work with that until I get a recent nightly build up. What you're doing (Mac + GCC + indep numpy) should be perfectly do-able, but Psi needs MKL for best performance (and it's easy to get _wrong_ performance from other libs) and that means numpy needs to be MKL (whichever symbols of numpy or psi loaded first are what the other one has to use, so it's best if they're identical) so we encourage the conda groove for numpy. The psi4-dev (w/o --clang/intel/gcc) that Holger mentioned will help compiling with conda python, numpy, libint, etc. But it isn't powerful enough to counteract the gomp that gcc will try to impose.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204
https://github.com/psi4/psi4/issues/1870#issuecomment-614809204:415,Testability,test,testsuite,415,"The `pip` numpy probably doesn't use MKL (you'd have to `otool -L` one of numpy's internal `.dylib`s to figure out where it's getting blas and what threading library it's using), so that can interact very badly (wrong answers or n-thread-dependent answers) with a psi4 that does use MKL. If your aim is solely psithon (running psi as executable), you may want to backtrack to before the triple export when ~all the testsuite besides the psiapi (start with json/psi4numpy/python) was working, run `which python psi4` to confirm you're running what you expect, check the multithreaded answers to make sure that's not wrong, then work with that until I get a recent nightly build up. What you're doing (Mac + GCC + indep numpy) should be perfectly do-able, but Psi needs MKL for best performance (and it's easy to get _wrong_ performance from other libs) and that means numpy needs to be MKL (whichever symbols of numpy or psi loaded first are what the other one has to use, so it's best if they're identical) so we encourage the conda groove for numpy. The psi4-dev (w/o --clang/intel/gcc) that Holger mentioned will help compiling with conda python, numpy, libint, etc. But it isn't powerful enough to counteract the gomp that gcc will try to impose.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204
https://github.com/psi4/psi4/issues/1870#issuecomment-614842621:1590,Availability,down,download,1590,"I've reinstalled everything and indicated the path to the libstdc++, so this might fix the issue I had before (I'm running the tests now and I'll see). Just a small question. I did the ```otool -L``` as follows, does the output looks good to you ?. ```; otool -L /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so:; 	@rpath/core.cpython-37m-darwin.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. About numpy, I have something like this, does it look good as well ?; ```; otool -L /usr/local/lib/python3.7/site-packages/numpy/core/_multiarray_umath.cpython-37m-darwin.so; /usr/local/lib/python3.7/site-packages/numpy/core/_multiarray_umath.cpython-37m-darwin.so:; 	@loader_path/../.dylibs/libopenblasp-r0.3.7.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4); ```. Otherwise, do you advise me to download the INTEL distribution ? https://software.intel.com/en-us/distribution-for-python/choose-download",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614842621
https://github.com/psi4/psi4/issues/1870#issuecomment-614842621:1688,Availability,down,download,1688,"I've reinstalled everything and indicated the path to the libstdc++, so this might fix the issue I had before (I'm running the tests now and I'll see). Just a small question. I did the ```otool -L``` as follows, does the output looks good to you ?. ```; otool -L /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so:; 	@rpath/core.cpython-37m-darwin.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. About numpy, I have something like this, does it look good as well ?; ```; otool -L /usr/local/lib/python3.7/site-packages/numpy/core/_multiarray_umath.cpython-37m-darwin.so; /usr/local/lib/python3.7/site-packages/numpy/core/_multiarray_umath.cpython-37m-darwin.so:; 	@loader_path/../.dylibs/libopenblasp-r0.3.7.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4); ```. Otherwise, do you advise me to download the INTEL distribution ? https://software.intel.com/en-us/distribution-for-python/choose-download",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614842621
https://github.com/psi4/psi4/issues/1870#issuecomment-614842621:127,Testability,test,tests,127,"I've reinstalled everything and indicated the path to the libstdc++, so this might fix the issue I had before (I'm running the tests now and I'll see). Just a small question. I did the ```otool -L``` as follows, does the output looks good to you ?. ```; otool -L /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so:; 	@rpath/core.cpython-37m-darwin.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. About numpy, I have something like this, does it look good as well ?; ```; otool -L /usr/local/lib/python3.7/site-packages/numpy/core/_multiarray_umath.cpython-37m-darwin.so; /usr/local/lib/python3.7/site-packages/numpy/core/_multiarray_umath.cpython-37m-darwin.so:; 	@loader_path/../.dylibs/libopenblasp-r0.3.7.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4); ```. Otherwise, do you advise me to download the INTEL distribution ? https://software.intel.com/en-us/distribution-for-python/choose-download",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614842621
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:1933,Availability,error,error,1933,"ories/psi4/objdir]$ otool -L /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so:; 	@rpath/core.cpython-37m-darwin.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. As you said, it seems ```gcc``` tries to impose ```gomp```. How can I bypass it ?; Because I still have the error:; ```; E ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; E Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; E Expected in: flat namespace; E in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; ```. which (I think) is due to that right ?. PS: ```echo $DYLD_LIBRARY_PATH``` gives ```/opt/intel/lib``` only. And in case it helps, here is the output of my configuration step, which seems correct:; ```cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib```; ```; -- The C compiler identification is GNU 8.3.0; -- The CXX compiler identification is GNU 8.3.0; -- Checking whether C compiler has -isysroot; -- Checking whether C compiler has -isysroot - yes; -- Checking whether C compiler supports OSX deployment target flag; -- Checking whether C compiler supports OSX deployment target flag -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:2417,Availability,echo,echo,2417," 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. As you said, it seems ```gcc``` tries to impose ```gomp```. How can I bypass it ?; Because I still have the error:; ```; E ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; E Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; E Expected in: flat namespace; E in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; ```. which (I think) is due to that right ?. PS: ```echo $DYLD_LIBRARY_PATH``` gives ```/opt/intel/lib``` only. And in case it helps, here is the output of my configuration step, which seems correct:; ```cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib```; ```; -- The C compiler identification is GNU 8.3.0; -- The CXX compiler identification is GNU 8.3.0; -- Checking whether C compiler has -isysroot; -- Checking whether C compiler has -isysroot - yes; -- Checking whether C compiler supports OSX deployment target flag; -- Checking whether C compiler supports OSX deployment target flag - yes; -- Check for working C compiler: /usr/local/bin/gcc-8; -- Check for working C compiler: /usr/local/bin/gcc-8 -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:8,Deployability,install,installed,8,"So I've installed the intel distribution of Python, and now the numpy seems ok (no more openblas):. ```; bsenjean@MBP-de-Bruno:~/Documents/intelpython3/pkgs/numpy-base-1.17.5-py37_1/lib/python3.7/site-packages/numpy/linalg]$ otool -L lapack_lite.cpython-37m-darwin.so; lapack_lite.cpython-37m-darwin.so:; 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1281.0.0); 	@rpath/libimf.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libsvml.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libirng.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 800.7.0); 	@rpath/libintlc.dylib (compatibility version 1.0.0, current version 1.13.0); ```. However, after reinstalling psi4, it still has gomp:; ```; bsenjean@MBP-de-Bruno:~/Documents/Git_repositories/psi4/objdir]$ otool -L /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so:; 	@rpath/core.cpython-37m-darwin.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. As you said, it seems ```gcc``` tries to impose ```gomp```. How can I bypass it ?; Because I still have the error:; ```; E ImportError: dlopen(/Users/bsenjean/Documents/Git_rep",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:2524,Deployability,configurat,configuration,2524,"ocal/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. As you said, it seems ```gcc``` tries to impose ```gomp```. How can I bypass it ?; Because I still have the error:; ```; E ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; E Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; E Expected in: flat namespace; E in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; ```. which (I think) is due to that right ?. PS: ```echo $DYLD_LIBRARY_PATH``` gives ```/opt/intel/lib``` only. And in case it helps, here is the output of my configuration step, which seems correct:; ```cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib```; ```; -- The C compiler identification is GNU 8.3.0; -- The CXX compiler identification is GNU 8.3.0; -- Checking whether C compiler has -isysroot; -- Checking whether C compiler has -isysroot - yes; -- Checking whether C compiler supports OSX deployment target flag; -- Checking whether C compiler supports OSX deployment target flag - yes; -- Check for working C compiler: /usr/local/bin/gcc-8; -- Check for working C compiler: /usr/local/bin/gcc-8 -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:2872,Deployability,deploy,deployment,2872,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:2940,Deployability,deploy,deployment,2940,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:3385,Deployability,deploy,deployment,3385,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:3455,Deployability,deploy,deployment,3455,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4756,Deployability,Release,Release,4756,"t target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /Users/bsenjean/Documents/intelpython3/bin/python3 (found suitable version ""3.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:5268,Deployability,install,install,5268,"t target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /Users/bsenjean/Documents/intelpython3/bin/python3 (found suitable version ""3.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:7167,Deployability,install,install,7167,"AS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Found gCP: /usr/local/bin/gcp; -- Adding test cases: Psi4 + gCP; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/bsenjean/Documents/Git_repositories/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:2524,Modifiability,config,configuration,2524,"ocal/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. As you said, it seems ```gcc``` tries to impose ```gomp```. How can I bypass it ?; Because I still have the error:; ```; E ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; E Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; E Expected in: flat namespace; E in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; ```. which (I think) is due to that right ?. PS: ```echo $DYLD_LIBRARY_PATH``` gives ```/opt/intel/lib``` only. And in case it helps, here is the output of my configuration step, which seems correct:; ```cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib```; ```; -- The C compiler identification is GNU 8.3.0; -- The CXX compiler identification is GNU 8.3.0; -- Checking whether C compiler has -isysroot; -- Checking whether C compiler has -isysroot - yes; -- Checking whether C compiler supports OSX deployment target flag; -- Checking whether C compiler supports OSX deployment target flag - yes; -- Check for working C compiler: /usr/local/bin/gcc-8; -- Check for working C compiler: /usr/local/bin/gcc-8 -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:7607,Modifiability,Config,Configuring,7607,"AS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Found gCP: /usr/local/bin/gcp; -- Adding test cases: Psi4 + gCP; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/bsenjean/Documents/Git_repositories/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4094,Performance,Perform,Performing,4094,"ng C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4146,Performance,Perform,Performing,4146,"info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4217,Performance,Perform,Performing,4217,"atures - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Setting (unspecified) op",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4271,Performance,Perform,Performing,4271,"sysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme; -- Psi4 install: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:3092,Safety,Detect,Detecting,3092,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:3126,Safety,Detect,Detecting,3126,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:3167,Safety,Detect,Detecting,3167,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:3200,Safety,Detect,Detecting,3200,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:3611,Safety,Detect,Detecting,3611,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:3647,Safety,Detect,Detecting,3647,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:3690,Safety,Detect,Detecting,3690,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:3725,Safety,Detect,Detecting,3725,"-- Checking whether C compiler has -isysroot; -- Checking whether C compiler has -isysroot - yes; -- Checking whether C compiler supports OSX deployment target flag; -- Checking whether C compiler supports OSX deployment target flag - yes; -- Check for working C compiler: /usr/local/bin/gcc-8; -- Check for working C compiler: /usr/local/bin/gcc-8 -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:6153,Safety,Detect,Detecting,6153,"ecified) option SPHINX_THEME: sphinx_psi_theme; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /Users/bsenjean/Documents/intelpython3/bin/python3 (found suitable version ""3.7.7"", minimum required is ""3.6"") ; -- Found PythonLibs: /Users/bsenjean/Documents/intelpython3/lib/libpython3.7m.dylib; -- Found Python 3.7: /Users/bsenjean/Documents/intelpython3/bin/python3 (found version 3.7.7); -- Psi4 staging: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage; -- Math lib search order is MKL;SYSTEM_NATIVE;OPENBLAS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4105,Testability,Test,Test,4105,"piler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspeci",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4157,Testability,Test,Test,4157,"one; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setting (unsp",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4228,Testability,Test,Test,4228," done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Setting (unspecified) option SPH",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4282,Testability,Test,Test,4282," -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme; -- Psi4 install: /usr/loc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:7295,Testability,test,test,7295,"AS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Found gCP: /usr/local/bin/gcp; -- Adding test cases: Psi4 + gCP; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/bsenjean/Documents/Git_repositories/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:7346,Testability,test,test,7346,"AS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Found gCP: /usr/local/bin/gcp; -- Adding test cases: Psi4 + gCP; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/bsenjean/Documents/Git_repositories/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:7408,Testability,test,test,7408,"AS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Found gCP: /usr/local/bin/gcp; -- Adding test cases: Psi4 + gCP; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/bsenjean/Documents/Git_repositories/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:7470,Testability,test,test,7470,"AS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Found gCP: /usr/local/bin/gcp; -- Adding test cases: Psi4 + gCP; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/bsenjean/Documents/Git_repositories/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:7518,Testability,test,test,7518,"AS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Found gCP: /usr/local/bin/gcp; -- Adding test cases: Psi4 + gCP; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/bsenjean/Documents/Git_repositories/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:7580,Testability,test,test,7580,"AS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Found gCP: /usr/local/bin/gcp; -- Adding test cases: Psi4 + gCP; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/bsenjean/Documents/Git_repositories/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308
https://github.com/psi4/psi4/issues/1870#issuecomment-615181744:115,Availability,error,error,115,"Btw, which OSX version do you use? . You still need to get libgfortran.dylib in there somewhere to get rid of this error. See @andysim answer above. You could also try a flag like `-DCMAKE_FFLAGS='-lgfortran'` (not sure..). If it's any consolidation, I am compiling psi4 with gcc9(homebrew) and MKL against `psi4-dev` conda and also cannot get rid of `gomp`. This breaks threading for me, but serial execution is fine and anyway enough workload for my old macbook.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615181744
https://github.com/psi4/psi4/issues/1870#issuecomment-615225584:71,Deployability,install,installer,71,"What is the difference between building from source or using the conda installer, but choosing the nightly build ? Because the conda installation seems to work on my laptop compare to the source one. As I just need the developer version, i.e. the last one on the master branch of Github, I wonder if the conda installation is sufficient or not ?. ```; conda install psi4 psi4-rt python=3.7 -c psi4/label/dev; conda activate p4dev; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615225584
https://github.com/psi4/psi4/issues/1870#issuecomment-615225584:133,Deployability,install,installation,133,"What is the difference between building from source or using the conda installer, but choosing the nightly build ? Because the conda installation seems to work on my laptop compare to the source one. As I just need the developer version, i.e. the last one on the master branch of Github, I wonder if the conda installation is sufficient or not ?. ```; conda install psi4 psi4-rt python=3.7 -c psi4/label/dev; conda activate p4dev; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615225584
https://github.com/psi4/psi4/issues/1870#issuecomment-615225584:310,Deployability,install,installation,310,"What is the difference between building from source or using the conda installer, but choosing the nightly build ? Because the conda installation seems to work on my laptop compare to the source one. As I just need the developer version, i.e. the last one on the master branch of Github, I wonder if the conda installation is sufficient or not ?. ```; conda install psi4 psi4-rt python=3.7 -c psi4/label/dev; conda activate p4dev; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615225584
https://github.com/psi4/psi4/issues/1870#issuecomment-615225584:358,Deployability,install,install,358,"What is the difference between building from source or using the conda installer, but choosing the nightly build ? Because the conda installation seems to work on my laptop compare to the source one. As I just need the developer version, i.e. the last one on the master branch of Github, I wonder if the conda installation is sufficient or not ?. ```; conda install psi4 psi4-rt python=3.7 -c psi4/label/dev; conda activate p4dev; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615225584
https://github.com/psi4/psi4/issues/1870#issuecomment-615236034:280,Usability,learn,learning,280,"If you tell me that this will be in the conda ""nightly"" in about a month, I can wait. The feature I need is important but not of absolute necessity for now. And for me, building from source is a nightmare right now (though I would still like to understand how to fix it, just for learning purpose).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615236034
https://github.com/psi4/psi4/issues/1870#issuecomment-615249317:266,Availability,error,errors,266,"This is what I do for my Catalina build with gcc9/mkl against conda python+libraries. . a) get `psi4-dev psi4-rt psi4 -c psi4/label/dev` from conda (conda psi4 binaries plus dependencies to build from source); (`conda remove -f v2rdm_casscf` because it gives symbol errors); b) `export PATH=/Users/kruse/homebrew/bin:$PATH` for my homebrew gcc-9; c) run the below script (This is what `psi4-path-advisor` gave me plus making sure the correct compilers are used, plus a custom installation dir. Since recently I also have to turn of 2 default plugins because of symbol problems `-DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF`, might not be necessary for everyone). ```; #!/bin/bash; export MKLROOT=/Users/kruse/qc/miniconda3; rm -rif objdir; /Users/kruse/qc/miniconda3/bin/cmake -H. -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsCache.cmake -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsMKLCache.cmake -DCMAKE_C_COMPILER=gcc-9 -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_Fortran_COMPILER=gfortran-9 -Bobjdir -DCMAKE_INSTALL_PREFIX=/Users/kruse/qc/psi4.bin -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317
https://github.com/psi4/psi4/issues/1870#issuecomment-615249317:476,Deployability,install,installation,476,"This is what I do for my Catalina build with gcc9/mkl against conda python+libraries. . a) get `psi4-dev psi4-rt psi4 -c psi4/label/dev` from conda (conda psi4 binaries plus dependencies to build from source); (`conda remove -f v2rdm_casscf` because it gives symbol errors); b) `export PATH=/Users/kruse/homebrew/bin:$PATH` for my homebrew gcc-9; c) run the below script (This is what `psi4-path-advisor` gave me plus making sure the correct compilers are used, plus a custom installation dir. Since recently I also have to turn of 2 default plugins because of symbol problems `-DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF`, might not be necessary for everyone). ```; #!/bin/bash; export MKLROOT=/Users/kruse/qc/miniconda3; rm -rif objdir; /Users/kruse/qc/miniconda3/bin/cmake -H. -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsCache.cmake -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsMKLCache.cmake -DCMAKE_C_COMPILER=gcc-9 -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_Fortran_COMPILER=gfortran-9 -Bobjdir -DCMAKE_INSTALL_PREFIX=/Users/kruse/qc/psi4.bin -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317
https://github.com/psi4/psi4/issues/1870#issuecomment-615249317:174,Integrability,depend,dependencies,174,"This is what I do for my Catalina build with gcc9/mkl against conda python+libraries. . a) get `psi4-dev psi4-rt psi4 -c psi4/label/dev` from conda (conda psi4 binaries plus dependencies to build from source); (`conda remove -f v2rdm_casscf` because it gives symbol errors); b) `export PATH=/Users/kruse/homebrew/bin:$PATH` for my homebrew gcc-9; c) run the below script (This is what `psi4-path-advisor` gave me plus making sure the correct compilers are used, plus a custom installation dir. Since recently I also have to turn of 2 default plugins because of symbol problems `-DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF`, might not be necessary for everyone). ```; #!/bin/bash; export MKLROOT=/Users/kruse/qc/miniconda3; rm -rif objdir; /Users/kruse/qc/miniconda3/bin/cmake -H. -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsCache.cmake -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsMKLCache.cmake -DCMAKE_C_COMPILER=gcc-9 -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_Fortran_COMPILER=gfortran-9 -Bobjdir -DCMAKE_INSTALL_PREFIX=/Users/kruse/qc/psi4.bin -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317
https://github.com/psi4/psi4/issues/1870#issuecomment-615249317:542,Modifiability,plugin,plugins,542,"This is what I do for my Catalina build with gcc9/mkl against conda python+libraries. . a) get `psi4-dev psi4-rt psi4 -c psi4/label/dev` from conda (conda psi4 binaries plus dependencies to build from source); (`conda remove -f v2rdm_casscf` because it gives symbol errors); b) `export PATH=/Users/kruse/homebrew/bin:$PATH` for my homebrew gcc-9; c) run the below script (This is what `psi4-path-advisor` gave me plus making sure the correct compilers are used, plus a custom installation dir. Since recently I also have to turn of 2 default plugins because of symbol problems `-DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF`, might not be necessary for everyone). ```; #!/bin/bash; export MKLROOT=/Users/kruse/qc/miniconda3; rm -rif objdir; /Users/kruse/qc/miniconda3/bin/cmake -H. -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsCache.cmake -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsMKLCache.cmake -DCMAKE_C_COMPILER=gcc-9 -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_Fortran_COMPILER=gfortran-9 -Bobjdir -DCMAKE_INSTALL_PREFIX=/Users/kruse/qc/psi4.bin -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317
https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:204,Availability,error,errors,204,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611
https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:552,Availability,error,error,552,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611
https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:1354,Availability,Error,Error,1354,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611
https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:1438,Availability,Error,Error,1438,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611
https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:717,Energy Efficiency,energy,energy,717,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611
https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:897,Energy Efficiency,energy,energy,897,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611
https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:923,Energy Efficiency,energy,energy,923,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611
https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:68,Modifiability,config,configure,68,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611
https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:275,Modifiability,config,configure,275,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611
https://github.com/psi4/psi4/issues/1871#issuecomment-615439545:277,Energy Efficiency,energy,energy,277,"You would need to make your own wfn file first. The serial-wfn test seems fine for testing:. ```; molecule mol {; 0 1; O 0.0 0.0 0.0; H 1.0 0.0 0.0; H -.7 0.7 0.0; symmetry c1; }; memory 4 GiB; set {; basis sto-3g; guess sad; active [7]; }; # make a wavefunction; e, wfn_old = energy('hf', return_wfn=True). # write the wavefunction to file; wfn_old.to_file('my_wfn'). # read wavefunction from file; wfn_new = Wavefunction.from_file('my_wfn'); #wfn_new.set_basisset(""DF_BASIS_SCF"", core.BasisSet.zero_ao_basis_set()); energy('casscf',ref_wfn=wfn_new); ```. I notice now that I get a segfault at the `Properties computed using the CASSCF density matrix`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615439545
https://github.com/psi4/psi4/issues/1871#issuecomment-615439545:518,Energy Efficiency,energy,energy,518,"You would need to make your own wfn file first. The serial-wfn test seems fine for testing:. ```; molecule mol {; 0 1; O 0.0 0.0 0.0; H 1.0 0.0 0.0; H -.7 0.7 0.0; symmetry c1; }; memory 4 GiB; set {; basis sto-3g; guess sad; active [7]; }; # make a wavefunction; e, wfn_old = energy('hf', return_wfn=True). # write the wavefunction to file; wfn_old.to_file('my_wfn'). # read wavefunction from file; wfn_new = Wavefunction.from_file('my_wfn'); #wfn_new.set_basisset(""DF_BASIS_SCF"", core.BasisSet.zero_ao_basis_set()); energy('casscf',ref_wfn=wfn_new); ```. I notice now that I get a segfault at the `Properties computed using the CASSCF density matrix`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615439545
https://github.com/psi4/psi4/issues/1871#issuecomment-615439545:63,Testability,test,test,63,"You would need to make your own wfn file first. The serial-wfn test seems fine for testing:. ```; molecule mol {; 0 1; O 0.0 0.0 0.0; H 1.0 0.0 0.0; H -.7 0.7 0.0; symmetry c1; }; memory 4 GiB; set {; basis sto-3g; guess sad; active [7]; }; # make a wavefunction; e, wfn_old = energy('hf', return_wfn=True). # write the wavefunction to file; wfn_old.to_file('my_wfn'). # read wavefunction from file; wfn_new = Wavefunction.from_file('my_wfn'); #wfn_new.set_basisset(""DF_BASIS_SCF"", core.BasisSet.zero_ao_basis_set()); energy('casscf',ref_wfn=wfn_new); ```. I notice now that I get a segfault at the `Properties computed using the CASSCF density matrix`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615439545
https://github.com/psi4/psi4/issues/1871#issuecomment-615439545:83,Testability,test,testing,83,"You would need to make your own wfn file first. The serial-wfn test seems fine for testing:. ```; molecule mol {; 0 1; O 0.0 0.0 0.0; H 1.0 0.0 0.0; H -.7 0.7 0.0; symmetry c1; }; memory 4 GiB; set {; basis sto-3g; guess sad; active [7]; }; # make a wavefunction; e, wfn_old = energy('hf', return_wfn=True). # write the wavefunction to file; wfn_old.to_file('my_wfn'). # read wavefunction from file; wfn_new = Wavefunction.from_file('my_wfn'); #wfn_new.set_basisset(""DF_BASIS_SCF"", core.BasisSet.zero_ao_basis_set()); energy('casscf',ref_wfn=wfn_new); ```. I notice now that I get a segfault at the `Properties computed using the CASSCF density matrix`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615439545
https://github.com/psi4/psi4/issues/1871#issuecomment-615460041:105,Availability,error,error,105,"Let me rephrase: I tried to make my own wavefunction file, but when I succeed in that, I get a different error when setting up the active space, likely because the number of MOs in the basis set I'm picking isn't consistent with the active space defined in the input file. Anyways, this bug is the result of the exact same deep design issue in the Wavefunction class that led to #1851. **I don't know what the Wavefunction ""contract"" is, and wavefunction serialization disagrees about what the contract is with every single module that's having these problems.**. #1851 : Some modules assume that every wavefunction must have a PSIO object. Wavefunction serialization disagrees.; bsenjean's original report : The JK object constructors force callers to pass in an auxiliary basis set, even when the JK object will never use it. `detci` responds by assuming that every reference wavefunction must have a `DF_BASIS_SCF` set. Wavefunction serialization disagrees. Holger's previous analysis is right on for the mechanism of this.; Holger's new report : The properties code [assumes that every wavefunction has a matrix factory](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L88) and uses that to create an [OperatorSymmetry object](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1256). Wavefunction serialization disagrees. It doesn't attach a matrix factory, so libmints is left trying to create matrices out of `nullptr`. That segmentation faults, unsurprisingly. I don't have time to deal with these, because I have the gradient code to worry about, and I'm sure nobody else has time because _getting 1.4 out soon is kind of important_. I will say that this is not a good state of affairs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615460041
https://github.com/psi4/psi4/issues/1871#issuecomment-615460041:1495,Availability,fault,faults,1495,"Let me rephrase: I tried to make my own wavefunction file, but when I succeed in that, I get a different error when setting up the active space, likely because the number of MOs in the basis set I'm picking isn't consistent with the active space defined in the input file. Anyways, this bug is the result of the exact same deep design issue in the Wavefunction class that led to #1851. **I don't know what the Wavefunction ""contract"" is, and wavefunction serialization disagrees about what the contract is with every single module that's having these problems.**. #1851 : Some modules assume that every wavefunction must have a PSIO object. Wavefunction serialization disagrees.; bsenjean's original report : The JK object constructors force callers to pass in an auxiliary basis set, even when the JK object will never use it. `detci` responds by assuming that every reference wavefunction must have a `DF_BASIS_SCF` set. Wavefunction serialization disagrees. Holger's previous analysis is right on for the mechanism of this.; Holger's new report : The properties code [assumes that every wavefunction has a matrix factory](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L88) and uses that to create an [OperatorSymmetry object](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1256). Wavefunction serialization disagrees. It doesn't attach a matrix factory, so libmints is left trying to create matrices out of `nullptr`. That segmentation faults, unsurprisingly. I don't have time to deal with these, because I have the gradient code to worry about, and I'm sure nobody else has time because _getting 1.4 out soon is kind of important_. I will say that this is not a good state of affairs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615460041
https://github.com/psi4/psi4/issues/1871#issuecomment-615460041:424,Integrability,contract,contract,424,"Let me rephrase: I tried to make my own wavefunction file, but when I succeed in that, I get a different error when setting up the active space, likely because the number of MOs in the basis set I'm picking isn't consistent with the active space defined in the input file. Anyways, this bug is the result of the exact same deep design issue in the Wavefunction class that led to #1851. **I don't know what the Wavefunction ""contract"" is, and wavefunction serialization disagrees about what the contract is with every single module that's having these problems.**. #1851 : Some modules assume that every wavefunction must have a PSIO object. Wavefunction serialization disagrees.; bsenjean's original report : The JK object constructors force callers to pass in an auxiliary basis set, even when the JK object will never use it. `detci` responds by assuming that every reference wavefunction must have a `DF_BASIS_SCF` set. Wavefunction serialization disagrees. Holger's previous analysis is right on for the mechanism of this.; Holger's new report : The properties code [assumes that every wavefunction has a matrix factory](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L88) and uses that to create an [OperatorSymmetry object](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1256). Wavefunction serialization disagrees. It doesn't attach a matrix factory, so libmints is left trying to create matrices out of `nullptr`. That segmentation faults, unsurprisingly. I don't have time to deal with these, because I have the gradient code to worry about, and I'm sure nobody else has time because _getting 1.4 out soon is kind of important_. I will say that this is not a good state of affairs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615460041
https://github.com/psi4/psi4/issues/1871#issuecomment-615460041:494,Integrability,contract,contract,494,"Let me rephrase: I tried to make my own wavefunction file, but when I succeed in that, I get a different error when setting up the active space, likely because the number of MOs in the basis set I'm picking isn't consistent with the active space defined in the input file. Anyways, this bug is the result of the exact same deep design issue in the Wavefunction class that led to #1851. **I don't know what the Wavefunction ""contract"" is, and wavefunction serialization disagrees about what the contract is with every single module that's having these problems.**. #1851 : Some modules assume that every wavefunction must have a PSIO object. Wavefunction serialization disagrees.; bsenjean's original report : The JK object constructors force callers to pass in an auxiliary basis set, even when the JK object will never use it. `detci` responds by assuming that every reference wavefunction must have a `DF_BASIS_SCF` set. Wavefunction serialization disagrees. Holger's previous analysis is right on for the mechanism of this.; Holger's new report : The properties code [assumes that every wavefunction has a matrix factory](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L88) and uses that to create an [OperatorSymmetry object](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1256). Wavefunction serialization disagrees. It doesn't attach a matrix factory, so libmints is left trying to create matrices out of `nullptr`. That segmentation faults, unsurprisingly. I don't have time to deal with these, because I have the gradient code to worry about, and I'm sure nobody else has time because _getting 1.4 out soon is kind of important_. I will say that this is not a good state of affairs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615460041
https://github.com/psi4/psi4/issues/1871#issuecomment-615494761:420,Availability,Fault,Fault,420,"Sorry I realize my example was incomplete.; I used the following options:. ```; psi4.set_options({'basis': 'STO-3G-DECON',; 'reference': 'rohf',; 'scf_type': 'direct',; 'guess': 'sad',; 'puream':true}); ```. I then used @hokru 's trick to set the ```DF_BASIS_SCF``` object. I modified the active space (using ```RESTRICTED_DOCC``` instead of ```FROZEN_DOCC``` and only 4 active orbitals) and I also get the Segmentation Fault in the property section. But the energy is there, which is already good enough for me right now, so thanks for the tip !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615494761
https://github.com/psi4/psi4/issues/1871#issuecomment-615494761:459,Energy Efficiency,energy,energy,459,"Sorry I realize my example was incomplete.; I used the following options:. ```; psi4.set_options({'basis': 'STO-3G-DECON',; 'reference': 'rohf',; 'scf_type': 'direct',; 'guess': 'sad',; 'puream':true}); ```. I then used @hokru 's trick to set the ```DF_BASIS_SCF``` object. I modified the active space (using ```RESTRICTED_DOCC``` instead of ```FROZEN_DOCC``` and only 4 active orbitals) and I also get the Segmentation Fault in the property section. But the energy is there, which is already good enough for me right now, so thanks for the tip !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615494761
https://github.com/psi4/psi4/issues/1872#issuecomment-616805230:671,Availability,error,error,671,"Here's a few more refs and the original discussion http://forum.psicode.org/t/naming-considerations-for-cepa-0/156 . And more ways it can confuse ppl http://forum.psicode.org/t/cepa-0-singles/1525/11 . My main consideration is that `energy(""cepa(0)"")` is running the same method in all modules. That's what's currently forced by cepa(0) directing all traffic to fnocc (since that's the only module that can do lccsd). `lccd` properly manages direction to fnocc/occ. If the opinion of `cepa0 --> lccsd` has shifted over the years to `cepa0 --> lccd`, that's ok with me, and with a lot of warnings, we can shift the definition. Or, if you'd like `cepa0` to always raise an error and demand sd/d distinction, that's ok, too. Or maybe dct could adjust to the current scheme. Basically, I think the current way is sane. But then I don't use cepa. And the current setup has shown itself to be confusing to new (thread above) and experienced (AED, Jonathon) practitioners. So strong feelings from multiple other parties could overcome my symlink.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616805230
https://github.com/psi4/psi4/issues/1872#issuecomment-616805230:233,Energy Efficiency,energy,energy,233,"Here's a few more refs and the original discussion http://forum.psicode.org/t/naming-considerations-for-cepa-0/156 . And more ways it can confuse ppl http://forum.psicode.org/t/cepa-0-singles/1525/11 . My main consideration is that `energy(""cepa(0)"")` is running the same method in all modules. That's what's currently forced by cepa(0) directing all traffic to fnocc (since that's the only module that can do lccsd). `lccd` properly manages direction to fnocc/occ. If the opinion of `cepa0 --> lccsd` has shifted over the years to `cepa0 --> lccd`, that's ok with me, and with a lot of warnings, we can shift the definition. Or, if you'd like `cepa0` to always raise an error and demand sd/d distinction, that's ok, too. Or maybe dct could adjust to the current scheme. Basically, I think the current way is sane. But then I don't use cepa. And the current setup has shown itself to be confusing to new (thread above) and experienced (AED, Jonathon) practitioners. So strong feelings from multiple other parties could overcome my symlink.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616805230
https://github.com/psi4/psi4/issues/1872#issuecomment-616900635:114,Energy Efficiency,energy,energy,114,"...Well, thanks Molpro. We have a legitimate ambiguity after all. Okay, new plan:; * `cepa(0)` stays `lccsd` for `energy`, `gradient`, etc. purposes.; * Any time `cepa(0)` appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use `LinCCD`. Crawford has a good point about `LCCD` referring to localization. If we try to eliminate `cepa(0)` meaning `lccd` entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too.; * `cepa` is eliminated from `dct`. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to `occ`, `dfocc`, or `fnocc`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616900635
https://github.com/psi4/psi4/issues/1872#issuecomment-616900635:560,Testability,log,logging,560,"...Well, thanks Molpro. We have a legitimate ambiguity after all. Okay, new plan:; * `cepa(0)` stays `lccsd` for `energy`, `gradient`, etc. purposes.; * Any time `cepa(0)` appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use `LinCCD`. Crawford has a good point about `LCCD` referring to localization. If we try to eliminate `cepa(0)` meaning `lccd` entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too.; * `cepa` is eliminated from `dct`. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to `occ`, `dfocc`, or `fnocc`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616900635
https://github.com/psi4/psi4/issues/1872#issuecomment-616900635:960,Testability,log,logic,960,"...Well, thanks Molpro. We have a legitimate ambiguity after all. Okay, new plan:; * `cepa(0)` stays `lccsd` for `energy`, `gradient`, etc. purposes.; * Any time `cepa(0)` appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use `LinCCD`. Crawford has a good point about `LCCD` referring to localization. If we try to eliminate `cepa(0)` meaning `lccd` entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too.; * `cepa` is eliminated from `dct`. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to `occ`, `dfocc`, or `fnocc`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616900635
https://github.com/psi4/psi4/issues/1872#issuecomment-616909231:99,Energy Efficiency,energy,energy,99,"> ...Well, thanks Molpro. We have a legitimate ambiguity after all. :-). > cepa(0) stays lccsd for energy, gradient, etc. purposes. sounds good -- can avoid deprecation warnings. > Any time cepa(0) appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use LinCCD. Crawford has a good point about LCCD referring to localization. If we try to eliminate cepa(0) meaning lccd entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too. * overall sounds good to add very specific text clarifying CCD/CCSD. I'm less concerned about linearized/local since psi has none of the latter.; * should try to keep output of cepa-0,1,2,etc. cohesive for fnocc; * I'd like to not disrupt the qcvars, presently e.g., `LCCD OPPOSITE-SPIN CORRELATION ENERGY`, `LCCSD TOTAL ENERGY`, but I'm not adamant.; * I'm less concerned about cohesiveness with UB papers. After all, once upon a time, the occ/dfocc code was ""using lccd for non-orbital-optimized and ocepa0 for orbital-optimized"". Any firm connections btwn code and paper can be cemented by pasting some DOIs. IMO, psi should try to be cohesive from the face, not from the lit perspective. > cepa is eliminated from dct. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to occ, dfocc, or fnocc. sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231
https://github.com/psi4/psi4/issues/1872#issuecomment-616909231:927,Energy Efficiency,ENERGY,ENERGY,927,"> ...Well, thanks Molpro. We have a legitimate ambiguity after all. :-). > cepa(0) stays lccsd for energy, gradient, etc. purposes. sounds good -- can avoid deprecation warnings. > Any time cepa(0) appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use LinCCD. Crawford has a good point about LCCD referring to localization. If we try to eliminate cepa(0) meaning lccd entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too. * overall sounds good to add very specific text clarifying CCD/CCSD. I'm less concerned about linearized/local since psi has none of the latter.; * should try to keep output of cepa-0,1,2,etc. cohesive for fnocc; * I'd like to not disrupt the qcvars, presently e.g., `LCCD OPPOSITE-SPIN CORRELATION ENERGY`, `LCCSD TOTAL ENERGY`, but I'm not adamant.; * I'm less concerned about cohesiveness with UB papers. After all, once upon a time, the occ/dfocc code was ""using lccd for non-orbital-optimized and ocepa0 for orbital-optimized"". Any firm connections btwn code and paper can be cemented by pasting some DOIs. IMO, psi should try to be cohesive from the face, not from the lit perspective. > cepa is eliminated from dct. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to occ, dfocc, or fnocc. sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231
https://github.com/psi4/psi4/issues/1872#issuecomment-616909231:949,Energy Efficiency,ENERGY,ENERGY,949,"> ...Well, thanks Molpro. We have a legitimate ambiguity after all. :-). > cepa(0) stays lccsd for energy, gradient, etc. purposes. sounds good -- can avoid deprecation warnings. > Any time cepa(0) appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use LinCCD. Crawford has a good point about LCCD referring to localization. If we try to eliminate cepa(0) meaning lccd entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too. * overall sounds good to add very specific text clarifying CCD/CCSD. I'm less concerned about linearized/local since psi has none of the latter.; * should try to keep output of cepa-0,1,2,etc. cohesive for fnocc; * I'd like to not disrupt the qcvars, presently e.g., `LCCD OPPOSITE-SPIN CORRELATION ENERGY`, `LCCSD TOTAL ENERGY`, but I'm not adamant.; * I'm less concerned about cohesiveness with UB papers. After all, once upon a time, the occ/dfocc code was ""using lccd for non-orbital-optimized and ocepa0 for orbital-optimized"". Any firm connections btwn code and paper can be cemented by pasting some DOIs. IMO, psi should try to be cohesive from the face, not from the lit perspective. > cepa is eliminated from dct. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to occ, dfocc, or fnocc. sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231
https://github.com/psi4/psi4/issues/1872#issuecomment-616909231:1116,Performance,optimiz,optimized,1116,"> ...Well, thanks Molpro. We have a legitimate ambiguity after all. :-). > cepa(0) stays lccsd for energy, gradient, etc. purposes. sounds good -- can avoid deprecation warnings. > Any time cepa(0) appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use LinCCD. Crawford has a good point about LCCD referring to localization. If we try to eliminate cepa(0) meaning lccd entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too. * overall sounds good to add very specific text clarifying CCD/CCSD. I'm less concerned about linearized/local since psi has none of the latter.; * should try to keep output of cepa-0,1,2,etc. cohesive for fnocc; * I'd like to not disrupt the qcvars, presently e.g., `LCCD OPPOSITE-SPIN CORRELATION ENERGY`, `LCCSD TOTAL ENERGY`, but I'm not adamant.; * I'm less concerned about cohesiveness with UB papers. After all, once upon a time, the occ/dfocc code was ""using lccd for non-orbital-optimized and ocepa0 for orbital-optimized"". Any firm connections btwn code and paper can be cemented by pasting some DOIs. IMO, psi should try to be cohesive from the face, not from the lit perspective. > cepa is eliminated from dct. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to occ, dfocc, or fnocc. sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231
https://github.com/psi4/psi4/issues/1872#issuecomment-616909231:1149,Performance,optimiz,optimized,1149,"> ...Well, thanks Molpro. We have a legitimate ambiguity after all. :-). > cepa(0) stays lccsd for energy, gradient, etc. purposes. sounds good -- can avoid deprecation warnings. > Any time cepa(0) appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use LinCCD. Crawford has a good point about LCCD referring to localization. If we try to eliminate cepa(0) meaning lccd entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too. * overall sounds good to add very specific text clarifying CCD/CCSD. I'm less concerned about linearized/local since psi has none of the latter.; * should try to keep output of cepa-0,1,2,etc. cohesive for fnocc; * I'd like to not disrupt the qcvars, presently e.g., `LCCD OPPOSITE-SPIN CORRELATION ENERGY`, `LCCSD TOTAL ENERGY`, but I'm not adamant.; * I'm less concerned about cohesiveness with UB papers. After all, once upon a time, the occ/dfocc code was ""using lccd for non-orbital-optimized and ocepa0 for orbital-optimized"". Any firm connections btwn code and paper can be cemented by pasting some DOIs. IMO, psi should try to be cohesive from the face, not from the lit perspective. > cepa is eliminated from dct. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to occ, dfocc, or fnocc. sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231
https://github.com/psi4/psi4/issues/1872#issuecomment-616909231:151,Safety,avoid,avoid,151,"> ...Well, thanks Molpro. We have a legitimate ambiguity after all. :-). > cepa(0) stays lccsd for energy, gradient, etc. purposes. sounds good -- can avoid deprecation warnings. > Any time cepa(0) appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use LinCCD. Crawford has a good point about LCCD referring to localization. If we try to eliminate cepa(0) meaning lccd entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too. * overall sounds good to add very specific text clarifying CCD/CCSD. I'm less concerned about linearized/local since psi has none of the latter.; * should try to keep output of cepa-0,1,2,etc. cohesive for fnocc; * I'd like to not disrupt the qcvars, presently e.g., `LCCD OPPOSITE-SPIN CORRELATION ENERGY`, `LCCSD TOTAL ENERGY`, but I'm not adamant.; * I'm less concerned about cohesiveness with UB papers. After all, once upon a time, the occ/dfocc code was ""using lccd for non-orbital-optimized and ocepa0 for orbital-optimized"". Any firm connections btwn code and paper can be cemented by pasting some DOIs. IMO, psi should try to be cohesive from the face, not from the lit perspective. > cepa is eliminated from dct. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to occ, dfocc, or fnocc. sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231
https://github.com/psi4/psi4/issues/1872#issuecomment-616909231:578,Testability,log,logging,578,"> ...Well, thanks Molpro. We have a legitimate ambiguity after all. :-). > cepa(0) stays lccsd for energy, gradient, etc. purposes. sounds good -- can avoid deprecation warnings. > Any time cepa(0) appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use LinCCD. Crawford has a good point about LCCD referring to localization. If we try to eliminate cepa(0) meaning lccd entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too. * overall sounds good to add very specific text clarifying CCD/CCSD. I'm less concerned about linearized/local since psi has none of the latter.; * should try to keep output of cepa-0,1,2,etc. cohesive for fnocc; * I'd like to not disrupt the qcvars, presently e.g., `LCCD OPPOSITE-SPIN CORRELATION ENERGY`, `LCCSD TOTAL ENERGY`, but I'm not adamant.; * I'm less concerned about cohesiveness with UB papers. After all, once upon a time, the occ/dfocc code was ""using lccd for non-orbital-optimized and ocepa0 for orbital-optimized"". Any firm connections btwn code and paper can be cemented by pasting some DOIs. IMO, psi should try to be cohesive from the face, not from the lit perspective. > cepa is eliminated from dct. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to occ, dfocc, or fnocc. sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231
https://github.com/psi4/psi4/issues/1872#issuecomment-616909231:1665,Testability,log,logic,1665,"> ...Well, thanks Molpro. We have a legitimate ambiguity after all. :-). > cepa(0) stays lccsd for energy, gradient, etc. purposes. sounds good -- can avoid deprecation warnings. > Any time cepa(0) appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use LinCCD. Crawford has a good point about LCCD referring to localization. If we try to eliminate cepa(0) meaning lccd entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too. * overall sounds good to add very specific text clarifying CCD/CCSD. I'm less concerned about linearized/local since psi has none of the latter.; * should try to keep output of cepa-0,1,2,etc. cohesive for fnocc; * I'd like to not disrupt the qcvars, presently e.g., `LCCD OPPOSITE-SPIN CORRELATION ENERGY`, `LCCSD TOTAL ENERGY`, but I'm not adamant.; * I'm less concerned about cohesiveness with UB papers. After all, once upon a time, the occ/dfocc code was ""using lccd for non-orbital-optimized and ocepa0 for orbital-optimized"". Any firm connections btwn code and paper can be cemented by pasting some DOIs. IMO, psi should try to be cohesive from the face, not from the lit perspective. > cepa is eliminated from dct. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to occ, dfocc, or fnocc. sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231
https://github.com/psi4/psi4/issues/1872#issuecomment-618326982:82,Safety,avoid,avoid,82,"I'll make the remaining `cepa0` changes after #1850 comes in. It seems prudent to avoid _two_ PRs standardizing things in `occ`, `dfocc`, and `fnocc` at once. The issue can then close.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-618326982
https://github.com/psi4/psi4/issues/1877#issuecomment-621283302:596,Modifiability,coupling,couplings,596,"Ok, so this is the issue. When you compute matrix elements of the effective Hamiltonian, <Psi_nu | Hbar(mu)|Psi_mu>, if the two determinants Psi_mu and Psi_nu differ by more than a double excitation you need the higher moments of the CC equations. These are not implemented in psimrcc. That's the reason for the warning in the CC code. In the PT2 code, everything is truncated at the second-order, and the matrix elements <Psi_nu | Hbar(mu)^(2) |Psi_mu> exist up to difference in three electron substitutions. So, I checked the paper and the code. The paper shows the formulas for the three-body couplings and some of these terms are coded in `psiumrcc/idmrpt2_Heff.cc` but are never called! So, the same warning should apply to PT2. My guess is that we were in the process of implementing them but then stopped (cannot remember why). So the following functions are dead code:; ```; void build_Heff_ijkabc();; void build_Heff_ijKabC();; void build_Heff_iJKaBC();; void build_Heff_IJKABC();; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-621283302
https://github.com/psi4/psi4/issues/1877#issuecomment-621299693:36,Usability,clear,clear,36,"Thanks for the investigation!. Am I clear to remove dead code in `psimrcc` so we have less to maintain, or do you want it kept around in case somebody decides to pick up?. If you want dead code removed, be warned that all of `MP2_CCSD` seems to be dead code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-621299693
https://github.com/psi4/psi4/issues/1877#issuecomment-625454905:81,Modifiability,coupling,coupling,81,"For organization purposes:. - [x] Remove debugging; - [x] Remove dead three-body coupling terms; - [x] Replace memory_manager with smart pointers (target of next PR); - [x] Add additional warning for PT (target of two PRs in, will also add the `wfn`); - [ ] Add back some rudimentary memory tracking. I'm going to shift my focus back to a paper I'm writing but should resume the smart pointer-ing when I feel I need a break (probably a week or so).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-625454905
https://github.com/psi4/psi4/issues/1877#issuecomment-625454905:368,Usability,resume,resume,368,"For organization purposes:. - [x] Remove debugging; - [x] Remove dead three-body coupling terms; - [x] Replace memory_manager with smart pointers (target of next PR); - [x] Add additional warning for PT (target of two PRs in, will also add the `wfn`); - [ ] Add back some rudimentary memory tracking. I'm going to shift my focus back to a paper I'm writing but should resume the smart pointer-ing when I feel I need a break (probably a week or so).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-625454905
https://github.com/psi4/psi4/issues/1877#issuecomment-632730022:379,Performance,perform,performance,379,"I'm now resuming work on this. Something I had overlooked previously was that most of the memory being managed were of containers of numeric types. Lots of `int *`, `double **`, `double ***`, and so on. What's the ""right"" way to modernize those? I haven't seen smart pointers being used for this before. I'm inclined to convert to `std::vector` for things that are obviously not performance critical, but leave raw pointers otherwise. (_Especially_ for things that need to call BLAS.) Is this the right decision, or should I modernize differently?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-632730022
https://github.com/psi4/psi4/issues/1877#issuecomment-632771603:325,Deployability,update,update,325,"My impression is that raw pointers are still fine (and widespread) for single module and single class usage, especially for picking data out of a larger structure to send to BLAS, so I wouldn't feel obliged to modernize those. But yeah, if today you'd type `std::vector` for a usage without a second thought, it'd be nice to update.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-632771603
https://github.com/psi4/psi4/issues/1877#issuecomment-656177024:19,Usability,clear,clear,19,"@fevangelista Am I clear to eliminate [`transform_tei_so_integrals`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/transform.cc#L145) and other unused integral transformation code I find in `psimrcc`? I'm currently migrating the responsibility of storing memory expenses to the wavefunction, and getting rid of this dead code means less code to be responsible for.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-656177024
https://github.com/psi4/psi4/issues/1878#issuecomment-623930205:213,Energy Efficiency,energy,energy,213,"FYI, although `Psi4 1.4a2.dev215 dfb86f5` is the latest mac developer version on conda. It is already 5 months old now. There have been improvements and fixes to the SAD guess compared to `v1.3.2`. Though the SAD energy here seems to be equal. ; That's the first difference that comes to my mind now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623930205
https://github.com/psi4/psi4/issues/1878#issuecomment-623943795:108,Energy Efficiency,Energy,Energy,108,"I checked your calculation just for fun with a two-week old snapshot. I get; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -1.10951830992328 -1.10952e+00 0.00000e+00 ; @RHF iter 1: -1.54125526228531 -4.31737e-01 0.00000e+00 DIIS; @RHF iter 2: -1.54125526228531 0.00000e+00 0.00000e+00 DIIS; Energy and wave function converged.; ```; which is the same solution as you reported with 1.3.2, only it converges in 2 iterations instead of 8. `guess huckel` and `guess core` also converge in 2 iterations, and they don't need the extra Fock build at the beginning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623943795
https://github.com/psi4/psi4/issues/1878#issuecomment-623943795:319,Energy Efficiency,Energy,Energy,319,"I checked your calculation just for fun with a two-week old snapshot. I get; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -1.10951830992328 -1.10952e+00 0.00000e+00 ; @RHF iter 1: -1.54125526228531 -4.31737e-01 0.00000e+00 DIIS; @RHF iter 2: -1.54125526228531 0.00000e+00 0.00000e+00 DIIS; Energy and wave function converged.; ```; which is the same solution as you reported with 1.3.2, only it converges in 2 iterations instead of 8. `guess huckel` and `guess core` also converge in 2 iterations, and they don't need the extra Fock build at the beginning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623943795
https://github.com/psi4/psi4/issues/1878#issuecomment-623964793:470,Deployability,install,installed,470,These are the lowest eigenvalues of the electronic Hessian showing you that you are not in a minimum. ; You can either search for a SCF guess that works or run it as a UHF calculation and use the `follow` keyword. Compiling on mac is fine but multi-threading might not work well. I also use a mac. You might want do this: http://psicode.org/psi4manual/master/conda.html?highlight=advisor#how-to-use-conda-to-compile-psi4-faster-and-easier; The `psi4-dev` package can be installed to your existing psi4 dev version from psi4/label/dev. It installs compilers and needed libraries.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623964793
https://github.com/psi4/psi4/issues/1878#issuecomment-623964793:538,Deployability,install,installs,538,These are the lowest eigenvalues of the electronic Hessian showing you that you are not in a minimum. ; You can either search for a SCF guess that works or run it as a UHF calculation and use the `follow` keyword. Compiling on mac is fine but multi-threading might not work well. I also use a mac. You might want do this: http://psicode.org/psi4manual/master/conda.html?highlight=advisor#how-to-use-conda-to-compile-psi4-faster-and-easier; The `psi4-dev` package can be installed to your existing psi4 dev version from psi4/label/dev. It installs compilers and needed libraries.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623964793
https://github.com/psi4/psi4/issues/1878#issuecomment-623964793:243,Performance,multi-thread,multi-threading,243,These are the lowest eigenvalues of the electronic Hessian showing you that you are not in a minimum. ; You can either search for a SCF guess that works or run it as a UHF calculation and use the `follow` keyword. Compiling on mac is fine but multi-threading might not work well. I also use a mac. You might want do this: http://psicode.org/psi4manual/master/conda.html?highlight=advisor#how-to-use-conda-to-compile-psi4-faster-and-easier; The `psi4-dev` package can be installed to your existing psi4 dev version from psi4/label/dev. It installs compilers and needed libraries.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623964793
https://github.com/psi4/psi4/issues/1878#issuecomment-623974761:131,Energy Efficiency,Energy,Energy,131,"Ok, that was an interesting problem for this version of psi4 ! I now got the very last one and things work fine again:. ```; Total Energy Delta E RMS |[F,P]| ; ; @RHF iter SAD: -1.10951830992328 -1.10952e+00 0.00000e+00 ; @RHF iter 1: -1.42989087630227 -3.20373e-01 2.63944e-02 DIIS; @RHF iter 2: -1.48669699030023 -5.68061e-02 1.49695e-02 DIIS; @RHF iter 3: -1.52194618795963 -3.52492e-02 1.34968e-02 DIIS; @RHF iter 4: -1.53906330108634 -1.71171e-02 5.44189e-03 DIIS; @RHF iter 5: -1.54087887085299 -1.81557e-03 2.40827e-03 DIIS; @RHF iter 6: -1.54117109557693 -2.92225e-04 1.16803e-03 DIIS; @RHF iter 7: -1.54123744472211 -6.63491e-05 5.44231e-04 DIIS; @RHF iter 8: -1.54125234553558 -1.49008e-05 2.21654e-04 DIIS; @RHF iter 9: -1.54125494714724 -2.60161e-06 7.30916e-05 DIIS; @RHF iter 10: -1.54125524201882 -2.94872e-07 1.85602e-05 DIIS; @RHF iter 11: -1.54125526151990 -1.95011e-08 3.60860e-06 DIIS; @RHF iter 12: -1.54125526228451 -7.64613e-10 1.18266e-07 DIIS; Energy and wave function converged. ; ; SO Integrals not on disk. Computing...done.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Lowest singlet (RHF->RHF) stability eigenvalues:-; A 0.118946 A 0.152195 A 0.527951 A 0.790910 ; ; Lowest triplet (RHF->UHF) stability eigenvalues:-; A -0.429230 A -0.408687 A 0.114615 A 0.215652 ; ```. Thank you for your help ! I'll close the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623974761
https://github.com/psi4/psi4/issues/1878#issuecomment-623974761:969,Energy Efficiency,Energy,Energy,969,"Ok, that was an interesting problem for this version of psi4 ! I now got the very last one and things work fine again:. ```; Total Energy Delta E RMS |[F,P]| ; ; @RHF iter SAD: -1.10951830992328 -1.10952e+00 0.00000e+00 ; @RHF iter 1: -1.42989087630227 -3.20373e-01 2.63944e-02 DIIS; @RHF iter 2: -1.48669699030023 -5.68061e-02 1.49695e-02 DIIS; @RHF iter 3: -1.52194618795963 -3.52492e-02 1.34968e-02 DIIS; @RHF iter 4: -1.53906330108634 -1.71171e-02 5.44189e-03 DIIS; @RHF iter 5: -1.54087887085299 -1.81557e-03 2.40827e-03 DIIS; @RHF iter 6: -1.54117109557693 -2.92225e-04 1.16803e-03 DIIS; @RHF iter 7: -1.54123744472211 -6.63491e-05 5.44231e-04 DIIS; @RHF iter 8: -1.54125234553558 -1.49008e-05 2.21654e-04 DIIS; @RHF iter 9: -1.54125494714724 -2.60161e-06 7.30916e-05 DIIS; @RHF iter 10: -1.54125524201882 -2.94872e-07 1.85602e-05 DIIS; @RHF iter 11: -1.54125526151990 -1.95011e-08 3.60860e-06 DIIS; @RHF iter 12: -1.54125526228451 -7.64613e-10 1.18266e-07 DIIS; Energy and wave function converged. ; ; SO Integrals not on disk. Computing...done.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Lowest singlet (RHF->RHF) stability eigenvalues:-; A 0.118946 A 0.152195 A 0.527951 A 0.790910 ; ; Lowest triplet (RHF->UHF) stability eigenvalues:-; A -0.429230 A -0.408687 A 0.114615 A 0.215652 ; ```. Thank you for your help ! I'll close the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623974761
https://github.com/psi4/psi4/issues/1881#issuecomment-625214232:140,Energy Efficiency,charge,charge,140,"Could you edit your post to have the right inputs? Right now both cases specify `angstrom` (your zipped inputs are different). > The atomic charge is specified in atomic units, and the coordinates always use the same units as the geometry specification in the regular QM region. Which means your charge sits at different positions in case1/2 since in both you use `x-coordinate = 1.0`. Unless I misunderstand the problem at hand.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625214232
https://github.com/psi4/psi4/issues/1881#issuecomment-625214232:296,Energy Efficiency,charge,charge,296,"Could you edit your post to have the right inputs? Right now both cases specify `angstrom` (your zipped inputs are different). > The atomic charge is specified in atomic units, and the coordinates always use the same units as the geometry specification in the regular QM region. Which means your charge sits at different positions in case1/2 since in both you use `x-coordinate = 1.0`. Unless I misunderstand the problem at hand.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625214232
https://github.com/psi4/psi4/issues/1881#issuecomment-625234647:143,Energy Efficiency,charge,charge,143,@hokru Apologies for the copy-paste mistake. I fixed it. Could it be that the unit in the molecule block also affects the unit of the external charge coordinates in the input and in the output (despite the fact that the output mentions a.u. in both cases)? That could explain the differences.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625234647
https://github.com/psi4/psi4/issues/1881#issuecomment-625236495:52,Energy Efficiency,charge,charge,52,No worries. I quoted the manual above. The external charge unit coordinates should change according to the coordinates in the input yes. . The output seems inconsistent to the manual statement.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625236495
https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:382,Energy Efficiency,energy,energy,382,"Ok, this was changed in Nov 2019 in #1351 (unmerged) to ""extern object units are bohr, not whatever the Molecule was."" And in that branch Mol units ang/bohr + extern units bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total En",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115
https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:597,Energy Efficiency,charge,charge,597,"Ok, this was changed in Nov 2019 in #1351 (unmerged) to ""extern object units are bohr, not whatever the Molecule was."" And in that branch Mol units ang/bohr + extern units bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total En",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115
https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:655,Energy Efficiency,charge,charge,655,"Ok, this was changed in Nov 2019 in #1351 (unmerged) to ""extern object units are bohr, not whatever the Molecule was."" And in that branch Mol units ang/bohr + extern units bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total En",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115
https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:1580,Energy Efficiency,Energy,Energy,1580,"ts bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total Energy = -1.1204277034422847; ```. Bad news is current master does indeed seem wrong. Since the DDD fix is waiting, can you work with your case 2 setup in master for now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115
https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:1628,Energy Efficiency,Energy,Energy,1628,"ts bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total Energy = -1.1204277034422847; ```. Bad news is current master does indeed seem wrong. Since the DDD fix is waiting, can you work with your case 2 setup in master for now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115
https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:1692,Energy Efficiency,Energy,Energy,1692,"ts bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total Energy = -1.1204277034422847; ```. Bad news is current master does indeed seem wrong. Since the DDD fix is waiting, can you work with your case 2 setup in master for now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115
https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:1736,Energy Efficiency,Energy,Energy,1736,"ts bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total Energy = -1.1204277034422847; ```. Bad news is current master does indeed seem wrong. Since the DDD fix is waiting, can you work with your case 2 setup in master for now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115
https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:1781,Energy Efficiency,Energy,Energy,1781,"ts bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total Energy = -1.1204277034422847; ```. Bad news is current master does indeed seem wrong. Since the DDD fix is waiting, can you work with your case 2 setup in master for now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115
https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:1818,Energy Efficiency,Energy,Energy,1818,"ts bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total Energy = -1.1204277034422847; ```. Bad news is current master does indeed seem wrong. Since the DDD fix is waiting, can you work with your case 2 setup in master for now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115
https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:1873,Energy Efficiency,Energy,Energy,1873,"ts bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total Energy = -1.1204277034422847; ```. Bad news is current master does indeed seem wrong. Since the DDD fix is waiting, can you work with your case 2 setup in master for now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115
https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:1917,Energy Efficiency,Energy,Energy,1917,"ts bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total Energy = -1.1204277034422847; ```. Bad news is current master does indeed seem wrong. Since the DDD fix is waiting, can you work with your case 2 setup in master for now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115
https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:1962,Energy Efficiency,Energy,Energy,1962,"ts bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total Energy = -1.1204277034422847; ```. Bad news is current master does indeed seem wrong. Since the DDD fix is waiting, can you work with your case 2 setup in master for now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115
https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:1999,Energy Efficiency,Energy,Energy,1999,"ts bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total Energy = -1.1204277034422847; ```. Bad news is current master does indeed seem wrong. Since the DDD fix is waiting, can you work with your case 2 setup in master for now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115
https://github.com/psi4/psi4/issues/1881#issuecomment-625338040:121,Testability,test,test,121,"Thanks for all the comments. My confusion is solved, which is definitely a good pragmatic solution since this was just a test for prototyping. It is not an urgent issue and if anyone else runs into this, it is easy to find the workaround here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625338040
https://github.com/psi4/psi4/issues/1881#issuecomment-625550371:64,Energy Efficiency,charge,charges,64,"Just to clarify, is the long-term plan to use Bohr for external charges irrespective of the molecule units? I'd rather have both specified in the same units to avoid confusion and to make input creation easy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625550371
https://github.com/psi4/psi4/issues/1881#issuecomment-625550371:160,Safety,avoid,avoid,160,"Just to clarify, is the long-term plan to use Bohr for external charges irrespective of the molecule units? I'd rather have both specified in the same units to avoid confusion and to make input creation easy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625550371
https://github.com/psi4/psi4/issues/1881#issuecomment-625580521:256,Energy Efficiency,charge,charges,256,"@fevangelista correct, future plan is to use Bohr. An ang input example is https://github.com/psi4/psi4/pull/1351/files#diff-87670b13951f7da58a7e608cbf6309a1 . I did try to keep the current tie-units-to-Mol pattern, but it didn't work easily. And with the charges passed in as argument, it seemed disconnected from Mol. Too objectionable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625580521
https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:625,Energy Efficiency,charge,charges,625,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314
https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:749,Energy Efficiency,charge,charges,749,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314
https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:994,Energy Efficiency,charge,charges,994,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314
https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:1465,Integrability,interface,interface,1465,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314
https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:1568,Safety,avoid,avoid,1568,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314
https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:162,Usability,simpl,simple,162,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314
https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:309,Usability,simpl,simple,309,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314
https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:844,Usability,simpl,simple,844,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314
https://github.com/psi4/psi4/issues/1881#issuecomment-625885345:191,Availability,down,down,191,"@loriab and @tovrstra: Can we find a compromise where we keep the interface consistent but make sure that the inner workings of C++ classes is all in a.u.? I agree that having the logic deep down the code is not the right way to go. I would keep the current automatic conversion for several reasons:; 1. **Continuity**. People are already using it, so switching could create some challenges since one would have to be careful when setting up computations for different version of psi4; 1. **Potential confusion**. The potential for confusing bohr/ang with the external field is greater than that of confusing bohr/ang in the molecule geometry. For molecules if one confuses bohr vs. ang you easily run into convergence problems or get nonsensical results. But for the external field corrections it's not obvious, unless one does some testing. We, for example, could entirely miss this change in our computations.; 1. **Practicality**. We use the external charges and in our typical workflow we prepare a geometry for a lattice of atoms and then separate the QM from the MM region. It's just simpler to keep everything consistent in one set of units. I have to say, that from the user perspective, the current way we handle the input is not ideal. I am not familiar with QMMM codes, but what would be the most convenient input format is something like we have for the molecular fragments:; ```; molecule {; C ; O ; <some delimiter>; Q X1 Y1 Z1 CHARGE1; Q X2 Y2 Z2 CHARGE2; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345
https://github.com/psi4/psi4/issues/1881#issuecomment-625885345:955,Energy Efficiency,charge,charges,955,"@loriab and @tovrstra: Can we find a compromise where we keep the interface consistent but make sure that the inner workings of C++ classes is all in a.u.? I agree that having the logic deep down the code is not the right way to go. I would keep the current automatic conversion for several reasons:; 1. **Continuity**. People are already using it, so switching could create some challenges since one would have to be careful when setting up computations for different version of psi4; 1. **Potential confusion**. The potential for confusing bohr/ang with the external field is greater than that of confusing bohr/ang in the molecule geometry. For molecules if one confuses bohr vs. ang you easily run into convergence problems or get nonsensical results. But for the external field corrections it's not obvious, unless one does some testing. We, for example, could entirely miss this change in our computations.; 1. **Practicality**. We use the external charges and in our typical workflow we prepare a geometry for a lattice of atoms and then separate the QM from the MM region. It's just simpler to keep everything consistent in one set of units. I have to say, that from the user perspective, the current way we handle the input is not ideal. I am not familiar with QMMM codes, but what would be the most convenient input format is something like we have for the molecular fragments:; ```; molecule {; C ; O ; <some delimiter>; Q X1 Y1 Z1 CHARGE1; Q X2 Y2 Z2 CHARGE2; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345
https://github.com/psi4/psi4/issues/1881#issuecomment-625885345:66,Integrability,interface,interface,66,"@loriab and @tovrstra: Can we find a compromise where we keep the interface consistent but make sure that the inner workings of C++ classes is all in a.u.? I agree that having the logic deep down the code is not the right way to go. I would keep the current automatic conversion for several reasons:; 1. **Continuity**. People are already using it, so switching could create some challenges since one would have to be careful when setting up computations for different version of psi4; 1. **Potential confusion**. The potential for confusing bohr/ang with the external field is greater than that of confusing bohr/ang in the molecule geometry. For molecules if one confuses bohr vs. ang you easily run into convergence problems or get nonsensical results. But for the external field corrections it's not obvious, unless one does some testing. We, for example, could entirely miss this change in our computations.; 1. **Practicality**. We use the external charges and in our typical workflow we prepare a geometry for a lattice of atoms and then separate the QM from the MM region. It's just simpler to keep everything consistent in one set of units. I have to say, that from the user perspective, the current way we handle the input is not ideal. I am not familiar with QMMM codes, but what would be the most convenient input format is something like we have for the molecular fragments:; ```; molecule {; C ; O ; <some delimiter>; Q X1 Y1 Z1 CHARGE1; Q X2 Y2 Z2 CHARGE2; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345
https://github.com/psi4/psi4/issues/1881#issuecomment-625885345:180,Testability,log,logic,180,"@loriab and @tovrstra: Can we find a compromise where we keep the interface consistent but make sure that the inner workings of C++ classes is all in a.u.? I agree that having the logic deep down the code is not the right way to go. I would keep the current automatic conversion for several reasons:; 1. **Continuity**. People are already using it, so switching could create some challenges since one would have to be careful when setting up computations for different version of psi4; 1. **Potential confusion**. The potential for confusing bohr/ang with the external field is greater than that of confusing bohr/ang in the molecule geometry. For molecules if one confuses bohr vs. ang you easily run into convergence problems or get nonsensical results. But for the external field corrections it's not obvious, unless one does some testing. We, for example, could entirely miss this change in our computations.; 1. **Practicality**. We use the external charges and in our typical workflow we prepare a geometry for a lattice of atoms and then separate the QM from the MM region. It's just simpler to keep everything consistent in one set of units. I have to say, that from the user perspective, the current way we handle the input is not ideal. I am not familiar with QMMM codes, but what would be the most convenient input format is something like we have for the molecular fragments:; ```; molecule {; C ; O ; <some delimiter>; Q X1 Y1 Z1 CHARGE1; Q X2 Y2 Z2 CHARGE2; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345
https://github.com/psi4/psi4/issues/1881#issuecomment-625885345:834,Testability,test,testing,834,"@loriab and @tovrstra: Can we find a compromise where we keep the interface consistent but make sure that the inner workings of C++ classes is all in a.u.? I agree that having the logic deep down the code is not the right way to go. I would keep the current automatic conversion for several reasons:; 1. **Continuity**. People are already using it, so switching could create some challenges since one would have to be careful when setting up computations for different version of psi4; 1. **Potential confusion**. The potential for confusing bohr/ang with the external field is greater than that of confusing bohr/ang in the molecule geometry. For molecules if one confuses bohr vs. ang you easily run into convergence problems or get nonsensical results. But for the external field corrections it's not obvious, unless one does some testing. We, for example, could entirely miss this change in our computations.; 1. **Practicality**. We use the external charges and in our typical workflow we prepare a geometry for a lattice of atoms and then separate the QM from the MM region. It's just simpler to keep everything consistent in one set of units. I have to say, that from the user perspective, the current way we handle the input is not ideal. I am not familiar with QMMM codes, but what would be the most convenient input format is something like we have for the molecular fragments:; ```; molecule {; C ; O ; <some delimiter>; Q X1 Y1 Z1 CHARGE1; Q X2 Y2 Z2 CHARGE2; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345
https://github.com/psi4/psi4/issues/1881#issuecomment-625885345:1091,Usability,simpl,simpler,1091,"@loriab and @tovrstra: Can we find a compromise where we keep the interface consistent but make sure that the inner workings of C++ classes is all in a.u.? I agree that having the logic deep down the code is not the right way to go. I would keep the current automatic conversion for several reasons:; 1. **Continuity**. People are already using it, so switching could create some challenges since one would have to be careful when setting up computations for different version of psi4; 1. **Potential confusion**. The potential for confusing bohr/ang with the external field is greater than that of confusing bohr/ang in the molecule geometry. For molecules if one confuses bohr vs. ang you easily run into convergence problems or get nonsensical results. But for the external field corrections it's not obvious, unless one does some testing. We, for example, could entirely miss this change in our computations.; 1. **Practicality**. We use the external charges and in our typical workflow we prepare a geometry for a lattice of atoms and then separate the QM from the MM region. It's just simpler to keep everything consistent in one set of units. I have to say, that from the user perspective, the current way we handle the input is not ideal. I am not familiar with QMMM codes, but what would be the most convenient input format is something like we have for the molecular fragments:; ```; molecule {; C ; O ; <some delimiter>; Q X1 Y1 Z1 CHARGE1; Q X2 Y2 Z2 CHARGE2; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345
https://github.com/psi4/psi4/issues/1881#issuecomment-625891857:106,Energy Efficiency,charge,charges,106,"For QM/MM, since you have many thousands of points, most QM programs use a simple external file for point charges so one does not have to send everything through the slower-but-smarter ""molecule recognition"" machinery. Besides, these external files are easier to write by the MM program interface as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625891857
https://github.com/psi4/psi4/issues/1881#issuecomment-625891857:287,Integrability,interface,interface,287,"For QM/MM, since you have many thousands of points, most QM programs use a simple external file for point charges so one does not have to send everything through the slower-but-smarter ""molecule recognition"" machinery. Besides, these external files are easier to write by the MM program interface as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625891857
https://github.com/psi4/psi4/issues/1881#issuecomment-625891857:75,Usability,simpl,simple,75,"For QM/MM, since you have many thousands of points, most QM programs use a simple external file for point charges so one does not have to send everything through the slower-but-smarter ""molecule recognition"" machinery. Besides, these external files are easier to write by the MM program interface as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625891857
https://github.com/psi4/psi4/issues/1881#issuecomment-625894875:121,Deployability,Upgrade,Upgrade,121,"Because of the switch from `QMMM()` obj to `embedded_charges` arg (req'd for DDD), all current inputs will break anyway. Upgrade guidance is already in place: https://github.com/psi4/psi4/pull/1351/commits/232d0378f893d619ecf16d95fc59281e948fbb23#diff-6c69f4c34c8ea7d7015fd7abef2e5a88R123 . Since reason can't guide one to a sensible default, I'm against the units of Mol influencing anything outside the `molecule {...}` block. I agree that the `Q X1 Y1 Z1 CHARGE1` is appealing, but I think we want to address this as a whole with all the multipoles. Andy, Daniel, and I got started on this for a day last September, then L2 took over. Schema started over at https://github.com/MolSSI/QCElemental/pull/133 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625894875
https://github.com/psi4/psi4/issues/1881#issuecomment-625894875:129,Usability,guid,guidance,129,"Because of the switch from `QMMM()` obj to `embedded_charges` arg (req'd for DDD), all current inputs will break anyway. Upgrade guidance is already in place: https://github.com/psi4/psi4/pull/1351/commits/232d0378f893d619ecf16d95fc59281e948fbb23#diff-6c69f4c34c8ea7d7015fd7abef2e5a88R123 . Since reason can't guide one to a sensible default, I'm against the units of Mol influencing anything outside the `molecule {...}` block. I agree that the `Q X1 Y1 Z1 CHARGE1` is appealing, but I think we want to address this as a whole with all the multipoles. Andy, Daniel, and I got started on this for a day last September, then L2 took over. Schema started over at https://github.com/MolSSI/QCElemental/pull/133 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625894875
https://github.com/psi4/psi4/issues/1881#issuecomment-625894875:310,Usability,guid,guide,310,"Because of the switch from `QMMM()` obj to `embedded_charges` arg (req'd for DDD), all current inputs will break anyway. Upgrade guidance is already in place: https://github.com/psi4/psi4/pull/1351/commits/232d0378f893d619ecf16d95fc59281e948fbb23#diff-6c69f4c34c8ea7d7015fd7abef2e5a88R123 . Since reason can't guide one to a sensible default, I'm against the units of Mol influencing anything outside the `molecule {...}` block. I agree that the `Q X1 Y1 Z1 CHARGE1` is appealing, but I think we want to address this as a whole with all the multipoles. Andy, Daniel, and I got started on this for a day last September, then L2 took over. Schema started over at https://github.com/MolSSI/QCElemental/pull/133 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625894875
https://github.com/psi4/psi4/issues/1881#issuecomment-625897093:37,Energy Efficiency,charge,charge,37,"You mean a standard format for point charge files for QMMM? Not that I know of. ; I know the AMBER QM/MM interface a bit, and there are all kinds of formats for different QM programs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625897093
https://github.com/psi4/psi4/issues/1881#issuecomment-625897093:105,Integrability,interface,interface,105,"You mean a standard format for point charge files for QMMM? Not that I know of. ; I know the AMBER QM/MM interface a bit, and there are all kinds of formats for different QM programs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625897093
https://github.com/psi4/psi4/pull/1884#issuecomment-625927796:30,Availability,reliab,reliable,30,`wfn.name` seems not the most reliable identifier. Investigating.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-625927796
https://github.com/psi4/psi4/pull/1884#issuecomment-626157422:188,Testability,test,testing,188,Added the SCF density recomputation. `grad('ccsd')` (via `ccenergy`) now gives the correct SCF densities in the FCHK file. Code not yet cleaned up. I also want to add some form of minimal testing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-626157422
https://github.com/psi4/psi4/pull/1884#issuecomment-626378160:36,Deployability,patch,patch,36,"Uff, I don't think I will manage to patch up the writer to treat the symptoms from how various modules set the wavefunction data when running `gradient`. One way forward would be to disallow certain module/method combinations or print warnings, which is tricky as `QC_MODULE` is not rigorously set either.; Currently I went with some warnings since users will want DF-MP2 densities from `dfmp2`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-626378160
https://github.com/psi4/psi4/pull/1884#issuecomment-627286675:163,Usability,feedback,feedback,163,"The scope of the PR changed. Took longer than expected, but hopefully does help to prevent users from getting a wrong FCHK file. Ready for a first round of review/feedback, i think. I will still need to run auto-formatting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-627286675
https://github.com/psi4/psi4/pull/1884#issuecomment-658779083:64,Deployability,patch,patch,64,Thanks for reminding me.; Now freshly rebased and with a python-patch for DCT. UHF-CCSD re-enabled in pytest as well. ; Ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-658779083
https://github.com/psi4/psi4/pull/1884#issuecomment-661313439:78,Availability,Ping,Ping,78,"Between my last three PRs, there shouldn't be a need for these strange hacks. Ping me if you encounter anything strange in the densities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-661313439
https://github.com/psi4/psi4/pull/1884#issuecomment-670485596:148,Deployability,update,updated,148,"I think this is again in a good shape and also writes now the correct orbital coeff/energies in the FCHK sense, meaning SCF ones.; Please check the updated main post. I am not 100% sure what I did with the `Vector.copy()` is fully correct, please have a close look. It works for my use case.; (https://github.com/psi4/psi4/pull/1884/files#diff-ce944be82d781507cd2bfa56fdb26af1R323)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670485596
https://github.com/psi4/psi4/pull/1884#issuecomment-670512939:216,Availability,checkpoint,checkpoint,216,"> I think this is again in a good shape and also writes now the correct orbital coeff/energies in the FCHK sense, meaning SCF ones.; > Please check the updated main post. What do you mean? If you run OO-CC, does the checkpoint file contain the original HF orbitals, or the OO-CC orbitals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670512939
https://github.com/psi4/psi4/pull/1884#issuecomment-670512939:152,Deployability,update,updated,152,"> I think this is again in a good shape and also writes now the correct orbital coeff/energies in the FCHK sense, meaning SCF ones.; > Please check the updated main post. What do you mean? If you run OO-CC, does the checkpoint file contain the original HF orbitals, or the OO-CC orbitals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670512939
https://github.com/psi4/psi4/pull/1884#issuecomment-670518326:129,Availability,checkpoint,checkpoint,129,"There is no FCHK standard - the orbitals should be whatever the method gives. Even in TCTSNBN you can modify the orbitals in the checkpoint file e.g. with `Pop=SaveNBOs`, `Pop=SaveNLMOs` or `Pop=SaveMixed`...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670518326
https://github.com/psi4/psi4/pull/1884#issuecomment-670534363:220,Deployability,toggle,toggle,220,"Warning that orbital energies then become ambiguous as well. Do you want the ""orbital energies"" at the correlated level of theory or the reference?. If there's no standard either way, then it may be best to let the user toggle which one they want in this corner case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670534363
https://github.com/psi4/psi4/pull/1884#issuecomment-670696518:228,Deployability,toggle,toggle,228,"> Warning that orbital energies then become ambiguous as well. Do you want the ""orbital energies"" at the correlated level of theory or the reference?; > ; > If there's no standard either way, then it may be best to let the user toggle which one they want in this corner case. I don't know what behavior is expected; energy expectation value might be one option but there might be different definitions for the Fock operator. Most of all, you can't reorder the orbitals...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670696518
https://github.com/psi4/psi4/pull/1884#issuecomment-670696518:316,Energy Efficiency,energy,energy,316,"> Warning that orbital energies then become ambiguous as well. Do you want the ""orbital energies"" at the correlated level of theory or the reference?; > ; > If there's no standard either way, then it may be best to let the user toggle which one they want in this corner case. I don't know what behavior is expected; energy expectation value might be one option but there might be different definitions for the Fock operator. Most of all, you can't reorder the orbitals...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670696518
https://github.com/psi4/psi4/pull/1884#issuecomment-671863488:228,Deployability,toggle,toggle,228,"> > Warning that orbital energies then become ambiguous as well. Do you want the ""orbital energies"" at the correlated level of theory or the reference?; > > If there's no standard either way, then it may be best to let the user toggle which one they want in this corner case.; > ; > I don't know what behavior is expected; energy expectation value might be one option but there might be different definitions for the Fock operator. Most of all, you can't reorder the orbitals... This seems like a difficult issue to get right.; At this point I'd prefer to give a warning in the manual and output about the orbital energy field and print whatever the respective theory module puts there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-671863488
https://github.com/psi4/psi4/pull/1884#issuecomment-671863488:323,Energy Efficiency,energy,energy,323,"> > Warning that orbital energies then become ambiguous as well. Do you want the ""orbital energies"" at the correlated level of theory or the reference?; > > If there's no standard either way, then it may be best to let the user toggle which one they want in this corner case.; > ; > I don't know what behavior is expected; energy expectation value might be one option but there might be different definitions for the Fock operator. Most of all, you can't reorder the orbitals... This seems like a difficult issue to get right.; At this point I'd prefer to give a warning in the manual and output about the orbital energy field and print whatever the respective theory module puts there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-671863488
https://github.com/psi4/psi4/pull/1884#issuecomment-671863488:614,Energy Efficiency,energy,energy,614,"> > Warning that orbital energies then become ambiguous as well. Do you want the ""orbital energies"" at the correlated level of theory or the reference?; > > If there's no standard either way, then it may be best to let the user toggle which one they want in this corner case.; > ; > I don't know what behavior is expected; energy expectation value might be one option but there might be different definitions for the Fock operator. Most of all, you can't reorder the orbitals... This seems like a difficult issue to get right.; At this point I'd prefer to give a warning in the manual and output about the orbital energy field and print whatever the respective theory module puts there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-671863488
https://github.com/psi4/psi4/pull/1885#issuecomment-626184715:46,Testability,test,test,46,"I think this is mostly good to go, I'll add a test or two soon. I would like a little feedback on if there's a better way to store the excitation energies. I kind of just throw them in Wavefunction one at a time. I'm sure all of that will change anyway with @robertodr 's changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626184715
https://github.com/psi4/psi4/pull/1885#issuecomment-626184715:86,Usability,feedback,feedback,86,"I think this is mostly good to go, I'll add a test or two soon. I would like a little feedback on if there's a better way to store the excitation energies. I kind of just throw them in Wavefunction one at a time. I'm sure all of that will change anyway with @robertodr 's changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626184715
https://github.com/psi4/psi4/pull/1885#issuecomment-626327302:139,Energy Efficiency,energy,energy,139,"I was originally thinking the interface would be more like:; ```python; tddft(""B3LYP/cc-pVDZ""); ```; or ; ```python; ref_e, ref_wfn = psi4.energy(""B3LYP/cc-pVDZ"", return_wfn=True); tddft(ref_wfn); ```. I would be curious as to others thoughts on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626327302
https://github.com/psi4/psi4/pull/1885#issuecomment-626327302:30,Integrability,interface,interface,30,"I was originally thinking the interface would be more like:; ```python; tddft(""B3LYP/cc-pVDZ""); ```; or ; ```python; ref_e, ref_wfn = psi4.energy(""B3LYP/cc-pVDZ"", return_wfn=True); tddft(ref_wfn); ```. I would be curious as to others thoughts on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626327302
https://github.com/psi4/psi4/pull/1885#issuecomment-626334781:28,Energy Efficiency,energy,energy,28,"I'd prefer sticking to the `energy` call though I can see the appeal of using `tddft(ref_wfn)`. `energy(""TD-B3LYP/c-pVDZ"")` and `energy(""TDA-B3LYP/cc-pVDZ"")` would be cool.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626334781
https://github.com/psi4/psi4/pull/1885#issuecomment-626334781:97,Energy Efficiency,energy,energy,97,"I'd prefer sticking to the `energy` call though I can see the appeal of using `tddft(ref_wfn)`. `energy(""TD-B3LYP/c-pVDZ"")` and `energy(""TDA-B3LYP/cc-pVDZ"")` would be cool.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626334781
https://github.com/psi4/psi4/pull/1885#issuecomment-626334781:129,Energy Efficiency,energy,energy,129,"I'd prefer sticking to the `energy` call though I can see the appeal of using `tddft(ref_wfn)`. `energy(""TD-B3LYP/c-pVDZ"")` and `energy(""TDA-B3LYP/cc-pVDZ"")` would be cool.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626334781
https://github.com/psi4/psi4/pull/1885#issuecomment-626346287:147,Energy Efficiency,energy,energy,147,"I'd prefer @dgasmith option. As for storage of excitations, I was thinking to modify the return value of the solver to a data structure collecting energy, response vectors, and transition moments for each excitation. `Wavefunction` could hold a dictionary of these, with labeling by irrep (`f""STATE {n} in IRREP {m}""`) or by energy (`f""STATE {n}""`) I think the latter could be more intuitive.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626346287
https://github.com/psi4/psi4/pull/1885#issuecomment-626346287:325,Energy Efficiency,energy,energy,325,"I'd prefer @dgasmith option. As for storage of excitations, I was thinking to modify the return value of the solver to a data structure collecting energy, response vectors, and transition moments for each excitation. `Wavefunction` could hold a dictionary of these, with labeling by irrep (`f""STATE {n} in IRREP {m}""`) or by energy (`f""STATE {n}""`) I think the latter could be more intuitive.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626346287
https://github.com/psi4/psi4/pull/1885#issuecomment-626346287:382,Usability,intuit,intuitive,382,"I'd prefer @dgasmith option. As for storage of excitations, I was thinking to modify the return value of the solver to a data structure collecting energy, response vectors, and transition moments for each excitation. `Wavefunction` could hold a dictionary of these, with labeling by irrep (`f""STATE {n} in IRREP {m}""`) or by energy (`f""STATE {n}""`) I think the latter could be more intuitive.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626346287
https://github.com/psi4/psi4/pull/1885#issuecomment-626713199:7,Testability,test,tests,7,"As for tests, you can have a look at `tests/pytests/test_tdscf_excitations.py` and pick a couple of the combinations for which AJ already computed reference values.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626713199
https://github.com/psi4/psi4/pull/1885#issuecomment-626713199:38,Testability,test,tests,38,"As for tests, you can have a look at `tests/pytests/test_tdscf_excitations.py` and pick a couple of the combinations for which AJ already computed reference values.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626713199
https://github.com/psi4/psi4/pull/1885#issuecomment-626759803:56,Energy Efficiency,energy,energy,56,"Great thanks! I'll add the tests right away. . And for `energy()` vs `tdscf()`, I don't feel too strongly either way. I like the simplicity of `energy()`, particularly since tdscf is only returning energies for now. `tdscf()` may be the way to go eventually since it is more flexible. One option is to have both work, easy to do since `energy()` is just calling a `tdscf()` function in `run_scf`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803
https://github.com/psi4/psi4/pull/1885#issuecomment-626759803:144,Energy Efficiency,energy,energy,144,"Great thanks! I'll add the tests right away. . And for `energy()` vs `tdscf()`, I don't feel too strongly either way. I like the simplicity of `energy()`, particularly since tdscf is only returning energies for now. `tdscf()` may be the way to go eventually since it is more flexible. One option is to have both work, easy to do since `energy()` is just calling a `tdscf()` function in `run_scf`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803
https://github.com/psi4/psi4/pull/1885#issuecomment-626759803:336,Energy Efficiency,energy,energy,336,"Great thanks! I'll add the tests right away. . And for `energy()` vs `tdscf()`, I don't feel too strongly either way. I like the simplicity of `energy()`, particularly since tdscf is only returning energies for now. `tdscf()` may be the way to go eventually since it is more flexible. One option is to have both work, easy to do since `energy()` is just calling a `tdscf()` function in `run_scf`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803
https://github.com/psi4/psi4/pull/1885#issuecomment-626759803:275,Modifiability,flexible,flexible,275,"Great thanks! I'll add the tests right away. . And for `energy()` vs `tdscf()`, I don't feel too strongly either way. I like the simplicity of `energy()`, particularly since tdscf is only returning energies for now. `tdscf()` may be the way to go eventually since it is more flexible. One option is to have both work, easy to do since `energy()` is just calling a `tdscf()` function in `run_scf`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803
https://github.com/psi4/psi4/pull/1885#issuecomment-626759803:27,Testability,test,tests,27,"Great thanks! I'll add the tests right away. . And for `energy()` vs `tdscf()`, I don't feel too strongly either way. I like the simplicity of `energy()`, particularly since tdscf is only returning energies for now. `tdscf()` may be the way to go eventually since it is more flexible. One option is to have both work, easy to do since `energy()` is just calling a `tdscf()` function in `run_scf`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803
https://github.com/psi4/psi4/pull/1885#issuecomment-626759803:129,Usability,simpl,simplicity,129,"Great thanks! I'll add the tests right away. . And for `energy()` vs `tdscf()`, I don't feel too strongly either way. I like the simplicity of `energy()`, particularly since tdscf is only returning energies for now. `tdscf()` may be the way to go eventually since it is more flexible. One option is to have both work, easy to do since `energy()` is just calling a `tdscf()` function in `run_scf`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803
https://github.com/psi4/psi4/pull/1885#issuecomment-628319430:288,Modifiability,variab,variable,288,This pull request **introduces 1 alert** when merging a4b23a383e0bcd37c11ff72179c5b61ce8901240 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-fb08fd9a133f35b5b091c952cc74b61aaf9cecbc). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-628319430
https://github.com/psi4/psi4/pull/1885#issuecomment-628941877:289,Modifiability,variab,variable,289,This pull request **introduces 2 alerts** when merging 9a5829a54f6430372a5dec58fc132f359f214c1d into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ad75de685a2ba03f144f640d03db617b0431da4e). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-628941877
https://github.com/psi4/psi4/pull/1885#issuecomment-631811738:289,Modifiability,variab,variable,289,This pull request **introduces 2 alerts** when merging 2b6259a36ec2951ffffaa15e2bcc1fee6d22823b into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-fb98758eedce030b6cda905e8e1e1d11543b6c39). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-631811738
https://github.com/psi4/psi4/pull/1885#issuecomment-641549862:102,Testability,test,tests,102,I think you'll need to rebase @jeffschriber to get the code that goes with the latest cppe package so tests can pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-641549862
https://github.com/psi4/psi4/pull/1885#issuecomment-641645864:289,Modifiability,variab,variable,289,This pull request **introduces 2 alerts** when merging 0396e5257e382baab1f21d9bcd6546e9fb885746 into 2938fc2bba0678b9eb0648733e5bf70ecb7f802e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-35f8b01b00c2f77a9e8ea7b61224b53a71387c72). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-641645864
https://github.com/psi4/psi4/pull/1885#issuecomment-642392742:289,Modifiability,variab,variable,289,This pull request **introduces 2 alerts** when merging c4b3d0aca90660a8b3cf72d57fa42d09afd02ed5 into 741f46ea0bf7a3591988040538589eecaa8f0ab8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6bea4a183024546bf0bb7f8e21d19b32df083b14). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-642392742
https://github.com/psi4/psi4/issues/1886#issuecomment-626349268:6,Usability,clear,clear,6,"To be clear: while a special field for natural orbitals is an option, it's not obvious to me that it would be worth making. A user who wants the natural orbitals can just compute them from the OPDM. That's what I've been doing in `detci`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1886#issuecomment-626349268
https://github.com/psi4/psi4/issues/1890#issuecomment-627947384:40,Modifiability,extend,extended,40,"Those are the troubling lines for sure, extended them should work as long as the CI Vector is present (`n < num_roots`). I mimicked the transition behavior from @cdsgroup original code. Might get him to weigh in here on the API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1890#issuecomment-627947384
https://github.com/psi4/psi4/issues/1890#issuecomment-632034182:0,Availability,Ping,Ping,0,"Ping for @CDSherrill to weigh in, per DGAS recommendation. I can fix this issue myself if you have nothing to add.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1890#issuecomment-632034182
https://github.com/psi4/psi4/pull/1893#issuecomment-644417698:25,Testability,test,tests,25,"Currently, the automated tests fail due to an automatically not resolvable merge conflict. @loriab, is only a rebase an acceptable solution for such conflicts, or could I also just merge with the newest psi4/master?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-644417698
https://github.com/psi4/psi4/pull/1893#issuecomment-644524465:27,Testability,test,tests,27,"> Currently, the automated tests fail due to an automatically not resolvable merge conflict. @loriab, is only a rebase an acceptable solution for such conflicts, or could I also just merge with the newest psi4/master?. Rebase preferred, but other `git` operations allowed so long as all the commits are still by you. (What can't work are PR branches where submitter's commits are repeated or interspersed with commits already in master.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-644524465
https://github.com/psi4/psi4/pull/1893#issuecomment-654282045:442,Availability,avail,available,442,"@loriab I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing `import psi4`, and then calling `psi4.set_options()`), the input options are not yet available when `psi4_python_module_initialize()` is called (from which `brianAPIInit()` had been called until now). As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (`py_psi_set_global_option_int()`), or I add it to every high-level computation function (like `energy()` and `optimize()`) that could potentially use BrianQC. Which way would be better in your opinion?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-654282045
https://github.com/psi4/psi4/pull/1893#issuecomment-654282045:917,Energy Efficiency,energy,energy,917,"@loriab I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing `import psi4`, and then calling `psi4.set_options()`), the input options are not yet available when `psi4_python_module_initialize()` is called (from which `brianAPIInit()` had been called until now). As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (`py_psi_set_global_option_int()`), or I add it to every high-level computation function (like `energy()` and `optimize()`) that could potentially use BrianQC. Which way would be better in your opinion?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-654282045
https://github.com/psi4/psi4/pull/1893#issuecomment-654282045:654,Performance,perform,performing,654,"@loriab I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing `import psi4`, and then calling `psi4.set_options()`), the input options are not yet available when `psi4_python_module_initialize()` is called (from which `brianAPIInit()` had been called until now). As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (`py_psi_set_global_option_int()`), or I add it to every high-level computation function (like `energy()` and `optimize()`) that could potentially use BrianQC. Which way would be better in your opinion?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-654282045
https://github.com/psi4/psi4/pull/1893#issuecomment-654282045:932,Performance,optimiz,optimize,932,"@loriab I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing `import psi4`, and then calling `psi4.set_options()`), the input options are not yet available when `psi4_python_module_initialize()` is called (from which `brianAPIInit()` had been called until now). As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (`py_psi_set_global_option_int()`), or I add it to every high-level computation function (like `energy()` and `optimize()`) that could potentially use BrianQC. Which way would be better in your opinion?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-654282045
https://github.com/psi4/psi4/pull/1893#issuecomment-654310111:23,Deployability,patch,patch,23,@kis-gergely-dzsi this patch to sphinx fixes that https://github.com/loriab/sphinx/commit/fa5fa5ce56aaa7f5d45c5923c6da34382ee4bce2 . I haven't fully investigated to see if it's been fixed in pybind11 or if I need to submit that to sphinx itself.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-654310111
https://github.com/psi4/psi4/pull/1893#issuecomment-659131975:452,Availability,avail,available,452,"@kis-gergely-dzsi . > I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing import psi4, and then calling psi4.set_options()), the input options are not yet available when psi4_python_module_initialize() is called (from which brianAPIInit() had been called until now). > As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (py_psi_set_global_option_int()), or I add it to every high-level computation function (like energy() and optimize()) that could potentially use BrianQC. Which way would be better in your opinion?. Sorry, I only noticed the docs query and not this one. Looking through the code you've added I think I understand your difficulty. It looks like right now, initialization brianAPIInit() sets briancookie boolean, and that setting governs in the SCF code and otherwise whether brianqc is used or bypassed. So in the course of an input file with several togglings of brianqc on/off, then brianqc gets initiated and torn down multiple times. Is this correct? And is the multiple teardowns wanted? It's fine to add a hook to each of the major fns like energy/gradient/hessian/properties. But could there instead be a single initiation, then checking the option `options.get_bool(""brianqc"");` as needed in the scf, grid, etc.?. ```; import psi4 # brianqc init happens alongside psi4 init. psi4.geometry(A). psi4.set_options({'brianqc': False}). energy('b3lyp/cc-pvdz') # runs all CPU. psi4.set_options({'brianqc': True}). energy('b3lyp/cc-pvdz') # runs w/GPU; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975
https://github.com/psi4/psi4/pull/1893#issuecomment-659131975:1444,Availability,down,down,1444,"@kis-gergely-dzsi . > I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing import psi4, and then calling psi4.set_options()), the input options are not yet available when psi4_python_module_initialize() is called (from which brianAPIInit() had been called until now). > As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (py_psi_set_global_option_int()), or I add it to every high-level computation function (like energy() and optimize()) that could potentially use BrianQC. Which way would be better in your opinion?. Sorry, I only noticed the docs query and not this one. Looking through the code you've added I think I understand your difficulty. It looks like right now, initialization brianAPIInit() sets briancookie boolean, and that setting governs in the SCF code and otherwise whether brianqc is used or bypassed. So in the course of an input file with several togglings of brianqc on/off, then brianqc gets initiated and torn down multiple times. Is this correct? And is the multiple teardowns wanted? It's fine to add a hook to each of the major fns like energy/gradient/hessian/properties. But could there instead be a single initiation, then checking the option `options.get_bool(""brianqc"");` as needed in the scf, grid, etc.?. ```; import psi4 # brianqc init happens alongside psi4 init. psi4.geometry(A). psi4.set_options({'brianqc': False}). energy('b3lyp/cc-pvdz') # runs all CPU. psi4.set_options({'brianqc': True}). energy('b3lyp/cc-pvdz') # runs w/GPU; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975
https://github.com/psi4/psi4/pull/1893#issuecomment-659131975:922,Energy Efficiency,energy,energy,922,"@kis-gergely-dzsi . > I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing import psi4, and then calling psi4.set_options()), the input options are not yet available when psi4_python_module_initialize() is called (from which brianAPIInit() had been called until now). > As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (py_psi_set_global_option_int()), or I add it to every high-level computation function (like energy() and optimize()) that could potentially use BrianQC. Which way would be better in your opinion?. Sorry, I only noticed the docs query and not this one. Looking through the code you've added I think I understand your difficulty. It looks like right now, initialization brianAPIInit() sets briancookie boolean, and that setting governs in the SCF code and otherwise whether brianqc is used or bypassed. So in the course of an input file with several togglings of brianqc on/off, then brianqc gets initiated and torn down multiple times. Is this correct? And is the multiple teardowns wanted? It's fine to add a hook to each of the major fns like energy/gradient/hessian/properties. But could there instead be a single initiation, then checking the option `options.get_bool(""brianqc"");` as needed in the scf, grid, etc.?. ```; import psi4 # brianqc init happens alongside psi4 init. psi4.geometry(A). psi4.set_options({'brianqc': False}). energy('b3lyp/cc-pvdz') # runs all CPU. psi4.set_options({'brianqc': True}). energy('b3lyp/cc-pvdz') # runs w/GPU; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975
https://github.com/psi4/psi4/pull/1893#issuecomment-659131975:1574,Energy Efficiency,energy,energy,1574,"@kis-gergely-dzsi . > I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing import psi4, and then calling psi4.set_options()), the input options are not yet available when psi4_python_module_initialize() is called (from which brianAPIInit() had been called until now). > As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (py_psi_set_global_option_int()), or I add it to every high-level computation function (like energy() and optimize()) that could potentially use BrianQC. Which way would be better in your opinion?. Sorry, I only noticed the docs query and not this one. Looking through the code you've added I think I understand your difficulty. It looks like right now, initialization brianAPIInit() sets briancookie boolean, and that setting governs in the SCF code and otherwise whether brianqc is used or bypassed. So in the course of an input file with several togglings of brianqc on/off, then brianqc gets initiated and torn down multiple times. Is this correct? And is the multiple teardowns wanted? It's fine to add a hook to each of the major fns like energy/gradient/hessian/properties. But could there instead be a single initiation, then checking the option `options.get_bool(""brianqc"");` as needed in the scf, grid, etc.?. ```; import psi4 # brianqc init happens alongside psi4 init. psi4.geometry(A). psi4.set_options({'brianqc': False}). energy('b3lyp/cc-pvdz') # runs all CPU. psi4.set_options({'brianqc': True}). energy('b3lyp/cc-pvdz') # runs w/GPU; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975
https://github.com/psi4/psi4/pull/1893#issuecomment-659131975:1866,Energy Efficiency,energy,energy,1866,"@kis-gergely-dzsi . > I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing import psi4, and then calling psi4.set_options()), the input options are not yet available when psi4_python_module_initialize() is called (from which brianAPIInit() had been called until now). > As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (py_psi_set_global_option_int()), or I add it to every high-level computation function (like energy() and optimize()) that could potentially use BrianQC. Which way would be better in your opinion?. Sorry, I only noticed the docs query and not this one. Looking through the code you've added I think I understand your difficulty. It looks like right now, initialization brianAPIInit() sets briancookie boolean, and that setting governs in the SCF code and otherwise whether brianqc is used or bypassed. So in the course of an input file with several togglings of brianqc on/off, then brianqc gets initiated and torn down multiple times. Is this correct? And is the multiple teardowns wanted? It's fine to add a hook to each of the major fns like energy/gradient/hessian/properties. But could there instead be a single initiation, then checking the option `options.get_bool(""brianqc"");` as needed in the scf, grid, etc.?. ```; import psi4 # brianqc init happens alongside psi4 init. psi4.geometry(A). psi4.set_options({'brianqc': False}). energy('b3lyp/cc-pvdz') # runs all CPU. psi4.set_options({'brianqc': True}). energy('b3lyp/cc-pvdz') # runs w/GPU; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975
https://github.com/psi4/psi4/pull/1893#issuecomment-659131975:1943,Energy Efficiency,energy,energy,1943,"@kis-gergely-dzsi . > I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing import psi4, and then calling psi4.set_options()), the input options are not yet available when psi4_python_module_initialize() is called (from which brianAPIInit() had been called until now). > As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (py_psi_set_global_option_int()), or I add it to every high-level computation function (like energy() and optimize()) that could potentially use BrianQC. Which way would be better in your opinion?. Sorry, I only noticed the docs query and not this one. Looking through the code you've added I think I understand your difficulty. It looks like right now, initialization brianAPIInit() sets briancookie boolean, and that setting governs in the SCF code and otherwise whether brianqc is used or bypassed. So in the course of an input file with several togglings of brianqc on/off, then brianqc gets initiated and torn down multiple times. Is this correct? And is the multiple teardowns wanted? It's fine to add a hook to each of the major fns like energy/gradient/hessian/properties. But could there instead be a single initiation, then checking the option `options.get_bool(""brianqc"");` as needed in the scf, grid, etc.?. ```; import psi4 # brianqc init happens alongside psi4 init. psi4.geometry(A). psi4.set_options({'brianqc': False}). energy('b3lyp/cc-pvdz') # runs all CPU. psi4.set_options({'brianqc': True}). energy('b3lyp/cc-pvdz') # runs w/GPU; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975
https://github.com/psi4/psi4/pull/1893#issuecomment-659131975:662,Performance,perform,performing,662,"@kis-gergely-dzsi . > I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing import psi4, and then calling psi4.set_options()), the input options are not yet available when psi4_python_module_initialize() is called (from which brianAPIInit() had been called until now). > As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (py_psi_set_global_option_int()), or I add it to every high-level computation function (like energy() and optimize()) that could potentially use BrianQC. Which way would be better in your opinion?. Sorry, I only noticed the docs query and not this one. Looking through the code you've added I think I understand your difficulty. It looks like right now, initialization brianAPIInit() sets briancookie boolean, and that setting governs in the SCF code and otherwise whether brianqc is used or bypassed. So in the course of an input file with several togglings of brianqc on/off, then brianqc gets initiated and torn down multiple times. Is this correct? And is the multiple teardowns wanted? It's fine to add a hook to each of the major fns like energy/gradient/hessian/properties. But could there instead be a single initiation, then checking the option `options.get_bool(""brianqc"");` as needed in the scf, grid, etc.?. ```; import psi4 # brianqc init happens alongside psi4 init. psi4.geometry(A). psi4.set_options({'brianqc': False}). energy('b3lyp/cc-pvdz') # runs all CPU. psi4.set_options({'brianqc': True}). energy('b3lyp/cc-pvdz') # runs w/GPU; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975
https://github.com/psi4/psi4/pull/1893#issuecomment-659131975:935,Performance,optimiz,optimize,935,"@kis-gergely-dzsi . > I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing import psi4, and then calling psi4.set_options()), the input options are not yet available when psi4_python_module_initialize() is called (from which brianAPIInit() had been called until now). > As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (py_psi_set_global_option_int()), or I add it to every high-level computation function (like energy() and optimize()) that could potentially use BrianQC. Which way would be better in your opinion?. Sorry, I only noticed the docs query and not this one. Looking through the code you've added I think I understand your difficulty. It looks like right now, initialization brianAPIInit() sets briancookie boolean, and that setting governs in the SCF code and otherwise whether brianqc is used or bypassed. So in the course of an input file with several togglings of brianqc on/off, then brianqc gets initiated and torn down multiple times. Is this correct? And is the multiple teardowns wanted? It's fine to add a hook to each of the major fns like energy/gradient/hessian/properties. But could there instead be a single initiation, then checking the option `options.get_bool(""brianqc"");` as needed in the scf, grid, etc.?. ```; import psi4 # brianqc init happens alongside psi4 init. psi4.geometry(A). psi4.set_options({'brianqc': False}). energy('b3lyp/cc-pvdz') # runs all CPU. psi4.set_options({'brianqc': True}). energy('b3lyp/cc-pvdz') # runs w/GPU; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975
https://github.com/psi4/psi4/pull/1895#issuecomment-632099886:2,Testability,test,tests,2,> tests will fix with a rebase. @loriab Looks like I'm still failing the Cholesky convergence test after a rebase,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1895#issuecomment-632099886
https://github.com/psi4/psi4/pull/1895#issuecomment-632099886:94,Testability,test,test,94,> tests will fix with a rebase. @loriab Looks like I'm still failing the Cholesky convergence test after a rebase,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1895#issuecomment-632099886
https://github.com/psi4/psi4/pull/1895#issuecomment-632118171:111,Availability,error,error,111,"> Looks like I'm still failing the Cholesky convergence test after a rebase. Well, you're not hitting the same error. This one is down the sequence at 1e-10, not 1e-7. And always by about same amt. . ``` Energy with Cholesky 1e-10: computed value (-230.6415254219) does not !; ! match (-230.6415254333) to atol=1e-08 by difference (0.0000000114).; ```. I wonder if this is associated with the new 2020.1 mkl set that's ~9 days old.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1895#issuecomment-632118171
https://github.com/psi4/psi4/pull/1895#issuecomment-632118171:130,Availability,down,down,130,"> Looks like I'm still failing the Cholesky convergence test after a rebase. Well, you're not hitting the same error. This one is down the sequence at 1e-10, not 1e-7. And always by about same amt. . ``` Energy with Cholesky 1e-10: computed value (-230.6415254219) does not !; ! match (-230.6415254333) to atol=1e-08 by difference (0.0000000114).; ```. I wonder if this is associated with the new 2020.1 mkl set that's ~9 days old.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1895#issuecomment-632118171
https://github.com/psi4/psi4/pull/1895#issuecomment-632118171:204,Energy Efficiency,Energy,Energy,204,"> Looks like I'm still failing the Cholesky convergence test after a rebase. Well, you're not hitting the same error. This one is down the sequence at 1e-10, not 1e-7. And always by about same amt. . ``` Energy with Cholesky 1e-10: computed value (-230.6415254219) does not !; ! match (-230.6415254333) to atol=1e-08 by difference (0.0000000114).; ```. I wonder if this is associated with the new 2020.1 mkl set that's ~9 days old.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1895#issuecomment-632118171
https://github.com/psi4/psi4/pull/1895#issuecomment-632118171:56,Testability,test,test,56,"> Looks like I'm still failing the Cholesky convergence test after a rebase. Well, you're not hitting the same error. This one is down the sequence at 1e-10, not 1e-7. And always by about same amt. . ``` Energy with Cholesky 1e-10: computed value (-230.6415254219) does not !; ! match (-230.6415254333) to atol=1e-08 by difference (0.0000000114).; ```. I wonder if this is associated with the new 2020.1 mkl set that's ~9 days old.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1895#issuecomment-632118171
https://github.com/psi4/psi4/pull/1896#issuecomment-633173122:1490,Energy Efficiency,energy,energy,1490,"t's a bug in MKL or as temporary in how psi is using MKL. The reason I'm suspicious of MKL is that the answer changes between two values between runs (sometimes have to run 8 times to trigger).; * affects df (both mem and disk) but pk is fine; * affects any basis (currently set as cc-pvdz for efficiency); * nothing to do with SAD guess; * in test suite (run through only once), only the scf-cholesky-basis and an IRC test are affected.; * even by running plain water in df/aqz/uhf, I can't make it act unstable, as the df/dz/uhf benzene doublet does. ```; memory 3 gb. molecule {; -1 2; C 0.00000 0.00000 1.39495; C 0.00000 1.20806 0.69748; C 0.00000 1.20806 -0.69748; C 0.00000 0.00000 -1.39495; C 0.00000 -1.20806 -0.69748; C 0.00000 -1.20806 0.69748; H 0.00000 0.00000 2.47753; H 0.00000 2.14560 1.23877; H 0.00000 2.14560 -1.23877; H 0.00000 0.00000 -2.47753; H 0.00000 -2.14560 -1.23877; H 0.00000 -2.14560 1.23877; }. set basis cc-pVDZ; #set basis aug-cc-pVDZ; #set basis cc-pVTZ; #set basis aug-cc-pVTZ; #set basis cc-pVQZ; #set basis aug-cc-pVQZ; #set scf_type pk; #set scf_type df; set scf_type disk_df; #set scf_type mem_df; set d_convergence 10; set e_convergence 11; set df_scf_guess false; set guess core; #set reference rohf; set reference uhf; e = energy('scf'); print(e). pk_qz_2019 = -76.06462080005818; pk_aqz_2019 = -76.06578901994756; df_qz_2019 = -76.06462015458904; df_aqz_2019 = -76.06578796456354. pk_tz_rohf_2019 = -230.674287472723. pk_dz_uhf_2019 = -230.61792846279093 # passes; pk_adz_uhf_2019 = -230.64203999528007 # passes; pk_tz_uhf_2019 = -230.684552455135 # passes 2019.4, passes 2020.1; df_dz_uhf_2019 = -230.61751709208824 # fails 0.0000 0000 0102; df_adz_uhf_2019 = -230.64167627416992 # fails 0.0000 0000 1137; df_tz_uhf_2019 = -230.68445301909452 # fails -0.0000 0000 0161; df_atz_uhf_2019 = -230.6966011258728 # passes 2019.4, fails 2020.1 -0.0000 0000 2270. ref = df_dz_uhf_2019; compare_values(ref, variable('SCF TOTAL ENERGY'), 10, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122
https://github.com/psi4/psi4/pull/1896#issuecomment-633173122:2187,Energy Efficiency,ENERGY,ENERGY,2187,"t's a bug in MKL or as temporary in how psi is using MKL. The reason I'm suspicious of MKL is that the answer changes between two values between runs (sometimes have to run 8 times to trigger).; * affects df (both mem and disk) but pk is fine; * affects any basis (currently set as cc-pvdz for efficiency); * nothing to do with SAD guess; * in test suite (run through only once), only the scf-cholesky-basis and an IRC test are affected.; * even by running plain water in df/aqz/uhf, I can't make it act unstable, as the df/dz/uhf benzene doublet does. ```; memory 3 gb. molecule {; -1 2; C 0.00000 0.00000 1.39495; C 0.00000 1.20806 0.69748; C 0.00000 1.20806 -0.69748; C 0.00000 0.00000 -1.39495; C 0.00000 -1.20806 -0.69748; C 0.00000 -1.20806 0.69748; H 0.00000 0.00000 2.47753; H 0.00000 2.14560 1.23877; H 0.00000 2.14560 -1.23877; H 0.00000 0.00000 -2.47753; H 0.00000 -2.14560 -1.23877; H 0.00000 -2.14560 1.23877; }. set basis cc-pVDZ; #set basis aug-cc-pVDZ; #set basis cc-pVTZ; #set basis aug-cc-pVTZ; #set basis cc-pVQZ; #set basis aug-cc-pVQZ; #set scf_type pk; #set scf_type df; set scf_type disk_df; #set scf_type mem_df; set d_convergence 10; set e_convergence 11; set df_scf_guess false; set guess core; #set reference rohf; set reference uhf; e = energy('scf'); print(e). pk_qz_2019 = -76.06462080005818; pk_aqz_2019 = -76.06578901994756; df_qz_2019 = -76.06462015458904; df_aqz_2019 = -76.06578796456354. pk_tz_rohf_2019 = -230.674287472723. pk_dz_uhf_2019 = -230.61792846279093 # passes; pk_adz_uhf_2019 = -230.64203999528007 # passes; pk_tz_uhf_2019 = -230.684552455135 # passes 2019.4, passes 2020.1; df_dz_uhf_2019 = -230.61751709208824 # fails 0.0000 0000 0102; df_adz_uhf_2019 = -230.64167627416992 # fails 0.0000 0000 1137; df_tz_uhf_2019 = -230.68445301909452 # fails -0.0000 0000 0161; df_atz_uhf_2019 = -230.6966011258728 # passes 2019.4, fails 2020.1 -0.0000 0000 2270. ref = df_dz_uhf_2019; compare_values(ref, variable('SCF TOTAL ENERGY'), 10, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122
https://github.com/psi4/psi4/pull/1896#issuecomment-633173122:2206,Energy Efficiency,energy,energy,2206,"t's a bug in MKL or as temporary in how psi is using MKL. The reason I'm suspicious of MKL is that the answer changes between two values between runs (sometimes have to run 8 times to trigger).; * affects df (both mem and disk) but pk is fine; * affects any basis (currently set as cc-pvdz for efficiency); * nothing to do with SAD guess; * in test suite (run through only once), only the scf-cholesky-basis and an IRC test are affected.; * even by running plain water in df/aqz/uhf, I can't make it act unstable, as the df/dz/uhf benzene doublet does. ```; memory 3 gb. molecule {; -1 2; C 0.00000 0.00000 1.39495; C 0.00000 1.20806 0.69748; C 0.00000 1.20806 -0.69748; C 0.00000 0.00000 -1.39495; C 0.00000 -1.20806 -0.69748; C 0.00000 -1.20806 0.69748; H 0.00000 0.00000 2.47753; H 0.00000 2.14560 1.23877; H 0.00000 2.14560 -1.23877; H 0.00000 0.00000 -2.47753; H 0.00000 -2.14560 -1.23877; H 0.00000 -2.14560 1.23877; }. set basis cc-pVDZ; #set basis aug-cc-pVDZ; #set basis cc-pVTZ; #set basis aug-cc-pVTZ; #set basis cc-pVQZ; #set basis aug-cc-pVQZ; #set scf_type pk; #set scf_type df; set scf_type disk_df; #set scf_type mem_df; set d_convergence 10; set e_convergence 11; set df_scf_guess false; set guess core; #set reference rohf; set reference uhf; e = energy('scf'); print(e). pk_qz_2019 = -76.06462080005818; pk_aqz_2019 = -76.06578901994756; df_qz_2019 = -76.06462015458904; df_aqz_2019 = -76.06578796456354. pk_tz_rohf_2019 = -230.674287472723. pk_dz_uhf_2019 = -230.61792846279093 # passes; pk_adz_uhf_2019 = -230.64203999528007 # passes; pk_tz_uhf_2019 = -230.684552455135 # passes 2019.4, passes 2020.1; df_dz_uhf_2019 = -230.61751709208824 # fails 0.0000 0000 0102; df_adz_uhf_2019 = -230.64167627416992 # fails 0.0000 0000 1137; df_tz_uhf_2019 = -230.68445301909452 # fails -0.0000 0000 0161; df_atz_uhf_2019 = -230.6966011258728 # passes 2019.4, fails 2020.1 -0.0000 0000 2270. ref = df_dz_uhf_2019; compare_values(ref, variable('SCF TOTAL ENERGY'), 10, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122
https://github.com/psi4/psi4/pull/1896#issuecomment-633173122:2167,Modifiability,variab,variable,2167,"t's a bug in MKL or as temporary in how psi is using MKL. The reason I'm suspicious of MKL is that the answer changes between two values between runs (sometimes have to run 8 times to trigger).; * affects df (both mem and disk) but pk is fine; * affects any basis (currently set as cc-pvdz for efficiency); * nothing to do with SAD guess; * in test suite (run through only once), only the scf-cholesky-basis and an IRC test are affected.; * even by running plain water in df/aqz/uhf, I can't make it act unstable, as the df/dz/uhf benzene doublet does. ```; memory 3 gb. molecule {; -1 2; C 0.00000 0.00000 1.39495; C 0.00000 1.20806 0.69748; C 0.00000 1.20806 -0.69748; C 0.00000 0.00000 -1.39495; C 0.00000 -1.20806 -0.69748; C 0.00000 -1.20806 0.69748; H 0.00000 0.00000 2.47753; H 0.00000 2.14560 1.23877; H 0.00000 2.14560 -1.23877; H 0.00000 0.00000 -2.47753; H 0.00000 -2.14560 -1.23877; H 0.00000 -2.14560 1.23877; }. set basis cc-pVDZ; #set basis aug-cc-pVDZ; #set basis cc-pVTZ; #set basis aug-cc-pVTZ; #set basis cc-pVQZ; #set basis aug-cc-pVQZ; #set scf_type pk; #set scf_type df; set scf_type disk_df; #set scf_type mem_df; set d_convergence 10; set e_convergence 11; set df_scf_guess false; set guess core; #set reference rohf; set reference uhf; e = energy('scf'); print(e). pk_qz_2019 = -76.06462080005818; pk_aqz_2019 = -76.06578901994756; df_qz_2019 = -76.06462015458904; df_aqz_2019 = -76.06578796456354. pk_tz_rohf_2019 = -230.674287472723. pk_dz_uhf_2019 = -230.61792846279093 # passes; pk_adz_uhf_2019 = -230.64203999528007 # passes; pk_tz_uhf_2019 = -230.684552455135 # passes 2019.4, passes 2020.1; df_dz_uhf_2019 = -230.61751709208824 # fails 0.0000 0000 0102; df_adz_uhf_2019 = -230.64167627416992 # fails 0.0000 0000 1137; df_tz_uhf_2019 = -230.68445301909452 # fails -0.0000 0000 0161; df_atz_uhf_2019 = -230.6966011258728 # passes 2019.4, fails 2020.1 -0.0000 0000 2270. ref = df_dz_uhf_2019; compare_values(ref, variable('SCF TOTAL ENERGY'), 10, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122
https://github.com/psi4/psi4/pull/1896#issuecomment-633173122:569,Testability,test,test,569,"> [B]anning specific versions of specific linalg packages, with no other reason than ""it changes results"", is something that makes me feel uneasy. It's definitely not something I take lightly either and is only plausible if it's a bug in MKL or as temporary in how psi is using MKL. The reason I'm suspicious of MKL is that the answer changes between two values between runs (sometimes have to run 8 times to trigger).; * affects df (both mem and disk) but pk is fine; * affects any basis (currently set as cc-pvdz for efficiency); * nothing to do with SAD guess; * in test suite (run through only once), only the scf-cholesky-basis and an IRC test are affected.; * even by running plain water in df/aqz/uhf, I can't make it act unstable, as the df/dz/uhf benzene doublet does. ```; memory 3 gb. molecule {; -1 2; C 0.00000 0.00000 1.39495; C 0.00000 1.20806 0.69748; C 0.00000 1.20806 -0.69748; C 0.00000 0.00000 -1.39495; C 0.00000 -1.20806 -0.69748; C 0.00000 -1.20806 0.69748; H 0.00000 0.00000 2.47753; H 0.00000 2.14560 1.23877; H 0.00000 2.14560 -1.23877; H 0.00000 0.00000 -2.47753; H 0.00000 -2.14560 -1.23877; H 0.00000 -2.14560 1.23877; }. set basis cc-pVDZ; #set basis aug-cc-pVDZ; #set basis cc-pVTZ; #set basis aug-cc-pVTZ; #set basis cc-pVQZ; #set basis aug-cc-pVQZ; #set scf_type pk; #set scf_type df; set scf_type disk_df; #set scf_type mem_df; set d_convergence 10; set e_convergence 11; set df_scf_guess false; set guess core; #set reference rohf; set reference uhf; e = energy('scf'); print(e). pk_qz_2019 = -76.06462080005818; pk_aqz_2019 = -76.06578901994756; df_qz_2019 = -76.06462015458904; df_aqz_2019 = -76.06578796456354. pk_tz_rohf_2019 = -230.674287472723. pk_dz_uhf_2019 = -230.61792846279093 # passes; pk_adz_uhf_2019 = -230.64203999528007 # passes; pk_tz_uhf_2019 = -230.684552455135 # passes 2019.4, passes 2020.1; df_dz_uhf_2019 = -230.61751709208824 # fails 0.0000 0000 0102; df_adz_uhf_2019 = -230.64167627416992 # fails 0.0000 0000 1137; df_tz_uhf_2019 = -230.6844",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122
https://github.com/psi4/psi4/pull/1896#issuecomment-633173122:644,Testability,test,test,644,"> [B]anning specific versions of specific linalg packages, with no other reason than ""it changes results"", is something that makes me feel uneasy. It's definitely not something I take lightly either and is only plausible if it's a bug in MKL or as temporary in how psi is using MKL. The reason I'm suspicious of MKL is that the answer changes between two values between runs (sometimes have to run 8 times to trigger).; * affects df (both mem and disk) but pk is fine; * affects any basis (currently set as cc-pvdz for efficiency); * nothing to do with SAD guess; * in test suite (run through only once), only the scf-cholesky-basis and an IRC test are affected.; * even by running plain water in df/aqz/uhf, I can't make it act unstable, as the df/dz/uhf benzene doublet does. ```; memory 3 gb. molecule {; -1 2; C 0.00000 0.00000 1.39495; C 0.00000 1.20806 0.69748; C 0.00000 1.20806 -0.69748; C 0.00000 0.00000 -1.39495; C 0.00000 -1.20806 -0.69748; C 0.00000 -1.20806 0.69748; H 0.00000 0.00000 2.47753; H 0.00000 2.14560 1.23877; H 0.00000 2.14560 -1.23877; H 0.00000 0.00000 -2.47753; H 0.00000 -2.14560 -1.23877; H 0.00000 -2.14560 1.23877; }. set basis cc-pVDZ; #set basis aug-cc-pVDZ; #set basis cc-pVTZ; #set basis aug-cc-pVTZ; #set basis cc-pVQZ; #set basis aug-cc-pVQZ; #set scf_type pk; #set scf_type df; set scf_type disk_df; #set scf_type mem_df; set d_convergence 10; set e_convergence 11; set df_scf_guess false; set guess core; #set reference rohf; set reference uhf; e = energy('scf'); print(e). pk_qz_2019 = -76.06462080005818; pk_aqz_2019 = -76.06578901994756; df_qz_2019 = -76.06462015458904; df_aqz_2019 = -76.06578796456354. pk_tz_rohf_2019 = -230.674287472723. pk_dz_uhf_2019 = -230.61792846279093 # passes; pk_adz_uhf_2019 = -230.64203999528007 # passes; pk_tz_uhf_2019 = -230.684552455135 # passes 2019.4, passes 2020.1; df_dz_uhf_2019 = -230.61751709208824 # fails 0.0000 0000 0102; df_adz_uhf_2019 = -230.64167627416992 # fails 0.0000 0000 1137; df_tz_uhf_2019 = -230.6844",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122
https://github.com/psi4/psi4/pull/1896#issuecomment-633173122:2216,Testability,TEST,TEST,2216,"t's a bug in MKL or as temporary in how psi is using MKL. The reason I'm suspicious of MKL is that the answer changes between two values between runs (sometimes have to run 8 times to trigger).; * affects df (both mem and disk) but pk is fine; * affects any basis (currently set as cc-pvdz for efficiency); * nothing to do with SAD guess; * in test suite (run through only once), only the scf-cholesky-basis and an IRC test are affected.; * even by running plain water in df/aqz/uhf, I can't make it act unstable, as the df/dz/uhf benzene doublet does. ```; memory 3 gb. molecule {; -1 2; C 0.00000 0.00000 1.39495; C 0.00000 1.20806 0.69748; C 0.00000 1.20806 -0.69748; C 0.00000 0.00000 -1.39495; C 0.00000 -1.20806 -0.69748; C 0.00000 -1.20806 0.69748; H 0.00000 0.00000 2.47753; H 0.00000 2.14560 1.23877; H 0.00000 2.14560 -1.23877; H 0.00000 0.00000 -2.47753; H 0.00000 -2.14560 -1.23877; H 0.00000 -2.14560 1.23877; }. set basis cc-pVDZ; #set basis aug-cc-pVDZ; #set basis cc-pVTZ; #set basis aug-cc-pVTZ; #set basis cc-pVQZ; #set basis aug-cc-pVQZ; #set scf_type pk; #set scf_type df; set scf_type disk_df; #set scf_type mem_df; set d_convergence 10; set e_convergence 11; set df_scf_guess false; set guess core; #set reference rohf; set reference uhf; e = energy('scf'); print(e). pk_qz_2019 = -76.06462080005818; pk_aqz_2019 = -76.06578901994756; df_qz_2019 = -76.06462015458904; df_aqz_2019 = -76.06578796456354. pk_tz_rohf_2019 = -230.674287472723. pk_dz_uhf_2019 = -230.61792846279093 # passes; pk_adz_uhf_2019 = -230.64203999528007 # passes; pk_tz_uhf_2019 = -230.684552455135 # passes 2019.4, passes 2020.1; df_dz_uhf_2019 = -230.61751709208824 # fails 0.0000 0000 0102; df_adz_uhf_2019 = -230.64167627416992 # fails 0.0000 0000 1137; df_tz_uhf_2019 = -230.68445301909452 # fails -0.0000 0000 0161; df_atz_uhf_2019 = -230.6966011258728 # passes 2019.4, fails 2020.1 -0.0000 0000 2270. ref = df_dz_uhf_2019; compare_values(ref, variable('SCF TOTAL ENERGY'), 10, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122
https://github.com/psi4/psi4/pull/1896#issuecomment-633623036:110,Testability,Test,Test,110,"New info is that http://d3f8ykwhia686p.cloudfront.net/1live/intel/Intel_PUMag_Issue11_CBWR.pdf is relevant. . Test case is dz/df/uhf via `for i in {1..20}; do MKL_CBWR=AVX stage/bin/psi4 chgbasic.in ; done`; * always passes: `COMPATIBLE`, `SSE2`, `AVX`, `AUTO`; * mixed pass/fail: `MKL_CBWR` unset; * always fails: `SSE4_2`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633623036
https://github.com/psi4/psi4/pull/1896#issuecomment-633633913:117,Testability,Test,Test,117,"> New info is that http://d3f8ykwhia686p.cloudfront.net/1live/intel/Intel_PUMag_Issue11_CBWR.pdf is relevant.; > ; > Test case is dz/df/uhf via `for i in {1..20}; do MKL_CBWR=AVX stage/bin/psi4 chgbasic.in ; done`; > ; > * always passes: `COMPATIBLE`, `SSE2`, `AVX`, `AUTO`; > ; > * mixed pass/fail: `MKL_CBWR` unset; > ; > * always fails: `SSE4_2`. New Intel feature: get the wrong result faster!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633633913
https://github.com/psi4/psi4/pull/1896#issuecomment-633644562:89,Usability,guid,guide,89,https://software.intel.com/content/www/us/en/develop/documentation/mkl-windows-developer-guide/top/obtaining-numerically-reproducible-results/specifying-code-branches.html. Kinda funny they have a `STRICT` mode even for this..,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633644562
https://github.com/psi4/psi4/pull/1896#issuecomment-633666655:883,Modifiability,variab,variable,883,"> ; > ; > FWIW, I cannot make the input fail with mkl2020.1 on my Ryzen (gen1) workstation.; > It has instructions till AVX2. MKL and any binaries generated by Intel compilers are almost always detecting CPU vendors based on vendor first and instruction support second. Something like this:; ```; if ( CPU_VENDOR == Intel){; if ( CPU_HAS_AVX_512 ) <call AVX-512 version of the function>; if ( CPU_HAS_AVX2 ) <call AVX2 version of the function>; ...; else <call SSE2 version of the function>; } else { //non-Intel CPU; <call SSE2 version of the function>; }; ```; So this means that unless one adds some some unofficial hacks before compiling the binaries, all AMD CPUs, regardless of their AVX support, will be running SSE2 (or similarly unoptimized) codepaths only.; This unfair CPU dispatch function can be overridden at runtime for the MKL using an unofficial debug environmental variable, but if the binary was compiled with an Intel compiler, then all parts touched by the auto-vectorizer are probably still going to execute the SSE2 (or a similarly unoptimized) path on AMD CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633666655
https://github.com/psi4/psi4/pull/1896#issuecomment-633666655:194,Safety,detect,detecting,194,"> ; > ; > FWIW, I cannot make the input fail with mkl2020.1 on my Ryzen (gen1) workstation.; > It has instructions till AVX2. MKL and any binaries generated by Intel compilers are almost always detecting CPU vendors based on vendor first and instruction support second. Something like this:; ```; if ( CPU_VENDOR == Intel){; if ( CPU_HAS_AVX_512 ) <call AVX-512 version of the function>; if ( CPU_HAS_AVX2 ) <call AVX2 version of the function>; ...; else <call SSE2 version of the function>; } else { //non-Intel CPU; <call SSE2 version of the function>; }; ```; So this means that unless one adds some some unofficial hacks before compiling the binaries, all AMD CPUs, regardless of their AVX support, will be running SSE2 (or similarly unoptimized) codepaths only.; This unfair CPU dispatch function can be overridden at runtime for the MKL using an unofficial debug environmental variable, but if the binary was compiled with an Intel compiler, then all parts touched by the auto-vectorizer are probably still going to execute the SSE2 (or a similarly unoptimized) path on AMD CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633666655
https://github.com/psi4/psi4/pull/1896#issuecomment-633672888:139,Integrability,rout,routines,139,"To be clear, if the MKL_DEBUG_CPU_TYPE=5 envvar trick is used, all MKL functions will execute the AVX2 path, but if there are CPU dispatch routines inserted into the program by the Intel compiler, then code that is outside the MKL functions will probably still only use SSE2 when run on AMD CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633672888
https://github.com/psi4/psi4/pull/1896#issuecomment-633672888:6,Usability,clear,clear,6,"To be clear, if the MKL_DEBUG_CPU_TYPE=5 envvar trick is used, all MKL functions will execute the AVX2 path, but if there are CPU dispatch routines inserted into the program by the Intel compiler, then code that is outside the MKL functions will probably still only use SSE2 when run on AMD CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633672888
https://github.com/psi4/psi4/pull/1896#issuecomment-633678203:122,Deployability,patch,patch-AuthenticAMD,122,"I used the MKL DEBUG flag. The compiler penalties you mentioned were removed at one point (https://github.com/jimenezrick/patch-AuthenticAMD), currently I don't worry about them unless there is a new report on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633678203
https://github.com/psi4/psi4/pull/1896#issuecomment-633685022:219,Testability,Benchmark,Benchmarks,219,"According to Agner Fog ([https://www.agner.org/forum/viewtopic.php?f=1&t=6](https://www.agner.org/forum/viewtopic.php?f=1&t=6)), these unfair dispatch functions are still present and active in the 2019 Intel compilers. Benchmarks from Puget Systems also support that this is still happening inside MKL: [https://www.pugetsystems.com/labs/hpc/How-To-Use-MKL-with-AMD-Ryzen-and-Threadripper-CPU-s-Effectively-for-Python-Numpy-And-Other-Applications-1637/](https://www.pugetsystems.com/labs/hpc/How-To-Use-MKL-with-AMD-Ryzen-and-Threadripper-CPU-s-Effectively-for-Python-Numpy-And-Other-Applications-1637/)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633685022
https://github.com/psi4/psi4/pull/1896#issuecomment-633695142:538,Deployability,install,install,538,"what should be happening here in the CI is that we've got a mixture of; * Libint, from conda psi4, built with Intel 2019 compilers, not calling MKL; * numpy, from conda defaults, built with GCC, calling MKL; * psi4, built on Azure with GCC or Clang, calling MKL; * MKL, distributed from conda but built by Intel with ? compilers (we'll assume Intel). My local tests with the reported `MKL_CBWR` are the same as the bullets except psi4 was build with Intel 2019.4 compilers. To test, I've solely been switching out MKL package with `conda install mkl=2019.4` or `=2020.1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633695142
https://github.com/psi4/psi4/pull/1896#issuecomment-633695142:360,Testability,test,tests,360,"what should be happening here in the CI is that we've got a mixture of; * Libint, from conda psi4, built with Intel 2019 compilers, not calling MKL; * numpy, from conda defaults, built with GCC, calling MKL; * psi4, built on Azure with GCC or Clang, calling MKL; * MKL, distributed from conda but built by Intel with ? compilers (we'll assume Intel). My local tests with the reported `MKL_CBWR` are the same as the bullets except psi4 was build with Intel 2019.4 compilers. To test, I've solely been switching out MKL package with `conda install mkl=2019.4` or `=2020.1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633695142
https://github.com/psi4/psi4/pull/1896#issuecomment-633695142:477,Testability,test,test,477,"what should be happening here in the CI is that we've got a mixture of; * Libint, from conda psi4, built with Intel 2019 compilers, not calling MKL; * numpy, from conda defaults, built with GCC, calling MKL; * psi4, built on Azure with GCC or Clang, calling MKL; * MKL, distributed from conda but built by Intel with ? compilers (we'll assume Intel). My local tests with the reported `MKL_CBWR` are the same as the bullets except psi4 was build with Intel 2019.4 compilers. To test, I've solely been switching out MKL package with `conda install mkl=2019.4` or `=2020.1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633695142
https://github.com/psi4/psi4/pull/1896#issuecomment-633701524:215,Energy Efficiency,monitor,monitoring,215,"Setting MKL_CBWR=AUTO for Intel machines (CI runs on intel for now, right?) seems reasonable. . I am all for moving forward with this as it blocks other PRs.; We could make an issue about MKL instabilities and keep monitoring it for now?. With supercomputers getting build with AMD Epyc we might need to consider supporting an AMD-oriented build in the future and switch to another BLAS library for it. (i'm not up to date on BLAS stuff there, but things have been improving i think)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633701524
https://github.com/psi4/psi4/pull/1896#issuecomment-633708219:277,Deployability,canary,canary,277,"> I am all for moving forward with this as it blocks other PRs.; We could make an issue about MKL instabilities and keep monitoring it for now?. I agree. We know how to coerce any MKL into a correct answer. Poor cholesky-basis is exonerated and instead lauded as the coal mine canary. Time to get PRs moving again. > (CI runs on intel for now, right?). I don't think we have any guarantee of hardware brand or instruction set. Agree that should try threaded non-MKL again someday.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633708219
https://github.com/psi4/psi4/pull/1896#issuecomment-633708219:121,Energy Efficiency,monitor,monitoring,121,"> I am all for moving forward with this as it blocks other PRs.; We could make an issue about MKL instabilities and keep monitoring it for now?. I agree. We know how to coerce any MKL into a correct answer. Poor cholesky-basis is exonerated and instead lauded as the coal mine canary. Time to get PRs moving again. > (CI runs on intel for now, right?). I don't think we have any guarantee of hardware brand or instruction set. Agree that should try threaded non-MKL again someday.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633708219
https://github.com/psi4/psi4/issues/1897#issuecomment-632693068:124,Energy Efficiency,energy,energy,124,"Oh since I mentioned gradients in the title. When I was running some optimizations, gradient behavior did match that of the energy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632693068
https://github.com/psi4/psi4/issues/1897#issuecomment-632693068:69,Performance,optimiz,optimizations,69,"Oh since I mentioned gradients in the title. When I was running some optimizations, gradient behavior did match that of the energy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632693068
https://github.com/psi4/psi4/issues/1897#issuecomment-632703873:85,Performance,optimiz,optimizations,85,Could you upload the full output? Best to know which modules are really called.; The optimizations were also done with ROHF?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632703873
https://github.com/psi4/psi4/issues/1897#issuecomment-632711349:151,Performance,optimiz,optimization,151,Renamed for upload; [output.txt](https://github.com/psi4/psi4/files/4668488/output.txt); Yes the gradients were also rohf. I can add an output for the optimization if desired.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632711349
https://github.com/psi4/psi4/issues/1897#issuecomment-632721824:522,Energy Efficiency,energy,energy,522,"You're definitely interested in H-by-E, not H-by-G?. the ground rules; * Outright cc, mp2, hf, etc. calculations are controlled by cc_type, mp2_type, hf_type, etc. ; * In a CBS, if a needed component can be got for free, it is taken, regardless of type. ; * Practically, ""for free"" are only active for energies, since there's only one known separable gradient. ; * Also, it's not smart enough to harvest an mp2 findif derivative from a ccsd(t) findif derivative. I haven't studied your evidence in detail, but conv mp2 in energy(cbs), where it can be got from conv ccsd(t), and df mp2 in freq(cbs), where mp2 is an outright calc and thus governed by mp2_type, sounds plausible. I would expect gradient to behave like freq, though. Possible complications are that some modules are spotty about returning mp2 from ccsd(t), so I'd need to look into exactly what's running. #1850 fixes several of these and will probably heal the HF=0.0, too. df/conv not behaving as you expect is a larger issue. I have some plans for tighter control.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632721824
https://github.com/psi4/psi4/issues/1897#issuecomment-632827953:122,Energy Efficiency,energy,energy,122,"The `gradient` call is using the whole CBS function for the displacements. Thus getting MP2 ""for free"". Looks like `ptype=energy` is run in `cbs()` because one does not get the `GRADIENT` label, while for the `hessian()` we get `ptype=hessian` which calculates a hessian for each component(?). The separation of MP2 and CCSD(T) for the `:D` part then uses DF-MP2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632827953
https://github.com/psi4/psi4/issues/1897#issuecomment-632986963:71,Availability,avail,available,71,"I do need to do H-by-E here. I wish there were analytic rohf gradients available. I'm not in need of a fix for this immediately, just something I came across and wanted to raise it as an issue. If this will get fixed by the aforementioned PR and future efforts, that sounds good to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632986963
https://github.com/psi4/psi4/issues/1898#issuecomment-777604762:33,Availability,avail,available,33,The B97-3c SRB correction is now available with the latest `gcp` version at https://github.com/grimme-lab/gcp and via the conda-forge package `gcp-correction`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1898#issuecomment-777604762
https://github.com/psi4/psi4/issues/1898#issuecomment-785910480:125,Availability,avail,available,125,"OpenBLAS and MKL can be easily switched out by the usual conda-forge mechanism, not sure about OpenMP. Is there Intel OpenMP available on conda-forge?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1898#issuecomment-785910480
https://github.com/psi4/psi4/pull/1900#issuecomment-633044819:298,Performance,perform,performance,298,"Great to have test for this. . Shared pointers like [epot](https://github.com/psi4/psi4/pull/1900/files#diff-91bf9e90eb569eec33cd0e5edae2e2b4L1070) in this case are probably a bad idea in OpenMP.; Unfortunately I cannot test threading things on my mac. @timostrunk how important is threading here, performance wise? Is re-introducing openmp quickly crucial?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1900#issuecomment-633044819
https://github.com/psi4/psi4/pull/1900#issuecomment-633044819:14,Testability,test,test,14,"Great to have test for this. . Shared pointers like [epot](https://github.com/psi4/psi4/pull/1900/files#diff-91bf9e90eb569eec33cd0e5edae2e2b4L1070) in this case are probably a bad idea in OpenMP.; Unfortunately I cannot test threading things on my mac. @timostrunk how important is threading here, performance wise? Is re-introducing openmp quickly crucial?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1900#issuecomment-633044819
https://github.com/psi4/psi4/pull/1900#issuecomment-633044819:220,Testability,test,test,220,"Great to have test for this. . Shared pointers like [epot](https://github.com/psi4/psi4/pull/1900/files#diff-91bf9e90eb569eec33cd0e5edae2e2b4L1070) in this case are probably a bad idea in OpenMP.; Unfortunately I cannot test threading things on my mac. @timostrunk how important is threading here, performance wise? Is re-introducing openmp quickly crucial?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1900#issuecomment-633044819
https://github.com/psi4/psi4/pull/1900#issuecomment-633045614:243,Energy Efficiency,charge,charge,243,"As it never worked before, it is also not crucial to add this again. For large grids the OpenMP speedup at this place would be nearly perfect, because it parallelizes quite trivially. It would lead to a linear speedup in something like an ESP charge fit (the sample code does thankfully not use this function yet, but a rather very slow write to disk, read from disk cycle, so fallout should be quite minimal). It would be quite simple for me to add threading back to this function if required. The only thing necessary (in my opinion, need to check the code better) would be to make the buffer object in OneBodyAOInt thread-local.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1900#issuecomment-633045614
https://github.com/psi4/psi4/pull/1900#issuecomment-633045614:429,Usability,simpl,simple,429,"As it never worked before, it is also not crucial to add this again. For large grids the OpenMP speedup at this place would be nearly perfect, because it parallelizes quite trivially. It would lead to a linear speedup in something like an ESP charge fit (the sample code does thankfully not use this function yet, but a rather very slow write to disk, read from disk cycle, so fallout should be quite minimal). It would be quite simple for me to add threading back to this function if required. The only thing necessary (in my opinion, need to check the code better) would be to make the buffer object in OneBodyAOInt thread-local.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1900#issuecomment-633045614
https://github.com/psi4/psi4/pull/1901#issuecomment-634141409:800,Deployability,release,release-ready,800,"This is just about as far as this PR is going to go. Fully removing memory_manager would require a way to store how much memory has been ""spent."" Keeping track of that without globals requires a wavefunction. Once the wavefunction is in place to track memory, the MemoryManager can be removed from psimrcc without much hassle. Two issues before potentially merging this:; 1. I want to do some profiling to make sure that none of my pointer -> std::vector replacements hit performance. `.data()` and passing const refs is enough, according to my very preliminary tests, but I'll do some more in-depth ones once I figure out how to use VTune.; 2. Do we want this as a 1.4 target? We really don't need more PR dependencies before 1.4, given that the 1.4 paper is already published, but 1.4 is still not release-ready. If we don't, then let's hold off on the merge until after 1.4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-634141409
https://github.com/psi4/psi4/pull/1901#issuecomment-634141409:707,Integrability,depend,dependencies,707,"This is just about as far as this PR is going to go. Fully removing memory_manager would require a way to store how much memory has been ""spent."" Keeping track of that without globals requires a wavefunction. Once the wavefunction is in place to track memory, the MemoryManager can be removed from psimrcc without much hassle. Two issues before potentially merging this:; 1. I want to do some profiling to make sure that none of my pointer -> std::vector replacements hit performance. `.data()` and passing const refs is enough, according to my very preliminary tests, but I'll do some more in-depth ones once I figure out how to use VTune.; 2. Do we want this as a 1.4 target? We really don't need more PR dependencies before 1.4, given that the 1.4 paper is already published, but 1.4 is still not release-ready. If we don't, then let's hold off on the merge until after 1.4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-634141409
https://github.com/psi4/psi4/pull/1901#issuecomment-634141409:472,Performance,perform,performance,472,"This is just about as far as this PR is going to go. Fully removing memory_manager would require a way to store how much memory has been ""spent."" Keeping track of that without globals requires a wavefunction. Once the wavefunction is in place to track memory, the MemoryManager can be removed from psimrcc without much hassle. Two issues before potentially merging this:; 1. I want to do some profiling to make sure that none of my pointer -> std::vector replacements hit performance. `.data()` and passing const refs is enough, according to my very preliminary tests, but I'll do some more in-depth ones once I figure out how to use VTune.; 2. Do we want this as a 1.4 target? We really don't need more PR dependencies before 1.4, given that the 1.4 paper is already published, but 1.4 is still not release-ready. If we don't, then let's hold off on the merge until after 1.4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-634141409
https://github.com/psi4/psi4/pull/1901#issuecomment-634141409:562,Testability,test,tests,562,"This is just about as far as this PR is going to go. Fully removing memory_manager would require a way to store how much memory has been ""spent."" Keeping track of that without globals requires a wavefunction. Once the wavefunction is in place to track memory, the MemoryManager can be removed from psimrcc without much hassle. Two issues before potentially merging this:; 1. I want to do some profiling to make sure that none of my pointer -> std::vector replacements hit performance. `.data()` and passing const refs is enough, according to my very preliminary tests, but I'll do some more in-depth ones once I figure out how to use VTune.; 2. Do we want this as a 1.4 target? We really don't need more PR dependencies before 1.4, given that the 1.4 paper is already published, but 1.4 is still not release-ready. If we don't, then let's hold off on the merge until after 1.4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-634141409
https://github.com/psi4/psi4/pull/1901#issuecomment-634291955:46,Availability,error,error,46,"Yes, I tried the static_cast first. I get the error `static_cast from 'std::__1::vector<double, std::__1::allocator<double> >::value_type *' (aka 'double *') to 'char *' is not allowed`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-634291955
https://github.com/psi4/psi4/pull/1901#issuecomment-634505041:102,Performance,perform,performance,102,> 1. I want to do some profiling to make sure that none of my pointer -> std::vector replacements hit performance. I am in no way qualified to comment on the C++ pointer stuff. But I had a Intel VTune setup for this PR and [the profiling](https://github.com/psi4/psi4/files/4687387/result.txt) looks sufficiently clean.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-634505041
https://github.com/psi4/psi4/pull/1901#issuecomment-636794573:357,Deployability,update,update,357,"From my perspective, we need to figure out the tuple data type in `index.cc` before I can flatten the `tuple` member of the `IndexIterator`, before I can run final speed tests. I was hoping Jet could show me VTune by then, but if that doesn't happen, I'll just run some computations from Allen's recent paper using Mk-MRCC with both versions and see if the update causes notable slowdowns.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-636794573
https://github.com/psi4/psi4/pull/1901#issuecomment-636794573:170,Testability,test,tests,170,"From my perspective, we need to figure out the tuple data type in `index.cc` before I can flatten the `tuple` member of the `IndexIterator`, before I can run final speed tests. I was hoping Jet could show me VTune by then, but if that doesn't happen, I'll just run some computations from Allen's recent paper using Mk-MRCC with both versions and see if the update causes notable slowdowns.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-636794573
https://github.com/psi4/psi4/pull/1901#issuecomment-638154935:55,Testability,test,tests,55,I'm going to learn VTune and then start running timing tests. Let me know if there are any things you want me to be sure to test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-638154935
https://github.com/psi4/psi4/pull/1901#issuecomment-638154935:124,Testability,test,test,124,I'm going to learn VTune and then start running timing tests. Let me know if there are any things you want me to be sure to test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-638154935
https://github.com/psi4/psi4/pull/1901#issuecomment-638154935:13,Usability,learn,learn,13,I'm going to learn VTune and then start running timing tests. Let me know if there are any things you want me to be sure to test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-638154935
https://github.com/psi4/psi4/pull/1901#issuecomment-640146254:701,Energy Efficiency,efficient,efficient,701,"Now that I can run some VTune tests myself, there is definitely an efficiency hit from this PR. The explicit copy in the last commit contributes a _lot_ of overhead. If we want to flatten the tuples, this should be done in the index itself, not in the `IndexIterator`. With that commit reverted, we're looking at 62.4 seconds (pre-PR) vs 75.5 seconds (post-PR) for an Mk-MRCCSD(T) single point with 82 basis functions divided into irreps of 53 and 29, in serial. I can give more detailed machine diagnostics if needed, but I think the point is clear. I'll work on getting the speed restored while waiting for reviews on my other live PR. This is a good opportunity to learn about how to make C++ code efficient, at least.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-640146254
https://github.com/psi4/psi4/pull/1901#issuecomment-640146254:30,Testability,test,tests,30,"Now that I can run some VTune tests myself, there is definitely an efficiency hit from this PR. The explicit copy in the last commit contributes a _lot_ of overhead. If we want to flatten the tuples, this should be done in the index itself, not in the `IndexIterator`. With that commit reverted, we're looking at 62.4 seconds (pre-PR) vs 75.5 seconds (post-PR) for an Mk-MRCCSD(T) single point with 82 basis functions divided into irreps of 53 and 29, in serial. I can give more detailed machine diagnostics if needed, but I think the point is clear. I'll work on getting the speed restored while waiting for reviews on my other live PR. This is a good opportunity to learn about how to make C++ code efficient, at least.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-640146254
https://github.com/psi4/psi4/pull/1901#issuecomment-640146254:544,Usability,clear,clear,544,"Now that I can run some VTune tests myself, there is definitely an efficiency hit from this PR. The explicit copy in the last commit contributes a _lot_ of overhead. If we want to flatten the tuples, this should be done in the index itself, not in the `IndexIterator`. With that commit reverted, we're looking at 62.4 seconds (pre-PR) vs 75.5 seconds (post-PR) for an Mk-MRCCSD(T) single point with 82 basis functions divided into irreps of 53 and 29, in serial. I can give more detailed machine diagnostics if needed, but I think the point is clear. I'll work on getting the speed restored while waiting for reviews on my other live PR. This is a good opportunity to learn about how to make C++ code efficient, at least.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-640146254
https://github.com/psi4/psi4/pull/1901#issuecomment-640146254:668,Usability,learn,learn,668,"Now that I can run some VTune tests myself, there is definitely an efficiency hit from this PR. The explicit copy in the last commit contributes a _lot_ of overhead. If we want to flatten the tuples, this should be done in the index itself, not in the `IndexIterator`. With that commit reverted, we're looking at 62.4 seconds (pre-PR) vs 75.5 seconds (post-PR) for an Mk-MRCCSD(T) single point with 82 basis functions divided into irreps of 53 and 29, in serial. I can give more detailed machine diagnostics if needed, but I think the point is clear. I'll work on getting the speed restored while waiting for reviews on my other live PR. This is a good opportunity to learn about how to make C++ code efficient, at least.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-640146254
https://github.com/psi4/psi4/pull/1901#issuecomment-641533934:382,Testability,test,tests,382,"After removing the last commit, new timings on CCQC machines for a system with 4 threads, 122 A' basis functions, 80 A'' basis functions, Mk-MRCCSD(T) on a trivial one-determinant model space: 1040s averaged over 5 runs before this PR, 995s averaged over 4 runs after. So once I got rid of that last commit, this PR is a small net speed _gain_ for PSIMRCC. I can run any additional tests if requested. . So I say it's time for a last review. (@andysim?). I just need to know what ""best practice"" for the commit history is. Reset away the last commit and force push, or create a new commit explicitly reverting the previous one? My vote is for the first one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-641533934
https://github.com/psi4/psi4/issues/1902#issuecomment-633174321:57,Testability,test,test,57,"It's no problem -- they're just warning that some of the test subset labels haven't been registered. All those warnings have vexed others, too, so it's set up to be fixed in #1351 and #1814 by the setup.cfg file. Thanks for the report!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902#issuecomment-633174321
https://github.com/psi4/psi4/pull/1904#issuecomment-1520899600:130,Deployability,release,release,130,"@susilehtola, I've switched the build-from-src libxc target to v6.1 somewhere, and I'll make sure that makes it into the psi v1.8 release. c-f packaging is already at v6.1. Is there anything else to do in psi4 libxc-wise? Otherwise, I'll bump this to v1.9.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1904#issuecomment-1520899600
https://github.com/psi4/psi4/pull/1904#issuecomment-1521696864:132,Deployability,release,release,132,"> @susilehtola, I've switched the build-from-src libxc target to v6.1 somewhere, and I'll make sure that makes it into the psi v1.8 release. c-f packaging is already at v6.1. Is there anything else to do in psi4 libxc-wise? Otherwise, I'll bump this to v1.9. No need to merge this in since the libxc master branch API breakage will still happen at some point. This is just here so that if people want to try out the master branch, they can...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1904#issuecomment-1521696864
https://github.com/psi4/psi4/issues/1907#issuecomment-634602517:101,Availability,error,error,101,"I see three different questions here:; 1. Is it possible to carry out MRCI in Psi?; 2. Can we get an error message better than a segfault, or for this not to segfault?; 3. Does the energy error indicate you've landed on the wrong electronic state? If so, how do you land on the right one?. My thoughts:. 1. Reading that paper, it looks like Sherrill and Piecuch did (as you suspected), a two-step computation. First, they did a CASSCF computation. Then they used the orbitals from that computation to do a RASCI computation. Then they fed those orbitals into a RAS computation to do their MRCI. That said, I cannot figure out what keywords they might have used to specify the right excitation levels. None of the keywords in the manual level.; 2. I would expect that the program should be able to accept orbitals this way. Unless another developer more experienced in detci sees otherwise, this looks to me a like a bug. I'll give some time for them to comment before investigating further myself.; 3. Just to be clear, do you have any reason to think that you landed on the C electronic state? If not, you may have landed on a different electronic state entirely. I recommend you look at the section of your SCF computation marked ""Final Occupation by Irrep"". Is that consistent with your desired electronic state? Is there any other low-lying electronic state that occupation could match?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517
https://github.com/psi4/psi4/issues/1907#issuecomment-634602517:188,Availability,error,error,188,"I see three different questions here:; 1. Is it possible to carry out MRCI in Psi?; 2. Can we get an error message better than a segfault, or for this not to segfault?; 3. Does the energy error indicate you've landed on the wrong electronic state? If so, how do you land on the right one?. My thoughts:. 1. Reading that paper, it looks like Sherrill and Piecuch did (as you suspected), a two-step computation. First, they did a CASSCF computation. Then they used the orbitals from that computation to do a RASCI computation. Then they fed those orbitals into a RAS computation to do their MRCI. That said, I cannot figure out what keywords they might have used to specify the right excitation levels. None of the keywords in the manual level.; 2. I would expect that the program should be able to accept orbitals this way. Unless another developer more experienced in detci sees otherwise, this looks to me a like a bug. I'll give some time for them to comment before investigating further myself.; 3. Just to be clear, do you have any reason to think that you landed on the C electronic state? If not, you may have landed on a different electronic state entirely. I recommend you look at the section of your SCF computation marked ""Final Occupation by Irrep"". Is that consistent with your desired electronic state? Is there any other low-lying electronic state that occupation could match?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517
https://github.com/psi4/psi4/issues/1907#issuecomment-634602517:181,Energy Efficiency,energy,energy,181,"I see three different questions here:; 1. Is it possible to carry out MRCI in Psi?; 2. Can we get an error message better than a segfault, or for this not to segfault?; 3. Does the energy error indicate you've landed on the wrong electronic state? If so, how do you land on the right one?. My thoughts:. 1. Reading that paper, it looks like Sherrill and Piecuch did (as you suspected), a two-step computation. First, they did a CASSCF computation. Then they used the orbitals from that computation to do a RASCI computation. Then they fed those orbitals into a RAS computation to do their MRCI. That said, I cannot figure out what keywords they might have used to specify the right excitation levels. None of the keywords in the manual level.; 2. I would expect that the program should be able to accept orbitals this way. Unless another developer more experienced in detci sees otherwise, this looks to me a like a bug. I'll give some time for them to comment before investigating further myself.; 3. Just to be clear, do you have any reason to think that you landed on the C electronic state? If not, you may have landed on a different electronic state entirely. I recommend you look at the section of your SCF computation marked ""Final Occupation by Irrep"". Is that consistent with your desired electronic state? Is there any other low-lying electronic state that occupation could match?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517
https://github.com/psi4/psi4/issues/1907#issuecomment-634602517:107,Integrability,message,message,107,"I see three different questions here:; 1. Is it possible to carry out MRCI in Psi?; 2. Can we get an error message better than a segfault, or for this not to segfault?; 3. Does the energy error indicate you've landed on the wrong electronic state? If so, how do you land on the right one?. My thoughts:. 1. Reading that paper, it looks like Sherrill and Piecuch did (as you suspected), a two-step computation. First, they did a CASSCF computation. Then they used the orbitals from that computation to do a RASCI computation. Then they fed those orbitals into a RAS computation to do their MRCI. That said, I cannot figure out what keywords they might have used to specify the right excitation levels. None of the keywords in the manual level.; 2. I would expect that the program should be able to accept orbitals this way. Unless another developer more experienced in detci sees otherwise, this looks to me a like a bug. I'll give some time for them to comment before investigating further myself.; 3. Just to be clear, do you have any reason to think that you landed on the C electronic state? If not, you may have landed on a different electronic state entirely. I recommend you look at the section of your SCF computation marked ""Final Occupation by Irrep"". Is that consistent with your desired electronic state? Is there any other low-lying electronic state that occupation could match?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517
https://github.com/psi4/psi4/issues/1907#issuecomment-634602517:1013,Usability,clear,clear,1013,"I see three different questions here:; 1. Is it possible to carry out MRCI in Psi?; 2. Can we get an error message better than a segfault, or for this not to segfault?; 3. Does the energy error indicate you've landed on the wrong electronic state? If so, how do you land on the right one?. My thoughts:. 1. Reading that paper, it looks like Sherrill and Piecuch did (as you suspected), a two-step computation. First, they did a CASSCF computation. Then they used the orbitals from that computation to do a RASCI computation. Then they fed those orbitals into a RAS computation to do their MRCI. That said, I cannot figure out what keywords they might have used to specify the right excitation levels. None of the keywords in the manual level.; 2. I would expect that the program should be able to accept orbitals this way. Unless another developer more experienced in detci sees otherwise, this looks to me a like a bug. I'll give some time for them to comment before investigating further myself.; 3. Just to be clear, do you have any reason to think that you landed on the C electronic state? If not, you may have landed on a different electronic state entirely. I recommend you look at the section of your SCF computation marked ""Final Occupation by Irrep"". Is that consistent with your desired electronic state? Is there any other low-lying electronic state that occupation could match?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517
https://github.com/psi4/psi4/issues/1907#issuecomment-639202060:420,Energy Efficiency,energy,energy,420,"@JonathonMisiewicz ; Thanks for you reply. Your comments summarized my questions very nicely. Now, I am just focusing on the CASSCF part first. ; I realized that there was a mistake in the 'docc' assignment in my previous run. The docc part should be: [3, 0, 0, 0, 0, 1, 1, 0]. I thought that I needed to exclude the restricted_docc in the docc input.; After correcting this mistake, I started calculating the potential energy curves (the lowest 6 Pi_g symmetry). However, I obtained some mysterious roots that I initially did not know what they were, but now I think these extra roots are the quintet (S=2) states that somehow show up in the calculation results, even though I asked for only the singlet (S=0) . In the figure titled as Singlet_pig, the blue dots are the singlet states and the yellow dots are what I believe the quintet states. Note that straight from the calculations, there are two states that converge to the lowest C+C dissociation limit (triplet P+triplet P). This can't happen because triplet P+triplet P dissociation channel correlates with only one singlet Pi_g state. Now, the red curves are from a calculation that explicitly calculates quintet Pi_g states. The red curves overlap well with the yellow dots (except for one curve, which I don't understand). If I took out the quintet states (by looking at the coefficients of the CI determinants), the remaining singlet potential energy curves (Pi_g +Phi_g symmetry) agree with CASSCF calculations from Molpro (provided by my collaborator; I was trying to reproduce his curves). I am wondering why do those quintet states show up in the calculation of singlet states. Similar things happen when I tried to calculate the triplet Pi_g states. More importantly, what should I do to avoid having higher multiplicity states from the calculation? Is there a keyword that I missed?. ![singlet_Pigs](https://user-images.githubusercontent.com/65833552/83825292-c1c90e00-a68d-11ea-9a30-1c0d8cdbdfe3.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-639202060
https://github.com/psi4/psi4/issues/1907#issuecomment-639202060:1407,Energy Efficiency,energy,energy,1407,"@JonathonMisiewicz ; Thanks for you reply. Your comments summarized my questions very nicely. Now, I am just focusing on the CASSCF part first. ; I realized that there was a mistake in the 'docc' assignment in my previous run. The docc part should be: [3, 0, 0, 0, 0, 1, 1, 0]. I thought that I needed to exclude the restricted_docc in the docc input.; After correcting this mistake, I started calculating the potential energy curves (the lowest 6 Pi_g symmetry). However, I obtained some mysterious roots that I initially did not know what they were, but now I think these extra roots are the quintet (S=2) states that somehow show up in the calculation results, even though I asked for only the singlet (S=0) . In the figure titled as Singlet_pig, the blue dots are the singlet states and the yellow dots are what I believe the quintet states. Note that straight from the calculations, there are two states that converge to the lowest C+C dissociation limit (triplet P+triplet P). This can't happen because triplet P+triplet P dissociation channel correlates with only one singlet Pi_g state. Now, the red curves are from a calculation that explicitly calculates quintet Pi_g states. The red curves overlap well with the yellow dots (except for one curve, which I don't understand). If I took out the quintet states (by looking at the coefficients of the CI determinants), the remaining singlet potential energy curves (Pi_g +Phi_g symmetry) agree with CASSCF calculations from Molpro (provided by my collaborator; I was trying to reproduce his curves). I am wondering why do those quintet states show up in the calculation of singlet states. Similar things happen when I tried to calculate the triplet Pi_g states. More importantly, what should I do to avoid having higher multiplicity states from the calculation? Is there a keyword that I missed?. ![singlet_Pigs](https://user-images.githubusercontent.com/65833552/83825292-c1c90e00-a68d-11ea-9a30-1c0d8cdbdfe3.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-639202060
https://github.com/psi4/psi4/issues/1907#issuecomment-639202060:1756,Safety,avoid,avoid,1756,"@JonathonMisiewicz ; Thanks for you reply. Your comments summarized my questions very nicely. Now, I am just focusing on the CASSCF part first. ; I realized that there was a mistake in the 'docc' assignment in my previous run. The docc part should be: [3, 0, 0, 0, 0, 1, 1, 0]. I thought that I needed to exclude the restricted_docc in the docc input.; After correcting this mistake, I started calculating the potential energy curves (the lowest 6 Pi_g symmetry). However, I obtained some mysterious roots that I initially did not know what they were, but now I think these extra roots are the quintet (S=2) states that somehow show up in the calculation results, even though I asked for only the singlet (S=0) . In the figure titled as Singlet_pig, the blue dots are the singlet states and the yellow dots are what I believe the quintet states. Note that straight from the calculations, there are two states that converge to the lowest C+C dissociation limit (triplet P+triplet P). This can't happen because triplet P+triplet P dissociation channel correlates with only one singlet Pi_g state. Now, the red curves are from a calculation that explicitly calculates quintet Pi_g states. The red curves overlap well with the yellow dots (except for one curve, which I don't understand). If I took out the quintet states (by looking at the coefficients of the CI determinants), the remaining singlet potential energy curves (Pi_g +Phi_g symmetry) agree with CASSCF calculations from Molpro (provided by my collaborator; I was trying to reproduce his curves). I am wondering why do those quintet states show up in the calculation of singlet states. Similar things happen when I tried to calculate the triplet Pi_g states. More importantly, what should I do to avoid having higher multiplicity states from the calculation? Is there a keyword that I missed?. ![singlet_Pigs](https://user-images.githubusercontent.com/65833552/83825292-c1c90e00-a68d-11ea-9a30-1c0d8cdbdfe3.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-639202060
https://github.com/psi4/psi4/issues/1907#issuecomment-639202988:761,Energy Efficiency,energy,energy,761,"@JonathonMisiewicz for completeness, at each R value, my CASSCF code is as follows. I change whether I want singlet, triplet, or quintet states by changing the number '1' in the c2_geometry section. I tried explicitly set S=0 in the detci module option, but did not change the results. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). c2_geometry = """"""; 0 1; c ; c 1 {0}; symmetry d2h; """"""; psi4.set_module_options('detci',{'num_roots': 24,'follow_root': 0,'NUM_DETS_PRINT': 40}); #'follow_root' is set to either 0 or 1, depending on the R value. casscf_energy = psi4.energy('casscf')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-639202988
https://github.com/psi4/psi4/issues/1907#issuecomment-639202988:714,Integrability,depend,depending,714,"@JonathonMisiewicz for completeness, at each R value, my CASSCF code is as follows. I change whether I want singlet, triplet, or quintet states by changing the number '1' in the c2_geometry section. I tried explicitly set S=0 in the detci module option, but did not change the results. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). c2_geometry = """"""; 0 1; c ; c 1 {0}; symmetry d2h; """"""; psi4.set_module_options('detci',{'num_roots': 24,'follow_root': 0,'NUM_DETS_PRINT': 40}); #'follow_root' is set to either 0 or 1, depending on the R value. casscf_energy = psi4.energy('casscf')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-639202988
https://github.com/psi4/psi4/issues/1907#issuecomment-641504469:133,Availability,error,error,133,"Thanks for waiting. I've had a lot to do lately. Psi4 isn't interpreting your input file like you intended. Psi4 1.4 will contain an error message indicating something is an amiss. The first issue is that you never actually create a molecule in the input fragment you gave me. Maybe you account for this in the full script, but if you don't, supply your string to the function `psi4.geometry`. The second issue is a deeper one. Psi interprets all singly-occupied orbitals as alpha orbitals, so Psi sees your input file and thinks you want a singlet with two unpaired alpha electrons. That's physical nonsense, so Psi4 will (in an error message we added in 1.4) complain and refuse to proceed. In 1.3, it will not be smart enough to realize an issue, proceed, and potentially give nonsense. Of course, what you want is a singlet diradical ROHF state, with an unpaired alpha electron and an unpaired beta electron in each determinant in your linear combination. I know how to tell Psi you want a singlet, but I'm not aware of any way to further specify that you want a singlet diradical ROHF state. Is there a reason why you need the diradical to be the starting point for your CASSCF?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641504469
https://github.com/psi4/psi4/issues/1907#issuecomment-641504469:630,Availability,error,error,630,"Thanks for waiting. I've had a lot to do lately. Psi4 isn't interpreting your input file like you intended. Psi4 1.4 will contain an error message indicating something is an amiss. The first issue is that you never actually create a molecule in the input fragment you gave me. Maybe you account for this in the full script, but if you don't, supply your string to the function `psi4.geometry`. The second issue is a deeper one. Psi interprets all singly-occupied orbitals as alpha orbitals, so Psi sees your input file and thinks you want a singlet with two unpaired alpha electrons. That's physical nonsense, so Psi4 will (in an error message we added in 1.4) complain and refuse to proceed. In 1.3, it will not be smart enough to realize an issue, proceed, and potentially give nonsense. Of course, what you want is a singlet diradical ROHF state, with an unpaired alpha electron and an unpaired beta electron in each determinant in your linear combination. I know how to tell Psi you want a singlet, but I'm not aware of any way to further specify that you want a singlet diradical ROHF state. Is there a reason why you need the diradical to be the starting point for your CASSCF?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641504469
https://github.com/psi4/psi4/issues/1907#issuecomment-641504469:139,Integrability,message,message,139,"Thanks for waiting. I've had a lot to do lately. Psi4 isn't interpreting your input file like you intended. Psi4 1.4 will contain an error message indicating something is an amiss. The first issue is that you never actually create a molecule in the input fragment you gave me. Maybe you account for this in the full script, but if you don't, supply your string to the function `psi4.geometry`. The second issue is a deeper one. Psi interprets all singly-occupied orbitals as alpha orbitals, so Psi sees your input file and thinks you want a singlet with two unpaired alpha electrons. That's physical nonsense, so Psi4 will (in an error message we added in 1.4) complain and refuse to proceed. In 1.3, it will not be smart enough to realize an issue, proceed, and potentially give nonsense. Of course, what you want is a singlet diradical ROHF state, with an unpaired alpha electron and an unpaired beta electron in each determinant in your linear combination. I know how to tell Psi you want a singlet, but I'm not aware of any way to further specify that you want a singlet diradical ROHF state. Is there a reason why you need the diradical to be the starting point for your CASSCF?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641504469
https://github.com/psi4/psi4/issues/1907#issuecomment-641504469:636,Integrability,message,message,636,"Thanks for waiting. I've had a lot to do lately. Psi4 isn't interpreting your input file like you intended. Psi4 1.4 will contain an error message indicating something is an amiss. The first issue is that you never actually create a molecule in the input fragment you gave me. Maybe you account for this in the full script, but if you don't, supply your string to the function `psi4.geometry`. The second issue is a deeper one. Psi interprets all singly-occupied orbitals as alpha orbitals, so Psi sees your input file and thinks you want a singlet with two unpaired alpha electrons. That's physical nonsense, so Psi4 will (in an error message we added in 1.4) complain and refuse to proceed. In 1.3, it will not be smart enough to realize an issue, proceed, and potentially give nonsense. Of course, what you want is a singlet diradical ROHF state, with an unpaired alpha electron and an unpaired beta electron in each determinant in your linear combination. I know how to tell Psi you want a singlet, but I'm not aware of any way to further specify that you want a singlet diradical ROHF state. Is there a reason why you need the diradical to be the starting point for your CASSCF?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641504469
https://github.com/psi4/psi4/issues/1907#issuecomment-641531132:103,Energy Efficiency,energy,energy,103,"@JonathonMisiewicz Thanks for your response; In the loop over R that I used to calculate the potential energy curves, I do have the ""c2 = psi4.geometry(c2_geometry.format(R))"" command, with c2_geometry defined in an earlier thread. Regarding why I use a singlet diradical ROHF reference: it looks like, based on the DETCI module manual, DETCI only calculates excited states with the same irrep as the reference, and there is not a keyword for me to select irrep symmetry (please correct me if I am wrong here). As a result, in order for me to calculate the Pi_g manifold states (B2g+B3g in D2h), I need to use a B2g (or B3g) reference state, which for C2 (with an even number of total electron) is at least a biradical state. Also, as I mentioned before, I encountered the same problem when I calculated the triplet Pi_g manifold states, for which the issue with the alpha electrons in the ROHF reference shouldn't be an issue, right? (see the figure below for the triplet-state manifold, the yellow dots are what I think the quintet states). ![triplet_Pigs](https://user-images.githubusercontent.com/65833552/84192270-9871fe80-aa4e-11ea-84b3-9b8dd486edfe.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641531132
https://github.com/psi4/psi4/issues/1907#issuecomment-641533432:1155,Energy Efficiency,energy,energy,1155,"@JonathonMisiewicz for completeness, here is my full code (the indentation doesn't come out right...). Note that in order to create smooth curves, in the loop over R, I switch from following root 0 to root 1 due to the crossing of the lowest quintet state with the lowest singlet state. import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). c2_geometry = """"""; 0 1; c ; c 1 {0}; symmetry d2h; """""". #singlet; a_end=1.325; b_start=1.355; b_num=20; aa=np.linspace(1,1.2,6); a=np.linspace(1.25,a_end,3) ; b=np.linspace(b_start,2.5,b_num); c=np.linspace(2.6,4,8); Rvals=np.concatenate((aa,a, b, c), axis=None). ecp = {}. for R in Rvals:; if R<=a_end:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 0,'NUM_DETS_PRINT': 40}); elif R>=b_start:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 1,'NUM_DETS_PRINT': 40}); c2 = psi4.geometry(c2_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' %0),; psi4.core.variable('ci root %d TOTAL ENERGY' %1),; psi4.core.variable('ci root %d TOTAL ENERGY' %2)]; psi4.core.clean()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641533432
https://github.com/psi4/psi4/issues/1907#issuecomment-641533432:1236,Energy Efficiency,ENERGY,ENERGY,1236,"@JonathonMisiewicz for completeness, here is my full code (the indentation doesn't come out right...). Note that in order to create smooth curves, in the loop over R, I switch from following root 0 to root 1 due to the crossing of the lowest quintet state with the lowest singlet state. import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). c2_geometry = """"""; 0 1; c ; c 1 {0}; symmetry d2h; """""". #singlet; a_end=1.325; b_start=1.355; b_num=20; aa=np.linspace(1,1.2,6); a=np.linspace(1.25,a_end,3) ; b=np.linspace(b_start,2.5,b_num); c=np.linspace(2.6,4,8); Rvals=np.concatenate((aa,a, b, c), axis=None). ecp = {}. for R in Rvals:; if R<=a_end:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 0,'NUM_DETS_PRINT': 40}); elif R>=b_start:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 1,'NUM_DETS_PRINT': 40}); c2 = psi4.geometry(c2_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' %0),; psi4.core.variable('ci root %d TOTAL ENERGY' %1),; psi4.core.variable('ci root %d TOTAL ENERGY' %2)]; psi4.core.clean()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641533432
https://github.com/psi4/psi4/issues/1907#issuecomment-641533432:1287,Energy Efficiency,ENERGY,ENERGY,1287,"@JonathonMisiewicz for completeness, here is my full code (the indentation doesn't come out right...). Note that in order to create smooth curves, in the loop over R, I switch from following root 0 to root 1 due to the crossing of the lowest quintet state with the lowest singlet state. import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). c2_geometry = """"""; 0 1; c ; c 1 {0}; symmetry d2h; """""". #singlet; a_end=1.325; b_start=1.355; b_num=20; aa=np.linspace(1,1.2,6); a=np.linspace(1.25,a_end,3) ; b=np.linspace(b_start,2.5,b_num); c=np.linspace(2.6,4,8); Rvals=np.concatenate((aa,a, b, c), axis=None). ecp = {}. for R in Rvals:; if R<=a_end:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 0,'NUM_DETS_PRINT': 40}); elif R>=b_start:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 1,'NUM_DETS_PRINT': 40}); c2 = psi4.geometry(c2_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' %0),; psi4.core.variable('ci root %d TOTAL ENERGY' %1),; psi4.core.variable('ci root %d TOTAL ENERGY' %2)]; psi4.core.clean()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641533432
https://github.com/psi4/psi4/issues/1907#issuecomment-641533432:1338,Energy Efficiency,ENERGY,ENERGY,1338,"@JonathonMisiewicz for completeness, here is my full code (the indentation doesn't come out right...). Note that in order to create smooth curves, in the loop over R, I switch from following root 0 to root 1 due to the crossing of the lowest quintet state with the lowest singlet state. import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). c2_geometry = """"""; 0 1; c ; c 1 {0}; symmetry d2h; """""". #singlet; a_end=1.325; b_start=1.355; b_num=20; aa=np.linspace(1,1.2,6); a=np.linspace(1.25,a_end,3) ; b=np.linspace(b_start,2.5,b_num); c=np.linspace(2.6,4,8); Rvals=np.concatenate((aa,a, b, c), axis=None). ecp = {}. for R in Rvals:; if R<=a_end:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 0,'NUM_DETS_PRINT': 40}); elif R>=b_start:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 1,'NUM_DETS_PRINT': 40}); c2 = psi4.geometry(c2_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' %0),; psi4.core.variable('ci root %d TOTAL ENERGY' %1),; psi4.core.variable('ci root %d TOTAL ENERGY' %2)]; psi4.core.clean()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641533432
https://github.com/psi4/psi4/issues/1907#issuecomment-641533432:1209,Modifiability,variab,variable,1209,"@JonathonMisiewicz for completeness, here is my full code (the indentation doesn't come out right...). Note that in order to create smooth curves, in the loop over R, I switch from following root 0 to root 1 due to the crossing of the lowest quintet state with the lowest singlet state. import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). c2_geometry = """"""; 0 1; c ; c 1 {0}; symmetry d2h; """""". #singlet; a_end=1.325; b_start=1.355; b_num=20; aa=np.linspace(1,1.2,6); a=np.linspace(1.25,a_end,3) ; b=np.linspace(b_start,2.5,b_num); c=np.linspace(2.6,4,8); Rvals=np.concatenate((aa,a, b, c), axis=None). ecp = {}. for R in Rvals:; if R<=a_end:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 0,'NUM_DETS_PRINT': 40}); elif R>=b_start:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 1,'NUM_DETS_PRINT': 40}); c2 = psi4.geometry(c2_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' %0),; psi4.core.variable('ci root %d TOTAL ENERGY' %1),; psi4.core.variable('ci root %d TOTAL ENERGY' %2)]; psi4.core.clean()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641533432
https://github.com/psi4/psi4/issues/1907#issuecomment-641533432:1260,Modifiability,variab,variable,1260,"@JonathonMisiewicz for completeness, here is my full code (the indentation doesn't come out right...). Note that in order to create smooth curves, in the loop over R, I switch from following root 0 to root 1 due to the crossing of the lowest quintet state with the lowest singlet state. import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). c2_geometry = """"""; 0 1; c ; c 1 {0}; symmetry d2h; """""". #singlet; a_end=1.325; b_start=1.355; b_num=20; aa=np.linspace(1,1.2,6); a=np.linspace(1.25,a_end,3) ; b=np.linspace(b_start,2.5,b_num); c=np.linspace(2.6,4,8); Rvals=np.concatenate((aa,a, b, c), axis=None). ecp = {}. for R in Rvals:; if R<=a_end:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 0,'NUM_DETS_PRINT': 40}); elif R>=b_start:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 1,'NUM_DETS_PRINT': 40}); c2 = psi4.geometry(c2_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' %0),; psi4.core.variable('ci root %d TOTAL ENERGY' %1),; psi4.core.variable('ci root %d TOTAL ENERGY' %2)]; psi4.core.clean()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641533432
https://github.com/psi4/psi4/issues/1907#issuecomment-641533432:1311,Modifiability,variab,variable,1311,"@JonathonMisiewicz for completeness, here is my full code (the indentation doesn't come out right...). Note that in order to create smooth curves, in the loop over R, I switch from following root 0 to root 1 due to the crossing of the lowest quintet state with the lowest singlet state. import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). c2_geometry = """"""; 0 1; c ; c 1 {0}; symmetry d2h; """""". #singlet; a_end=1.325; b_start=1.355; b_num=20; aa=np.linspace(1,1.2,6); a=np.linspace(1.25,a_end,3) ; b=np.linspace(b_start,2.5,b_num); c=np.linspace(2.6,4,8); Rvals=np.concatenate((aa,a, b, c), axis=None). ecp = {}. for R in Rvals:; if R<=a_end:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 0,'NUM_DETS_PRINT': 40}); elif R>=b_start:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 1,'NUM_DETS_PRINT': 40}); c2 = psi4.geometry(c2_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' %0),; psi4.core.variable('ci root %d TOTAL ENERGY' %1),; psi4.core.variable('ci root %d TOTAL ENERGY' %2)]; psi4.core.clean()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641533432
https://github.com/psi4/psi4/issues/1907#issuecomment-643464569:280,Energy Efficiency,energy,energy,280,"You're correct: DETCI only calculates excited states with the same irrep as the reference, and there is no keyword to select irrep symmetry directly. It's been a few years since I've had to worry about diatomic symmetry, but let's see if I remember how this works. The two lowest energy singlet Pi gerade states are going to be [Be]p+ap-b and [Be]p-ap+b. However, Psi4 doesn't believe in complex orbitals. Ignoring normalization, p+ = px + i py, and p- = px - i py. Then using multilinearity of determinants, our states become (pxa + i pya)(pxb - i pyb) and (pxa - i pya)(pxb + i pyb) equalling (pxa pxb + i pya pxb - i pxa pyb + pya pyb) and (pxa pxb - i pya pxb + i pxa pyb + pya pyb). However, Psi4 doesn't believe in imaginary numbers. Taking the plus linear combination gives us (pxa pxb + pya pyb), and taking the - linear combination and normalizing away i gives us (pya pxb + pxa pyb). The conclusion of all this math is that because Psi4 doesn't use complex orbitals or complex linear combinations, the electronic states you're looking for are simply **not** going to be well-described by a single (real) Slater Determinant. The only solution I see is to make peace with that and modify your target symmetry to match one of those determinants. pxa pxb does not look like a diradical to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-643464569
https://github.com/psi4/psi4/issues/1907#issuecomment-643464569:1053,Usability,simpl,simply,1053,"You're correct: DETCI only calculates excited states with the same irrep as the reference, and there is no keyword to select irrep symmetry directly. It's been a few years since I've had to worry about diatomic symmetry, but let's see if I remember how this works. The two lowest energy singlet Pi gerade states are going to be [Be]p+ap-b and [Be]p-ap+b. However, Psi4 doesn't believe in complex orbitals. Ignoring normalization, p+ = px + i py, and p- = px - i py. Then using multilinearity of determinants, our states become (pxa + i pya)(pxb - i pyb) and (pxa - i pya)(pxb + i pyb) equalling (pxa pxb + i pya pxb - i pxa pyb + pya pyb) and (pxa pxb - i pya pxb + i pxa pyb + pya pyb). However, Psi4 doesn't believe in imaginary numbers. Taking the plus linear combination gives us (pxa pxb + pya pyb), and taking the - linear combination and normalizing away i gives us (pya pxb + pxa pyb). The conclusion of all this math is that because Psi4 doesn't use complex orbitals or complex linear combinations, the electronic states you're looking for are simply **not** going to be well-described by a single (real) Slater Determinant. The only solution I see is to make peace with that and modify your target symmetry to match one of those determinants. pxa pxb does not look like a diradical to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-643464569
https://github.com/psi4/psi4/issues/1908#issuecomment-634507089:389,Energy Efficiency,energy,energy,389,"I can reproduce this on master.; ```; ==> X2C Options <==. Computational Basis: CC-PVDZ-DECON; X2C Basis: CC-PVDZ-DECON; The X2C Hamiltonian will be computed in the X2C Basis. The 1-norm of |H_X2C - H_Dirac| is: 1040988.405696207308. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set.; ```; The energy is indeed plain wrong:; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 1: 483.09851658637217 4.83099e+02 6.47211e-01 DIIS; @DF-RHF iter 2: 48.89367873325060 -4.34205e+02 2.53817e-03 DIIS; @DF-RHF iter 3: 48.74097828423334 -1.52700e-01 5.96653e-04 DIIS; @DF-RHF iter 4: 48.72809517290153 -1.28831e-02 1.39212e-04 DIIS; @DF-RHF iter 5: 48.72728746065854 -8.07712e-04 2.56404e-05 DIIS; @DF-RHF iter 6: 48.72725943229844 -2.80284e-05 2.44921e-06 DIIS; @DF-RHF iter 7: 48.72725920400116 -2.28297e-07 3.81928e-07 DIIS; Energy and wave function converged.; ```; but it would be good to have a correct reference value...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1908#issuecomment-634507089
https://github.com/psi4/psi4/issues/1908#issuecomment-634507089:451,Energy Efficiency,Energy,Energy,451,"I can reproduce this on master.; ```; ==> X2C Options <==. Computational Basis: CC-PVDZ-DECON; X2C Basis: CC-PVDZ-DECON; The X2C Hamiltonian will be computed in the X2C Basis. The 1-norm of |H_X2C - H_Dirac| is: 1040988.405696207308. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set.; ```; The energy is indeed plain wrong:; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 1: 483.09851658637217 4.83099e+02 6.47211e-01 DIIS; @DF-RHF iter 2: 48.89367873325060 -4.34205e+02 2.53817e-03 DIIS; @DF-RHF iter 3: 48.74097828423334 -1.52700e-01 5.96653e-04 DIIS; @DF-RHF iter 4: 48.72809517290153 -1.28831e-02 1.39212e-04 DIIS; @DF-RHF iter 5: 48.72728746065854 -8.07712e-04 2.56404e-05 DIIS; @DF-RHF iter 6: 48.72725943229844 -2.80284e-05 2.44921e-06 DIIS; @DF-RHF iter 7: 48.72725920400116 -2.28297e-07 3.81928e-07 DIIS; Energy and wave function converged.; ```; but it would be good to have a correct reference value...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1908#issuecomment-634507089
https://github.com/psi4/psi4/issues/1908#issuecomment-634507089:934,Energy Efficiency,Energy,Energy,934,"I can reproduce this on master.; ```; ==> X2C Options <==. Computational Basis: CC-PVDZ-DECON; X2C Basis: CC-PVDZ-DECON; The X2C Hamiltonian will be computed in the X2C Basis. The 1-norm of |H_X2C - H_Dirac| is: 1040988.405696207308. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set.; ```; The energy is indeed plain wrong:; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 1: 483.09851658637217 4.83099e+02 6.47211e-01 DIIS; @DF-RHF iter 2: 48.89367873325060 -4.34205e+02 2.53817e-03 DIIS; @DF-RHF iter 3: 48.74097828423334 -1.52700e-01 5.96653e-04 DIIS; @DF-RHF iter 4: 48.72809517290153 -1.28831e-02 1.39212e-04 DIIS; @DF-RHF iter 5: 48.72728746065854 -8.07712e-04 2.56404e-05 DIIS; @DF-RHF iter 6: 48.72725943229844 -2.80284e-05 2.44921e-06 DIIS; @DF-RHF iter 7: 48.72725920400116 -2.28297e-07 3.81928e-07 DIIS; Energy and wave function converged.; ```; but it would be good to have a correct reference value...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1908#issuecomment-634507089
https://github.com/psi4/psi4/pull/1909#issuecomment-634844139:58,Energy Efficiency,adapt,adapted,58,Would there be tests (names/descriptions) that need to be adapted?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634844139
https://github.com/psi4/psi4/pull/1909#issuecomment-634844139:58,Modifiability,adapt,adapted,58,Would there be tests (names/descriptions) that need to be adapted?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634844139
https://github.com/psi4/psi4/pull/1909#issuecomment-634844139:15,Testability,test,tests,15,Would there be tests (names/descriptions) that need to be adapted?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634844139
https://github.com/psi4/psi4/pull/1909#issuecomment-634866678:44,Testability,test,tests,44,"Oh, I had forgotten. Yes, quite a few `occ` tests. I'm renaming anything from `occ` cepa to `lccd`, changing the `ocepa` test marker to `olccd`, changing the `cepa` marker for occ tests to `lccd`, and adding `lccd` to `cepa-module`, which tests all of them. However, even after renaming the redirectories, updating `tests/CMakeLists.txt`, and making a new `objdir` from scratch, I'm _still_ getting `ocepa*` test folders. Any ideas why?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634866678
https://github.com/psi4/psi4/pull/1909#issuecomment-634866678:121,Testability,test,test,121,"Oh, I had forgotten. Yes, quite a few `occ` tests. I'm renaming anything from `occ` cepa to `lccd`, changing the `ocepa` test marker to `olccd`, changing the `cepa` marker for occ tests to `lccd`, and adding `lccd` to `cepa-module`, which tests all of them. However, even after renaming the redirectories, updating `tests/CMakeLists.txt`, and making a new `objdir` from scratch, I'm _still_ getting `ocepa*` test folders. Any ideas why?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634866678
https://github.com/psi4/psi4/pull/1909#issuecomment-634866678:180,Testability,test,tests,180,"Oh, I had forgotten. Yes, quite a few `occ` tests. I'm renaming anything from `occ` cepa to `lccd`, changing the `ocepa` test marker to `olccd`, changing the `cepa` marker for occ tests to `lccd`, and adding `lccd` to `cepa-module`, which tests all of them. However, even after renaming the redirectories, updating `tests/CMakeLists.txt`, and making a new `objdir` from scratch, I'm _still_ getting `ocepa*` test folders. Any ideas why?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634866678
https://github.com/psi4/psi4/pull/1909#issuecomment-634866678:239,Testability,test,tests,239,"Oh, I had forgotten. Yes, quite a few `occ` tests. I'm renaming anything from `occ` cepa to `lccd`, changing the `ocepa` test marker to `olccd`, changing the `cepa` marker for occ tests to `lccd`, and adding `lccd` to `cepa-module`, which tests all of them. However, even after renaming the redirectories, updating `tests/CMakeLists.txt`, and making a new `objdir` from scratch, I'm _still_ getting `ocepa*` test folders. Any ideas why?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634866678
https://github.com/psi4/psi4/pull/1909#issuecomment-634866678:316,Testability,test,tests,316,"Oh, I had forgotten. Yes, quite a few `occ` tests. I'm renaming anything from `occ` cepa to `lccd`, changing the `ocepa` test marker to `olccd`, changing the `cepa` marker for occ tests to `lccd`, and adding `lccd` to `cepa-module`, which tests all of them. However, even after renaming the redirectories, updating `tests/CMakeLists.txt`, and making a new `objdir` from scratch, I'm _still_ getting `ocepa*` test folders. Any ideas why?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634866678
https://github.com/psi4/psi4/pull/1909#issuecomment-634866678:408,Testability,test,test,408,"Oh, I had forgotten. Yes, quite a few `occ` tests. I'm renaming anything from `occ` cepa to `lccd`, changing the `ocepa` test marker to `olccd`, changing the `cepa` marker for occ tests to `lccd`, and adding `lccd` to `cepa-module`, which tests all of them. However, even after renaming the redirectories, updating `tests/CMakeLists.txt`, and making a new `objdir` from scratch, I'm _still_ getting `ocepa*` test folders. Any ideas why?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634866678
https://github.com/psi4/psi4/pull/1909#issuecomment-634869994:15,Testability,test,tests,15,"Definitely in `tests/`, not `samples/`? if the `ocepa*` tests are in objdir, it's because you'd have to rename inside the `tests/formerly-ocepa/CMakeLists.txt` add_test fn.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634869994
https://github.com/psi4/psi4/pull/1909#issuecomment-634869994:56,Testability,test,tests,56,"Definitely in `tests/`, not `samples/`? if the `ocepa*` tests are in objdir, it's because you'd have to rename inside the `tests/formerly-ocepa/CMakeLists.txt` add_test fn.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634869994
https://github.com/psi4/psi4/pull/1909#issuecomment-634869994:123,Testability,test,tests,123,"Definitely in `tests/`, not `samples/`? if the `ocepa*` tests are in objdir, it's because you'd have to rename inside the `tests/formerly-ocepa/CMakeLists.txt` add_test fn.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634869994
https://github.com/psi4/psi4/pull/1909#issuecomment-634883990:24,Testability,Test,Test,24,"As usual, Lori, thanks. Test renaming pushed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634883990
https://github.com/psi4/psi4/pull/1909#issuecomment-635262663:173,Testability,test,tests,173,"For those who have no idea what Lori and I are talking about, we're switching topics from standardizing method names to the fact that she's going to be standardizing method tests, and I have a reference implementation that can be used to confirm those tests are correct. Test standardization is not directly relevant to this PR. I didn't run comparisons on the LCCD code in `occ`, only the OLCCD code. That said, if you tell me what comparisons you want, I can run them by just commenting out the line in my code that rotates the orbitals. I can do all-electron or frozen core LCCD with conventional integrals. It'll take me a bit of work to get DF-LCCD, but that is something I need to do sooner or later, and this is a decent time for me to do it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635262663
https://github.com/psi4/psi4/pull/1909#issuecomment-635262663:252,Testability,test,tests,252,"For those who have no idea what Lori and I are talking about, we're switching topics from standardizing method names to the fact that she's going to be standardizing method tests, and I have a reference implementation that can be used to confirm those tests are correct. Test standardization is not directly relevant to this PR. I didn't run comparisons on the LCCD code in `occ`, only the OLCCD code. That said, if you tell me what comparisons you want, I can run them by just commenting out the line in my code that rotates the orbitals. I can do all-electron or frozen core LCCD with conventional integrals. It'll take me a bit of work to get DF-LCCD, but that is something I need to do sooner or later, and this is a decent time for me to do it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635262663
https://github.com/psi4/psi4/pull/1909#issuecomment-635262663:271,Testability,Test,Test,271,"For those who have no idea what Lori and I are talking about, we're switching topics from standardizing method names to the fact that she's going to be standardizing method tests, and I have a reference implementation that can be used to confirm those tests are correct. Test standardization is not directly relevant to this PR. I didn't run comparisons on the LCCD code in `occ`, only the OLCCD code. That said, if you tell me what comparisons you want, I can run them by just commenting out the line in my code that rotates the orbitals. I can do all-electron or frozen core LCCD with conventional integrals. It'll take me a bit of work to get DF-LCCD, but that is something I need to do sooner or later, and this is a decent time for me to do it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635262663
https://github.com/psi4/psi4/pull/1909#issuecomment-635391683:787,Availability,redundant,redundant,787,"* these four mols https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/standard_suite_ref.py#L12-L40; * rhf for hf & h2o. uhf/rohf for bh3p & nh2.; * cc-pvdz for hf & bh2p. aug-cc-pvdz & cfour-qz2p for h2o & nh2.; * conv, df, cd, though conv only is a fine start; * all-electron (ae) and frozen-core (fc); * lccd, olccd, lccsd all appreciated, though maybe your code doesn't cover the last; * energies and energy components of first priority, but should you have dipoles, gradients, etc., glad to collect them now. You don't have to do any of this -- I can take values from existing psi modules -- but an independent reference implementation is not to be sniffed at, and you can ensure psi will fail if it doesn't match you from here out. * either send me numbers (non-redundant; that is, corl, not corl and tot) or PR directly to qcengine (just that one standard_suite_ref.py file); * I'm only testing to 1.e-6 but refs generated with https://github.com/psi4/psi4/blob/master/tests/pytests/standard_suite_runner.py#L60-L63. I'll merge this PR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683
https://github.com/psi4/psi4/pull/1909#issuecomment-635391683:424,Energy Efficiency,energy,energy,424,"* these four mols https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/standard_suite_ref.py#L12-L40; * rhf for hf & h2o. uhf/rohf for bh3p & nh2.; * cc-pvdz for hf & bh2p. aug-cc-pvdz & cfour-qz2p for h2o & nh2.; * conv, df, cd, though conv only is a fine start; * all-electron (ae) and frozen-core (fc); * lccd, olccd, lccsd all appreciated, though maybe your code doesn't cover the last; * energies and energy components of first priority, but should you have dipoles, gradients, etc., glad to collect them now. You don't have to do any of this -- I can take values from existing psi modules -- but an independent reference implementation is not to be sniffed at, and you can ensure psi will fail if it doesn't match you from here out. * either send me numbers (non-redundant; that is, corl, not corl and tot) or PR directly to qcengine (just that one standard_suite_ref.py file); * I'm only testing to 1.e-6 but refs generated with https://github.com/psi4/psi4/blob/master/tests/pytests/standard_suite_runner.py#L60-L63. I'll merge this PR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683
https://github.com/psi4/psi4/pull/1909#issuecomment-635391683:787,Safety,redund,redundant,787,"* these four mols https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/standard_suite_ref.py#L12-L40; * rhf for hf & h2o. uhf/rohf for bh3p & nh2.; * cc-pvdz for hf & bh2p. aug-cc-pvdz & cfour-qz2p for h2o & nh2.; * conv, df, cd, though conv only is a fine start; * all-electron (ae) and frozen-core (fc); * lccd, olccd, lccsd all appreciated, though maybe your code doesn't cover the last; * energies and energy components of first priority, but should you have dipoles, gradients, etc., glad to collect them now. You don't have to do any of this -- I can take values from existing psi modules -- but an independent reference implementation is not to be sniffed at, and you can ensure psi will fail if it doesn't match you from here out. * either send me numbers (non-redundant; that is, corl, not corl and tot) or PR directly to qcengine (just that one standard_suite_ref.py file); * I'm only testing to 1.e-6 but refs generated with https://github.com/psi4/psi4/blob/master/tests/pytests/standard_suite_runner.py#L60-L63. I'll merge this PR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683
https://github.com/psi4/psi4/pull/1909#issuecomment-635391683:83,Testability,test,tests,83,"* these four mols https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/standard_suite_ref.py#L12-L40; * rhf for hf & h2o. uhf/rohf for bh3p & nh2.; * cc-pvdz for hf & bh2p. aug-cc-pvdz & cfour-qz2p for h2o & nh2.; * conv, df, cd, though conv only is a fine start; * all-electron (ae) and frozen-core (fc); * lccd, olccd, lccsd all appreciated, though maybe your code doesn't cover the last; * energies and energy components of first priority, but should you have dipoles, gradients, etc., glad to collect them now. You don't have to do any of this -- I can take values from existing psi modules -- but an independent reference implementation is not to be sniffed at, and you can ensure psi will fail if it doesn't match you from here out. * either send me numbers (non-redundant; that is, corl, not corl and tot) or PR directly to qcengine (just that one standard_suite_ref.py file); * I'm only testing to 1.e-6 but refs generated with https://github.com/psi4/psi4/blob/master/tests/pytests/standard_suite_runner.py#L60-L63. I'll merge this PR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683
https://github.com/psi4/psi4/pull/1909#issuecomment-635391683:913,Testability,test,testing,913,"* these four mols https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/standard_suite_ref.py#L12-L40; * rhf for hf & h2o. uhf/rohf for bh3p & nh2.; * cc-pvdz for hf & bh2p. aug-cc-pvdz & cfour-qz2p for h2o & nh2.; * conv, df, cd, though conv only is a fine start; * all-electron (ae) and frozen-core (fc); * lccd, olccd, lccsd all appreciated, though maybe your code doesn't cover the last; * energies and energy components of first priority, but should you have dipoles, gradients, etc., glad to collect them now. You don't have to do any of this -- I can take values from existing psi modules -- but an independent reference implementation is not to be sniffed at, and you can ensure psi will fail if it doesn't match you from here out. * either send me numbers (non-redundant; that is, corl, not corl and tot) or PR directly to qcengine (just that one standard_suite_ref.py file); * I'm only testing to 1.e-6 but refs generated with https://github.com/psi4/psi4/blob/master/tests/pytests/standard_suite_runner.py#L60-L63. I'll merge this PR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683
https://github.com/psi4/psi4/pull/1909#issuecomment-635391683:995,Testability,test,tests,995,"* these four mols https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/standard_suite_ref.py#L12-L40; * rhf for hf & h2o. uhf/rohf for bh3p & nh2.; * cc-pvdz for hf & bh2p. aug-cc-pvdz & cfour-qz2p for h2o & nh2.; * conv, df, cd, though conv only is a fine start; * all-electron (ae) and frozen-core (fc); * lccd, olccd, lccsd all appreciated, though maybe your code doesn't cover the last; * energies and energy components of first priority, but should you have dipoles, gradients, etc., glad to collect them now. You don't have to do any of this -- I can take values from existing psi modules -- but an independent reference implementation is not to be sniffed at, and you can ensure psi will fail if it doesn't match you from here out. * either send me numbers (non-redundant; that is, corl, not corl and tot) or PR directly to qcengine (just that one standard_suite_ref.py file); * I'm only testing to 1.e-6 but refs generated with https://github.com/psi4/psi4/blob/master/tests/pytests/standard_suite_runner.py#L60-L63. I'll merge this PR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683
https://github.com/psi4/psi4/pull/1910#issuecomment-637050250:186,Testability,test,test,186,"I'm not sure what the conventions are, if any, for computing transition density matrices in other codes. Might see what a code like Q-Chem does. . I agree it'd be nice to have some OPDM test. Maybe some small test like H2 would suffice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1910#issuecomment-637050250
https://github.com/psi4/psi4/pull/1910#issuecomment-637050250:209,Testability,test,test,209,"I'm not sure what the conventions are, if any, for computing transition density matrices in other codes. Might see what a code like Q-Chem does. . I agree it'd be nice to have some OPDM test. Maybe some small test like H2 would suffice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1910#issuecomment-637050250
https://github.com/psi4/psi4/issues/1912#issuecomment-635991349:112,Availability,error,error,112,"If you're running py38 and you want an answer quickly, it's worth trying a py36 or py37 environment. There's an error in our use of pb11 binding that throws an error that looks like what you post that has to be corrected by inelegant python syntax. https://github.com/psi4/psi4/commit/8f2d9937b18ce4ad49067af3b762c7aa05653b66#diff-57fb1f3fea72e48dabd650189cf0fa94 Tends to show up for py38 and not earlier. More likely, it's a involved error. In either case, thanks for the report!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-635991349
https://github.com/psi4/psi4/issues/1912#issuecomment-635991349:160,Availability,error,error,160,"If you're running py38 and you want an answer quickly, it's worth trying a py36 or py37 environment. There's an error in our use of pb11 binding that throws an error that looks like what you post that has to be corrected by inelegant python syntax. https://github.com/psi4/psi4/commit/8f2d9937b18ce4ad49067af3b762c7aa05653b66#diff-57fb1f3fea72e48dabd650189cf0fa94 Tends to show up for py38 and not earlier. More likely, it's a involved error. In either case, thanks for the report!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-635991349
https://github.com/psi4/psi4/issues/1912#issuecomment-635991349:436,Availability,error,error,436,"If you're running py38 and you want an answer quickly, it's worth trying a py36 or py37 environment. There's an error in our use of pb11 binding that throws an error that looks like what you post that has to be corrected by inelegant python syntax. https://github.com/psi4/psi4/commit/8f2d9937b18ce4ad49067af3b762c7aa05653b66#diff-57fb1f3fea72e48dabd650189cf0fa94 Tends to show up for py38 and not earlier. More likely, it's a involved error. In either case, thanks for the report!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-635991349
https://github.com/psi4/psi4/issues/1912#issuecomment-635993245:32,Availability,error,error,32,I can reproduce this and get an error message about frozen virtual DF-CCSD gradients not being implemented in `dfocc`. That is not consistent with a pb11 problem.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-635993245
https://github.com/psi4/psi4/issues/1912#issuecomment-635993245:38,Integrability,message,message,38,I can reproduce this and get an error message about frozen virtual DF-CCSD gradients not being implemented in `dfocc`. That is not consistent with a pb11 problem.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-635993245
https://github.com/psi4/psi4/issues/1912#issuecomment-636201342:1225,Availability,avail,available,1225,"Dear All,. 1) For analytic gradients, one may follow NCG or SCG formalisms, as explained in the DF-CCSD(T) paper [J. Chem. Phys., 147, 044104. DOI: 10.1063/1.4994918]. The NCG formalism is numerically more stable. As far as I remember, all grad codes in Psi4 rely on the NCG formalism. 2) The cost of NCG and SCG are the same for CCSD. But in the case of CCSD(T), SCG has a lower cost (by 25%). 3) For all methods in DFOCC, I use NCG, while for DF-CCSD(T) I replaced the earlier NCG code with the SCG code because of significant cost reduction. . 4) In SCG, frozen cores and virtuals are already included because of the structure of the formalism, while one should additionally consider frozen core/virtual terms for NCG. . 5) As far as I remember, in the beginning, I discussed it with David, and he told me that frozen cores are enough for us since we generally do not use frozen virtual. Of course, he is right. Hence, I have only implement NCG for MP2...CCSD. 6) Normally DFOCC has both formalisms now, but only one of them is activated in the module for any method. It was my TODO list for a while, to activate both SCG and NCG for all methods. But it should be performed very carefully, hence; I keep it waiting for an available time. . 7) I will try to include it in the next major revision of DFOCC. Presently, we are working on UHF based grads for CC methods. Once, we complete the UHF grads, then I can activate frozen virtuals via SCG. But, it may take a while (:. @jgonthier @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-636201342
https://github.com/psi4/psi4/issues/1912#issuecomment-636201342:1167,Performance,perform,performed,1167,"Dear All,. 1) For analytic gradients, one may follow NCG or SCG formalisms, as explained in the DF-CCSD(T) paper [J. Chem. Phys., 147, 044104. DOI: 10.1063/1.4994918]. The NCG formalism is numerically more stable. As far as I remember, all grad codes in Psi4 rely on the NCG formalism. 2) The cost of NCG and SCG are the same for CCSD. But in the case of CCSD(T), SCG has a lower cost (by 25%). 3) For all methods in DFOCC, I use NCG, while for DF-CCSD(T) I replaced the earlier NCG code with the SCG code because of significant cost reduction. . 4) In SCG, frozen cores and virtuals are already included because of the structure of the formalism, while one should additionally consider frozen core/virtual terms for NCG. . 5) As far as I remember, in the beginning, I discussed it with David, and he told me that frozen cores are enough for us since we generally do not use frozen virtual. Of course, he is right. Hence, I have only implement NCG for MP2...CCSD. 6) Normally DFOCC has both formalisms now, but only one of them is activated in the module for any method. It was my TODO list for a while, to activate both SCG and NCG for all methods. But it should be performed very carefully, hence; I keep it waiting for an available time. . 7) I will try to include it in the next major revision of DFOCC. Presently, we are working on UHF based grads for CC methods. Once, we complete the UHF grads, then I can activate frozen virtuals via SCG. But, it may take a while (:. @jgonthier @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-636201342
https://github.com/psi4/psi4/issues/1912#issuecomment-636214829:254,Availability,error,error,254,"Thanks, @bozkaya, that's very useful information. I wasn't aware of it either, so we'll have to stuff your post into the docs so it's findable. The current standard suite pass is going through and making sure frozen core either works or prints a helpful error. I don't have ambitions to handle frozen virtual in this pass, but probing it should be a follow-up. For the particular DF-CCSD grad + frz virt, we can catch the case and error out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-636214829
https://github.com/psi4/psi4/issues/1912#issuecomment-636214829:431,Availability,error,error,431,"Thanks, @bozkaya, that's very useful information. I wasn't aware of it either, so we'll have to stuff your post into the docs so it's findable. The current standard suite pass is going through and making sure frozen core either works or prints a helpful error. I don't have ambitions to handle frozen virtual in this pass, but probing it should be a follow-up. For the particular DF-CCSD grad + frz virt, we can catch the case and error out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-636214829
https://github.com/psi4/psi4/pull/1915#issuecomment-636528291:16,Testability,test,test,16,"Yes, it was for test when I wrote first grad code. It includes scf grad and we may remove it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1915#issuecomment-636528291
https://github.com/psi4/psi4/issues/1916#issuecomment-639869519:443,Availability,error,error,443,"Got it. Expect a PR with the gory details and comments over the weekend. If anybody needs this _right away_, you need to change [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L2089-L2093) from; ```; PAbp[A][b] /= -(eps_avirp[b] - eps_fvirp[A]);; }; }. for (int B = 0; B < nfocc; B++) {; ```; to; ```; PAbp[A][b] /= (eps_avirp[b] - eps_fvirp[A]);; }; }. for (int B = 0; B < nfvir; B++) {; ```. There's a sign error, and you're looping over the wrong variable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1916#issuecomment-639869519
https://github.com/psi4/psi4/issues/1916#issuecomment-639869519:484,Modifiability,variab,variable,484,"Got it. Expect a PR with the gory details and comments over the weekend. If anybody needs this _right away_, you need to change [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L2089-L2093) from; ```; PAbp[A][b] /= -(eps_avirp[b] - eps_fvirp[A]);; }; }. for (int B = 0; B < nfocc; B++) {; ```; to; ```; PAbp[A][b] /= (eps_avirp[b] - eps_fvirp[A]);; }; }. for (int B = 0; B < nfvir; B++) {; ```. There's a sign error, and you're looping over the wrong variable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1916#issuecomment-639869519
https://github.com/psi4/psi4/issues/1920#issuecomment-639415988:85,Integrability,message,message,85,A `SyntaxError` in the traceback prints also the offending line before the exception message. That isn't caught.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1920#issuecomment-639415988
https://github.com/psi4/psi4/issues/1920#issuecomment-639484204:235,Availability,error,errors,235,"I haven't tested it, but one issues seems (as far as I read the traceback docs) that the exception message from the `SyntaxError` contains the offending line before the normal content, which is `ExceptionName: <text>`. . Though syntax errors usually crash for me like this:. ```; Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29; print '1'; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print('1')?. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 348, in <module>; suspect_lineno = traceback.extract_tb(exc_traceback)[1].lineno - 1 # -1 for 0 indexing; IndexError: list index out of range; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1920#issuecomment-639484204
https://github.com/psi4/psi4/issues/1920#issuecomment-639484204:99,Integrability,message,message,99,"I haven't tested it, but one issues seems (as far as I read the traceback docs) that the exception message from the `SyntaxError` contains the offending line before the normal content, which is `ExceptionName: <text>`. . Though syntax errors usually crash for me like this:. ```; Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29; print '1'; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print('1')?. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 348, in <module>; suspect_lineno = traceback.extract_tb(exc_traceback)[1].lineno - 1 # -1 for 0 indexing; IndexError: list index out of range; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1920#issuecomment-639484204
https://github.com/psi4/psi4/issues/1920#issuecomment-639484204:10,Testability,test,tested,10,"I haven't tested it, but one issues seems (as far as I read the traceback docs) that the exception message from the `SyntaxError` contains the offending line before the normal content, which is `ExceptionName: <text>`. . Though syntax errors usually crash for me like this:. ```; Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29; print '1'; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print('1')?. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 348, in <module>; suspect_lineno = traceback.extract_tb(exc_traceback)[1].lineno - 1 # -1 for 0 indexing; IndexError: list index out of range; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1920#issuecomment-639484204
https://github.com/psi4/psi4/issues/1921#issuecomment-639966320:387,Performance,optimiz,optimize,387,"Thanks loriab for your quick reply. I am working on a complex that contains Pd metal. It's a bit a large system. My input file looks like:. memory 2 GB; basis mybas{; assign 6-31+G**; assign Pd lanl2dz; }. set{; basis mybas; reference uhf; FREEZE_CORE True; maxiter 200; print_trajectory_xyz_file True; }. molecule {; 0 1; Here are my internal coordinates of the Pd-complex; }; m06_wfn= optimize('M06', return_wfn=True); molden(m06_wfn, 'm06_orbitals_opt.molden')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-639966320
https://github.com/psi4/psi4/issues/1921#issuecomment-640027123:440,Availability,error,errors,440,"We need the _entire_ input file. Issues become much easier to debug when we run the input file ourselves. I will say that 2 GB for an 82 atom system is smaller than I'd expect. If you're running this with threads, Psi distributes the memory you specify over _all threads_, so you need to input the total memory you're giving for the calculation. I work with much smaller systems, so I can't say whether or not you'd likely encounter memory errors at this scale.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640027123
https://github.com/psi4/psi4/issues/1921#issuecomment-640050708:3211,Performance,optimiz,optimize,3211,"8771 0.8345349 2.4380471; H 3.4723294 0.2985395 2.1138258; C 4.8833315 0.8242594 3.8339865; H 4.2106066 0.7640545 4.7169315; C 5.1352600 1.7388308 0.2154605; C 5.9367201 2.7180065 -0.4070459; H 6.5906010 3.3693857 0.1542320; C 5.8968481 2.8895370 -1.7876785; H 6.5102956 3.6525267 -2.2492787; C 5.0705595 2.0801358 -2.5660919; H 5.0459052 2.2150282 -3.6371008; C 4.2801843 1.0988215 -1.9619599; H 3.6456490 0.4646484 -2.5633688; C 4.3069360 0.9308698 -0.5777838; H 3.6946764 0.1590780 -0.1340784; Pd 4.9767091 -2.9156010 -0.8306564; Cl 3.4192488 -2.6431143 0.8822123; Cl 6.4966175 -3.2589661 -2.5675971; N 6.4035839 -3.3735495 0.5030511; N 6.1871875 -3.2211030 1.8618602; H 5.4954819 -2.5263042 2.2125460; N 3.5021334 -2.4381912 -2.1211903; N 3.5243915 -2.9396423 -3.4027689; H 4.3679055 -3.2478427 -3.8957127; C 7.4771967 -3.3701598 2.4264557; C 8.4189802 -3.8527379 1.4233890; H 9.4577596 -4.1288843 1.5525635; C 7.7219966 -3.8195570 0.2409887; H 8.1357666 -4.0945974 -0.7185031; C 7.7241254 -3.1038209 3.8339410; C 7.0325411 -2.0594134 4.4713758; H 6.3311040 -1.4377552 3.9310874; C 7.2755769 -1.7799172 5.8117697; H 6.7608347 -0.9578992 6.2880679; C 8.1817498 -2.5631263 6.5292546; H 8.3679609 -2.3509248 7.5705948; C 8.8458639 -3.6232926 5.9024611; H 9.5290436 -4.2449953 6.4602769; C 8.6312106 -3.8829756 4.5501667; H 9.1416492 -4.7076088 4.0686112; C 2.3148570 -2.6412247 -4.0406367; C 1.4430496 -2.1324266 -3.1729914; H 0.4299045 -1.8152948 -3.3765456; C 2.0956876 -2.1771295 -1.8399026; H 1.6924807 -1.8147056 -0.8735104; C 2.0987775 -2.8804341 -5.4680291; C 2.8176217 -3.9063691 -6.1045465; H 3.5215126 -4.5219624 -5.5560126; C 2.6007752 -4.1791261 -7.4518988; H 3.1399962 -4.9858220 -7.9301448; C 1.6833592 -3.4165632 -8.1761041; H 1.5175424 -3.6305460 -9.2208342; C 0.9806544 -2.3809082 -7.5519679; H 0.2780607 -1.7849973 -8.1154290; C 1.1799022 -2.1166497 -6.1970657; H 0.6369442 -1.3079212 -5.7230613; }; m06_wfn= optimize('M06', return_wfn=True); molden(m06_wfn, 'm06_orbitals.molden')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640050708
https://github.com/psi4/psi4/issues/1921#issuecomment-640054780:67,Availability,error,error,67,"I'm running this on my cluster. If your cluster returns additional error and output files other than the standard `output.dat`, could you check to see if those have any content?. Definitely let us know if the words ""Failed to converge"" show up. I have a suspicion as to what part of the code is the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640054780
https://github.com/psi4/psi4/issues/1921#issuecomment-640057899:60,Availability,error,errors,60,"Dear Jonathon,; Many thanks for your support. No additional errors have occurred, but the previous one that was mentioned to. If you can let me know about the result of your running job, it would be so appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640057899
https://github.com/psi4/psi4/issues/1921#issuecomment-640549188:457,Energy Efficiency,energy,energy,457,"This looks like the same issue as #1924, except #1924 is a much quicker computation to run. Unfortunately, I don't know what the issue here is and can't recommend a way around it. The other person with a similar issue said that switching to Cartesian coordinates helped them?. I'll add that the ECP gradient terms took a suspiciously long time to compute, and that the SCF iterations should have gone much faster. It took about 13 iterations(!) for the SCF energy to be to lower than the initial SCF guess energy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640549188
https://github.com/psi4/psi4/issues/1921#issuecomment-640549188:506,Energy Efficiency,energy,energy,506,"This looks like the same issue as #1924, except #1924 is a much quicker computation to run. Unfortunately, I don't know what the issue here is and can't recommend a way around it. The other person with a similar issue said that switching to Cartesian coordinates helped them?. I'll add that the ECP gradient terms took a suspiciously long time to compute, and that the SCF iterations should have gone much faster. It took about 13 iterations(!) for the SCF energy to be to lower than the initial SCF guess energy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640549188
https://github.com/psi4/psi4/issues/1921#issuecomment-640677559:85,Performance,optimiz,optimize,85,"@salarfaji My workaround was to call `set opt_coordinates cartesian` before calling `optimize()`. It seems like something goes wrong with using internal coordinates, but Cartesian have worked for me. (You could also try different coordinate options, as `set opt_coordinates both` also avoided this crash.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640677559
https://github.com/psi4/psi4/issues/1921#issuecomment-640677559:285,Safety,avoid,avoided,285,"@salarfaji My workaround was to call `set opt_coordinates cartesian` before calling `optimize()`. It seems like something goes wrong with using internal coordinates, but Cartesian have worked for me. (You could also try different coordinate options, as `set opt_coordinates both` also avoided this crash.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640677559
https://github.com/psi4/psi4/pull/1922#issuecomment-641529045:30,Energy Efficiency,power,power,30,"Just out of interest, can the power or R used in the Thole damping exponential be changed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1922#issuecomment-641529045
https://github.com/psi4/psi4/pull/1922#issuecomment-641532970:32,Energy Efficiency,power,power,32,"> Just out of interest, can the power or R used in the Thole damping exponential be changed?. I guess anything could in principle be customized... (probably not in the current version) 😄 Anything specific you have in mind?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1922#issuecomment-641532970
https://github.com/psi4/psi4/issues/1924#issuecomment-641876079:22,Availability,error,error,22,"I am getting `forrtl: error (76): Abort trap signal` error. Is that from that line?; It stops while printing the internal coordinate overview after printing the last angle value.; Presumably it tries to print a 4-center angle, there are 4 atoms after all, but no out-of-plane angle is found in the `intco` file. In C1 symmetry there should an out-of-plane angle coordinate.; The input works for a symmetrized Cs (planar) molecule that eliminates the out-of-plane mode. I cannot track it down further for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1924#issuecomment-641876079
https://github.com/psi4/psi4/issues/1924#issuecomment-641876079:53,Availability,error,error,53,"I am getting `forrtl: error (76): Abort trap signal` error. Is that from that line?; It stops while printing the internal coordinate overview after printing the last angle value.; Presumably it tries to print a 4-center angle, there are 4 atoms after all, but no out-of-plane angle is found in the `intco` file. In C1 symmetry there should an out-of-plane angle coordinate.; The input works for a symmetrized Cs (planar) molecule that eliminates the out-of-plane mode. I cannot track it down further for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1924#issuecomment-641876079
https://github.com/psi4/psi4/issues/1924#issuecomment-641876079:487,Availability,down,down,487,"I am getting `forrtl: error (76): Abort trap signal` error. Is that from that line?; It stops while printing the internal coordinate overview after printing the last angle value.; Presumably it tries to print a 4-center angle, there are 4 atoms after all, but no out-of-plane angle is found in the `intco` file. In C1 symmetry there should an out-of-plane angle coordinate.; The input works for a symmetrized Cs (planar) molecule that eliminates the out-of-plane mode. I cannot track it down further for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1924#issuecomment-641876079
https://github.com/psi4/psi4/issues/1924#issuecomment-641876079:34,Safety,Abort,Abort,34,"I am getting `forrtl: error (76): Abort trap signal` error. Is that from that line?; It stops while printing the internal coordinate overview after printing the last angle value.; Presumably it tries to print a 4-center angle, there are 4 atoms after all, but no out-of-plane angle is found in the `intco` file. In C1 symmetry there should an out-of-plane angle coordinate.; The input works for a symmetrized Cs (planar) molecule that eliminates the out-of-plane mode. I cannot track it down further for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1924#issuecomment-641876079
https://github.com/psi4/psi4/issues/1924#issuecomment-641913005:13,Safety,Abort,Abort,13,I'm getting `Abort trap: 6` instead. OPTKING expecting a dihedral to print would certainly explain why #1921 reports that moving to Cartesians fixes this. I think there's a good chance your diagnosis is right.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1924#issuecomment-641913005
https://github.com/psi4/psi4/issues/1924#issuecomment-689488825:287,Performance,optimiz,optimize,287,"Another, presumably similar, case from @fevangelista . ```; molecule {; O 0.611390115614 -0.000006716468 0.000000000000; C -0.613209884386 -0.000006716468 0.000000000000; H -1.200909884386 0.242593283532 -0.899800000000; H -1.200909884386 -0.242406716468 0.899800000000; symmetry c1; }; optimize('b3lyp/def2-SVP'); ```. ""fixed"" by using `opt_coordinates both`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1924#issuecomment-689488825
https://github.com/psi4/psi4/pull/1926#issuecomment-642215451:289,Modifiability,variab,variable,289,This pull request **introduces 2 alerts** when merging cf970f9c056b2301b26ab4f2d0dec4fe0ab170e5 into 741f46ea0bf7a3591988040538589eecaa8f0ab8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d5621577d9751acca1a16ecf450013ef3f8b194b). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1926#issuecomment-642215451
https://github.com/psi4/psi4/pull/1926#issuecomment-642240983:155,Deployability,update,updated,155,"@loriab This looks ok to me, thanks for getting it working. Regarding CI_FILE_START, the current handling for this is for historical reasons. It should be updated to switch from an option to a PSIF number like everything else, and the default could certainly change to a non-conflicting value. I do not mind trying to make those changes if you want.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1926#issuecomment-642240983
https://github.com/psi4/psi4/pull/1926#issuecomment-642394107:289,Modifiability,variab,variable,289,This pull request **introduces 2 alerts** when merging fd321e839e4597d8b7939a531d36d332da26eb3d into 741f46ea0bf7a3591988040538589eecaa8f0ab8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-84f4c3fde4b63efdb7c9e03652bf7abd06bd4e70). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1926#issuecomment-642394107
https://github.com/psi4/psi4/pull/1928#issuecomment-643554742:56,Testability,test,tested,56,"good point, @PeterKraus, now it's freeing them all. cc* tested again plus all combinations of r/u/ro following r/u/ro to not segfault.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1928#issuecomment-643554742
https://github.com/psi4/psi4/pull/1929#issuecomment-643563633:38,Deployability,patch,patch,38,"Me neither. Oh well, easier for me to patch up than outsider anyway. Plus, I finally figured out why `@using_snsmp2`, `@using_cppe`, etc. weren't enabling/skipping tests as they ought -- will be fixed in next qcel.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1929#issuecomment-643563633
https://github.com/psi4/psi4/pull/1929#issuecomment-643563633:164,Testability,test,tests,164,"Me neither. Oh well, easier for me to patch up than outsider anyway. Plus, I finally figured out why `@using_snsmp2`, `@using_cppe`, etc. weren't enabling/skipping tests as they ought -- will be fixed in next qcel.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1929#issuecomment-643563633
https://github.com/psi4/psi4/pull/1930#issuecomment-643638235:70,Usability,clear,clear,70,"CCQC is currently going through a heavy metals phase, so I want to be clear on how this PR will affect us. 1. If we freeze the 54 electrons of Xenon and then the 4f electrons, wouldn't we be freezing 68 electrons rather than 60?. 2. I think [the comment](https://github.com/psi4/psi4/pull/1930/files#diff-19caeae917feb299f8f5e72bc1e28436R253) would be clearer as `If center is after the inner transition metals, freeze those f electrons too`. As written, the comment doesn't apply to the actinides, and `> 6th period` doesn't apply to the example of Bismuth, which is 6th period. Am I misunderstanding the comment?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1930#issuecomment-643638235
https://github.com/psi4/psi4/pull/1930#issuecomment-643638235:352,Usability,clear,clearer,352,"CCQC is currently going through a heavy metals phase, so I want to be clear on how this PR will affect us. 1. If we freeze the 54 electrons of Xenon and then the 4f electrons, wouldn't we be freezing 68 electrons rather than 60?. 2. I think [the comment](https://github.com/psi4/psi4/pull/1930/files#diff-19caeae917feb299f8f5e72bc1e28436R253) would be clearer as `If center is after the inner transition metals, freeze those f electrons too`. As written, the comment doesn't apply to the actinides, and `> 6th period` doesn't apply to the example of Bismuth, which is 6th period. Am I misunderstanding the comment?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1930#issuecomment-643638235
https://github.com/psi4/psi4/pull/1930#issuecomment-643649864:36,Usability,clear,clearer,36,"IMHO ""lanthanides and actinides"" is clearer than ""inner transition metals"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1930#issuecomment-643649864
https://github.com/psi4/psi4/pull/1930#issuecomment-643713575:437,Security,access,accessible,437,"Yes, this is a good point. In my opinion, `freeze_core = 1` is meant to be best-effort behaviour, and freezing 4f for post-lanthanides and 5f for post-actinides will have the additional benefit of freezing all electrons contained in most ECPs, and the 5s5p / 6s6p shell for lanthanides/actinides. This means `freeze_core = 1` will get you the same active occupied orbitals whether you have an ECP or not. The previous behaviour is still accessible using `freeze_core = -1` which would freeze [Xe] strictly for all elements in 6th period and [Rn] for all in 7th period. The behaviour here with a 60-core ECP is clearly nonsensical, but as it's an ""advanced option"" I'm fine with that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1930#issuecomment-643713575
https://github.com/psi4/psi4/pull/1930#issuecomment-643713575:610,Usability,clear,clearly,610,"Yes, this is a good point. In my opinion, `freeze_core = 1` is meant to be best-effort behaviour, and freezing 4f for post-lanthanides and 5f for post-actinides will have the additional benefit of freezing all electrons contained in most ECPs, and the 5s5p / 6s6p shell for lanthanides/actinides. This means `freeze_core = 1` will get you the same active occupied orbitals whether you have an ECP or not. The previous behaviour is still accessible using `freeze_core = -1` which would freeze [Xe] strictly for all elements in 6th period and [Rn] for all in 7th period. The behaviour here with a 60-core ECP is clearly nonsensical, but as it's an ""advanced option"" I'm fine with that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1930#issuecomment-643713575
https://github.com/psi4/psi4/pull/1935#issuecomment-648244261:293,Modifiability,plugin,plugins,293,"> Is SAPT(DFT)/SF-SAPT included with the sapt.cc changes? Since they are mainly python procedures. I just fixed plain SAPT in the latest commit, as it has to be py-side. I'm not sure what to do about sf-sapt and dft-sapt at this point. Leaving those for now unless other have ideas. > How are plugins handled? Especially endorsed ones like sns-mp2, v2rdm_cassscf etc. They'll have to set their own name like https://github.com/piecuch-group/cct3/pull/2/files#diff-dd599d9e2da08b736cbf0b96add9a840R414 or in the pymodule.py file. I've done it for cct3 and adcc (whose py is in psi4/driver) and caspt2 but will have to adjust the other ones you mentioned. And some like pcmsolver, pe, efp/scf won't get recorded. When plugins move to cookiecutter or similar, the module stamping should get baked into the template.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1935#issuecomment-648244261
https://github.com/psi4/psi4/pull/1935#issuecomment-648244261:716,Modifiability,plugin,plugins,716,"> Is SAPT(DFT)/SF-SAPT included with the sapt.cc changes? Since they are mainly python procedures. I just fixed plain SAPT in the latest commit, as it has to be py-side. I'm not sure what to do about sf-sapt and dft-sapt at this point. Leaving those for now unless other have ideas. > How are plugins handled? Especially endorsed ones like sns-mp2, v2rdm_cassscf etc. They'll have to set their own name like https://github.com/piecuch-group/cct3/pull/2/files#diff-dd599d9e2da08b736cbf0b96add9a840R414 or in the pymodule.py file. I've done it for cct3 and adcc (whose py is in psi4/driver) and caspt2 but will have to adjust the other ones you mentioned. And some like pcmsolver, pe, efp/scf won't get recorded. When plugins move to cookiecutter or similar, the module stamping should get baked into the template.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1935#issuecomment-648244261
https://github.com/psi4/psi4/pull/1937#issuecomment-650368198:90,Modifiability,variab,variables,90,"@bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1937#issuecomment-650368198
https://github.com/psi4/psi4/pull/1937#issuecomment-650368198:198,Modifiability,variab,variables,198,"@bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1937#issuecomment-650368198
https://github.com/psi4/psi4/pull/1942#issuecomment-653816223:275,Availability,Redundant,Redundant,275,This pull request **introduces 1 alert** when merging bbd3aa3412ea20ff2ef9d729e5d2e26409416b36 into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-2458a2c1817707b15be6f2e2b716336bb481d859). **new alerts:**. * 1 for Redundant assignment,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-653816223
https://github.com/psi4/psi4/pull/1942#issuecomment-653816223:275,Safety,Redund,Redundant,275,This pull request **introduces 1 alert** when merging bbd3aa3412ea20ff2ef9d729e5d2e26409416b36 into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-2458a2c1817707b15be6f2e2b716336bb481d859). **new alerts:**. * 1 for Redundant assignment,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-653816223
https://github.com/psi4/psi4/pull/1942#issuecomment-653934319:275,Availability,Redundant,Redundant,275,This pull request **introduces 1 alert** when merging 00c99bedcaa1ba87381865f428c43f1c44f7002d into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5247ab5369215bab32e5264252af3c7482cf66ad). **new alerts:**. * 1 for Redundant assignment,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-653934319
https://github.com/psi4/psi4/pull/1942#issuecomment-653934319:275,Safety,Redund,Redundant,275,This pull request **introduces 1 alert** when merging 00c99bedcaa1ba87381865f428c43f1c44f7002d into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5247ab5369215bab32e5264252af3c7482cf66ad). **new alerts:**. * 1 for Redundant assignment,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-653934319
https://github.com/psi4/psi4/pull/1942#issuecomment-654045869:35,Availability,error,error,35,Tests fail because of an unrelated error (https://github.com/psi4/psi4/issues/1943).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-654045869
https://github.com/psi4/psi4/pull/1942#issuecomment-654045869:0,Testability,Test,Tests,0,Tests fail because of an unrelated error (https://github.com/psi4/psi4/issues/1943).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-654045869
https://github.com/psi4/psi4/pull/1942#issuecomment-654555619:58,Usability,pause,pause,58,I just found a few things to improve so let's put this on pause for a few days.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-654555619
https://github.com/psi4/psi4/issues/1943#issuecomment-654046044:67,Testability,test,test,67,"gtk. I've suspected that from some CI patterns but hadn't forced a test yet. I think conda has gcc 5.4 compilers for linux, so I can probe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1943#issuecomment-654046044
https://github.com/psi4/psi4/issues/1943#issuecomment-654065288:56,Testability,test,tests,56,"hmpf, works fine with gcc54. ```; >>> stage/bin/psi4 ../tests/dft-dens-cut/input.dat ; is_libxc SuperFunctional..........................................PASSED; is_libxc density_tolerance........................................PASSED; Empty SuperFunctional.............................................PASSED; C-only SuperFunctional............................................PASSED; LibXCFunctional density_cutoff....................................PASSED; SuperFunctional density_tolerance.................................PASSED; X-only SuperFunctional............................................PASSED; normal XC SuperFunctional.........................................PASSED; individual screening..............................................PASSED; screening value C.................................................PASSED; screening value X.................................................PASSED; >>> $CXX --version; x86_64-conda_cos6-linux-gnu-c++ (crosstool-NG fa8859cb) 5.4.0; Copyright (C) 2015 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1943#issuecomment-654065288
https://github.com/psi4/psi4/issues/1943#issuecomment-655228229:327,Testability,test,test,327,"Yes, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L3620 calls 3534. I can completely avert the issue by #1945 but that may not be best. I think the opt is undefined at time of RadialPruneMgr construction and it's not a big int so it's sometimes undefined and segfaults. This is the first Treutler test in the suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1943#issuecomment-655228229
https://github.com/psi4/psi4/pull/1946#issuecomment-656047836:126,Energy Efficiency,charge,charges,126,"If I am interpreting the data correctly, the new code has worse parallel scaling at high core counts if there are no external charges. (5.36 vs 4.24); And in general, the parallel scalings of the new code do not seem to follow Amdahl's law, note the drop in performance going from 8-->16 cores, then the sudden jump between 16 and 32. Even with charges, running on 16 cores only yields a 2.9x speedup, which is better than the old code, but much worse than using 8 cores.; My first guess would be either some sort of NUMA related issue, or false sharing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656047836
https://github.com/psi4/psi4/pull/1946#issuecomment-656047836:345,Energy Efficiency,charge,charges,345,"If I am interpreting the data correctly, the new code has worse parallel scaling at high core counts if there are no external charges. (5.36 vs 4.24); And in general, the parallel scalings of the new code do not seem to follow Amdahl's law, note the drop in performance going from 8-->16 cores, then the sudden jump between 16 and 32. Even with charges, running on 16 cores only yields a 2.9x speedup, which is better than the old code, but much worse than using 8 cores.; My first guess would be either some sort of NUMA related issue, or false sharing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656047836
https://github.com/psi4/psi4/pull/1946#issuecomment-656047836:258,Performance,perform,performance,258,"If I am interpreting the data correctly, the new code has worse parallel scaling at high core counts if there are no external charges. (5.36 vs 4.24); And in general, the parallel scalings of the new code do not seem to follow Amdahl's law, note the drop in performance going from 8-->16 cores, then the sudden jump between 16 and 32. Even with charges, running on 16 cores only yields a 2.9x speedup, which is better than the old code, but much worse than using 8 cores.; My first guess would be either some sort of NUMA related issue, or false sharing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656047836
https://github.com/psi4/psi4/pull/1946#issuecomment-656390401:40,Energy Efficiency,schedul,schedule,40,"Thanks for your comments. I've changed `schedule(dynamic)` to `schedule(guided)` in the OpenMP loop.; I think @TiborGY is right that there is false sharing. I changed the code to create a copy of the output matrix `V_charge` for each thread and then sum them at the end. New timings are:. Cores | New code, no charges | New code, with charges; ---- | ---- | ----; 1 | 1.00 | 1.00; 2 | 1.67 | 1.29; 4 | 2.72 | 2.18; 8 | 3.92 | 3.57; 16 | 4.87 | 5.04; 32 | 5.80 | 7.21",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656390401
https://github.com/psi4/psi4/pull/1946#issuecomment-656390401:63,Energy Efficiency,schedul,schedule,63,"Thanks for your comments. I've changed `schedule(dynamic)` to `schedule(guided)` in the OpenMP loop.; I think @TiborGY is right that there is false sharing. I changed the code to create a copy of the output matrix `V_charge` for each thread and then sum them at the end. New timings are:. Cores | New code, no charges | New code, with charges; ---- | ---- | ----; 1 | 1.00 | 1.00; 2 | 1.67 | 1.29; 4 | 2.72 | 2.18; 8 | 3.92 | 3.57; 16 | 4.87 | 5.04; 32 | 5.80 | 7.21",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656390401
https://github.com/psi4/psi4/pull/1946#issuecomment-656390401:310,Energy Efficiency,charge,charges,310,"Thanks for your comments. I've changed `schedule(dynamic)` to `schedule(guided)` in the OpenMP loop.; I think @TiborGY is right that there is false sharing. I changed the code to create a copy of the output matrix `V_charge` for each thread and then sum them at the end. New timings are:. Cores | New code, no charges | New code, with charges; ---- | ---- | ----; 1 | 1.00 | 1.00; 2 | 1.67 | 1.29; 4 | 2.72 | 2.18; 8 | 3.92 | 3.57; 16 | 4.87 | 5.04; 32 | 5.80 | 7.21",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656390401
https://github.com/psi4/psi4/pull/1946#issuecomment-656390401:335,Energy Efficiency,charge,charges,335,"Thanks for your comments. I've changed `schedule(dynamic)` to `schedule(guided)` in the OpenMP loop.; I think @TiborGY is right that there is false sharing. I changed the code to create a copy of the output matrix `V_charge` for each thread and then sum them at the end. New timings are:. Cores | New code, no charges | New code, with charges; ---- | ---- | ----; 1 | 1.00 | 1.00; 2 | 1.67 | 1.29; 4 | 2.72 | 2.18; 8 | 3.92 | 3.57; 16 | 4.87 | 5.04; 32 | 5.80 | 7.21",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656390401
https://github.com/psi4/psi4/pull/1946#issuecomment-656390401:72,Usability,guid,guided,72,"Thanks for your comments. I've changed `schedule(dynamic)` to `schedule(guided)` in the OpenMP loop.; I think @TiborGY is right that there is false sharing. I changed the code to create a copy of the output matrix `V_charge` for each thread and then sum them at the end. New timings are:. Cores | New code, no charges | New code, with charges; ---- | ---- | ----; 1 | 1.00 | 1.00; 2 | 1.67 | 1.29; 4 | 2.72 | 2.18; 8 | 3.92 | 3.57; 16 | 4.87 | 5.04; 32 | 5.80 | 7.21",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656390401
https://github.com/psi4/psi4/pull/1946#issuecomment-656570890:75,Energy Efficiency,charge,charges,75,"I'm not sure I understand how the numbers are different for the case of no charges. If this routine is only computing the potential from external point charges (i.e. not the nuclei), then the routine shouldn't be run at all if there are no external point charges!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656570890
https://github.com/psi4/psi4/pull/1946#issuecomment-656570890:152,Energy Efficiency,charge,charges,152,"I'm not sure I understand how the numbers are different for the case of no charges. If this routine is only computing the potential from external point charges (i.e. not the nuclei), then the routine shouldn't be run at all if there are no external point charges!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656570890
https://github.com/psi4/psi4/pull/1946#issuecomment-656570890:255,Energy Efficiency,charge,charges,255,"I'm not sure I understand how the numbers are different for the case of no charges. If this routine is only computing the potential from external point charges (i.e. not the nuclei), then the routine shouldn't be run at all if there are no external point charges!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656570890
https://github.com/psi4/psi4/pull/1946#issuecomment-656570890:92,Integrability,rout,routine,92,"I'm not sure I understand how the numbers are different for the case of no charges. If this routine is only computing the potential from external point charges (i.e. not the nuclei), then the routine shouldn't be run at all if there are no external point charges!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656570890
https://github.com/psi4/psi4/pull/1946#issuecomment-656570890:192,Integrability,rout,routine,192,"I'm not sure I understand how the numbers are different for the case of no charges. If this routine is only computing the potential from external point charges (i.e. not the nuclei), then the routine shouldn't be run at all if there are no external point charges!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656570890
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:21,Energy Efficiency,charge,charges,21,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:169,Energy Efficiency,charge,charges,169,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:266,Energy Efficiency,charge,charges,266,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:349,Energy Efficiency,schedul,schedule,349,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:392,Energy Efficiency,schedul,schedule,392,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:458,Energy Efficiency,charge,charges,458,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:481,Energy Efficiency,charge,charges,481,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:503,Energy Efficiency,charge,charges,503,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:527,Energy Efficiency,charge,charges,527,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:927,Integrability,depend,depend,927,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:96,Testability,benchmark,benchmark,96,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:208,Testability,benchmark,benchmark,208,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:326,Testability,benchmark,benchmark,326,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:900,Testability,benchmark,benchmark,900,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:401,Usability,guid,guided,401,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:447,Usability,Guid,Guided,447,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:468,Usability,Guid,Guided,468,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:814,Usability,guid,guided,814,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868
https://github.com/psi4/psi4/pull/1946#issuecomment-765017796:82,Energy Efficiency,charge,charges,82,"I have retested this atop a Libint2-based branch, and all's well. cores | old, no charges | old, with charges | PR, no charges | PR, with charges; ---- | ---- | ---- | ---- | ----; 1 | 344 | 600 | 351 | 479; 6 | 117 | 386 | 114 | 160. ```; memory 20 gb. molecule {; 0 1; N 0.9350155 -0.0279801 -0.3788916; C 1.6739638 -0.0357766 0.7424316; C 3.0747955 -0.0094480 0.5994562; C 3.5646109 0.0195446 -0.7059872; N 2.8531510 0.0258031 -1.8409596; C 1.5490760 0.0012569 -1.5808009; N 4.0885824 -0.0054429 1.5289786; C 5.1829921 0.0253971 0.7872176; N 4.9294871 0.0412404 -0.5567274; N 1.0716177 -0.0765366 1.9391390; H 0.8794435 0.0050260 -2.4315709; H 6.1882591 0.0375542 1.1738824; H 5.6035368 0.0648755 -1.3036811; H 0.0586915 -0.0423765 2.0039181; H 1.6443796 -0.0347395 2.7619159; --; 0 1; N -3.9211729 -0.0009646 -1.5163659; C -4.6136833 0.0169051 -0.3336520; C -3.9917387 0.0219348 0.8663338; C -2.5361367 0.0074651 0.8766724; N -1.9256484 -0.0110593 -0.3638948; C -2.5395897 -0.0149474 -1.5962357; C -4.7106131 0.0413373 2.1738637; O -1.8674730 0.0112093 1.9120833; O -1.9416783 -0.0291878 -2.6573783; H -4.4017172 -0.0036078 -2.4004924; H -0.8838255 -0.0216168 -0.3784269; H -5.6909220 0.0269347 -0.4227183; H -4.4439282 -0.8302573 2.7695655; H -4.4267056 0.9186178 2.7530256; H -5.7883971 0.0505530 2.0247280; units angstrom; }. Chrgfield = QMMM(). for i in range(25):; for j in range(25):; Chrgfield.extern.addCharge(-0.834, i * 3.0 + 1.649232019048, 0.0, j * 3.0 + -2.356023604706); Chrgfield.extern.addCharge( 0.417, i * 3.0 + 0.544757019107, 0.0, j * 3.0 + -3.799961446760); Chrgfield.extern.addCharge( 0.417, i * 3.0 + 0.544757019107, 0.0, j * 3.0 + -0.912085762652). psi4.set_global_option_python('EXTERN', Chrgfield.extern). energy(""sapt0/jun-cc-pvdz""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-765017796
https://github.com/psi4/psi4/pull/1946#issuecomment-765017796:102,Energy Efficiency,charge,charges,102,"I have retested this atop a Libint2-based branch, and all's well. cores | old, no charges | old, with charges | PR, no charges | PR, with charges; ---- | ---- | ---- | ---- | ----; 1 | 344 | 600 | 351 | 479; 6 | 117 | 386 | 114 | 160. ```; memory 20 gb. molecule {; 0 1; N 0.9350155 -0.0279801 -0.3788916; C 1.6739638 -0.0357766 0.7424316; C 3.0747955 -0.0094480 0.5994562; C 3.5646109 0.0195446 -0.7059872; N 2.8531510 0.0258031 -1.8409596; C 1.5490760 0.0012569 -1.5808009; N 4.0885824 -0.0054429 1.5289786; C 5.1829921 0.0253971 0.7872176; N 4.9294871 0.0412404 -0.5567274; N 1.0716177 -0.0765366 1.9391390; H 0.8794435 0.0050260 -2.4315709; H 6.1882591 0.0375542 1.1738824; H 5.6035368 0.0648755 -1.3036811; H 0.0586915 -0.0423765 2.0039181; H 1.6443796 -0.0347395 2.7619159; --; 0 1; N -3.9211729 -0.0009646 -1.5163659; C -4.6136833 0.0169051 -0.3336520; C -3.9917387 0.0219348 0.8663338; C -2.5361367 0.0074651 0.8766724; N -1.9256484 -0.0110593 -0.3638948; C -2.5395897 -0.0149474 -1.5962357; C -4.7106131 0.0413373 2.1738637; O -1.8674730 0.0112093 1.9120833; O -1.9416783 -0.0291878 -2.6573783; H -4.4017172 -0.0036078 -2.4004924; H -0.8838255 -0.0216168 -0.3784269; H -5.6909220 0.0269347 -0.4227183; H -4.4439282 -0.8302573 2.7695655; H -4.4267056 0.9186178 2.7530256; H -5.7883971 0.0505530 2.0247280; units angstrom; }. Chrgfield = QMMM(). for i in range(25):; for j in range(25):; Chrgfield.extern.addCharge(-0.834, i * 3.0 + 1.649232019048, 0.0, j * 3.0 + -2.356023604706); Chrgfield.extern.addCharge( 0.417, i * 3.0 + 0.544757019107, 0.0, j * 3.0 + -3.799961446760); Chrgfield.extern.addCharge( 0.417, i * 3.0 + 0.544757019107, 0.0, j * 3.0 + -0.912085762652). psi4.set_global_option_python('EXTERN', Chrgfield.extern). energy(""sapt0/jun-cc-pvdz""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-765017796
https://github.com/psi4/psi4/pull/1946#issuecomment-765017796:119,Energy Efficiency,charge,charges,119,"I have retested this atop a Libint2-based branch, and all's well. cores | old, no charges | old, with charges | PR, no charges | PR, with charges; ---- | ---- | ---- | ---- | ----; 1 | 344 | 600 | 351 | 479; 6 | 117 | 386 | 114 | 160. ```; memory 20 gb. molecule {; 0 1; N 0.9350155 -0.0279801 -0.3788916; C 1.6739638 -0.0357766 0.7424316; C 3.0747955 -0.0094480 0.5994562; C 3.5646109 0.0195446 -0.7059872; N 2.8531510 0.0258031 -1.8409596; C 1.5490760 0.0012569 -1.5808009; N 4.0885824 -0.0054429 1.5289786; C 5.1829921 0.0253971 0.7872176; N 4.9294871 0.0412404 -0.5567274; N 1.0716177 -0.0765366 1.9391390; H 0.8794435 0.0050260 -2.4315709; H 6.1882591 0.0375542 1.1738824; H 5.6035368 0.0648755 -1.3036811; H 0.0586915 -0.0423765 2.0039181; H 1.6443796 -0.0347395 2.7619159; --; 0 1; N -3.9211729 -0.0009646 -1.5163659; C -4.6136833 0.0169051 -0.3336520; C -3.9917387 0.0219348 0.8663338; C -2.5361367 0.0074651 0.8766724; N -1.9256484 -0.0110593 -0.3638948; C -2.5395897 -0.0149474 -1.5962357; C -4.7106131 0.0413373 2.1738637; O -1.8674730 0.0112093 1.9120833; O -1.9416783 -0.0291878 -2.6573783; H -4.4017172 -0.0036078 -2.4004924; H -0.8838255 -0.0216168 -0.3784269; H -5.6909220 0.0269347 -0.4227183; H -4.4439282 -0.8302573 2.7695655; H -4.4267056 0.9186178 2.7530256; H -5.7883971 0.0505530 2.0247280; units angstrom; }. Chrgfield = QMMM(). for i in range(25):; for j in range(25):; Chrgfield.extern.addCharge(-0.834, i * 3.0 + 1.649232019048, 0.0, j * 3.0 + -2.356023604706); Chrgfield.extern.addCharge( 0.417, i * 3.0 + 0.544757019107, 0.0, j * 3.0 + -3.799961446760); Chrgfield.extern.addCharge( 0.417, i * 3.0 + 0.544757019107, 0.0, j * 3.0 + -0.912085762652). psi4.set_global_option_python('EXTERN', Chrgfield.extern). energy(""sapt0/jun-cc-pvdz""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-765017796
https://github.com/psi4/psi4/pull/1946#issuecomment-765017796:138,Energy Efficiency,charge,charges,138,"I have retested this atop a Libint2-based branch, and all's well. cores | old, no charges | old, with charges | PR, no charges | PR, with charges; ---- | ---- | ---- | ---- | ----; 1 | 344 | 600 | 351 | 479; 6 | 117 | 386 | 114 | 160. ```; memory 20 gb. molecule {; 0 1; N 0.9350155 -0.0279801 -0.3788916; C 1.6739638 -0.0357766 0.7424316; C 3.0747955 -0.0094480 0.5994562; C 3.5646109 0.0195446 -0.7059872; N 2.8531510 0.0258031 -1.8409596; C 1.5490760 0.0012569 -1.5808009; N 4.0885824 -0.0054429 1.5289786; C 5.1829921 0.0253971 0.7872176; N 4.9294871 0.0412404 -0.5567274; N 1.0716177 -0.0765366 1.9391390; H 0.8794435 0.0050260 -2.4315709; H 6.1882591 0.0375542 1.1738824; H 5.6035368 0.0648755 -1.3036811; H 0.0586915 -0.0423765 2.0039181; H 1.6443796 -0.0347395 2.7619159; --; 0 1; N -3.9211729 -0.0009646 -1.5163659; C -4.6136833 0.0169051 -0.3336520; C -3.9917387 0.0219348 0.8663338; C -2.5361367 0.0074651 0.8766724; N -1.9256484 -0.0110593 -0.3638948; C -2.5395897 -0.0149474 -1.5962357; C -4.7106131 0.0413373 2.1738637; O -1.8674730 0.0112093 1.9120833; O -1.9416783 -0.0291878 -2.6573783; H -4.4017172 -0.0036078 -2.4004924; H -0.8838255 -0.0216168 -0.3784269; H -5.6909220 0.0269347 -0.4227183; H -4.4439282 -0.8302573 2.7695655; H -4.4267056 0.9186178 2.7530256; H -5.7883971 0.0505530 2.0247280; units angstrom; }. Chrgfield = QMMM(). for i in range(25):; for j in range(25):; Chrgfield.extern.addCharge(-0.834, i * 3.0 + 1.649232019048, 0.0, j * 3.0 + -2.356023604706); Chrgfield.extern.addCharge( 0.417, i * 3.0 + 0.544757019107, 0.0, j * 3.0 + -3.799961446760); Chrgfield.extern.addCharge( 0.417, i * 3.0 + 0.544757019107, 0.0, j * 3.0 + -0.912085762652). psi4.set_global_option_python('EXTERN', Chrgfield.extern). energy(""sapt0/jun-cc-pvdz""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-765017796
https://github.com/psi4/psi4/pull/1946#issuecomment-765017796:1736,Energy Efficiency,energy,energy,1736,"I have retested this atop a Libint2-based branch, and all's well. cores | old, no charges | old, with charges | PR, no charges | PR, with charges; ---- | ---- | ---- | ---- | ----; 1 | 344 | 600 | 351 | 479; 6 | 117 | 386 | 114 | 160. ```; memory 20 gb. molecule {; 0 1; N 0.9350155 -0.0279801 -0.3788916; C 1.6739638 -0.0357766 0.7424316; C 3.0747955 -0.0094480 0.5994562; C 3.5646109 0.0195446 -0.7059872; N 2.8531510 0.0258031 -1.8409596; C 1.5490760 0.0012569 -1.5808009; N 4.0885824 -0.0054429 1.5289786; C 5.1829921 0.0253971 0.7872176; N 4.9294871 0.0412404 -0.5567274; N 1.0716177 -0.0765366 1.9391390; H 0.8794435 0.0050260 -2.4315709; H 6.1882591 0.0375542 1.1738824; H 5.6035368 0.0648755 -1.3036811; H 0.0586915 -0.0423765 2.0039181; H 1.6443796 -0.0347395 2.7619159; --; 0 1; N -3.9211729 -0.0009646 -1.5163659; C -4.6136833 0.0169051 -0.3336520; C -3.9917387 0.0219348 0.8663338; C -2.5361367 0.0074651 0.8766724; N -1.9256484 -0.0110593 -0.3638948; C -2.5395897 -0.0149474 -1.5962357; C -4.7106131 0.0413373 2.1738637; O -1.8674730 0.0112093 1.9120833; O -1.9416783 -0.0291878 -2.6573783; H -4.4017172 -0.0036078 -2.4004924; H -0.8838255 -0.0216168 -0.3784269; H -5.6909220 0.0269347 -0.4227183; H -4.4439282 -0.8302573 2.7695655; H -4.4267056 0.9186178 2.7530256; H -5.7883971 0.0505530 2.0247280; units angstrom; }. Chrgfield = QMMM(). for i in range(25):; for j in range(25):; Chrgfield.extern.addCharge(-0.834, i * 3.0 + 1.649232019048, 0.0, j * 3.0 + -2.356023604706); Chrgfield.extern.addCharge( 0.417, i * 3.0 + 0.544757019107, 0.0, j * 3.0 + -3.799961446760); Chrgfield.extern.addCharge( 0.417, i * 3.0 + 0.544757019107, 0.0, j * 3.0 + -0.912085762652). psi4.set_global_option_python('EXTERN', Chrgfield.extern). energy(""sapt0/jun-cc-pvdz""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-765017796
https://github.com/psi4/psi4/issues/1947#issuecomment-655838181:93,Performance,optimiz,optimizer,93,Confirmed on current master. Obligatory @psi-rking and @AlexHeide notification. The geometry optimizer is [being rewritten](https://github.com/psi-rking/optking). A fix for this will _probably_ wait until then.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947#issuecomment-655838181
https://github.com/psi4/psi4/issues/1947#issuecomment-655840367:272,Testability,log,logic,272,"It's matching qchem (the default setting) behavior of `max_F and (max_DE or max_disp)` https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/opt_data.cc#L237 . Agree that it looks suspicious b/c the `o|*| ` symbols only indicate looking-at-this, not the detailed logic. Logic could be reconsidered (and it wouldn't hurt for me to read the q-chem manual every 10 years), but I think it's working as intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947#issuecomment-655840367
https://github.com/psi4/psi4/issues/1947#issuecomment-655840367:279,Testability,Log,Logic,279,"It's matching qchem (the default setting) behavior of `max_F and (max_DE or max_disp)` https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/opt_data.cc#L237 . Agree that it looks suspicious b/c the `o|*| ` symbols only indicate looking-at-this, not the detailed logic. Logic could be reconsidered (and it wouldn't hurt for me to read the q-chem manual every 10 years), but I think it's working as intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947#issuecomment-655840367
https://github.com/psi4/psi4/issues/1947#issuecomment-655841373:102,Performance,Optimiz,Optimization,102,"Ok, it looks like I didn't read the manual closely enough; the behavior is described on the 'Geometry Optimization' page. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947#issuecomment-655841373
https://github.com/psi4/psi4/issues/1947#issuecomment-655841532:182,Performance,optimiz,optimizer,182,Easy to add a print statement stating which necessary criteria for convergence were met. This isn't the only case where something that looks like this can occur. Will add to the new optimizer.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947#issuecomment-655841532
https://github.com/psi4/psi4/issues/1947#issuecomment-655844137:43,Testability,log,logic,43,"Yeah, that would be great to print out the logic. Long, long ago, we used to make sure DE was converged too, but other programs looked faster...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947#issuecomment-655844137
https://github.com/psi4/psi4/pull/1948#issuecomment-656178123:96,Testability,test,test,96,"Should the code in this fork be correct now? I've published some USAPT0 results, so I'd like to test how severe the bug in the old code was (at least for my results).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-656178123
https://github.com/psi4/psi4/pull/1948#issuecomment-656198271:45,Testability,test,test,45,"Yes, the code in this PR is corrected. In my test, which was Li interacting with H, the Exch-Disp term was wrong by about 25%. I haven't experimented with other systems but I'd be curious to know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-656198271
https://github.com/psi4/psi4/pull/1948#issuecomment-656211542:486,Energy Efficiency,energy,energy,486,"Having rerun my systems, I'm getting the same answers as before. Here's a sample input file.; ```; molecule {; 0 3; S -0.3387469593 0.0000000000 -1.1908558477; O 0.8847472382 0.0000000000 -0.3445279161; --; 0 1; H 0.4210342108 0.0000000000 1.7275935987; O -0.2480570158 0.0000000000 2.4179317954; H 0.2472257748 0.0000000000 3.2385953098; symmetry c1; no_reorient; no_com; }. set {; reference uhf; scf_type direct; guess sad; basis jun-cc-pV(D+d)Z; df_basis_sapt jun-cc-pV(D+d)Z-ri; }. energy('sapt0'); ```. The output file confirms that I'm running on `2d342fe`, and the SAPT output file is displaying `Open-shell: Jérôme Gonthier`, so this should be running your new code... but it's getting the same answers. Is there a reason for this? Perhaps this bug will only appear for two open-shell systems, but not for one open-shell and one closed-shell?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-656211542
https://github.com/psi4/psi4/pull/1948#issuecomment-656278624:1018,Energy Efficiency,energy,energy,1018,"Michał Hapka's (JCP 2012) dev molpro code with SAPT0(UKS), which can be force to run CPUHF, but it would be a comparison with code without density fitting. I had these results laying around, with larger than usual fitting basis set. ```python; import time; import psi4. geometry = """"""; 0 1; O 0.0000 0.00000 3.175060; H 0.0000 0.75750 2.587994; H 0.0000 -0.75750 2.587994; --; 0 2; O 0.0000 0.00000 0.000000; O 0.0000 1.32501 0.000000; H 0.0000 -0.22470 -0.973420. units angstrom; no_reorient; no_com; symmetry c1; """""". BASIS = ""aug-cc-pvdz""; MEMORY = ""20000 MB""; THREADS = 4. psi4.set_memory(MEMORY); psi4.core.set_num_threads(THREADS); psi4.set_options(; {; ""reference"": ""uhf"",; ""scf_type"": ""mem_df"",; ""stability_analysis"": ""follow"",; ""d_convergence"": 1e-10,; ""e_convergence"": 1e-10,; ""guess"": ""sad"",; ""basis"": BASIS,; ""df_basis_sapt"": ""aug-cc-pv5z-ri"",; ""df_basis_scf"": ""aug-cc-pv5z-jkfit"",; }; ). def compute_s2():; time_start = time.time(); dimer = psi4.geometry(geometry); psi4.energy(""sapt0"", molecule=dimer). if __name__ == ""__main__"":; compute_s2(); ```. run on top of `2d342fe`. ```shell; SAPT Results; --------------------------------------------------------------------------------------------------------; Electrostatics -3.76447859 [mEh] -2.36224598 [kcal/mol] -9.88363717 [kJ/mol]; Elst10,r -3.76447859 [mEh] -2.36224598 [kcal/mol] -9.88363717 [kJ/mol]. Exchange 2.19095680 [mEh] 1.37484615 [kcal/mol] 5.75235628 [kJ/mol]; Exch10 2.19095680 [mEh] 1.37484615 [kcal/mol] 5.75235628 [kJ/mol]; Exch10(S^2) 2.18871598 [mEh] 1.37344002 [kcal/mol] 5.74647303 [kJ/mol]. Induction -0.46899705 [mEh] -0.29430009 [kcal/mol] -1.23135159 [kJ/mol]; Ind20,r -0.81555155 [mEh] -0.51176632 [kcal/mol] -2.14123029 [kJ/mol]; Exch-Ind20,r 0.51152243 [mEh] 0.32098517 [kcal/mol] 1.34300196 [kJ/mol]; delta HF,r (2) -0.16496793 [mEh] -0.10351894 [kcal/mol] -0.43312325 [kJ/mol]. Dispersion -1.62383455 [mEh] -1.01897156 [kcal/mol] -4.26337702 [kJ/mol]; Disp20 -1.79467532 [mEh] -1.12617576 [kcal/mol] -4.711",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-656278624
https://github.com/psi4/psi4/pull/1948#issuecomment-656278624:24,Security,access,access,24,"I think I could get the access to Michał Hapka's (JCP 2012) dev molpro code with SAPT0(UKS), which can be force to run CPUHF, but it would be a comparison with code without density fitting. I had these results laying around, with larger than usual fitting basis set. ```python; import time; import psi4. geometry = """"""; 0 1; O 0.0000 0.00000 3.175060; H 0.0000 0.75750 2.587994; H 0.0000 -0.75750 2.587994; --; 0 2; O 0.0000 0.00000 0.000000; O 0.0000 1.32501 0.000000; H 0.0000 -0.22470 -0.973420. units angstrom; no_reorient; no_com; symmetry c1; """""". BASIS = ""aug-cc-pvdz""; MEMORY = ""20000 MB""; THREADS = 4. psi4.set_memory(MEMORY); psi4.core.set_num_threads(THREADS); psi4.set_options(; {; ""reference"": ""uhf"",; ""scf_type"": ""mem_df"",; ""stability_analysis"": ""follow"",; ""d_convergence"": 1e-10,; ""e_convergence"": 1e-10,; ""guess"": ""sad"",; ""basis"": BASIS,; ""df_basis_sapt"": ""aug-cc-pv5z-ri"",; ""df_basis_scf"": ""aug-cc-pv5z-jkfit"",; }; ). def compute_s2():; time_start = time.time(); dimer = psi4.geometry(geometry); psi4.energy(""sapt0"", molecule=dimer). if __name__ == ""__main__"":; compute_s2(); ```. run on top of `2d342fe`. ```shell; SAPT Results; --------------------------------------------------------------------------------------------------------; Electrostatics -3.76447859 [mEh] -2.36224598 [kcal/mol] -9.88363717 [kJ/mol]; Elst10,r -3.76447859 [mEh] -2.36224598 [kcal/mol] -9.88363717 [kJ/mol]. Exchange 2.19095680 [mEh] 1.37484615 [kcal/mol] 5.75235628 [kJ/mol]; Exch10 2.19095680 [mEh] 1.37484615 [kcal/mol] 5.75235628 [kJ/mol]; Exch10(S^2) 2.18871598 [mEh] 1.37344002 [kcal/mol] 5.74647303 [kJ/mol]. Induction -0.46899705 [mEh] -0.29430009 [kcal/mol] -1.23135159 [kJ/mol]; Ind20,r -0.81555155 [mEh] -0.51176632 [kcal/mol] -2.14123029 [kJ/mol]; Exch-Ind20,r 0.51152243 [mEh] 0.32098517 [kcal/mol] 1.34300196 [kJ/mol]; delta HF,r (2) -0.16496793 [mEh] -0.10351894 [kcal/mol] -0.43312325 [kJ/mol]. Dispersion -1.62383455 [mEh] -1.01897156 [kcal/mol] -4.26337702 [kJ/mol]; Disp20 -1.79467532 [m",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-656278624
https://github.com/psi4/psi4/pull/1948#issuecomment-658525244:36,Testability,test,test,36,"@jgonthier, @PhillCli, I've added a test from the original issue. It's not independently confirmed results, but the above discussion reasonably covers that. Provided you two are satisfied and I can scrounge up another review, I'll merge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-658525244
https://github.com/psi4/psi4/pull/1948#issuecomment-658676540:26,Testability,test,test,26,@loriab I'm fine with the test case from the original issue. Thanks for putting it there!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-658676540
https://github.com/psi4/psi4/pull/1948#issuecomment-658785479:50,Testability,test,test,50,Thanks everyone and thanks @loriab for adding the test! We could also add a test based on the Molpro results above but that would imply using high angular momentum functions so I guess it's not really essential.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-658785479
https://github.com/psi4/psi4/pull/1948#issuecomment-658785479:76,Testability,test,test,76,Thanks everyone and thanks @loriab for adding the test! We could also add a test based on the Molpro results above but that would imply using high angular momentum functions so I guess it's not really essential.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-658785479
https://github.com/psi4/psi4/pull/1949#issuecomment-656281507:379,Modifiability,variab,variable,379,This pull request **introduces 1 alert** and **fixes 2** when merging 2fafbe8f061e78de4feaab61311b37015861312b into 958c81a54c7ca5e6277622694258ca9db8b07f48 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-65a9a415d19b0acbc64b5fe7aa372a539f1a7768). **new alerts:**. * 1 for Wrong type of arguments to formatting function. **fixed alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1949#issuecomment-656281507
https://github.com/psi4/psi4/pull/1949#issuecomment-656733658:286,Modifiability,variab,variable,286,This pull request **fixes 2 alerts** when merging c65585fee126e64677a15c3a38c26550dec7292e into 958c81a54c7ca5e6277622694258ca9db8b07f48 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-343491ae750ff9b0b0ef14efed537510da6a064c). **fixed alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1949#issuecomment-656733658
https://github.com/psi4/psi4/pull/1950#issuecomment-658533901:17,Testability,test,test,17,"@sjrl see if the test I added is satisfactory. If so, I'll merge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1950#issuecomment-658533901
https://github.com/psi4/psi4/pull/1951#issuecomment-656736060:298,Availability,error,error,298,This pull request **introduces 1 alert** and **fixes 2** when merging 7c8a11e8026796d6beb1437a7a6ae831d41b75d8 into 958c81a54c7ca5e6277622694258ca9db8b07f48 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5db3262e4803037cc6c2295e50baa99c3de7fa5b). **new alerts:**. * 1 for Syntax error. **fixed alerts:**. * 1 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-656736060
https://github.com/psi4/psi4/pull/1951#issuecomment-656736060:345,Modifiability,variab,variable,345,This pull request **introduces 1 alert** and **fixes 2** when merging 7c8a11e8026796d6beb1437a7a6ae831d41b75d8 into 958c81a54c7ca5e6277622694258ca9db8b07f48 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5db3262e4803037cc6c2295e50baa99c3de7fa5b). **new alerts:**. * 1 for Syntax error. **fixed alerts:**. * 1 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-656736060
https://github.com/psi4/psi4/pull/1951#issuecomment-656856825:298,Availability,error,error,298,This pull request **introduces 1 alert** and **fixes 2** when merging ee3a8859e70fc6da96a6e2af833b11956aa85a97 into e0b780daa5e75cb07e1b44c47db560a3f4c6474c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-268701b010d44f775457db29bf9e88aa6e935f53). **new alerts:**. * 1 for Syntax error. **fixed alerts:**. * 1 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-656856825
https://github.com/psi4/psi4/pull/1951#issuecomment-656856825:345,Modifiability,variab,variable,345,This pull request **introduces 1 alert** and **fixes 2** when merging ee3a8859e70fc6da96a6e2af833b11956aa85a97 into e0b780daa5e75cb07e1b44c47db560a3f4c6474c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-268701b010d44f775457db29bf9e88aa6e935f53). **new alerts:**. * 1 for Syntax error. **fixed alerts:**. * 1 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-656856825
https://github.com/psi4/psi4/pull/1951#issuecomment-656876556:54,Testability,test,tested,54,@JonathonMisiewicz : thanks for catching the issue. I tested the `fcidump` test and it runs fine now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-656876556
https://github.com/psi4/psi4/pull/1951#issuecomment-656876556:75,Testability,test,test,75,@JonathonMisiewicz : thanks for catching the issue. I tested the `fcidump` test and it runs fine now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-656876556
https://github.com/psi4/psi4/pull/1951#issuecomment-657791109:32,Testability,test,test,32,"@dgasmith: ok, let me work on a test case",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-657791109
https://github.com/psi4/psi4/issues/1952#issuecomment-656906496:321,Modifiability,refactor,refactor,321,"We have DF-CCSD(T) analytic gradients, so we _have_ the densities. What I _think_ you mean is ""to have density fitted coupled cluster densities _on the wavefunction object_."" I haven't checked whether these are on the wavefunction or not, but I'd believe that they are not. I'll get that there as part of the DF gradient refactor. Further progress on that is blocked by the integral changes in #1721.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1952#issuecomment-656906496
https://github.com/psi4/psi4/issues/1954#issuecomment-658153944:198,Deployability,update,update,198,"""Nightly"" isn't actually nightly, so it's missing some bug fixes. My hunch is that this is the same bug #1938 fixed. In which case, all we can do is tell you to compile from master or wait until we update ""nightly"" again. @bgpeyton, does this look right to you?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1954#issuecomment-658153944
https://github.com/psi4/psi4/issues/1954#issuecomment-658158803:89,Deployability,update,update,89,"@JonathonMisiewicz you're correct. All coordinates below 1 were brought to zero. A quick update should fix it, or you may be able to wrangle the output of `mol.print_out()` to suit your needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1954#issuecomment-658158803
https://github.com/psi4/psi4/issues/1954#issuecomment-658159539:48,Deployability,update,updated,48,"I don't have an approximate delay. Nightly gets updated whenever @loriab updates it. There's no deeper pattern, that I'm aware of.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1954#issuecomment-658159539
https://github.com/psi4/psi4/issues/1954#issuecomment-658159539:73,Deployability,update,updates,73,"I don't have an approximate delay. Nightly gets updated whenever @loriab updates it. There's no deeper pattern, that I'm aware of.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1954#issuecomment-658159539
https://github.com/psi4/psi4/pull/1956#issuecomment-659615041:39,Testability,test,tests,39,"Great, this can come in as soon as the tests pass. (And if clang format breaks anything, we should be concerned.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1956#issuecomment-659615041
https://github.com/psi4/psi4/issues/1959#issuecomment-660255900:5,Availability,error,errors,5,"PSIO errors are notoriously difficulty to understand, but my intuition is to say that this is a memory issue, if it's dependent on the size of the active space. What do you mean by ""I ask for 16gb memory on the cluster""? I'm not debugging your queuing system, but does that mean you're changing `psi4.set_memory(int(2e9))`? That looks closer to 1.6 than 16 GB.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660255900
https://github.com/psi4/psi4/issues/1959#issuecomment-660255900:118,Integrability,depend,dependent,118,"PSIO errors are notoriously difficulty to understand, but my intuition is to say that this is a memory issue, if it's dependent on the size of the active space. What do you mean by ""I ask for 16gb memory on the cluster""? I'm not debugging your queuing system, but does that mean you're changing `psi4.set_memory(int(2e9))`? That looks closer to 1.6 than 16 GB.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660255900
https://github.com/psi4/psi4/issues/1959#issuecomment-660255900:61,Usability,intuit,intuition,61,"PSIO errors are notoriously difficulty to understand, but my intuition is to say that this is a memory issue, if it's dependent on the size of the active space. What do you mean by ""I ask for 16gb memory on the cluster""? I'm not debugging your queuing system, but does that mean you're changing `psi4.set_memory(int(2e9))`? That looks closer to 1.6 than 16 GB.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660255900
https://github.com/psi4/psi4/issues/1959#issuecomment-660352855:39,Modifiability,variab,variable,39,"Thanks, I indeed forgot to change this variable, I just changed the one for the cluster and not for psi4... I've set it to 16GB now. But the problem persists. It is indeed certainly related to memory. For such a large CAS do you have any idea of the amount of memory required ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660352855
https://github.com/psi4/psi4/issues/1959#issuecomment-660888557:107,Energy Efficiency,energy,energy,107,"FYI I tried 64 GB but still the same issue. I guess I will have to stick with a CAS(16,14) as my reference energy (without orbital optimization).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660888557
https://github.com/psi4/psi4/issues/1959#issuecomment-660888557:131,Performance,optimiz,optimization,131,"FYI I tried 64 GB but still the same issue. I guess I will have to stick with a CAS(16,14) as my reference energy (without orbital optimization).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660888557
https://github.com/psi4/psi4/issues/1959#issuecomment-661069874:128,Availability,error,error,128,"So here is the output file for 64 GB:. [formaldimine.txt](https://github.com/psi4/psi4/files/4948227/formaldimine.txt). and the error:. ```; PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and I confirm the 64 GB used : ` Memory set to 64.000 GiB by Python driver.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874
https://github.com/psi4/psi4/issues/1959#issuecomment-661069874:193,Availability,error,error,193,"So here is the output file for 64 GB:. [formaldimine.txt](https://github.com/psi4/psi4/files/4948227/formaldimine.txt). and the error:. ```; PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and I confirm the 64 GB used : ` Memory set to 64.000 GiB by Python driver.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874
https://github.com/psi4/psi4/issues/1959#issuecomment-661069874:898,Availability,Error,Error,898,"So here is the output file for 64 GB:. [formaldimine.txt](https://github.com/psi4/psi4/files/4948227/formaldimine.txt). and the error:. ```; PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and I confirm the 64 GB used : ` Memory set to 64.000 GiB by Python driver.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874
https://github.com/psi4/psi4/issues/1959#issuecomment-661069874:910,Availability,Error,Error,910,"So here is the output file for 64 GB:. [formaldimine.txt](https://github.com/psi4/psi4/files/4948227/formaldimine.txt). and the error:. ```; PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and I confirm the 64 GB used : ` Memory set to 64.000 GiB by Python driver.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874
https://github.com/psi4/psi4/issues/1959#issuecomment-661069874:917,Availability,Error,Error,917,"So here is the output file for 64 GB:. [formaldimine.txt](https://github.com/psi4/psi4/files/4948227/formaldimine.txt). and the error:. ```; PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and I confirm the 64 GB used : ` Memory set to 64.000 GiB by Python driver.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874
https://github.com/psi4/psi4/issues/1959#issuecomment-661069874:1031,Availability,error,error,1031,"So here is the output file for 64 GB:. [formaldimine.txt](https://github.com/psi4/psi4/files/4948227/formaldimine.txt). and the error:. ```; PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and I confirm the 64 GB used : ` Memory set to 64.000 GiB by Python driver.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874
https://github.com/psi4/psi4/issues/1959#issuecomment-661069874:534,Energy Efficiency,energy,energy,534,"So here is the output file for 64 GB:. [formaldimine.txt](https://github.com/psi4/psi4/files/4948227/formaldimine.txt). and the error:. ```; PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and I confirm the 64 GB used : ` Memory set to 64.000 GiB by Python driver.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874
https://github.com/psi4/psi4/issues/1959#issuecomment-661069874:644,Energy Efficiency,energy,energy,644,"So here is the output file for 64 GB:. [formaldimine.txt](https://github.com/psi4/psi4/files/4948227/formaldimine.txt). and the error:. ```; PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and I confirm the 64 GB used : ` Memory set to 64.000 GiB by Python driver.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874
https://github.com/psi4/psi4/issues/1959#issuecomment-661069874:670,Energy Efficiency,energy,energy,670,"So here is the output file for 64 GB:. [formaldimine.txt](https://github.com/psi4/psi4/files/4948227/formaldimine.txt). and the error:. ```; PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and I confirm the 64 GB used : ` Memory set to 64.000 GiB by Python driver.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874
https://github.com/psi4/psi4/issues/1959#issuecomment-661110834:163,Modifiability,variab,variable,163,"The default scratch directory is `/tmp/`, which is often limited in size (few Gib) and large calculation will crash because the ""disk is full"". Set either the env variable `PSI_SCRATCH` or use the python command `psi4.core.IOManager.shared_object().set_default_path('/path/')` and specify, in the best case, a local disk on the HPC node.; Slow network directories can stall I/O and also crash calculations. Unclear how much you will need in terms of size, I am not familiar with the implementation details.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661110834
https://github.com/psi4/psi4/issues/1959#issuecomment-661778670:196,Availability,error,error,196,"@hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661778670
https://github.com/psi4/psi4/issues/1959#issuecomment-661778670:246,Availability,error,error,246,"@hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661778670
https://github.com/psi4/psi4/issues/1959#issuecomment-661778670:235,Deployability,update,update,235,"@hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661778670
https://github.com/psi4/psi4/issues/1959#issuecomment-661778670:252,Integrability,message,message,252,"@hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661778670
https://github.com/psi4/psi4/issues/1959#issuecomment-661786049:204,Availability,error,error,204,"Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; `PSIO_ERROR: 12 (error writing to file)` should in most cases be a disk space issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661786049
https://github.com/psi4/psi4/issues/1959#issuecomment-661793401:216,Availability,error,error,216,"> ; > ; > Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; > `PSIO_ERROR: 12 (error writing to file)` should in most cases be a disk space issue. Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661793401
https://github.com/psi4/psi4/issues/1959#issuecomment-661935809:51,Availability,error,error,51,"Yes, disk space is about the only correctable PSIO error besides failing to clean scratch between independent calcs. There are legit fails that should be directed to devs but only after ruling out disk as culprit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661935809
https://github.com/psi4/psi4/issues/1960#issuecomment-660487256:71,Deployability,update,update,71,Is this the same issue as in #1724? You can try your own workaround or update to the development version.; This has been addressed in PR #1725.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1960#issuecomment-660487256
https://github.com/psi4/psi4/pull/1961#issuecomment-673212694:120,Testability,log,logs,120,looks like gcc 5.2 may not like your initializer lists https://dev.azure.com/psi4/psi4/_build/results?buildId=2276&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a&t=5d474b6c-8b79-5932-1eb0-049666067a4b&l=1075,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1961#issuecomment-673212694
https://github.com/psi4/psi4/issues/1965#issuecomment-661826679:208,Availability,error,errors,208,"> ; > But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users. I think the typical ramdisk implementation used for /tmp starts off using ~0 RAM. One can create as many 10 TB ramdisks as one desires, they only start allocating memory when they are written to, and I think the amount of RAM used by the ramdisk follows the amount of data currently stored on it.; IIRC the RAM consumed by such ramdisks appears as if some other regular application was using it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1965#issuecomment-661826679
https://github.com/psi4/psi4/issues/1965#issuecomment-724408535:33,Availability,error,error,33,"> A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Certainly. Having `PSI_SCRATCH=/tmp` can either cause the system run out of memory, or out of ""disk space"" on `/tmp` which is at most the size of RAM, if tmpfs is used. Perhaps even printing the scratch dir location in the error message would help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1965#issuecomment-724408535
https://github.com/psi4/psi4/issues/1965#issuecomment-724408535:364,Availability,error,error,364,"> A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Certainly. Having `PSI_SCRATCH=/tmp` can either cause the system run out of memory, or out of ""disk space"" on `/tmp` which is at most the size of RAM, if tmpfs is used. Perhaps even printing the scratch dir location in the error message would help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1965#issuecomment-724408535
https://github.com/psi4/psi4/issues/1965#issuecomment-724408535:370,Integrability,message,message,370,"> A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Certainly. Having `PSI_SCRATCH=/tmp` can either cause the system run out of memory, or out of ""disk space"" on `/tmp` which is at most the size of RAM, if tmpfs is used. Perhaps even printing the scratch dir location in the error message would help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1965#issuecomment-724408535
https://github.com/psi4/psi4/issues/1966#issuecomment-661836134:633,Performance,queue,queue,633,"The occupations in the CC code are just fine; we were fooled by formatting. Here's what I get when I try Holger's input.; ```; IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 3 0 3 0 0 0 ; B1g 0 0 0 0 0 0 ; B2g 1 0 0 1 0 0 ; B3g 1 0 0 1 0 0 ; Au 0 0 0 0 0 0 ; B1u 3 0 2 0 1 0 ; B2u 1 0 1 0 0 0 ; B3u 1 0 1 0 0 0 ; ```. The formatting is a bit strange, but you can see that all the numbers check out. And comparing against Holger's original report, shift the labels one column right, and everything makes sense again. When I put this in the debugger, it gives me:; ```; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0); frame #0: 0x00000001031e2aa6 core.cpython-37m-darwin.so`psi::cchbar::WaBeI_UHF() at Wabei_BABA_UHF.cc:106:66; 103 	 int e = moinfo.bvir_off[Ge] + EE;; 104 	 global_dpd_->buf4_mat_irrep_rd_block(&B, Gef, B.row_offset[Gef][e], moinfo.avirtpi[Gf]);; 105 	 global_dpd_->buf4_mat_irrep_rd_block(&W, Gei, W.row_offset[Gei][e], moinfo.aoccpi[Gi]);; -> 106 	 C_DGEMM('n', 'n', nrows, ncols, nlinks, 1.0, T1.matrix[Gi][0], nlinks, B.matrix[Gef][0], ncols, 1.0,; 107 	 W.matrix[Gei][0], ncols);; 108 	 global_dpd_->buf4_mat_irrep_wrt_block(&W, Gei, W.row_offset[Gei][e], moinfo.aoccpi[Gi]);; 109 	 }; Target 0: (python) stopped.; ```. with the T1 highlighted. So if anybody wants to investigate further, there's a lead for you. Since the occupations are fine, I'm moving this off my to-do list.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1966#issuecomment-661836134
https://github.com/psi4/psi4/issues/1966#issuecomment-662919389:22,Availability,error,error,22,"Yup, like I said: the error is that the code is not checking if the matrices are of zero size. Should be an easy fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1966#issuecomment-662919389
https://github.com/psi4/psi4/issues/1967#issuecomment-663099219:237,Availability,avail,available,237,"@uwhbliu : you can run a FCI computation from a FCIDUMP file in [forte](https://github.com/evangelistalab/forte), a psi4 plugin. I would be happy to help with the setup/compilation. A test case that runs FCI with frozen core orbitals is available [here](https://github.com/evangelistalab/forte/tree/master/tests/methods/integrals-fcidump-1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1967#issuecomment-663099219
https://github.com/psi4/psi4/issues/1967#issuecomment-663099219:121,Modifiability,plugin,plugin,121,"@uwhbliu : you can run a FCI computation from a FCIDUMP file in [forte](https://github.com/evangelistalab/forte), a psi4 plugin. I would be happy to help with the setup/compilation. A test case that runs FCI with frozen core orbitals is available [here](https://github.com/evangelistalab/forte/tree/master/tests/methods/integrals-fcidump-1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1967#issuecomment-663099219
https://github.com/psi4/psi4/issues/1967#issuecomment-663099219:184,Testability,test,test,184,"@uwhbliu : you can run a FCI computation from a FCIDUMP file in [forte](https://github.com/evangelistalab/forte), a psi4 plugin. I would be happy to help with the setup/compilation. A test case that runs FCI with frozen core orbitals is available [here](https://github.com/evangelistalab/forte/tree/master/tests/methods/integrals-fcidump-1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1967#issuecomment-663099219
https://github.com/psi4/psi4/issues/1967#issuecomment-663099219:306,Testability,test,tests,306,"@uwhbliu : you can run a FCI computation from a FCIDUMP file in [forte](https://github.com/evangelistalab/forte), a psi4 plugin. I would be happy to help with the setup/compilation. A test case that runs FCI with frozen core orbitals is available [here](https://github.com/evangelistalab/forte/tree/master/tests/methods/integrals-fcidump-1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1967#issuecomment-663099219
https://github.com/psi4/psi4/issues/1968#issuecomment-1764883227:286,Availability,error,errors,286,"Is anyone presently working on this? I see it's gotten moved from milestone to milestone, just curious what priority level this is (or isn't). I've gotten some dimer interaction energy mismatches of >0.1 kcal/mol due to this bug in CP-corrected dimer interaction energies, though these errors are still << the error of DFT vs a CCSD(T)-level method, so it's not a big deal, just a little obnoxious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1764883227
https://github.com/psi4/psi4/issues/1968#issuecomment-1764883227:310,Availability,error,error,310,"Is anyone presently working on this? I see it's gotten moved from milestone to milestone, just curious what priority level this is (or isn't). I've gotten some dimer interaction energy mismatches of >0.1 kcal/mol due to this bug in CP-corrected dimer interaction energies, though these errors are still << the error of DFT vs a CCSD(T)-level method, so it's not a big deal, just a little obnoxious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1764883227
https://github.com/psi4/psi4/issues/1968#issuecomment-1764883227:178,Energy Efficiency,energy,energy,178,"Is anyone presently working on this? I see it's gotten moved from milestone to milestone, just curious what priority level this is (or isn't). I've gotten some dimer interaction energy mismatches of >0.1 kcal/mol due to this bug in CP-corrected dimer interaction energies, though these errors are still << the error of DFT vs a CCSD(T)-level method, so it's not a big deal, just a little obnoxious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1764883227
https://github.com/psi4/psi4/issues/1968#issuecomment-1764917353:70,Availability,down,down,70,"Adding purely for the sake of search results for anyone else who goes down this rabbit hole:. If you are getting a mismatch between Orca and Psi4 on, say, a dimer interaction energy, and your system contains Xe or I, and you've been tearing your hair out trying to reconcile the difference, **this is probably why**. Orca removes the ECPs on ghost sites.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1764917353
https://github.com/psi4/psi4/issues/1968#issuecomment-1764917353:175,Energy Efficiency,energy,energy,175,"Adding purely for the sake of search results for anyone else who goes down this rabbit hole:. If you are getting a mismatch between Orca and Psi4 on, say, a dimer interaction energy, and your system contains Xe or I, and you've been tearing your hair out trying to reconcile the difference, **this is probably why**. Orca removes the ECPs on ghost sites.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1764917353
https://github.com/psi4/psi4/issues/1968#issuecomment-1779923261:295,Security,hash,hash,295,"git diff to nominally fix. Further testing required.; ```; --- a/psi4/src/export_mints.cc; +++ b/psi4/src/export_mints.cc; @@ -151,6 +151,7 @@ std::shared_ptr<BasisSet> construct_basisset_from_pydict(const std::shared_ptr<M; std::string atomlabel = atominfo[0].cast<std::string>();; std::string hash = atominfo[1].cast<std::string>();; int ncore = atominfo[2].cast<int>();; + printf(""%s %s %d is ghost %8.4f\n"", atomlabel.c_str(), hash.c_str(), ncore, mol->Z(atom));; for (int atomshells = 3; atomshells < py::len(atominfo); ++atomshells) {; // Each shell entry has p primitives that look like; // [ angmom, [ [ e1, c1, r1 ], [ e2, c2, r2 ], ...., [ ep, cp, rp ] ] ]; @@ -166,7 +167,9 @@ std::shared_ptr<BasisSet> construct_basisset_from_pydict(const std::shared_ptr<M; coefficients.push_back(primitiveinfo[1].cast<double>());; ns.push_back(primitiveinfo[2].cast<int>());; }; + if (mol->Z(atom)) {; vec_shellinfo.push_back(ShellInfo(am, coefficients, exponents, ns));; + }; }; basis_atom_ncore[name][atomlabel] = ncore;; basis_atom_ecpshell[name][atomlabel] = vec_shellinfo;; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1779923261
https://github.com/psi4/psi4/issues/1968#issuecomment-1779923261:431,Security,hash,hash,431,"git diff to nominally fix. Further testing required.; ```; --- a/psi4/src/export_mints.cc; +++ b/psi4/src/export_mints.cc; @@ -151,6 +151,7 @@ std::shared_ptr<BasisSet> construct_basisset_from_pydict(const std::shared_ptr<M; std::string atomlabel = atominfo[0].cast<std::string>();; std::string hash = atominfo[1].cast<std::string>();; int ncore = atominfo[2].cast<int>();; + printf(""%s %s %d is ghost %8.4f\n"", atomlabel.c_str(), hash.c_str(), ncore, mol->Z(atom));; for (int atomshells = 3; atomshells < py::len(atominfo); ++atomshells) {; // Each shell entry has p primitives that look like; // [ angmom, [ [ e1, c1, r1 ], [ e2, c2, r2 ], ...., [ ep, cp, rp ] ] ]; @@ -166,7 +167,9 @@ std::shared_ptr<BasisSet> construct_basisset_from_pydict(const std::shared_ptr<M; coefficients.push_back(primitiveinfo[1].cast<double>());; ns.push_back(primitiveinfo[2].cast<int>());; }; + if (mol->Z(atom)) {; vec_shellinfo.push_back(ShellInfo(am, coefficients, exponents, ns));; + }; }; basis_atom_ncore[name][atomlabel] = ncore;; basis_atom_ecpshell[name][atomlabel] = vec_shellinfo;; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1779923261
https://github.com/psi4/psi4/issues/1968#issuecomment-1779923261:35,Testability,test,testing,35,"git diff to nominally fix. Further testing required.; ```; --- a/psi4/src/export_mints.cc; +++ b/psi4/src/export_mints.cc; @@ -151,6 +151,7 @@ std::shared_ptr<BasisSet> construct_basisset_from_pydict(const std::shared_ptr<M; std::string atomlabel = atominfo[0].cast<std::string>();; std::string hash = atominfo[1].cast<std::string>();; int ncore = atominfo[2].cast<int>();; + printf(""%s %s %d is ghost %8.4f\n"", atomlabel.c_str(), hash.c_str(), ncore, mol->Z(atom));; for (int atomshells = 3; atomshells < py::len(atominfo); ++atomshells) {; // Each shell entry has p primitives that look like; // [ angmom, [ [ e1, c1, r1 ], [ e2, c2, r2 ], ...., [ ep, cp, rp ] ] ]; @@ -166,7 +167,9 @@ std::shared_ptr<BasisSet> construct_basisset_from_pydict(const std::shared_ptr<M; coefficients.push_back(primitiveinfo[1].cast<double>());; ns.push_back(primitiveinfo[2].cast<int>());; }; + if (mol->Z(atom)) {; vec_shellinfo.push_back(ShellInfo(am, coefficients, exponents, ns));; + }; }; basis_atom_ncore[name][atomlabel] = ncore;; basis_atom_ecpshell[name][atomlabel] = vec_shellinfo;; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1779923261
https://github.com/psi4/psi4/issues/1968#issuecomment-1825642004:106,Availability,error,errors,106,Is it likely that this would also affect SAPT calculations where an ECP is used? I'm seeing some very odd errors and trying to track down what the issue is. I'm using 1.8.2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1825642004
https://github.com/psi4/psi4/issues/1968#issuecomment-1825642004:133,Availability,down,down,133,Is it likely that this would also affect SAPT calculations where an ECP is used? I'm seeing some very odd errors and trying to track down what the issue is. I'm using 1.8.2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1825642004
https://github.com/psi4/psi4/issues/1968#issuecomment-1825937582:91,Availability,down,down,91,"@JGrantHill yes, I think it's definitely affected. The quicker solution will probably slow down the delta Hartree--Fock step b/c it won't reuse integrals. But eventually that could be restored. I'm still working on the gradients issue #3066 but I hope to look into this soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1825937582
https://github.com/psi4/psi4/pull/1970#issuecomment-664390954:61,Integrability,depend,depend,61,I don't think there's a need to deprecate those. Users might depend on it and it's less typing if they stay in `Wavefunction`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1970#issuecomment-664390954
https://github.com/psi4/psi4/pull/1970#issuecomment-664461196:5,Deployability,update,updated,5,"Just updated the last commit to fix `mintshelper_` copying. For the shallow copy, the copy and the original use the same `mintshelper_`, so all the `set_basisset` I was doing was wasted lines. For the deep copy, I just needed to copy from the original `mintshelper_`, not the new one. Follow-up PR should have a test for this, as I need some other infrastructure in place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1970#issuecomment-664461196
https://github.com/psi4/psi4/pull/1970#issuecomment-664461196:312,Testability,test,test,312,"Just updated the last commit to fix `mintshelper_` copying. For the shallow copy, the copy and the original use the same `mintshelper_`, so all the `set_basisset` I was doing was wasted lines. For the deep copy, I just needed to copy from the original `mintshelper_`, not the new one. Follow-up PR should have a test for this, as I need some other infrastructure in place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1970#issuecomment-664461196
https://github.com/psi4/psi4/pull/1971#issuecomment-666493740:128,Modifiability,refactor,refactoring,128,"> I am still not 100% sold on such an explicit long-handed way test_standard_suite is written. Yes, I am increasingly open to a refactoring and consolidation once the build-out is complete. The `test_<mtd>_<driver>_default`s are particularly good candidates. Plus, consolidation has a good chance of allowing autodoc-ing, so that the same path info isn't in test_standard_suite.py, select fns of proc.py, and http://psicode.org/psi4manual/master/notes_c.html#alternate-implementations . But the long-hand isn't the limiting factor in getting the ref data gathered and the psi module codes maximally compliant, so stable for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1971#issuecomment-666493740
https://github.com/psi4/psi4/issues/1972#issuecomment-664835780:65,Testability,test,tested,65,"Thanks.; The manual states basis set projection with ECPs is not tested, not sure if there are principle problem or if differently sized ECPs are causing this.; code section: https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.cc#L959",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664835780
https://github.com/psi4/psi4/issues/1972#issuecomment-664898846:607,Integrability,message,message,607,"This issue is solvable, but I'm not sure how good the end result will be. The code needs to be changed so that it. 1. determines the number of alpha and beta electrons in the new wave function; 2. assembles the occupied orbitals in the old basis based on the number of electrons in the two calculations; 2.1. if the number of electrons matches, everything is fine and the occupied orbitals are used as-is; 2.2. if the new calculation has K fewer electrons, then the code must drop the K lowest-lying orbitals from the input; 2.3. if the new calculation has K more electrons, then the guess fails, a warning message is printed out and the code switches to e.g. SAD; 3. compute the projection with the given input orbitals",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664898846
https://github.com/psi4/psi4/issues/1972#issuecomment-664938620:436,Energy Efficiency,energy,energy,436,"FWIW B3LYP/def2-SVP converges in 24 iterations from the default SAD guess, yielding S^2 = 0.7528. PBE/def2-SVP also converges in 25 iterations to S^2 = 0.7538. . The weird convergence is a combination of the non-physical guess which lacks core electrons, combined with the unnecessary use of the second-order scheme which appears to have converged to an extremely high-lying saddle point: the log file on the forum has a B3LYP/def2-SVP energy of -1803.88405461301363 after 77 SOKS iterations, while I get -1820.53977771750078, which is SEVENTEEN HARTREE lower....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664938620
https://github.com/psi4/psi4/issues/1972#issuecomment-664938620:393,Testability,log,log,393,"FWIW B3LYP/def2-SVP converges in 24 iterations from the default SAD guess, yielding S^2 = 0.7528. PBE/def2-SVP also converges in 25 iterations to S^2 = 0.7538. . The weird convergence is a combination of the non-physical guess which lacks core electrons, combined with the unnecessary use of the second-order scheme which appears to have converged to an extremely high-lying saddle point: the log file on the forum has a B3LYP/def2-SVP energy of -1803.88405461301363 after 77 SOKS iterations, while I get -1820.53977771750078, which is SEVENTEEN HARTREE lower....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664938620
https://github.com/psi4/psi4/issues/1972#issuecomment-664961848:294,Availability,robust,robustness,294,"I tend to agree that turning off the projection in that case is the most sensible. The fock matrix projection in ORCA seems to 'work' in the sense that it convergences to the same result as the default guess (PModel) in some fewer iterations. The guess energy is quite far off, though. General robustness is thus questionable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664961848
https://github.com/psi4/psi4/issues/1972#issuecomment-664961848:253,Energy Efficiency,energy,energy,253,"I tend to agree that turning off the projection in that case is the most sensible. The fock matrix projection in ORCA seems to 'work' in the sense that it convergences to the same result as the default guess (PModel) in some fewer iterations. The guess energy is quite far off, though. General robustness is thus questionable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664961848
https://github.com/psi4/psi4/issues/1972#issuecomment-664972020:1010,Availability,avail,available,1010,"I don't think this has anything to do with the projection; but rather the use of the second-order convergence acceleration scheme. Orca's `FMatrix` guess also misses the core electrons (since they don't exist in the orbitals), but the first diagonalization should reintroduce them. Of course, a question is, how is the projection implemented in Orca? You can either project the full Fock matrix, in which case the null space will be zero, or you could just project the XC part in which case the null space will essentially be the core Hamiltonian. The latter scheme would restore the core orbitals, but they wouldn't be screened at all; you might also introduce spurious valence states which will ruin the performance of the guess... Probably the best scheme would be to do the mixed-basis version in which you compute the Fock matrix in the new basis by the orbitals in the old basis without any projection operators. However, this method requires the capability to compute mixed-basis integrals which is not available in Psi4; see equation 2 in [Chem. Phys. Lett. 531, 229 (2012)](https://doi.org/10.1016/j.cplett.2012.02.012).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664972020
https://github.com/psi4/psi4/issues/1972#issuecomment-664972020:706,Performance,perform,performance,706,"I don't think this has anything to do with the projection; but rather the use of the second-order convergence acceleration scheme. Orca's `FMatrix` guess also misses the core electrons (since they don't exist in the orbitals), but the first diagonalization should reintroduce them. Of course, a question is, how is the projection implemented in Orca? You can either project the full Fock matrix, in which case the null space will be zero, or you could just project the XC part in which case the null space will essentially be the core Hamiltonian. The latter scheme would restore the core orbitals, but they wouldn't be screened at all; you might also introduce spurious valence states which will ruin the performance of the guess... Probably the best scheme would be to do the mixed-basis version in which you compute the Fock matrix in the new basis by the orbitals in the old basis without any projection operators. However, this method requires the capability to compute mixed-basis integrals which is not available in Psi4; see equation 2 in [Chem. Phys. Lett. 531, 229 (2012)](https://doi.org/10.1016/j.cplett.2012.02.012).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664972020
https://github.com/psi4/psi4/issues/1972#issuecomment-665093036:133,Energy Efficiency,energy,energy,133,"Thanks for the replies! Just FYI that the ""other software"" that I tested, which seemingly worked (at least converged to a reasonable energy with the similar spin-square value) are ORCA and Terachem, as you may wonder. And yes, for Psi4 calculations from scratch for both basis sets work can converge to the same results. The issue only happens when I tried to do the project as I want to ensure the convergence to the same electronic state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-665093036
https://github.com/psi4/psi4/issues/1972#issuecomment-665093036:66,Testability,test,tested,66,"Thanks for the replies! Just FYI that the ""other software"" that I tested, which seemingly worked (at least converged to a reasonable energy with the similar spin-square value) are ORCA and Terachem, as you may wonder. And yes, for Psi4 calculations from scratch for both basis sets work can converge to the same results. The issue only happens when I tried to do the project as I want to ensure the convergence to the same electronic state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-665093036
https://github.com/psi4/psi4/issues/1972#issuecomment-666180197:241,Testability,test,test,241,"I'm surprised the parser actually allows for this at all. The ""clever"" cast-up basis selection was implemented in #1484, but if the default is over-ridden, it's hands off. Whoever fixes this should probably check whether the values in [this test](https://github.com/psi4/psi4/blob/master/tests/basis-ecp/input.dat) are sensible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-666180197
https://github.com/psi4/psi4/issues/1972#issuecomment-666180197:288,Testability,test,tests,288,"I'm surprised the parser actually allows for this at all. The ""clever"" cast-up basis selection was implemented in #1484, but if the default is over-ridden, it's hands off. Whoever fixes this should probably check whether the values in [this test](https://github.com/psi4/psi4/blob/master/tests/basis-ecp/input.dat) are sensible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-666180197
https://github.com/psi4/psi4/issues/1973#issuecomment-665027518:449,Usability,guid,guide,449,"Thanks for the report. When I put together the first version of the FCHK writer, [I accounted for](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/writer.cc#L395-L472) the fact that Psi4 uses the CCA standard, but these normalizations didn't get applied to the Molden writer it seems. This would be a very good issue to tackle for anybody looking for a good beginner project; the comments in the FCHK writer should serve as a useful guide and I'd be very happy to consult. If there are no volunteers in a week, I'll apply the changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665027518
https://github.com/psi4/psi4/issues/1973#issuecomment-665087544:685,Energy Efficiency,charge,charge,685,"I will leave the fix in PSI4 to someone else if you don't mind. I've added a workaround for this issue in our Molden parser. Feel free to take a look: https://github.com/theochem/iodata/blob/596cac8db3d3795eaed704b35c99b71b25447bc1/iodata/formats/molden.py#L506-L536 . If someone wants to code a Python version of the Molden writer, please do so with regression tests. I've gone through some trouble to fix small bugs in the C++ code in previous PRs and it would be a shame to reintroduce similar bugs in a Python rewrite. (It is easy to introduce small mistakes.) In general, to test the generated molden files, one can always load them into the Molden program and check if the total charge is correct, as well as the Mulliken charges, which can be compared to the output of `psi4.oeprop(wfn, ""MULLIKEN_CHARGES"")`. This can be verified with increasing angular momentum of the AO basis and pure versus Cartesian conventions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544
https://github.com/psi4/psi4/issues/1973#issuecomment-665087544:728,Energy Efficiency,charge,charges,728,"I will leave the fix in PSI4 to someone else if you don't mind. I've added a workaround for this issue in our Molden parser. Feel free to take a look: https://github.com/theochem/iodata/blob/596cac8db3d3795eaed704b35c99b71b25447bc1/iodata/formats/molden.py#L506-L536 . If someone wants to code a Python version of the Molden writer, please do so with regression tests. I've gone through some trouble to fix small bugs in the C++ code in previous PRs and it would be a shame to reintroduce similar bugs in a Python rewrite. (It is easy to introduce small mistakes.) In general, to test the generated molden files, one can always load them into the Molden program and check if the total charge is correct, as well as the Mulliken charges, which can be compared to the output of `psi4.oeprop(wfn, ""MULLIKEN_CHARGES"")`. This can be verified with increasing angular momentum of the AO basis and pure versus Cartesian conventions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544
https://github.com/psi4/psi4/issues/1973#issuecomment-665087544:514,Modifiability,rewrite,rewrite,514,"I will leave the fix in PSI4 to someone else if you don't mind. I've added a workaround for this issue in our Molden parser. Feel free to take a look: https://github.com/theochem/iodata/blob/596cac8db3d3795eaed704b35c99b71b25447bc1/iodata/formats/molden.py#L506-L536 . If someone wants to code a Python version of the Molden writer, please do so with regression tests. I've gone through some trouble to fix small bugs in the C++ code in previous PRs and it would be a shame to reintroduce similar bugs in a Python rewrite. (It is easy to introduce small mistakes.) In general, to test the generated molden files, one can always load them into the Molden program and check if the total charge is correct, as well as the Mulliken charges, which can be compared to the output of `psi4.oeprop(wfn, ""MULLIKEN_CHARGES"")`. This can be verified with increasing angular momentum of the AO basis and pure versus Cartesian conventions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544
https://github.com/psi4/psi4/issues/1973#issuecomment-665087544:628,Performance,load,load,628,"I will leave the fix in PSI4 to someone else if you don't mind. I've added a workaround for this issue in our Molden parser. Feel free to take a look: https://github.com/theochem/iodata/blob/596cac8db3d3795eaed704b35c99b71b25447bc1/iodata/formats/molden.py#L506-L536 . If someone wants to code a Python version of the Molden writer, please do so with regression tests. I've gone through some trouble to fix small bugs in the C++ code in previous PRs and it would be a shame to reintroduce similar bugs in a Python rewrite. (It is easy to introduce small mistakes.) In general, to test the generated molden files, one can always load them into the Molden program and check if the total charge is correct, as well as the Mulliken charges, which can be compared to the output of `psi4.oeprop(wfn, ""MULLIKEN_CHARGES"")`. This can be verified with increasing angular momentum of the AO basis and pure versus Cartesian conventions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544
https://github.com/psi4/psi4/issues/1973#issuecomment-665087544:362,Testability,test,tests,362,"I will leave the fix in PSI4 to someone else if you don't mind. I've added a workaround for this issue in our Molden parser. Feel free to take a look: https://github.com/theochem/iodata/blob/596cac8db3d3795eaed704b35c99b71b25447bc1/iodata/formats/molden.py#L506-L536 . If someone wants to code a Python version of the Molden writer, please do so with regression tests. I've gone through some trouble to fix small bugs in the C++ code in previous PRs and it would be a shame to reintroduce similar bugs in a Python rewrite. (It is easy to introduce small mistakes.) In general, to test the generated molden files, one can always load them into the Molden program and check if the total charge is correct, as well as the Mulliken charges, which can be compared to the output of `psi4.oeprop(wfn, ""MULLIKEN_CHARGES"")`. This can be verified with increasing angular momentum of the AO basis and pure versus Cartesian conventions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544
https://github.com/psi4/psi4/issues/1973#issuecomment-665087544:580,Testability,test,test,580,"I will leave the fix in PSI4 to someone else if you don't mind. I've added a workaround for this issue in our Molden parser. Feel free to take a look: https://github.com/theochem/iodata/blob/596cac8db3d3795eaed704b35c99b71b25447bc1/iodata/formats/molden.py#L506-L536 . If someone wants to code a Python version of the Molden writer, please do so with regression tests. I've gone through some trouble to fix small bugs in the C++ code in previous PRs and it would be a shame to reintroduce similar bugs in a Python rewrite. (It is easy to introduce small mistakes.) In general, to test the generated molden files, one can always load them into the Molden program and check if the total charge is correct, as well as the Mulliken charges, which can be compared to the output of `psi4.oeprop(wfn, ""MULLIKEN_CHARGES"")`. This can be verified with increasing angular momentum of the AO basis and pure versus Cartesian conventions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544
https://github.com/psi4/psi4/issues/1973#issuecomment-665720944:43,Testability,test,test,43,"@sgoodlett That's great. If you need me to test things, please let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665720944
https://github.com/psi4/psi4/issues/1973#issuecomment-747554735:313,Availability,error,errors,313,"@sgoodlett and I have been working on this and have to ask about an older PR. @tovrstra, in #1510, why did you go to **17** decimal places? I understand that we can go beyond four decimal places, but I wouldn't expect reproducibility to 17 decimal places due to finite machine precision, and indeed, we're seeing errors out that far.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747554735
https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:65,Availability,error,errors,65,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817
https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:421,Availability,error,errors,421,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817
https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:912,Availability,error,error,912,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817
https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:336,Deployability,integrat,integration,336,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817
https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:657,Energy Efficiency,charge,charge,657,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817
https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:797,Energy Efficiency,charge,charges,797,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817
https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:822,Energy Efficiency,charge,charge,822,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817
https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:336,Integrability,integrat,integration,336,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817
https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:452,Safety,avoid,avoid,452,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817
https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:835,Safety,avoid,avoiding,835,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817
https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:202,Security,validat,validate,202,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817
https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:117,Testability,test,testing,117,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817
https://github.com/psi4/psi4/issues/1975#issuecomment-673778148:439,Performance,perform,perform,439,"Filip, I think you're right that the orbital energies are the problem, and I think the root of the problem is that ROHF by default does not semicanonicalize the orbitals. . I ran a simple test with a single triplet helium atom, and the orbital energies from ROHF match the UHF ones if I do `wfn.semicanonicalize()` but don't match if I don't do it. I am quite sure that USAPT requires canonical orbitals, and maybe the USAPT driver should perform semicanonicalization for a ROHF reference. I wonder if the SAPT(ROHF) code was always like this or if the semicanonicalization disappeared somewhere along the way. @jgonthier might know more about this. With the current version, the Psi4NumPy `SAPT0_ROHF.py` example (which is two triplet oxygen molecules) gives different second-order energies if semicanonicalization is performed, and I think the result without semicanonicalizing is wrong for both Psi4 and Psi4NumPy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-673778148
https://github.com/psi4/psi4/issues/1975#issuecomment-673778148:819,Performance,perform,performed,819,"Filip, I think you're right that the orbital energies are the problem, and I think the root of the problem is that ROHF by default does not semicanonicalize the orbitals. . I ran a simple test with a single triplet helium atom, and the orbital energies from ROHF match the UHF ones if I do `wfn.semicanonicalize()` but don't match if I don't do it. I am quite sure that USAPT requires canonical orbitals, and maybe the USAPT driver should perform semicanonicalization for a ROHF reference. I wonder if the SAPT(ROHF) code was always like this or if the semicanonicalization disappeared somewhere along the way. @jgonthier might know more about this. With the current version, the Psi4NumPy `SAPT0_ROHF.py` example (which is two triplet oxygen molecules) gives different second-order energies if semicanonicalization is performed, and I think the result without semicanonicalizing is wrong for both Psi4 and Psi4NumPy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-673778148
https://github.com/psi4/psi4/issues/1975#issuecomment-673778148:188,Testability,test,test,188,"Filip, I think you're right that the orbital energies are the problem, and I think the root of the problem is that ROHF by default does not semicanonicalize the orbitals. . I ran a simple test with a single triplet helium atom, and the orbital energies from ROHF match the UHF ones if I do `wfn.semicanonicalize()` but don't match if I don't do it. I am quite sure that USAPT requires canonical orbitals, and maybe the USAPT driver should perform semicanonicalization for a ROHF reference. I wonder if the SAPT(ROHF) code was always like this or if the semicanonicalization disappeared somewhere along the way. @jgonthier might know more about this. With the current version, the Psi4NumPy `SAPT0_ROHF.py` example (which is two triplet oxygen molecules) gives different second-order energies if semicanonicalization is performed, and I think the result without semicanonicalizing is wrong for both Psi4 and Psi4NumPy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-673778148
https://github.com/psi4/psi4/issues/1975#issuecomment-673778148:181,Usability,simpl,simple,181,"Filip, I think you're right that the orbital energies are the problem, and I think the root of the problem is that ROHF by default does not semicanonicalize the orbitals. . I ran a simple test with a single triplet helium atom, and the orbital energies from ROHF match the UHF ones if I do `wfn.semicanonicalize()` but don't match if I don't do it. I am quite sure that USAPT requires canonical orbitals, and maybe the USAPT driver should perform semicanonicalization for a ROHF reference. I wonder if the SAPT(ROHF) code was always like this or if the semicanonicalization disappeared somewhere along the way. @jgonthier might know more about this. With the current version, the Psi4NumPy `SAPT0_ROHF.py` example (which is two triplet oxygen molecules) gives different second-order energies if semicanonicalization is performed, and I think the result without semicanonicalizing is wrong for both Psi4 and Psi4NumPy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-673778148
https://github.com/psi4/psi4/issues/1975#issuecomment-674363193:32,Deployability,release,release,32,"@konpat looking at first stable release that had USAPT solvers (v1.1), there is no ```wfn.semicanonicalize()``` in driver's ```run_sapt``` function, so it might be the case that the code was always like this. I'll try to set up a SAPT2020 package locally, with Piotr's SAPT(ROKS/ROHF) (http://dx.doi.org/10.1063/1.2968556) to compare how much impact this has on existing test cases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-674363193
https://github.com/psi4/psi4/issues/1975#issuecomment-674363193:371,Testability,test,test,371,"@konpat looking at first stable release that had USAPT solvers (v1.1), there is no ```wfn.semicanonicalize()``` in driver's ```run_sapt``` function, so it might be the case that the code was always like this. I'll try to set up a SAPT2020 package locally, with Piotr's SAPT(ROKS/ROHF) (http://dx.doi.org/10.1063/1.2968556) to compare how much impact this has on existing test cases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-674363193
https://github.com/psi4/psi4/issues/1975#issuecomment-674603984:333,Testability,test,test,333,"Thanks for confirming, @jgonthier. In this case, I'm quite certain that the second-order SAPT(ROHF) results so far have been incorrect (except for maybe doublets?). @PhillCli's semicanonicalization fix does make the ROHF and UHF-based results match for two triplet helium atoms, and we should soon have a confirmation, on a few more test cases, that semicanonicalization is the way to go. When the fix is merged into Psi4, I will introduce a similar fix into the Psi4NumPy SAPT(ROHF) example (right now the Psi4NumPy and Psi results match because they are wrong in the same way). There's one aspect of this that goes beyond SAPT. The orbital energies printed by ROHF by default are incorrect without semicanonicalization. Perhaps ROHF should not be printing them at all, or at least add a warning that these are not the actual orbital energies?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-674603984
https://github.com/psi4/psi4/issues/1975#issuecomment-675473265:301,Availability,avail,available,301,"I don't think the ROHF orbital energies are incorrect, but they're [ambiguously defined](https://aip.scitation.org/doi/10.1063/1.4849615) due to an arbitrary choice of coupling between same-symmetry closed and open shell blocks. We do have [CUHF](https://aip.scitation.org/doi/full/10.1063/1.3503173) available, which gives an S^2 eigenfunction (i.e. ROHF) with the orbital energies emerging the same as what would come from semicanonicalization; either that or the default ROHF (followed by semicanonicalization) should be equally good references for SAPT, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-675473265
https://github.com/psi4/psi4/issues/1975#issuecomment-675473265:168,Modifiability,coupling,coupling,168,"I don't think the ROHF orbital energies are incorrect, but they're [ambiguously defined](https://aip.scitation.org/doi/10.1063/1.4849615) due to an arbitrary choice of coupling between same-symmetry closed and open shell blocks. We do have [CUHF](https://aip.scitation.org/doi/full/10.1063/1.3503173) available, which gives an S^2 eigenfunction (i.e. ROHF) with the orbital energies emerging the same as what would come from semicanonicalization; either that or the default ROHF (followed by semicanonicalization) should be equally good references for SAPT, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-675473265
https://github.com/psi4/psi4/pull/1977#issuecomment-671090655:476,Testability,test,test,476,"`ftrue_atomic_number` (ie including dummy atoms) gives **wrong** atomic numbers in the case of `nbody` calculations, leading non-sense energies. I think this is because `ftrue_atomic_numbers` uses `nallatoms()` and not `natom()`, which equates to the dimer molecule dimension and _ordering_. That is likely how it should work, @loriab can you confirm?. Thus we need to use `true_atomic_numbers` (without the leading f) here and it gives indeed correct values. I'll modify the test to include `nbody` capacities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1977#issuecomment-671090655
https://github.com/psi4/psi4/pull/1977#issuecomment-671224246:31,Energy Efficiency,energy,energy,31,"Turns out the PCM polarisation energy was way too large when using ghost atoms. I compared with what ORCA gives and I found I had to change back to 'ghost atoms' here: https://github.com/psi4/psi4/pull/1977/files#diff-acd2a9822c706c971498ea1a2669bb7eR175; Didn't try to reproduce ORCA exactly (not sure what PCM settings are needed in detail, if possible at all), but it looks similar enough. @robertodr, can you have another look? static casting for the int<->double conversion OK for visibility?; Are there similar cases inside pcmsolver where one needs to differentiate between cavity-building-atoms and charge-carrying atoms?. I also manually checked the PEDRA outputs and the ghost atom-system uses the correct dimer-sized cavity.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1977#issuecomment-671224246
https://github.com/psi4/psi4/pull/1977#issuecomment-671224246:607,Energy Efficiency,charge,charge-carrying,607,"Turns out the PCM polarisation energy was way too large when using ghost atoms. I compared with what ORCA gives and I found I had to change back to 'ghost atoms' here: https://github.com/psi4/psi4/pull/1977/files#diff-acd2a9822c706c971498ea1a2669bb7eR175; Didn't try to reproduce ORCA exactly (not sure what PCM settings are needed in detail, if possible at all), but it looks similar enough. @robertodr, can you have another look? static casting for the int<->double conversion OK for visibility?; Are there similar cases inside pcmsolver where one needs to differentiate between cavity-building-atoms and charge-carrying atoms?. I also manually checked the PEDRA outputs and the ghost atom-system uses the correct dimer-sized cavity.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1977#issuecomment-671224246
https://github.com/psi4/psi4/pull/1977#issuecomment-671317861:572,Energy Efficiency,charge,charge-carrying,572,"> Didn't try to reproduce ORCA exactly (not sure what PCM settings are needed in detail, if possible at all), but it looks similar enough. I am not familiar with ORCA's implementation, but you could try to set the same exact permittivity and a very fine discretization of the cavity to get as close as possible.; ; > @robertodr, can you have another look? static casting for the int<->double conversion OK for visibility?. Yes, `static_cast` is reasonable here. > Are there similar cases inside pcmsolver where one needs to differentiate between cavity-building-atoms and charge-carrying atoms?. This is the only case where I can think a reasonable default can be devised.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1977#issuecomment-671317861
https://github.com/psi4/psi4/issues/1979#issuecomment-671572540:15,Deployability,install,installing,15,"Have you tried installing into an environment (i.e., `conda create -n p4env python=3.8 psi4 -c psi4`)? Especially with heavy main environments like an Anaconda installation, there may be small pinning problems like mkl=2019.4 vs 2020.2 (b/c psi4 releases don't get rebuilt) that manifest as UnsatisfiableError. For most anyone, a recent psi4 would do. (Testing is the same as for releases.) `conda install psi4 -c psi4/label/dev`. The upper limit on python version is because psi4 must be built for each version. E.g., one could compile psi against a py3.9 alpha, but until one does (and checks that all the deps do, too), there's an upper limit to what can be installed. (That `2.7.*` is because the constraint solver can find _some_ psi4 for py27 in that channel; it won't be the one you want.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671572540
https://github.com/psi4/psi4/issues/1979#issuecomment-671572540:160,Deployability,install,installation,160,"Have you tried installing into an environment (i.e., `conda create -n p4env python=3.8 psi4 -c psi4`)? Especially with heavy main environments like an Anaconda installation, there may be small pinning problems like mkl=2019.4 vs 2020.2 (b/c psi4 releases don't get rebuilt) that manifest as UnsatisfiableError. For most anyone, a recent psi4 would do. (Testing is the same as for releases.) `conda install psi4 -c psi4/label/dev`. The upper limit on python version is because psi4 must be built for each version. E.g., one could compile psi against a py3.9 alpha, but until one does (and checks that all the deps do, too), there's an upper limit to what can be installed. (That `2.7.*` is because the constraint solver can find _some_ psi4 for py27 in that channel; it won't be the one you want.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671572540
https://github.com/psi4/psi4/issues/1979#issuecomment-671572540:246,Deployability,release,releases,246,"Have you tried installing into an environment (i.e., `conda create -n p4env python=3.8 psi4 -c psi4`)? Especially with heavy main environments like an Anaconda installation, there may be small pinning problems like mkl=2019.4 vs 2020.2 (b/c psi4 releases don't get rebuilt) that manifest as UnsatisfiableError. For most anyone, a recent psi4 would do. (Testing is the same as for releases.) `conda install psi4 -c psi4/label/dev`. The upper limit on python version is because psi4 must be built for each version. E.g., one could compile psi against a py3.9 alpha, but until one does (and checks that all the deps do, too), there's an upper limit to what can be installed. (That `2.7.*` is because the constraint solver can find _some_ psi4 for py27 in that channel; it won't be the one you want.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671572540
https://github.com/psi4/psi4/issues/1979#issuecomment-671572540:380,Deployability,release,releases,380,"Have you tried installing into an environment (i.e., `conda create -n p4env python=3.8 psi4 -c psi4`)? Especially with heavy main environments like an Anaconda installation, there may be small pinning problems like mkl=2019.4 vs 2020.2 (b/c psi4 releases don't get rebuilt) that manifest as UnsatisfiableError. For most anyone, a recent psi4 would do. (Testing is the same as for releases.) `conda install psi4 -c psi4/label/dev`. The upper limit on python version is because psi4 must be built for each version. E.g., one could compile psi against a py3.9 alpha, but until one does (and checks that all the deps do, too), there's an upper limit to what can be installed. (That `2.7.*` is because the constraint solver can find _some_ psi4 for py27 in that channel; it won't be the one you want.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671572540
https://github.com/psi4/psi4/issues/1979#issuecomment-671572540:398,Deployability,install,install,398,"Have you tried installing into an environment (i.e., `conda create -n p4env python=3.8 psi4 -c psi4`)? Especially with heavy main environments like an Anaconda installation, there may be small pinning problems like mkl=2019.4 vs 2020.2 (b/c psi4 releases don't get rebuilt) that manifest as UnsatisfiableError. For most anyone, a recent psi4 would do. (Testing is the same as for releases.) `conda install psi4 -c psi4/label/dev`. The upper limit on python version is because psi4 must be built for each version. E.g., one could compile psi against a py3.9 alpha, but until one does (and checks that all the deps do, too), there's an upper limit to what can be installed. (That `2.7.*` is because the constraint solver can find _some_ psi4 for py27 in that channel; it won't be the one you want.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671572540
https://github.com/psi4/psi4/issues/1979#issuecomment-671572540:661,Deployability,install,installed,661,"Have you tried installing into an environment (i.e., `conda create -n p4env python=3.8 psi4 -c psi4`)? Especially with heavy main environments like an Anaconda installation, there may be small pinning problems like mkl=2019.4 vs 2020.2 (b/c psi4 releases don't get rebuilt) that manifest as UnsatisfiableError. For most anyone, a recent psi4 would do. (Testing is the same as for releases.) `conda install psi4 -c psi4/label/dev`. The upper limit on python version is because psi4 must be built for each version. E.g., one could compile psi against a py3.9 alpha, but until one does (and checks that all the deps do, too), there's an upper limit to what can be installed. (That `2.7.*` is because the constraint solver can find _some_ psi4 for py27 in that channel; it won't be the one you want.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671572540
https://github.com/psi4/psi4/issues/1979#issuecomment-671572540:353,Testability,Test,Testing,353,"Have you tried installing into an environment (i.e., `conda create -n p4env python=3.8 psi4 -c psi4`)? Especially with heavy main environments like an Anaconda installation, there may be small pinning problems like mkl=2019.4 vs 2020.2 (b/c psi4 releases don't get rebuilt) that manifest as UnsatisfiableError. For most anyone, a recent psi4 would do. (Testing is the same as for releases.) `conda install psi4 -c psi4/label/dev`. The upper limit on python version is because psi4 must be built for each version. E.g., one could compile psi against a py3.9 alpha, but until one does (and checks that all the deps do, too), there's an upper limit to what can be installed. (That `2.7.*` is because the constraint solver can find _some_ psi4 for py27 in that channel; it won't be the one you want.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671572540
https://github.com/psi4/psi4/issues/1979#issuecomment-671585693:62,Availability,avail,avail,62,"I tried `conda create -n p4env python=3.8 psi4 -c psi4` to no avail:. ```; UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0']; psi4 -> networkx -> python[version='>=3.5|>=3.8,<3.9.0a0|>=3.6.0|>=3.6']; python=3.8; ```. I'm out of my depths here, but it seems that networkx already works in python3.8, so I'm not sure why that would show up as a conflict. A Python 3.8 build would be great, since it seems to be the default python in Conda now (and it will allow people to start arguing over walrus operators in their code). Installing with `python=3.7` works.; Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671585693
https://github.com/psi4/psi4/issues/1979#issuecomment-671585693:211,Availability,Avail,Available,211,"I tried `conda create -n p4env python=3.8 psi4 -c psi4` to no avail:. ```; UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0']; psi4 -> networkx -> python[version='>=3.5|>=3.8,<3.9.0a0|>=3.6.0|>=3.6']; python=3.8; ```. I'm out of my depths here, but it seems that networkx already works in python3.8, so I'm not sure why that would show up as a conflict. A Python 3.8 build would be great, since it seems to be the default python in Conda now (and it will allow people to start arguing over walrus operators in their code). Installing with `python=3.7` works.; Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671585693
https://github.com/psi4/psi4/issues/1979#issuecomment-671585693:763,Deployability,Install,Installing,763,"I tried `conda create -n p4env python=3.8 psi4 -c psi4` to no avail:. ```; UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0']; psi4 -> networkx -> python[version='>=3.5|>=3.8,<3.9.0a0|>=3.6.0|>=3.6']; python=3.8; ```. I'm out of my depths here, but it seems that networkx already works in python3.8, so I'm not sure why that would show up as a conflict. A Python 3.8 build would be great, since it seems to be the default python in Conda now (and it will allow people to start arguing over walrus operators in their code). Installing with `python=3.7` works.; Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671585693
https://github.com/psi4/psi4/issues/1979#issuecomment-671664349:252,Deployability,release,release,252,"I wonder if this is obvious, but there's no Psi4 for python 3.8 in the main channel:; ```; linux-64/psi4-1.3.2+ecbda83-py37h06ff01c_1.tar.bz2; linux-64/psi4-1.3.2+ecbda83-py36h34e5639_1.tar.bz2; ```; That being said, unless you really want the current release version (1.3.2), I'd strongly suggest you go for Psi4 from the `dev` channel using `conda create -n p4env python=3.8 psi4 -c psi4/label/dev`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671664349
https://github.com/psi4/psi4/issues/1979#issuecomment-671666352:181,Deployability,release,release,181,"Yes, read my comment above as if I was thinking there was a v1.3.2 py38 build. I was misremembering -- there isn't. . * v1.3 was py36/37.; * Since then, psi4 is py36/37/38.; * v1.4 release may well be py37/38/39.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671666352
https://github.com/psi4/psi4/issues/1979#issuecomment-874806341:15,Availability,error,error,15,"I still get an error entering 'conda create -n p4env python=3.8 psi4 -c psi4/label/dev' into anaconda prompt. does my computer being a windows have anything to do with this failed installation?. `(base) C:\Users\erikc>conda create -n p4env python=3.8 psi4 -c psi4/label/dev; WARNING: A directory already exists at the target location 'C:\Users\erikc\anaconda3\envs\p4env'; but it is not a conda environment.; Continue creating environment (y/[n])? y. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; python=3.8; psi4 -> python=3.8`. I would appreciate any help to get psi4 up and running. thanks",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341
https://github.com/psi4/psi4/issues/1979#issuecomment-874806341:946,Availability,Avail,Available,946,"I still get an error entering 'conda create -n p4env python=3.8 psi4 -c psi4/label/dev' into anaconda prompt. does my computer being a windows have anything to do with this failed installation?. `(base) C:\Users\erikc>conda create -n p4env python=3.8 psi4 -c psi4/label/dev; WARNING: A directory already exists at the target location 'C:\Users\erikc\anaconda3\envs\p4env'; but it is not a conda environment.; Continue creating environment (y/[n])? y. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; python=3.8; psi4 -> python=3.8`. I would appreciate any help to get psi4 up and running. thanks",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341
https://github.com/psi4/psi4/issues/1979#issuecomment-874806341:180,Deployability,install,installation,180,"I still get an error entering 'conda create -n p4env python=3.8 psi4 -c psi4/label/dev' into anaconda prompt. does my computer being a windows have anything to do with this failed installation?. `(base) C:\Users\erikc>conda create -n p4env python=3.8 psi4 -c psi4/label/dev; WARNING: A directory already exists at the target location 'C:\Users\erikc\anaconda3\envs\p4env'; but it is not a conda environment.; Continue creating environment (y/[n])? y. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; python=3.8; psi4 -> python=3.8`. I would appreciate any help to get psi4 up and running. thanks",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341
https://github.com/psi4/psi4/issues/1979#issuecomment-874806341:794,Safety,abort,abort,794,"I still get an error entering 'conda create -n p4env python=3.8 psi4 -c psi4/label/dev' into anaconda prompt. does my computer being a windows have anything to do with this failed installation?. `(base) C:\Users\erikc>conda create -n p4env python=3.8 psi4 -c psi4/label/dev; WARNING: A directory already exists at the target location 'C:\Users\erikc\anaconda3\envs\p4env'; but it is not a conda environment.; Continue creating environment (y/[n])? y. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; python=3.8; psi4 -> python=3.8`. I would appreciate any help to get psi4 up and running. thanks",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341
https://github.com/psi4/psi4/issues/1979#issuecomment-874812821:186,Availability,error,error,186,Is this Windows native or Windows WSL?. > WARNING: A directory already exists at the target location 'C:\Users\erikc\anaconda3\envs\p4env'; > but it is not a conda environment. Does the error persists if you delete the old environment or directory first?; Or use a different name than `p4env`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874812821
https://github.com/psi4/psi4/issues/1979#issuecomment-874814114:722,Availability,Avail,Available,722,"(base) C:\Users\erikc>conda create -n p4envnew python=3.8 psi4 -c psi4/label/dev; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: \; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining @/win-64::__win==0=0: 80%|████████████████████████████████████████████████████████████████████████████▊ | 4/5 [00:00<00:00, 14.60it/s]-failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; psi4 -> python=3.8; python=3.8. I dont think it is the environment name",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874814114
https://github.com/psi4/psi4/issues/1979#issuecomment-874814114:425,Safety,abort,abort,425,"(base) C:\Users\erikc>conda create -n p4envnew python=3.8 psi4 -c psi4/label/dev; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: \; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining @/win-64::__win==0=0: 80%|████████████████████████████████████████████████████████████████████████████▊ | 4/5 [00:00<00:00, 14.60it/s]-failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; psi4 -> python=3.8; python=3.8. I dont think it is the environment name",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874814114
https://github.com/psi4/psi4/pull/1980#issuecomment-676411057:337,Availability,toler,tolerance,337,"The `pcg_convergence` behavior is a change for the better. Your analysis of the issue is right, but I'd rather couple `pcg_convergence` to `r_convergence`, how tightly the residual equations are satisfied. The CEPA is a touch trickier. My initial tests say that the energy convergence is working just fine. What isn't within convergence tolerance is the decomposition of correlation energy into same-spin and opposite-spin components. Is that what you're seeing? I can investigate, but this may not be an implementation issue, just a quirk of the equations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-676411057
