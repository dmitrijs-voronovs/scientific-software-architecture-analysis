id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/setup.py:22,Modifiability,config,config,22,"""""""Wrapper around pkg-config command line tool.""""""",MatchSource.CODE_COMMENT,scripts/python/setup.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/setup.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/setup.py:44,Deployability,install,installed,44,"# Warn if the (major, minor) version of the installed OB doesn't match these python bindings",MatchSource.CODE_COMMENT,scripts/python/setup.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/setup.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/setup.py:34,Deployability,install,install,34,"""""""Ensure build_ext runs first in install command.""""""",MatchSource.CODE_COMMENT,scripts/python/setup.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/setup.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/setup.py:12,Integrability,interface,interface,12,"""""""Add swig interface files into distribution from parent directory.""""""",MatchSource.CODE_COMMENT,scripts/python/setup.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/setup.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/setup.py:59,Availability,error,error,59,"""""""Custom build_ext to set SWIG options and print a better error message.""""""",MatchSource.CODE_COMMENT,scripts/python/setup.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/setup.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/setup.py:65,Integrability,message,message,65,"""""""Custom build_ext to set SWIG options and print a better error message.""""""",MatchSource.CODE_COMMENT,scripts/python/setup.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/setup.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:299,Performance,perform,performance,299,"# This file is meant primarily for people who want to see an example; # of how to use part of the OpenBabel API, with a secondary use as a; # set of quick unit tests to make sure there's no strange but obvious; # problem with your OpenBabel setup.; # Regression tests, coverage tests, stress tests, performance tests,; # etc. should not go in this file.",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:160,Testability,test,tests,160,"# This file is meant primarily for people who want to see an example; # of how to use part of the OpenBabel API, with a secondary use as a; # set of quick unit tests to make sure there's no strange but obvious; # problem with your OpenBabel setup.; # Regression tests, coverage tests, stress tests, performance tests,; # etc. should not go in this file.",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:262,Testability,test,tests,262,"# This file is meant primarily for people who want to see an example; # of how to use part of the OpenBabel API, with a secondary use as a; # set of quick unit tests to make sure there's no strange but obvious; # problem with your OpenBabel setup.; # Regression tests, coverage tests, stress tests, performance tests,; # etc. should not go in this file.",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:278,Testability,test,tests,278,"# This file is meant primarily for people who want to see an example; # of how to use part of the OpenBabel API, with a secondary use as a; # set of quick unit tests to make sure there's no strange but obvious; # problem with your OpenBabel setup.; # Regression tests, coverage tests, stress tests, performance tests,; # etc. should not go in this file.",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:292,Testability,test,tests,292,"# This file is meant primarily for people who want to see an example; # of how to use part of the OpenBabel API, with a secondary use as a; # set of quick unit tests to make sure there's no strange but obvious; # problem with your OpenBabel setup.; # Regression tests, coverage tests, stress tests, performance tests,; # etc. should not go in this file.",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:311,Testability,test,tests,311,"# This file is meant primarily for people who want to see an example; # of how to use part of the OpenBabel API, with a secondary use as a; # set of quick unit tests to make sure there's no strange but obvious; # problem with your OpenBabel setup.; # Regression tests, coverage tests, stress tests, performance tests,; # etc. should not go in this file.",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:37,Integrability,message,messages,37,"# Some of the API calls generate log messages. I don't want to; # see them when doing the testing.",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:33,Testability,log,log,33,"# Some of the API calls generate log messages. I don't want to; # see them when doing the testing.",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:90,Testability,test,testing,90,"# Some of the API calls generate log messages. I don't want to; # see them when doing the testing.",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:6,Modifiability,plugin,plugin,6,"# The plugin system requires that OBConversion be called first.; # This is done once, and it affects the entire system; # Check for that case now",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:337,Testability,test,test,337,"# XXX For some reason, this generates the warning; # Warning in WriteMolecule No 2D or 3D coordinates exist.; # Any stereochemical information will be lost. To generate; # 2D or 3D coordinates use --gen2D or --gen3d.; # Since not all users of the API will have a --gen2D/--gen3d option,; # that's not always going to be useful. Plus, my test cases; # have no stereochemical information. Oh, and hey - I don't even; # call WriteMolecule directly",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:230,Testability,assert,assertEquals,230,"## def test_list(self):; ## # XXX GRR! To capture requires passing a 3rd argument which is a std:ostream; ## # I can't figure out how to do that in OpenBabel; ## s = ob.OBFingerprint.List(""fingerprints"").splitlines(True); ## self.assertEquals(s[0], ""FP2 Indexes linear fragments up to 7 atoms.\n""); ## self.assertEquals(s[1], ""FP3 SMARTS patterns specified in the file ""; ## ""patterns.txt\n""); ## self.assertEquals(s[2], ""FP4 SMARTS patterns specified in the file ""; ## ""SMARTS_InteLigand.txt\n""); ## self.assertEquals(s[3], ""MACCS SMARTS patterns specified in the file MACCS.txt\n""); ## self.assertEquals(len(s)>=4, True, s)",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:307,Testability,assert,assertEquals,307,"## def test_list(self):; ## # XXX GRR! To capture requires passing a 3rd argument which is a std:ostream; ## # I can't figure out how to do that in OpenBabel; ## s = ob.OBFingerprint.List(""fingerprints"").splitlines(True); ## self.assertEquals(s[0], ""FP2 Indexes linear fragments up to 7 atoms.\n""); ## self.assertEquals(s[1], ""FP3 SMARTS patterns specified in the file ""; ## ""patterns.txt\n""); ## self.assertEquals(s[2], ""FP4 SMARTS patterns specified in the file ""; ## ""SMARTS_InteLigand.txt\n""); ## self.assertEquals(s[3], ""MACCS SMARTS patterns specified in the file MACCS.txt\n""); ## self.assertEquals(len(s)>=4, True, s)",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:402,Testability,assert,assertEquals,402,"## def test_list(self):; ## # XXX GRR! To capture requires passing a 3rd argument which is a std:ostream; ## # I can't figure out how to do that in OpenBabel; ## s = ob.OBFingerprint.List(""fingerprints"").splitlines(True); ## self.assertEquals(s[0], ""FP2 Indexes linear fragments up to 7 atoms.\n""); ## self.assertEquals(s[1], ""FP3 SMARTS patterns specified in the file ""; ## ""patterns.txt\n""); ## self.assertEquals(s[2], ""FP4 SMARTS patterns specified in the file ""; ## ""SMARTS_InteLigand.txt\n""); ## self.assertEquals(s[3], ""MACCS SMARTS patterns specified in the file MACCS.txt\n""); ## self.assertEquals(len(s)>=4, True, s)",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:506,Testability,assert,assertEquals,506,"## def test_list(self):; ## # XXX GRR! To capture requires passing a 3rd argument which is a std:ostream; ## # I can't figure out how to do that in OpenBabel; ## s = ob.OBFingerprint.List(""fingerprints"").splitlines(True); ## self.assertEquals(s[0], ""FP2 Indexes linear fragments up to 7 atoms.\n""); ## self.assertEquals(s[1], ""FP3 SMARTS patterns specified in the file ""; ## ""patterns.txt\n""); ## self.assertEquals(s[2], ""FP4 SMARTS patterns specified in the file ""; ## ""SMARTS_InteLigand.txt\n""); ## self.assertEquals(s[3], ""MACCS SMARTS patterns specified in the file MACCS.txt\n""); ## self.assertEquals(len(s)>=4, True, s)",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:593,Testability,assert,assertEquals,593,"## def test_list(self):; ## # XXX GRR! To capture requires passing a 3rd argument which is a std:ostream; ## # I can't figure out how to do that in OpenBabel; ## s = ob.OBFingerprint.List(""fingerprints"").splitlines(True); ## self.assertEquals(s[0], ""FP2 Indexes linear fragments up to 7 atoms.\n""); ## self.assertEquals(s[1], ""FP3 SMARTS patterns specified in the file ""; ## ""patterns.txt\n""); ## self.assertEquals(s[2], ""FP4 SMARTS patterns specified in the file ""; ## ""SMARTS_InteLigand.txt\n""); ## self.assertEquals(s[3], ""MACCS SMARTS patterns specified in the file MACCS.txt\n""); ## self.assertEquals(len(s)>=4, True, s)",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:36,Security,access,accessible,36,"# XXX I don't think DescribeBits is accessible from Python; # XXX What do I do with the result of GetMap?; # XXX What are ""Flags()"" for?",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:63,Testability,test,test,63,"# TODO: change my MACCS.txt so it's correct; # then rerun this test and change to the right answer",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:32,Availability,error,error,32,"# This will send message to the error log.",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:17,Integrability,message,message,17,"# This will send message to the error log.",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:38,Testability,log,log,38,"# This will send message to the error log.",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:17,Availability,error,error,17,"# This writes an error to the log",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:30,Testability,log,log,30,"# This writes an error to the log",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:65,Availability,error,error,65,"# Re-init and verify that there's an overwrite; # This writes an error to the log",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:78,Testability,log,log,78,"# Re-init and verify that there's an overwrite; # This writes an error to the log",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:299,Testability,assert,assertEquals,299,"### XXX By symmetry I thought something like this would work; # It does not since there is no ob.OBBondAtomIter; # def test_bond_iteration(self):; # mol = parse_smiles(""C#N""); # elements = []; # for atom in ob.OBBondAtomIter(bond):; # elements.append(atom.GetAtomicNum()); # elements.sort(); # self.assertEquals(elements, [6, 7]); # Most people don't do molecule building, so I'm not going to test all the variations",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:393,Testability,test,test,393,"### XXX By symmetry I thought something like this would work; # It does not since there is no ob.OBBondAtomIter; # def test_bond_iteration(self):; # mol = parse_smiles(""C#N""); # elements = []; # for atom in ob.OBBondAtomIter(bond):; # elements.append(atom.GetAtomicNum()); # elements.sort(); # self.assertEquals(elements, [6, 7]); # Most people don't do molecule building, so I'm not going to test all the variations",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:26,Testability,test,tested,26,"# def test_title(self): # tested in the IO module",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:26,Security,access,accessible,26,"# Whee! This isn't really accessible to Python. XXX; # Should I use ctypes to peer into the object?; # self.assertEquals(atom.GetCoordinate(), ...?)",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:108,Testability,assert,assertEquals,108,"# Whee! This isn't really accessible to Python. XXX; # Should I use ctypes to peer into the object?; # self.assertEquals(atom.GetCoordinate(), ...?)",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:25,Availability,failure,failure,25,"# This is the documented failure condition",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:30,Testability,test,test,30,"## This returns True, but the test is rather meaningless; # since there are no coordinates.",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:43,Integrability,message,message,43,"# If I don't move this atom then I get the message; # *** Open Babel Warning in SetLength; # Atoms are both at the same location, moving out of the way.",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:11,Modifiability,plugin,plugin,11,"# Huh. The plugin system uses case-insensitive lookup",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:51,Security,validat,validation,51,"# These are meant to be fast unit tests, and not a validation suite.; # Therefore I'll only run two tests then exit",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:34,Testability,test,tests,34,"# These are meant to be fast unit tests, and not a validation suite.; # Therefore I'll only run two tests then exit",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:100,Testability,test,tests,100,"# These are meant to be fast unit tests, and not a validation suite.; # Therefore I'll only run two tests then exit",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:22,Testability,test,tests,22,"# The basis for these tests come from ffghemical.cpp",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:22,Testability,test,tests,22,"# The basis for these tests come from ffgaff.cpp",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:24,Testability,test,tests,24,"# These basis for these tests comes from ffmmff94.cpp",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:14,Testability,test,test,14,"## Doing this test does not show anything new about the OpenBabel API; ## and it dumps more useless text (for the purposes of testing) to stdout; #expected_results = map(float, open(testfile(""more-mmff94results.txt"")).readlines()); #self._test_energies(""MMFF94"", expected_results, testfile(""more-mmff94.sdf""))",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:126,Testability,test,testing,126,"## Doing this test does not show anything new about the OpenBabel API; ## and it dumps more useless text (for the purposes of testing) to stdout; #expected_results = map(float, open(testfile(""more-mmff94results.txt"")).readlines()); #self._test_energies(""MMFF94"", expected_results, testfile(""more-mmff94.sdf""))",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:182,Testability,test,testfile,182,"## Doing this test does not show anything new about the OpenBabel API; ## and it dumps more useless text (for the purposes of testing) to stdout; #expected_results = map(float, open(testfile(""more-mmff94results.txt"")).readlines()); #self._test_energies(""MMFF94"", expected_results, testfile(""more-mmff94.sdf""))",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:281,Testability,test,testfile,281,"## Doing this test does not show anything new about the OpenBabel API; ## and it dumps more useless text (for the purposes of testing) to stdout; #expected_results = map(float, open(testfile(""more-mmff94results.txt"")).readlines()); #self._test_energies(""MMFF94"", expected_results, testfile(""more-mmff94.sdf""))",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:24,Testability,test,tests,24,"# These basis for these tests comes from ffuff.cpp",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py:159,Testability,assert,assertEquals,159,"# Does not seem to work. Don't know if I'm doing the wrong thing; # def test_mmff94_validates(self):; # pFF = ob.OBForceField.FindForceField(""MMFF94""); # self.assertEquals(pFF.Validate(), True)",MatchSource.CODE_COMMENT,scripts/python/examples/dalke_test.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/dalke_test.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/energy.py:77,Energy Efficiency,energy,energy,77,"######################################################################; #; # energy.py: calculate the energy of a molecule; #; ######################################################################",MatchSource.CODE_COMMENT,scripts/python/examples/energy.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/energy.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/energy.py:102,Energy Efficiency,energy,energy,102,"######################################################################; #; # energy.py: calculate the energy of a molecule; #; ######################################################################",MatchSource.CODE_COMMENT,scripts/python/examples/energy.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/energy.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/energy.py:10,Testability,log,log,10,"# Set the log level to high since we want to print out individual; # interactions.",MatchSource.CODE_COMMENT,scripts/python/examples/energy.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/energy.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/energy.py:148,Integrability,interface,interface,148,"# python specific, python doesn't have std::ostream so the SetLogFile(); # function is replaced by SetLogToStdOut and SetLogToStdErr in the SWIG; # interface file",MatchSource.CODE_COMMENT,scripts/python/examples/energy.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/energy.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/energy.py:48,Energy Efficiency,charge,charges,48,"# Setup the molecule. This assigns atoms types, charges and parameters",MatchSource.CODE_COMMENT,scripts/python/examples/energy.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/energy.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/energy.py:16,Energy Efficiency,energy,energy,16,"# Calculate the energy",MatchSource.CODE_COMMENT,scripts/python/examples/energy.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/energy.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/minSimple.py:10,Testability,log,log,10,"# Set the log level to low since we only want to print out the minimization; # steps and not all individual interactions for each call to Energy()",MatchSource.CODE_COMMENT,scripts/python/examples/minSimple.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/minSimple.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/minSimple.py:148,Integrability,interface,interface,148,"# python specific, python doesn't have std::ostream so the SetLogFile(); # function is replaced by SetLogToStdOut and SetLogToStdErr in the SWIG; # interface file",MatchSource.CODE_COMMENT,scripts/python/examples/minSimple.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/minSimple.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/minSimple.py:48,Energy Efficiency,charge,charges,48,"# Setup the molecule. This assigns atoms types, charges and parameters",MatchSource.CODE_COMMENT,scripts/python/examples/minSimple.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/minSimple.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:12,Testability,test,test,12,"""""""Fail the test unless the expression is true.""""""",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:38,Availability,error,error,38,"""""""Test that invalid formats raise an error""""""",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:7,Testability,assert,assertAlmostEqual,7,"# self.assertAlmostEqual(self.mols[0].exactmass, 58.078, 3); # Only OpenBabel has a working exactmass; # CDK doesn't include implicit Hs when calculating the molwt",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:56,Availability,error,error,56,"""""""Test that reading from a non-existent file raises an error.""""""",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:38,Availability,error,error,38,"""""""Test that invalid formats raise an error""""""",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:46,Availability,error,error,46,"""""""Test that accessing the unitcell raises an error""""""",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:13,Security,access,accessing,13,"""""""Test that accessing the unitcell raises an error""""""",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:21,Security,access,access,21,"""""""Testing unit cell access""""""",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:13,Testability,test,testing,13,"""""""No SMARTS testing done""""""",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:16,Testability,test,testing,16,"""""""No local opt testing done""""""",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:7,Testability,assert,assertAlmostEqual,7,"# self.assertAlmostEqual(self.mols[0].exactmass, 58.078, 3); # Only OpenBabel has a working exactmass; # CDK doesn't include implicit Hs when calculating the molwt",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:1,Testability,test,testcases,1,"#testcases = [TestPybel, TestCDK, TestRDKit]; # testcases = [TestCDK]; # testcases = [TestPybel]; # testcases = [TestRDKit]",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:48,Testability,test,testcases,48,"#testcases = [TestPybel, TestCDK, TestRDKit]; # testcases = [TestCDK]; # testcases = [TestPybel]; # testcases = [TestRDKit]",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:73,Testability,test,testcases,73,"#testcases = [TestPybel, TestCDK, TestRDKit]; # testcases = [TestCDK]; # testcases = [TestPybel]; # testcases = [TestRDKit]",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py:100,Testability,test,testcases,100,"#testcases = [TestPybel, TestCDK, TestRDKit]; # testcases = [TestCDK]; # testcases = [TestPybel]; # testcases = [TestRDKit]",MatchSource.CODE_COMMENT,scripts/python/examples/testpybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/testpybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/wgtRotorSrch.py:10,Testability,log,log,10,"# Set the log level to low since we only want to print out the conformer search; # steps and not all individual interactions for each call to Energy()",MatchSource.CODE_COMMENT,scripts/python/examples/wgtRotorSrch.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/wgtRotorSrch.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/wgtRotorSrch.py:148,Integrability,interface,interface,148,"# python specific, python doesn't have std::ostream so the SetLogFile(); # function is replaced by SetLogToStdOut and SetLogToStdErr in the SWIG; # interface file",MatchSource.CODE_COMMENT,scripts/python/examples/wgtRotorSrch.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/wgtRotorSrch.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/wgtRotorSrch.py:48,Energy Efficiency,charge,charges,48,"# Setup the molecule. This assigns atoms types, charges and parameters",MatchSource.CODE_COMMENT,scripts/python/examples/wgtRotorSrch.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/wgtRotorSrch.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/wgtRotorSrch.py:49,Performance,optimiz,optimize,49,"# Weighted rotor search: generate 25 conformers, optimize each conformer for; # 500 steps.",MatchSource.CODE_COMMENT,scripts/python/examples/wgtRotorSrch.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/examples/wgtRotorSrch.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:63,Modifiability,variab,variables,63,"""""""; pybel - A Cinfony module for accessing Open Babel. Global variables:; ob - the underlying SWIG bindings for Open Babel; informats - a dictionary of supported input formats; outformats - a dictionary of supported output formats; descs - a list of supported descriptors; fps - a list of supported fingerprint types; forcefields - a list of supported forcefields; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:34,Security,access,accessing,34,"""""""; pybel - A Cinfony module for accessing Open Babel. Global variables:; ob - the underlying SWIG bindings for Open Babel; informats - a dictionary of supported input formats; outformats - a dictionary of supported output formats; descs - a list of supported descriptors; fps - a list of supported fingerprint types; forcefields - a list of supported forcefields; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:23,Energy Efficiency,charge,charge,23,"""""""A list of supported charge models""""""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:113,Availability,avail,available,113,"""""""Iterate over the molecules in a file. Required parameters:; format - see the informats variable for a list of available; input formats; filename. Optional parameters:; opt - a dictionary of format-specific options; For format options with no parameters, specify the; value as None. You can access the first molecule in a file using the next() method; of the iterator (or the next() keyword in Python 3):; mol = readfile(""smi"", ""myfile.smi"").next() # Python 2; mol = next(readfile(""smi"", ""myfile.smi"")) # Python 3. You can make a list of the molecules in a file using:; mols = list(readfile(""smi"", ""myfile.smi"")). You can iterate over the molecules in a file as shown in the; following code snippet:; >>> atomtotal = 0; >>> for mol in readfile(""sdf"", ""head.sdf""):; ... atomtotal += len(mol.atoms); ...; >>> print atomtotal; 43; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:90,Modifiability,variab,variable,90,"""""""Iterate over the molecules in a file. Required parameters:; format - see the informats variable for a list of available; input formats; filename. Optional parameters:; opt - a dictionary of format-specific options; For format options with no parameters, specify the; value as None. You can access the first molecule in a file using the next() method; of the iterator (or the next() keyword in Python 3):; mol = readfile(""smi"", ""myfile.smi"").next() # Python 2; mol = next(readfile(""smi"", ""myfile.smi"")) # Python 3. You can make a list of the molecules in a file using:; mols = list(readfile(""smi"", ""myfile.smi"")). You can iterate over the molecules in a file as shown in the; following code snippet:; >>> atomtotal = 0; >>> for mol in readfile(""sdf"", ""head.sdf""):; ... atomtotal += len(mol.atoms); ...; >>> print atomtotal; 43; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:293,Security,access,access,293,"""""""Iterate over the molecules in a file. Required parameters:; format - see the informats variable for a list of available; input formats; filename. Optional parameters:; opt - a dictionary of format-specific options; For format options with no parameters, specify the; value as None. You can access the first molecule in a file using the next() method; of the iterator (or the next() keyword in Python 3):; mol = readfile(""smi"", ""myfile.smi"").next() # Python 2; mol = next(readfile(""smi"", ""myfile.smi"")) # Python 3. You can make a list of the molecules in a file using:; mols = list(readfile(""smi"", ""myfile.smi"")). You can iterate over the molecules in a file as shown in the; following code snippet:; >>> atomtotal = 0; >>> for mol in readfile(""sdf"", ""head.sdf""):; ... atomtotal += len(mol.atoms); ...; >>> print atomtotal; 43; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:109,Availability,avail,available,109,"""""""Read in a molecule from a string. Required parameters:; format - see the informats variable for a list of available; input formats; string. Optional parameters:; opt - a dictionary of format-specific options; For format options with no parameters, specify the; value as None. Example:; >>> input = ""C1=CC=CS1""; >>> mymol = readstring(""smi"", input); >>> len(mymol.atoms); 5; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:86,Modifiability,variab,variable,86,"""""""Read in a molecule from a string. Required parameters:; format - see the informats variable for a list of available; input formats; string. Optional parameters:; opt - a dictionary of format-specific options; For format options with no parameters, specify the; value as None. Example:; >>> input = ""C1=CC=CS1""; >>> mymol = readstring(""smi"", input); >>> len(mymol.atoms); 5; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:328,Availability,avail,available,328,"""""""Represent a file to which *output* is to be sent. Although it's possible to write a single molecule to a file by; calling the write() method of a molecule, if multiple molecules; are to be written to the same file you should use the Outputfile; class. Required parameters:; format - see the outformats variable for a list of available; output formats; filename. Optional parameters:; overwrite -- if the output file already exists, should it; be overwritten? (default is False); opt -- a dictionary of format-specific options; For format options with no parameters, specify the; value as None. Methods:; write(molecule); close(); """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:305,Modifiability,variab,variable,305,"""""""Represent a file to which *output* is to be sent. Although it's possible to write a single molecule to a file by; calling the write() method of a molecule, if multiple molecules; are to be written to the same file you should use the Outputfile; class. Required parameters:; format - see the outformats variable for a list of available; output formats; filename. Optional parameters:; overwrite -- if the output file already exists, should it; be overwritten? (default is False); opt -- a dictionary of format-specific options; For format options with no parameters, specify the; value as None. Methods:; write(molecule); close(); """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:134,Energy Efficiency,charge,charge,134,"""""""Represent a Pybel Molecule. Required parameter:; OBMol -- an Open Babel OBMol or any type of cinfony Molecule. Attributes:; atoms, charge, conformers, data, dim, energy, exactmass, formula,; molwt, spin, sssr, title, unitcell.; (refer to the Open Babel library documentation for more info). Methods:; addh(), calcfp(), calcdesc(), draw(), localopt(), make2D(), make3D(); calccharges(), removeh(), write(). The underlying Open Babel molecule can be accessed using the attribute:; OBMol; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:165,Energy Efficiency,energy,energy,165,"""""""Represent a Pybel Molecule. Required parameter:; OBMol -- an Open Babel OBMol or any type of cinfony Molecule. Attributes:; atoms, charge, conformers, data, dim, energy, exactmass, formula,; molwt, spin, sssr, title, unitcell.; (refer to the Open Babel library documentation for more info). Methods:; addh(), calcfp(), calcdesc(), draw(), localopt(), make2D(), make3D(); calccharges(), removeh(), write(). The underlying Open Babel molecule can be accessed using the attribute:; OBMol; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:451,Security,access,accessed,451,"""""""Represent a Pybel Molecule. Required parameter:; OBMol -- an Open Babel OBMol or any type of cinfony Molecule. Attributes:; atoms, charge, conformers, data, dim, energy, exactmass, formula,; molwt, spin, sssr, title, unitcell.; (refer to the Open Babel library documentation for more info). Methods:; addh(), calcfp(), calcdesc(), draw(), localopt(), make2D(), make3D(); calccharges(), removeh(), write(). The underlying Open Babel molecule can be accessed using the attribute:; OBMol; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:133,Availability,avail,available,133,"""""""Calculate descriptor values. Optional parameter:; descnames -- a list of names of descriptors. If descnames is not specified, all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:209,Availability,avail,available,209,"""""""Calculate descriptor values. Optional parameter:; descnames -- a list of names of descriptors. If descnames is not specified, all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:186,Modifiability,variab,variable,186,"""""""Calculate descriptor values. Optional parameter:; descnames -- a list of names of descriptors. If descnames is not specified, all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:150,Availability,avail,available,150,"""""""Calculate a molecular fingerprint. Optional parameters:; fptype -- the fingerprint type (default is ""FP2""). See the; fps variable for a list of of available fingerprint; types.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:124,Modifiability,variab,variable,124,"""""""Calculate a molecular fingerprint. Optional parameters:; fptype -- the fingerprint type (default is ""FP2""). See the; fps variable for a list of of available fingerprint; types.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:145,Availability,avail,available,145,"""""""Estimates atomic partial charges in the molecule. Optional parameters:; model -- default is ""mmff94"". See the charges variable for a list; of available charge models (in shell, `obabel -L charges`). This method populates the `partialcharge` attribute of each atom; in the molecule in place.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:28,Energy Efficiency,charge,charges,28,"""""""Estimates atomic partial charges in the molecule. Optional parameters:; model -- default is ""mmff94"". See the charges variable for a list; of available charge models (in shell, `obabel -L charges`). This method populates the `partialcharge` attribute of each atom; in the molecule in place.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:113,Energy Efficiency,charge,charges,113,"""""""Estimates atomic partial charges in the molecule. Optional parameters:; model -- default is ""mmff94"". See the charges variable for a list; of available charge models (in shell, `obabel -L charges`). This method populates the `partialcharge` attribute of each atom; in the molecule in place.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:155,Energy Efficiency,charge,charge,155,"""""""Estimates atomic partial charges in the molecule. Optional parameters:; model -- default is ""mmff94"". See the charges variable for a list; of available charge models (in shell, `obabel -L charges`). This method populates the `partialcharge` attribute of each atom; in the molecule in place.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:191,Energy Efficiency,charge,charges,191,"""""""Estimates atomic partial charges in the molecule. Optional parameters:; model -- default is ""mmff94"". See the charges variable for a list; of available charge models (in shell, `obabel -L charges`). This method populates the `partialcharge` attribute of each atom; in the molecule in place.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:121,Modifiability,variab,variable,121,"""""""Estimates atomic partial charges in the molecule. Optional parameters:; model -- default is ""mmff94"". See the charges variable for a list; of available charge models (in shell, `obabel -L charges`). This method populates the `partialcharge` attribute of each atom; in the molecule in place.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:125,Availability,avail,available,125,"""""""Write the molecule to a file or return a string. Optional parameters:; format -- see the informats variable for a list of available; output formats (default is ""smi""); filename -- default is None; overwite -- if the output file already exists, should it; be overwritten? (default is False); opt -- a dictionary of format specific options; For format options with no parameters, specify the; value as None. If a filename is specified, the result is written to a file.; Otherwise, a string is returned containing the result. To write multiple molecules to the same file you should use; the Outputfile class.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:102,Modifiability,variab,variable,102,"""""""Write the molecule to a file or return a string. Optional parameters:; format -- see the informats variable for a list of available; output formats (default is ""smi""); filename -- default is None; overwite -- if the output file already exists, should it; be overwritten? (default is False); opt -- a dictionary of format specific options; For format options with no parameters, specify the; value as None. If a filename is specified, the result is written to a file.; Otherwise, a string is returned containing the result. To write multiple molecules to the same file you should use; the Outputfile class.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:138,Availability,avail,available,138,"""""""Locally optimize the coordinates. Optional parameters:; forcefield -- default is ""mmff94"". See the forcefields variable; for a list of available forcefields.; steps -- default is 500. If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:114,Modifiability,variab,variable,114,"""""""Locally optimize the coordinates. Optional parameters:; forcefield -- default is ""mmff94"". See the forcefields variable; for a list of available forcefields.; steps -- default is 500. If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:11,Performance,optimiz,optimize,11,"""""""Locally optimize the coordinates. Optional parameters:; forcefield -- default is ""mmff94"". See the forcefields variable; for a list of available forcefields.; steps -- default is 500. If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:265,Performance,optimiz,optimization,265,"""""""Locally optimize the coordinates. Optional parameters:; forcefield -- default is ""mmff94"". See the forcefields variable; for a list of available forcefields.; steps -- default is 500. If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:129,Availability,avail,available,129,"""""""Generate 3D coordinates. Optional parameters:; forcefield -- default is ""mmff94"". See the forcefields variable; for a list of available forcefields.; steps -- default is 50. Once coordinates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:105,Modifiability,variab,variable,105,"""""""Generate 3D coordinates. Optional parameters:; forcefield -- default is ""mmff94"". See the forcefields variable; for a list of available forcefields.; steps -- default is 50. Once coordinates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:248,Performance,optimiz,optimization,248,"""""""Generate 3D coordinates. Optional parameters:; forcefield -- default is ""mmff94"". See the forcefields variable; for a list of available forcefields.; steps -- default is 50. Once coordinates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:154,Deployability,update,update,154,"""""""Create a 2D depiction of the molecule. Optional parameters:; show -- display on screen (default is True); filename -- write to file (default is None); update -- update the coordinates of the atoms to those; determined by the structure diagram generator; (default is False); usecoords -- don't calculate 2D coordinates, just use; the current coordinates (default is False). Tkinter and Python Imaging Library are required for image display.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:164,Deployability,update,update,164,"""""""Create a 2D depiction of the molecule. Optional parameters:; show -- display on screen (default is True); filename -- write to file (default is None); update -- update the coordinates of the atoms to those; determined by the structure diagram generator; (default is False); usecoords -- don't calculate 2D coordinates, just use; the current coordinates (default is False). Tkinter and Python Imaging Library are required for image display.; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:18,Safety,avoid,avoid,18,"# Need to copy to avoid removing hydrogens from self",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:382,Security,access,accessed,382,"""""""Represent a Pybel atom. Required parameter:; OBAtom -- an Open Babel OBAtom. Attributes:; atomicmass, atomicnum, cidx, coords, coordidx, degree, exactmass,; formalcharge, heavydegree, heterodegree, hyb, idx,; implicitvalence, isotope, partialcharge, residue, spin, type,; vector. (refer to the Open Babel library documentation for more info). The original Open Babel atom can be accessed using the attribute:; OBAtom; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:219,Security,access,accessed,219,"""""""Represent a Pybel residue. Required parameter:; OBResidue -- an Open Babel OBResidue. Attributes:; atoms, idx, name. (refer to the Open Babel library documentation for more info). The original Open Babel atom can be accessed using the attribute:; OBResidue; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py:116,Security,access,accessor,116,"""""""Store molecule data in a dictionary-type object. Required parameters:; obmol -- an Open Babel OBMol. Methods and accessor methods are like those of a dictionary except; that the data is retrieved on-the-fly from the underlying OBMol. Example:; >>> mol = readfile(""sdf"", 'head.sdf').next() # Python 2; >>> # mol = next(readfile(""sdf"", 'head.sdf')) # Python 3; >>> data = mol.data; >>> print data; {'Comment': 'CORINA 2.61 0041 25.10.2001', 'NSC': '1'}; >>> print len(data), data.keys(), data.has_key(""NSC""); 2 ['Comment', 'NSC'] True; >>> print data['Comment']; CORINA 2.61 0041 25.10.2001; >>> data['Comment'] = 'This is a new comment'; >>> for k,v in data.items():; ... print k, ""-->"", v; Comment --> This is a new comment; NSC --> 1; >>> del data['NSC']; >>> print len(data), data.keys(), data.has_key(""NSC""); 1 ['Comment'] False; """"""",MatchSource.CODE_COMMENT,scripts/python/openbabel/pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/openbabel/pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:114,Testability,test,tests,114,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testbabel.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:283,Testability,test,test,283,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testbabel.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:300,Testability,test,test,300,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testbabel.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:334,Testability,test,test,334,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testbabel.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:339,Testability,test,testbabel,339,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testbabel.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:372,Testability,test,test,372,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testbabel.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:458,Testability,test,tests,458,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testbabel.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:27,Availability,error,error,27,"#should never exit with an error without an error message",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:44,Availability,error,error,44,"#should never exit with an error without an error message",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:50,Integrability,message,message,50,"#should never exit with an error without an error message",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:38,Testability,test,tests,38,"""""""Convenience function for debugging tests. The log file (log.txt) is created in build/test; """"""",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:49,Testability,log,log,49,"""""""Convenience function for debugging tests. The log file (log.txt) is created in build/test; """"""",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:59,Testability,log,log,59,"""""""Convenience function for debugging tests. The log file (log.txt) is created in build/test; """"""",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:88,Testability,test,test,88,"""""""Convenience function for debugging tests. The log file (log.txt) is created in build/test; """"""",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:20,Testability,test,test,20,"""""""A base class for test classes that adds additional; test methods""""""",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:55,Testability,test,test,55,"""""""A base class for test classes that adds additional; test methods""""""",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:15,Testability,test,tests,15,"""""""A series of tests relating to the obabel executable""""""",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:6,Testability,test,test,6,"# Now test writing of %(NNN) notation",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:159,Security,hash,hash,159,"# Chop up the output and the baseline files into single lines; # Skip first two lines: first line contains Culgi version,; # second line contains OpenBabel ID/hash",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:24,Testability,test,test,24,"'''This is a regression test for a segfault, but could put; other mol2 test here'''",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py:71,Testability,test,test,71,"'''This is a regression test for a segfault, but could put; other mol2 test here'''",MatchSource.CODE_COMMENT,test/testbabel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbabel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:421,Modifiability,variab,variables,421,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testbindings.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:74,Testability,test,tests,74,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testbindings.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:255,Testability,test,test,255,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testbindings.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:307,Testability,test,test,307,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testbindings.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:341,Testability,test,test,341,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testbindings.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:346,Testability,test,testbindings,346,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testbindings.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:566,Testability,test,test,566,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testbindings.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:652,Testability,test,tests,652,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testbindings.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:55,Availability,failure,failure,55,"# The following used to raise an OSError (SMARTS parse failure)",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:9,Availability,error,error,9,"# raises error",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:18,Security,access,access,18,"""""""Support public access of FF gradients""""""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:45,Availability,avail,available,45,"# this should throw an AttributeError if not available",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:23,Testability,test,testcases,23,"""""""Ensure that fuzzing testcases do not cause crashes""""""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:11,Testability,test,test,11,"# Positive test cases:; # These are the BIOVIA Draw answers for the first 50 elements for; # a mass diff of 1",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:7,Testability,test,test,7,"# Also test D and T - BIOVIA Draw ignores the mass diff",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:31,Availability,error,error,31,"# Negative test cases:; # Test error message for out-of-range values",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:37,Integrability,message,message,37,"# Negative test cases:; # Test error message for out-of-range values",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:11,Testability,test,test,11,"# Negative test cases:; # Test error message for out-of-range values",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:11,Testability,test,test,11,"""""""Run the test cases described in the source code""""""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:31,Energy Efficiency,charge,charges,31,"""""""Be more strict when parsing charges""""""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:8,Testability,test,test,8,"# First test",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:9,Testability,test,test,9,"# Second test",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:2,Testability,test,test,2,"# test lowercase version; # Has an exact mass been set?",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:31,Availability,avail,available,31,"# Check whether the element is available as a constant",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:50,Integrability,rout,routines,50,"""""""Check for proper handling of fragments in mcdl routines, see issue #1889""""""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:8,Testability,test,test,8,"# basic test - copy out each component",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:2,Testability,test,test,2,"# test molfile->smiles",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:89,Testability,test,test,89,"""""""Should trigger warning about invalid valency field; Unfortunately - there's no way to test this from Python as it requires; streams :-/""""""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py:24,Modifiability,refactor,refactoring,24,"""""""Tests to ensure that refactoring the atom class handling retains; functionality""""""",MatchSource.CODE_COMMENT,test/testbindings.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testbindings.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py:107,Testability,test,tests,107,"""""""Test ChemDoodle JSON format using the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testcdjsonformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testcdjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py:280,Testability,test,test,280,"""""""Test ChemDoodle JSON format using the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testcdjsonformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testcdjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py:297,Testability,test,test,297,"""""""Test ChemDoodle JSON format using the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testcdjsonformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testcdjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py:331,Testability,test,test,331,"""""""Test ChemDoodle JSON format using the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testcdjsonformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testcdjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py:336,Testability,test,testcdjsonformat,336,"""""""Test ChemDoodle JSON format using the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testcdjsonformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testcdjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py:376,Testability,test,test,376,"""""""Test ChemDoodle JSON format using the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testcdjsonformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testcdjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py:462,Testability,test,tests,462,"""""""Test ChemDoodle JSON format using the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testcdjsonformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testcdjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py:98,Availability,error,error,98,"# def test_read_invalid(self):; # """"""Test reading a file that is not valid JSON.""""""; # # Expected error log: JSON parse error at offset 25: Invalid escape character in string.; # mols = list(pybel.readfile(""cdjson"", os.path.join(filedir, 'invalid.json'))); # self.assertEqual(mols, []); # def test_read_not_object(self):; # """"""Test reading a JSON file that doesn't have a root object.""""""; # # Expected error log: JSON file should be a single object; # mols = list(pybel.readfile(""cdjson"", os.path.join(filedir, 'notobject.json'))); # self.assertEqual(mols, [])",MatchSource.CODE_COMMENT,test/testcdjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py:120,Availability,error,error,120,"# def test_read_invalid(self):; # """"""Test reading a file that is not valid JSON.""""""; # # Expected error log: JSON parse error at offset 25: Invalid escape character in string.; # mols = list(pybel.readfile(""cdjson"", os.path.join(filedir, 'invalid.json'))); # self.assertEqual(mols, []); # def test_read_not_object(self):; # """"""Test reading a JSON file that doesn't have a root object.""""""; # # Expected error log: JSON file should be a single object; # mols = list(pybel.readfile(""cdjson"", os.path.join(filedir, 'notobject.json'))); # self.assertEqual(mols, [])",MatchSource.CODE_COMMENT,test/testcdjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py:402,Availability,error,error,402,"# def test_read_invalid(self):; # """"""Test reading a file that is not valid JSON.""""""; # # Expected error log: JSON parse error at offset 25: Invalid escape character in string.; # mols = list(pybel.readfile(""cdjson"", os.path.join(filedir, 'invalid.json'))); # self.assertEqual(mols, []); # def test_read_not_object(self):; # """"""Test reading a JSON file that doesn't have a root object.""""""; # # Expected error log: JSON file should be a single object; # mols = list(pybel.readfile(""cdjson"", os.path.join(filedir, 'notobject.json'))); # self.assertEqual(mols, [])",MatchSource.CODE_COMMENT,test/testcdjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py:104,Testability,log,log,104,"# def test_read_invalid(self):; # """"""Test reading a file that is not valid JSON.""""""; # # Expected error log: JSON parse error at offset 25: Invalid escape character in string.; # mols = list(pybel.readfile(""cdjson"", os.path.join(filedir, 'invalid.json'))); # self.assertEqual(mols, []); # def test_read_not_object(self):; # """"""Test reading a JSON file that doesn't have a root object.""""""; # # Expected error log: JSON file should be a single object; # mols = list(pybel.readfile(""cdjson"", os.path.join(filedir, 'notobject.json'))); # self.assertEqual(mols, [])",MatchSource.CODE_COMMENT,test/testcdjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py:264,Testability,assert,assertEqual,264,"# def test_read_invalid(self):; # """"""Test reading a file that is not valid JSON.""""""; # # Expected error log: JSON parse error at offset 25: Invalid escape character in string.; # mols = list(pybel.readfile(""cdjson"", os.path.join(filedir, 'invalid.json'))); # self.assertEqual(mols, []); # def test_read_not_object(self):; # """"""Test reading a JSON file that doesn't have a root object.""""""; # # Expected error log: JSON file should be a single object; # mols = list(pybel.readfile(""cdjson"", os.path.join(filedir, 'notobject.json'))); # self.assertEqual(mols, [])",MatchSource.CODE_COMMENT,test/testcdjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py:408,Testability,log,log,408,"# def test_read_invalid(self):; # """"""Test reading a file that is not valid JSON.""""""; # # Expected error log: JSON parse error at offset 25: Invalid escape character in string.; # mols = list(pybel.readfile(""cdjson"", os.path.join(filedir, 'invalid.json'))); # self.assertEqual(mols, []); # def test_read_not_object(self):; # """"""Test reading a JSON file that doesn't have a root object.""""""; # # Expected error log: JSON file should be a single object; # mols = list(pybel.readfile(""cdjson"", os.path.join(filedir, 'notobject.json'))); # self.assertEqual(mols, [])",MatchSource.CODE_COMMENT,test/testcdjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py:539,Testability,assert,assertEqual,539,"# def test_read_invalid(self):; # """"""Test reading a file that is not valid JSON.""""""; # # Expected error log: JSON parse error at offset 25: Invalid escape character in string.; # mols = list(pybel.readfile(""cdjson"", os.path.join(filedir, 'invalid.json'))); # self.assertEqual(mols, []); # def test_read_not_object(self):; # """"""Test reading a JSON file that doesn't have a root object.""""""; # # Expected error log: JSON file should be a single object; # mols = list(pybel.readfile(""cdjson"", os.path.join(filedir, 'notobject.json'))); # self.assertEqual(mols, [])",MatchSource.CODE_COMMENT,test/testcdjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testcdjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py:114,Testability,test,tests,114,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testdistgeom.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testdistgeom.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py:283,Testability,test,test,283,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testdistgeom.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testdistgeom.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py:300,Testability,test,test,300,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testdistgeom.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testdistgeom.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py:337,Testability,test,test,337,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testdistgeom.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testdistgeom.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py:342,Testability,test,testdistgeom,342,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testdistgeom.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testdistgeom.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py:378,Testability,test,test,378,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testdistgeom.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testdistgeom.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py:464,Testability,test,tests,464,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testdistgeom.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testdistgeom.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py:15,Testability,test,tests,15,"""""""A series of tests relating to 3D stereo""""""",MatchSource.CODE_COMMENT,test/testdistgeom.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py:18,Testability,test,tests,18,"""""""; Some initial tests based on previous geometry stereo bugs; (i.e., OBBuilder can't handle correctly); """"""",MatchSource.CODE_COMMENT,test/testdistgeom.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py:19,Testability,test,test,19,"# disabled to make test run faster:; #'CCCNC1=C(C)C(=O)C2=C(C1=O)[C@@H](COC(=O)N)[C@]1(N2C[C@H]2[C@H]1N2)OC',; #'CN([C@H]1C(=O)C(=C([C@]2([C@@H]1C[C@@H]1Cc3c(C(=C1C2=O)O)c(O)ccc3N(C)C)O)O)C(=O)N)C',; #'CN([C@@H]1C(=O)C(=C([C@@]2([C@H]1C[C@@H]1C(=C(O)c3c([C@@]1(C)O)c(Cl)ccc3O)C2=O)O)O)C(=O)N)C',; #'C[C@@H](CC(=O)OC[C@@]12CC[C@H]3[C@@]([C@@H]2C[C@@H](O1)C1=CC(=O)O[C@H]1O)(C)CC[C@@H]1[C@]3(C)CCCC1(C)C)O',; #'CC(=O)OC[C@@]12CC[C@H]3[C@@]([C@@H]2C[C@H](O1)C1=CC(=O)O[C@H]1O)(C)CC[C@@H]1[C@]3(C)CCCC1(C)C'",MatchSource.CODE_COMMENT,test/testdistgeom.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testdistgeom.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py:11,Testability,test,test,11,"""""""Example test that uses the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testexample.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testexample.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py:96,Testability,test,tests,96,"""""""Example test that uses the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testexample.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testexample.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py:269,Testability,test,test,269,"""""""Example test that uses the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testexample.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testexample.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py:286,Testability,test,test,286,"""""""Example test that uses the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testexample.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testexample.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py:320,Testability,test,test,320,"""""""Example test that uses the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testexample.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testexample.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py:325,Testability,test,testexample,325,"""""""Example test that uses the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testexample.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testexample.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py:360,Testability,test,test,360,"""""""Example test that uses the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testexample.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testexample.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py:446,Testability,test,tests,446,"""""""Example test that uses the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testexample.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testexample.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testexample.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py:114,Testability,test,tests,114,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testfastsearch.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testfastsearch.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py:283,Testability,test,test,283,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testfastsearch.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testfastsearch.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py:300,Testability,test,test,300,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testfastsearch.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testfastsearch.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py:337,Testability,test,test,337,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testfastsearch.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testfastsearch.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py:342,Testability,test,testfastsearch,342,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testfastsearch.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testfastsearch.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py:380,Testability,test,test,380,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testfastsearch.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testfastsearch.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py:466,Testability,test,tests,466,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testfastsearch.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testfastsearch.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py:15,Testability,test,tests,15,"""""""A series of tests relating to fastsearch functionality""""""",MatchSource.CODE_COMMENT,test/testfastsearch.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testfastsearch.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py:114,Testability,test,tests,114,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testkekule.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py:283,Testability,test,test,283,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testkekule.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py:300,Testability,test,test,300,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testkekule.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py:337,Testability,test,test,337,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testkekule.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py:342,Testability,test,testsym,342,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testkekule.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py:373,Testability,test,test,373,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testkekule.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py:459,Testability,test,tests,459,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testkekule.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py:15,Testability,test,tests,15,"""""""A series of tests relating to aromaticity/kekule""""""",MatchSource.CODE_COMMENT,test/testkekule.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py:15,Testability,test,tests,15,"""""""A series of tests relating to aromaticity/kekule""""""",MatchSource.CODE_COMMENT,test/testkekule.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py:15,Testability,test,tests,15,"""""""A series of tests which caused crashes""""""",MatchSource.CODE_COMMENT,test/testkekule.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testkekule.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:79,Testability,test,tests,79,"""""""Test WriteFile() and WriteString() for each of the supported formats. These tests started as a way to verify that the OBConversion Index is; correctly reset to 1 for each format. """"""",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:50,Testability,test,tests,50,"# Set the following to enable a workaround so the tests work on older; # versions of Open Babel.",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:14,Testability,test,tests,14,"# Most of the tests use an OBMol made from this phenol structure",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:14,Testability,test,tests,14,"# Some of the tests use a reaction.",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:14,Testability,test,tests,14,"# Some of the tests pass in a SMILES string",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:36,Testability,test,tests,36,"# Always make a new molecule so the tests don't; # interfere with each other",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:7,Testability,test,test,7,"# This test suite was developed on a Mac.; # This code copies the text to the paste buffer,; # which I can then use as the expected text.",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:87,Performance,race condition,race condition,87,"# Can't write to open file on Windows so we have to close it (but this could lead to a race condition if someone else uses the same temporary file name)",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:194,Testability,assert,assertWriters,194,"## # ascii -- ASCII format [Write-only]; ## # XXX Doesn't look good; ## class TestASCII(unittest.TestCase, WriteMixin):; ## fmt = ""ascii""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # bgf -- MSI BGF format",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:2,Performance,cache,cache,2,"# cache -- CAChe MolStruct format [Write-only]",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:199,Testability,assert,assertWriters,199,"## # cdxml -- ChemDraw CDXML format; ## XXX fails on an unpatched system; ## class TestCDXML(unittest.TestCase, WriteMixin):; ## fmt = ""cdxml""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## <fragment>; ## <n id=""1"" p=""0.000000 0.000000""/>; ## <n id=""2"" p=""0.000000 0.000000""/>; ## <n id=""3"" p=""0.000000 0.000000""/>; ## <n id=""4"" p=""0.000000 0.000000""/>; ## <n id=""5"" p=""0.000000 0.000000""/>; ## <n id=""6"" p=""0.000000 0.000000""/>; ## <n id=""7"" p=""0.000000 0.000000"" Element=""8""/>; ## <b B=""1"" E=""2""/>; ## <b B=""2"" E=""3"" Order=""2""/>; ## <b B=""3"" E=""4""/>; ## <b B=""4"" E=""5"" Order=""2""/>; ## <b B=""5"" E=""6""/>; ## <b B=""1"" E=""6"" Order=""2""/>; ## <b B=""6"" E=""7""/>; ## </fragment>; ## """"""); # cht -- Chemtool format [Write-only]",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:182,Testability,assert,assertWriters,182,"## # ck -- ChemKin format; ## XXX I don't know why this fails; ## class TestCK(unittest.TestCase, WriteMixin):; ## fmt = ""ck""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # cml -- Chemical Markup Language",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:84,Integrability,wrap,wrapped,84,"# Write two phenols.; # When there are 2 or more molecules then each molecule; # is wrapped in a <cml> element.",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:213,Testability,assert,assertWriters,213,"## # cmlr -- CML Reaction format; ## XXX I don't know why the result is the empty string; ## class TestCMLR(unittest.TestCase, WriteMixin):; ## fmt = ""cmlr""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """""", mol=_alchemy_mol); # com -- Gaussian 98/03 Input [Write-only]",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:220,Testability,assert,assertWriters,220,"## # confabreport -- Confab report format [Write-only]; ## XXX no conformations; ## class TestCONFABREPORT(unittest.TestCase, WriteMixin):; ## fmt = ""confabreport""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # CONFIG -- DL-POLY CONFIG",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:200,Testability,assert,assertWriters,200,"## # copy -- Copy raw text [Write-only]; ## XXX ""Not a valid output format""; ## class TestCOPY(unittest.TestCase, WriteMixin):; ## fmt = ""copy""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # crk2d -- Chemical Resource Kit diagram(2D)",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:191,Testability,assert,assertWriters,191,"## # cub -- Gaussian cube format; ## XXX ""The molecule has no grid.""; ## class TestCUB(unittest.TestCase, WriteMixin):; ## fmt = ""cub""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); ## # cube -- Gaussian cube format; ## XXX ""The molecule has no grid.""; ## class TestCUBE(unittest.TestCase, WriteMixin):; ## fmt = ""cube""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # dalmol -- DALTON input format",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:424,Testability,assert,assertWriters,424,"## # cub -- Gaussian cube format; ## XXX ""The molecule has no grid.""; ## class TestCUB(unittest.TestCase, WriteMixin):; ## fmt = ""cub""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); ## # cube -- Gaussian cube format; ## XXX ""The molecule has no grid.""; ## class TestCUBE(unittest.TestCase, WriteMixin):; ## fmt = ""cube""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # dalmol -- DALTON input format",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:68,Energy Efficiency,charge,charge,68,"""""""\; BASIS; 6-31G*; phenol; Generated by Open Babel. Check overall charge below.; AtomTypes=2 Charge=0 NoSymmetry Angstrom; Charge=6.0 Atoms=6; C 1.5846000000 -0.0249000000 0.0000000000 ; C 1.5703000000 0.9755000000 0.0000000000 ; C 2.4295000000 1.4882000000 0.0000000000 ; C 3.3031000000 1.0004000000 0.0000000000 ; C 3.3175000000 -0.0000000000 0.0000000000 ; C 0.0000000000 0.0000000000 0.0000000000 ; Charge=8.0 Atoms=1; O -1.0005000000 0.0051000000 0.0000000000 ; """"""",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:195,Testability,assert,assertWriters,195,"## # dx -- OpenDX cube format for APBS; ## XXX ""The molecule has no grid.""; ## class TestDX(unittest.TestCase, WriteMixin):; ## fmt = ""dx""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # ent -- Protein Data Bank format",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:167,Testability,assert,assertWriters,167,"## # fa -- FASTA format; ## XXX need a protein; ## class TestFA(unittest.TestCase, WriteMixin):; ## fmt = ""fa""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); ## # fasta -- FASTA format; ## XXX need a protein; ## class TestFASTA(unittest.TestCase, WriteMixin):; ## fmt = ""fasta""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # feat -- Feature format",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:382,Testability,assert,assertWriters,382,"## # fa -- FASTA format; ## XXX need a protein; ## class TestFA(unittest.TestCase, WriteMixin):; ## fmt = ""fa""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); ## # fasta -- FASTA format; ## XXX need a protein; ## class TestFASTA(unittest.TestCase, WriteMixin):; ## fmt = ""fasta""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # feat -- Feature format",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:184,Testability,assert,assertWriters,184,"## # fs -- Fastsearch format; ## XXX ""Not a valid output forma""; ## class TestFS(unittest.TestCase, WriteMixin):; ## fmt = ""fs""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); ## # fsa -- FASTA format; ## XXX need a protein structure; ## class TestFSA(unittest.TestCase, WriteMixin):; ## fmt = ""fsa""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # gamin -- GAMESS Input",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:403,Testability,assert,assertWriters,403,"## # fs -- Fastsearch format; ## XXX ""Not a valid output forma""; ## class TestFS(unittest.TestCase, WriteMixin):; ## fmt = ""fs""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); ## # fsa -- FASTA format; ## XXX need a protein structure; ## class TestFSA(unittest.TestCase, WriteMixin):; ## fmt = ""fsa""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # gamin -- GAMESS Input",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:77,Energy Efficiency,charge,charge,77,"""""""\; title; phenol. #; # NB: Class I directives (e.g. memory, multiplicity, charge etc) go here; #; # For more information see: http://www.cfs.dl.ac.uk/docs/index.shtml; #. geometry angstrom; 1.58460000 -0.02490000 0.00000000 6 C; 1.57030000 0.97550000 0.00000000 6 C; 2.42950000 1.48820000 0.00000000 6 C; 3.30310000 1.00040000 0.00000000 6 C; 3.31750000 -0.00000000 0.00000000 6 C; 0.00000000 0.00000000 0.00000000 6 C; -1.00050000 0.00510000 0.00000000 8 O; end. basis 6-31G. #; # NB: Class II directives go here; #; # To perform a dft calculation with b3lyp and medium quadrature uncomment the below; # dft b3lyp; # dft quadrature medium; #. runtype scf. enter; """"""",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:526,Performance,perform,perform,526,"""""""\; title; phenol. #; # NB: Class I directives (e.g. memory, multiplicity, charge etc) go here; #; # For more information see: http://www.cfs.dl.ac.uk/docs/index.shtml; #. geometry angstrom; 1.58460000 -0.02490000 0.00000000 6 C; 1.57030000 0.97550000 0.00000000 6 C; 2.42950000 1.48820000 0.00000000 6 C; 3.30310000 1.00040000 0.00000000 6 C; 3.31750000 -0.00000000 0.00000000 6 C; 0.00000000 0.00000000 0.00000000 6 C; -1.00050000 0.00510000 0.00000000 8 O; end. basis 6-31G. #; # NB: Class II directives go here; #; # To perform a dft calculation with b3lyp and medium quadrature uncomment the below; # dft b3lyp; # dft quadrature medium; #. runtype scf. enter; """"""",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:196,Testability,assert,assertWriters,196,"## # gukout -- GAMESS-UK Output; ## XXX ""Not a valid output format""; ## class TestGUKOUT(unittest.TestCase, WriteMixin):; ## fmt = ""gukout""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # gzmat -- Gaussian Z-Matrix Input",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:225,Testability,assert,assertWriters,225,"## # lpmd -- LPMD format; ## XXX ""The original file doesn't have the information about the unitcell""; ## class TestLPMD(unittest.TestCase, WriteMixin):; ## fmt = ""lpmd""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # mcdl -- MCDL format",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:17,Usability,simpl,simplified,17,"# mpqcin -- MPQC simplified input format [Write-only]",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:1065,Energy Efficiency,charge,charge,1065,"""""""\; {; ""PC_Compounds"": [; {; ""atoms"": {; ""aids"": [; 1,; 2,; 3,; 4,; 5,; 6,; 7,; 8,; 9,; 10,; 11,; 12,; 13; ],; ""element"": [; 6,; 6,; 6,; 6,; 6,; 6,; 8,; 1,; 1,; 1,; 1,; 1,; 1; ]; },; ""bonds"": {; ""aid1"": [; 1,; 1,; 2,; 3,; 4,; 5,; 6,; 1,; 2,; 3,; 4,; 5,; 7; ],; ""aid2"": [; 6,; 2,; 3,; 4,; 5,; 6,; 7,; 8,; 9,; 10,; 11,; 12,; 13; ],; ""order"": [; 2,; 1,; 2,; 1,; 2,; 1,; 1,; 1,; 1,; 1,; 1,; 1,; 1; ]; },; ""coords"": [; {; ""type"": [; 1; ],; ""aids"": [; 1,; 2,; 3,; 4,; 5,; 6,; 7,; 8,; 9,; 10,; 11,; 12,; 13; ],; ""conformers"": [; {; ""x"": [; 1.5846,; 1.5703,; 2.4295,; 3.3031,; 3.3175,; 0.0,; -1.0005,; 2.313816216007316,; 0.669250157347277,; 2.4146659588503769,; 4.189331679349326,; 4.052466878708012,; -1.4648575597102012; ],; ""y"": [; 1.5846,; 1.5703,; 2.4295,; 3.3031,; 3.3175,; 0.0,; -1.0005,; 2.313816216007316,; 0.669250157347277,; 2.4146659588503769,; 4.189331679349326,; 4.052466878708012,; -1.4648575597102012; ],; ""style"": {; ""annotation"": [; 8,; 8,; 8,; 8,; 8,; 8; ],; ""aid1"": [; 1,; 1,; 2,; 3,; 4,; 5; ],; ""aid2"": [; 6,; 2,; 3,; 4,; 5,; 6; ]; }; }; ]; }; ],; ""charge"": 0; }; ]; }""""""",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:195,Testability,assert,assertWriters,195,"## # pointcloud -- Point cloud on VDW surface [Write-only]; ## class TestPOINTCLOUD(unittest.TestCase, WriteMixin):; ## fmt = ""pointcloud""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## 1.60287	0.366606	-1.6542; ## 1.84042	0.0911282	1.67663; ## 2.16155	0.0920641	-1.59482; ## 2.24669	-1.17133	-1.06646; ## 1.48693	-1.10539	-1.30882; ## 1.06863	-1.56851	-0.490946; ## 0.950812	-0.774568	1.38792; ## 1.53266	-0.423934	1.65169; ## 1.02418	0.0825103	1.60137; ## 1.35345	-0.521534	-1.60932; ## 2.03809	-1.53972	-0.624231; ## 1.81315	-1.28599	1.11688; ## 1.61398	-1.72433	-0.0329242; ## 2.00427	-0.832704	1.43573; ## 1.95914	-0.558616	-1.56999; ## 0.856928	-0.923254	-1.24638; ## 1.17686	-1.28285	1.06833; ## 1.20053	1.21326	1.64218; ## 2.21578	0.539197	-1.51096; ## 0.503037	2.05994	-0.758254; ## 0.915434	2.03276	-1.15903; ## 1.49448	1.98584	-1.36509; ## 0.677649	1.86202	1.14335; ## 1.70666	1.01844	-1.69398; ## 0.606207	0.940736	1.39976; ## 0.800302	2.48089	-0.175754; ## 2.30163	0.492979	1.45682; ## 0.359758	2.12949	0.304793; ## 0.172569	1.70773	0.6326; ## 1.08273	2.32878	0.906044; ## 1.20281	1.7605	1.46244; ## 1.09029	2.41042	-0.774986; ## 1.06925	0.58422	1.57666; ## 0.819971	1.51412	-1.4272; ## 2.24158	1.24937	1.67262; ## 2.268	0.913847	-1.59187; ## 3.21823	2.70485	-0.88751; ## 1.69832	2.84941	-0.708855; ## 3.37734	2.88568	0.196553; ## 1.81476	2.94375	0.627274; ## 2.45416	3.04162	-0.690131; ## 1.39655	2.82919	-0.15739; ## 2.78789	2.69877	1.13845; ## 2.58101	2.10658	-1.57628; ## 2.62307	1.99508	1.61109; ## 1.91432	2.54924	1.22424; ## 2.63768	3.10226	0.491385; ## 3.37994	2.32048	1.13753; ## 1.97981	2.37337	-1.37994; ## 2.81402	1.57517	-1.65366; ## 3.09355	2.34502	-1.30954; ## 2.51748	2.67703	-1.212; ## 4.50657	1.72936	0.954082; ## 4.10815	1.38645	-1.44667; ## 4.16586	2.45354	0.184494; ## 2.76711	0.762946	-1.59572; ## 3.58896	2.09447	-1.26937; ## 3.63994	2.15084	1.20542; ## 3.61046	1.63061	1.54867; ## 4.21658	0.640438	1.3878; ## 2.76058	0.831",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:163,Testability,assert,assertWriters,163,"## class TestPOV(unittest.TestCase, WriteMixin):; ## XXX Does not work on unpatched system; ## fmt = ""pov""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## //Povray v3 code generated by Open Babel; ## //Author: Steffen Reith <streit@streit.cc>; ## //Update (2010): Noel O'Boyle and Steven Wathen; ## //Date: Tue Jan 15 15:28:49 CET 2019; ## //Set some global parameters for display options; ## #declare BAS = true;; ## #declare TRANS = false;; ## #include ""colors.inc""; ## // create a regular point light source; ## light_source {; ## <3.60064,3.49204,-8>; ## color rgb <1,1,1> // light's color; ## }; ## // set a color of the background (sky); ## background { color rgb <0.95 0.95 0.95> }; ## // perspective (default) camera; ## camera {; ## location <1.60064,0.492043,-10>; ## look_at <1.60064,0.492043,0>; ## right x*image_width/image_height; ## }; ## //Include header for povray; ## #include ""babel_povray3.inc""; ## //Use PovRay3.6; ## #version 3.6;; ## //Print name of molecule while rendering; ## #render ""\\b\\b phenol\\n\\n""; ## //Coodinates of atoms 1 - 7; ## #declare mol_0_pos_1 = <1.5846,-0.0249,0>;; ## #declare mol_0_pos_2 = <1.5703,0.9755,0>;; ## #declare mol_0_pos_3 = <2.4295,1.4882,0>;; ## #declare mol_0_pos_4 = <3.3031,1.0004,0>;; ## #declare mol_0_pos_5 = <3.3175,-0,0>;; ## #declare mol_0_pos_6 = <0,0,0>;; ## #declare mol_0_pos_7 = <-1.0005,0.0051,0>;; ## //Povray-description of atoms 1 - 7; ## #declare mol_0_atom1 = object {; ## 	 Atom_C; ## 	 translate mol_0_pos_1; ## 	 }; ## #declare mol_0_atom2 = object {; ## 	 Atom_C; ## 	 translate mol_0_pos_2; ## 	 }; ## #declare mol_0_atom3 = object {; ## 	 Atom_C; ## 	 translate mol_0_pos_3; ## 	 }; ## #declare mol_0_atom4 = object {; ## 	 Atom_C; ## 	 translate mol_0_pos_4; ## 	 }; ## #declare mol_0_atom5 = object {; ## 	 Atom_C; ## 	 translate mol_0_pos_5; ## 	 }; ## #declare mol_0_atom6 = object {; ## 	 Atom_C; ## 	 translate mol_0_pos_6; ## 	 }; ## #declare mol_0_atom7 = object {;",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:177,Testability,assert,assertWriters,177,"## # rsmi -- Reaction SMILES format; ## XXX I don't know why this fails; ## class TestRSMI(unittest.TestCase, WriteMixin):; ## fmt = ""rsmi""; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """""", mol=""[Pb]>>[Au]""); # rxn -- MDL RXN format",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:47,Testability,assert,assertWriters,47,"## def test_explicit_hydrogens(self):; ## self.assertWriters(""smi"", ""C1C=CC=CC=1O\n"", options=[""h""])",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:91,Testability,test,test,91,"## # stl -- STL 3D-printing format [Write-only]; ## XXX the output is far too extensive to test here; ## class TestSTL(unittest.TestCase, WriteMixin):; ## fmt = ""stl""; ## maxDiff = None; ## def test_default(self):; ## self.assertBinaryWriteFile(self.fmt, """"""\; ## """"""); # svg -- SVG 2D depiction [Write-only]",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:223,Testability,assert,assertBinaryWriteFile,223,"## # stl -- STL 3D-printing format [Write-only]; ## XXX the output is far too extensive to test here; ## class TestSTL(unittest.TestCase, WriteMixin):; ## fmt = ""stl""; ## maxDiff = None; ## def test_default(self):; ## self.assertBinaryWriteFile(self.fmt, """"""\; ## """"""); # svg -- SVG 2D depiction [Write-only]",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:173,Testability,assert,assertWriters,173,"## # tdd -- Thermo format; ## XXX need thermo data; ## class TestTDD(unittest.TestCase, WriteMixin):; ## fmt = ""tdd""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); ## # text -- Read and write raw text; ## XXX Not valid output format?; ## class TestTEXT(unittest.TestCase, WriteMixin):; ## fmt = ""text""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); ## # therm -- Thermo format; ## XXX need thermo data; ## class TestTHERM(unittest.TestCase, WriteMixin):; ## fmt = ""therm""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # tmol -- TurboMole Coordinate format",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:406,Testability,assert,assertWriters,406,"## # tdd -- Thermo format; ## XXX need thermo data; ## class TestTDD(unittest.TestCase, WriteMixin):; ## fmt = ""tdd""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); ## # text -- Read and write raw text; ## XXX Not valid output format?; ## class TestTEXT(unittest.TestCase, WriteMixin):; ## fmt = ""text""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); ## # therm -- Thermo format; ## XXX need thermo data; ## class TestTHERM(unittest.TestCase, WriteMixin):; ## fmt = ""therm""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # tmol -- TurboMole Coordinate format",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py:624,Testability,assert,assertWriters,624,"## # tdd -- Thermo format; ## XXX need thermo data; ## class TestTDD(unittest.TestCase, WriteMixin):; ## fmt = ""tdd""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); ## # text -- Read and write raw text; ## XXX Not valid output format?; ## class TestTEXT(unittest.TestCase, WriteMixin):; ## fmt = ""text""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); ## # therm -- Thermo format; ## XXX need thermo data; ## class TestTHERM(unittest.TestCase, WriteMixin):; ## fmt = ""therm""; ## maxDiff = None; ## def test_default(self):; ## self.assertWriters(self.fmt, """"""\; ## """"""); # tmol -- TurboMole Coordinate format",MatchSource.CODE_COMMENT,test/testobconv_writers.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testobconv_writers.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:104,Testability,test,tests,104,"""""""Test PubChem JSON format using the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testpcjsonformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:277,Testability,test,test,277,"""""""Test PubChem JSON format using the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testpcjsonformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:294,Testability,test,test,294,"""""""Test PubChem JSON format using the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testpcjsonformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:328,Testability,test,test,328,"""""""Test PubChem JSON format using the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testpcjsonformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:333,Testability,test,testpcjsonformat,333,"""""""Test PubChem JSON format using the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testpcjsonformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:373,Testability,test,test,373,"""""""Test PubChem JSON format using the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testpcjsonformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:459,Testability,test,tests,459,"""""""Test PubChem JSON format using the OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testpcjsonformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:98,Availability,error,error,98,"# def test_read_invalid(self):; # """"""Test reading a file that is not valid JSON.""""""; # # Expected error log: JSON parse error at offset 37: Invalid escape character in string.; # mols = list(pybel.readfile(""pcjson"", os.path.join(filedir, 'invalid.json'))); # self.assertEqual(mols, []); #; # def test_read_not_object(self):; # """"""Test reading a JSON file that doesn't have a root object.""""""; # # Expected error log: JSON file should be a single object; # mols = list(pybel.readfile(""pcjson"", os.path.join(filedir, 'notobject.json'))); # self.assertEqual(mols, [])",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:120,Availability,error,error,120,"# def test_read_invalid(self):; # """"""Test reading a file that is not valid JSON.""""""; # # Expected error log: JSON parse error at offset 37: Invalid escape character in string.; # mols = list(pybel.readfile(""pcjson"", os.path.join(filedir, 'invalid.json'))); # self.assertEqual(mols, []); #; # def test_read_not_object(self):; # """"""Test reading a JSON file that doesn't have a root object.""""""; # # Expected error log: JSON file should be a single object; # mols = list(pybel.readfile(""pcjson"", os.path.join(filedir, 'notobject.json'))); # self.assertEqual(mols, [])",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:405,Availability,error,error,405,"# def test_read_invalid(self):; # """"""Test reading a file that is not valid JSON.""""""; # # Expected error log: JSON parse error at offset 37: Invalid escape character in string.; # mols = list(pybel.readfile(""pcjson"", os.path.join(filedir, 'invalid.json'))); # self.assertEqual(mols, []); #; # def test_read_not_object(self):; # """"""Test reading a JSON file that doesn't have a root object.""""""; # # Expected error log: JSON file should be a single object; # mols = list(pybel.readfile(""pcjson"", os.path.join(filedir, 'notobject.json'))); # self.assertEqual(mols, [])",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:104,Testability,log,log,104,"# def test_read_invalid(self):; # """"""Test reading a file that is not valid JSON.""""""; # # Expected error log: JSON parse error at offset 37: Invalid escape character in string.; # mols = list(pybel.readfile(""pcjson"", os.path.join(filedir, 'invalid.json'))); # self.assertEqual(mols, []); #; # def test_read_not_object(self):; # """"""Test reading a JSON file that doesn't have a root object.""""""; # # Expected error log: JSON file should be a single object; # mols = list(pybel.readfile(""pcjson"", os.path.join(filedir, 'notobject.json'))); # self.assertEqual(mols, [])",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:264,Testability,assert,assertEqual,264,"# def test_read_invalid(self):; # """"""Test reading a file that is not valid JSON.""""""; # # Expected error log: JSON parse error at offset 37: Invalid escape character in string.; # mols = list(pybel.readfile(""pcjson"", os.path.join(filedir, 'invalid.json'))); # self.assertEqual(mols, []); #; # def test_read_not_object(self):; # """"""Test reading a JSON file that doesn't have a root object.""""""; # # Expected error log: JSON file should be a single object; # mols = list(pybel.readfile(""pcjson"", os.path.join(filedir, 'notobject.json'))); # self.assertEqual(mols, [])",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:411,Testability,log,log,411,"# def test_read_invalid(self):; # """"""Test reading a file that is not valid JSON.""""""; # # Expected error log: JSON parse error at offset 37: Invalid escape character in string.; # mols = list(pybel.readfile(""pcjson"", os.path.join(filedir, 'invalid.json'))); # self.assertEqual(mols, []); #; # def test_read_not_object(self):; # """"""Test reading a JSON file that doesn't have a root object.""""""; # # Expected error log: JSON file should be a single object; # mols = list(pybel.readfile(""pcjson"", os.path.join(filedir, 'notobject.json'))); # self.assertEqual(mols, [])",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:542,Testability,assert,assertEqual,542,"# def test_read_invalid(self):; # """"""Test reading a file that is not valid JSON.""""""; # # Expected error log: JSON parse error at offset 37: Invalid escape character in string.; # mols = list(pybel.readfile(""pcjson"", os.path.join(filedir, 'invalid.json'))); # self.assertEqual(mols, []); #; # def test_read_not_object(self):; # """"""Test reading a JSON file that doesn't have a root object.""""""; # # Expected error log: JSON file should be a single object; # mols = list(pybel.readfile(""pcjson"", os.path.join(filedir, 'notobject.json'))); # self.assertEqual(mols, [])",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:25,Energy Efficiency,charge,charge,25,"""""""Test writing molecule charge.""""""",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:256,Energy Efficiency,charge,charge,256,"""""""; {; ""PC_Compounds"": [; {; ""atoms"": {; ""aid"": [1,2,3,4,5,6,7,8,9,10,11,12,13],; ""element"": [8,8,7,6,6,6,1,1,1,1,1,1,1]; },; ""bonds"": {; ""aid1"": [1,1,2,4,3,3,4,4,4,5,5,5],; ""aid2"": [6,13,6,3,11,12,5,6,7,8,9,10],; ""order"": [1,1,2,1,1,1,1,1,1,1,1,1]; },; ""charge"": 0,; ""coords"": [; {; ""aid"": [1,2,3,4,5,6,7,8,9,10,11,12,13],; ""conformers"": [; {; ""style"": {""aid1"": [4],""aid2"": [7],""annotation"": [6]},; ""x"": [; 5.1350,; 4.2690,; 2.53690,; 3.4030,; 3.4030,; 4.2690,; 3.4030,; 2.7830,; 3.4030,; 4.0230,; 2.0,; 2.53690,; 5.6720; ],; ""y"": [; -0.250,; 1.250,; 0.250,; -0.250,; -1.250,; 0.250,; 0.370,; -1.250,; -1.870,; -1.250,; -0.060,; 0.870,; 0.060; ]; }; ]; }; ],; ""id"": {""id"": {""cid"": 71080}},; ""stereo"": [; {; ""tetrahedral"": {; ""above"": 6,; ""below"": 5,; ""bottom"": 7,; ""center"": 4,; ""parity"": 1,; ""top"": 3,; ""type"": 1; }; }; ]; }; ]; }; """"""",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py:213,Energy Efficiency,charge,charge,213,"""""""; {; ""PC_Compounds"": [; {; ""atoms"": {""aid"": [1,2,3,4,5,6],""element"": [""cl"",""cl"",""c"",""c"",""h"",""h""]},; ""bonds"": {""aid1"": [1,2,3,3,4],""aid2"": [4,3,4,5,6],""order"": [""single"",""single"",""double"",""single"",""single""]},; ""charge"": 0,; ""coords"": [; {; ""aid"": [1,2,3,4,5,6],; ""conformers"": [; {; ""x"": [4.59810,2.0,2.8660,3.7320,2.8660,3.7320],; ""y"": [-0.250,0.250,-0.250,0.250,-0.870,0.870]; }; ]; }; ],; ""id"": {""id"": {""cid"": 638186}},; ""stereo"": [; {; ""planar"": {; ""left"": 3,; ""ltop"": 2,; ""lbottom"": 5,; ""right"": 4,; ""rtop"": 6,; ""rbottom"": 1,; ""parity"": ""opposite"",; ""type"": ""planar""; }; }; ]; }; ]; }; """"""",MatchSource.CODE_COMMENT,test/testpcjsonformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpcjsonformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py:114,Testability,test,tests,114,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testpdbformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testpdbformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py:283,Testability,test,test,283,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testpdbformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testpdbformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py:300,Testability,test,test,300,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testpdbformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testpdbformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py:334,Testability,test,test,334,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testpdbformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testpdbformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py:339,Testability,test,testpdbformat,339,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testpdbformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testpdbformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py:376,Testability,test,test,376,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testpdbformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testpdbformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py:462,Testability,test,tests,462,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testpdbformat.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testpdbformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py:15,Testability,test,tests,15,"""""""A series of tests relating to PDB""""""",MatchSource.CODE_COMMENT,test/testpdbformat.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testpdbformat.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py:114,Testability,test,tests,114,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testRInChI.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py:283,Testability,test,test,283,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testRInChI.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py:300,Testability,test,test,300,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testRInChI.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py:337,Testability,test,test,337,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testRInChI.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py:342,Testability,test,testsym,342,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testRInChI.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py:373,Testability,test,test,373,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testRInChI.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py:459,Testability,test,tests,459,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testRInChI.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py:15,Testability,test,tests,15,"""""""A series of tests relating to writing Reaction InChI""""""",MatchSource.CODE_COMMENT,test/testRInChI.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py:9,Testability,test,test,9,"""""""These test RXN to RInChI using the examples in the RInChI distrib""""""",MatchSource.CODE_COMMENT,test/testRInChI.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testRInChI.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py:549,Modifiability,variab,variables,549,"""""""Test the ability of openbabel to roundtrip various properties; (protonation, hybridization, aromaticity...) through various file formats; (sdf,pdb,mol2). On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pyroundtriptest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testroundtrip.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testroundtrip.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py:196,Testability,test,tests,196,"""""""Test the ability of openbabel to roundtrip various properties; (protonation, hybridization, aromaticity...) through various file formats; (sdf,pdb,mol2). On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pyroundtriptest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testroundtrip.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testroundtrip.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py:382,Testability,test,test,382,"""""""Test the ability of openbabel to roundtrip various properties; (protonation, hybridization, aromaticity...) through various file formats; (sdf,pdb,mol2). On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pyroundtriptest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testroundtrip.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testroundtrip.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py:434,Testability,test,test,434,"""""""Test the ability of openbabel to roundtrip various properties; (protonation, hybridization, aromaticity...) through various file formats; (sdf,pdb,mol2). On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pyroundtriptest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testroundtrip.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testroundtrip.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py:468,Testability,test,test,468,"""""""Test the ability of openbabel to roundtrip various properties; (protonation, hybridization, aromaticity...) through various file formats; (sdf,pdb,mol2). On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pyroundtriptest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testroundtrip.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testroundtrip.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py:473,Testability,test,testroundtrip,473,"""""""Test the ability of openbabel to roundtrip various properties; (protonation, hybridization, aromaticity...) through various file formats; (sdf,pdb,mol2). On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pyroundtriptest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testroundtrip.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testroundtrip.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py:694,Testability,test,test,694,"""""""Test the ability of openbabel to roundtrip various properties; (protonation, hybridization, aromaticity...) through various file formats; (sdf,pdb,mol2). On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pyroundtriptest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testroundtrip.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testroundtrip.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py:780,Testability,test,tests,780,"""""""Test the ability of openbabel to roundtrip various properties; (protonation, hybridization, aromaticity...) through various file formats; (sdf,pdb,mol2). On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pyroundtriptest -VV. The runtime directory is ${CMAKE_SRC_DIR}/test. You could also ""chdir"" into build and run the test file directly:; python ../../test/testroundtrip.py. In this latter case, you will need to set the environment variables; PYTHONPATH, LD_LIBRARY_PATH, BABEL_LIBDIR and BABEL_DATADIR beforehand.; The CMake script does this automatically. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testroundtrip.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py:32,Testability,test,test,32,"'''Given a file, convert it and test for equivalence.; This is a standalone function so it can be forked off'''",MatchSource.CODE_COMMENT,test/testroundtrip.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py:49,Testability,test,test,49,"#sometimes openbabel segfaults, so fork off each test ",MatchSource.CODE_COMMENT,test/testroundtrip.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testroundtrip.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py:114,Testability,test,tests,114,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsmartssym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testsmartssym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py:283,Testability,test,test,283,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsmartssym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testsmartssym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py:300,Testability,test,test,300,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsmartssym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testsmartssym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py:337,Testability,test,test,337,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsmartssym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testsmartssym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py:342,Testability,test,testsmartssym,342,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsmartssym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testsmartssym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py:379,Testability,test,test,379,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsmartssym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testsmartssym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py:465,Testability,test,tests,465,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsmartssym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testsmartssym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py:30,Testability,test,tests,30,"""""""Base class for a series of tests relating to symmetry""""""",MatchSource.CODE_COMMENT,test/testsmartssym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsmartssym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:114,Testability,test,tests,114,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:283,Testability,test,test,283,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:300,Testability,test,test,300,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:337,Testability,test,test,337,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:342,Testability,test,testsym,342,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:373,Testability,test,test,373,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:459,Testability,test,tests,459,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testsym.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:30,Testability,test,tests,30,"""""""Base class for a series of tests relating to symmetry""""""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:15,Testability,test,tests,15,"""""""A series of tests relating to tetrahedral symmetry""""""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:15,Testability,test,tests,15,"""""""A series of tests relating to cistrans symmetry""""""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:15,Testability,test,tests,15,"""""""A series of tests relating to tet symmetry involving a lone pair""""""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:15,Testability,test,tests,15,"""""""A series of tests relating to tet symmetry involving a lone pair""""""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:15,Testability,test,tests,15,"""""""A series of tests relating to file format conversions and symmetry""""""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:67,Testability,test,test,67,"# Since the XYZ format does not trigger stereo perception,; # this test makes sure that the SMILES and 3D MDL formats; # perceive stereo themselves.",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:6,Testability,test,test,6,"# The test files have the correct canonical SMILES string; # stored in the data field ""smiles""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:6,Testability,test,test,6,"# The test files have the correct canonical SMILES string; # stored in the data field ""smiles""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:10,Testability,test,tests,10,"""""""Random tests relating to roundtripping stereochemistry""""""",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:121,Testability,test,test,121,"# Note to self: Need to ensure that roundtripping through the various; # 2D and 3D formats works. In the meanwhile, this test at least ensures; # that SMILES reading and writing works fine.",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:23,Safety,avoid,avoid,23,"# remove base class to avoid tests",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py:29,Testability,test,tests,29,"# remove base class to avoid tests",MatchSource.CODE_COMMENT,test/testsym.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testsym.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py:114,Testability,test,tests,114,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testunique.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testunique.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py:283,Testability,test,test,283,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testunique.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testunique.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py:300,Testability,test,test,300,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testunique.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testunique.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py:337,Testability,test,test,337,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testunique.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testunique.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py:342,Testability,test,testunique,342,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testunique.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testunique.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py:376,Testability,test,test,376,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testunique.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testunique.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py:462,Testability,test,tests,462,"""""""Test OpenBabel executables from Python. Note: Python bindings not used. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pytest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../../test/testunique.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/testunique.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py:15,Testability,test,tests,15,"""""""A series of tests relating to obabel --unique""""""",MatchSource.CODE_COMMENT,test/testunique.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/testunique.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/test_pybel.py:74,Testability,test,tests,74,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testbindings.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/test_pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/test_pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/test_pybel.py:247,Testability,test,test,247,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testbindings.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/test_pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/test_pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/test_pybel.py:264,Testability,test,test,264,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testbindings.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/test_pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/test_pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/test_pybel.py:298,Testability,test,test,298,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testbindings.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/test_pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/test_pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/test_pybel.py:303,Testability,test,testbindings,303,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testbindings.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/test_pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/test_pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/test_pybel.py:339,Testability,test,test,339,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testbindings.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/test_pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/test_pybel.py
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/test_pybel.py:425,Testability,test,tests,425,"""""""Test OpenBabel Python bindings. On Windows or Linux, you can run these tests at the commandline; in the build folder with:; ""C:\Program Files\CMake 2.6\bin\ctest.exe"" -C CTestTestfile.cmake; -R pybindtest -VV. You could also ""chdir"" into build/test and run the test file directly:; python ../../test/testbindings.py. In both cases, the test file is run directly from the source folder,; and so you can quickly develop the tests and try them out.; """"""",MatchSource.CODE_COMMENT,test/test_pybel.py,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/test_pybel.py
